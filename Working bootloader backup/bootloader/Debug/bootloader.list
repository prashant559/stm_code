
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3c4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800b610  0800b610  0000c610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9c0  0800b9c0  0000d084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9c0  0800b9c0  0000c9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9c8  0800b9c8  0000d084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9c8  0800b9c8  0000c9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9cc  0800b9cc  0000c9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800b9d0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000084  0800ba54  0000d084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800ba54  0000d398  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013943  00000000  00000000  0000d0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c46  00000000  00000000  000209fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00023648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a89  00000000  00000000  000243f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032b98  00000000  00000000  00024e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013afc  00000000  00000000  00057a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00137bd0  00000000  00000000  0006b515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a30e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  001a3128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001a7264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000084 	.word	0x20000084
 8000268:	00000000 	.word	0x00000000
 800026c:	0800b5f8 	.word	0x0800b5f8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000088 	.word	0x20000088
 8000288:	0800b5f8 	.word	0x0800b5f8

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetSectorAndBank>:




// Function to calculate sector and bank from address
void GetSectorAndBank(uint32_t address, uint32_t *sector, uint32_t *bank) {
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
    if (address < FLASH_BASE_BANK2) {
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80005b6:	d209      	bcs.n	80005cc <GetSectorAndBank+0x28>
        // Address is in Bank 1
        *bank = FLASH_BANK_1;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2201      	movs	r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
        *sector = (address - FLASH_BASE_BANK1) / FLASH_SECTOR_SIZE;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80005c4:	0b5a      	lsrs	r2, r3, #13
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	601a      	str	r2, [r3, #0]
    } else {
        // Address is in Bank 2
        *bank = FLASH_BANK_2;
        *sector = (address - FLASH_BASE_BANK2) / FLASH_SECTOR_SIZE;
    }
}
 80005ca:	e008      	b.n	80005de <GetSectorAndBank+0x3a>
        *bank = FLASH_BANK_2;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2202      	movs	r2, #2
 80005d0:	601a      	str	r2, [r3, #0]
        *sector = (address - FLASH_BASE_BANK2) / FLASH_SECTOR_SIZE;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f1a3 6301 	sub.w	r3, r3, #135266304	@ 0x8100000
 80005d8:	0b5a      	lsrs	r2, r3, #13
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <flash_erase>:
/**
 * @brief   This function erases the memory.
 * @param   address: First address to be erased (the last is the end of the flash).
 * @return  status: Report about the success of the erasing.
 */
flash_status flash_erase(uint32_t address) {
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b08a      	sub	sp, #40	@ 0x28
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]

	HAL_FLASH_Unlock();
 80005f2:	f001 fab5 	bl	8001b60 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef eraseInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
	uint32_t pageError = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
	uint32_t sector, bank;
	while(address < 0x08100000)
 8000608:	e033      	b.n	8000672 <flash_erase+0x88>
	{
		// Calculate sector and bank from the address
		GetSectorAndBank(address, &sector, &bank);
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ffc5 	bl	80005a4 <GetSectorAndBank>

		// Validate sector and address range
		if (sector >= FLASH_TOTAL_SECTORS || address > FLASH_BANK2_END_ADDRESS) {
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	2bff      	cmp	r3, #255	@ 0xff
 800061e:	d803      	bhi.n	8000628 <flash_erase+0x3e>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8000626:	d303      	bcc.n	8000630 <flash_erase+0x46>
			HAL_FLASH_Lock();
 8000628:	f001 fac0 	bl	8001bac <HAL_FLASH_Lock>
			return FLASH_ERROR;
 800062c:	23ff      	movs	r3, #255	@ 0xff
 800062e:	e027      	b.n	8000680 <flash_erase+0x96>
		}

		// Configure the erase structure
		eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000630:	2304      	movs	r3, #4
 8000632:	61bb      	str	r3, [r7, #24]
		eraseInitStruct.Banks = bank;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	61fb      	str	r3, [r7, #28]
		eraseInitStruct.Sector = sector;
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	623b      	str	r3, [r7, #32]
		eraseInitStruct.NbSectors = 1;  // Erase one sector at a time
 800063c:	2301      	movs	r3, #1
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop

		// Perform Flash erase
		__disable_irq();

		if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK) {
 8000644:	f107 0214 	add.w	r2, r7, #20
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fc12 	bl	8001e78 <HAL_FLASHEx_Erase>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <flash_erase+0x7c>
  __ASM volatile ("cpsie i" : : : "memory");
 800065a:	b662      	cpsie	i
}
 800065c:	bf00      	nop
			__enable_irq();
			HAL_FLASH_Lock();
 800065e:	f001 faa5 	bl	8001bac <HAL_FLASH_Lock>
			return FLASH_ERROR;
 8000662:	23ff      	movs	r3, #255	@ 0xff
 8000664:	e00c      	b.n	8000680 <flash_erase+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
 8000666:	b662      	cpsie	i
}
 8000668:	bf00      	nop
		}

		__enable_irq();
		address = address + 0x2000;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000670:	607b      	str	r3, [r7, #4]
	while(address < 0x08100000)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8000678:	d3c7      	bcc.n	800060a <flash_erase+0x20>
	}

	HAL_FLASH_Lock();
 800067a:	f001 fa97 	bl	8001bac <HAL_FLASH_Lock>
	return FLASH_OK;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3728      	adds	r7, #40	@ 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <flash_jump_to_app>:
/**
 * @brief   Actually jumps to the user application.
 * @param   void
 * @return  void
 */
void flash_jump_to_app(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	//	 Function pointer to the address of the user application.
	fnc_ptr jump_to_app;
	jump_to_app =(fnc_ptr) (*(volatile uint32_t*) (FLASH_APP_START_ADDRESS + 4u));
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <flash_jump_to_app+0x2c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	607b      	str	r3, [r7, #4]

	HAL_DeInit();
 8000694:	f000 feac 	bl	80013f0 <HAL_DeInit>
	//	 Change the main stack pointer.
	__set_MSP(*(volatile uint32_t*) FLASH_APP_START_ADDRESS);
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <flash_jump_to_app+0x30>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f383 8808 	msr	MSP, r3
}
 80006a4:	bf00      	nop
	jump_to_app();
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4798      	blx	r3
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	0800c004 	.word	0x0800c004
 80006b8:	0800c000 	.word	0x0800c000

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fe6e 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f83c 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f8f6 	bl	80008b8 <MX_GPIO_Init>
  MX_UART5_Init();
 80006cc:	f000 f8a8 	bl	8000820 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	UART_InitAllHandlers();
 80006d0:	f000 f96a 	bl	80009a8 <UART_InitAllHandlers>
	  uart_transmit_str((uint8_t*)"\n\r================================\n\r");
 80006d4:	4811      	ldr	r0, [pc, #68]	@ (800071c <main+0x60>)
 80006d6:	f000 fc49 	bl	8000f6c <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"UART Bootloader\n\r");
 80006da:	4811      	ldr	r0, [pc, #68]	@ (8000720 <main+0x64>)
 80006dc:	f000 fc46 	bl	8000f6c <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"Entering into bootloader mode, open Tera Term and send binary file in XMODEM mode\n\r");
 80006e0:	4810      	ldr	r0, [pc, #64]	@ (8000724 <main+0x68>)
 80006e2:	f000 fc43 	bl	8000f6c <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"================================\n\r\n\r");
 80006e6:	4810      	ldr	r0, [pc, #64]	@ (8000728 <main+0x6c>)
 80006e8:	f000 fc40 	bl	8000f6c <uart_transmit_str>

	  circular_buffer_init(&uart_buffer);
 80006ec:	480f      	ldr	r0, [pc, #60]	@ (800072c <main+0x70>)
 80006ee:	f000 f989 	bl	8000a04 <circular_buffer_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
#if 1
			flash_erase(APPLICATION_START_ADDRESS);
 80006f2:	480f      	ldr	r0, [pc, #60]	@ (8000730 <main+0x74>)
 80006f4:	f7ff ff79 	bl	80005ea <flash_erase>
		  uart_transmit_str((uint8_t*)"Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
 80006f8:	480e      	ldr	r0, [pc, #56]	@ (8000734 <main+0x78>)
 80006fa:	f000 fc37 	bl	8000f6c <uart_transmit_str>
		  xmodem_receive(&huart5);
 80006fe:	480e      	ldr	r0, [pc, #56]	@ (8000738 <main+0x7c>)
 8000700:	f000 fcda 	bl	80010b8 <xmodem_receive>
			HAL_Delay(10000);
 8000704:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000708:	f000 ff54 	bl	80015b4 <HAL_Delay>
			circular_buffer_init(&uart_buffer);
 800070c:	4807      	ldr	r0, [pc, #28]	@ (800072c <main+0x70>)
 800070e:	f000 f979 	bl	8000a04 <circular_buffer_init>
		  uart_transmit_str((uint8_t*)"\n\rFailed... Please try again.\n\r");
 8000712:	480a      	ldr	r0, [pc, #40]	@ (800073c <main+0x80>)
 8000714:	f000 fc2a 	bl	8000f6c <uart_transmit_str>
			flash_erase(APPLICATION_START_ADDRESS);
 8000718:	bf00      	nop
 800071a:	e7ea      	b.n	80006f2 <main+0x36>
 800071c:	0800b610 	.word	0x0800b610
 8000720:	0800b638 	.word	0x0800b638
 8000724:	0800b64c 	.word	0x0800b64c
 8000728:	0800b6a0 	.word	0x0800b6a0
 800072c:	20000138 	.word	0x20000138
 8000730:	0800c000 	.word	0x0800c000
 8000734:	0800b6c8 	.word	0x0800b6c8
 8000738:	200000a0 	.word	0x200000a0
 800073c:	0800b718 	.word	0x0800b718

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09c      	sub	sp, #112	@ 0x70
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2250      	movs	r2, #80	@ 0x50
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f00a f808 	bl	800a764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000766:	4b2c      	ldr	r3, [pc, #176]	@ (8000818 <SystemClock_Config+0xd8>)
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	4a2b      	ldr	r2, [pc, #172]	@ (8000818 <SystemClock_Config+0xd8>)
 800076c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000770:	6113      	str	r3, [r2, #16]
 8000772:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <SystemClock_Config+0xd8>)
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800077e:	bf00      	nop
 8000780:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <SystemClock_Config+0xd8>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	2b08      	cmp	r3, #8
 800078a:	d1f9      	bne.n	8000780 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800079a:	2303      	movs	r3, #3
 800079c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 80007a2:	2350      	movs	r3, #80	@ 0x50
 80007a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80007b2:	2308      	movs	r3, #8
 80007b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fdae 	bl	8002324 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007ce:	f000 f964 	bl	8000a9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	231f      	movs	r3, #31
 80007d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2303      	movs	r3, #3
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	2105      	movs	r1, #5
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 f9cf 	bl	8002b94 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007fc:	f000 f94d 	bl	8000a9a <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <SystemClock_Config+0xdc>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <SystemClock_Config+0xdc>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	3770      	adds	r7, #112	@ 0x70
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	44020800 	.word	0x44020800
 800081c:	40022000 	.word	0x40022000

08000820 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000824:	4b22      	ldr	r3, [pc, #136]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000826:	4a23      	ldr	r2, [pc, #140]	@ (80008b4 <MX_UART5_Init+0x94>)
 8000828:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_UART5_Init+0x90>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_UART5_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_UART5_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_UART5_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_UART5_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000868:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <MX_UART5_Init+0x90>)
 800086a:	f007 fd27 	bl	80082bc <HAL_UART_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000874:	f000 f911 	bl	8000a9a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_UART5_Init+0x90>)
 800087c:	f009 fc7d 	bl	800a17a <HAL_UARTEx_SetTxFifoThreshold>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000886:	f000 f908 	bl	8000a9a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <MX_UART5_Init+0x90>)
 800088e:	f009 fcb2 	bl	800a1f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 f8ff 	bl	8000a9a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_UART5_Init+0x90>)
 800089e:	f009 fc33 	bl	800a108 <HAL_UARTEx_DisableFifoMode>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f8f7 	bl	8000a9a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000a0 	.word	0x200000a0
 80008b4:	40005000 	.word	0x40005000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	4b33      	ldr	r3, [pc, #204]	@ (800099c <MX_GPIO_Init+0xe4>)
 80008d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d4:	4a31      	ldr	r2, [pc, #196]	@ (800099c <MX_GPIO_Init+0xe4>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <MX_GPIO_Init+0xe4>)
 80008e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e4:	f003 0310 	and.w	r3, r3, #16
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ec:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <MX_GPIO_Init+0xe4>)
 80008ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f2:	4a2a      	ldr	r2, [pc, #168]	@ (800099c <MX_GPIO_Init+0xe4>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008fc:	4b27      	ldr	r3, [pc, #156]	@ (800099c <MX_GPIO_Init+0xe4>)
 80008fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b24      	ldr	r3, [pc, #144]	@ (800099c <MX_GPIO_Init+0xe4>)
 800090c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000910:	4a22      	ldr	r2, [pc, #136]	@ (800099c <MX_GPIO_Init+0xe4>)
 8000912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000916:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <MX_GPIO_Init+0xe4>)
 800091c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_GPIO_Init+0xe4>)
 800092a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092e:	4a1b      	ldr	r2, [pc, #108]	@ (800099c <MX_GPIO_Init+0xe4>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_GPIO_Init+0xe4>)
 800093a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_GPIO_Init+0xe4>)
 8000948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094c:	4a13      	ldr	r2, [pc, #76]	@ (800099c <MX_GPIO_Init+0xe4>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_GPIO_Init+0xe4>)
 8000958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : GPIO_3_Pin */
  GPIO_InitStruct.Pin = GPIO_3_Pin;
 8000964:	2310      	movs	r3, #16
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	480a      	ldr	r0, [pc, #40]	@ (80009a0 <MX_GPIO_Init+0xe8>)
 8000978:	f001 fb82 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_2_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin;
 800097c:	2308      	movs	r3, #8
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_2_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_GPIO_Init+0xec>)
 8000990:	f001 fb76 	bl	8002080 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	@ 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	44020c00 	.word	0x44020c00
 80009a0:	42021000 	.word	0x42021000
 80009a4:	42020c00 	.word	0x42020c00

080009a8 <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */

void UART_InitAllHandlers(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart5, &uart5_rx_buffer[0], sizeof(uart5_rx_buffer));
 80009ac:	2201      	movs	r2, #1
 80009ae:	4903      	ldr	r1, [pc, #12]	@ (80009bc <UART_InitAllHandlers+0x14>)
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <UART_InitAllHandlers+0x18>)
 80009b2:	f007 fd71 	bl	8008498 <HAL_UART_Receive_IT>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000134 	.word	0x20000134
 80009c0:	200000a0 	.word	0x200000a0

080009c4 <HAL_UART_RxCpltCallback>:
		return GPIO_PIN_SET;

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

 if (huart->Instance == UART5) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_UART_RxCpltCallback+0x30>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d10a      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x28>
		// Handle data received from UART5
		HAL_UART_Receive_IT(&huart5, &uart5_rx_buffer[0], 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	4907      	ldr	r1, [pc, #28]	@ (80009f8 <HAL_UART_RxCpltCallback+0x34>)
 80009da:	4808      	ldr	r0, [pc, #32]	@ (80009fc <HAL_UART_RxCpltCallback+0x38>)
 80009dc:	f007 fd5c 	bl	8008498 <HAL_UART_Receive_IT>

		 circular_buffer_write(&uart_buffer, uart5_rx_buffer[0]);
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <HAL_UART_RxCpltCallback+0x34>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <HAL_UART_RxCpltCallback+0x3c>)
 80009e8:	f000 f822 	bl	8000a30 <circular_buffer_write>

	}

}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005000 	.word	0x40005000
 80009f8:	20000134 	.word	0x20000134
 80009fc:	200000a0 	.word	0x200000a0
 8000a00:	20000138 	.word	0x20000138

08000a04 <circular_buffer_init>:

void circular_buffer_init(CircularBuffer *cb) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    cb->head = 0;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    cb->tail = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    cb->full = false;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <circular_buffer_write>:



void circular_buffer_write(CircularBuffer *cb, uint8_t value) {
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
    cb->data[cb->head] = value;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	78f9      	ldrb	r1, [r7, #3]
 8000a46:	54d1      	strb	r1, [r2, r3]

    // Advance the head pointer
    cb->head = (cb->head + 1) % BUFFER_SIZE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

    if (cb->full) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d007      	beq.n	8000a72 <circular_buffer_write+0x42>
        // If the buffer is full, advance the tail pointer
        cb->tail = (cb->tail + 1) % BUFFER_SIZE;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    }

    // Check if the buffer is full
    cb->full = (cb->head == cb->tail);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	bf0c      	ite	eq
 8000a82:	2301      	moveq	r3, #1
 8000a84:	2300      	movne	r3, #0
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9e:	b672      	cpsid	i
}
 8000aa0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000aa2:	bf00      	nop
 8000aa4:	e7fd      	b.n	8000aa2 <Error_Handler+0x8>

08000aa6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0cc      	sub	sp, #304	@ 0x130
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000abe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ac2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ad8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000adc:	4618      	mov	r0, r3
 8000ade:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f009 fe3d 	bl	800a764 <memset>
  if(huart->Instance==UART5)
 8000aea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000aee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a36      	ldr	r2, [pc, #216]	@ (8000bd0 <HAL_UART_MspInit+0x11c>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d164      	bne.n	8000bc6 <HAL_UART_MspInit+0x112>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000afc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b00:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000b04:	f04f 0210 	mov.w	r2, #16
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b14:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b18:	2200      	movs	r2, #0
 8000b1a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fb79 	bl	8003218 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000b2c:	f7ff ffb5 	bl	8000a9a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <HAL_UART_MspInit+0x120>)
 8000b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b36:	4a27      	ldr	r2, [pc, #156]	@ (8000bd4 <HAL_UART_MspInit+0x120>)
 8000b38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b3c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b40:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <HAL_UART_MspInit+0x120>)
 8000b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b46:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000b4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b4e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b58:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000b5c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <HAL_UART_MspInit+0x120>)
 8000b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b64:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd4 <HAL_UART_MspInit+0x120>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <HAL_UART_MspInit+0x120>)
 8000b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b74:	f003 0202 	and.w	r2, r3, #2
 8000b78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b7c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b86:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b8a:	681b      	ldr	r3, [r3, #0]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b8c:	2360      	movs	r3, #96	@ 0x60
 8000b8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000ba4:	230e      	movs	r3, #14
 8000ba6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4809      	ldr	r0, [pc, #36]	@ (8000bd8 <HAL_UART_MspInit+0x124>)
 8000bb2:	f001 fa65 	bl	8002080 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	203e      	movs	r0, #62	@ 0x3e
 8000bbc:	f000 fdd6 	bl	800176c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000bc0:	203e      	movs	r0, #62	@ 0x3e
 8000bc2:	f000 fded 	bl	80017a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8000bc6:	bf00      	nop
 8000bc8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40005000 	.word	0x40005000
 8000bd4:	44020c00 	.word	0x44020c00
 8000bd8:	42020400 	.word	0x42020400

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0cc      	sub	sp, #304	@ 0x130
 8000be0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	// Capture the register values during NMI
	uint32_t *stackFrame;
	__asm volatile(
 8000be2:	f01e 0f04 	tst.w	lr, #4
 8000be6:	bf0c      	ite	eq
 8000be8:	f3ef 8308 	mrseq	r3, MSP
 8000bec:	f3ef 8309 	mrsne	r3, PSP
 8000bf0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			"MRSNE %0, PSP \n"// Process Stack Pointer (PSP)
			: "=r" (stackFrame)
	);

	// Extract registers from the stack frame
	uint32_t R0 = stackFrame[0];
 8000bf4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t R1 = stackFrame[1];
 8000bfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t R2 = stackFrame[2];
 8000c08:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t R3 = stackFrame[3];
 8000c12:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t R12 = stackFrame[4];
 8000c1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t LR = stackFrame[5];   // Link Register
 8000c26:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint32_t PC = stackFrame[6];   // Program Counter
 8000c30:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t xPSR = stackFrame[7]; // xPSR
 8000c3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Prepare the message to send over UART
	char msg[256];
	int len = sprintf(msg,
 8000c44:	4638      	mov	r0, r7
 8000c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000c56:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000c5a:	4913      	ldr	r1, [pc, #76]	@ (8000ca8 <NMI_Handler+0xcc>)
 8000c5c:	f009 fc8a 	bl	800a574 <siprintf>
 8000c60:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
			"NMI Handler: R0=0x%08X, R1=0x%08X, R2=0x%08X, R3=0x%08X\n", R0, R1,
			R2, R3);
	len += sprintf(msg + len, "R12=0x%08X, LR=0x%08X, PC=0x%08X, xPSR=0x%08X\n",
 8000c64:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000c68:	463a      	mov	r2, r7
 8000c6a:	18d0      	adds	r0, r2, r3
 8000c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c7c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000c80:	490a      	ldr	r1, [pc, #40]	@ (8000cac <NMI_Handler+0xd0>)
 8000c82:	f009 fc77 	bl	800a574 <siprintf>
 8000c86:	4602      	mov	r2, r0
 8000c88:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			R12, LR, PC, xPSR);

	// Send the message over UART (you can change huart1 to your actual UART handle)
	HAL_UART_Transmit(&huart5, (uint8_t*) msg, len, HAL_MAX_DELAY);
 8000c92:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4639      	mov	r1, r7
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	4804      	ldr	r0, [pc, #16]	@ (8000cb0 <NMI_Handler+0xd4>)
 8000ca0:	f007 fb5c 	bl	800835c <HAL_UART_Transmit>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <NMI_Handler+0xc8>
 8000ca8:	0800b794 	.word	0x0800b794
 8000cac:	0800b7d0 	.word	0x0800b7d0
 8000cb0:	200000a0 	.word	0x200000a0

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {

    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  uart_transmit_str((uint8_t*)"\n\Failure\n\r");
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <HardFault_Handler+0x10>)
 8000cba:	f000 f957 	bl	8000f6c <uart_transmit_str>
  {
 8000cbe:	bf00      	nop
 8000cc0:	e7fa      	b.n	8000cb8 <HardFault_Handler+0x4>
 8000cc2:	bf00      	nop
 8000cc4:	0800b800 	.word	0x0800b800

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <MemManage_Handler+0x4>

08000cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <UsageFault_Handler+0x4>

08000ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0e:	f000 fc31 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000d1c:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <UART5_IRQHandler+0x10>)
 8000d1e:	f007 fc1d 	bl	800855c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000a0 	.word	0x200000a0

08000d2c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e00a      	b.n	8000d54 <_read+0x28>
		*ptr++ = __io_getchar();
 8000d3e:	f3af 8000 	nop.w
 8000d42:	4601      	mov	r1, r0
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf0      	blt.n	8000d3e <_read+0x12>
	}

	return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e009      	b.n	8000d8c <_write+0x26>
		__io_putchar(*ptr++);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf1      	blt.n	8000d78 <_write+0x12>
	}
	return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_close>:

int _close(int file) {
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_fstat>:

int _fstat(int file, struct stat *st) {
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_isatty>:

int _isatty(int file) {
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000e10:	4a14      	ldr	r2, [pc, #80]	@ (8000e64 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	@ (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d207      	bcs.n	8000e48 <_sbrk+0x40>
		errno = ENOMEM;
 8000e38:	f009 fce2 	bl	800a800 <__errno>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	220c      	movs	r2, #12
 8000e40:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e009      	b.n	8000e5c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <_sbrk+0x64>)
 8000e58:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200a0000 	.word	0x200a0000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	20000244 	.word	0x20000244
 8000e70:	20000398 	.word	0x20000398

08000e74 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */

void SystemInit(void) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
	uint32_t reg_opsr;

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8000e7a:	4b35      	ldr	r3, [pc, #212]	@ (8000f50 <SystemInit+0xdc>)
 8000e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e80:	4a33      	ldr	r2, [pc, #204]	@ (8000f50 <SystemInit+0xdc>)
 8000e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e86:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR = RCC_CR_HSION;
 8000e8a:	4b32      	ldr	r3, [pc, #200]	@ (8000f54 <SystemInit+0xe0>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR1 = 0U;
 8000e90:	4b30      	ldr	r3, [pc, #192]	@ (8000f54 <SystemInit+0xe0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
	RCC->CFGR2 = 0U;
 8000e96:	4b2f      	ldr	r3, [pc, #188]	@ (8000f54 <SystemInit+0xe0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]

	/* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f54 <SystemInit+0xe0>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	492c      	ldr	r1, [pc, #176]	@ (8000f54 <SystemInit+0xe0>)
 8000ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f58 <SystemInit+0xe4>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON |
			RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

	/* Reset PLLxCFGR register */
	RCC->PLL1CFGR = 0U;
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <SystemInit+0xe0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC->PLL2CFGR = 0U;
 8000eae:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <SystemInit+0xe0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
	RCC->PLL3CFGR = 0U;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <SystemInit+0xe0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280U;
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <SystemInit+0xe0>)
 8000ebc:	4a27      	ldr	r2, [pc, #156]	@ (8000f5c <SystemInit+0xe8>)
 8000ebe:	635a      	str	r2, [r3, #52]	@ 0x34
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000U;
 8000ec0:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <SystemInit+0xe0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	639a      	str	r2, [r3, #56]	@ 0x38
	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280U;
 8000ec6:	4b23      	ldr	r3, [pc, #140]	@ (8000f54 <SystemInit+0xe0>)
 8000ec8:	4a24      	ldr	r2, [pc, #144]	@ (8000f5c <SystemInit+0xe8>)
 8000eca:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL2FRACR register */
	RCC->PLL2FRACR = 0x00000000U;
 8000ecc:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <SystemInit+0xe0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280U;
 8000ed2:	4b20      	ldr	r3, [pc, #128]	@ (8000f54 <SystemInit+0xe0>)
 8000ed4:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <SystemInit+0xe8>)
 8000ed6:	645a      	str	r2, [r3, #68]	@ 0x44
	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000U;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <SystemInit+0xe0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

	/* Reset HSEBYP bit */
	RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ede:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <SystemInit+0xe0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f54 <SystemInit+0xe0>)
 8000ee4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0U;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <SystemInit+0xe0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	651a      	str	r2, [r3, #80]	@ 0x50

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ef0:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <SystemInit+0xdc>)
 8000ef2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ef6:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

	/* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
	reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <SystemInit+0xec>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000f00:	607b      	str	r3, [r7, #4]
	if ((reg_opsr == FLASH_OPSR_CODE_OP)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000f08:	d003      	beq.n	8000f12 <SystemInit+0x9e>
			|| (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1))) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000f10:	d117      	bne.n	8000f42 <SystemInit+0xce>
		/* Check FLASH Option Control Register access */
		if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U) {
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <SystemInit+0xec>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <SystemInit+0xb6>
			/* Authorizes the Option Byte registers programming */
			FLASH->OPTKEYR = 0x08192A3BU;
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <SystemInit+0xec>)
 8000f20:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <SystemInit+0xf0>)
 8000f22:	60da      	str	r2, [r3, #12]
			FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <SystemInit+0xec>)
 8000f26:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <SystemInit+0xf4>)
 8000f28:	60da      	str	r2, [r3, #12]
		}
		/* Launch the option bytes change operation */
		FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <SystemInit+0xec>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f60 <SystemInit+0xec>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	61d3      	str	r3, [r2, #28]

		/* Lock the FLASH Option Control Register access */
		FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <SystemInit+0xec>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a09      	ldr	r2, [pc, #36]	@ (8000f60 <SystemInit+0xec>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	61d3      	str	r3, [r2, #28]
	}
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	44020c00 	.word	0x44020c00
 8000f58:	eae2eae3 	.word	0xeae2eae3
 8000f5c:	01010280 	.word	0x01010280
 8000f60:	40022000 	.word	0x40022000
 8000f64:	08192a3b 	.word	0x08192a3b
 8000f68:	4c5d6e7f 	.word	0x4c5d6e7f

08000f6c <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 8000f74:	23ff      	movs	r3, #255	@ 0xff
 8000f76:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 8000f7c:	e002      	b.n	8000f84 <uart_transmit_str+0x18>
  {
    length++;
 8000f7e:	89bb      	ldrh	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 8000f84:	89bb      	ldrh	r3, [r7, #12]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f6      	bne.n	8000f7e <uart_transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart5, data, length, UART_TIMEOUT))
 8000f90:	89ba      	ldrh	r2, [r7, #12]
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	4806      	ldr	r0, [pc, #24]	@ (8000fb4 <uart_transmit_str+0x48>)
 8000f9a:	f007 f9df 	bl	800835c <HAL_UART_Transmit>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <uart_transmit_str+0x3c>
  {
    status = UART_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000a0 	.word	0x200000a0

08000fb8 <calculate_crc>:


extern CircularBuffer uart_buffer;

/* CRC16 Calculation */
static uint16_t calculate_crc(const uint8_t *data, uint16_t length) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	81bb      	strh	r3, [r7, #12]
 8000fcc:	e027      	b.n	800101e <calculate_crc+0x66>
        crc ^= (data[i] << 8);
 8000fce:	89bb      	ldrh	r3, [r7, #12]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fde:	4053      	eors	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	72fb      	strb	r3, [r7, #11]
 8000fe8:	e013      	b.n	8001012 <calculate_crc+0x5a>
            if (crc & 0x8000) {
 8000fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da09      	bge.n	8001006 <calculate_crc+0x4e>
                crc = (crc << 1) ^ 0x1021;
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000ffc:	f083 0301 	eor.w	r3, r3, #1
 8001000:	b21b      	sxth	r3, r3
 8001002:	81fb      	strh	r3, [r7, #14]
 8001004:	e002      	b.n	800100c <calculate_crc+0x54>
            } else {
                crc <<= 1;
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	3301      	adds	r3, #1
 8001010:	72fb      	strb	r3, [r7, #11]
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	2b07      	cmp	r3, #7
 8001016:	d9e8      	bls.n	8000fea <calculate_crc+0x32>
    for (uint16_t i = 0; i < length; i++) {
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	81bb      	strh	r3, [r7, #12]
 800101e:	89ba      	ldrh	r2, [r7, #12]
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	429a      	cmp	r2, r3
 8001024:	d3d3      	bcc.n	8000fce <calculate_crc+0x16>
            }
        }
    }
    return crc;
 8001026:	89fb      	ldrh	r3, [r7, #14]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <xmodem_receive_packet>:

/* Receive a single XMODEM packet */
static bool xmodem_receive_packet(UART_HandleTypeDef *huart, uint8_t *packet, uint8_t *packet_num) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
//    return true;
//


    /* Wait for SOH */
    circular_buffer_read_length(&uart_buffer, &header,3);
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	2203      	movs	r2, #3
 8001046:	4619      	mov	r1, r3
 8001048:	481a      	ldr	r0, [pc, #104]	@ (80010b4 <xmodem_receive_packet+0x80>)
 800104a:	f000 f8f1 	bl	8001230 <circular_buffer_read_length>
    if(header[0] != SOH){
 800104e:	7e3b      	ldrb	r3, [r7, #24]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d001      	beq.n	8001058 <xmodem_receive_packet+0x24>
        return false;
 8001054:	2300      	movs	r3, #0
 8001056:	e029      	b.n	80010ac <xmodem_receive_packet+0x78>
    }

    /* Read the packet data */
    if(circular_buffer_read_length(&uart_buffer, packet, 128) ){
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	4815      	ldr	r0, [pc, #84]	@ (80010b4 <xmodem_receive_packet+0x80>)
 800105e:	f000 f8e7 	bl	8001230 <circular_buffer_read_length>
       // return false;
    }

    /* Read the CRC */
    uint8_t crc_bytes[2];
    if(circular_buffer_read_length(&uart_buffer, crc_bytes, 2)) {
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2202      	movs	r2, #2
 8001068:	4619      	mov	r1, r3
 800106a:	4812      	ldr	r0, [pc, #72]	@ (80010b4 <xmodem_receive_packet+0x80>)
 800106c:	f000 f8e0 	bl	8001230 <circular_buffer_read_length>
        //return false;
    }
    crc_received = (crc_bytes[0] << 8) | crc_bytes[1];
 8001070:	7d3b      	ldrb	r3, [r7, #20]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7d7b      	ldrb	r3, [r7, #21]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	83fb      	strh	r3, [r7, #30]

    /* Verify packet number and CRC */
    crc_calculated = calculate_crc(packet, PACKET_SIZE);
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f7ff ff98 	bl	8000fb8 <calculate_crc>
 8001088:	4603      	mov	r3, r0
 800108a:	83bb      	strh	r3, [r7, #28]
    if ((header[1] != (uint8_t)(~header[2])) || crc_calculated != crc_received) {
 800108c:	7e7a      	ldrb	r2, [r7, #25]
 800108e:	7ebb      	ldrb	r3, [r7, #26]
 8001090:	43db      	mvns	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	429a      	cmp	r2, r3
 8001096:	d103      	bne.n	80010a0 <xmodem_receive_packet+0x6c>
 8001098:	8bba      	ldrh	r2, [r7, #28]
 800109a:	8bfb      	ldrh	r3, [r7, #30]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <xmodem_receive_packet+0x70>
        return false;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e003      	b.n	80010ac <xmodem_receive_packet+0x78>
    }

    *packet_num = header[1];
 80010a4:	7e7a      	ldrb	r2, [r7, #25]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	701a      	strb	r2, [r3, #0]
    return true;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000138 	.word	0x20000138

080010b8 <xmodem_receive>:

/* XMODEM Receive Function */
bool xmodem_receive(UART_HandleTypeDef *huart) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0ac      	sub	sp, #176	@ 0xb0
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	 uint32_t flash_address = FLASH_APP_START_ADDRESS;
 80010c0:	4b55      	ldr	r3, [pc, #340]	@ (8001218 <xmodem_receive+0x160>)
 80010c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint8_t packet_num = 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    uint8_t packet[PACKET_SIZE];
    bool transfer_active = true;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
    /* Check for EOT */
            uint8_t eot;


    uint8_t response = 'C';
 80010d2:	2343      	movs	r3, #67	@ 0x43
 80010d4:	77bb      	strb	r3, [r7, #30]
    HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 80010d6:	f107 011e 	add.w	r1, r7, #30
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	2201      	movs	r2, #1
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f007 f93b 	bl	800835c <HAL_UART_Transmit>

    while (transfer_active) {
 80010e6:	e08c      	b.n	8001202 <xmodem_receive+0x14a>
        /* Send NAK to start the transfer */
//        uint8_t response = NAK;
//        HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
    	HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	@ 0x64
 80010ea:	f000 fa63 	bl	80015b4 <HAL_Delay>
        /* Receive packets */
        if (xmodem_receive_packet(huart, packet, &packet_num)) {
 80010ee:	f107 02a3 	add.w	r2, r7, #163	@ 0xa3
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff9b 	bl	8001034 <xmodem_receive_packet>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d04a      	beq.n	800119a <xmodem_receive+0xe2>
            /* Write the packet to flash */
        	for (uint32_t i = 0; i < PACKET_SIZE; i += 16) {
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800110a:	e02d      	b.n	8001168 <xmodem_receive+0xb0>
        	    // Prepare 16 bytes of data for FLASH_TYPEPROGRAM_QUADWORD
        	    uint64_t quadword[2]; // 16 bytes (128 bits)
        	    quadword[0] = *(uint64_t *)(packet + i);       // First 8 bytes
 800110c:	f107 0220 	add.w	r2, r7, #32
 8001110:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001114:	4413      	add	r3, r2
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	e9c7 2302 	strd	r2, r3, [r7, #8]
        	    quadword[1] = *(uint64_t *)(packet + i + 8);   // Next 8 bytes
 800111e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001122:	3308      	adds	r3, #8
 8001124:	f107 0220 	add.w	r2, r7, #32
 8001128:	4413      	add	r3, r2
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	e9c7 2304 	strd	r2, r3, [r7, #16]

        	    // Ensure the flash address is 16-byte aligned
        	    if (flash_address % 16 != 0) {
 8001132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	2b00      	cmp	r3, #0
 800113c:	d119      	bne.n	8001172 <xmodem_receive+0xba>
        	        // Handle alignment error (optional)
        	        break;
        	    }

        	    // Write 16 bytes to flash
        	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, flash_address, (uint32_t)quadword) != HAL_OK) {
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	461a      	mov	r2, r3
 8001144:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001148:	2002      	movs	r0, #2
 800114a:	f000 fc8d 	bl	8001a68 <HAL_FLASH_Program>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d110      	bne.n	8001176 <xmodem_receive+0xbe>
        	        // Handle flash programming error
        	        break;
        	    }

        	    // Increment the address by 16 bytes for the next quadword
        	    flash_address += 16;
 8001154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001158:	3310      	adds	r3, #16
 800115a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        	for (uint32_t i = 0; i < PACKET_SIZE; i += 16) {
 800115e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001162:	3310      	adds	r3, #16
 8001164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001168:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800116c:	2b7f      	cmp	r3, #127	@ 0x7f
 800116e:	d9cd      	bls.n	800110c <xmodem_receive+0x54>
 8001170:	e002      	b.n	8001178 <xmodem_receive+0xc0>
        	        break;
 8001172:	bf00      	nop
 8001174:	e000      	b.n	8001178 <xmodem_receive+0xc0>
        	        break;
 8001176:	bf00      	nop
        	}


            /* Send ACK */

            response = ACK;
 8001178:	2306      	movs	r3, #6
 800117a:	77bb      	strb	r3, [r7, #30]
            HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 800117c:	f107 011e 	add.w	r1, r7, #30
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	2201      	movs	r2, #1
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f007 f8e8 	bl	800835c <HAL_UART_Transmit>
            packet_num++;
 800118c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8001190:	3301      	adds	r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 8001198:	e01b      	b.n	80011d2 <xmodem_receive+0x11a>

        } else {
            /* Send NAK for invalid packet */
            response = NAK;
 800119a:	2315      	movs	r3, #21
 800119c:	77bb      	strb	r3, [r7, #30]
            HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 800119e:	f107 011e 	add.w	r1, r7, #30
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	2201      	movs	r2, #1
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f007 f8d7 	bl	800835c <HAL_UART_Transmit>
            circular_buffer_read_length(&uart_buffer, &eot,1);
 80011ae:	f107 031f 	add.w	r3, r7, #31
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <xmodem_receive+0x164>)
 80011b8:	f000 f83a 	bl	8001230 <circular_buffer_read_length>
            uart_transmit_str((uint8_t*)"\n\rSuccess.\n\r");
 80011bc:	4818      	ldr	r0, [pc, #96]	@ (8001220 <xmodem_receive+0x168>)
 80011be:	f7ff fed5 	bl	8000f6c <uart_transmit_str>
            uart_transmit_str((uint8_t*)"\n\rSuccess\n\r");
 80011c2:	4818      	ldr	r0, [pc, #96]	@ (8001224 <xmodem_receive+0x16c>)
 80011c4:	f7ff fed2 	bl	8000f6c <uart_transmit_str>
            if (eot != EOT)
 80011c8:	7ffb      	ldrb	r3, [r7, #31]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d001      	beq.n	80011d2 <xmodem_receive+0x11a>
            return false;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e01d      	b.n	800120e <xmodem_receive+0x156>
        }


        if (eot == EOT) {
 80011d2:	7ffb      	ldrb	r3, [r7, #31]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d114      	bne.n	8001202 <xmodem_receive+0x14a>
            /* Send ACK and exit transfer */
            response = ACK;
 80011d8:	2306      	movs	r3, #6
 80011da:	77bb      	strb	r3, [r7, #30]
            HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 80011dc:	f107 011e 	add.w	r1, r7, #30
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	2201      	movs	r2, #1
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f007 f8b8 	bl	800835c <HAL_UART_Transmit>
            (void)uart_transmit_str((uint8_t*)"\n\rFirmware updated!\n\r");
 80011ec:	480e      	ldr	r0, [pc, #56]	@ (8001228 <xmodem_receive+0x170>)
 80011ee:	f7ff febd 	bl	8000f6c <uart_transmit_str>
            (void)uart_transmit_str((uint8_t*)"Jumping to user application...\n\r");
 80011f2:	480e      	ldr	r0, [pc, #56]	@ (800122c <xmodem_receive+0x174>)
 80011f4:	f7ff feba 	bl	8000f6c <uart_transmit_str>
            flash_jump_to_app();
 80011f8:	f7ff fa46 	bl	8000688 <flash_jump_to_app>
            transfer_active = false;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
    while (transfer_active) {
 8001202:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001206:	2b00      	cmp	r3, #0
 8001208:	f47f af6e 	bne.w	80010e8 <xmodem_receive+0x30>
        }
    }

    return true;
 800120c:	2301      	movs	r3, #1
}
 800120e:	4618      	mov	r0, r3
 8001210:	37b0      	adds	r7, #176	@ 0xb0
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	0800c000 	.word	0x0800c000
 800121c:	20000138 	.word	0x20000138
 8001220:	0800b80c 	.word	0x0800b80c
 8001224:	0800b81c 	.word	0x0800b81c
 8001228:	0800b828 	.word	0x0800b828
 800122c:	0800b840 	.word	0x0800b840

08001230 <circular_buffer_read_length>:


int circular_buffer_read_length(CircularBuffer *cb, uint8_t *dest, uint32_t length) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
    if (circular_buffer_is_empty(cb)) {
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 f868 	bl	8001312 <circular_buffer_is_empty>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <circular_buffer_read_length+0x1c>
        return false; // Buffer is empty
 8001248:	2300      	movs	r3, #0
 800124a:	e05e      	b.n	800130a <circular_buffer_read_length+0xda>
    }

    // Calculate available data
    uint32_t available_data = cb->full ? BUFFER_SIZE : (cb->head >= cb->tail ? cb->head - cb->tail : BUFFER_SIZE - (cb->tail - cb->head));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <circular_buffer_read_length+0x2c>
 8001256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800125a:	e018      	b.n	800128e <circular_buffer_read_length+0x5e>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001268:	429a      	cmp	r2, r3
 800126a:	d307      	bcc.n	800127c <circular_buffer_read_length+0x4c>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	e008      	b.n	800128e <circular_buffer_read_length+0x5e>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800128e:	617b      	str	r3, [r7, #20]
    if (length > available_data) {
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	429a      	cmp	r2, r3
 8001296:	d901      	bls.n	800129c <circular_buffer_read_length+0x6c>
        return false; // Not enough data
 8001298:	2300      	movs	r3, #0
 800129a:	e036      	b.n	800130a <circular_buffer_read_length+0xda>
    }

    // Determine the number of bytes until the end of the buffer
    uint32_t bytes_to_end = BUFFER_SIZE - cb->tail;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80012a2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80012a6:	613b      	str	r3, [r7, #16]

    if (length <= bytes_to_end) {
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d80a      	bhi.n	80012c6 <circular_buffer_read_length+0x96>
        // All requested data is in a contiguous block
        memcpy(dest, &cb->data[cb->tail], length);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	4413      	add	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4619      	mov	r1, r3
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f009 facb 	bl	800a85a <memcpy>
 80012c4:	e013      	b.n	80012ee <circular_buffer_read_length+0xbe>
    } else {
        // Data wraps around, so split into two memcpy calls
        memcpy(dest, &cb->data[cb->tail], bytes_to_end);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4619      	mov	r1, r3
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f009 fac0 	bl	800a85a <memcpy>
        memcpy(dest + bytes_to_end, &cb->data[0], length - bytes_to_end);
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	18d0      	adds	r0, r2, r3
 80012e0:	68f9      	ldr	r1, [r7, #12]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	f009 fab6 	bl	800a85a <memcpy>
    }

    // Advance the tail pointer
    cb->tail = (cb->tail + length) % BUFFER_SIZE;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    // Clear the full flag
    cb->full = false;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    return true;
 8001308:	2301      	movs	r3, #1
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <circular_buffer_is_empty>:

int circular_buffer_is_full(CircularBuffer *cb) {
    return cb->full;
}

int circular_buffer_is_empty(CircularBuffer *cb) {
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
    return (cb->head == cb->tail && !cb->full);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001326:	429a      	cmp	r2, r3
 8001328:	d109      	bne.n	800133e <circular_buffer_is_empty+0x2c>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <circular_buffer_is_empty+0x2c>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <circular_buffer_is_empty+0x2e>
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800134c:	480d      	ldr	r0, [pc, #52]	@ (8001384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800134e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001350:	f7ff fd90 	bl	8000e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <LoopForever+0x6>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	@ (800138c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <LoopForever+0xe>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	@ (8001398 <LoopForever+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800137a:	f009 fa47 	bl	800a80c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137e:	f7ff f99d 	bl	80006bc <main>

08001382 <LoopForever>:

LoopForever:
    b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   r0, =_estack
 8001384:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001390:	0800b9d0 	.word	0x0800b9d0
  ldr r2, =_sbss
 8001394:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001398:	20000398 	.word	0x20000398

0800139c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f9d6 	bl	8001756 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80013aa:	f001 fdab 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <HAL_Init+0x44>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	490b      	ldr	r1, [pc, #44]	@ (80013e8 <HAL_Init+0x48>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <HAL_Init+0x4c>)
 80013c2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013c4:	2004      	movs	r0, #4
 80013c6:	f000 fa1b 	bl	8001800 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ca:	200f      	movs	r0, #15
 80013cc:	f000 f85c 	bl	8001488 <HAL_InitTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e002      	b.n	80013e0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013da:	f7ff fb64 	bl	8000aa6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	44020c00 	.word	0x44020c00
 80013e8:	0800b94c 	.word	0x0800b94c
 80013ec:	20000000 	.word	0x20000000

080013f0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_DeInit+0x68>)
 80013f6:	4a19      	ldr	r2, [pc, #100]	@ (800145c <HAL_DeInit+0x6c>)
 80013f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_DeInit+0x68>)
 80013fc:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <HAL_DeInit+0x70>)
 80013fe:	679a      	str	r2, [r3, #120]	@ 0x78
  __HAL_RCC_APB1_RELEASE_RESET();
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_DeInit+0x68>)
 8001402:	2200      	movs	r2, #0
 8001404:	675a      	str	r2, [r3, #116]	@ 0x74
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_DeInit+0x68>)
 8001408:	2200      	movs	r2, #0
 800140a:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_RCC_APB2_FORCE_RESET();
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_DeInit+0x68>)
 800140e:	4a15      	ldr	r2, [pc, #84]	@ (8001464 <HAL_DeInit+0x74>)
 8001410:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_APB2_RELEASE_RESET();
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_DeInit+0x68>)
 8001414:	2200      	movs	r2, #0
 8001416:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_APB3_FORCE_RESET();
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_DeInit+0x68>)
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <HAL_DeInit+0x78>)
 800141c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_APB3_RELEASE_RESET();
 8001420:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_DeInit+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB1_FORCE_RESET();
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <HAL_DeInit+0x68>)
 800142a:	4a10      	ldr	r2, [pc, #64]	@ (800146c <HAL_DeInit+0x7c>)
 800142c:	661a      	str	r2, [r3, #96]	@ 0x60
  __HAL_RCC_AHB1_RELEASE_RESET();
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_DeInit+0x68>)
 8001430:	2200      	movs	r2, #0
 8001432:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_RCC_AHB2_FORCE_RESET();
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_DeInit+0x68>)
 8001436:	4a0e      	ldr	r2, [pc, #56]	@ (8001470 <HAL_DeInit+0x80>)
 8001438:	665a      	str	r2, [r3, #100]	@ 0x64
  __HAL_RCC_AHB2_RELEASE_RESET();
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <HAL_DeInit+0x68>)
 800143c:	2200      	movs	r2, #0
 800143e:	665a      	str	r2, [r3, #100]	@ 0x64

#if defined(AHB4PERIPH_BASE)
  __HAL_RCC_AHB4_FORCE_RESET();
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_DeInit+0x68>)
 8001442:	4a0c      	ldr	r2, [pc, #48]	@ (8001474 <HAL_DeInit+0x84>)
 8001444:	66da      	str	r2, [r3, #108]	@ 0x6c
  __HAL_RCC_AHB4_RELEASE_RESET();
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <HAL_DeInit+0x68>)
 8001448:	2200      	movs	r2, #0
 800144a:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif /* AHB4PERIPH_BASE */

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800144c:	f000 f814 	bl	8001478 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	44020c00 	.word	0x44020c00
 800145c:	dffec1ff 	.word	0xdffec1ff
 8001460:	4080062b 	.word	0x4080062b
 8001464:	017f7800 	.word	0x017f7800
 8001468:	001008e0 	.word	0x001008e0
 800146c:	010ad003 	.word	0x010ad003
 8001470:	001f1dff 	.word	0x001f1dff
 8001474:	00111880 	.word	0x00111880

08001478 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001494:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <HAL_InitTick+0xdc>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e05c      	b.n	800155a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80014a0:	4b31      	ldr	r3, [pc, #196]	@ (8001568 <HAL_InitTick+0xe0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d10c      	bne.n	80014c6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80014ac:	4b2f      	ldr	r3, [pc, #188]	@ (800156c <HAL_InitTick+0xe4>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001564 <HAL_InitTick+0xdc>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e037      	b.n	8001536 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80014c6:	f000 f9f3 	bl	80018b0 <HAL_SYSTICK_GetCLKSourceConfig>
 80014ca:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d023      	beq.n	800151a <HAL_InitTick+0x92>
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d82d      	bhi.n	8001534 <HAL_InitTick+0xac>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_InitTick+0x5e>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d00d      	beq.n	8001500 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80014e4:	e026      	b.n	8001534 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <HAL_InitTick+0xe4>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <HAL_InitTick+0xdc>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80014f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fc:	60fb      	str	r3, [r7, #12]
        break;
 80014fe:	e01a      	b.n	8001536 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_InitTick+0xdc>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f2 	udiv	r3, r3, r2
 800150e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	60fb      	str	r3, [r7, #12]
        break;
 8001518:	e00d      	b.n	8001536 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_InitTick+0xdc>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001524:	fbb3 f3f2 	udiv	r3, r3, r2
 8001528:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800152c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001530:	60fb      	str	r3, [r7, #12]
        break;
 8001532:	e000      	b.n	8001536 <HAL_InitTick+0xae>
        break;
 8001534:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 f940 	bl	80017bc <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e009      	b.n	800155a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001546:	2200      	movs	r2, #0
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	f04f 30ff 	mov.w	r0, #4294967295
 800154e:	f000 f90d 	bl	800176c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001552:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_InitTick+0xe8>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008
 8001568:	e000e010 	.word	0xe000e010
 800156c:	20000000 	.word	0x20000000
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000008 	.word	0x20000008
 8001598:	20000248 	.word	0x20000248

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000248 	.word	0x20000248

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	@ (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	@ (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff4c 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800177a:	f7ff ff63 	bl	8001644 <__NVIC_GetPriorityGrouping>
 800177e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	6978      	ldr	r0, [r7, #20]
 8001786:	f7ff ffb3 	bl	80016f0 <NVIC_EncodePriority>
 800178a:	4602      	mov	r2, r0
 800178c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff82 	bl	800169c <__NVIC_SetPriority>
}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff56 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00d      	b.n	80017ee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <HAL_SYSTICK_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <HAL_SYSTICK_Config+0x40>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_SYSTICK_Config+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <HAL_SYSTICK_Config+0x40>)
 80017e6:	f043 0303 	orr.w	r3, r3, #3
 80017ea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b04      	cmp	r3, #4
 800180c:	d844      	bhi.n	8001898 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800180e:	a201      	add	r2, pc, #4	@ (adr r2, 8001814 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	08001837 	.word	0x08001837
 8001818:	08001855 	.word	0x08001855
 800181c:	08001877 	.word	0x08001877
 8001820:	08001899 	.word	0x08001899
 8001824:	08001829 	.word	0x08001829
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001828:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1e      	ldr	r2, [pc, #120]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6013      	str	r3, [r2, #0]
      break;
 8001834:	e031      	b.n	800189a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001836:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001844:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001848:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800184a:	f023 030c 	bic.w	r3, r3, #12
 800184e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001852:	e022      	b.n	800189a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a13      	ldr	r2, [pc, #76]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001862:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001866:	f023 030c 	bic.w	r3, r3, #12
 800186a:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001874:	e011      	b.n	800189a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001884:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001888:	f023 030c 	bic.w	r3, r3, #12
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001896:	e000      	b.n	800189a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001898:	bf00      	nop
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010
 80018ac:	44020c00 	.word	0x44020c00

080018b0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80018b6:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80018c2:	2304      	movs	r3, #4
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	e01e      	b.n	8001906 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80018ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d00f      	beq.n	80018fa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d80f      	bhi.n	8001900 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d003      	beq.n	80018f4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80018ec:	e008      	b.n	8001900 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
        break;
 80018f2:	e008      	b.n	8001906 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80018f4:	2301      	movs	r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
        break;
 80018f8:	e005      	b.n	8001906 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80018fa:	2302      	movs	r3, #2
 80018fc:	607b      	str	r3, [r7, #4]
        break;
 80018fe:	e002      	b.n	8001906 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
        break;
 8001904:	bf00      	nop
    }
  }
  return systick_source;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e010 	.word	0xe000e010
 8001918:	44020c00 	.word	0x44020c00

0800191c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001924:	f7ff fe3a 	bl	800159c <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e06b      	b.n	8001a0c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d008      	beq.n	8001952 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2220      	movs	r2, #32
 8001944:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e05c      	b.n	8001a0c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0204 	orr.w	r2, r2, #4
 8001960:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2205      	movs	r2, #5
 8001966:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800196a:	e020      	b.n	80019ae <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800196c:	f7ff fe16 	bl	800159c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b05      	cmp	r3, #5
 8001978:	d919      	bls.n	80019ae <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	f043 0210 	orr.w	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2203      	movs	r2, #3
 800198a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800199e:	2201      	movs	r2, #1
 80019a0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e02e      	b.n	8001a0c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0d7      	beq.n	800196c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0202 	orr.w	r2, r2, #2
 80019ca:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2204      	movs	r2, #4
 80019d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80019dc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f6:	2201      	movs	r2, #1
 80019f8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e019      	b.n	8001a5a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d004      	beq.n	8001a3c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e00e      	b.n	8001a5a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a74:	4b34      	ldr	r3, [pc, #208]	@ (8001b48 <HAL_FLASH_Program+0xe0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_FLASH_Program+0x18>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e05e      	b.n	8001b3e <HAL_FLASH_Program+0xd6>
 8001a80:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <HAL_FLASH_Program+0xe0>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
  HAL_FLASH_Unlock();
 8001a86:	f000 f86b 	bl	8001b60 <HAL_FLASH_Unlock>
  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <HAL_FLASH_Program+0xe0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a94:	f000 f8a6 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8001a9c:	7ffb      	ldrb	r3, [r7, #31]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d147      	bne.n	8001b32 <HAL_FLASH_Program+0xca>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8001aa2:	4a29      	ldr	r2, [pc, #164]	@ (8001b48 <HAL_FLASH_Program+0xe0>)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001aa8:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <HAL_FLASH_Program+0xe4>)
 8001aaa:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d104      	bne.n	8001ac0 <HAL_FLASH_Program+0x58>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	68b8      	ldr	r0, [r7, #8]
 8001aba:	f000 f8e1 	bl	8001c80 <FLASH_Program_QuadWord>
 8001abe:	e01b      	b.n	8001af8 <HAL_FLASH_Program+0x90>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4a23      	ldr	r2, [pc, #140]	@ (8001b50 <HAL_FLASH_Program+0xe8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d003      	beq.n	8001ad0 <HAL_FLASH_Program+0x68>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <HAL_FLASH_Program+0xec>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d104      	bne.n	8001ada <HAL_FLASH_Program+0x72>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	68b8      	ldr	r0, [r7, #8]
 8001ad4:	f000 f96a 	bl	8001dac <FLASH_Program_QuadWord_OBK>
 8001ad8:	e00e      	b.n	8001af8 <HAL_FLASH_Program+0x90>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b58 <HAL_FLASH_Program+0xf0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d104      	bne.n	8001af0 <HAL_FLASH_Program+0x88>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	68b8      	ldr	r0, [r7, #8]
 8001aea:	f000 f9ab 	bl	8001e44 <FLASH_Program_HalfWord>
 8001aee:	e003      	b.n	8001af8 <HAL_FLASH_Program+0x90>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	68b8      	ldr	r0, [r7, #8]
 8001af4:	f000 f9a6 	bl	8001e44 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001af8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afc:	f000 f872 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001b00:	4603      	mov	r3, r0
 8001b02:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f023 4330 	bic.w	r3, r3, #2952790016	@ 0xb0000000
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	43db      	mvns	r3, r3
 8001b14:	401a      	ands	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_FLASH_Program+0xec>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d107      	bne.n	8001b32 <HAL_FLASH_Program+0xca>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_FLASH_Program+0xf4>)
 8001b24:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 0204 	bic.w	r2, r3, #4
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b32:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_FLASH_Program+0xe0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
  HAL_FLASH_Lock();
 8001b38:	f000 f838 	bl	8001bac <HAL_FLASH_Lock>
  /* return status */
  return status;
 8001b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	40022028 	.word	0x40022028
 8001b50:	10000002 	.word	0x10000002
 8001b54:	10000006 	.word	0x10000006
 8001b58:	40000002 	.word	0x40000002
 8001b5c:	40022040 	.word	0x40022040

08001b60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <HAL_FLASH_Unlock+0x40>)
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_FLASH_Unlock+0x40>)
 8001b78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <HAL_FLASH_Unlock+0x44>)
 8001b7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <HAL_FLASH_Unlock+0x40>)
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <HAL_FLASH_Unlock+0x48>)
 8001b80:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <HAL_FLASH_Unlock+0x40>)
 8001b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8001b92:	79fb      	ldrb	r3, [r7, #7]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	45670123 	.word	0x45670123
 8001ba8:	cdef89ab 	.word	0xcdef89ab

08001bac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_FLASH_Lock+0x34>)
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <HAL_FLASH_Lock+0x34>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <HAL_FLASH_Lock+0x34>)
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40022000 	.word	0x40022000

08001be4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff fcd6 	bl	800159c <HAL_GetTick>
 8001bf0:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <FLASH_WaitForLastOperation+0x90>)
 8001bf4:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8001bf6:	e010      	b.n	8001c1a <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfe:	d00c      	beq.n	8001c1a <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c00:	f7ff fccc 	bl	800159c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d302      	bcc.n	8001c16 <FLASH_WaitForLastOperation+0x32>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e027      	b.n	8001c6a <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030b 	and.w	r3, r3, #11
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1e8      	bne.n	8001bf8 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 8001c26:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <FLASH_WaitForLastOperation+0x94>)
 8001c28:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 037e 	and.w	r3, r3, #16646144	@ 0xfe0000
 8001c32:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00c      	beq.n	8001c54 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <FLASH_WaitForLastOperation+0x98>)
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	4a0e      	ldr	r2, [pc, #56]	@ (8001c7c <FLASH_WaitForLastOperation+0x98>)
 8001c44:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f403 027e 	and.w	r2, r3, #16646144	@ 0xfe0000
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e00a      	b.n	8001c6a <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40022020 	.word	0x40022020
 8001c78:	40022030 	.word	0x40022030
 8001c7c:	2000000c 	.word	0x2000000c

08001c80 <FLASH_Program_QuadWord>:
  * @brief  Program a quad-word (128-bit) at a specified address.
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
    uint8_t index = 4;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	623b      	str	r3, [r7, #32]
    uint32_t *src_addr  = (uint32_t *)DataAddress;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	61fb      	str	r3, [r7, #28]
    uint32_t primask_bit;
    __IO uint32_t *reg_cr;

    /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001c98:	4b3e      	ldr	r3, [pc, #248]	@ (8001d94 <FLASH_Program_QuadWord+0x114>)
 8001c9a:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    /* Validate FlashAddress and DataAddress */
    if ((FlashAddress % 16) != 0 ) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <FLASH_Program_QuadWord+0x32>
        printf("Error: Address is not 16-byte aligned. FlashAddress: 0x%08X, DataAddress: 0x%08X\n", FlashAddress, DataAddress);
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	483b      	ldr	r0, [pc, #236]	@ (8001d98 <FLASH_Program_QuadWord+0x118>)
 8001cac:	f008 fbf2 	bl	800a494 <iprintf>
        return;
 8001cb0:	e06d      	b.n	8001d8e <FLASH_Program_QuadWord+0x10e>
    }

    if (FlashAddress < FLASH_BASE || FlashAddress >= (FLASH_BASE + FLASH_SIZE)) {
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001cb8:	d317      	bcc.n	8001cea <FLASH_Program_QuadWord+0x6a>
 8001cba:	4b38      	ldr	r3, [pc, #224]	@ (8001d9c <FLASH_Program_QuadWord+0x11c>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00c      	beq.n	8001ce0 <FLASH_Program_QuadWord+0x60>
 8001cc6:	4b35      	ldr	r3, [pc, #212]	@ (8001d9c <FLASH_Program_QuadWord+0x11c>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <FLASH_Program_QuadWord+0x5a>
 8001cce:	4b33      	ldr	r3, [pc, #204]	@ (8001d9c <FLASH_Program_QuadWord+0x11c>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001cd8:	e004      	b.n	8001ce4 <FLASH_Program_QuadWord+0x64>
 8001cda:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 8001cde:	e001      	b.n	8001ce4 <FLASH_Program_QuadWord+0x64>
 8001ce0:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d804      	bhi.n	8001cf4 <FLASH_Program_QuadWord+0x74>
        printf("Error: FlashAddress is out of range: 0x%08X\n", FlashAddress);
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	482c      	ldr	r0, [pc, #176]	@ (8001da0 <FLASH_Program_QuadWord+0x120>)
 8001cee:	f008 fbd1 	bl	800a494 <iprintf>
        return;
 8001cf2:	e04c      	b.n	8001d8e <FLASH_Program_QuadWord+0x10e>
    }

    /* Ensure flash is ready */
    if (FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE) != HAL_OK) {
 8001cf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cf8:	f7ff ff74 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <FLASH_Program_QuadWord+0x8a>
        printf("Error: Flash is busy or timeout occurred.\n");
 8001d02:	4828      	ldr	r0, [pc, #160]	@ (8001da4 <FLASH_Program_QuadWord+0x124>)
 8001d04:	f008 fc2e 	bl	800a564 <puts>
        return;
 8001d08:	e041      	b.n	8001d8e <FLASH_Program_QuadWord+0x10e>
    }

    /* Clear and set PG bit */
    if (READ_BIT((*reg_cr), FLASH_CR_PG)) {
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <FLASH_Program_QuadWord+0xa2>
        CLEAR_BIT((*reg_cr), FLASH_CR_PG);
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0202 	bic.w	r2, r3, #2
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	601a      	str	r2, [r3, #0]
    }
    SET_BIT((*reg_cr), FLASH_CR_PG);
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d32:	613b      	str	r3, [r7, #16]
  return(result);
 8001d34:	693b      	ldr	r3, [r7, #16]

    /* Enter critical section */
    primask_bit = __get_PRIMASK();
 8001d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
    __disable_irq();

    /* Program the quad-word */
    do {
        *dest_addr = *src_addr;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	3304      	adds	r3, #4
 8001d48:	623b      	str	r3, [r7, #32]
        src_addr++;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	61fb      	str	r3, [r7, #28]
        index--;
 8001d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d54:	3b01      	subs	r3, #1
 8001d56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    } while (index != 0U);
 8001d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ec      	bne.n	8001d3c <FLASH_Program_QuadWord+0xbc>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f383 8810 	msr	PRIMASK, r3
}
 8001d6c:	bf00      	nop

    /* Exit critical section */
    __set_PRIMASK(primask_bit);

    /* Wait for last operation to complete */
    if (FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE) != HAL_OK) {
 8001d6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d72:	f7ff ff37 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <FLASH_Program_QuadWord+0x102>
        printf("Error: Flash programming failed during post-operation.\n");
 8001d7c:	480a      	ldr	r0, [pc, #40]	@ (8001da8 <FLASH_Program_QuadWord+0x128>)
 8001d7e:	f008 fbf1 	bl	800a564 <puts>
    }

    /* Clear PG bit */
    CLEAR_BIT((*reg_cr), FLASH_CR_PG);
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 0202 	bic.w	r2, r3, #2
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40022028 	.word	0x40022028
 8001d98:	0800b864 	.word	0x0800b864
 8001d9c:	08fff80c 	.word	0x08fff80c
 8001da0:	0800b8b8 	.word	0x0800b8b8
 8001da4:	0800b8e8 	.word	0x0800b8e8
 8001da8:	0800b914 	.word	0x0800b914

08001dac <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b08b      	sub	sp, #44	@ 0x2c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8001db6:	2304      	movs	r3, #4
 8001db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <FLASH_Program_QuadWord_OBK+0x8c>)
 8001dc6:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <FLASH_Program_QuadWord_OBK+0x90>)
 8001dca:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f043 0202 	orr.w	r2, r3, #2
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <FLASH_Program_QuadWord_OBK+0x94>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	431a      	orrs	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001dea:	f3ef 8310 	mrs	r3, PRIMASK
 8001dee:	60fb      	str	r3, [r7, #12]
  return(result);
 8001df0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001df2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	3304      	adds	r3, #4
 8001e04:	623b      	str	r3, [r7, #32]
    src_addr++;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	61fb      	str	r3, [r7, #28]
    index--;
 8001e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e10:	3b01      	subs	r3, #1
 8001e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 8001e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ec      	bne.n	8001df8 <FLASH_Program_QuadWord_OBK+0x4c>
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f383 8810 	msr	PRIMASK, r3
}
 8001e28:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001e2a:	bf00      	nop
 8001e2c:	372c      	adds	r7, #44	@ 0x2c
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40022028 	.word	0x40022028
 8001e3c:	40022040 	.word	0x40022040
 8001e40:	2000000c 	.word	0x2000000c

08001e44 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <FLASH_Program_HalfWord+0x30>)
 8001e50:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f043 0202 	orr.w	r2, r3, #2
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	8812      	ldrh	r2, [r2, #0]
 8001e64:	b292      	uxth	r2, r2
 8001e66:	801a      	strh	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40022028 	.word	0x40022028

08001e78 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e82:	4b3a      	ldr	r3, [pc, #232]	@ (8001f6c <HAL_FLASHEx_Erase+0xf4>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_FLASHEx_Erase+0x16>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e06a      	b.n	8001f64 <HAL_FLASHEx_Erase+0xec>
 8001e8e:	4b37      	ldr	r3, [pc, #220]	@ (8001f6c <HAL_FLASHEx_Erase+0xf4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e94:	4b35      	ldr	r3, [pc, #212]	@ (8001f6c <HAL_FLASHEx_Erase+0xf4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e9e:	f7ff fea1 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d157      	bne.n	8001f5c <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f6c <HAL_FLASHEx_Erase+0xf4>)
 8001eb2:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <HAL_FLASHEx_Erase+0xf8>)
 8001eb6:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ec0:	f248 0208 	movw	r2, #32776	@ 0x8008
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f853 	bl	8001f78 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ed2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed6:	f7ff fe85 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001eda:	4603      	mov	r3, r0
 8001edc:	75fb      	strb	r3, [r7, #23]
 8001ede:	e033      	b.n	8001f48 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	@ (8001f74 <HAL_FLASHEx_Erase+0xfc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d108      	bne.n	8001efc <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8001eea:	f000 f8b5 	bl	8002058 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef2:	f7ff fe77 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	75fb      	strb	r3, [r7, #23]
 8001efa:	e025      	b.n	8001f48 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f04f 32ff 	mov.w	r2, #4294967295
 8001f02:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e015      	b.n	8001f38 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4619      	mov	r1, r3
 8001f12:	6938      	ldr	r0, [r7, #16]
 8001f14:	f000 f868 	bl	8001fe8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f1c:	f7ff fe62 	bl	8001be4 <FLASH_WaitForLastOperation>
 8001f20:	4603      	mov	r3, r0
 8001f22:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	601a      	str	r2, [r3, #0]
          break;
 8001f30:	e00a      	b.n	8001f48 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3301      	adds	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d3e1      	bcc.n	8001f0c <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_FLASHEx_Erase+0xf4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]

  return status;
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	40022028 	.word	0x40022028
 8001f74:	80000008 	.word	0x80000008

08001f78 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001f80:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <FLASH_MassErase+0x6c>)
 8001f82:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d108      	bne.n	8001fa0 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f96:	f043 0320 	orr.w	r3, r3, #32
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8001f9e:	e01b      	b.n	8001fd8 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fb2:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001fb6:	f043 0228 	orr.w	r2, r3, #40	@ 0x28
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fd0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40022028 	.word	0x40022028

08001fe8 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <FLASH_Erase_Sector+0x6c>)
 8001ff4:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d011      	beq.n	8002024 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002008:	f423 53fe 	bic.w	r3, r3, #8128	@ 0x1fc0
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	019b      	lsls	r3, r3, #6
 8002018:	4313      	orrs	r3, r2
 800201a:	f043 0224 	orr.w	r2, r3, #36	@ 0x24
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8002022:	e010      	b.n	8002046 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f423 52fe 	bic.w	r2, r3, #8128	@ 0x1fc0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	019b      	lsls	r3, r3, #6
 8002038:	4313      	orrs	r3, r2
 800203a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800203e:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	6013      	str	r3, [r2, #0]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40022028 	.word	0x40022028

08002058 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <FLASH_OBKErase+0x24>)
 8002060:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f043 0208 	orr.w	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40022040 	.word	0x40022040

08002080 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800208e:	e136      	b.n	80022fe <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2101      	movs	r1, #1
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8128 	beq.w	80022f8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x38>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b12      	cmp	r3, #18
 80020b6:	d125      	bne.n	8002104 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	08da      	lsrs	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4013      	ands	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f003 020f 	and.w	r2, r3, #15
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	6979      	ldr	r1, [r7, #20]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d00b      	beq.n	8002158 <HAL_GPIO_Init+0xd8>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d007      	beq.n	8002158 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214c:	2b11      	cmp	r3, #17
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b12      	cmp	r3, #18
 8002156:	d130      	bne.n	80021ba <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4013      	ands	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800218e:	2201      	movs	r2, #1
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	4013      	ands	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	f003 0201 	and.w	r2, r3, #1
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d017      	beq.n	80021f2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4013      	ands	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d07c      	beq.n	80022f8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021fe:	4a47      	ldr	r2, [pc, #284]	@ (800231c <HAL_GPIO_Init+0x29c>)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3318      	adds	r3, #24
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4013      	ands	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0a9a      	lsrs	r2, r3, #10
 8002226:	4b3e      	ldr	r3, [pc, #248]	@ (8002320 <HAL_GPIO_Init+0x2a0>)
 8002228:	4013      	ands	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	f002 0203 	and.w	r2, r2, #3
 8002230:	00d2      	lsls	r2, r2, #3
 8002232:	4093      	lsls	r3, r2
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800223a:	4938      	ldr	r1, [pc, #224]	@ (800231c <HAL_GPIO_Init+0x29c>)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3318      	adds	r3, #24
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002248:	4b34      	ldr	r3, [pc, #208]	@ (800231c <HAL_GPIO_Init+0x29c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43db      	mvns	r3, r3
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4013      	ands	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800226c:	4a2b      	ldr	r2, [pc, #172]	@ (800231c <HAL_GPIO_Init+0x29c>)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002272:	4b2a      	ldr	r3, [pc, #168]	@ (800231c <HAL_GPIO_Init+0x29c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	43db      	mvns	r3, r3
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4013      	ands	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002296:	4a21      	ldr	r2, [pc, #132]	@ (800231c <HAL_GPIO_Init+0x29c>)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800229c:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <HAL_GPIO_Init+0x29c>)
 800229e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4013      	ands	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80022c2:	4a16      	ldr	r2, [pc, #88]	@ (800231c <HAL_GPIO_Init+0x29c>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80022ca:	4b14      	ldr	r3, [pc, #80]	@ (800231c <HAL_GPIO_Init+0x29c>)
 80022cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4013      	ands	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80022f0:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <HAL_GPIO_Init+0x29c>)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	3301      	adds	r3, #1
 80022fc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	f47f aec1 	bne.w	8002090 <HAL_GPIO_Init+0x10>
  }
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	371c      	adds	r7, #28
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	44022000 	.word	0x44022000
 8002320:	002f7f7f 	.word	0x002f7f7f

08002324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	f000 bc28 	b.w	8002b88 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002338:	4b94      	ldr	r3, [pc, #592]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f003 0318 	and.w	r3, r3, #24
 8002340:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002342:	4b92      	ldr	r3, [pc, #584]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d05b      	beq.n	8002410 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	2b08      	cmp	r3, #8
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x46>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	2b18      	cmp	r3, #24
 8002362:	d114      	bne.n	800238e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d111      	bne.n	800238e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	f000 bc08 	b.w	8002b88 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002378:	4b84      	ldr	r3, [pc, #528]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	4981      	ldr	r1, [pc, #516]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002388:	4313      	orrs	r3, r2
 800238a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800238c:	e040      	b.n	8002410 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d023      	beq.n	80023de <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002396:	4b7d      	ldr	r3, [pc, #500]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7c      	ldr	r2, [pc, #496]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7ff f8fb 	bl	800159c <HAL_GetTick>
 80023a6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80023aa:	f7ff f8f7 	bl	800159c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e3e5      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80023bc:	4b73      	ldr	r3, [pc, #460]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80023c8:	4b70      	ldr	r3, [pc, #448]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	496d      	ldr	r1, [pc, #436]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	618b      	str	r3, [r1, #24]
 80023dc:	e018      	b.n	8002410 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023de:	4b6b      	ldr	r3, [pc, #428]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6a      	ldr	r2, [pc, #424]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80023e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7ff f8d7 	bl	800159c <HAL_GetTick>
 80023ee:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80023f2:	f7ff f8d3 	bl	800159c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e3c1      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002404:	4b61      	ldr	r3, [pc, #388]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a0 	beq.w	800255e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b10      	cmp	r3, #16
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x10c>
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b18      	cmp	r3, #24
 8002428:	d109      	bne.n	800243e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f040 8092 	bne.w	800255e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e3a4      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x132>
 8002448:	4b50      	ldr	r3, [pc, #320]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a4f      	ldr	r2, [pc, #316]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e058      	b.n	8002508 <HAL_RCC_OscConfig+0x1e4>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d112      	bne.n	8002484 <HAL_RCC_OscConfig+0x160>
 800245e:	4b4b      	ldr	r3, [pc, #300]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a4a      	ldr	r2, [pc, #296]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b48      	ldr	r3, [pc, #288]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a47      	ldr	r2, [pc, #284]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002470:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b45      	ldr	r3, [pc, #276]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a44      	ldr	r2, [pc, #272]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e041      	b.n	8002508 <HAL_RCC_OscConfig+0x1e4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800248c:	d112      	bne.n	80024b4 <HAL_RCC_OscConfig+0x190>
 800248e:	4b3f      	ldr	r3, [pc, #252]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3e      	ldr	r2, [pc, #248]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b3c      	ldr	r3, [pc, #240]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a3b      	ldr	r2, [pc, #236]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b39      	ldr	r3, [pc, #228]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a38      	ldr	r2, [pc, #224]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e029      	b.n	8002508 <HAL_RCC_OscConfig+0x1e4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80024bc:	d112      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1c0>
 80024be:	4b33      	ldr	r3, [pc, #204]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a32      	ldr	r2, [pc, #200]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b30      	ldr	r3, [pc, #192]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2f      	ldr	r2, [pc, #188]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2c      	ldr	r2, [pc, #176]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e011      	b.n	8002508 <HAL_RCC_OscConfig+0x1e4>
 80024e4:	4b29      	ldr	r3, [pc, #164]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a28      	ldr	r2, [pc, #160]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b26      	ldr	r3, [pc, #152]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a25      	ldr	r2, [pc, #148]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b23      	ldr	r3, [pc, #140]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a22      	ldr	r2, [pc, #136]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002502:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7ff f844 	bl	800159c <HAL_GetTick>
 8002514:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002518:	f7ff f840 	bl	800159c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e32e      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252a:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x1f4>
 8002536:	e012      	b.n	800255e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff f830 	bl	800159c <HAL_GetTick>
 800253c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002540:	f7ff f82c 	bl	800159c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e31a      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002552:	4b0e      	ldr	r3, [pc, #56]	@ (800258c <HAL_RCC_OscConfig+0x268>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 809a 	beq.w	80026a0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x25a>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	2b18      	cmp	r3, #24
 8002576:	d149      	bne.n	800260c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d146      	bne.n	800260c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d104      	bne.n	8002590 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e2fe      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
 800258a:	bf00      	nop
 800258c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002596:	4b9a      	ldr	r3, [pc, #616]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0218 	and.w	r2, r3, #24
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d014      	beq.n	80025d0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80025a6:	4b96      	ldr	r3, [pc, #600]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0218 	bic.w	r2, r3, #24
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	4993      	ldr	r1, [pc, #588]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80025b8:	f000 fdd0 	bl	800315c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025bc:	4b91      	ldr	r3, [pc, #580]	@ (8002804 <HAL_RCC_OscConfig+0x4e0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe ff61 	bl	8001488 <HAL_InitTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e2db      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe ffe4 	bl	800159c <HAL_GetTick>
 80025d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80025d8:	f7fe ffe0 	bl	800159c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e2ce      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ea:	4b85      	ldr	r3, [pc, #532]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80025f6:	4b82      	ldr	r3, [pc, #520]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	497e      	ldr	r1, [pc, #504]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800260a:	e049      	b.n	80026a0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02c      	beq.n	800266e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002614:	4b7a      	ldr	r3, [pc, #488]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 0218 	bic.w	r2, r3, #24
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	4977      	ldr	r1, [pc, #476]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002626:	4b76      	ldr	r3, [pc, #472]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a75      	ldr	r2, [pc, #468]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7fe ffb3 	bl	800159c <HAL_GetTick>
 8002636:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800263a:	f7fe ffaf 	bl	800159c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e29d      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800264c:	4b6c      	ldr	r3, [pc, #432]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002658:	4b69      	ldr	r3, [pc, #420]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	4966      	ldr	r1, [pc, #408]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	610b      	str	r3, [r1, #16]
 800266c:	e018      	b.n	80026a0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b64      	ldr	r3, [pc, #400]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a63      	ldr	r2, [pc, #396]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe ff8f 	bl	800159c <HAL_GetTick>
 800267e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002682:	f7fe ff8b 	bl	800159c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e279      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002694:	4b5a      	ldr	r3, [pc, #360]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d03c      	beq.n	8002726 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01c      	beq.n	80026ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b4:	4b52      	ldr	r3, [pc, #328]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80026b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ba:	4a51      	ldr	r2, [pc, #324]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80026bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe ff6a 	bl	800159c <HAL_GetTick>
 80026c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80026cc:	f7fe ff66 	bl	800159c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e254      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80026de:	4b48      	ldr	r3, [pc, #288]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80026e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <HAL_RCC_OscConfig+0x3a8>
 80026ec:	e01b      	b.n	8002726 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ee:	4b44      	ldr	r3, [pc, #272]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80026f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026f4:	4a42      	ldr	r2, [pc, #264]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80026f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7fe ff4d 	bl	800159c <HAL_GetTick>
 8002702:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002706:	f7fe ff49 	bl	800159c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e237      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002718:	4b39      	ldr	r3, [pc, #228]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 800271a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800271e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ef      	bne.n	8002706 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80d2 	beq.w	80028d8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002734:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <HAL_RCC_OscConfig+0x4e4>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d118      	bne.n	8002772 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002740:	4b31      	ldr	r3, [pc, #196]	@ (8002808 <HAL_RCC_OscConfig+0x4e4>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	4a30      	ldr	r2, [pc, #192]	@ (8002808 <HAL_RCC_OscConfig+0x4e4>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274c:	f7fe ff26 	bl	800159c <HAL_GetTick>
 8002750:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe ff22 	bl	800159c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e210      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002766:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <HAL_RCC_OscConfig+0x4e4>)
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d108      	bne.n	800278c <HAL_RCC_OscConfig+0x468>
 800277a:	4b21      	ldr	r3, [pc, #132]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 800277c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002780:	4a1f      	ldr	r2, [pc, #124]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800278a:	e074      	b.n	8002876 <HAL_RCC_OscConfig+0x552>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d118      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4a2>
 8002794:	4b1a      	ldr	r3, [pc, #104]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800279a:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027a4:	4b16      	ldr	r3, [pc, #88]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027aa:	4a15      	ldr	r2, [pc, #84]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027b4:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ba:	4a11      	ldr	r2, [pc, #68]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027c4:	e057      	b.n	8002876 <HAL_RCC_OscConfig+0x552>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d11e      	bne.n	800280c <HAL_RCC_OscConfig+0x4e8>
 80027ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027e4:	4a06      	ldr	r2, [pc, #24]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f4:	4a02      	ldr	r2, [pc, #8]	@ (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027fe:	e03a      	b.n	8002876 <HAL_RCC_OscConfig+0x552>
 8002800:	44020c00 	.word	0x44020c00
 8002804:	20000004 	.word	0x20000004
 8002808:	44020800 	.word	0x44020800
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b85      	cmp	r3, #133	@ 0x85
 8002812:	d118      	bne.n	8002846 <HAL_RCC_OscConfig+0x522>
 8002814:	4ba2      	ldr	r3, [pc, #648]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800281a:	4aa1      	ldr	r2, [pc, #644]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002824:	4b9e      	ldr	r3, [pc, #632]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800282a:	4a9d      	ldr	r2, [pc, #628]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 800282c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002830:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002834:	4b9a      	ldr	r3, [pc, #616]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800283a:	4a99      	ldr	r2, [pc, #612]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002844:	e017      	b.n	8002876 <HAL_RCC_OscConfig+0x552>
 8002846:	4b96      	ldr	r3, [pc, #600]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800284c:	4a94      	ldr	r2, [pc, #592]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002856:	4b92      	ldr	r3, [pc, #584]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800285c:	4a90      	ldr	r2, [pc, #576]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 800285e:	f023 0304 	bic.w	r3, r3, #4
 8002862:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002866:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800286c:	4a8c      	ldr	r2, [pc, #560]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 800286e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7fe fe8d 	bl	800159c <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fe89 	bl	800159c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e175      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289c:	4b80      	ldr	r3, [pc, #512]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 800289e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ed      	beq.n	8002886 <HAL_RCC_OscConfig+0x562>
 80028aa:	e015      	b.n	80028d8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fe fe76 	bl	800159c <HAL_GetTick>
 80028b0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe fe72 	bl	800159c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e15e      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028ca:	4b75      	ldr	r3, [pc, #468]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 80028cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ed      	bne.n	80028b4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d036      	beq.n	8002952 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d019      	beq.n	8002920 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028ec:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 80028f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fe50 	bl	800159c <HAL_GetTick>
 80028fc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002900:	f7fe fe4c 	bl	800159c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e13a      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002912:	4b63      	ldr	r3, [pc, #396]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x5dc>
 800291e:	e018      	b.n	8002952 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002920:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a5e      	ldr	r2, [pc, #376]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002926:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800292a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fe36 	bl	800159c <HAL_GetTick>
 8002930:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002934:	f7fe fe32 	bl	800159c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e120      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002946:	4b56      	ldr	r3, [pc, #344]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8115 	beq.w	8002b86 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b18      	cmp	r3, #24
 8002960:	f000 80af 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	2b02      	cmp	r3, #2
 800296a:	f040 8086 	bne.w	8002a7a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800296e:	4b4c      	ldr	r3, [pc, #304]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a4b      	ldr	r2, [pc, #300]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002974:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe fe0f 	bl	800159c <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002982:	f7fe fe0b 	bl	800159c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0f9      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002994:	4b42      	ldr	r3, [pc, #264]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f0      	bne.n	8002982 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80029a0:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029a8:	f023 0303 	bic.w	r3, r3, #3
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029b4:	0212      	lsls	r2, r2, #8
 80029b6:	430a      	orrs	r2, r1
 80029b8:	4939      	ldr	r1, [pc, #228]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029cc:	3b01      	subs	r3, #1
 80029ce:	025b      	lsls	r3, r3, #9
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d8:	3b01      	subs	r3, #1
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	3b01      	subs	r3, #1
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029ee:	492c      	ldr	r1, [pc, #176]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80029f4:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	4a29      	ldr	r2, [pc, #164]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 80029fa:	f023 0310 	bic.w	r3, r3, #16
 80029fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	4a26      	ldr	r2, [pc, #152]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a0a:	4b25      	ldr	r3, [pc, #148]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	4a24      	ldr	r2, [pc, #144]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a10:	f043 0310 	orr.w	r3, r3, #16
 8002a14:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002a16:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	f023 020c 	bic.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	491f      	ldr	r1, [pc, #124]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002a28:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	f023 0220 	bic.w	r2, r3, #32
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a34:	491a      	ldr	r1, [pc, #104]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a3a:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3e:	4a18      	ldr	r2, [pc, #96]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a44:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002a46:	4b16      	ldr	r3, [pc, #88]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe fda3 	bl	800159c <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe fd9f 	bl	800159c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e08d      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x736>
 8002a78:	e085      	b.n	8002b86 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a08      	ldr	r2, [pc, #32]	@ (8002aa0 <HAL_RCC_OscConfig+0x77c>)
 8002a80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fe fd89 	bl	800159c <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe fd85 	bl	800159c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d903      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e073      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
 8002aa0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ee      	bne.n	8002a8e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002ab0:	4b37      	ldr	r3, [pc, #220]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	4a36      	ldr	r2, [pc, #216]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002ab6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	6293      	str	r3, [r2, #40]	@ 0x28
 8002ac0:	e061      	b.n	8002b86 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002ac2:	4b33      	ldr	r3, [pc, #204]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ac8:	4b31      	ldr	r3, [pc, #196]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002acc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d031      	beq.n	8002b3a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0203 	and.w	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d12a      	bne.n	8002b3a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d122      	bne.n	8002b3a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d11a      	bne.n	8002b3a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	0a5b      	lsrs	r3, r3, #9
 8002b08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d111      	bne.n	8002b3a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b22:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d108      	bne.n	8002b3a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	0e1b      	lsrs	r3, r3, #24
 8002b2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e024      	b.n	8002b88 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	08db      	lsrs	r3, r3, #3
 8002b44:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d01a      	beq.n	8002b86 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002b50:	4b0f      	ldr	r3, [pc, #60]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	4a0e      	ldr	r2, [pc, #56]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002b56:	f023 0310 	bic.w	r3, r3, #16
 8002b5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fd1e 	bl	800159c <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002b62:	bf00      	nop
 8002b64:	f7fe fd1a 	bl	800159c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d0f9      	beq.n	8002b64 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b74:	4a06      	ldr	r2, [pc, #24]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002b7a:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7e:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <HAL_RCC_OscConfig+0x86c>)
 8002b80:	f043 0310 	orr.w	r3, r3, #16
 8002b84:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	44020c00 	.word	0x44020c00

08002b94 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e19e      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b83      	ldr	r3, [pc, #524]	@ (8002db8 <HAL_RCC_ClockConfig+0x224>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d910      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b80      	ldr	r3, [pc, #512]	@ (8002db8 <HAL_RCC_ClockConfig+0x224>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 020f 	bic.w	r2, r3, #15
 8002bbe:	497e      	ldr	r1, [pc, #504]	@ (8002db8 <HAL_RCC_ClockConfig+0x224>)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b7c      	ldr	r3, [pc, #496]	@ (8002db8 <HAL_RCC_ClockConfig+0x224>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e186      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	4b74      	ldr	r3, [pc, #464]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d909      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002bf6:	4b71      	ldr	r3, [pc, #452]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	496d      	ldr	r1, [pc, #436]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	4b68      	ldr	r3, [pc, #416]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d909      	bls.n	8002c3c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002c28:	4b64      	ldr	r3, [pc, #400]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	4961      	ldr	r1, [pc, #388]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d010      	beq.n	8002c6a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	4b5b      	ldr	r3, [pc, #364]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d908      	bls.n	8002c6a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002c58:	4b58      	ldr	r3, [pc, #352]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4955      	ldr	r1, [pc, #340]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	4b50      	ldr	r3, [pc, #320]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d908      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002c86:	4b4d      	ldr	r3, [pc, #308]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 020f 	bic.w	r2, r3, #15
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	494a      	ldr	r1, [pc, #296]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8093 	beq.w	8002dcc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002cae:	4b43      	ldr	r3, [pc, #268]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d121      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e113      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e107      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002cde:	4b37      	ldr	r3, [pc, #220]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0fb      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cee:	4b33      	ldr	r3, [pc, #204]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0f3      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	492c      	ldr	r1, [pc, #176]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7fe fc44 	bl	800159c <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d112      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d20:	f7fe fc3c 	bl	800159c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e0d7      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d36:	4b21      	ldr	r3, [pc, #132]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0318 	and.w	r3, r3, #24
 8002d3e:	2b18      	cmp	r3, #24
 8002d40:	d1ee      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x18c>
 8002d42:	e043      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d112      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4e:	f7fe fc25 	bl	800159c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0c0      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d64:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 0318 	and.w	r3, r3, #24
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d1ee      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x1ba>
 8002d70:	e02c      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d122      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fe fc0e 	bl	800159c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e0a9      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002d92:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <HAL_RCC_ClockConfig+0x228>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0318 	and.w	r3, r3, #24
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d1ee      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x1e8>
 8002d9e:	e015      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe fbfc 	bl	800159c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d906      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e097      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
 8002db6:	bf00      	nop
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 0318 	and.w	r3, r3, #24
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e9      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4b44      	ldr	r3, [pc, #272]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d208      	bcs.n	8002dfa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002de8:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f023 020f 	bic.w	r2, r3, #15
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	493e      	ldr	r1, [pc, #248]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef4 <HAL_RCC_ClockConfig+0x360>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d210      	bcs.n	8002e2a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e08:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef4 <HAL_RCC_ClockConfig+0x360>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 020f 	bic.w	r2, r3, #15
 8002e10:	4938      	ldr	r1, [pc, #224]	@ (8002ef4 <HAL_RCC_ClockConfig+0x360>)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e18:	4b36      	ldr	r3, [pc, #216]	@ (8002ef4 <HAL_RCC_ClockConfig+0x360>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e05d      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d010      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d208      	bcs.n	8002e58 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002e46:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4927      	ldr	r1, [pc, #156]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d012      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	4b21      	ldr	r3, [pc, #132]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d209      	bcs.n	8002e8a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002e76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	491a      	ldr	r1, [pc, #104]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d012      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d209      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	490e      	ldr	r1, [pc, #56]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ebc:	f000 f822 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	490b      	ldr	r1, [pc, #44]	@ (8002ef8 <HAL_RCC_ClockConfig+0x364>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <HAL_RCC_ClockConfig+0x368>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <HAL_RCC_ClockConfig+0x36c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fad4 	bl	8001488 <HAL_InitTick>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	44020c00 	.word	0x44020c00
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	0800b94c 	.word	0x0800b94c
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002f0a:	4b8c      	ldr	r3, [pc, #560]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 0318 	and.w	r3, r3, #24
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d102      	bne.n	8002f1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002f16:	4b8a      	ldr	r3, [pc, #552]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e107      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f1c:	4b87      	ldr	r3, [pc, #540]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f003 0318 	and.w	r3, r3, #24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d112      	bne.n	8002f4e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002f28:	4b84      	ldr	r3, [pc, #528]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f34:	4b81      	ldr	r3, [pc, #516]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	4a81      	ldr	r2, [pc, #516]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e0f1      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002f48:	4b7e      	ldr	r3, [pc, #504]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	e0ee      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4e:	4b7b      	ldr	r3, [pc, #492]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0318 	and.w	r3, r3, #24
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d102      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x244>)
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e0e5      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f60:	4b76      	ldr	r3, [pc, #472]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f003 0318 	and.w	r3, r3, #24
 8002f68:	2b18      	cmp	r3, #24
 8002f6a:	f040 80dd 	bne.w	8003128 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002f6e:	4b73      	ldr	r3, [pc, #460]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002f78:	4b70      	ldr	r3, [pc, #448]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f82:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002f84:	4b6d      	ldr	r3, [pc, #436]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002f90:	4b6a      	ldr	r3, [pc, #424]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002f94:	08db      	lsrs	r3, r3, #3
 8002f96:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80b7 	beq.w	8003122 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d056      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x16a>
 8002fc0:	e077      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d02d      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002fce:	4b5b      	ldr	r3, [pc, #364]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	08db      	lsrs	r3, r3, #3
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x240>)
 8002fda:	fa22 f303 	lsr.w	r3, r2, r3
 8002fde:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ff8:	4b50      	ldr	r3, [pc, #320]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003008:	ed97 6a02 	vldr	s12, [r7, #8]
 800300c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800314c <HAL_RCC_GetSysClockFreq+0x248>
 8003010:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003014:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800301c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003024:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003028:	e065      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003034:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003150 <HAL_RCC_GetSysClockFreq+0x24c>
 8003038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303c:	4b3f      	ldr	r3, [pc, #252]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 800303e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800304c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003050:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800314c <HAL_RCC_GetSysClockFreq+0x248>
 8003054:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003058:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800305c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003060:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003068:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800306c:	e043      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003154 <HAL_RCC_GetSysClockFreq+0x250>
 800307c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003080:	4b2e      	ldr	r3, [pc, #184]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 8003082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003090:	ed97 6a02 	vldr	s12, [r7, #8]
 8003094:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800314c <HAL_RCC_GetSysClockFreq+0x248>
 8003098:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800309c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ac:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80030b0:	e021      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030bc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003158 <HAL_RCC_GetSysClockFreq+0x254>
 80030c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c4:	4b1d      	ldr	r3, [pc, #116]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 80030c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80030d8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800314c <HAL_RCC_GetSysClockFreq+0x248>
 80030dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80030f4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80030f6:	4b11      	ldr	r3, [pc, #68]	@ (800313c <HAL_RCC_GetSysClockFreq+0x238>)
 80030f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fa:	0a5b      	lsrs	r3, r3, #9
 80030fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003100:	3301      	adds	r3, #1
 8003102:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800310e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800311a:	ee17 3a90 	vmov	r3, s15
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	e004      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e001      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x240>)
 800312a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800312c:	69fb      	ldr	r3, [r7, #28]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	@ 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	44020c00 	.word	0x44020c00
 8003140:	003d0900 	.word	0x003d0900
 8003144:	03d09000 	.word	0x03d09000
 8003148:	017d7840 	.word	0x017d7840
 800314c:	46000000 	.word	0x46000000
 8003150:	4c742400 	.word	0x4c742400
 8003154:	4bbebc20 	.word	0x4bbebc20
 8003158:	4a742400 	.word	0x4a742400

0800315c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003160:	f7ff fed0 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800316a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800316e:	4907      	ldr	r1, [pc, #28]	@ (800318c <HAL_RCC_GetHCLKFreq+0x30>)
 8003170:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003172:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003176:	fa22 f303 	lsr.w	r3, r2, r3
 800317a:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <HAL_RCC_GetHCLKFreq+0x34>)
 800317c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800317e:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <HAL_RCC_GetHCLKFreq+0x34>)
 8003180:	681b      	ldr	r3, [r3, #0]
}
 8003182:	4618      	mov	r0, r3
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	44020c00 	.word	0x44020c00
 800318c:	0800b94c 	.word	0x0800b94c
 8003190:	20000000 	.word	0x20000000

08003194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003198:	f7ff ffe0 	bl	800315c <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4904      	ldr	r1, [pc, #16]	@ (80031bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	44020c00 	.word	0x44020c00
 80031bc:	0800b95c 	.word	0x0800b95c

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80031c4:	f7ff ffca 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4904      	ldr	r1, [pc, #16]	@ (80031e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	44020c00 	.word	0x44020c00
 80031e8:	0800b95c 	.word	0x0800b95c

080031ec <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80031f0:	f7ff ffb4 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_RCC_GetPCLK3Freq+0x24>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	0b1b      	lsrs	r3, r3, #12
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4904      	ldr	r1, [pc, #16]	@ (8003214 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	44020c00 	.word	0x44020c00
 8003214:	0800b95c 	.word	0x0800b95c

08003218 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800321c:	b0d8      	sub	sp, #352	@ 0x160
 800321e:	af00      	add	r7, sp, #0
 8003220:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003224:	2300      	movs	r3, #0
 8003226:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800322a:	2300      	movs	r3, #0
 800322c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800323c:	2500      	movs	r5, #0
 800323e:	ea54 0305 	orrs.w	r3, r4, r5
 8003242:	d00b      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003244:	4bcd      	ldr	r3, [pc, #820]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800324a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800324e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	4ac9      	ldr	r2, [pc, #804]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003256:	430b      	orrs	r3, r1
 8003258:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800325c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f002 0801 	and.w	r8, r2, #1
 8003268:	f04f 0900 	mov.w	r9, #0
 800326c:	ea58 0309 	orrs.w	r3, r8, r9
 8003270:	d042      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003272:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	2b05      	cmp	r3, #5
 800327a:	d823      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800327c:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032cd 	.word	0x080032cd
 8003288:	0800329d 	.word	0x0800329d
 800328c:	080032b1 	.word	0x080032b1
 8003290:	080032cd 	.word	0x080032cd
 8003294:	080032cd 	.word	0x080032cd
 8003298:	080032cd 	.word	0x080032cd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800329c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032a0:	3308      	adds	r3, #8
 80032a2:	4618      	mov	r0, r3
 80032a4:	f004 feda 	bl	800805c <RCCEx_PLL2_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80032ae:	e00e      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032b4:	3330      	adds	r3, #48	@ 0x30
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 ff68 	bl	800818c <RCCEx_PLL3_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80032c2:	e004      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80032cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80032d6:	4ba9      	ldr	r3, [pc, #676]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80032dc:	f023 0107 	bic.w	r1, r3, #7
 80032e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e6:	4aa5      	ldr	r2, [pc, #660]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f002 0a02 	and.w	sl, r2, #2
 8003304:	f04f 0b00 	mov.w	fp, #0
 8003308:	ea5a 030b 	orrs.w	r3, sl, fp
 800330c:	f000 8088 	beq.w	8003420 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003310:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	2b28      	cmp	r3, #40	@ 0x28
 8003318:	d868      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800331a:	a201      	add	r2, pc, #4	@ (adr r2, 8003320 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	080033f5 	.word	0x080033f5
 8003324:	080033ed 	.word	0x080033ed
 8003328:	080033ed 	.word	0x080033ed
 800332c:	080033ed 	.word	0x080033ed
 8003330:	080033ed 	.word	0x080033ed
 8003334:	080033ed 	.word	0x080033ed
 8003338:	080033ed 	.word	0x080033ed
 800333c:	080033ed 	.word	0x080033ed
 8003340:	080033c5 	.word	0x080033c5
 8003344:	080033ed 	.word	0x080033ed
 8003348:	080033ed 	.word	0x080033ed
 800334c:	080033ed 	.word	0x080033ed
 8003350:	080033ed 	.word	0x080033ed
 8003354:	080033ed 	.word	0x080033ed
 8003358:	080033ed 	.word	0x080033ed
 800335c:	080033ed 	.word	0x080033ed
 8003360:	080033d9 	.word	0x080033d9
 8003364:	080033ed 	.word	0x080033ed
 8003368:	080033ed 	.word	0x080033ed
 800336c:	080033ed 	.word	0x080033ed
 8003370:	080033ed 	.word	0x080033ed
 8003374:	080033ed 	.word	0x080033ed
 8003378:	080033ed 	.word	0x080033ed
 800337c:	080033ed 	.word	0x080033ed
 8003380:	080033f5 	.word	0x080033f5
 8003384:	080033ed 	.word	0x080033ed
 8003388:	080033ed 	.word	0x080033ed
 800338c:	080033ed 	.word	0x080033ed
 8003390:	080033ed 	.word	0x080033ed
 8003394:	080033ed 	.word	0x080033ed
 8003398:	080033ed 	.word	0x080033ed
 800339c:	080033ed 	.word	0x080033ed
 80033a0:	080033f5 	.word	0x080033f5
 80033a4:	080033ed 	.word	0x080033ed
 80033a8:	080033ed 	.word	0x080033ed
 80033ac:	080033ed 	.word	0x080033ed
 80033b0:	080033ed 	.word	0x080033ed
 80033b4:	080033ed 	.word	0x080033ed
 80033b8:	080033ed 	.word	0x080033ed
 80033bc:	080033ed 	.word	0x080033ed
 80033c0:	080033f5 	.word	0x080033f5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033c8:	3308      	adds	r3, #8
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 fe46 	bl	800805c <RCCEx_PLL2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80033d6:	e00e      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033dc:	3330      	adds	r3, #48	@ 0x30
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 fed4 	bl	800818c <RCCEx_PLL3_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80033ea:	e004      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80033f2:	e000      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80033f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80033fe:	4b5f      	ldr	r3, [pc, #380]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003400:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003404:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003408:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800340c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340e:	4a5b      	ldr	r2, [pc, #364]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003410:	430b      	orrs	r3, r1
 8003412:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003416:	e003      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003418:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800341c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003420:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f002 0304 	and.w	r3, r2, #4
 800342c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003430:	2300      	movs	r3, #0
 8003432:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003436:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800343a:	460b      	mov	r3, r1
 800343c:	4313      	orrs	r3, r2
 800343e:	d04e      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003440:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003446:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800344a:	d02c      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800344c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003450:	d825      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003456:	d028      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345c:	d81f      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800345e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003460:	d025      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003462:	2bc0      	cmp	r3, #192	@ 0xc0
 8003464:	d81b      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003466:	2b80      	cmp	r3, #128	@ 0x80
 8003468:	d00f      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800346a:	2b80      	cmp	r3, #128	@ 0x80
 800346c:	d817      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01f      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003472:	2b40      	cmp	r3, #64	@ 0x40
 8003474:	d113      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003476:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800347a:	3308      	adds	r3, #8
 800347c:	4618      	mov	r0, r3
 800347e:	f004 fded 	bl	800805c <RCCEx_PLL2_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003488:	e014      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800348a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800348e:	3330      	adds	r3, #48	@ 0x30
 8003490:	4618      	mov	r0, r3
 8003492:	f004 fe7b 	bl	800818c <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800349c:	e00a      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80034a4:	e006      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80034a6:	bf00      	nop
 80034a8:	e004      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80034aa:	bf00      	nop
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80034b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10c      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80034bc:	4b2f      	ldr	r3, [pc, #188]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80034be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034c2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034cc:	4a2b      	ldr	r2, [pc, #172]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80034ce:	430b      	orrs	r3, r1
 80034d0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034d4:	e003      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f002 0308 	and.w	r3, r2, #8
 80034ea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80034f4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80034f8:	460b      	mov	r3, r1
 80034fa:	4313      	orrs	r3, r2
 80034fc:	d056      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80034fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003502:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003504:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003508:	d031      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x356>
 800350a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800350e:	d82a      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003514:	d02d      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351a:	d824      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800351c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003520:	d029      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003522:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003526:	d81e      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352c:	d011      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800352e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003532:	d818      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d023      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800353c:	d113      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800353e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003542:	3308      	adds	r3, #8
 8003544:	4618      	mov	r0, r3
 8003546:	f004 fd89 	bl	800805c <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003550:	e017      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003552:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003556:	3330      	adds	r3, #48	@ 0x30
 8003558:	4618      	mov	r0, r3
 800355a:	f004 fe17 	bl	800818c <RCCEx_PLL3_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003564:	e00d      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800356c:	e009      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800356e:	bf00      	nop
 8003570:	e007      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003572:	bf00      	nop
 8003574:	e005      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003576:	bf00      	nop
 8003578:	e003      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800357a:	bf00      	nop
 800357c:	44020c00 	.word	0x44020c00
        break;
 8003580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003582:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800358a:	4bbb      	ldr	r3, [pc, #748]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800358c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003590:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800359a:	4ab7      	ldr	r2, [pc, #732]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800359c:	430b      	orrs	r3, r1
 800359e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035a2:	e003      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f002 0310 	and.w	r3, r2, #16
 80035b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80035c2:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80035c6:	460b      	mov	r3, r1
 80035c8:	4313      	orrs	r3, r2
 80035ca:	d053      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80035cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80035d6:	d031      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80035d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80035dc:	d82a      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80035de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035e2:	d02d      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80035e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035e8:	d824      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80035ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035ee:	d029      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80035f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035f4:	d81e      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fa:	d011      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80035fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003600:	d818      	bhi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d020      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360a:	d113      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800360c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003610:	3308      	adds	r3, #8
 8003612:	4618      	mov	r0, r3
 8003614:	f004 fd22 	bl	800805c <RCCEx_PLL2_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800361e:	e014      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003620:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003624:	3330      	adds	r3, #48	@ 0x30
 8003626:	4618      	mov	r0, r3
 8003628:	f004 fdb0 	bl	800818c <RCCEx_PLL3_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003632:	e00a      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800363a:	e006      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800363c:	bf00      	nop
 800363e:	e004      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003640:	bf00      	nop
 8003642:	e002      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003644:	bf00      	nop
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003652:	4b89      	ldr	r3, [pc, #548]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003658:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800365c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003662:	4a85      	ldr	r2, [pc, #532]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003664:	430b      	orrs	r3, r1
 8003666:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800366a:	e003      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003670:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003674:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f002 0320 	and.w	r3, r2, #32
 8003680:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800368a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800368e:	460b      	mov	r3, r1
 8003690:	4313      	orrs	r3, r2
 8003692:	d053      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003694:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800369e:	d031      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80036a0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80036a4:	d82a      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80036a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036aa:	d02d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036b0:	d824      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80036b2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80036b6:	d029      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80036b8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80036bc:	d81e      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c2:	d011      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c8:	d818      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d020      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80036ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036d2:	d113      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036d8:	3308      	adds	r3, #8
 80036da:	4618      	mov	r0, r3
 80036dc:	f004 fcbe 	bl	800805c <RCCEx_PLL2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80036e6:	e014      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036ec:	3330      	adds	r3, #48	@ 0x30
 80036ee:	4618      	mov	r0, r3
 80036f0:	f004 fd4c 	bl	800818c <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80036fa:	e00a      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003702:	e006      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003704:	bf00      	nop
 8003706:	e004      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003708:	bf00      	nop
 800370a:	e002      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800370c:	bf00      	nop
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003712:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800371a:	4b57      	ldr	r3, [pc, #348]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800371c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003720:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003724:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	4a53      	ldr	r2, [pc, #332]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800372c:	430b      	orrs	r3, r1
 800372e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003732:	e003      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003738:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800373c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003748:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003752:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8003756:	460b      	mov	r3, r1
 8003758:	4313      	orrs	r3, r2
 800375a:	d053      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800375c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003762:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003766:	d031      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003768:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800376c:	d82a      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800376e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003772:	d02d      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003774:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003778:	d824      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800377a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800377e:	d029      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003780:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003784:	d81e      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003786:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800378a:	d011      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800378c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003790:	d818      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d020      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003796:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800379a:	d113      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800379c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037a0:	3308      	adds	r3, #8
 80037a2:	4618      	mov	r0, r3
 80037a4:	f004 fc5a 	bl	800805c <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80037ae:	e014      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037b4:	3330      	adds	r3, #48	@ 0x30
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 fce8 	bl	800818c <RCCEx_PLL3_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80037c2:	e00a      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037ca:	e006      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80037cc:	bf00      	nop
 80037ce:	e004      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80037d0:	bf00      	nop
 80037d2:	e002      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80037d4:	bf00      	nop
 80037d6:	e000      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80037d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80037e2:	4b25      	ldr	r3, [pc, #148]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80037e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037e8:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80037ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f2:	4a21      	ldr	r2, [pc, #132]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80037f4:	430b      	orrs	r3, r1
 80037f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037fa:	e003      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003800:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003810:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800381a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800381e:	460b      	mov	r3, r1
 8003820:	4313      	orrs	r3, r2
 8003822:	d055      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003824:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800382a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800382e:	d033      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003830:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003834:	d82c      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003836:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800383a:	d02f      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800383c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003840:	d826      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003842:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003846:	d02b      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003848:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800384c:	d820      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003852:	d013      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003858:	d81a      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d022      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800385e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003862:	d115      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003868:	3308      	adds	r3, #8
 800386a:	4618      	mov	r0, r3
 800386c:	f004 fbf6 	bl	800805c <RCCEx_PLL2_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003876:	e016      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003878:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800387c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003880:	3330      	adds	r3, #48	@ 0x30
 8003882:	4618      	mov	r0, r3
 8003884:	f004 fc82 	bl	800818c <RCCEx_PLL3_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800388e:	e00a      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003896:	e006      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003898:	bf00      	nop
 800389a:	e004      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800389c:	bf00      	nop
 800389e:	e002      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80038a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80038ae:	4bbb      	ldr	r3, [pc, #748]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038b4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038be:	4ab7      	ldr	r2, [pc, #732]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038c6:	e003      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80038d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80038dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80038e6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80038ea:	460b      	mov	r3, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	d053      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80038f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038fa:	d031      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80038fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003900:	d82a      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003902:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003906:	d02d      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003908:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800390c:	d824      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800390e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003912:	d029      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003914:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003918:	d81e      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800391a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800391e:	d011      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003924:	d818      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d020      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x754>
 800392a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800392e:	d113      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003934:	3308      	adds	r3, #8
 8003936:	4618      	mov	r0, r3
 8003938:	f004 fb90 	bl	800805c <RCCEx_PLL2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003942:	e014      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003948:	3330      	adds	r3, #48	@ 0x30
 800394a:	4618      	mov	r0, r3
 800394c:	f004 fc1e 	bl	800818c <RCCEx_PLL3_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003956:	e00a      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800395e:	e006      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003960:	bf00      	nop
 8003962:	e004      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003964:	bf00      	nop
 8003966:	e002      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003968:	bf00      	nop
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800396c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10c      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003976:	4b89      	ldr	r3, [pc, #548]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800397c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003986:	4a85      	ldr	r2, [pc, #532]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003988:	430b      	orrs	r3, r1
 800398a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003994:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80039a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039ae:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039b2:	460b      	mov	r3, r1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	d055      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80039b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039c0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80039c4:	d031      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x812>
 80039c6:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80039ca:	d82a      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80039cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039d0:	d02d      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x816>
 80039d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039d6:	d824      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80039d8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80039dc:	d029      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80039de:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80039e2:	d81e      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80039e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039e8:	d011      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80039ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ee:	d818      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d020      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80039f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039f8:	d113      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039fe:	3308      	adds	r3, #8
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fb2b 	bl	800805c <RCCEx_PLL2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003a0c:	e014      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a12:	3330      	adds	r3, #48	@ 0x30
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 fbb9 	bl	800818c <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003a20:	e00a      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a28:	e006      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a2a:	bf00      	nop
 8003a2c:	e004      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e002      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a32:	bf00      	nop
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10d      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003a40:	4b56      	ldr	r3, [pc, #344]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a46:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a52:	4a52      	ldr	r2, [pc, #328]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a5a:	e003      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003a70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a7a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d044      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d823      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003a90:	a201      	add	r2, pc, #4	@ (adr r2, 8003a98 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003ae1 	.word	0x08003ae1
 8003a9c:	08003ab1 	.word	0x08003ab1
 8003aa0:	08003ac5 	.word	0x08003ac5
 8003aa4:	08003ae1 	.word	0x08003ae1
 8003aa8:	08003ae1 	.word	0x08003ae1
 8003aac:	08003ae1 	.word	0x08003ae1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 fad0 	bl	800805c <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003ac2:	e00e      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ac8:	3330      	adds	r3, #48	@ 0x30
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 fb5e 	bl	800818c <RCCEx_PLL3_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003aea:	4b2c      	ldr	r3, [pc, #176]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003aec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003af0:	f023 0107 	bic.w	r1, r3, #7
 8003af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003afc:	4a27      	ldr	r2, [pc, #156]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003afe:	430b      	orrs	r3, r1
 8003b00:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b24:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d04f      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b36:	2b50      	cmp	r3, #80	@ 0x50
 8003b38:	d029      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003b3a:	2b50      	cmp	r3, #80	@ 0x50
 8003b3c:	d823      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b3e:	2b40      	cmp	r3, #64	@ 0x40
 8003b40:	d027      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003b42:	2b40      	cmp	r3, #64	@ 0x40
 8003b44:	d81f      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b46:	2b30      	cmp	r3, #48	@ 0x30
 8003b48:	d025      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003b4a:	2b30      	cmp	r3, #48	@ 0x30
 8003b4c:	d81b      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d00f      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d817      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d022      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d113      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b62:	3308      	adds	r3, #8
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 fa79 	bl	800805c <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003b70:	e017      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b76:	3330      	adds	r3, #48	@ 0x30
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 fb07 	bl	800818c <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003b84:	e00d      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b8c:	e009      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003b8e:	bf00      	nop
 8003b90:	e007      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003b92:	bf00      	nop
 8003b94:	e005      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003b96:	bf00      	nop
 8003b98:	e003      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003b9a:	bf00      	nop
 8003b9c:	44020c00 	.word	0x44020c00
        break;
 8003ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10d      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003baa:	4baf      	ldr	r3, [pc, #700]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003bb0:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbc:	4aaa      	ldr	r2, [pc, #680]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003bc4:	e003      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003bda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003be4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4313      	orrs	r3, r2
 8003bec:	d055      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003bee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bf6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003bfa:	d031      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003bfc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003c00:	d82a      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c06:	d02d      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003c08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c0c:	d824      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c12:	d029      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003c14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c18:	d81e      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c1e:	d011      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003c20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c24:	d818      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d020      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003c2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c2e:	d113      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c34:	3308      	adds	r3, #8
 8003c36:	4618      	mov	r0, r3
 8003c38:	f004 fa10 	bl	800805c <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003c42:	e014      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c48:	3330      	adds	r3, #48	@ 0x30
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 fa9e 	bl	800818c <RCCEx_PLL3_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003c56:	e00a      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c5e:	e006      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003c60:	bf00      	nop
 8003c62:	e004      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003c64:	bf00      	nop
 8003c66:	e002      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003c68:	bf00      	nop
 8003c6a:	e000      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10d      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003c76:	4b7c      	ldr	r3, [pc, #496]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c88:	4a77      	ldr	r2, [pc, #476]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c90:	e003      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	d03d      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cc6:	d01b      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003cc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ccc:	d814      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cd2:	d017      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cd8:	d80e      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d014      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce2:	d109      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ce8:	3330      	adds	r3, #48	@ 0x30
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 fa4e 	bl	800818c <RCCEx_PLL3_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003cf6:	e008      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cfe:	e004      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003d00:	bf00      	nop
 8003d02:	e002      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003d04:	bf00      	nop
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10d      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003d12:	4b55      	ldr	r3, [pc, #340]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d18:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	4a50      	ldr	r2, [pc, #320]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	d03d      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d62:	d01b      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003d64:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d68:	d814      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003d6a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d6e:	d017      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003d70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d74:	d80e      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003d7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d7e:	d109      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d84:	3330      	adds	r3, #48	@ 0x30
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 fa00 	bl	800818c <RCCEx_PLL3_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003d92:	e008      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d9a:	e004      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003d9c:	bf00      	nop
 8003d9e:	e002      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003da0:	bf00      	nop
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10d      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003dae:	4b2e      	ldr	r3, [pc, #184]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003db0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003db4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc0:	4a29      	ldr	r2, [pc, #164]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003dc8:	e003      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003dde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003de8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dec:	460b      	mov	r3, r1
 8003dee:	4313      	orrs	r3, r2
 8003df0:	d040      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003df2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dfe:	d01b      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003e00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e04:	d814      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003e06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e0a:	d017      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003e0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e10:	d80e      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d014      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e1a:	d109      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e20:	3330      	adds	r3, #48	@ 0x30
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 f9b2 	bl	800818c <RCCEx_PLL3_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003e2e:	e008      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e36:	e004      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003e38:	bf00      	nop
 8003e3a:	e002      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003e3c:	bf00      	nop
 8003e3e:	e000      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d110      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e50:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e5c:	4a02      	ldr	r2, [pc, #8]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e64:	e006      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003e66:	bf00      	nop
 8003e68:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e70:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d03d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ea0:	d01b      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003ea2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ea6:	d814      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003ea8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eac:	d017      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003eae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eb2:	d80e      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d014      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ebe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ec2:	3330      	adds	r3, #48	@ 0x30
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f004 f961 	bl	800818c <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ed8:	e004      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003eda:	bf00      	nop
 8003edc:	e002      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003ede:	bf00      	nop
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003eec:	4bbe      	ldr	r3, [pc, #760]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003eee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ef2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003ef6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003efe:	4aba      	ldr	r2, [pc, #744]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	d035      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f3c:	d015      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f42:	d80e      	bhi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d012      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f52:	3330      	adds	r3, #48	@ 0x30
 8003f54:	4618      	mov	r0, r3
 8003f56:	f004 f919 	bl	800818c <RCCEx_PLL3_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003f60:	e006      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f68:	e002      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003f6a:	bf00      	nop
 8003f6c:	e000      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003f78:	4b9b      	ldr	r3, [pc, #620]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f7e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003f82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f8a:	4a97      	ldr	r2, [pc, #604]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f92:	e003      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fb2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003fbc:	4b8a      	ldr	r3, [pc, #552]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	4a89      	ldr	r2, [pc, #548]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003fc6:	61d3      	str	r3, [r2, #28]
 8003fc8:	4b87      	ldr	r3, [pc, #540]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fca:	69d9      	ldr	r1, [r3, #28]
 8003fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fd0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003fd4:	4a84      	ldr	r2, [pc, #528]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ff0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	d055      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003ffa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ffe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004002:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004006:	d031      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004008:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800400c:	d82a      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004012:	d02d      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004018:	d824      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800401a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800401e:	d029      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004020:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004024:	d81e      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800402a:	d011      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800402c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004030:	d818      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d020      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800403a:	d113      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800403c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004040:	3308      	adds	r3, #8
 8004042:	4618      	mov	r0, r3
 8004044:	f004 f80a 	bl	800805c <RCCEx_PLL2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800404e:	e014      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004050:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004054:	3330      	adds	r3, #48	@ 0x30
 8004056:	4618      	mov	r0, r3
 8004058:	f004 f898 	bl	800818c <RCCEx_PLL3_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004062:	e00a      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800406a:	e006      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800406c:	bf00      	nop
 800406e:	e004      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004070:	bf00      	nop
 8004072:	e002      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004074:	bf00      	nop
 8004076:	e000      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10d      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004082:	4b59      	ldr	r3, [pc, #356]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004084:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004088:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800408c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004094:	4a54      	ldr	r2, [pc, #336]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004096:	430b      	orrs	r3, r1
 8004098:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800409c:	e003      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80040b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040bc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d055      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80040c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040ce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80040d2:	d031      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80040d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80040d8:	d82a      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80040da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040de:	d02d      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80040e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040e4:	d824      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80040e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040ea:	d029      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80040ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040f0:	d81e      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80040f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040f6:	d011      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040fc:	d818      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d020      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004106:	d113      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004108:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800410c:	3308      	adds	r3, #8
 800410e:	4618      	mov	r0, r3
 8004110:	f003 ffa4 	bl	800805c <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800411a:	e014      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800411c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004120:	3330      	adds	r3, #48	@ 0x30
 8004122:	4618      	mov	r0, r3
 8004124:	f004 f832 	bl	800818c <RCCEx_PLL3_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800412e:	e00a      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004136:	e006      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004138:	bf00      	nop
 800413a:	e004      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800413c:	bf00      	nop
 800413e:	e002      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004140:	bf00      	nop
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004146:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10d      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800414e:	4b26      	ldr	r3, [pc, #152]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004150:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004154:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004158:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800415c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004160:	4a21      	ldr	r2, [pc, #132]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004162:	430b      	orrs	r3, r1
 8004164:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800416e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004172:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	2100      	movs	r1, #0
 800417c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004188:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	d057      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004192:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004196:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800419a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800419e:	d033      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80041a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041a4:	d82c      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80041a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041aa:	d02f      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80041ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041b0:	d826      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80041b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041b6:	d02b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80041b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041bc:	d820      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80041be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c2:	d013      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c8:	d81a      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d022      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80041ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d2:	d115      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041d8:	3308      	adds	r3, #8
 80041da:	4618      	mov	r0, r3
 80041dc:	f003 ff3e 	bl	800805c <RCCEx_PLL2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80041e6:	e016      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80041e8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f0:	3330      	adds	r3, #48	@ 0x30
 80041f2:	4618      	mov	r0, r3
 80041f4:	f003 ffca 	bl	800818c <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80041fe:	e00a      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004206:	e006      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004208:	bf00      	nop
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800420c:	bf00      	nop
 800420e:	e002      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10d      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800421e:	4bbb      	ldr	r3, [pc, #748]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004220:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004224:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004228:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800422c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004230:	4ab6      	ldr	r2, [pc, #728]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004232:	430b      	orrs	r3, r1
 8004234:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004238:	e003      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800423e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004242:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	2100      	movs	r1, #0
 800424c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004258:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d055      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800426a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800426e:	d031      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004270:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004274:	d82a      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800427a:	d02d      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800427c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004280:	d824      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004282:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004286:	d029      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004288:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800428c:	d81e      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800428e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004292:	d011      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004294:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004298:	d818      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d020      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800429e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042a2:	d113      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042a8:	3308      	adds	r3, #8
 80042aa:	4618      	mov	r0, r3
 80042ac:	f003 fed6 	bl	800805c <RCCEx_PLL2_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80042b6:	e014      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042bc:	3330      	adds	r3, #48	@ 0x30
 80042be:	4618      	mov	r0, r3
 80042c0:	f003 ff64 	bl	800818c <RCCEx_PLL3_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80042ca:	e00a      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042d2:	e006      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80042d4:	bf00      	nop
 80042d6:	e004      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80042d8:	bf00      	nop
 80042da:	e002      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80042dc:	bf00      	nop
 80042de:	e000      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80042e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80042ea:	4b88      	ldr	r3, [pc, #544]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80042f0:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80042f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042fc:	4a83      	ldr	r2, [pc, #524]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042fe:	430b      	orrs	r3, r1
 8004300:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004304:	e003      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004306:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800430a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800430e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	2100      	movs	r1, #0
 8004318:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800431c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004320:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004324:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004328:	460b      	mov	r3, r1
 800432a:	4313      	orrs	r3, r2
 800432c:	d055      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800432e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004332:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004336:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800433a:	d031      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800433c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004340:	d82a      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004342:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004346:	d02d      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800434c:	d824      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800434e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004352:	d029      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004354:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004358:	d81e      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800435a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800435e:	d011      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004360:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004364:	d818      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d020      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800436a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800436e:	d113      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004370:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004374:	3308      	adds	r3, #8
 8004376:	4618      	mov	r0, r3
 8004378:	f003 fe70 	bl	800805c <RCCEx_PLL2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004382:	e014      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004388:	3330      	adds	r3, #48	@ 0x30
 800438a:	4618      	mov	r0, r3
 800438c:	f003 fefe 	bl	800818c <RCCEx_PLL3_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004396:	e00a      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800439e:	e006      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80043a0:	bf00      	nop
 80043a2:	e004      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80043a4:	bf00      	nop
 80043a6:	e002      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80043a8:	bf00      	nop
 80043aa:	e000      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80043ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10d      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80043b6:	4b55      	ldr	r3, [pc, #340]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80043bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80043c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043c8:	4a50      	ldr	r2, [pc, #320]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043ca:	430b      	orrs	r3, r1
 80043cc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80043da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	2100      	movs	r1, #0
 80043e4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80043e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043f0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d055      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80043fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004402:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004406:	d031      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800440c:	d82a      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800440e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004412:	d02d      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004418:	d824      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800441a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800441e:	d029      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004420:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004424:	d81e      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800442a:	d011      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004430:	d818      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d020      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800443a:	d113      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800443c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004440:	3308      	adds	r3, #8
 8004442:	4618      	mov	r0, r3
 8004444:	f003 fe0a 	bl	800805c <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800444e:	e014      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004454:	3330      	adds	r3, #48	@ 0x30
 8004456:	4618      	mov	r0, r3
 8004458:	f003 fe98 	bl	800818c <RCCEx_PLL3_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004462:	e00a      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800446a:	e006      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800446c:	bf00      	nop
 800446e:	e004      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004470:	bf00      	nop
 8004472:	e002      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004482:	4b22      	ldr	r3, [pc, #136]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004484:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004488:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800448c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004490:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004494:	4a1d      	ldr	r2, [pc, #116]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004496:	430b      	orrs	r3, r1
 8004498:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800449c:	e003      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80044b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80044c0:	460b      	mov	r3, r1
 80044c2:	4313      	orrs	r3, r2
 80044c4:	d055      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80044c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80044ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044d2:	d035      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80044d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044d8:	d82e      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80044da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044de:	d031      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80044e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044e4:	d828      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80044e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044ea:	d01b      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80044ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044f0:	d822      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80044f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044fa:	d009      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80044fc:	e01c      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fe:	4b03      	ldr	r3, [pc, #12]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	4a02      	ldr	r2, [pc, #8]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004508:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800450a:	e01c      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800450c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004510:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004514:	3308      	adds	r3, #8
 8004516:	4618      	mov	r0, r3
 8004518:	f003 fda0 	bl	800805c <RCCEx_PLL2_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004522:	e010      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004528:	3330      	adds	r3, #48	@ 0x30
 800452a:	4618      	mov	r0, r3
 800452c:	f003 fe2e 	bl	800818c <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004536:	e006      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800453e:	e002      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004546:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10d      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800454e:	4bc3      	ldr	r3, [pc, #780]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004554:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800455c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004560:	4abe      	ldr	r2, [pc, #760]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004562:	430b      	orrs	r3, r1
 8004564:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800456e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004572:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800457e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004582:	2300      	movs	r3, #0
 8004584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004588:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d051      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004592:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004596:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800459a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800459e:	d033      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80045a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045a4:	d82c      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80045a6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80045aa:	d02d      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80045ac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80045b0:	d826      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80045b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045b6:	d019      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80045b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045bc:	d820      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80045c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80045c6:	d007      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80045c8:	e01a      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ca:	4ba4      	ldr	r3, [pc, #656]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ce:	4aa3      	ldr	r2, [pc, #652]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045d6:	e018      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045dc:	3308      	adds	r3, #8
 80045de:	4618      	mov	r0, r3
 80045e0:	f003 fd3c 	bl	800805c <RCCEx_PLL2_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045ea:	e00e      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045f0:	3330      	adds	r3, #48	@ 0x30
 80045f2:	4618      	mov	r0, r3
 80045f4:	f003 fdca 	bl	800818c <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045fe:	e004      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004606:	e000      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10d      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004612:	4b92      	ldr	r3, [pc, #584]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004618:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800461c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004620:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004624:	4a8d      	ldr	r2, [pc, #564]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004626:	430b      	orrs	r3, r1
 8004628:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800462c:	e003      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004632:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004642:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004644:	2300      	movs	r3, #0
 8004646:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004648:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800464c:	460b      	mov	r3, r1
 800464e:	4313      	orrs	r3, r2
 8004650:	d032      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004652:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800465a:	2b05      	cmp	r3, #5
 800465c:	d80f      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800465e:	2b03      	cmp	r3, #3
 8004660:	d211      	bcs.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8004662:	2b01      	cmp	r3, #1
 8004664:	d911      	bls.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8004666:	2b02      	cmp	r3, #2
 8004668:	d109      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800466a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800466e:	3308      	adds	r3, #8
 8004670:	4618      	mov	r0, r3
 8004672:	f003 fcf3 	bl	800805c <RCCEx_PLL2_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800467c:	e006      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004684:	e002      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004686:	bf00      	nop
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800468a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10d      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004694:	4b71      	ldr	r3, [pc, #452]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800469a:	f023 0107 	bic.w	r1, r3, #7
 800469e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046a6:	4a6d      	ldr	r2, [pc, #436]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046a8:	430b      	orrs	r3, r1
 80046aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046ae:	e003      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80046b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	2100      	movs	r1, #0
 80046c2:	6739      	str	r1, [r7, #112]	@ 0x70
 80046c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80046ca:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80046ce:	460b      	mov	r3, r1
 80046d0:	4313      	orrs	r3, r2
 80046d2:	d024      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80046d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d005      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046ea:	e002      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80046f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10d      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80046fa:	4b58      	ldr	r3, [pc, #352]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004700:	f023 0108 	bic.w	r1, r3, #8
 8004704:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004708:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800470c:	4a53      	ldr	r2, [pc, #332]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800470e:	430b      	orrs	r3, r1
 8004710:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800471a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800471e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800472a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800472c:	2300      	movs	r3, #0
 800472e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004730:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	f000 80b9 	beq.w	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800473c:	4b48      	ldr	r3, [pc, #288]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	4a47      	ldr	r2, [pc, #284]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004748:	f7fc ff28 	bl	800159c <HAL_GetTick>
 800474c:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004750:	e00b      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fc ff23 	bl	800159c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d903      	bls.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004768:	e005      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800476a:	4b3d      	ldr	r3, [pc, #244]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0ed      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8004776:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 8093 	bne.w	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004780:	4b36      	ldr	r3, [pc, #216]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800478a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800478e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d023      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8004796:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800479a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800479e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01b      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047a6:	4b2d      	ldr	r3, [pc, #180]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047b4:	4b29      	ldr	r3, [pc, #164]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ba:	4a28      	ldr	r2, [pc, #160]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047c4:	4b25      	ldr	r3, [pc, #148]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ca:	4a24      	ldr	r2, [pc, #144]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047d4:	4a21      	ldr	r2, [pc, #132]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80047da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d019      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fc fed7 	bl	800159c <HAL_GetTick>
 80047ee:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f2:	e00d      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7fc fed2 	bl	800159c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004804:	429a      	cmp	r2, r3
 8004806:	d903      	bls.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800480e:	e006      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004810:	4b12      	ldr	r3, [pc, #72]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ea      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800481e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004822:	2b00      	cmp	r3, #0
 8004824:	d13a      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004826:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800482a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800482e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004836:	d115      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004838:	4b08      	ldr	r3, [pc, #32]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004840:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004844:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800484e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004852:	4a02      	ldr	r2, [pc, #8]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004854:	430b      	orrs	r3, r1
 8004856:	61d3      	str	r3, [r2, #28]
 8004858:	e00a      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800485a:	bf00      	nop
 800485c:	44020c00 	.word	0x44020c00
 8004860:	44020800 	.word	0x44020800
 8004864:	4b9f      	ldr	r3, [pc, #636]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	4a9e      	ldr	r2, [pc, #632]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800486a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800486e:	61d3      	str	r3, [r2, #28]
 8004870:	4b9c      	ldr	r3, [pc, #624]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004876:	4a9b      	ldr	r2, [pc, #620]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004880:	4b98      	ldr	r3, [pc, #608]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004882:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004886:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800488a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004892:	4a94      	ldr	r2, [pc, #592]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004894:	430b      	orrs	r3, r1
 8004896:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800489a:	e008      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800489c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80048a4:	e003      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80048ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80048bc:	2300      	movs	r3, #0
 80048be:	667b      	str	r3, [r7, #100]	@ 0x64
 80048c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80048c4:	460b      	mov	r3, r1
 80048c6:	4313      	orrs	r3, r2
 80048c8:	d035      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80048ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80048d2:	2b30      	cmp	r3, #48	@ 0x30
 80048d4:	d014      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80048d6:	2b30      	cmp	r3, #48	@ 0x30
 80048d8:	d80e      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d012      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d80a      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d010      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d106      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ea:	4b7e      	ldr	r3, [pc, #504]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	4a7d      	ldr	r2, [pc, #500]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80048f6:	e008      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048fe:	e004      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004900:	bf00      	nop
 8004902:	e002      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004904:	bf00      	nop
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004912:	4b74      	ldr	r3, [pc, #464]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004918:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800491c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004920:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004924:	4a6f      	ldr	r2, [pc, #444]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004926:	430b      	orrs	r3, r1
 8004928:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004932:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004936:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004942:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004944:	2300      	movs	r3, #0
 8004946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004948:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800494c:	460b      	mov	r3, r1
 800494e:	4313      	orrs	r3, r2
 8004950:	d033      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004952:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004956:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800495e:	2b40      	cmp	r3, #64	@ 0x40
 8004960:	d007      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8004962:	e010      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004964:	4b5f      	ldr	r3, [pc, #380]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	4a5e      	ldr	r2, [pc, #376]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004970:	e00d      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004972:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004976:	3308      	adds	r3, #8
 8004978:	4618      	mov	r0, r3
 800497a:	f003 fb6f 	bl	800805c <RCCEx_PLL2_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004984:	e003      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800498c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800498e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004996:	4b53      	ldr	r3, [pc, #332]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004998:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800499c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80049a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80049a8:	4a4e      	ldr	r2, [pc, #312]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049aa:	430b      	orrs	r3, r1
 80049ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80049b0:	e003      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80049c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80049c8:	2300      	movs	r3, #0
 80049ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80049cc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80049d0:	460b      	mov	r3, r1
 80049d2:	4313      	orrs	r3, r2
 80049d4:	d033      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80049d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80049e2:	2b80      	cmp	r3, #128	@ 0x80
 80049e4:	d007      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80049e6:	e010      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	4a3d      	ldr	r2, [pc, #244]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80049f4:	e00d      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049fa:	3308      	adds	r3, #8
 80049fc:	4618      	mov	r0, r3
 80049fe:	f003 fb2d 	bl	800805c <RCCEx_PLL2_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10d      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004a1a:	4b32      	ldr	r3, [pc, #200]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a20:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a28:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a34:	e003      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004a3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d04a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004a5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d827      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a81 	.word	0x08004a81
 8004a70:	08004a8f 	.word	0x08004a8f
 8004a74:	08004aa3 	.word	0x08004aa3
 8004a78:	08004abf 	.word	0x08004abf
 8004a7c:	08004abf 	.word	0x08004abf
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a80:	4b18      	ldr	r3, [pc, #96]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	4a17      	ldr	r2, [pc, #92]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004a8c:	e018      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a92:	3308      	adds	r3, #8
 8004a94:	4618      	mov	r0, r3
 8004a96:	f003 fae1 	bl	800805c <RCCEx_PLL2_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004aa0:	e00e      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aa6:	3330      	adds	r3, #48	@ 0x30
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f003 fb6f 	bl	800818c <RCCEx_PLL3_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004ab4:	e004      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004abc:	e000      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10f      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004ac8:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ace:	f023 0107 	bic.w	r1, r3, #7
 8004ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ada:	4a02      	ldr	r2, [pc, #8]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004adc:	430b      	orrs	r3, r1
 8004ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ae2:	e005      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004ae4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004aec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004afe:	2300      	movs	r3, #0
 8004b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b06:	460b      	mov	r3, r1
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f000 8081 	beq.w	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d85f      	bhi.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004ba5 	.word	0x08004ba5
 8004b24:	08004bdb 	.word	0x08004bdb
 8004b28:	08004bdb 	.word	0x08004bdb
 8004b2c:	08004bdb 	.word	0x08004bdb
 8004b30:	08004bdb 	.word	0x08004bdb
 8004b34:	08004bdb 	.word	0x08004bdb
 8004b38:	08004bdb 	.word	0x08004bdb
 8004b3c:	08004bdb 	.word	0x08004bdb
 8004b40:	08004bb3 	.word	0x08004bb3
 8004b44:	08004bdb 	.word	0x08004bdb
 8004b48:	08004bdb 	.word	0x08004bdb
 8004b4c:	08004bdb 	.word	0x08004bdb
 8004b50:	08004bdb 	.word	0x08004bdb
 8004b54:	08004bdb 	.word	0x08004bdb
 8004b58:	08004bdb 	.word	0x08004bdb
 8004b5c:	08004bdb 	.word	0x08004bdb
 8004b60:	08004bc7 	.word	0x08004bc7
 8004b64:	08004bdb 	.word	0x08004bdb
 8004b68:	08004bdb 	.word	0x08004bdb
 8004b6c:	08004bdb 	.word	0x08004bdb
 8004b70:	08004bdb 	.word	0x08004bdb
 8004b74:	08004bdb 	.word	0x08004bdb
 8004b78:	08004bdb 	.word	0x08004bdb
 8004b7c:	08004bdb 	.word	0x08004bdb
 8004b80:	08004be3 	.word	0x08004be3
 8004b84:	08004bdb 	.word	0x08004bdb
 8004b88:	08004bdb 	.word	0x08004bdb
 8004b8c:	08004bdb 	.word	0x08004bdb
 8004b90:	08004bdb 	.word	0x08004bdb
 8004b94:	08004bdb 	.word	0x08004bdb
 8004b98:	08004bdb 	.word	0x08004bdb
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004be3 	.word	0x08004be3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba4:	4bab      	ldr	r3, [pc, #684]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba8:	4aaa      	ldr	r2, [pc, #680]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004bb0:	e018      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f003 fa4f 	bl	800805c <RCCEx_PLL2_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004bc4:	e00e      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bca:	3330      	adds	r3, #48	@ 0x30
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f003 fadd 	bl	800818c <RCCEx_PLL3_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004bd8:	e004      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004be0:	e000      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10d      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004bec:	4b99      	ldr	r3, [pc, #612]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004bf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004bfe:	4a95      	ldr	r2, [pc, #596]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c00:	430b      	orrs	r3, r1
 8004c02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c06:	e003      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c1e:	2300      	movs	r3, #0
 8004c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d04e      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c38:	d02e      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c3e:	d827      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004c40:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c42:	d02b      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004c44:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c46:	d823      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004c48:	2b80      	cmp	r3, #128	@ 0x80
 8004c4a:	d017      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004c4c:	2b80      	cmp	r3, #128	@ 0x80
 8004c4e:	d81f      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004c54:	2b40      	cmp	r3, #64	@ 0x40
 8004c56:	d007      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004c58:	e01a      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5a:	4b7e      	ldr	r3, [pc, #504]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c64:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004c66:	e01a      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f003 f9f4 	bl	800805c <RCCEx_PLL2_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004c7a:	e010      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c80:	3330      	adds	r3, #48	@ 0x30
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 fa82 	bl	800818c <RCCEx_PLL3_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004c8e:	e006      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c96:	e002      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004c98:	bf00      	nop
 8004c9a:	e000      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10d      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004ca6:	4b6b      	ldr	r3, [pc, #428]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cb8:	4a66      	ldr	r2, [pc, #408]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cc0:	e003      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cc6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004cd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cd8:	2300      	movs	r3, #0
 8004cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cdc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	d055      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004ce6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004cee:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004cf2:	d031      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004cf4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004cf8:	d82a      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cfe:	d02d      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d04:	d824      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d06:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d0a:	d029      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004d0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d10:	d81e      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d16:	d011      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1c:	d818      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d020      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d26:	d113      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f003 f994 	bl	800805c <RCCEx_PLL2_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004d3a:	e014      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d40:	3330      	adds	r3, #48	@ 0x30
 8004d42:	4618      	mov	r0, r3
 8004d44:	f003 fa22 	bl	800818c <RCCEx_PLL3_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d56:	e006      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004d58:	bf00      	nop
 8004d5a:	e004      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004d5c:	bf00      	nop
 8004d5e:	e002      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10d      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004d6e:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d74:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d7c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004d80:	4a34      	ldr	r2, [pc, #208]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d82:	430b      	orrs	r3, r1
 8004d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d88:	e003      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004da0:	2300      	movs	r3, #0
 8004da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004da4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004da8:	460b      	mov	r3, r1
 8004daa:	4313      	orrs	r3, r2
 8004dac:	d058      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004db6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004dba:	d031      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004dbc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004dc0:	d82a      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004dc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc6:	d02d      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dcc:	d824      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004dce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd2:	d029      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004dd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd8:	d81e      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dde:	d011      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de4:	d818      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d020      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dee:	d113      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df4:	3308      	adds	r3, #8
 8004df6:	4618      	mov	r0, r3
 8004df8:	f003 f930 	bl	800805c <RCCEx_PLL2_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e02:	e014      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e08:	3330      	adds	r3, #48	@ 0x30
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f003 f9be 	bl	800818c <RCCEx_PLL3_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e16:	e00a      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e1e:	e006      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e20:	bf00      	nop
 8004e22:	e004      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e24:	bf00      	nop
 8004e26:	e002      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e28:	bf00      	nop
 8004e2a:	e000      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d110      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004e36:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e3c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e48:	4902      	ldr	r1, [pc, #8]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004e50:	e006      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004e52:	bf00      	nop
 8004e54:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e5c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	6239      	str	r1, [r7, #32]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e76:	460b      	mov	r3, r1
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	d055      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e84:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004e88:	d031      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004e8a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004e8e:	d82a      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e94:	d02d      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e9a:	d824      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004e9c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004ea0:	d029      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004ea2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004ea6:	d81e      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eac:	d011      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb2:	d818      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d020      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ebc:	d113      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ebe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f003 f8c9 	bl	800805c <RCCEx_PLL2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ed0:	e014      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ed6:	3330      	adds	r3, #48	@ 0x30
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f003 f957 	bl	800818c <RCCEx_PLL3_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ee4:	e00a      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004eec:	e006      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004eee:	bf00      	nop
 8004ef0:	e004      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004efc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10d      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004f04:	4b88      	ldr	r3, [pc, #544]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f0a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f16:	4984      	ldr	r1, [pc, #528]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004f1e:	e003      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f24:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	2100      	movs	r1, #0
 8004f32:	61b9      	str	r1, [r7, #24]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4313      	orrs	r3, r2
 8004f42:	d03d      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d81c      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004f50:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f93 	.word	0x08004f93
 8004f5c:	08004f69 	.word	0x08004f69
 8004f60:	08004f77 	.word	0x08004f77
 8004f64:	08004f93 	.word	0x08004f93
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f68:	4b6f      	ldr	r3, [pc, #444]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f72:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004f74:	e00e      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f003 f86d 	bl	800805c <RCCEx_PLL2_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004f88:	e004      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f90:	e000      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004f9c:	4b62      	ldr	r3, [pc, #392]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fa2:	f023 0203 	bic.w	r2, r3, #3
 8004fa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004faa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004fae:	495e      	ldr	r1, [pc, #376]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004fb6:	e003      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	2100      	movs	r1, #0
 8004fca:	6139      	str	r1, [r7, #16]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	d03a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fe0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe8:	d00e      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fee:	d815      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff8:	d110      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005004:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005006:	e00e      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800500c:	3308      	adds	r3, #8
 800500e:	4618      	mov	r0, r3
 8005010:	f003 f824 	bl	800805c <RCCEx_PLL2_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800501a:	e004      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005022:	e000      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005026:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10d      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800502e:	4b3e      	ldr	r3, [pc, #248]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005034:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800503c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005040:	4939      	ldr	r1, [pc, #228]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800504e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005052:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	2100      	movs	r1, #0
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005068:	460b      	mov	r3, r1
 800506a:	4313      	orrs	r3, r2
 800506c:	d038      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800506e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005072:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005076:	2b30      	cmp	r3, #48	@ 0x30
 8005078:	d01b      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800507a:	2b30      	cmp	r3, #48	@ 0x30
 800507c:	d815      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800507e:	2b10      	cmp	r3, #16
 8005080:	d002      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005082:	2b20      	cmp	r3, #32
 8005084:	d007      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005086:	e010      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005088:	4b27      	ldr	r3, [pc, #156]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	4a26      	ldr	r2, [pc, #152]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800508e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005092:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005094:	e00e      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005096:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800509a:	3330      	adds	r3, #48	@ 0x30
 800509c:	4618      	mov	r0, r3
 800509e:	f003 f875 	bl	800818c <RCCEx_PLL3_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80050a8:	e004      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050b0:	e000      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80050b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10d      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80050bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050c2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80050ce:	4916      	ldr	r1, [pc, #88]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80050d6:	e003      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	2100      	movs	r1, #0
 80050ea:	6039      	str	r1, [r7, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	607b      	str	r3, [r7, #4]
 80050f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	d00c      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80050fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005102:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005106:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800510a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800510e:	4906      	ldr	r1, [pc, #24]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005116:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800511a:	4618      	mov	r0, r3
 800511c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8005120:	46bd      	mov	sp, r7
 8005122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005126:	bf00      	nop
 8005128:	44020c00 	.word	0x44020c00

0800512c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800512c:	b480      	push	{r7}
 800512e:	b08b      	sub	sp, #44	@ 0x2c
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005134:	4bad      	ldr	r3, [pc, #692]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800513e:	4bab      	ldr	r3, [pc, #684]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005148:	4ba8      	ldr	r3, [pc, #672]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005152:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005154:	4ba5      	ldr	r3, [pc, #660]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800515e:	4ba3      	ldr	r3, [pc, #652]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	08db      	lsrs	r3, r3, #3
 8005164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8126 	beq.w	80053ce <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d053      	beq.n	8005230 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d86f      	bhi.n	800526e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d003      	beq.n	800519c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d02b      	beq.n	80051f2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800519a:	e068      	b.n	800526e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800519c:	4b93      	ldr	r3, [pc, #588]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	08db      	lsrs	r3, r3, #3
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	4a92      	ldr	r2, [pc, #584]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	ee07 3a90 	vmov	s15, r3
 80051b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80051d4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80051d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80051f0:	e068      	b.n	80052c4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80053f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005212:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800522e:	e049      	b.n	80052c4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800523e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005250:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005268:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800526c:	e02a      	b.n	80052c4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800526e:	4b5f      	ldr	r3, [pc, #380]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	08db      	lsrs	r3, r3, #3
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	4a5d      	ldr	r2, [pc, #372]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800527a:	fa22 f303 	lsr.w	r3, r2, r3
 800527e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80052a6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80052c2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052c4:	4b49      	ldr	r3, [pc, #292]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052d0:	d121      	bne.n	8005316 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80052d2:	4b46      	ldr	r3, [pc, #280]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d017      	beq.n	800530e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80052de:	4b43      	ldr	r3, [pc, #268]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	0a5b      	lsrs	r3, r3, #9
 80052e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80052f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80052f8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80052fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005304:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e006      	b.n	800531c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e002      	b.n	800531c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800531c:	4b33      	ldr	r3, [pc, #204]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005328:	d121      	bne.n	800536e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800532a:	4b30      	ldr	r3, [pc, #192]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800532c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d017      	beq.n	8005366 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005336:	4b2d      	ldr	r3, [pc, #180]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533a:	0c1b      	lsrs	r3, r3, #16
 800533c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005348:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800534c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005350:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	e006      	b.n	8005374 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	605a      	str	r2, [r3, #4]
 800536c:	e002      	b.n	8005374 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005374:	4b1d      	ldr	r3, [pc, #116]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800537c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005380:	d121      	bne.n	80053c6 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005382:	4b1a      	ldr	r3, [pc, #104]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d017      	beq.n	80053be <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800538e:	4b17      	ldr	r3, [pc, #92]	@ (80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005392:	0e1b      	lsrs	r3, r3, #24
 8005394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80053a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80053a8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80053ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80053bc:	e010      	b.n	80053e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	e00c      	b.n	80053e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	e008      	b.n	80053e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	372c      	adds	r7, #44	@ 0x2c
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	44020c00 	.word	0x44020c00
 80053f0:	03d09000 	.word	0x03d09000
 80053f4:	46000000 	.word	0x46000000
 80053f8:	4a742400 	.word	0x4a742400
 80053fc:	4bbebc20 	.word	0x4bbebc20

08005400 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005400:	b480      	push	{r7}
 8005402:	b08b      	sub	sp, #44	@ 0x2c
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005408:	4bad      	ldr	r3, [pc, #692]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800540a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005410:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005412:	4bab      	ldr	r3, [pc, #684]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800541c:	4ba8      	ldr	r3, [pc, #672]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005426:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005428:	4ba5      	ldr	r3, [pc, #660]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005432:	4ba3      	ldr	r3, [pc, #652]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8126 	beq.w	80056a2 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d053      	beq.n	8005504 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b03      	cmp	r3, #3
 8005460:	d86f      	bhi.n	8005542 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d003      	beq.n	8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d02b      	beq.n	80054c6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800546e:	e068      	b.n	8005542 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005470:	4b93      	ldr	r3, [pc, #588]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	08db      	lsrs	r3, r3, #3
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	4a92      	ldr	r2, [pc, #584]	@ (80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
 8005480:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	ee07 3a90 	vmov	s15, r3
 80054a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80054a8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80054ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80054c4:	e068      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	ee07 3a90 	vmov	s15, r3
 80054cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80054d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80054e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80054ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005502:	e049      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005520:	ed97 6a04 	vldr	s12, [r7, #16]
 8005524:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005530:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005540:	e02a      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005542:	4b5f      	ldr	r3, [pc, #380]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	08db      	lsrs	r3, r3, #3
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	4a5d      	ldr	r2, [pc, #372]	@ (80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800554e:	fa22 f303 	lsr.w	r3, r2, r3
 8005552:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a04 	vldr	s12, [r7, #16]
 800557a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005596:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005598:	4b49      	ldr	r3, [pc, #292]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055a4:	d121      	bne.n	80055ea <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80055a6:	4b46      	ldr	r3, [pc, #280]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d017      	beq.n	80055e2 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80055b2:	4b43      	ldr	r3, [pc, #268]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	0a5b      	lsrs	r3, r3, #9
 80055b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80055c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80055cc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80055d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e006      	b.n	80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e002      	b.n	80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055f0:	4b33      	ldr	r3, [pc, #204]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055fc:	d121      	bne.n	8005642 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80055fe:	4b30      	ldr	r3, [pc, #192]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d017      	beq.n	800563a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800560a:	4b2d      	ldr	r3, [pc, #180]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005614:	ee07 3a90 	vmov	s15, r3
 8005618:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800561c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005620:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005624:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800562c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005630:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	605a      	str	r2, [r3, #4]
 8005638:	e006      	b.n	8005648 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	605a      	str	r2, [r3, #4]
 8005640:	e002      	b.n	8005648 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005648:	4b1d      	ldr	r3, [pc, #116]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005654:	d121      	bne.n	800569a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005656:	4b1a      	ldr	r3, [pc, #104]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d017      	beq.n	8005692 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005662:	4b17      	ldr	r3, [pc, #92]	@ (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005666:	0e1b      	lsrs	r3, r3, #24
 8005668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005674:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005678:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800567c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005688:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005690:	e010      	b.n	80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	609a      	str	r2, [r3, #8]
}
 8005698:	e00c      	b.n	80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	e008      	b.n	80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	bf00      	nop
 80056b6:	372c      	adds	r7, #44	@ 0x2c
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	44020c00 	.word	0x44020c00
 80056c4:	03d09000 	.word	0x03d09000
 80056c8:	46000000 	.word	0x46000000
 80056cc:	4a742400 	.word	0x4a742400
 80056d0:	4bbebc20 	.word	0x4bbebc20

080056d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b08b      	sub	sp, #44	@ 0x2c
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80056dc:	4bad      	ldr	r3, [pc, #692]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80056e6:	4bab      	ldr	r3, [pc, #684]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80056f0:	4ba8      	ldr	r3, [pc, #672]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056fa:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80056fc:	4ba5      	ldr	r3, [pc, #660]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005706:	4ba3      	ldr	r3, [pc, #652]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800570a:	08db      	lsrs	r3, r3, #3
 800570c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	fb02 f303 	mul.w	r3, r2, r3
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8126 	beq.w	8005976 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d053      	beq.n	80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d86f      	bhi.n	8005816 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d003      	beq.n	8005744 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d02b      	beq.n	800579a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8005742:	e068      	b.n	8005816 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005744:	4b93      	ldr	r3, [pc, #588]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	08db      	lsrs	r3, r3, #3
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	4a92      	ldr	r2, [pc, #584]	@ (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
 8005754:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005778:	ed97 6a04 	vldr	s12, [r7, #16]
 800577c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800578c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005794:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005798:	e068      	b.n	800586c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80057a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80057ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80057be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80057d6:	e049      	b.n	800586c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80057e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	ee07 3a90 	vmov	s15, r3
 80057f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80057f8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80057fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005804:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005810:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005814:	e02a      	b.n	800586c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005816:	4b5f      	ldr	r3, [pc, #380]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	08db      	lsrs	r3, r3, #3
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	4a5d      	ldr	r2, [pc, #372]	@ (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005822:	fa22 f303 	lsr.w	r3, r2, r3
 8005826:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584a:	ed97 6a04 	vldr	s12, [r7, #16]
 800584e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800586a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800586c:	4b49      	ldr	r3, [pc, #292]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005878:	d121      	bne.n	80058be <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800587a:	4b46      	ldr	r3, [pc, #280]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d017      	beq.n	80058b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005886:	4b43      	ldr	r3, [pc, #268]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588a:	0a5b      	lsrs	r3, r3, #9
 800588c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005890:	ee07 3a90 	vmov	s15, r3
 8005894:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005898:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800589c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80058a0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80058a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ac:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e006      	b.n	80058c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e002      	b.n	80058c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058c4:	4b33      	ldr	r3, [pc, #204]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058d0:	d121      	bne.n	8005916 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80058d2:	4b30      	ldr	r3, [pc, #192]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d017      	beq.n	800590e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80058de:	4b2d      	ldr	r3, [pc, #180]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80058f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80058f8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80058fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005904:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	605a      	str	r2, [r3, #4]
 800590c:	e006      	b.n	800591c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	605a      	str	r2, [r3, #4]
 8005914:	e002      	b.n	800591c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800591c:	4b1d      	ldr	r3, [pc, #116]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005928:	d121      	bne.n	800596e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800592a:	4b1a      	ldr	r3, [pc, #104]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d017      	beq.n	8005966 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005936:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593a:	0e1b      	lsrs	r3, r3, #24
 800593c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005948:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800594c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005950:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800595c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005964:	e010      	b.n	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	e00c      	b.n	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
}
 8005974:	e008      	b.n	8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	609a      	str	r2, [r3, #8]
}
 8005988:	bf00      	nop
 800598a:	372c      	adds	r7, #44	@ 0x2c
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	44020c00 	.word	0x44020c00
 8005998:	03d09000 	.word	0x03d09000
 800599c:	46000000 	.word	0x46000000
 80059a0:	4a742400 	.word	0x4a742400
 80059a4:	4bbebc20 	.word	0x4bbebc20

080059a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b08f      	sub	sp, #60	@ 0x3c
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80059b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059b6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80059ba:	4321      	orrs	r1, r4
 80059bc:	d150      	bne.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80059be:	4b26      	ldr	r3, [pc, #152]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80059ca:	4b23      	ldr	r3, [pc, #140]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d108      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80059d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059de:	d104      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80059e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e6:	f002 bb2a 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80059ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059f8:	d108      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a00:	d104      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005a02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a08:	f002 bb19 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005a0c:	4b12      	ldr	r3, [pc, #72]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a18:	d119      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a20:	d115      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a22:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a2e:	d30a      	bcc.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005a30:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a3a:	4a08      	ldr	r2, [pc, #32]	@ (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a42:	f002 bafc 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a4a:	f002 baf8 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a52:	f002 baf4 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a56:	bf00      	nop
 8005a58:	44020c00 	.word	0x44020c00
 8005a5c:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a64:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8005a68:	ea50 0104 	orrs.w	r1, r0, r4
 8005a6c:	f001 8275 	beq.w	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8005a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a74:	2801      	cmp	r0, #1
 8005a76:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8005a7a:	f082 82dd 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a82:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005a86:	ea50 0104 	orrs.w	r1, r0, r4
 8005a8a:	f001 816c 	beq.w	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8005a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a92:	2801      	cmp	r0, #1
 8005a94:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005a98:	f082 82ce 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa0:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8005aa4:	ea50 0104 	orrs.w	r1, r0, r4
 8005aa8:	f001 8602 	beq.w	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005aac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab0:	2801      	cmp	r0, #1
 8005ab2:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8005ab6:	f082 82bf 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005abe:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8005ac2:	ea50 0104 	orrs.w	r1, r0, r4
 8005ac6:	f001 854c 	beq.w	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ace:	2801      	cmp	r0, #1
 8005ad0:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8005ad4:	f082 82b0 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005adc:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8005ae0:	ea50 0104 	orrs.w	r1, r0, r4
 8005ae4:	f001 849e 	beq.w	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aec:	2801      	cmp	r0, #1
 8005aee:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8005af2:	f082 82a1 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afa:	f1a1 0420 	sub.w	r4, r1, #32
 8005afe:	ea50 0104 	orrs.w	r1, r0, r4
 8005b02:	f001 83e8 	beq.w	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b0a:	2801      	cmp	r0, #1
 8005b0c:	f171 0120 	sbcs.w	r1, r1, #32
 8005b10:	f082 8292 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b18:	f1a1 0410 	sub.w	r4, r1, #16
 8005b1c:	ea50 0104 	orrs.w	r1, r0, r4
 8005b20:	f002 8256 	beq.w	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b28:	2801      	cmp	r0, #1
 8005b2a:	f171 0110 	sbcs.w	r1, r1, #16
 8005b2e:	f082 8283 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b36:	f1a1 0408 	sub.w	r4, r1, #8
 8005b3a:	ea50 0104 	orrs.w	r1, r0, r4
 8005b3e:	f002 81cc 	beq.w	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b46:	2801      	cmp	r0, #1
 8005b48:	f171 0108 	sbcs.w	r1, r1, #8
 8005b4c:	f082 8274 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b54:	1f0c      	subs	r4, r1, #4
 8005b56:	ea50 0104 	orrs.w	r1, r0, r4
 8005b5a:	f001 8648 	beq.w	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b62:	2801      	cmp	r0, #1
 8005b64:	f171 0104 	sbcs.w	r1, r1, #4
 8005b68:	f082 8266 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b70:	1e8c      	subs	r4, r1, #2
 8005b72:	ea50 0104 	orrs.w	r1, r0, r4
 8005b76:	f002 8143 	beq.w	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b7e:	2801      	cmp	r0, #1
 8005b80:	f171 0102 	sbcs.w	r1, r1, #2
 8005b84:	f082 8258 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b8c:	1e4c      	subs	r4, r1, #1
 8005b8e:	ea50 0104 	orrs.w	r1, r0, r4
 8005b92:	f002 80ce 	beq.w	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8005b96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b9a:	2801      	cmp	r0, #1
 8005b9c:	f171 0101 	sbcs.w	r1, r1, #1
 8005ba0:	f082 824a 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba8:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8005bac:	4321      	orrs	r1, r4
 8005bae:	f002 8059 	beq.w	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bb6:	4cd9      	ldr	r4, [pc, #868]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	f171 0100 	sbcs.w	r1, r1, #0
 8005bbe:	f082 823b 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bc6:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005bca:	4321      	orrs	r1, r4
 8005bcc:	f001 87d9 	beq.w	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd4:	4cd2      	ldr	r4, [pc, #840]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005bd6:	42a0      	cmp	r0, r4
 8005bd8:	f171 0100 	sbcs.w	r1, r1, #0
 8005bdc:	f082 822c 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be4:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005be8:	4321      	orrs	r1, r4
 8005bea:	f001 8751 	beq.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf2:	4ccc      	ldr	r4, [pc, #816]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005bf4:	42a0      	cmp	r0, r4
 8005bf6:	f171 0100 	sbcs.w	r1, r1, #0
 8005bfa:	f082 821d 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c02:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005c06:	4321      	orrs	r1, r4
 8005c08:	f001 869a 	beq.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c10:	4cc5      	ldr	r4, [pc, #788]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005c12:	42a0      	cmp	r0, r4
 8005c14:	f171 0100 	sbcs.w	r1, r1, #0
 8005c18:	f082 820e 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c20:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005c24:	4321      	orrs	r1, r4
 8005c26:	f001 8612 	beq.w	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c2e:	4cbf      	ldr	r4, [pc, #764]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	f171 0100 	sbcs.w	r1, r1, #0
 8005c36:	f082 81ff 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c3e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005c42:	4321      	orrs	r1, r4
 8005c44:	f002 817e 	beq.w	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c4c:	4cb8      	ldr	r4, [pc, #736]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005c4e:	42a0      	cmp	r0, r4
 8005c50:	f171 0100 	sbcs.w	r1, r1, #0
 8005c54:	f082 81f0 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c5c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8005c60:	4321      	orrs	r1, r4
 8005c62:	f000 829e 	beq.w	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c6a:	4cb2      	ldr	r4, [pc, #712]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c6c:	42a0      	cmp	r0, r4
 8005c6e:	f171 0100 	sbcs.w	r1, r1, #0
 8005c72:	f082 81e1 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c7a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005c7e:	4321      	orrs	r1, r4
 8005c80:	f000 826d 	beq.w	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c88:	4cab      	ldr	r4, [pc, #684]	@ (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005c8a:	42a0      	cmp	r0, r4
 8005c8c:	f171 0100 	sbcs.w	r1, r1, #0
 8005c90:	f082 81d2 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c98:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005c9c:	4321      	orrs	r1, r4
 8005c9e:	f001 800d 	beq.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca6:	4ca5      	ldr	r4, [pc, #660]	@ (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005ca8:	42a0      	cmp	r0, r4
 8005caa:	f171 0100 	sbcs.w	r1, r1, #0
 8005cae:	f082 81c3 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cb6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8005cba:	4321      	orrs	r1, r4
 8005cbc:	f000 81d0 	beq.w	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc4:	4c9e      	ldr	r4, [pc, #632]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005cc6:	42a0      	cmp	r0, r4
 8005cc8:	f171 0100 	sbcs.w	r1, r1, #0
 8005ccc:	f082 81b4 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8005cd8:	4321      	orrs	r1, r4
 8005cda:	f000 8142 	beq.w	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005cde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ce2:	4c98      	ldr	r4, [pc, #608]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	f171 0100 	sbcs.w	r1, r1, #0
 8005cea:	f082 81a5 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cf2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005cf6:	4321      	orrs	r1, r4
 8005cf8:	f001 824e 	beq.w	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d00:	4c91      	ldr	r4, [pc, #580]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005d02:	42a0      	cmp	r0, r4
 8005d04:	f171 0100 	sbcs.w	r1, r1, #0
 8005d08:	f082 8196 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d10:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005d14:	4321      	orrs	r1, r4
 8005d16:	f001 8197 	beq.w	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d1e:	4c8b      	ldr	r4, [pc, #556]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	f171 0100 	sbcs.w	r1, r1, #0
 8005d26:	f082 8187 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d2e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005d32:	4321      	orrs	r1, r4
 8005d34:	f001 8154 	beq.w	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d3c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005d40:	f171 0100 	sbcs.w	r1, r1, #0
 8005d44:	f082 8178 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d4c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005d50:	4321      	orrs	r1, r4
 8005d52:	f001 80b7 	beq.w	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d5a:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005d5e:	42a0      	cmp	r0, r4
 8005d60:	f171 0100 	sbcs.w	r1, r1, #0
 8005d64:	f082 8168 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005d70:	4321      	orrs	r1, r4
 8005d72:	f001 8064 	beq.w	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d7a:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005d7e:	42a0      	cmp	r0, r4
 8005d80:	f171 0100 	sbcs.w	r1, r1, #0
 8005d84:	f082 8158 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d8c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005d90:	4321      	orrs	r1, r4
 8005d92:	f001 8011 	beq.w	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d9a:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005d9e:	42a0      	cmp	r0, r4
 8005da0:	f171 0100 	sbcs.w	r1, r1, #0
 8005da4:	f082 8148 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dac:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8005db0:	4321      	orrs	r1, r4
 8005db2:	f000 871e 	beq.w	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005db6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dba:	f241 0401 	movw	r4, #4097	@ 0x1001
 8005dbe:	42a0      	cmp	r0, r4
 8005dc0:	f171 0100 	sbcs.w	r1, r1, #0
 8005dc4:	f082 8138 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dcc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8005dd0:	4321      	orrs	r1, r4
 8005dd2:	f000 86a8 	beq.w	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dda:	f640 0401 	movw	r4, #2049	@ 0x801
 8005dde:	42a0      	cmp	r0, r4
 8005de0:	f171 0100 	sbcs.w	r1, r1, #0
 8005de4:	f082 8128 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dec:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005df0:	4321      	orrs	r1, r4
 8005df2:	f000 8632 	beq.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dfa:	f240 4401 	movw	r4, #1025	@ 0x401
 8005dfe:	42a0      	cmp	r0, r4
 8005e00:	f171 0100 	sbcs.w	r1, r1, #0
 8005e04:	f082 8118 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e0c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005e10:	4321      	orrs	r1, r4
 8005e12:	f000 85b0 	beq.w	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e1a:	f240 2401 	movw	r4, #513	@ 0x201
 8005e1e:	42a0      	cmp	r0, r4
 8005e20:	f171 0100 	sbcs.w	r1, r1, #0
 8005e24:	f082 8108 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e2c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005e30:	4321      	orrs	r1, r4
 8005e32:	f000 8535 	beq.w	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005e36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e3a:	f240 1401 	movw	r4, #257	@ 0x101
 8005e3e:	42a0      	cmp	r0, r4
 8005e40:	f171 0100 	sbcs.w	r1, r1, #0
 8005e44:	f082 80f8 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e4c:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005e50:	4321      	orrs	r1, r4
 8005e52:	f000 84ba 	beq.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005e56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e5a:	2881      	cmp	r0, #129	@ 0x81
 8005e5c:	f171 0100 	sbcs.w	r1, r1, #0
 8005e60:	f082 80ea 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e68:	2821      	cmp	r0, #33	@ 0x21
 8005e6a:	f171 0100 	sbcs.w	r1, r1, #0
 8005e6e:	d26f      	bcs.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e74:	4301      	orrs	r1, r0
 8005e76:	f002 80df 	beq.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e7e:	1e42      	subs	r2, r0, #1
 8005e80:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005e84:	2a20      	cmp	r2, #32
 8005e86:	f173 0100 	sbcs.w	r1, r3, #0
 8005e8a:	f082 80d5 	bcs.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e8e:	2a1f      	cmp	r2, #31
 8005e90:	f202 80d2 	bhi.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e94:	a101      	add	r1, pc, #4	@ (adr r1, 8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005e96:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	080061fd 	.word	0x080061fd
 8005ea0:	080062c9 	.word	0x080062c9
 8005ea4:	08008039 	.word	0x08008039
 8005ea8:	08006389 	.word	0x08006389
 8005eac:	08008039 	.word	0x08008039
 8005eb0:	08008039 	.word	0x08008039
 8005eb4:	08008039 	.word	0x08008039
 8005eb8:	08006459 	.word	0x08006459
 8005ebc:	08008039 	.word	0x08008039
 8005ec0:	08008039 	.word	0x08008039
 8005ec4:	08008039 	.word	0x08008039
 8005ec8:	08008039 	.word	0x08008039
 8005ecc:	08008039 	.word	0x08008039
 8005ed0:	08008039 	.word	0x08008039
 8005ed4:	08008039 	.word	0x08008039
 8005ed8:	0800653b 	.word	0x0800653b
 8005edc:	08008039 	.word	0x08008039
 8005ee0:	08008039 	.word	0x08008039
 8005ee4:	08008039 	.word	0x08008039
 8005ee8:	08008039 	.word	0x08008039
 8005eec:	08008039 	.word	0x08008039
 8005ef0:	08008039 	.word	0x08008039
 8005ef4:	08008039 	.word	0x08008039
 8005ef8:	08008039 	.word	0x08008039
 8005efc:	08008039 	.word	0x08008039
 8005f00:	08008039 	.word	0x08008039
 8005f04:	08008039 	.word	0x08008039
 8005f08:	08008039 	.word	0x08008039
 8005f0c:	08008039 	.word	0x08008039
 8005f10:	08008039 	.word	0x08008039
 8005f14:	08008039 	.word	0x08008039
 8005f18:	08006611 	.word	0x08006611
 8005f1c:	80000001 	.word	0x80000001
 8005f20:	40000001 	.word	0x40000001
 8005f24:	20000001 	.word	0x20000001
 8005f28:	10000001 	.word	0x10000001
 8005f2c:	08000001 	.word	0x08000001
 8005f30:	04000001 	.word	0x04000001
 8005f34:	00800001 	.word	0x00800001
 8005f38:	00400001 	.word	0x00400001
 8005f3c:	00200001 	.word	0x00200001
 8005f40:	00100001 	.word	0x00100001
 8005f44:	00080001 	.word	0x00080001
 8005f48:	00040001 	.word	0x00040001
 8005f4c:	00020001 	.word	0x00020001
 8005f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f54:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	f000 83c4 	beq.w	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005f5e:	f002 b86b 	b.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005f62:	4ba1      	ldr	r3, [pc, #644]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f68:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f74:	d036      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f7c:	d86b      	bhi.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f84:	d02b      	beq.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f8c:	d863      	bhi.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f94:	d01b      	beq.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f9c:	d85b      	bhi.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d004      	beq.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005faa:	d008      	beq.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005fac:	e053      	b.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fae:	f107 0320 	add.w	r3, r7, #32
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff f8ba 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005fbc:	e04e      	b.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fbe:	f107 0314 	add.w	r3, r7, #20
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fa1c 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005fcc:	e046      	b.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fce:	f107 0308 	add.w	r3, r7, #8
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fb7e 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005fdc:	e03e      	b.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005fde:	4b83      	ldr	r3, [pc, #524]	@ (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005fe2:	e03b      	b.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fe4:	4b80      	ldr	r3, [pc, #512]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005fee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d10c      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006002:	4b79      	ldr	r3, [pc, #484]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	4a78      	ldr	r2, [pc, #480]	@ (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800600e:	fa22 f303 	lsr.w	r3, r2, r3
 8006012:	637b      	str	r3, [r7, #52]	@ 0x34
 8006014:	e01e      	b.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006016:	4b74      	ldr	r3, [pc, #464]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800601e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006022:	d106      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800602a:	d102      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800602c:	4b71      	ldr	r3, [pc, #452]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800602e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006030:	e010      	b.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006032:	4b6d      	ldr	r3, [pc, #436]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800603a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800603e:	d106      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006046:	d102      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006048:	4b6b      	ldr	r3, [pc, #428]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800604a:	637b      	str	r3, [r7, #52]	@ 0x34
 800604c:	e002      	b.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006052:	e003      	b.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006054:	e002      	b.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800605a:	bf00      	nop
          }
        }
        break;
 800605c:	f001 bfef 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006060:	4b61      	ldr	r3, [pc, #388]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006066:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800606a:	633b      	str	r3, [r7, #48]	@ 0x30
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006072:	d036      	beq.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800607a:	d86b      	bhi.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006082:	d02b      	beq.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800608a:	d863      	bhi.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006092:	d01b      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800609a:	d85b      	bhi.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800609c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80060a8:	d008      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80060aa:	e053      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060ac:	f107 0320 	add.w	r3, r7, #32
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff f83b 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80060ba:	e04e      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060bc:	f107 0314 	add.w	r3, r7, #20
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff f99d 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80060ca:	e046      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060cc:	f107 0308 	add.w	r3, r7, #8
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff faff 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80060da:	e03e      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80060dc:	4b43      	ldr	r3, [pc, #268]	@ (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80060de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80060e0:	e03b      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060e2:	4b41      	ldr	r3, [pc, #260]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80060ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060ee:	4b3e      	ldr	r3, [pc, #248]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d10c      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80060fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006100:	4b39      	ldr	r3, [pc, #228]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	08db      	lsrs	r3, r3, #3
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	4a39      	ldr	r2, [pc, #228]	@ (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
 8006110:	637b      	str	r3, [r7, #52]	@ 0x34
 8006112:	e01e      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006114:	4b34      	ldr	r3, [pc, #208]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800611c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006120:	d106      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006128:	d102      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800612a:	4b32      	ldr	r3, [pc, #200]	@ (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
 800612e:	e010      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006130:	4b2d      	ldr	r3, [pc, #180]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800613c:	d106      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006144:	d102      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006146:	4b2c      	ldr	r3, [pc, #176]	@ (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
 800614a:	e002      	b.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006150:	e003      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006152:	e002      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006158:	bf00      	nop
          }
        }
        break;
 800615a:	f001 bf70 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800615e:	4b22      	ldr	r3, [pc, #136]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006160:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006168:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	2b00      	cmp	r3, #0
 800616e:	d108      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006170:	f107 0320 	add.w	r3, r7, #32
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe ffd9 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800617e:	f001 bf5e 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	2b40      	cmp	r3, #64	@ 0x40
 8006186:	d108      	bne.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006188:	f107 0314 	add.w	r3, r7, #20
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff f937 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006196:	f001 bf52 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800619e:	f001 bf4e 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80061a2:	4b11      	ldr	r3, [pc, #68]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ac:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d108      	bne.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b4:	f107 0320 	add.w	r3, r7, #32
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe ffb7 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061c2:	f001 bf3c 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	2b80      	cmp	r3, #128	@ 0x80
 80061ca:	d108      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061cc:	f107 0314 	add.w	r3, r7, #20
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff f915 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061da:	f001 bf30 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061e2:	f001 bf2c 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061e6:	bf00      	nop
 80061e8:	44020c00 	.word	0x44020c00
 80061ec:	00bb8000 	.word	0x00bb8000
 80061f0:	03d09000 	.word	0x03d09000
 80061f4:	003d0900 	.word	0x003d0900
 80061f8:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80061fc:	4b9d      	ldr	r3, [pc, #628]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800620e:	f7fc ffd7 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8006212:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006214:	f001 bf13 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006218:	4b96      	ldr	r3, [pc, #600]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006220:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006224:	d10a      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	2b01      	cmp	r3, #1
 800622a:	d107      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800622c:	f107 0314 	add.w	r3, r7, #20
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff f8e5 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
 800623a:	e043      	b.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800623c:	4b8d      	ldr	r3, [pc, #564]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006248:	d10a      	bne.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624c:	2b02      	cmp	r3, #2
 800624e:	d107      	bne.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006250:	f107 0308 	add.w	r3, r7, #8
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fa3d 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	637b      	str	r3, [r7, #52]	@ 0x34
 800625e:	e031      	b.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006260:	4b84      	ldr	r3, [pc, #528]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d10c      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	2b03      	cmp	r3, #3
 8006270:	d109      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006272:	4b80      	ldr	r3, [pc, #512]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	08db      	lsrs	r3, r3, #3
 8006278:	f003 0303 	and.w	r3, r3, #3
 800627c:	4a7e      	ldr	r2, [pc, #504]	@ (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800627e:	fa22 f303 	lsr.w	r3, r2, r3
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
 8006284:	e01e      	b.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006286:	4b7b      	ldr	r3, [pc, #492]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800628e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006292:	d105      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	2b04      	cmp	r3, #4
 8006298:	d102      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800629a:	4b78      	ldr	r3, [pc, #480]	@ (800647c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800629c:	637b      	str	r3, [r7, #52]	@ 0x34
 800629e:	e011      	b.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80062a0:	4b74      	ldr	r3, [pc, #464]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d106      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	d103      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80062b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ba:	e003      	b.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062c0:	f001 bebd 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062c4:	f001 bebb 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80062c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062da:	f7fc ff5b 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 80062de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80062e0:	f001 bead 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80062e4:	4b63      	ldr	r3, [pc, #396]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062f0:	d10a      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d107      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f8:	f107 0314 	add.w	r3, r7, #20
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff f87f 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	637b      	str	r3, [r7, #52]	@ 0x34
 8006306:	e03d      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	2b10      	cmp	r3, #16
 800630c:	d108      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800630e:	f107 0308 	add.w	r3, r7, #8
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff f9de 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800631c:	f001 be8f 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006320:	4b54      	ldr	r3, [pc, #336]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b02      	cmp	r3, #2
 800632a:	d10c      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	2b18      	cmp	r3, #24
 8006330:	d109      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006332:	4b50      	ldr	r3, [pc, #320]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	08db      	lsrs	r3, r3, #3
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	4a4e      	ldr	r2, [pc, #312]	@ (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800633e:	fa22 f303 	lsr.w	r3, r2, r3
 8006342:	637b      	str	r3, [r7, #52]	@ 0x34
 8006344:	e01e      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006346:	4b4b      	ldr	r3, [pc, #300]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800634e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006352:	d105      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	2b20      	cmp	r3, #32
 8006358:	d102      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800635a:	4b48      	ldr	r3, [pc, #288]	@ (800647c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800635c:	637b      	str	r3, [r7, #52]	@ 0x34
 800635e:	e011      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006360:	4b44      	ldr	r3, [pc, #272]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b02      	cmp	r3, #2
 800636c:	d106      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	2b28      	cmp	r3, #40	@ 0x28
 8006372:	d103      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8006374:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006378:	637b      	str	r3, [r7, #52]	@ 0x34
 800637a:	e003      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006380:	f001 be5d 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006384:	f001 be5b 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006388:	4b3a      	ldr	r3, [pc, #232]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800638a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800638e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006392:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800639a:	f7fc fefb 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 800639e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80063a0:	f001 be4d 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80063a4:	4b33      	ldr	r3, [pc, #204]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063b0:	d10a      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	2b40      	cmp	r3, #64	@ 0x40
 80063b6:	d107      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063b8:	f107 0314 	add.w	r3, r7, #20
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff f81f 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c6:	e045      	b.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80063c8:	4b2a      	ldr	r3, [pc, #168]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d4:	d10a      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	2b80      	cmp	r3, #128	@ 0x80
 80063da:	d107      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063dc:	f107 0308 	add.w	r3, r7, #8
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff f977 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ea:	e033      	b.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80063ec:	4b21      	ldr	r3, [pc, #132]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d10c      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80063fc:	d109      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	08db      	lsrs	r3, r3, #3
 8006404:	f003 0303 	and.w	r3, r3, #3
 8006408:	4a1b      	ldr	r2, [pc, #108]	@ (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800640a:	fa22 f303 	lsr.w	r3, r2, r3
 800640e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006410:	e020      	b.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006412:	4b18      	ldr	r3, [pc, #96]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800641a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800641e:	d106      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006426:	d102      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006428:	4b14      	ldr	r3, [pc, #80]	@ (800647c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800642a:	637b      	str	r3, [r7, #52]	@ 0x34
 800642c:	e012      	b.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800642e:	4b11      	ldr	r3, [pc, #68]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b02      	cmp	r3, #2
 800643a:	d107      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006442:	d103      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006448:	637b      	str	r3, [r7, #52]	@ 0x34
 800644a:	e003      	b.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006450:	f001 bdf5 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006454:	f001 bdf3 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006458:	4b06      	ldr	r3, [pc, #24]	@ (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800645a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800645e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006462:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800646a:	f7fc fe93 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 800646e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006470:	f001 bde5 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006474:	44020c00 	.word	0x44020c00
 8006478:	03d09000 	.word	0x03d09000
 800647c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006480:	4ba0      	ldr	r3, [pc, #640]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800648c:	d10b      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006494:	d107      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006496:	f107 0314 	add.w	r3, r7, #20
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe ffb0 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a4:	e047      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80064a6:	4b97      	ldr	r3, [pc, #604]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064b2:	d10b      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ba:	d107      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064bc:	f107 0308 	add.w	r3, r7, #8
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff f907 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ca:	e034      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80064cc:	4b8d      	ldr	r3, [pc, #564]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d10d      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80064d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80064de:	d109      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064e0:	4b88      	ldr	r3, [pc, #544]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	08db      	lsrs	r3, r3, #3
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	4a87      	ldr	r2, [pc, #540]	@ (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
 80064f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f2:	e020      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80064f4:	4b83      	ldr	r3, [pc, #524]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006500:	d106      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006508:	d102      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800650a:	4b80      	ldr	r3, [pc, #512]	@ (800670c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800650c:	637b      	str	r3, [r7, #52]	@ 0x34
 800650e:	e012      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006510:	4b7c      	ldr	r3, [pc, #496]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b02      	cmp	r3, #2
 800651c:	d107      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006524:	d103      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800652a:	637b      	str	r3, [r7, #52]	@ 0x34
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006532:	f001 bd84 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006536:	f001 bd82 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800653a:	4b72      	ldr	r3, [pc, #456]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800653c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006540:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006544:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800654c:	f7fc fe22 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8006550:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006552:	f001 bd74 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006556:	4b6b      	ldr	r3, [pc, #428]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800655e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006562:	d10b      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656a:	d107      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800656c:	f107 0314 	add.w	r3, r7, #20
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe ff45 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
 800657a:	e047      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800657c:	4b61      	ldr	r3, [pc, #388]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006588:	d10b      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006590:	d107      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006592:	f107 0308 	add.w	r3, r7, #8
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff f89c 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a0:	e034      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80065a2:	4b58      	ldr	r3, [pc, #352]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d10d      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065b4:	d109      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065b6:	4b53      	ldr	r3, [pc, #332]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	08db      	lsrs	r3, r3, #3
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	4a51      	ldr	r2, [pc, #324]	@ (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80065c2:	fa22 f303 	lsr.w	r3, r2, r3
 80065c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c8:	e020      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80065ca:	4b4e      	ldr	r3, [pc, #312]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d6:	d106      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065de:	d102      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80065e0:	4b4a      	ldr	r3, [pc, #296]	@ (800670c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80065e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e4:	e012      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80065e6:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d107      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80065fa:	d103      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80065fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006600:	637b      	str	r3, [r7, #52]	@ 0x34
 8006602:	e003      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006608:	f001 bd19 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800660c:	f001 bd17 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006610:	4b3c      	ldr	r3, [pc, #240]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006612:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006616:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800661a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006622:	f7fc fdb7 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8006626:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006628:	f001 bd09 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800662c:	4b35      	ldr	r3, [pc, #212]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006638:	d10b      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006640:	d107      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006642:	f107 0314 	add.w	r3, r7, #20
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe feda 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006650:	e047      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006652:	4b2c      	ldr	r3, [pc, #176]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800665a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800665e:	d10b      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8006660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006666:	d107      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006668:	f107 0308 	add.w	r3, r7, #8
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff f831 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	637b      	str	r3, [r7, #52]	@ 0x34
 8006676:	e034      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006678:	4b22      	ldr	r3, [pc, #136]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b02      	cmp	r3, #2
 8006682:	d10d      	bne.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8006684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006686:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800668a:	d109      	bne.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800668c:	4b1d      	ldr	r3, [pc, #116]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	08db      	lsrs	r3, r3, #3
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	4a1c      	ldr	r2, [pc, #112]	@ (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
 800669e:	e020      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80066a0:	4b18      	ldr	r3, [pc, #96]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ac:	d106      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066b4:	d102      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80066b6:	4b15      	ldr	r3, [pc, #84]	@ (800670c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80066b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ba:	e012      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80066bc:	4b11      	ldr	r3, [pc, #68]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d107      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80066d0:	d103      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80066d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d8:	e003      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066de:	f001 bcae 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066e2:	f001 bcac 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80066e6:	4b07      	ldr	r3, [pc, #28]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066ec:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80066f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80066f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10b      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066f8:	f7fc fd4c 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 80066fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80066fe:	f001 bc9e 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006702:	bf00      	nop
 8006704:	44020c00 	.word	0x44020c00
 8006708:	03d09000 	.word	0x03d09000
 800670c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006710:	4ba0      	ldr	r3, [pc, #640]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800671c:	d10b      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006720:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006724:	d107      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006726:	f107 0314 	add.w	r3, r7, #20
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fe68 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34
 8006734:	e047      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8006736:	4b97      	ldr	r3, [pc, #604]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800673e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006742:	d10b      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800674a:	d107      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800674c:	f107 0308 	add.w	r3, r7, #8
 8006750:	4618      	mov	r0, r3
 8006752:	f7fe ffbf 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
 800675a:	e034      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800675c:	4b8d      	ldr	r3, [pc, #564]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d10d      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800676e:	d109      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006770:	4b88      	ldr	r3, [pc, #544]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	4a87      	ldr	r2, [pc, #540]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
 8006780:	637b      	str	r3, [r7, #52]	@ 0x34
 8006782:	e020      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8006784:	4b83      	ldr	r3, [pc, #524]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800678c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006790:	d106      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8006792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006794:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006798:	d102      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800679a:	4b80      	ldr	r3, [pc, #512]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800679c:	637b      	str	r3, [r7, #52]	@ 0x34
 800679e:	e012      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80067a0:	4b7c      	ldr	r3, [pc, #496]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d107      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80067b4:	d103      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80067b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80067bc:	e003      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067c2:	f001 bc3c 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067c6:	f001 bc3a 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80067ca:	4b72      	ldr	r3, [pc, #456]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80067d0:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80067d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067dc:	f7fc fcda 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 80067e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80067e2:	f001 bc2c 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80067e6:	4b6b      	ldr	r3, [pc, #428]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067f2:	d10b      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067fa:	d107      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067fc:	f107 0314 	add.w	r3, r7, #20
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fdfd 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	637b      	str	r3, [r7, #52]	@ 0x34
 800680a:	e047      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800680c:	4b61      	ldr	r3, [pc, #388]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006818:	d10b      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006820:	d107      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006822:	f107 0308 	add.w	r3, r7, #8
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe ff54 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006830:	e034      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8006832:	4b58      	ldr	r3, [pc, #352]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b02      	cmp	r3, #2
 800683c:	d10d      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006844:	d109      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006846:	4b53      	ldr	r3, [pc, #332]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	08db      	lsrs	r3, r3, #3
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	4a51      	ldr	r2, [pc, #324]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006852:	fa22 f303 	lsr.w	r3, r2, r3
 8006856:	637b      	str	r3, [r7, #52]	@ 0x34
 8006858:	e020      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800685a:	4b4e      	ldr	r3, [pc, #312]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006866:	d106      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800686e:	d102      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8006870:	4b4a      	ldr	r3, [pc, #296]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006872:	637b      	str	r3, [r7, #52]	@ 0x34
 8006874:	e012      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8006876:	4b47      	ldr	r3, [pc, #284]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d107      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8006884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006886:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800688a:	d103      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800688c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006890:	637b      	str	r3, [r7, #52]	@ 0x34
 8006892:	e003      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006898:	f001 bbd1 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800689c:	f001 bbcf 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80068a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80068a6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80068aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d104      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068b2:	f7fc fc6f 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 80068b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80068b8:	f001 bbc1 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80068bc:	4b35      	ldr	r3, [pc, #212]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068c8:	d10b      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068d0:	d107      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068d2:	f107 0314 	add.w	r3, r7, #20
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fd92 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e0:	e047      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80068e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ee:	d10b      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068f6:	d107      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068f8:	f107 0308 	add.w	r3, r7, #8
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fee9 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
 8006906:	e034      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006908:	4b22      	ldr	r3, [pc, #136]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b02      	cmp	r3, #2
 8006912:	d10d      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800691a:	d109      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800691c:	4b1d      	ldr	r3, [pc, #116]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	08db      	lsrs	r3, r3, #3
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	4a1c      	ldr	r2, [pc, #112]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
 800692e:	e020      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006930:	4b18      	ldr	r3, [pc, #96]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800693c:	d106      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006944:	d102      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8006946:	4b15      	ldr	r3, [pc, #84]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006948:	637b      	str	r3, [r7, #52]	@ 0x34
 800694a:	e012      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800694c:	4b11      	ldr	r3, [pc, #68]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800694e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b02      	cmp	r3, #2
 8006958:	d107      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006960:	d103      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8006962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
 8006968:	e003      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800696e:	f001 bb66 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006972:	f001 bb64 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8006976:	4b07      	ldr	r3, [pc, #28]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800697c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8006980:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10b      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006988:	f7fc fc04 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 800698c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800698e:	f001 bb56 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006992:	bf00      	nop
 8006994:	44020c00 	.word	0x44020c00
 8006998:	03d09000 	.word	0x03d09000
 800699c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80069a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069ac:	d10b      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069b4:	d107      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b6:	f107 0314 	add.w	r3, r7, #20
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe fd20 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c4:	e047      	b.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80069c6:	4b98      	ldr	r3, [pc, #608]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069d2:	d10b      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069da:	d107      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069dc:	f107 0308 	add.w	r3, r7, #8
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fe77 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ea:	e034      	b.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80069ec:	4b8e      	ldr	r3, [pc, #568]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d10d      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80069fe:	d109      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a00:	4b89      	ldr	r3, [pc, #548]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	08db      	lsrs	r3, r3, #3
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	4a88      	ldr	r2, [pc, #544]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a12:	e020      	b.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006a14:	4b84      	ldr	r3, [pc, #528]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a20:	d106      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a28:	d102      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006a2a:	4b81      	ldr	r3, [pc, #516]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2e:	e012      	b.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006a30:	4b7d      	ldr	r3, [pc, #500]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006a44:	d103      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8006a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4c:	e003      	b.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a52:	f001 baf4 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a56:	f001 baf2 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006a5a:	4b73      	ldr	r3, [pc, #460]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7fc fb92 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8006a70:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a72:	f001 bae4 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8006a76:	4b6c      	ldr	r3, [pc, #432]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a82:	d10a      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8006a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d107      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a8a:	f107 0314 	add.w	r3, r7, #20
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe fcb6 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a98:	e043      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006a9a:	4b63      	ldr	r3, [pc, #396]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aa6:	d10a      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d107      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aae:	f107 0308 	add.w	r3, r7, #8
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fe0e 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006abc:	e031      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006abe:	4b5a      	ldr	r3, [pc, #360]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d109      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ad0:	4b55      	ldr	r3, [pc, #340]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	08db      	lsrs	r3, r3, #3
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	4a54      	ldr	r2, [pc, #336]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae2:	e01e      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006ae4:	4b50      	ldr	r3, [pc, #320]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af0:	d105      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d102      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006af8:	4b4d      	ldr	r3, [pc, #308]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afc:	e011      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006afe:	4b4a      	ldr	r3, [pc, #296]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d106      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	d103      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b18:	e003      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b1e:	f001 ba8e 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b22:	f001 ba8c 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006b26:	4b40      	ldr	r3, [pc, #256]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b30:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b38:	f7fc fb2c 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8006b3c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b3e:	f001 ba7e 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006b42:	4b39      	ldr	r3, [pc, #228]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b4e:	d10a      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d107      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b56:	f107 0314 	add.w	r3, r7, #20
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fe fc50 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b64:	e043      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006b66:	4b30      	ldr	r3, [pc, #192]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b72:	d10a      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d107      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b7a:	f107 0308 	add.w	r3, r7, #8
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fda8 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b88:	e031      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006b8a:	4b27      	ldr	r3, [pc, #156]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	2b30      	cmp	r3, #48	@ 0x30
 8006b9a:	d109      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b9c:	4b22      	ldr	r3, [pc, #136]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	08db      	lsrs	r3, r3, #3
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	4a21      	ldr	r2, [pc, #132]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bae:	e01e      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bbc:	d105      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	2b40      	cmp	r3, #64	@ 0x40
 8006bc2:	d102      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc8:	e011      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006bca:	4b17      	ldr	r3, [pc, #92]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d106      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bda:	2b50      	cmp	r3, #80	@ 0x50
 8006bdc:	d103      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be4:	e003      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bea:	f001 ba28 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bee:	f001 ba26 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bf8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006bfc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006c04:	f7fc faf2 	bl	80031ec <HAL_RCC_GetPCLK3Freq>
 8006c08:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c0a:	f001 ba18 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c14:	d10e      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c16:	f107 0314 	add.w	r3, r7, #20
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe fbf0 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c24:	f001 ba0b 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c28:	44020c00 	.word	0x44020c00
 8006c2c:	03d09000 	.word	0x03d09000
 8006c30:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c3a:	d108      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c3c:	f107 0308 	add.w	r3, r7, #8
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe fd47 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c4a:	f001 b9f8 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006c4e:	4ba4      	ldr	r3, [pc, #656]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d10d      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c60:	d109      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c62:	4b9f      	ldr	r3, [pc, #636]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	08db      	lsrs	r3, r3, #3
 8006c68:	f003 0303 	and.w	r3, r3, #3
 8006c6c:	4a9d      	ldr	r2, [pc, #628]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c74:	e020      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006c76:	4b9a      	ldr	r3, [pc, #616]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c82:	d106      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c8a:	d102      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006c8c:	4b96      	ldr	r3, [pc, #600]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c90:	e012      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006c92:	4b93      	ldr	r3, [pc, #588]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006ca6:	d103      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006ca8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cae:	e003      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cb4:	f001 b9c3 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cb8:	f001 b9c1 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006cbc:	4b88      	ldr	r3, [pc, #544]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006cce:	f7fc fa45 	bl	800315c <HAL_RCC_GetHCLKFreq>
 8006cd2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006cd4:	f001 b9b3 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d104      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cde:	f7fc f911 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8006ce2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ce4:	f001 b9ab 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d108      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cee:	f107 0314 	add.w	r3, r7, #20
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fb84 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cfc:	f001 b99f 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006d00:	4b77      	ldr	r3, [pc, #476]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d0c:	d105      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d102      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006d14:	4b75      	ldr	r3, [pc, #468]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d18:	e023      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006d1a:	4b71      	ldr	r3, [pc, #452]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d10c      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d109      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	08db      	lsrs	r3, r3, #3
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	4a6b      	ldr	r2, [pc, #428]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	e010      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006d40:	4b67      	ldr	r3, [pc, #412]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d4c:	d105      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	2b05      	cmp	r3, #5
 8006d52:	d102      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006d54:	4b64      	ldr	r3, [pc, #400]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d58:	e003      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d5e:	f001 b96e 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d62:	f001 b96c 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006d66:	4b5e      	ldr	r3, [pc, #376]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d6c:	f003 0308 	and.w	r3, r3, #8
 8006d70:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006d72:	4b5b      	ldr	r3, [pc, #364]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d106      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8c:	e012      	b.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006d8e:	4b54      	ldr	r3, [pc, #336]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d9c:	d106      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d103      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006da4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006daa:	e003      	b.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006db0:	f001 b945 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006db4:	f001 b943 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006db8:	4b49      	ldr	r3, [pc, #292]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006dc2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006dca:	f7fc f9e3 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8006dce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006dd0:	f001 b935 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dda:	d108      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ddc:	f107 0308 	add.w	r3, r7, #8
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fc77 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dea:	f001 b928 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006dee:	4b3c      	ldr	r3, [pc, #240]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d10d      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e00:	d109      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e02:	4b37      	ldr	r3, [pc, #220]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	08db      	lsrs	r3, r3, #3
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	4a35      	ldr	r2, [pc, #212]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	e011      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006e16:	4b32      	ldr	r3, [pc, #200]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e22:	d106      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e2a:	d102      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e30:	e003      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e36:	f001 b902 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e3a:	f001 b900 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e3e:	4b28      	ldr	r3, [pc, #160]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e44:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006e48:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d104      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e50:	f7fc f9a0 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8006e54:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e56:	f001 b8f2 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e60:	d108      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e62:	f107 0308 	add.w	r3, r7, #8
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fc34 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e70:	f001 b8e5 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006e74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d10d      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e86:	d109      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e88:	4b15      	ldr	r3, [pc, #84]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	08db      	lsrs	r3, r3, #3
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	4a14      	ldr	r2, [pc, #80]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9a:	e011      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006e9c:	4b10      	ldr	r3, [pc, #64]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea8:	d106      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006eb0:	d102      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb6:	e003      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ebc:	f001 b8bf 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ec0:	f001 b8bd 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ec6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006eca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006ece:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10c      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006ed6:	f7fc f989 	bl	80031ec <HAL_RCC_GetPCLK3Freq>
 8006eda:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006edc:	f001 b8af 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ee0:	44020c00 	.word	0x44020c00
 8006ee4:	03d09000 	.word	0x03d09000
 8006ee8:	003d0900 	.word	0x003d0900
 8006eec:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ef6:	d108      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fbe9 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f06:	f001 b89a 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006f0a:	4b9f      	ldr	r3, [pc, #636]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d10d      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f1c:	d109      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f1e:	4b9a      	ldr	r3, [pc, #616]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	08db      	lsrs	r3, r3, #3
 8006f24:	f003 0303 	and.w	r3, r3, #3
 8006f28:	4a98      	ldr	r2, [pc, #608]	@ (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f30:	e011      	b.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006f32:	4b95      	ldr	r3, [pc, #596]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f3e:	d106      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f46:	d102      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006f48:	4b91      	ldr	r3, [pc, #580]	@ (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f4c:	e003      	b.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f52:	f001 b874 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f56:	f001 b872 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f5a:	4b8b      	ldr	r3, [pc, #556]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f60:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006f64:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006f6c:	f7fc f93e 	bl	80031ec <HAL_RCC_GetPCLK3Freq>
 8006f70:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f72:	f001 b864 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f7c:	d108      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f7e:	f107 0308 	add.w	r3, r7, #8
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fba6 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f8c:	f001 b857 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006f90:	4b7d      	ldr	r3, [pc, #500]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d10d      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fa2:	d109      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fa4:	4b78      	ldr	r3, [pc, #480]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	08db      	lsrs	r3, r3, #3
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	4a77      	ldr	r2, [pc, #476]	@ (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb6:	e011      	b.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006fb8:	4b73      	ldr	r3, [pc, #460]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc4:	d106      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006fcc:	d102      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006fce:	4b70      	ldr	r3, [pc, #448]	@ (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd2:	e003      	b.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fd8:	f001 b831 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006fdc:	f001 b82f 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006fe0:	4b69      	ldr	r3, [pc, #420]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fe2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fe6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006fea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d104      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ff2:	f7fc f8cf 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8006ff6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ff8:	f001 b821 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007002:	d108      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007004:	f107 0308 	add.w	r3, r7, #8
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fb63 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007012:	f001 b814 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007016:	4b5c      	ldr	r3, [pc, #368]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b02      	cmp	r3, #2
 8007020:	d10e      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007028:	d10a      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800702a:	4b57      	ldr	r3, [pc, #348]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	4a55      	ldr	r2, [pc, #340]	@ (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007036:	fa22 f303 	lsr.w	r3, r2, r3
 800703a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800703c:	f000 bfff 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007044:	f000 bffb 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007048:	4b4f      	ldr	r3, [pc, #316]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800704a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800704e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007052:	633b      	str	r3, [r7, #48]	@ 0x30
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800705a:	d056      	beq.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007062:	f200 808b 	bhi.w	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706c:	d03e      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007074:	f200 8082 	bhi.w	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800707e:	d027      	beq.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007086:	d879      	bhi.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800708e:	d017      	beq.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007096:	d871      	bhi.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a4:	d004      	beq.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80070a6:	e069      	b.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80070a8:	f7fc f8a0 	bl	80031ec <HAL_RCC_GetPCLK3Freq>
 80070ac:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80070ae:	e068      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b0:	f107 0314 	add.w	r3, r7, #20
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe f9a3 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070be:	e060      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070c0:	f107 0308 	add.w	r3, r7, #8
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe fb05 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070ce:	e058      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80070d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d103      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80070de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070e4:	e04d      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070ea:	e04a      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80070ec:	4b26      	ldr	r3, [pc, #152]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80070ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070fa:	d103      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80070fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007100:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007102:	e03e      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007108:	e03b      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800710a:	4b1f      	ldr	r3, [pc, #124]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800710c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007110:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007114:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007116:	4b1c      	ldr	r3, [pc, #112]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d10c      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007128:	4b17      	ldr	r3, [pc, #92]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	08db      	lsrs	r3, r3, #3
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	4a16      	ldr	r2, [pc, #88]	@ (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
 8007138:	637b      	str	r3, [r7, #52]	@ 0x34
 800713a:	e01e      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800713c:	4b12      	ldr	r3, [pc, #72]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007148:	d106      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800714a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007150:	d102      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007152:	4b0f      	ldr	r3, [pc, #60]	@ (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007154:	637b      	str	r3, [r7, #52]	@ 0x34
 8007156:	e010      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007158:	4b0b      	ldr	r3, [pc, #44]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007164:	d106      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8007166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800716c:	d102      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800716e:	4b09      	ldr	r3, [pc, #36]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
 8007172:	e002      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007178:	e003      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800717a:	e002      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007180:	bf00      	nop
          }
        }
        break;
 8007182:	f000 bf5c 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007186:	bf00      	nop
 8007188:	44020c00 	.word	0x44020c00
 800718c:	03d09000 	.word	0x03d09000
 8007190:	003d0900 	.word	0x003d0900
 8007194:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007198:	4b9e      	ldr	r3, [pc, #632]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800719a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800719e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80071a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80071aa:	d056      	beq.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80071ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80071b2:	f200 808b 	bhi.w	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071bc:	d03e      	beq.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071c4:	f200 8082 	bhi.w	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071ce:	d027      	beq.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071d6:	d879      	bhi.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071de:	d017      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071e6:	d871      	bhi.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071f4:	d004      	beq.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80071f6:	e069      	b.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80071f8:	f7fb ffcc 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 80071fc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80071fe:	e068      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe f8fb 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800720e:	e060      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007210:	f107 0308 	add.w	r3, r7, #8
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe fa5d 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800721e:	e058      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007220:	4b7c      	ldr	r3, [pc, #496]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b02      	cmp	r3, #2
 800722c:	d103      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800722e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007234:	e04d      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800723a:	e04a      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800723c:	4b75      	ldr	r3, [pc, #468]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800723e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007242:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800724a:	d103      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800724c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007252:	e03e      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007258:	e03b      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800725a:	4b6e      	ldr	r3, [pc, #440]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800725c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007260:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007264:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007266:	4b6b      	ldr	r3, [pc, #428]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b02      	cmp	r3, #2
 8007270:	d10c      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007278:	4b66      	ldr	r3, [pc, #408]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	08db      	lsrs	r3, r3, #3
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	4a65      	ldr	r2, [pc, #404]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
 800728a:	e01e      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800728c:	4b61      	ldr	r3, [pc, #388]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007298:	d106      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800729a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a0:	d102      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072a2:	4b5e      	ldr	r3, [pc, #376]	@ (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a6:	e010      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072b4:	d106      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80072b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072bc:	d102      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072be:	4b58      	ldr	r3, [pc, #352]	@ (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80072c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c2:	e002      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80072c8:	e003      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80072ca:	e002      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072d0:	bf00      	nop
          }
        }
        break;
 80072d2:	f000 beb4 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80072d6:	4b4f      	ldr	r3, [pc, #316]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80072dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80072e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072e8:	d056      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072f0:	f200 808b 	bhi.w	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072fa:	d03e      	beq.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007302:	f200 8082 	bhi.w	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800730c:	d027      	beq.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007314:	d879      	bhi.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800731c:	d017      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007324:	d871      	bhi.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007332:	d004      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007334:	e069      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007336:	f7fb ff59 	bl	80031ec <HAL_RCC_GetPCLK3Freq>
 800733a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800733c:	e068      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800733e:	f107 0314 	add.w	r3, r7, #20
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe f85c 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800734c:	e060      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800734e:	f107 0308 	add.w	r3, r7, #8
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe f9be 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800735c:	e058      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800735e:	4b2d      	ldr	r3, [pc, #180]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b02      	cmp	r3, #2
 800736a:	d103      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800736c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007370:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007372:	e04d      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007378:	e04a      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800737a:	4b26      	ldr	r3, [pc, #152]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800737c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007388:	d103      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800738a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800738e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007390:	e03e      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007396:	e03b      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007398:	4b1e      	ldr	r3, [pc, #120]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800739a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800739e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d10c      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073b6:	4b17      	ldr	r3, [pc, #92]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	08db      	lsrs	r3, r3, #3
 80073bc:	f003 0303 	and.w	r3, r3, #3
 80073c0:	4a15      	ldr	r2, [pc, #84]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80073c2:	fa22 f303 	lsr.w	r3, r2, r3
 80073c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c8:	e01e      	b.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073ca:	4b12      	ldr	r3, [pc, #72]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073d6:	d106      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073de:	d102      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073e0:	4b0e      	ldr	r3, [pc, #56]	@ (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80073e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e4:	e010      	b.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073f2:	d106      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80073f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073fa:	d102      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073fc:	4b08      	ldr	r3, [pc, #32]	@ (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80073fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007400:	e002      	b.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007406:	e003      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007408:	e002      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800740e:	bf00      	nop
          }
        }
        break;
 8007410:	f000 be15 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007414:	44020c00 	.word	0x44020c00
 8007418:	03d09000 	.word	0x03d09000
 800741c:	003d0900 	.word	0x003d0900
 8007420:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007424:	4b9e      	ldr	r3, [pc, #632]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007426:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800742a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800742e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007432:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007436:	d056      	beq.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800743e:	f200 808b 	bhi.w	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007448:	d03e      	beq.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007450:	f200 8082 	bhi.w	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800745a:	d027      	beq.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007462:	d879      	bhi.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800746a:	d017      	beq.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007472:	d871      	bhi.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007480:	d004      	beq.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8007482:	e069      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007484:	f7fb feb2 	bl	80031ec <HAL_RCC_GetPCLK3Freq>
 8007488:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800748a:	e068      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800748c:	f107 0314 	add.w	r3, r7, #20
 8007490:	4618      	mov	r0, r3
 8007492:	f7fd ffb5 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800749a:	e060      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800749c:	f107 0308 	add.w	r3, r7, #8
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fe f917 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074aa:	e058      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074ac:	4b7c      	ldr	r3, [pc, #496]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d103      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80074ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074c0:	e04d      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074c6:	e04a      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80074c8:	4b75      	ldr	r3, [pc, #468]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074d6:	d103      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80074d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074de:	e03e      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074e4:	e03b      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074e6:	4b6e      	ldr	r3, [pc, #440]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80074f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074f2:	4b6b      	ldr	r3, [pc, #428]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d10c      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d109      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007504:	4b66      	ldr	r3, [pc, #408]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	08db      	lsrs	r3, r3, #3
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	4a65      	ldr	r2, [pc, #404]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007510:	fa22 f303 	lsr.w	r3, r2, r3
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
 8007516:	e01e      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007518:	4b61      	ldr	r3, [pc, #388]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007524:	d106      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752c:	d102      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800752e:	4b5e      	ldr	r3, [pc, #376]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007530:	637b      	str	r3, [r7, #52]	@ 0x34
 8007532:	e010      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007534:	4b5a      	ldr	r3, [pc, #360]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800753c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007540:	d106      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8007542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007544:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007548:	d102      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800754a:	4b58      	ldr	r3, [pc, #352]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800754c:	637b      	str	r3, [r7, #52]	@ 0x34
 800754e:	e002      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007554:	e003      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8007556:	e002      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800755c:	bf00      	nop
          }
        }
        break;
 800755e:	f000 bd6e 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007562:	4b4f      	ldr	r3, [pc, #316]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007564:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007568:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800756c:	633b      	str	r3, [r7, #48]	@ 0x30
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007574:	d056      	beq.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8007576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007578:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800757c:	f200 808b 	bhi.w	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007586:	d03e      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8007588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800758e:	f200 8082 	bhi.w	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007598:	d027      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075a0:	d879      	bhi.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075a8:	d017      	beq.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075b0:	d871      	bhi.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80075b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075be:	d004      	beq.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80075c0:	e069      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80075c2:	f7fb fe13 	bl	80031ec <HAL_RCC_GetPCLK3Freq>
 80075c6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80075c8:	e068      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ca:	f107 0314 	add.w	r3, r7, #20
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fd ff16 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075d8:	e060      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075da:	f107 0308 	add.w	r3, r7, #8
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe f878 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075e8:	e058      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075ea:	4b2d      	ldr	r3, [pc, #180]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80075ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d103      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80075f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80075fe:	e04d      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007604:	e04a      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007606:	4b26      	ldr	r3, [pc, #152]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800760c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007614:	d103      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8007616:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800761c:	e03e      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007622:	e03b      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007624:	4b1e      	ldr	r3, [pc, #120]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800762a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800762e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007630:	4b1b      	ldr	r3, [pc, #108]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b02      	cmp	r3, #2
 800763a:	d10c      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800763c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007642:	4b17      	ldr	r3, [pc, #92]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	08db      	lsrs	r3, r3, #3
 8007648:	f003 0303 	and.w	r3, r3, #3
 800764c:	4a15      	ldr	r2, [pc, #84]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800764e:	fa22 f303 	lsr.w	r3, r2, r3
 8007652:	637b      	str	r3, [r7, #52]	@ 0x34
 8007654:	e01e      	b.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007656:	4b12      	ldr	r3, [pc, #72]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800765e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007662:	d106      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8007664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800766a:	d102      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800766c:	4b0e      	ldr	r3, [pc, #56]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800766e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007670:	e010      	b.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007672:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800767a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800767e:	d106      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8007680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007686:	d102      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007688:	4b08      	ldr	r3, [pc, #32]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800768a:	637b      	str	r3, [r7, #52]	@ 0x34
 800768c:	e002      	b.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007692:	e003      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8007694:	e002      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800769a:	bf00      	nop
          }
        }
        break;
 800769c:	f000 bccf 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076a0:	44020c00 	.word	0x44020c00
 80076a4:	03d09000 	.word	0x03d09000
 80076a8:	003d0900 	.word	0x003d0900
 80076ac:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80076b0:	4b9e      	ldr	r3, [pc, #632]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80076b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80076ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076c2:	d056      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80076c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076ca:	f200 808b 	bhi.w	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d4:	d03e      	beq.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076dc:	f200 8082 	bhi.w	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076e6:	d027      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80076e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076ee:	d879      	bhi.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f6:	d017      	beq.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076fe:	d871      	bhi.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800770c:	d004      	beq.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800770e:	e069      	b.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007710:	f7fb fd6c 	bl	80031ec <HAL_RCC_GetPCLK3Freq>
 8007714:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007716:	e068      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007718:	f107 0314 	add.w	r3, r7, #20
 800771c:	4618      	mov	r0, r3
 800771e:	f7fd fe6f 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007726:	e060      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007728:	f107 0308 	add.w	r3, r7, #8
 800772c:	4618      	mov	r0, r3
 800772e:	f7fd ffd1 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007736:	e058      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007738:	4b7c      	ldr	r3, [pc, #496]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800773a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b02      	cmp	r3, #2
 8007744:	d103      	bne.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8007746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800774a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800774c:	e04d      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007752:	e04a      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007754:	4b75      	ldr	r3, [pc, #468]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800775a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800775e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007762:	d103      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8007764:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800776a:	e03e      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007770:	e03b      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007772:	4b6e      	ldr	r3, [pc, #440]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007778:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800777c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800777e:	4b6b      	ldr	r3, [pc, #428]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b02      	cmp	r3, #2
 8007788:	d10c      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800778a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d109      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007790:	4b66      	ldr	r3, [pc, #408]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	08db      	lsrs	r3, r3, #3
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	4a65      	ldr	r2, [pc, #404]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800779c:	fa22 f303 	lsr.w	r3, r2, r3
 80077a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a2:	e01e      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077a4:	4b61      	ldr	r3, [pc, #388]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b0:	d106      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80077b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b8:	d102      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077ba:	4b5e      	ldr	r3, [pc, #376]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80077bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077be:	e010      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077c0:	4b5a      	ldr	r3, [pc, #360]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077cc:	d106      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077d4:	d102      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077d6:	4b58      	ldr	r3, [pc, #352]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80077d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077da:	e002      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80077e0:	e003      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80077e2:	e002      	b.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077e8:	bf00      	nop
          }
        }
        break;
 80077ea:	f000 bc28 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80077ee:	4b4f      	ldr	r3, [pc, #316]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80077fa:	4b4c      	ldr	r3, [pc, #304]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007806:	d106      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	2b00      	cmp	r3, #0
 800780c:	d103      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800780e:	4b4a      	ldr	r3, [pc, #296]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007810:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007812:	f000 bc14 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800781c:	d108      	bne.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800781e:	f107 0320 	add.w	r3, r7, #32
 8007822:	4618      	mov	r0, r3
 8007824:	f7fd fc82 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800782c:	f000 bc07 	b.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007836:	d107      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	4618      	mov	r0, r3
 800783e:	f7fd fddf 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007846:	e3fa      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800784c:	e3f7      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800784e:	4b37      	ldr	r3, [pc, #220]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	633b      	str	r3, [r7, #48]	@ 0x30
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	2b04      	cmp	r3, #4
 800785e:	d861      	bhi.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8007860:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8007862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007866:	bf00      	nop
 8007868:	0800787d 	.word	0x0800787d
 800786c:	0800788d 	.word	0x0800788d
 8007870:	0800789d 	.word	0x0800789d
 8007874:	080078ad 	.word	0x080078ad
 8007878:	080078b3 	.word	0x080078b3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800787c:	f107 0320 	add.w	r3, r7, #32
 8007880:	4618      	mov	r0, r3
 8007882:	f7fd fc53 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800788a:	e04e      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788c:	f107 0314 	add.w	r3, r7, #20
 8007890:	4618      	mov	r0, r3
 8007892:	f7fd fdb5 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800789a:	e046      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800789c:	f107 0308 	add.w	r3, r7, #8
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fd ff17 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078aa:	e03e      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80078ac:	4b23      	ldr	r3, [pc, #140]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80078ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078b0:	e03b      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078b2:	4b1e      	ldr	r3, [pc, #120]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078b8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078be:	4b1b      	ldr	r3, [pc, #108]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d10c      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80078ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078d0:	4b16      	ldr	r3, [pc, #88]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	08db      	lsrs	r3, r3, #3
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	4a15      	ldr	r2, [pc, #84]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80078dc:	fa22 f303 	lsr.w	r3, r2, r3
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e2:	e01e      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078e4:	4b11      	ldr	r3, [pc, #68]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f0:	d106      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f8:	d102      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80078fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80078fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078fe:	e010      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007900:	4b0a      	ldr	r3, [pc, #40]	@ (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800790c:	d106      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800790e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007910:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007914:	d102      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007916:	4b08      	ldr	r3, [pc, #32]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007918:	637b      	str	r3, [r7, #52]	@ 0x34
 800791a:	e002      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800791c:	2300      	movs	r3, #0
 800791e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007920:	e003      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8007922:	e002      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007928:	bf00      	nop
          }
        }
        break;
 800792a:	e388      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800792c:	44020c00 	.word	0x44020c00
 8007930:	03d09000 	.word	0x03d09000
 8007934:	003d0900 	.word	0x003d0900
 8007938:	017d7840 	.word	0x017d7840
 800793c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007940:	4ba9      	ldr	r3, [pc, #676]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800794a:	633b      	str	r3, [r7, #48]	@ 0x30
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	2b20      	cmp	r3, #32
 8007950:	f200 809a 	bhi.w	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8007954:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	080079e1 	.word	0x080079e1
 8007960:	08007a89 	.word	0x08007a89
 8007964:	08007a89 	.word	0x08007a89
 8007968:	08007a89 	.word	0x08007a89
 800796c:	08007a89 	.word	0x08007a89
 8007970:	08007a89 	.word	0x08007a89
 8007974:	08007a89 	.word	0x08007a89
 8007978:	08007a89 	.word	0x08007a89
 800797c:	080079f1 	.word	0x080079f1
 8007980:	08007a89 	.word	0x08007a89
 8007984:	08007a89 	.word	0x08007a89
 8007988:	08007a89 	.word	0x08007a89
 800798c:	08007a89 	.word	0x08007a89
 8007990:	08007a89 	.word	0x08007a89
 8007994:	08007a89 	.word	0x08007a89
 8007998:	08007a89 	.word	0x08007a89
 800799c:	08007a01 	.word	0x08007a01
 80079a0:	08007a89 	.word	0x08007a89
 80079a4:	08007a89 	.word	0x08007a89
 80079a8:	08007a89 	.word	0x08007a89
 80079ac:	08007a89 	.word	0x08007a89
 80079b0:	08007a89 	.word	0x08007a89
 80079b4:	08007a89 	.word	0x08007a89
 80079b8:	08007a89 	.word	0x08007a89
 80079bc:	08007a11 	.word	0x08007a11
 80079c0:	08007a89 	.word	0x08007a89
 80079c4:	08007a89 	.word	0x08007a89
 80079c8:	08007a89 	.word	0x08007a89
 80079cc:	08007a89 	.word	0x08007a89
 80079d0:	08007a89 	.word	0x08007a89
 80079d4:	08007a89 	.word	0x08007a89
 80079d8:	08007a89 	.word	0x08007a89
 80079dc:	08007a17 	.word	0x08007a17
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079e0:	f107 0320 	add.w	r3, r7, #32
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fd fba1 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079ee:	e04e      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f0:	f107 0314 	add.w	r3, r7, #20
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fd fd03 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079fe:	e046      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a00:	f107 0308 	add.w	r3, r7, #8
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fd fe65 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a0e:	e03e      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a10:	4b76      	ldr	r3, [pc, #472]	@ (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a14:	e03b      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a16:	4b74      	ldr	r3, [pc, #464]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a22:	4b71      	ldr	r3, [pc, #452]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d10c      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8007a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a34:	4b6c      	ldr	r3, [pc, #432]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	08db      	lsrs	r3, r3, #3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	4a6c      	ldr	r2, [pc, #432]	@ (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a46:	e01e      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a48:	4b67      	ldr	r3, [pc, #412]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a54:	d106      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8007a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5c:	d102      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a5e:	4b65      	ldr	r3, [pc, #404]	@ (8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a62:	e010      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a64:	4b60      	ldr	r3, [pc, #384]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a70:	d106      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8007a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a78:	d102      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a7e:	e002      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a84:	e003      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8007a86:	e002      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a8c:	bf00      	nop
          }
        }
        break;
 8007a8e:	e2d6      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007a90:	4b55      	ldr	r3, [pc, #340]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a96:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aa2:	d031      	beq.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aaa:	d866      	bhi.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ab0:	d027      	beq.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ab6:	d860      	bhi.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	2b80      	cmp	r3, #128	@ 0x80
 8007abc:	d019      	beq.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	2b80      	cmp	r3, #128	@ 0x80
 8007ac2:	d85a      	bhi.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	2b40      	cmp	r3, #64	@ 0x40
 8007ace:	d008      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007ad0:	e053      	b.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ad2:	f107 0320 	add.w	r3, r7, #32
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fd fb28 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ae0:	e04e      	b.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae2:	f107 0314 	add.w	r3, r7, #20
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fc8a 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007af0:	e046      	b.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af2:	f107 0308 	add.w	r3, r7, #8
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fd fdec 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b00:	e03e      	b.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007b02:	4b3a      	ldr	r3, [pc, #232]	@ (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007b04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b06:	e03b      	b.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b08:	4b37      	ldr	r3, [pc, #220]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007b12:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b14:	4b34      	ldr	r3, [pc, #208]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d10c      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d109      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b26:	4b30      	ldr	r3, [pc, #192]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	08db      	lsrs	r3, r3, #3
 8007b2c:	f003 0303 	and.w	r3, r3, #3
 8007b30:	4a2f      	ldr	r2, [pc, #188]	@ (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007b32:	fa22 f303 	lsr.w	r3, r2, r3
 8007b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b38:	e01e      	b.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b46:	d106      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b4e:	d102      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b50:	4b28      	ldr	r3, [pc, #160]	@ (8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b54:	e010      	b.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b56:	4b24      	ldr	r3, [pc, #144]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b62:	d106      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8007b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b6a:	d102      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b6c:	4b22      	ldr	r3, [pc, #136]	@ (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b70:	e002      	b.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007b76:	e003      	b.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007b78:	e002      	b.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b7e:	bf00      	nop
          }
        }
        break;
 8007b80:	e25d      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007b82:	4b19      	ldr	r3, [pc, #100]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b88:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007b8c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d103      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b94:	f7fb fb14 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8007b98:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007b9a:	e250      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007b9c:	4b12      	ldr	r3, [pc, #72]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ba8:	d10b      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bb0:	d107      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bb2:	f107 0314 	add.w	r3, r7, #20
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fd fc22 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc0:	e04f      	b.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007bc2:	4b09      	ldr	r3, [pc, #36]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bce:	d115      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd6:	d111      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd8:	f107 0308 	add.w	r3, r7, #8
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fd fd79 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be6:	e03c      	b.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007be8:	44020c00 	.word	0x44020c00
 8007bec:	00bb8000 	.word	0x00bb8000
 8007bf0:	03d09000 	.word	0x03d09000
 8007bf4:	003d0900 	.word	0x003d0900
 8007bf8:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007bfc:	4b94      	ldr	r3, [pc, #592]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d10d      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c0e:	d109      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c10:	4b8f      	ldr	r3, [pc, #572]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	08db      	lsrs	r3, r3, #3
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	4a8e      	ldr	r2, [pc, #568]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c22:	e01e      	b.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007c24:	4b8a      	ldr	r3, [pc, #552]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c30:	d106      	bne.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c38:	d102      	bne.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007c3a:	4b87      	ldr	r3, [pc, #540]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3e:	e010      	b.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007c40:	4b83      	ldr	r3, [pc, #524]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c4c:	d106      	bne.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007c54:	d102      	bne.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007c56:	4b81      	ldr	r3, [pc, #516]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c5a:	e002      	b.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c60:	e1ed      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c62:	e1ec      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007c64:	4b7a      	ldr	r3, [pc, #488]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c6a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007c6e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007c76:	f7fb fab9 	bl	80031ec <HAL_RCC_GetPCLK3Freq>
 8007c7a:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007c7c:	e1df      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007c7e:	4b74      	ldr	r3, [pc, #464]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c8a:	d10b      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c92:	d107      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c94:	f107 0314 	add.w	r3, r7, #20
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fd fbb1 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca2:	e045      	b.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cb0:	d10b      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb8:	d107      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fd fd08 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc8:	e032      	b.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007cca:	4b61      	ldr	r3, [pc, #388]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d10d      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cdc:	d109      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cde:	4b5c      	ldr	r3, [pc, #368]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	08db      	lsrs	r3, r3, #3
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	4a5a      	ldr	r2, [pc, #360]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007cea:	fa22 f303 	lsr.w	r3, r2, r3
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	e01e      	b.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007cf2:	4b57      	ldr	r3, [pc, #348]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfe:	d106      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d06:	d102      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007d08:	4b53      	ldr	r3, [pc, #332]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d0c:	e010      	b.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007d0e:	4b50      	ldr	r3, [pc, #320]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d1a:	d106      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d22:	d102      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007d24:	4b4d      	ldr	r3, [pc, #308]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d28:	e002      	b.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d2e:	e186      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d30:	e185      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d32:	4b47      	ldr	r3, [pc, #284]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d38:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007d3c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d103      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007d44:	f7fb fa3c 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8007d48:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007d4a:	e178      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007d4c:	4b40      	ldr	r3, [pc, #256]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d58:	d10b      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d60:	d107      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d62:	f107 0314 	add.w	r3, r7, #20
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fd fb4a 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d70:	e045      	b.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007d72:	4b37      	ldr	r3, [pc, #220]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d7e:	d10b      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d86:	d107      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d88:	f107 0308 	add.w	r3, r7, #8
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fd fca1 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d96:	e032      	b.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007d98:	4b2d      	ldr	r3, [pc, #180]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d10d      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007daa:	d109      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dac:	4b28      	ldr	r3, [pc, #160]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	08db      	lsrs	r3, r3, #3
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	4a27      	ldr	r2, [pc, #156]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007db8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dbe:	e01e      	b.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007dc0:	4b23      	ldr	r3, [pc, #140]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dcc:	d106      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dd4:	d102      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007dd6:	4b20      	ldr	r3, [pc, #128]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dda:	e010      	b.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de8:	d106      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007df0:	d102      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007df2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df6:	e002      	b.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dfc:	e11f      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007dfe:	e11e      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007e00:	4b13      	ldr	r3, [pc, #76]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d85f      	bhi.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007e12:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	08007e31 	.word	0x08007e31
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	08007e61 	.word	0x08007e61

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007e28:	f7fb f998 	bl	800315c <HAL_RCC_GetHCLKFreq>
 8007e2c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007e2e:	e053      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e30:	f107 0320 	add.w	r3, r7, #32
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fd f979 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e3e:	e04b      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e40:	f107 0314 	add.w	r3, r7, #20
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fd fadb 	bl	8005400 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e4e:	e043      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007e50:	44020c00 	.word	0x44020c00
 8007e54:	03d09000 	.word	0x03d09000
 8007e58:	003d0900 	.word	0x003d0900
 8007e5c:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e60:	4b79      	ldr	r3, [pc, #484]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e66:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e6c:	4b76      	ldr	r3, [pc, #472]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d10c      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d109      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e7e:	4b72      	ldr	r3, [pc, #456]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	08db      	lsrs	r3, r3, #3
 8007e84:	f003 0303 	and.w	r3, r3, #3
 8007e88:	4a70      	ldr	r2, [pc, #448]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e90:	e01e      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e92:	4b6d      	ldr	r3, [pc, #436]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e9e:	d106      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ea6:	d102      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ea8:	4b69      	ldr	r3, [pc, #420]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eac:	e010      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eae:	4b66      	ldr	r3, [pc, #408]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eba:	d106      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ec2:	d102      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ec4:	4b63      	ldr	r3, [pc, #396]	@ (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec8:	e002      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007ece:	e003      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007ed0:	e002      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ed6:	bf00      	nop
          }
        }
        break;
 8007ed8:	e0b1      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007eda:	4b5b      	ldr	r3, [pc, #364]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ee0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ee4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007ee6:	4b58      	ldr	r3, [pc, #352]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d106      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d103      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f00:	e01f      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007f02:	4b51      	ldr	r3, [pc, #324]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f10:	d106      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	2b40      	cmp	r3, #64	@ 0x40
 8007f16:	d103      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007f18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f1e:	e010      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007f20:	4b49      	ldr	r3, [pc, #292]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f2c:	d106      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	2b80      	cmp	r3, #128	@ 0x80
 8007f32:	d103      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007f34:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3a:	e002      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007f40:	e07d      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f42:	e07c      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007f44:	4b40      	ldr	r3, [pc, #256]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007f50:	4b3d      	ldr	r3, [pc, #244]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f5c:	d105      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d102      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007f64:	4b3c      	ldr	r3, [pc, #240]	@ (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f68:	e031      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007f6a:	4b37      	ldr	r3, [pc, #220]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f76:	d10a      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d107      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f7e:	f107 0320 	add.w	r3, r7, #32
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fd f8d2 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f8c:	e01f      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d106      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d103      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa8:	e011      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007faa:	4b27      	ldr	r3, [pc, #156]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fb8:	d106      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	2b30      	cmp	r3, #48	@ 0x30
 8007fbe:	d103      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007fc0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc6:	e002      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007fcc:	e037      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fce:	e036      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fd6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007fda:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d107      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fe2:	f107 0320 	add.w	r3, r7, #32
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fd f8a0 	bl	800512c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007ff0:	e025      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007ff2:	4b15      	ldr	r3, [pc, #84]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ffe:	d10a      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	2b20      	cmp	r3, #32
 8008004:	d107      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008006:	f107 0308 	add.w	r3, r7, #8
 800800a:	4618      	mov	r0, r3
 800800c:	f7fd fb62 	bl	80056d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
 8008014:	e00f      	b.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008016:	4b0c      	ldr	r3, [pc, #48]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800801e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008022:	d105      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	2b30      	cmp	r3, #48	@ 0x30
 8008028:	d102      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800802a:	4b0b      	ldr	r3, [pc, #44]	@ (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800802c:	637b      	str	r3, [r7, #52]	@ 0x34
 800802e:	e002      	b.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8008034:	e003      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008036:	e002      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800803c:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800803e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008040:	4618      	mov	r0, r3
 8008042:	373c      	adds	r7, #60	@ 0x3c
 8008044:	46bd      	mov	sp, r7
 8008046:	bd90      	pop	{r4, r7, pc}
 8008048:	44020c00 	.word	0x44020c00
 800804c:	03d09000 	.word	0x03d09000
 8008050:	003d0900 	.word	0x003d0900
 8008054:	017d7840 	.word	0x017d7840
 8008058:	02dc6c00 	.word	0x02dc6c00

0800805c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008064:	4b48      	ldr	r3, [pc, #288]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a47      	ldr	r2, [pc, #284]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 800806a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800806e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008070:	f7f9 fa94 	bl	800159c <HAL_GetTick>
 8008074:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008076:	e008      	b.n	800808a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008078:	f7f9 fa90 	bl	800159c <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e07a      	b.n	8008180 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800808a:	4b3f      	ldr	r3, [pc, #252]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008096:	4b3c      	ldr	r3, [pc, #240]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800809e:	f023 0303 	bic.w	r3, r3, #3
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6811      	ldr	r1, [r2, #0]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	6852      	ldr	r2, [r2, #4]
 80080aa:	0212      	lsls	r2, r2, #8
 80080ac:	430a      	orrs	r2, r1
 80080ae:	4936      	ldr	r1, [pc, #216]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	025b      	lsls	r3, r3, #9
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	431a      	orrs	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	041b      	lsls	r3, r3, #16
 80080d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	3b01      	subs	r3, #1
 80080de:	061b      	lsls	r3, r3, #24
 80080e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080e4:	4928      	ldr	r1, [pc, #160]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80080ea:	4b27      	ldr	r3, [pc, #156]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 80080ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ee:	f023 020c 	bic.w	r2, r3, #12
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	4924      	ldr	r1, [pc, #144]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80080fc:	4b22      	ldr	r3, [pc, #136]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 80080fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008100:	f023 0220 	bic.w	r2, r3, #32
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	491f      	ldr	r1, [pc, #124]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 800810a:	4313      	orrs	r3, r2
 800810c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800810e:	4b1e      	ldr	r3, [pc, #120]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 8008110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008116:	491c      	ldr	r1, [pc, #112]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 8008118:	4313      	orrs	r3, r2
 800811a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800811c:	4b1a      	ldr	r3, [pc, #104]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 800811e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008120:	4a19      	ldr	r2, [pc, #100]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 8008122:	f023 0310 	bic.w	r3, r3, #16
 8008126:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008128:	4b17      	ldr	r3, [pc, #92]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 800812a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008130:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6a12      	ldr	r2, [r2, #32]
 8008138:	00d2      	lsls	r2, r2, #3
 800813a:	4913      	ldr	r1, [pc, #76]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 800813c:	4313      	orrs	r3, r2
 800813e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008140:	4b11      	ldr	r3, [pc, #68]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 8008142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008144:	4a10      	ldr	r2, [pc, #64]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 8008146:	f043 0310 	orr.w	r3, r3, #16
 800814a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800814c:	4b0e      	ldr	r3, [pc, #56]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a0d      	ldr	r2, [pc, #52]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 8008152:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008156:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008158:	f7f9 fa20 	bl	800159c <HAL_GetTick>
 800815c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800815e:	e008      	b.n	8008172 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008160:	f7f9 fa1c 	bl	800159c <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e006      	b.n	8008180 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008172:	4b05      	ldr	r3, [pc, #20]	@ (8008188 <RCCEx_PLL2_Config+0x12c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0f0      	beq.n	8008160 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800817e:	2300      	movs	r3, #0

}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	44020c00 	.word	0x44020c00

0800818c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008194:	4b48      	ldr	r3, [pc, #288]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a47      	ldr	r2, [pc, #284]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 800819a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800819e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081a0:	f7f9 f9fc 	bl	800159c <HAL_GetTick>
 80081a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081a6:	e008      	b.n	80081ba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081a8:	f7f9 f9f8 	bl	800159c <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e07a      	b.n	80082b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081ba:	4b3f      	ldr	r3, [pc, #252]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1f0      	bne.n	80081a8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80081c6:	4b3c      	ldr	r3, [pc, #240]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 80081c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6811      	ldr	r1, [r2, #0]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6852      	ldr	r2, [r2, #4]
 80081da:	0212      	lsls	r2, r2, #8
 80081dc:	430a      	orrs	r2, r1
 80081de:	4936      	ldr	r1, [pc, #216]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	630b      	str	r3, [r1, #48]	@ 0x30
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	025b      	lsls	r3, r3, #9
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	3b01      	subs	r3, #1
 8008200:	041b      	lsls	r3, r3, #16
 8008202:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008206:	431a      	orrs	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	3b01      	subs	r3, #1
 800820e:	061b      	lsls	r3, r3, #24
 8008210:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008214:	4928      	ldr	r1, [pc, #160]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 8008216:	4313      	orrs	r3, r2
 8008218:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800821a:	4b27      	ldr	r3, [pc, #156]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 800821c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821e:	f023 020c 	bic.w	r2, r3, #12
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	4924      	ldr	r1, [pc, #144]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 8008228:	4313      	orrs	r3, r2
 800822a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800822c:	4b22      	ldr	r3, [pc, #136]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 800822e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008230:	f023 0220 	bic.w	r2, r3, #32
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	491f      	ldr	r1, [pc, #124]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 800823a:	4313      	orrs	r3, r2
 800823c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800823e:	4b1e      	ldr	r3, [pc, #120]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 8008240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008246:	491c      	ldr	r1, [pc, #112]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 8008248:	4313      	orrs	r3, r2
 800824a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800824c:	4b1a      	ldr	r3, [pc, #104]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 800824e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008250:	4a19      	ldr	r2, [pc, #100]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 8008252:	f023 0310 	bic.w	r3, r3, #16
 8008256:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008258:	4b17      	ldr	r3, [pc, #92]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 800825a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800825c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008260:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6a12      	ldr	r2, [r2, #32]
 8008268:	00d2      	lsls	r2, r2, #3
 800826a:	4913      	ldr	r1, [pc, #76]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 800826c:	4313      	orrs	r3, r2
 800826e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008270:	4b11      	ldr	r3, [pc, #68]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 8008272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008274:	4a10      	ldr	r2, [pc, #64]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 8008276:	f043 0310 	orr.w	r3, r3, #16
 800827a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800827c:	4b0e      	ldr	r3, [pc, #56]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0d      	ldr	r2, [pc, #52]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 8008282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008286:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008288:	f7f9 f988 	bl	800159c <HAL_GetTick>
 800828c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800828e:	e008      	b.n	80082a2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008290:	f7f9 f984 	bl	800159c <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d901      	bls.n	80082a2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e006      	b.n	80082b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082a2:	4b05      	ldr	r3, [pc, #20]	@ (80082b8 <RCCEx_PLL3_Config+0x12c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0f0      	beq.n	8008290 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	44020c00 	.word	0x44020c00

080082bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e042      	b.n	8008354 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d106      	bne.n	80082e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7f8 fbe7 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2224      	movs	r2, #36	@ 0x24
 80082ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0201 	bic.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fe24 	bl	8008f54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fc33 	bl	8008b78 <UART_SetConfig>
 8008312:	4603      	mov	r3, r0
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e01b      	b.n	8008354 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800832a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800833a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0201 	orr.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fea3 	bl	8009098 <UART_CheckIdleState>
 8008352:	4603      	mov	r3, r0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08a      	sub	sp, #40	@ 0x28
 8008360:	af02      	add	r7, sp, #8
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008372:	2b20      	cmp	r3, #32
 8008374:	f040 808b 	bne.w	800848e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <HAL_UART_Transmit+0x28>
 800837e:	88fb      	ldrh	r3, [r7, #6]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e083      	b.n	8008490 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008392:	2b80      	cmp	r3, #128	@ 0x80
 8008394:	d107      	bne.n	80083a6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80083a4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2221      	movs	r2, #33	@ 0x21
 80083b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083b6:	f7f9 f8f1 	bl	800159c <HAL_GetTick>
 80083ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	88fa      	ldrh	r2, [r7, #6]
 80083c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083d4:	d108      	bne.n	80083e8 <HAL_UART_Transmit+0x8c>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d104      	bne.n	80083e8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	e003      	b.n	80083f0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083f0:	e030      	b.n	8008454 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2200      	movs	r2, #0
 80083fa:	2180      	movs	r1, #128	@ 0x80
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 fef5 	bl	80091ec <UART_WaitOnFlagUntilTimeout>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2220      	movs	r2, #32
 800840c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e03d      	b.n	8008490 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008428:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	3302      	adds	r3, #2
 800842e:	61bb      	str	r3, [r7, #24]
 8008430:	e007      	b.n	8008442 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	781a      	ldrb	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	3301      	adds	r3, #1
 8008440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800845a:	b29b      	uxth	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1c8      	bne.n	80083f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2200      	movs	r2, #0
 8008468:	2140      	movs	r1, #64	@ 0x40
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 febe 	bl	80091ec <UART_WaitOnFlagUntilTimeout>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d005      	beq.n	8008482 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2220      	movs	r2, #32
 800847a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e006      	b.n	8008490 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2220      	movs	r2, #32
 8008486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	e000      	b.n	8008490 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800848e:	2302      	movs	r3, #2
  }
}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	@ 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d14b      	bne.n	8008548 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <HAL_UART_Receive_IT+0x24>
 80084b6:	88fb      	ldrh	r3, [r7, #6]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e044      	b.n	800854a <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d0:	2b40      	cmp	r3, #64	@ 0x40
 80084d2:	d107      	bne.n	80084e4 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084e2:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008554 <HAL_UART_Receive_IT+0xbc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d024      	beq.n	8008538 <HAL_UART_Receive_IT+0xa0>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a19      	ldr	r2, [pc, #100]	@ (8008558 <HAL_UART_Receive_IT+0xc0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d01f      	beq.n	8008538 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d018      	beq.n	8008538 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	613b      	str	r3, [r7, #16]
   return(result);
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800851a:	627b      	str	r3, [r7, #36]	@ 0x24
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	623b      	str	r3, [r7, #32]
 8008526:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	69f9      	ldr	r1, [r7, #28]
 800852a:	6a3a      	ldr	r2, [r7, #32]
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	61bb      	str	r3, [r7, #24]
   return(result);
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e6      	bne.n	8008506 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008538:	88fb      	ldrh	r3, [r7, #6]
 800853a:	461a      	mov	r2, r3
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fec2 	bl	80092c8 <UART_Start_Receive_IT>
 8008544:	4603      	mov	r3, r0
 8008546:	e000      	b.n	800854a <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008548:	2302      	movs	r3, #2
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3728      	adds	r7, #40	@ 0x28
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	44002400 	.word	0x44002400
 8008558:	54002400 	.word	0x54002400

0800855c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b0ae      	sub	sp, #184	@ 0xb8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008586:	f640 030f 	movw	r3, #2063	@ 0x80f
 800858a:	4013      	ands	r3, r2
 800858c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8008590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008594:	2b00      	cmp	r3, #0
 8008596:	d11b      	bne.n	80085d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008598:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d015      	beq.n	80085d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085a8:	f003 0320 	and.w	r3, r3, #32
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d105      	bne.n	80085bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d009      	beq.n	80085d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 82ac 	beq.w	8008b1e <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
      }
      return;
 80085ce:	e2a6      	b.n	8008b1e <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 80fd 	beq.w	80087d4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80085de:	4b7a      	ldr	r3, [pc, #488]	@ (80087c8 <HAL_UART_IRQHandler+0x26c>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d106      	bne.n	80085f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80085ea:	4b78      	ldr	r3, [pc, #480]	@ (80087cc <HAL_UART_IRQHandler+0x270>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80f0 	beq.w	80087d4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d011      	beq.n	8008624 <HAL_UART_IRQHandler+0xc8>
 8008600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2201      	movs	r2, #1
 8008612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861a:	f043 0201 	orr.w	r2, r3, #1
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d011      	beq.n	8008654 <HAL_UART_IRQHandler+0xf8>
 8008630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2202      	movs	r2, #2
 8008642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800864a:	f043 0204 	orr.w	r2, r3, #4
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008654:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008658:	f003 0304 	and.w	r3, r3, #4
 800865c:	2b00      	cmp	r3, #0
 800865e:	d011      	beq.n	8008684 <HAL_UART_IRQHandler+0x128>
 8008660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2204      	movs	r2, #4
 8008672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800867a:	f043 0202 	orr.w	r2, r3, #2
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008684:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008688:	f003 0308 	and.w	r3, r3, #8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d017      	beq.n	80086c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	d105      	bne.n	80086a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800869c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80086a0:	4b49      	ldr	r3, [pc, #292]	@ (80087c8 <HAL_UART_IRQHandler+0x26c>)
 80086a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2208      	movs	r2, #8
 80086ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b6:	f043 0208 	orr.w	r2, r3, #8
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d012      	beq.n	80086f2 <HAL_UART_IRQHandler+0x196>
 80086cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80086d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00c      	beq.n	80086f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e8:	f043 0220 	orr.w	r2, r3, #32
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8212 	beq.w	8008b22 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008702:	f003 0320 	and.w	r3, r3, #32
 8008706:	2b00      	cmp	r3, #0
 8008708:	d013      	beq.n	8008732 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800870a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b00      	cmp	r3, #0
 8008714:	d105      	bne.n	8008722 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800871a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008738:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008746:	2b40      	cmp	r3, #64	@ 0x40
 8008748:	d005      	beq.n	8008756 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800874a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800874e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008752:	2b00      	cmp	r3, #0
 8008754:	d02e      	beq.n	80087b4 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fed8 	bl	800950c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008766:	2b40      	cmp	r3, #64	@ 0x40
 8008768:	d120      	bne.n	80087ac <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008770:	2b00      	cmp	r3, #0
 8008772:	d017      	beq.n	80087a4 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877a:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <HAL_UART_IRQHandler+0x274>)
 800877c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008784:	4618      	mov	r0, r3
 8008786:	f7f9 f945 	bl	8001a14 <HAL_DMA_Abort_IT>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d019      	beq.n	80087c4 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800879e:	4610      	mov	r0, r2
 80087a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a2:	e00f      	b.n	80087c4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f9d1 	bl	8008b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087aa:	e00b      	b.n	80087c4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f9cd 	bl	8008b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b2:	e007      	b.n	80087c4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9c9 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80087c2:	e1ae      	b.n	8008b22 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c4:	bf00      	nop
    return;
 80087c6:	e1ac      	b.n	8008b22 <HAL_UART_IRQHandler+0x5c6>
 80087c8:	10000001 	.word	0x10000001
 80087cc:	04000120 	.word	0x04000120
 80087d0:	080095d9 	.word	0x080095d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087d8:	2b01      	cmp	r3, #1
 80087da:	f040 8142 	bne.w	8008a62 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087e2:	f003 0310 	and.w	r3, r3, #16
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 813b 	beq.w	8008a62 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8134 	beq.w	8008a62 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2210      	movs	r2, #16
 8008800:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880c:	2b40      	cmp	r3, #64	@ 0x40
 800880e:	f040 80aa 	bne.w	8008966 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800881c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8008820:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8084 	beq.w	8008932 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008830:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008834:	429a      	cmp	r2, r3
 8008836:	d27c      	bcs.n	8008932 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800883e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800884a:	2b81      	cmp	r3, #129	@ 0x81
 800884c:	d060      	beq.n	8008910 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800885c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800885e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008874:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008876:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008878:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008882:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e2      	bne.n	800884e <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3308      	adds	r3, #8
 800888e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800889a:	f023 0301 	bic.w	r3, r3, #1
 800889e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3308      	adds	r3, #8
 80088a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80088ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e3      	bne.n	8008888 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d6:	e853 3f00 	ldrex	r3, [r3]
 80088da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088de:	f023 0310 	bic.w	r3, r3, #16
 80088e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e4      	bne.n	80088ce <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800890a:	4618      	mov	r0, r3
 800890c:	f7f9 f806 	bl	800191c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008922:	b29b      	uxth	r3, r3
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	b29b      	uxth	r3, r3
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f918 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008930:	e0f9      	b.n	8008b26 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008938:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800893c:	429a      	cmp	r2, r3
 800893e:	f040 80f2 	bne.w	8008b26 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800894a:	2b81      	cmp	r3, #129	@ 0x81
 800894c:	f040 80eb 	bne.w	8008b26 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8fe 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
      return;
 8008964:	e0df      	b.n	8008b26 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008972:	b29b      	uxth	r3, r3
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80d1 	beq.w	8008b2a <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8008988:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80cc 	beq.w	8008b2a <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80089b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80089b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e4      	bne.n	8008992 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3308      	adds	r3, #8
 80089ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	623b      	str	r3, [r7, #32]
   return(result);
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089de:	f023 0301 	bic.w	r3, r3, #1
 80089e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3308      	adds	r3, #8
 80089ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80089f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80089f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089f8:	e841 2300 	strex	r3, r2, [r1]
 80089fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e1      	bne.n	80089c8 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2220      	movs	r2, #32
 8008a08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f023 0310 	bic.w	r3, r3, #16
 8008a2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	69b9      	ldr	r1, [r7, #24]
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	617b      	str	r3, [r7, #20]
   return(result);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e4      	bne.n	8008a18 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2202      	movs	r2, #2
 8008a52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a54:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f880 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a60:	e063      	b.n	8008b2a <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00e      	beq.n	8008a8c <HAL_UART_IRQHandler+0x530>
 8008a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d008      	beq.n	8008a8c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 fb21 	bl	800a0cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a8a:	e051      	b.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d014      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d105      	bne.n	8008ab0 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d008      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d03a      	beq.n	8008b2e <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
    }
    return;
 8008ac0:	e035      	b.n	8008b2e <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ac2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x586>
 8008ace:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fd92 	bl	8009604 <UART_EndTransmit_IT>
    return;
 8008ae0:	e026      	b.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <HAL_UART_IRQHandler+0x5a6>
 8008aee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008af2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fafa 	bl	800a0f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b00:	e016      	b.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d010      	beq.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
 8008b0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da0c      	bge.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fae2 	bl	800a0e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b1c:	e008      	b.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
      return;
 8008b1e:	bf00      	nop
 8008b20:	e006      	b.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
    return;
 8008b22:	bf00      	nop
 8008b24:	e004      	b.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
      return;
 8008b26:	bf00      	nop
 8008b28:	e002      	b.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
      return;
 8008b2a:	bf00      	nop
 8008b2c:	e000      	b.n	8008b30 <HAL_UART_IRQHandler+0x5d4>
    return;
 8008b2e:	bf00      	nop
  }
}
 8008b30:	37b8      	adds	r7, #184	@ 0xb8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b7c:	b094      	sub	sp, #80	@ 0x50
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	4b78      	ldr	r3, [pc, #480]	@ (8008d70 <UART_SetConfig+0x1f8>)
 8008b8e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b92:	689a      	ldr	r2, [r3, #8]
 8008b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4971      	ldr	r1, [pc, #452]	@ (8008d74 <UART_SetConfig+0x1fc>)
 8008bb0:	4019      	ands	r1, r3
 8008bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc8:	68d9      	ldr	r1, [r3, #12]
 8008bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	ea40 0301 	orr.w	r3, r0, r1
 8008bd2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4b64      	ldr	r3, [pc, #400]	@ (8008d70 <UART_SetConfig+0x1f8>)
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d009      	beq.n	8008bf8 <UART_SetConfig+0x80>
 8008be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	4b63      	ldr	r3, [pc, #396]	@ (8008d78 <UART_SetConfig+0x200>)
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d004      	beq.n	8008bf8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf0:	6a1a      	ldr	r2, [r3, #32]
 8008bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008c02:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c16:	f023 000f 	bic.w	r0, r3, #15
 8008c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	ea40 0301 	orr.w	r3, r0, r1
 8008c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	4b53      	ldr	r3, [pc, #332]	@ (8008d7c <UART_SetConfig+0x204>)
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d102      	bne.n	8008c38 <UART_SetConfig+0xc0>
 8008c32:	2301      	movs	r3, #1
 8008c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c36:	e066      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	4b50      	ldr	r3, [pc, #320]	@ (8008d80 <UART_SetConfig+0x208>)
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d102      	bne.n	8008c48 <UART_SetConfig+0xd0>
 8008c42:	2302      	movs	r3, #2
 8008c44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c46:	e05e      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8008d84 <UART_SetConfig+0x20c>)
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d102      	bne.n	8008c58 <UART_SetConfig+0xe0>
 8008c52:	2304      	movs	r3, #4
 8008c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c56:	e056      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8008d88 <UART_SetConfig+0x210>)
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d102      	bne.n	8008c68 <UART_SetConfig+0xf0>
 8008c62:	2308      	movs	r3, #8
 8008c64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c66:	e04e      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	4b47      	ldr	r3, [pc, #284]	@ (8008d8c <UART_SetConfig+0x214>)
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d102      	bne.n	8008c78 <UART_SetConfig+0x100>
 8008c72:	2310      	movs	r3, #16
 8008c74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c76:	e046      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	4b44      	ldr	r3, [pc, #272]	@ (8008d90 <UART_SetConfig+0x218>)
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d102      	bne.n	8008c88 <UART_SetConfig+0x110>
 8008c82:	2320      	movs	r3, #32
 8008c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c86:	e03e      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	4b41      	ldr	r3, [pc, #260]	@ (8008d94 <UART_SetConfig+0x21c>)
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d102      	bne.n	8008c98 <UART_SetConfig+0x120>
 8008c92:	2340      	movs	r3, #64	@ 0x40
 8008c94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c96:	e036      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8008d98 <UART_SetConfig+0x220>)
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d102      	bne.n	8008ca8 <UART_SetConfig+0x130>
 8008ca2:	2380      	movs	r3, #128	@ 0x80
 8008ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ca6:	e02e      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	4b3b      	ldr	r3, [pc, #236]	@ (8008d9c <UART_SetConfig+0x224>)
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d103      	bne.n	8008cba <UART_SetConfig+0x142>
 8008cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cb8:	e025      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	4b38      	ldr	r3, [pc, #224]	@ (8008da0 <UART_SetConfig+0x228>)
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d103      	bne.n	8008ccc <UART_SetConfig+0x154>
 8008cc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cca:	e01c      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	4b34      	ldr	r3, [pc, #208]	@ (8008da4 <UART_SetConfig+0x22c>)
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d103      	bne.n	8008cde <UART_SetConfig+0x166>
 8008cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cdc:	e013      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b31      	ldr	r3, [pc, #196]	@ (8008da8 <UART_SetConfig+0x230>)
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d103      	bne.n	8008cf0 <UART_SetConfig+0x178>
 8008ce8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cee:	e00a      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8008d70 <UART_SetConfig+0x1f8>)
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d103      	bne.n	8008d02 <UART_SetConfig+0x18a>
 8008cfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d00:	e001      	b.n	8008d06 <UART_SetConfig+0x18e>
 8008d02:	2300      	movs	r3, #0
 8008d04:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b19      	ldr	r3, [pc, #100]	@ (8008d70 <UART_SetConfig+0x1f8>)
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d005      	beq.n	8008d1c <UART_SetConfig+0x1a4>
 8008d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	4b18      	ldr	r3, [pc, #96]	@ (8008d78 <UART_SetConfig+0x200>)
 8008d16:	429a      	cmp	r2, r3
 8008d18:	f040 8094 	bne.w	8008e44 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d1e:	2200      	movs	r2, #0
 8008d20:	623b      	str	r3, [r7, #32]
 8008d22:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d28:	f7fc fe3e 	bl	80059a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d2c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 80f7 	beq.w	8008f24 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dac <UART_SetConfig+0x234>)
 8008d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d40:	461a      	mov	r2, r3
 8008d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d48:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	4413      	add	r3, r2
 8008d54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d305      	bcc.n	8008d66 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d924      	bls.n	8008db0 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008d6c:	e069      	b.n	8008e42 <UART_SetConfig+0x2ca>
 8008d6e:	bf00      	nop
 8008d70:	44002400 	.word	0x44002400
 8008d74:	cfff69f3 	.word	0xcfff69f3
 8008d78:	54002400 	.word	0x54002400
 8008d7c:	40013800 	.word	0x40013800
 8008d80:	40004400 	.word	0x40004400
 8008d84:	40004800 	.word	0x40004800
 8008d88:	40004c00 	.word	0x40004c00
 8008d8c:	40005000 	.word	0x40005000
 8008d90:	40006400 	.word	0x40006400
 8008d94:	40007800 	.word	0x40007800
 8008d98:	40007c00 	.word	0x40007c00
 8008d9c:	40008000 	.word	0x40008000
 8008da0:	40006800 	.word	0x40006800
 8008da4:	40006c00 	.word	0x40006c00
 8008da8:	40008400 	.word	0x40008400
 8008dac:	0800b964 	.word	0x0800b964
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008db2:	2200      	movs	r2, #0
 8008db4:	61bb      	str	r3, [r7, #24]
 8008db6:	61fa      	str	r2, [r7, #28]
 8008db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dbc:	4a64      	ldr	r2, [pc, #400]	@ (8008f50 <UART_SetConfig+0x3d8>)
 8008dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	617a      	str	r2, [r7, #20]
 8008dca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008dce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008dd2:	f7f7 fa5b 	bl	800028c <__aeabi_uldivmod>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	f04f 0300 	mov.w	r3, #0
 8008de6:	020b      	lsls	r3, r1, #8
 8008de8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dec:	0202      	lsls	r2, r0, #8
 8008dee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008df0:	6849      	ldr	r1, [r1, #4]
 8008df2:	0849      	lsrs	r1, r1, #1
 8008df4:	2000      	movs	r0, #0
 8008df6:	460c      	mov	r4, r1
 8008df8:	4605      	mov	r5, r0
 8008dfa:	eb12 0804 	adds.w	r8, r2, r4
 8008dfe:	eb43 0905 	adc.w	r9, r3, r5
 8008e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	60bb      	str	r3, [r7, #8]
 8008e0a:	60fa      	str	r2, [r7, #12]
 8008e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e10:	4640      	mov	r0, r8
 8008e12:	4649      	mov	r1, r9
 8008e14:	f7f7 fa3a 	bl	800028c <__aeabi_uldivmod>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e26:	d308      	bcc.n	8008e3a <UART_SetConfig+0x2c2>
 8008e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e2e:	d204      	bcs.n	8008e3a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e36:	60da      	str	r2, [r3, #12]
 8008e38:	e003      	b.n	8008e42 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008e40:	e070      	b.n	8008f24 <UART_SetConfig+0x3ac>
 8008e42:	e06f      	b.n	8008f24 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e4c:	d13c      	bne.n	8008ec8 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e50:	2200      	movs	r2, #0
 8008e52:	603b      	str	r3, [r7, #0]
 8008e54:	607a      	str	r2, [r7, #4]
 8008e56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e5a:	f7fc fda5 	bl	80059a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e5e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d05e      	beq.n	8008f24 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6a:	4a39      	ldr	r2, [pc, #228]	@ (8008f50 <UART_SetConfig+0x3d8>)
 8008e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e78:	005a      	lsls	r2, r3, #1
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	085b      	lsrs	r3, r3, #1
 8008e80:	441a      	add	r2, r3
 8008e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e8e:	2b0f      	cmp	r3, #15
 8008e90:	d916      	bls.n	8008ec0 <UART_SetConfig+0x348>
 8008e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e98:	d212      	bcs.n	8008ec0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	f023 030f 	bic.w	r3, r3, #15
 8008ea2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea6:	085b      	lsrs	r3, r3, #1
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008ebc:	60da      	str	r2, [r3, #12]
 8008ebe:	e031      	b.n	8008f24 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ec6:	e02d      	b.n	8008f24 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eca:	2200      	movs	r2, #0
 8008ecc:	469a      	mov	sl, r3
 8008ece:	4693      	mov	fp, r2
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	f7fc fd68 	bl	80059a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ed8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d021      	beq.n	8008f24 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8008f50 <UART_SetConfig+0x3d8>)
 8008ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eea:	461a      	mov	r2, r3
 8008eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008eee:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	085b      	lsrs	r3, r3, #1
 8008ef8:	441a      	add	r2, r3
 8008efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f06:	2b0f      	cmp	r3, #15
 8008f08:	d909      	bls.n	8008f1e <UART_SetConfig+0x3a6>
 8008f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f10:	d205      	bcs.n	8008f1e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60da      	str	r2, [r3, #12]
 8008f1c:	e002      	b.n	8008f24 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f26:	2201      	movs	r2, #1
 8008f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f36:	2200      	movs	r2, #0
 8008f38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3750      	adds	r7, #80	@ 0x50
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f4e:	bf00      	nop
 8008f50:	0800b964 	.word	0x0800b964

08008f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f60:	f003 0308 	and.w	r3, r3, #8
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc6:	f003 0304 	and.w	r3, r3, #4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01a      	beq.n	800906a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800904e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009052:	d10a      	bne.n	800906a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	430a      	orrs	r2, r1
 8009068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	605a      	str	r2, [r3, #4]
  }
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b098      	sub	sp, #96	@ 0x60
 800909c:	af02      	add	r7, sp, #8
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090a8:	f7f8 fa78 	bl	800159c <HAL_GetTick>
 80090ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d12f      	bne.n	800911c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090c4:	2200      	movs	r2, #0
 80090c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f88e 	bl	80091ec <UART_WaitOnFlagUntilTimeout>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d022      	beq.n	800911c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090de:	e853 3f00 	ldrex	r3, [r3]
 80090e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090fc:	e841 2300 	strex	r3, r2, [r1]
 8009100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1e6      	bne.n	80090d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e063      	b.n	80091e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0304 	and.w	r3, r3, #4
 8009126:	2b04      	cmp	r3, #4
 8009128:	d149      	bne.n	80091be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800912a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009132:	2200      	movs	r2, #0
 8009134:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f857 	bl	80091ec <UART_WaitOnFlagUntilTimeout>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d03c      	beq.n	80091be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	623b      	str	r3, [r7, #32]
   return(result);
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009162:	633b      	str	r3, [r7, #48]	@ 0x30
 8009164:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e6      	bne.n	8009144 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3308      	adds	r3, #8
 800917c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	60fb      	str	r3, [r7, #12]
   return(result);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f023 0301 	bic.w	r3, r3, #1
 800918c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3308      	adds	r3, #8
 8009194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009196:	61fa      	str	r2, [r7, #28]
 8009198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	69b9      	ldr	r1, [r7, #24]
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	617b      	str	r3, [r7, #20]
   return(result);
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e5      	bne.n	8009176 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e012      	b.n	80091e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3758      	adds	r7, #88	@ 0x58
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091fc:	e04f      	b.n	800929e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009204:	d04b      	beq.n	800929e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009206:	f7f8 f9c9 	bl	800159c <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	429a      	cmp	r2, r3
 8009214:	d302      	bcc.n	800921c <UART_WaitOnFlagUntilTimeout+0x30>
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e04e      	b.n	80092be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0304 	and.w	r3, r3, #4
 800922a:	2b00      	cmp	r3, #0
 800922c:	d037      	beq.n	800929e <UART_WaitOnFlagUntilTimeout+0xb2>
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2b80      	cmp	r3, #128	@ 0x80
 8009232:	d034      	beq.n	800929e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b40      	cmp	r3, #64	@ 0x40
 8009238:	d031      	beq.n	800929e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	f003 0308 	and.w	r3, r3, #8
 8009244:	2b08      	cmp	r3, #8
 8009246:	d110      	bne.n	800926a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2208      	movs	r2, #8
 800924e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f000 f95b 	bl	800950c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2208      	movs	r2, #8
 800925a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e029      	b.n	80092be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009278:	d111      	bne.n	800929e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 f941 	bl	800950c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2220      	movs	r2, #32
 800928e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e00f      	b.n	80092be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69da      	ldr	r2, [r3, #28]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4013      	ands	r3, r2
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	bf0c      	ite	eq
 80092ae:	2301      	moveq	r3, #1
 80092b0:	2300      	movne	r3, #0
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	461a      	mov	r2, r3
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d0a0      	beq.n	80091fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b0a3      	sub	sp, #140	@ 0x8c
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	88fa      	ldrh	r2, [r7, #6]
 80092e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	88fa      	ldrh	r2, [r7, #6]
 80092e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092fa:	d10e      	bne.n	800931a <UART_Start_Receive_IT+0x52>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d105      	bne.n	8009310 <UART_Start_Receive_IT+0x48>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800930a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800930e:	e02d      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	22ff      	movs	r2, #255	@ 0xff
 8009314:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009318:	e028      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10d      	bne.n	800933e <UART_Start_Receive_IT+0x76>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d104      	bne.n	8009334 <UART_Start_Receive_IT+0x6c>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	22ff      	movs	r2, #255	@ 0xff
 800932e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009332:	e01b      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	227f      	movs	r2, #127	@ 0x7f
 8009338:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800933c:	e016      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009346:	d10d      	bne.n	8009364 <UART_Start_Receive_IT+0x9c>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <UART_Start_Receive_IT+0x92>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	227f      	movs	r2, #127	@ 0x7f
 8009354:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009358:	e008      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	223f      	movs	r2, #63	@ 0x3f
 800935e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009362:	e003      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2222      	movs	r2, #34	@ 0x22
 8009378:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009386:	e853 3f00 	ldrex	r3, [r3]
 800938a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800938c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800938e:	f043 0301 	orr.w	r3, r3, #1
 8009392:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3308      	adds	r3, #8
 800939c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80093a0:	673a      	str	r2, [r7, #112]	@ 0x70
 80093a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80093a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80093ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e3      	bne.n	800937c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093bc:	d14f      	bne.n	800945e <UART_Start_Receive_IT+0x196>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093c4:	88fa      	ldrh	r2, [r7, #6]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d349      	bcc.n	800945e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093d2:	d107      	bne.n	80093e4 <UART_Start_Receive_IT+0x11c>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d103      	bne.n	80093e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4a47      	ldr	r2, [pc, #284]	@ (80094fc <UART_Start_Receive_IT+0x234>)
 80093e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80093e2:	e002      	b.n	80093ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4a46      	ldr	r2, [pc, #280]	@ (8009500 <UART_Start_Receive_IT+0x238>)
 80093e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d01a      	beq.n	8009428 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009406:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009414:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009416:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800941a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e4      	bne.n	80093f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3308      	adds	r3, #8
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800943e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009448:	64ba      	str	r2, [r7, #72]	@ 0x48
 800944a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800944e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e5      	bne.n	8009428 <UART_Start_Receive_IT+0x160>
 800945c:	e046      	b.n	80094ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009466:	d107      	bne.n	8009478 <UART_Start_Receive_IT+0x1b0>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d103      	bne.n	8009478 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a24      	ldr	r2, [pc, #144]	@ (8009504 <UART_Start_Receive_IT+0x23c>)
 8009474:	675a      	str	r2, [r3, #116]	@ 0x74
 8009476:	e002      	b.n	800947e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4a23      	ldr	r2, [pc, #140]	@ (8009508 <UART_Start_Receive_IT+0x240>)
 800947c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d019      	beq.n	80094ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948e:	e853 3f00 	ldrex	r3, [r3]
 8009492:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800949a:	677b      	str	r3, [r7, #116]	@ 0x74
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	461a      	mov	r2, r3
 80094a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094ac:	e841 2300 	strex	r3, r2, [r1]
 80094b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80094b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e6      	bne.n	8009486 <UART_Start_Receive_IT+0x1be>
 80094b8:	e018      	b.n	80094ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	613b      	str	r3, [r7, #16]
   return(result);
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f043 0320 	orr.w	r3, r3, #32
 80094ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094d8:	623b      	str	r3, [r7, #32]
 80094da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	69f9      	ldr	r1, [r7, #28]
 80094de:	6a3a      	ldr	r2, [r7, #32]
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e6      	bne.n	80094ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	378c      	adds	r7, #140	@ 0x8c
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	08009d55 	.word	0x08009d55
 8009500:	080099e5 	.word	0x080099e5
 8009504:	08009821 	.word	0x08009821
 8009508:	0800965d 	.word	0x0800965d

0800950c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800950c:	b480      	push	{r7}
 800950e:	b095      	sub	sp, #84	@ 0x54
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009532:	643b      	str	r3, [r7, #64]	@ 0x40
 8009534:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1e6      	bne.n	8009514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3308      	adds	r3, #8
 800954c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	61fb      	str	r3, [r7, #28]
   return(result);
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800955c:	f023 0301 	bic.w	r3, r3, #1
 8009560:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3308      	adds	r3, #8
 8009568:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800956a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800956c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e3      	bne.n	8009546 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009582:	2b01      	cmp	r3, #1
 8009584:	d118      	bne.n	80095b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	60bb      	str	r3, [r7, #8]
   return(result);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f023 0310 	bic.w	r3, r3, #16
 800959a:	647b      	str	r3, [r7, #68]	@ 0x44
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6979      	ldr	r1, [r7, #20]
 80095aa:	69ba      	ldr	r2, [r7, #24]
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	613b      	str	r3, [r7, #16]
   return(result);
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e6      	bne.n	8009586 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80095cc:	bf00      	nop
 80095ce:	3754      	adds	r7, #84	@ 0x54
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f7ff faa8 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	60bb      	str	r3, [r7, #8]
   return(result);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	61bb      	str	r3, [r7, #24]
 800962c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	6979      	ldr	r1, [r7, #20]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	613b      	str	r3, [r7, #16]
   return(result);
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e6      	bne.n	800960c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2220      	movs	r2, #32
 8009642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fa73 	bl	8008b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009652:	bf00      	nop
 8009654:	3720      	adds	r7, #32
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b09c      	sub	sp, #112	@ 0x70
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800966a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009674:	2b22      	cmp	r3, #34	@ 0x22
 8009676:	f040 80c3 	bne.w	8009800 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009680:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009684:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009688:	b2d9      	uxtb	r1, r3
 800968a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800968e:	b2da      	uxtb	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009694:	400a      	ands	r2, r1
 8009696:	b2d2      	uxtb	r2, r2
 8009698:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	3b01      	subs	r3, #1
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096bc:	b29b      	uxth	r3, r3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f040 80a6 	bne.w	8009810 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e6      	bne.n	80096c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3308      	adds	r3, #8
 80096fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009708:	f023 0301 	bic.w	r3, r3, #1
 800970c:	667b      	str	r3, [r7, #100]	@ 0x64
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3308      	adds	r3, #8
 8009714:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009716:	647a      	str	r2, [r7, #68]	@ 0x44
 8009718:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800971c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e5      	bne.n	80096f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a35      	ldr	r2, [pc, #212]	@ (8009818 <UART_RxISR_8BIT+0x1bc>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d024      	beq.n	8009792 <UART_RxISR_8BIT+0x136>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a33      	ldr	r2, [pc, #204]	@ (800981c <UART_RxISR_8BIT+0x1c0>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d01f      	beq.n	8009792 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d018      	beq.n	8009792 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	623b      	str	r3, [r7, #32]
   return(result);
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009774:	663b      	str	r3, [r7, #96]	@ 0x60
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800977e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009780:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800978c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e6      	bne.n	8009760 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d12e      	bne.n	80097f8 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f023 0310 	bic.w	r3, r3, #16
 80097b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097be:	61fb      	str	r3, [r7, #28]
 80097c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	69b9      	ldr	r1, [r7, #24]
 80097c4:	69fa      	ldr	r2, [r7, #28]
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	617b      	str	r3, [r7, #20]
   return(result);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e6      	bne.n	80097a0 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	f003 0310 	and.w	r3, r3, #16
 80097dc:	2b10      	cmp	r3, #16
 80097de:	d103      	bne.n	80097e8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2210      	movs	r2, #16
 80097e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff f9b5 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097f6:	e00b      	b.n	8009810 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7f7 f8e3 	bl	80009c4 <HAL_UART_RxCpltCallback>
}
 80097fe:	e007      	b.n	8009810 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	699a      	ldr	r2, [r3, #24]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0208 	orr.w	r2, r2, #8
 800980e:	619a      	str	r2, [r3, #24]
}
 8009810:	bf00      	nop
 8009812:	3770      	adds	r7, #112	@ 0x70
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	44002400 	.word	0x44002400
 800981c:	54002400 	.word	0x54002400

08009820 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b09c      	sub	sp, #112	@ 0x70
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800982e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009838:	2b22      	cmp	r3, #34	@ 0x22
 800983a:	f040 80c3 	bne.w	80099c4 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009844:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800984c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800984e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009852:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009856:	4013      	ands	r3, r2
 8009858:	b29a      	uxth	r2, r3
 800985a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800985c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009862:	1c9a      	adds	r2, r3, #2
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800986e:	b29b      	uxth	r3, r3
 8009870:	3b01      	subs	r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009880:	b29b      	uxth	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	f040 80a6 	bne.w	80099d4 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800989c:	667b      	str	r3, [r7, #100]	@ 0x64
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80098a8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80098b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e6      	bne.n	8009888 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	f023 0301 	bic.w	r3, r3, #1
 80098d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3308      	adds	r3, #8
 80098d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098da:	643a      	str	r2, [r7, #64]	@ 0x40
 80098dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098e2:	e841 2300 	strex	r3, r2, [r1]
 80098e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e5      	bne.n	80098ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a35      	ldr	r2, [pc, #212]	@ (80099dc <UART_RxISR_16BIT+0x1bc>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d024      	beq.n	8009956 <UART_RxISR_16BIT+0x136>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a33      	ldr	r2, [pc, #204]	@ (80099e0 <UART_RxISR_16BIT+0x1c0>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d01f      	beq.n	8009956 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d018      	beq.n	8009956 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	e853 3f00 	ldrex	r3, [r3]
 8009930:	61fb      	str	r3, [r7, #28]
   return(result);
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009944:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e6      	bne.n	8009924 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800995a:	2b01      	cmp	r3, #1
 800995c:	d12e      	bne.n	80099bc <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	60bb      	str	r3, [r7, #8]
   return(result);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f023 0310 	bic.w	r3, r3, #16
 8009978:	65bb      	str	r3, [r7, #88]	@ 0x58
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009982:	61bb      	str	r3, [r7, #24]
 8009984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	6979      	ldr	r1, [r7, #20]
 8009988:	69ba      	ldr	r2, [r7, #24]
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	613b      	str	r3, [r7, #16]
   return(result);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e6      	bne.n	8009964 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2b10      	cmp	r3, #16
 80099a2:	d103      	bne.n	80099ac <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2210      	movs	r2, #16
 80099aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff f8d3 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099ba:	e00b      	b.n	80099d4 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7f7 f801 	bl	80009c4 <HAL_UART_RxCpltCallback>
}
 80099c2:	e007      	b.n	80099d4 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	699a      	ldr	r2, [r3, #24]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f042 0208 	orr.w	r2, r2, #8
 80099d2:	619a      	str	r2, [r3, #24]
}
 80099d4:	bf00      	nop
 80099d6:	3770      	adds	r7, #112	@ 0x70
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	44002400 	.word	0x44002400
 80099e0:	54002400 	.word	0x54002400

080099e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b0ac      	sub	sp, #176	@ 0xb0
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80099f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a1a:	2b22      	cmp	r3, #34	@ 0x22
 8009a1c:	f040 8188 	bne.w	8009d30 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a26:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a2a:	e12b      	b.n	8009c84 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a32:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a36:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009a3a:	b2d9      	uxtb	r1, r3
 8009a3c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a46:	400a      	ands	r2, r1
 8009a48:	b2d2      	uxtb	r2, r2
 8009a4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d053      	beq.n	8009b26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d011      	beq.n	8009aae <UART_RxISR_8BIT_FIFOEN+0xca>
 8009a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00b      	beq.n	8009aae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa4:	f043 0201 	orr.w	r2, r3, #1
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ab2:	f003 0302 	and.w	r3, r3, #2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d011      	beq.n	8009ade <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00b      	beq.n	8009ade <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2202      	movs	r2, #2
 8009acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad4:	f043 0204 	orr.w	r2, r3, #4
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d011      	beq.n	8009b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00b      	beq.n	8009b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2204      	movs	r2, #4
 8009afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b04:	f043 0202 	orr.w	r2, r3, #2
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d006      	beq.n	8009b26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff f817 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f040 80a8 	bne.w	8009c84 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b3c:	e853 3f00 	ldrex	r3, [r3]
 8009b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	461a      	mov	r2, r3
 8009b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b58:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009b5c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009b64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e4      	bne.n	8009b34 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3308      	adds	r3, #8
 8009b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009b7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b80:	f023 0301 	bic.w	r3, r3, #1
 8009b84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b92:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009b94:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b96:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009b98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009ba0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e1      	bne.n	8009b6a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2220      	movs	r2, #32
 8009baa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a62      	ldr	r2, [pc, #392]	@ (8009d48 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d026      	beq.n	8009c12 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a60      	ldr	r2, [pc, #384]	@ (8009d4c <UART_RxISR_8BIT_FIFOEN+0x368>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d021      	beq.n	8009c12 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01a      	beq.n	8009c12 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009bf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c00:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e4      	bne.n	8009bdc <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d130      	bne.n	8009c7c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c28:	e853 3f00 	ldrex	r3, [r3]
 8009c2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	f023 0310 	bic.w	r3, r3, #16
 8009c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c4a:	e841 2300 	strex	r3, r2, [r1]
 8009c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e4      	bne.n	8009c20 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	f003 0310 	and.w	r3, r3, #16
 8009c60:	2b10      	cmp	r3, #16
 8009c62:	d103      	bne.n	8009c6c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2210      	movs	r2, #16
 8009c6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7fe ff73 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009c7a:	e00e      	b.n	8009c9a <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7f6 fea1 	bl	80009c4 <HAL_UART_RxCpltCallback>
        break;
 8009c82:	e00a      	b.n	8009c9a <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c84:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d006      	beq.n	8009c9a <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8009c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c90:	f003 0320 	and.w	r3, r3, #32
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f47f aec9 	bne.w	8009a2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ca0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ca4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d049      	beq.n	8009d40 <UART_RxISR_8BIT_FIFOEN+0x35c>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cb2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d242      	bcs.n	8009d40 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	6a3b      	ldr	r3, [r7, #32]
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3308      	adds	r3, #8
 8009cda:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e3      	bne.n	8009cba <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a16      	ldr	r2, [pc, #88]	@ (8009d50 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8009cf6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	e853 3f00 	ldrex	r3, [r3]
 8009d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	f043 0320 	orr.w	r3, r3, #32
 8009d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d1a:	61bb      	str	r3, [r7, #24]
 8009d1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1e:	6979      	ldr	r1, [r7, #20]
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	e841 2300 	strex	r3, r2, [r1]
 8009d26:	613b      	str	r3, [r7, #16]
   return(result);
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1e4      	bne.n	8009cf8 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d2e:	e007      	b.n	8009d40 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0208 	orr.w	r2, r2, #8
 8009d3e:	619a      	str	r2, [r3, #24]
}
 8009d40:	bf00      	nop
 8009d42:	37b0      	adds	r7, #176	@ 0xb0
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	44002400 	.word	0x44002400
 8009d4c:	54002400 	.word	0x54002400
 8009d50:	0800965d 	.word	0x0800965d

08009d54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b0ae      	sub	sp, #184	@ 0xb8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d62:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d8a:	2b22      	cmp	r3, #34	@ 0x22
 8009d8c:	f040 818c 	bne.w	800a0a8 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d96:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d9a:	e12f      	b.n	8009ffc <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009dae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009db2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009db6:	4013      	ands	r3, r2
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc4:	1c9a      	adds	r2, r3, #2
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009de6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d053      	beq.n	8009e9a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d011      	beq.n	8009e22 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00b      	beq.n	8009e22 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e18:	f043 0201 	orr.w	r2, r3, #1
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d011      	beq.n	8009e52 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00b      	beq.n	8009e52 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e48:	f043 0204 	orr.w	r2, r3, #4
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e56:	f003 0304 	and.w	r3, r3, #4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d011      	beq.n	8009e82 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00b      	beq.n	8009e82 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2204      	movs	r2, #4
 8009e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e78:	f043 0202 	orr.w	r2, r3, #2
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d006      	beq.n	8009e9a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7fe fe5d 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f040 80aa 	bne.w	8009ffc <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009eb0:	e853 3f00 	ldrex	r3, [r3]
 8009eb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009eb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ece:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1e2      	bne.n	8009ea8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ef8:	f023 0301 	bic.w	r3, r3, #1
 8009efc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3308      	adds	r3, #8
 8009f06:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009f0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f12:	e841 2300 	strex	r3, r2, [r1]
 8009f16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1e1      	bne.n	8009ee2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2220      	movs	r2, #32
 8009f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a62      	ldr	r2, [pc, #392]	@ (800a0c0 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d026      	beq.n	8009f8a <UART_RxISR_16BIT_FIFOEN+0x236>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a60      	ldr	r2, [pc, #384]	@ (800a0c4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d021      	beq.n	8009f8a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d01a      	beq.n	8009f8a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	461a      	mov	r2, r3
 8009f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009f76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f7e:	e841 2300 	strex	r3, r2, [r1]
 8009f82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1e4      	bne.n	8009f54 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d130      	bne.n	8009ff4 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa8:	f023 0310 	bic.w	r3, r3, #16
 8009fac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fbc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e4      	bne.n	8009f98 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	69db      	ldr	r3, [r3, #28]
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b10      	cmp	r3, #16
 8009fda:	d103      	bne.n	8009fe4 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2210      	movs	r2, #16
 8009fe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7fe fdb7 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009ff2:	e00e      	b.n	800a012 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7f6 fce5 	bl	80009c4 <HAL_UART_RxCpltCallback>
        break;
 8009ffa:	e00a      	b.n	800a012 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ffc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a000:	2b00      	cmp	r3, #0
 800a002:	d006      	beq.n	800a012 <UART_RxISR_16BIT_FIFOEN+0x2be>
 800a004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a008:	f003 0320 	and.w	r3, r3, #32
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f47f aec5 	bne.w	8009d9c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a018:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a01c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a020:	2b00      	cmp	r3, #0
 800a022:	d049      	beq.n	800a0b8 <UART_RxISR_16BIT_FIFOEN+0x364>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a02a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a02e:	429a      	cmp	r2, r3
 800a030:	d242      	bcs.n	800a0b8 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3308      	adds	r3, #8
 800a038:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	623b      	str	r3, [r7, #32]
   return(result);
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3308      	adds	r3, #8
 800a052:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a056:	633a      	str	r2, [r7, #48]	@ 0x30
 800a058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a05c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e3      	bne.n	800a032 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a16      	ldr	r2, [pc, #88]	@ (800a0c8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800a06e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	e853 3f00 	ldrex	r3, [r3]
 800a07c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f043 0320 	orr.w	r3, r3, #32
 800a084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a092:	61fb      	str	r3, [r7, #28]
 800a094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	69b9      	ldr	r1, [r7, #24]
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	617b      	str	r3, [r7, #20]
   return(result);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e4      	bne.n	800a070 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0a6:	e007      	b.n	800a0b8 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	699a      	ldr	r2, [r3, #24]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f042 0208 	orr.w	r2, r2, #8
 800a0b6:	619a      	str	r2, [r3, #24]
}
 800a0b8:	bf00      	nop
 800a0ba:	37b8      	adds	r7, #184	@ 0xb8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	44002400 	.word	0x44002400
 800a0c4:	54002400 	.word	0x54002400
 800a0c8:	08009821 	.word	0x08009821

0800a0cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a116:	2b01      	cmp	r3, #1
 800a118:	d101      	bne.n	800a11e <HAL_UARTEx_DisableFifoMode+0x16>
 800a11a:	2302      	movs	r3, #2
 800a11c:	e027      	b.n	800a16e <HAL_UARTEx_DisableFifoMode+0x66>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2224      	movs	r2, #36	@ 0x24
 800a12a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 0201 	bic.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a14c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2220      	movs	r2, #32
 800a160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d101      	bne.n	800a192 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a18e:	2302      	movs	r3, #2
 800a190:	e02d      	b.n	800a1ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2224      	movs	r2, #36	@ 0x24
 800a19e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 0201 	bic.w	r2, r2, #1
 800a1b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f850 	bl	800a274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a206:	2b01      	cmp	r3, #1
 800a208:	d101      	bne.n	800a20e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a20a:	2302      	movs	r3, #2
 800a20c:	e02d      	b.n	800a26a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2224      	movs	r2, #36	@ 0x24
 800a21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 0201 	bic.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f812 	bl	800a274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2220      	movs	r2, #32
 800a25c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a280:	2b00      	cmp	r3, #0
 800a282:	d108      	bne.n	800a296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a294:	e031      	b.n	800a2fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a296:	2308      	movs	r3, #8
 800a298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a29a:	2308      	movs	r3, #8
 800a29c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	0e5b      	lsrs	r3, r3, #25
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	f003 0307 	and.w	r3, r3, #7
 800a2ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	0f5b      	lsrs	r3, r3, #29
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	7b3a      	ldrb	r2, [r7, #12]
 800a2c2:	4911      	ldr	r1, [pc, #68]	@ (800a308 <UARTEx_SetNbDataToProcess+0x94>)
 800a2c4:	5c8a      	ldrb	r2, [r1, r2]
 800a2c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2ca:	7b3a      	ldrb	r2, [r7, #12]
 800a2cc:	490f      	ldr	r1, [pc, #60]	@ (800a30c <UARTEx_SetNbDataToProcess+0x98>)
 800a2ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	7b7a      	ldrb	r2, [r7, #13]
 800a2e0:	4909      	ldr	r1, [pc, #36]	@ (800a308 <UARTEx_SetNbDataToProcess+0x94>)
 800a2e2:	5c8a      	ldrb	r2, [r1, r2]
 800a2e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2e8:	7b7a      	ldrb	r2, [r7, #13]
 800a2ea:	4908      	ldr	r1, [pc, #32]	@ (800a30c <UARTEx_SetNbDataToProcess+0x98>)
 800a2ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2fa:	bf00      	nop
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	0800b97c 	.word	0x0800b97c
 800a30c:	0800b984 	.word	0x0800b984

0800a310 <std>:
 800a310:	2300      	movs	r3, #0
 800a312:	b510      	push	{r4, lr}
 800a314:	4604      	mov	r4, r0
 800a316:	6083      	str	r3, [r0, #8]
 800a318:	8181      	strh	r1, [r0, #12]
 800a31a:	4619      	mov	r1, r3
 800a31c:	6643      	str	r3, [r0, #100]	@ 0x64
 800a31e:	81c2      	strh	r2, [r0, #14]
 800a320:	2208      	movs	r2, #8
 800a322:	6183      	str	r3, [r0, #24]
 800a324:	e9c0 3300 	strd	r3, r3, [r0]
 800a328:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a32c:	305c      	adds	r0, #92	@ 0x5c
 800a32e:	f000 fa19 	bl	800a764 <memset>
 800a332:	4b0d      	ldr	r3, [pc, #52]	@ (800a368 <std+0x58>)
 800a334:	6224      	str	r4, [r4, #32]
 800a336:	6263      	str	r3, [r4, #36]	@ 0x24
 800a338:	4b0c      	ldr	r3, [pc, #48]	@ (800a36c <std+0x5c>)
 800a33a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a33c:	4b0c      	ldr	r3, [pc, #48]	@ (800a370 <std+0x60>)
 800a33e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a340:	4b0c      	ldr	r3, [pc, #48]	@ (800a374 <std+0x64>)
 800a342:	6323      	str	r3, [r4, #48]	@ 0x30
 800a344:	4b0c      	ldr	r3, [pc, #48]	@ (800a378 <std+0x68>)
 800a346:	429c      	cmp	r4, r3
 800a348:	d006      	beq.n	800a358 <std+0x48>
 800a34a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a34e:	4294      	cmp	r4, r2
 800a350:	d002      	beq.n	800a358 <std+0x48>
 800a352:	33d0      	adds	r3, #208	@ 0xd0
 800a354:	429c      	cmp	r4, r3
 800a356:	d105      	bne.n	800a364 <std+0x54>
 800a358:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a360:	f000 ba78 	b.w	800a854 <__retarget_lock_init_recursive>
 800a364:	bd10      	pop	{r4, pc}
 800a366:	bf00      	nop
 800a368:	0800a5b5 	.word	0x0800a5b5
 800a36c:	0800a5d7 	.word	0x0800a5d7
 800a370:	0800a60f 	.word	0x0800a60f
 800a374:	0800a633 	.word	0x0800a633
 800a378:	2000024c 	.word	0x2000024c

0800a37c <stdio_exit_handler>:
 800a37c:	4a02      	ldr	r2, [pc, #8]	@ (800a388 <stdio_exit_handler+0xc>)
 800a37e:	4903      	ldr	r1, [pc, #12]	@ (800a38c <stdio_exit_handler+0x10>)
 800a380:	4803      	ldr	r0, [pc, #12]	@ (800a390 <stdio_exit_handler+0x14>)
 800a382:	f000 b869 	b.w	800a458 <_fwalk_sglue>
 800a386:	bf00      	nop
 800a388:	20000028 	.word	0x20000028
 800a38c:	0800b3c5 	.word	0x0800b3c5
 800a390:	20000038 	.word	0x20000038

0800a394 <cleanup_stdio>:
 800a394:	6841      	ldr	r1, [r0, #4]
 800a396:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c8 <cleanup_stdio+0x34>)
 800a398:	4299      	cmp	r1, r3
 800a39a:	b510      	push	{r4, lr}
 800a39c:	4604      	mov	r4, r0
 800a39e:	d001      	beq.n	800a3a4 <cleanup_stdio+0x10>
 800a3a0:	f001 f810 	bl	800b3c4 <_fflush_r>
 800a3a4:	68a1      	ldr	r1, [r4, #8]
 800a3a6:	4b09      	ldr	r3, [pc, #36]	@ (800a3cc <cleanup_stdio+0x38>)
 800a3a8:	4299      	cmp	r1, r3
 800a3aa:	d002      	beq.n	800a3b2 <cleanup_stdio+0x1e>
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f001 f809 	bl	800b3c4 <_fflush_r>
 800a3b2:	68e1      	ldr	r1, [r4, #12]
 800a3b4:	4b06      	ldr	r3, [pc, #24]	@ (800a3d0 <cleanup_stdio+0x3c>)
 800a3b6:	4299      	cmp	r1, r3
 800a3b8:	d004      	beq.n	800a3c4 <cleanup_stdio+0x30>
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c0:	f001 b800 	b.w	800b3c4 <_fflush_r>
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	bf00      	nop
 800a3c8:	2000024c 	.word	0x2000024c
 800a3cc:	200002b4 	.word	0x200002b4
 800a3d0:	2000031c 	.word	0x2000031c

0800a3d4 <global_stdio_init.part.0>:
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a404 <global_stdio_init.part.0+0x30>)
 800a3d8:	2104      	movs	r1, #4
 800a3da:	4c0b      	ldr	r4, [pc, #44]	@ (800a408 <global_stdio_init.part.0+0x34>)
 800a3dc:	4a0b      	ldr	r2, [pc, #44]	@ (800a40c <global_stdio_init.part.0+0x38>)
 800a3de:	4620      	mov	r0, r4
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f7ff ff94 	bl	800a310 <std>
 800a3e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	2109      	movs	r1, #9
 800a3f0:	f7ff ff8e 	bl	800a310 <std>
 800a3f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	2112      	movs	r1, #18
 800a3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a400:	f7ff bf86 	b.w	800a310 <std>
 800a404:	20000384 	.word	0x20000384
 800a408:	2000024c 	.word	0x2000024c
 800a40c:	0800a37d 	.word	0x0800a37d

0800a410 <__sfp_lock_acquire>:
 800a410:	4801      	ldr	r0, [pc, #4]	@ (800a418 <__sfp_lock_acquire+0x8>)
 800a412:	f000 ba20 	b.w	800a856 <__retarget_lock_acquire_recursive>
 800a416:	bf00      	nop
 800a418:	2000038d 	.word	0x2000038d

0800a41c <__sfp_lock_release>:
 800a41c:	4801      	ldr	r0, [pc, #4]	@ (800a424 <__sfp_lock_release+0x8>)
 800a41e:	f000 ba1b 	b.w	800a858 <__retarget_lock_release_recursive>
 800a422:	bf00      	nop
 800a424:	2000038d 	.word	0x2000038d

0800a428 <__sinit>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	4604      	mov	r4, r0
 800a42c:	f7ff fff0 	bl	800a410 <__sfp_lock_acquire>
 800a430:	6a23      	ldr	r3, [r4, #32]
 800a432:	b11b      	cbz	r3, 800a43c <__sinit+0x14>
 800a434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a438:	f7ff bff0 	b.w	800a41c <__sfp_lock_release>
 800a43c:	4b04      	ldr	r3, [pc, #16]	@ (800a450 <__sinit+0x28>)
 800a43e:	6223      	str	r3, [r4, #32]
 800a440:	4b04      	ldr	r3, [pc, #16]	@ (800a454 <__sinit+0x2c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1f5      	bne.n	800a434 <__sinit+0xc>
 800a448:	f7ff ffc4 	bl	800a3d4 <global_stdio_init.part.0>
 800a44c:	e7f2      	b.n	800a434 <__sinit+0xc>
 800a44e:	bf00      	nop
 800a450:	0800a395 	.word	0x0800a395
 800a454:	20000384 	.word	0x20000384

0800a458 <_fwalk_sglue>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	4607      	mov	r7, r0
 800a45e:	4688      	mov	r8, r1
 800a460:	4614      	mov	r4, r2
 800a462:	2600      	movs	r6, #0
 800a464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a468:	f1b9 0901 	subs.w	r9, r9, #1
 800a46c:	d505      	bpl.n	800a47a <_fwalk_sglue+0x22>
 800a46e:	6824      	ldr	r4, [r4, #0]
 800a470:	2c00      	cmp	r4, #0
 800a472:	d1f7      	bne.n	800a464 <_fwalk_sglue+0xc>
 800a474:	4630      	mov	r0, r6
 800a476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a47a:	89ab      	ldrh	r3, [r5, #12]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d907      	bls.n	800a490 <_fwalk_sglue+0x38>
 800a480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a484:	3301      	adds	r3, #1
 800a486:	d003      	beq.n	800a490 <_fwalk_sglue+0x38>
 800a488:	4629      	mov	r1, r5
 800a48a:	4638      	mov	r0, r7
 800a48c:	47c0      	blx	r8
 800a48e:	4306      	orrs	r6, r0
 800a490:	3568      	adds	r5, #104	@ 0x68
 800a492:	e7e9      	b.n	800a468 <_fwalk_sglue+0x10>

0800a494 <iprintf>:
 800a494:	b40f      	push	{r0, r1, r2, r3}
 800a496:	b507      	push	{r0, r1, r2, lr}
 800a498:	4906      	ldr	r1, [pc, #24]	@ (800a4b4 <iprintf+0x20>)
 800a49a:	ab04      	add	r3, sp, #16
 800a49c:	6808      	ldr	r0, [r1, #0]
 800a49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a2:	6881      	ldr	r1, [r0, #8]
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	f000 fc5f 	bl	800ad68 <_vfiprintf_r>
 800a4aa:	b003      	add	sp, #12
 800a4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4b0:	b004      	add	sp, #16
 800a4b2:	4770      	bx	lr
 800a4b4:	20000034 	.word	0x20000034

0800a4b8 <_puts_r>:
 800a4b8:	6a03      	ldr	r3, [r0, #32]
 800a4ba:	b570      	push	{r4, r5, r6, lr}
 800a4bc:	4605      	mov	r5, r0
 800a4be:	460e      	mov	r6, r1
 800a4c0:	6884      	ldr	r4, [r0, #8]
 800a4c2:	b90b      	cbnz	r3, 800a4c8 <_puts_r+0x10>
 800a4c4:	f7ff ffb0 	bl	800a428 <__sinit>
 800a4c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4ca:	07db      	lsls	r3, r3, #31
 800a4cc:	d405      	bmi.n	800a4da <_puts_r+0x22>
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	0598      	lsls	r0, r3, #22
 800a4d2:	d402      	bmi.n	800a4da <_puts_r+0x22>
 800a4d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4d6:	f000 f9be 	bl	800a856 <__retarget_lock_acquire_recursive>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	0719      	lsls	r1, r3, #28
 800a4de:	d502      	bpl.n	800a4e6 <_puts_r+0x2e>
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d135      	bne.n	800a552 <_puts_r+0x9a>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f000 f8e5 	bl	800a6b8 <__swsetup_r>
 800a4ee:	b380      	cbz	r0, 800a552 <_puts_r+0x9a>
 800a4f0:	f04f 35ff 	mov.w	r5, #4294967295
 800a4f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4f6:	07da      	lsls	r2, r3, #31
 800a4f8:	d405      	bmi.n	800a506 <_puts_r+0x4e>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	059b      	lsls	r3, r3, #22
 800a4fe:	d402      	bmi.n	800a506 <_puts_r+0x4e>
 800a500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a502:	f000 f9a9 	bl	800a858 <__retarget_lock_release_recursive>
 800a506:	4628      	mov	r0, r5
 800a508:	bd70      	pop	{r4, r5, r6, pc}
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	da04      	bge.n	800a518 <_puts_r+0x60>
 800a50e:	69a2      	ldr	r2, [r4, #24]
 800a510:	429a      	cmp	r2, r3
 800a512:	dc17      	bgt.n	800a544 <_puts_r+0x8c>
 800a514:	290a      	cmp	r1, #10
 800a516:	d015      	beq.n	800a544 <_puts_r+0x8c>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	6022      	str	r2, [r4, #0]
 800a51e:	7019      	strb	r1, [r3, #0]
 800a520:	68a3      	ldr	r3, [r4, #8]
 800a522:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a526:	3b01      	subs	r3, #1
 800a528:	60a3      	str	r3, [r4, #8]
 800a52a:	2900      	cmp	r1, #0
 800a52c:	d1ed      	bne.n	800a50a <_puts_r+0x52>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	da11      	bge.n	800a556 <_puts_r+0x9e>
 800a532:	4622      	mov	r2, r4
 800a534:	210a      	movs	r1, #10
 800a536:	4628      	mov	r0, r5
 800a538:	f000 f87f 	bl	800a63a <__swbuf_r>
 800a53c:	3001      	adds	r0, #1
 800a53e:	d0d7      	beq.n	800a4f0 <_puts_r+0x38>
 800a540:	250a      	movs	r5, #10
 800a542:	e7d7      	b.n	800a4f4 <_puts_r+0x3c>
 800a544:	4622      	mov	r2, r4
 800a546:	4628      	mov	r0, r5
 800a548:	f000 f877 	bl	800a63a <__swbuf_r>
 800a54c:	3001      	adds	r0, #1
 800a54e:	d1e7      	bne.n	800a520 <_puts_r+0x68>
 800a550:	e7ce      	b.n	800a4f0 <_puts_r+0x38>
 800a552:	3e01      	subs	r6, #1
 800a554:	e7e4      	b.n	800a520 <_puts_r+0x68>
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	6022      	str	r2, [r4, #0]
 800a55c:	220a      	movs	r2, #10
 800a55e:	701a      	strb	r2, [r3, #0]
 800a560:	e7ee      	b.n	800a540 <_puts_r+0x88>
	...

0800a564 <puts>:
 800a564:	4b02      	ldr	r3, [pc, #8]	@ (800a570 <puts+0xc>)
 800a566:	4601      	mov	r1, r0
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	f7ff bfa5 	b.w	800a4b8 <_puts_r>
 800a56e:	bf00      	nop
 800a570:	20000034 	.word	0x20000034

0800a574 <siprintf>:
 800a574:	b40e      	push	{r1, r2, r3}
 800a576:	b500      	push	{lr}
 800a578:	b09c      	sub	sp, #112	@ 0x70
 800a57a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a57e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a580:	9002      	str	r0, [sp, #8]
 800a582:	9006      	str	r0, [sp, #24]
 800a584:	9107      	str	r1, [sp, #28]
 800a586:	9104      	str	r1, [sp, #16]
 800a588:	4808      	ldr	r0, [pc, #32]	@ (800a5ac <siprintf+0x38>)
 800a58a:	4909      	ldr	r1, [pc, #36]	@ (800a5b0 <siprintf+0x3c>)
 800a58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a590:	9105      	str	r1, [sp, #20]
 800a592:	a902      	add	r1, sp, #8
 800a594:	6800      	ldr	r0, [r0, #0]
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	f000 fac0 	bl	800ab1c <_svfiprintf_r>
 800a59c:	9b02      	ldr	r3, [sp, #8]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	701a      	strb	r2, [r3, #0]
 800a5a2:	b01c      	add	sp, #112	@ 0x70
 800a5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5a8:	b003      	add	sp, #12
 800a5aa:	4770      	bx	lr
 800a5ac:	20000034 	.word	0x20000034
 800a5b0:	ffff0208 	.word	0xffff0208

0800a5b4 <__sread>:
 800a5b4:	b510      	push	{r4, lr}
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5bc:	f000 f8fc 	bl	800a7b8 <_read_r>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	bfab      	itete	ge
 800a5c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a5c6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5c8:	181b      	addge	r3, r3, r0
 800a5ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a5ce:	bfac      	ite	ge
 800a5d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a5d2:	81a3      	strhlt	r3, [r4, #12]
 800a5d4:	bd10      	pop	{r4, pc}

0800a5d6 <__swrite>:
 800a5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5da:	461f      	mov	r7, r3
 800a5dc:	898b      	ldrh	r3, [r1, #12]
 800a5de:	4605      	mov	r5, r0
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	05db      	lsls	r3, r3, #23
 800a5e4:	4616      	mov	r6, r2
 800a5e6:	d505      	bpl.n	800a5f4 <__swrite+0x1e>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f0:	f000 f8d0 	bl	800a794 <_lseek_r>
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	4632      	mov	r2, r6
 800a5f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	463b      	mov	r3, r7
 800a606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a60a:	f000 b8e7 	b.w	800a7dc <_write_r>

0800a60e <__sseek>:
 800a60e:	b510      	push	{r4, lr}
 800a610:	460c      	mov	r4, r1
 800a612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a616:	f000 f8bd 	bl	800a794 <_lseek_r>
 800a61a:	1c43      	adds	r3, r0, #1
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	bf15      	itete	ne
 800a620:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a62a:	81a3      	strheq	r3, [r4, #12]
 800a62c:	bf18      	it	ne
 800a62e:	81a3      	strhne	r3, [r4, #12]
 800a630:	bd10      	pop	{r4, pc}

0800a632 <__sclose>:
 800a632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a636:	f000 b89d 	b.w	800a774 <_close_r>

0800a63a <__swbuf_r>:
 800a63a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63c:	460e      	mov	r6, r1
 800a63e:	4614      	mov	r4, r2
 800a640:	4605      	mov	r5, r0
 800a642:	b118      	cbz	r0, 800a64c <__swbuf_r+0x12>
 800a644:	6a03      	ldr	r3, [r0, #32]
 800a646:	b90b      	cbnz	r3, 800a64c <__swbuf_r+0x12>
 800a648:	f7ff feee 	bl	800a428 <__sinit>
 800a64c:	69a3      	ldr	r3, [r4, #24]
 800a64e:	60a3      	str	r3, [r4, #8]
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	071a      	lsls	r2, r3, #28
 800a654:	d501      	bpl.n	800a65a <__swbuf_r+0x20>
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	b943      	cbnz	r3, 800a66c <__swbuf_r+0x32>
 800a65a:	4621      	mov	r1, r4
 800a65c:	4628      	mov	r0, r5
 800a65e:	f000 f82b 	bl	800a6b8 <__swsetup_r>
 800a662:	b118      	cbz	r0, 800a66c <__swbuf_r+0x32>
 800a664:	f04f 37ff 	mov.w	r7, #4294967295
 800a668:	4638      	mov	r0, r7
 800a66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	b2f6      	uxtb	r6, r6
 800a670:	6922      	ldr	r2, [r4, #16]
 800a672:	4637      	mov	r7, r6
 800a674:	1a98      	subs	r0, r3, r2
 800a676:	6963      	ldr	r3, [r4, #20]
 800a678:	4283      	cmp	r3, r0
 800a67a:	dc05      	bgt.n	800a688 <__swbuf_r+0x4e>
 800a67c:	4621      	mov	r1, r4
 800a67e:	4628      	mov	r0, r5
 800a680:	f000 fea0 	bl	800b3c4 <_fflush_r>
 800a684:	2800      	cmp	r0, #0
 800a686:	d1ed      	bne.n	800a664 <__swbuf_r+0x2a>
 800a688:	68a3      	ldr	r3, [r4, #8]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	60a3      	str	r3, [r4, #8]
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	1c5a      	adds	r2, r3, #1
 800a692:	6022      	str	r2, [r4, #0]
 800a694:	701e      	strb	r6, [r3, #0]
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	6962      	ldr	r2, [r4, #20]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d004      	beq.n	800a6a8 <__swbuf_r+0x6e>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	07db      	lsls	r3, r3, #31
 800a6a2:	d5e1      	bpl.n	800a668 <__swbuf_r+0x2e>
 800a6a4:	2e0a      	cmp	r6, #10
 800a6a6:	d1df      	bne.n	800a668 <__swbuf_r+0x2e>
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f000 fe8a 	bl	800b3c4 <_fflush_r>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d0d9      	beq.n	800a668 <__swbuf_r+0x2e>
 800a6b4:	e7d6      	b.n	800a664 <__swbuf_r+0x2a>
	...

0800a6b8 <__swsetup_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4b29      	ldr	r3, [pc, #164]	@ (800a760 <__swsetup_r+0xa8>)
 800a6bc:	4605      	mov	r5, r0
 800a6be:	460c      	mov	r4, r1
 800a6c0:	6818      	ldr	r0, [r3, #0]
 800a6c2:	b118      	cbz	r0, 800a6cc <__swsetup_r+0x14>
 800a6c4:	6a03      	ldr	r3, [r0, #32]
 800a6c6:	b90b      	cbnz	r3, 800a6cc <__swsetup_r+0x14>
 800a6c8:	f7ff feae 	bl	800a428 <__sinit>
 800a6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d0:	0719      	lsls	r1, r3, #28
 800a6d2:	d422      	bmi.n	800a71a <__swsetup_r+0x62>
 800a6d4:	06da      	lsls	r2, r3, #27
 800a6d6:	d407      	bmi.n	800a6e8 <__swsetup_r+0x30>
 800a6d8:	2209      	movs	r2, #9
 800a6da:	602a      	str	r2, [r5, #0]
 800a6dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	e033      	b.n	800a750 <__swsetup_r+0x98>
 800a6e8:	0758      	lsls	r0, r3, #29
 800a6ea:	d512      	bpl.n	800a712 <__swsetup_r+0x5a>
 800a6ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6ee:	b141      	cbz	r1, 800a702 <__swsetup_r+0x4a>
 800a6f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6f4:	4299      	cmp	r1, r3
 800a6f6:	d002      	beq.n	800a6fe <__swsetup_r+0x46>
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f000 f8bb 	bl	800a874 <_free_r>
 800a6fe:	2300      	movs	r3, #0
 800a700:	6363      	str	r3, [r4, #52]	@ 0x34
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a708:	81a3      	strh	r3, [r4, #12]
 800a70a:	2300      	movs	r3, #0
 800a70c:	6063      	str	r3, [r4, #4]
 800a70e:	6923      	ldr	r3, [r4, #16]
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	f043 0308 	orr.w	r3, r3, #8
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	6923      	ldr	r3, [r4, #16]
 800a71c:	b94b      	cbnz	r3, 800a732 <__swsetup_r+0x7a>
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a728:	d003      	beq.n	800a732 <__swsetup_r+0x7a>
 800a72a:	4621      	mov	r1, r4
 800a72c:	4628      	mov	r0, r5
 800a72e:	f000 fe96 	bl	800b45e <__smakebuf_r>
 800a732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a736:	f013 0201 	ands.w	r2, r3, #1
 800a73a:	d00a      	beq.n	800a752 <__swsetup_r+0x9a>
 800a73c:	2200      	movs	r2, #0
 800a73e:	60a2      	str	r2, [r4, #8]
 800a740:	6962      	ldr	r2, [r4, #20]
 800a742:	4252      	negs	r2, r2
 800a744:	61a2      	str	r2, [r4, #24]
 800a746:	6922      	ldr	r2, [r4, #16]
 800a748:	b942      	cbnz	r2, 800a75c <__swsetup_r+0xa4>
 800a74a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a74e:	d1c5      	bne.n	800a6dc <__swsetup_r+0x24>
 800a750:	bd38      	pop	{r3, r4, r5, pc}
 800a752:	0799      	lsls	r1, r3, #30
 800a754:	bf58      	it	pl
 800a756:	6962      	ldrpl	r2, [r4, #20]
 800a758:	60a2      	str	r2, [r4, #8]
 800a75a:	e7f4      	b.n	800a746 <__swsetup_r+0x8e>
 800a75c:	2000      	movs	r0, #0
 800a75e:	e7f7      	b.n	800a750 <__swsetup_r+0x98>
 800a760:	20000034 	.word	0x20000034

0800a764 <memset>:
 800a764:	4402      	add	r2, r0
 800a766:	4603      	mov	r3, r0
 800a768:	4293      	cmp	r3, r2
 800a76a:	d100      	bne.n	800a76e <memset+0xa>
 800a76c:	4770      	bx	lr
 800a76e:	f803 1b01 	strb.w	r1, [r3], #1
 800a772:	e7f9      	b.n	800a768 <memset+0x4>

0800a774 <_close_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	2300      	movs	r3, #0
 800a778:	4d05      	ldr	r5, [pc, #20]	@ (800a790 <_close_r+0x1c>)
 800a77a:	4604      	mov	r4, r0
 800a77c:	4608      	mov	r0, r1
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	f7f6 fb0d 	bl	8000d9e <_close>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_close_r+0x1a>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_close_r+0x1a>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20000388 	.word	0x20000388

0800a794 <_lseek_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4604      	mov	r4, r0
 800a798:	4d06      	ldr	r5, [pc, #24]	@ (800a7b4 <_lseek_r+0x20>)
 800a79a:	4608      	mov	r0, r1
 800a79c:	4611      	mov	r1, r2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	602a      	str	r2, [r5, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f7f6 fb22 	bl	8000dec <_lseek>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d102      	bne.n	800a7b2 <_lseek_r+0x1e>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	b103      	cbz	r3, 800a7b2 <_lseek_r+0x1e>
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	20000388 	.word	0x20000388

0800a7b8 <_read_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4d06      	ldr	r5, [pc, #24]	@ (800a7d8 <_read_r+0x20>)
 800a7be:	4608      	mov	r0, r1
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	602a      	str	r2, [r5, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f7f6 fab0 	bl	8000d2c <_read>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_read_r+0x1e>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_read_r+0x1e>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20000388 	.word	0x20000388

0800a7dc <_write_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4d06      	ldr	r5, [pc, #24]	@ (800a7fc <_write_r+0x20>)
 800a7e2:	4608      	mov	r0, r1
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	602a      	str	r2, [r5, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f7f6 fabb 	bl	8000d66 <_write>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_write_r+0x1e>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_write_r+0x1e>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	20000388 	.word	0x20000388

0800a800 <__errno>:
 800a800:	4b01      	ldr	r3, [pc, #4]	@ (800a808 <__errno+0x8>)
 800a802:	6818      	ldr	r0, [r3, #0]
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	20000034 	.word	0x20000034

0800a80c <__libc_init_array>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	4d0d      	ldr	r5, [pc, #52]	@ (800a844 <__libc_init_array+0x38>)
 800a810:	2600      	movs	r6, #0
 800a812:	4c0d      	ldr	r4, [pc, #52]	@ (800a848 <__libc_init_array+0x3c>)
 800a814:	1b64      	subs	r4, r4, r5
 800a816:	10a4      	asrs	r4, r4, #2
 800a818:	42a6      	cmp	r6, r4
 800a81a:	d109      	bne.n	800a830 <__libc_init_array+0x24>
 800a81c:	4d0b      	ldr	r5, [pc, #44]	@ (800a84c <__libc_init_array+0x40>)
 800a81e:	2600      	movs	r6, #0
 800a820:	4c0b      	ldr	r4, [pc, #44]	@ (800a850 <__libc_init_array+0x44>)
 800a822:	f000 fee9 	bl	800b5f8 <_init>
 800a826:	1b64      	subs	r4, r4, r5
 800a828:	10a4      	asrs	r4, r4, #2
 800a82a:	42a6      	cmp	r6, r4
 800a82c:	d105      	bne.n	800a83a <__libc_init_array+0x2e>
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	f855 3b04 	ldr.w	r3, [r5], #4
 800a834:	3601      	adds	r6, #1
 800a836:	4798      	blx	r3
 800a838:	e7ee      	b.n	800a818 <__libc_init_array+0xc>
 800a83a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a83e:	3601      	adds	r6, #1
 800a840:	4798      	blx	r3
 800a842:	e7f2      	b.n	800a82a <__libc_init_array+0x1e>
 800a844:	0800b9c8 	.word	0x0800b9c8
 800a848:	0800b9c8 	.word	0x0800b9c8
 800a84c:	0800b9c8 	.word	0x0800b9c8
 800a850:	0800b9cc 	.word	0x0800b9cc

0800a854 <__retarget_lock_init_recursive>:
 800a854:	4770      	bx	lr

0800a856 <__retarget_lock_acquire_recursive>:
 800a856:	4770      	bx	lr

0800a858 <__retarget_lock_release_recursive>:
 800a858:	4770      	bx	lr

0800a85a <memcpy>:
 800a85a:	440a      	add	r2, r1
 800a85c:	1e43      	subs	r3, r0, #1
 800a85e:	4291      	cmp	r1, r2
 800a860:	d100      	bne.n	800a864 <memcpy+0xa>
 800a862:	4770      	bx	lr
 800a864:	b510      	push	{r4, lr}
 800a866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a86a:	4291      	cmp	r1, r2
 800a86c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a870:	d1f9      	bne.n	800a866 <memcpy+0xc>
 800a872:	bd10      	pop	{r4, pc}

0800a874 <_free_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4605      	mov	r5, r0
 800a878:	2900      	cmp	r1, #0
 800a87a:	d041      	beq.n	800a900 <_free_r+0x8c>
 800a87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a880:	1f0c      	subs	r4, r1, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	bfb8      	it	lt
 800a886:	18e4      	addlt	r4, r4, r3
 800a888:	f000 f8e0 	bl	800aa4c <__malloc_lock>
 800a88c:	4a1d      	ldr	r2, [pc, #116]	@ (800a904 <_free_r+0x90>)
 800a88e:	6813      	ldr	r3, [r2, #0]
 800a890:	b933      	cbnz	r3, 800a8a0 <_free_r+0x2c>
 800a892:	6063      	str	r3, [r4, #4]
 800a894:	6014      	str	r4, [r2, #0]
 800a896:	4628      	mov	r0, r5
 800a898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a89c:	f000 b8dc 	b.w	800aa58 <__malloc_unlock>
 800a8a0:	42a3      	cmp	r3, r4
 800a8a2:	d908      	bls.n	800a8b6 <_free_r+0x42>
 800a8a4:	6820      	ldr	r0, [r4, #0]
 800a8a6:	1821      	adds	r1, r4, r0
 800a8a8:	428b      	cmp	r3, r1
 800a8aa:	bf01      	itttt	eq
 800a8ac:	6819      	ldreq	r1, [r3, #0]
 800a8ae:	685b      	ldreq	r3, [r3, #4]
 800a8b0:	1809      	addeq	r1, r1, r0
 800a8b2:	6021      	streq	r1, [r4, #0]
 800a8b4:	e7ed      	b.n	800a892 <_free_r+0x1e>
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	b10b      	cbz	r3, 800a8c0 <_free_r+0x4c>
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	d9fa      	bls.n	800a8b6 <_free_r+0x42>
 800a8c0:	6811      	ldr	r1, [r2, #0]
 800a8c2:	1850      	adds	r0, r2, r1
 800a8c4:	42a0      	cmp	r0, r4
 800a8c6:	d10b      	bne.n	800a8e0 <_free_r+0x6c>
 800a8c8:	6820      	ldr	r0, [r4, #0]
 800a8ca:	4401      	add	r1, r0
 800a8cc:	1850      	adds	r0, r2, r1
 800a8ce:	6011      	str	r1, [r2, #0]
 800a8d0:	4283      	cmp	r3, r0
 800a8d2:	d1e0      	bne.n	800a896 <_free_r+0x22>
 800a8d4:	6818      	ldr	r0, [r3, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	4408      	add	r0, r1
 800a8da:	6053      	str	r3, [r2, #4]
 800a8dc:	6010      	str	r0, [r2, #0]
 800a8de:	e7da      	b.n	800a896 <_free_r+0x22>
 800a8e0:	d902      	bls.n	800a8e8 <_free_r+0x74>
 800a8e2:	230c      	movs	r3, #12
 800a8e4:	602b      	str	r3, [r5, #0]
 800a8e6:	e7d6      	b.n	800a896 <_free_r+0x22>
 800a8e8:	6820      	ldr	r0, [r4, #0]
 800a8ea:	1821      	adds	r1, r4, r0
 800a8ec:	428b      	cmp	r3, r1
 800a8ee:	bf02      	ittt	eq
 800a8f0:	6819      	ldreq	r1, [r3, #0]
 800a8f2:	685b      	ldreq	r3, [r3, #4]
 800a8f4:	1809      	addeq	r1, r1, r0
 800a8f6:	6063      	str	r3, [r4, #4]
 800a8f8:	bf08      	it	eq
 800a8fa:	6021      	streq	r1, [r4, #0]
 800a8fc:	6054      	str	r4, [r2, #4]
 800a8fe:	e7ca      	b.n	800a896 <_free_r+0x22>
 800a900:	bd38      	pop	{r3, r4, r5, pc}
 800a902:	bf00      	nop
 800a904:	20000394 	.word	0x20000394

0800a908 <sbrk_aligned>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	4e0f      	ldr	r6, [pc, #60]	@ (800a948 <sbrk_aligned+0x40>)
 800a90c:	460c      	mov	r4, r1
 800a90e:	4605      	mov	r5, r0
 800a910:	6831      	ldr	r1, [r6, #0]
 800a912:	b911      	cbnz	r1, 800a91a <sbrk_aligned+0x12>
 800a914:	f000 fe1c 	bl	800b550 <_sbrk_r>
 800a918:	6030      	str	r0, [r6, #0]
 800a91a:	4621      	mov	r1, r4
 800a91c:	4628      	mov	r0, r5
 800a91e:	f000 fe17 	bl	800b550 <_sbrk_r>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	d103      	bne.n	800a92e <sbrk_aligned+0x26>
 800a926:	f04f 34ff 	mov.w	r4, #4294967295
 800a92a:	4620      	mov	r0, r4
 800a92c:	bd70      	pop	{r4, r5, r6, pc}
 800a92e:	1cc4      	adds	r4, r0, #3
 800a930:	f024 0403 	bic.w	r4, r4, #3
 800a934:	42a0      	cmp	r0, r4
 800a936:	d0f8      	beq.n	800a92a <sbrk_aligned+0x22>
 800a938:	1a21      	subs	r1, r4, r0
 800a93a:	4628      	mov	r0, r5
 800a93c:	f000 fe08 	bl	800b550 <_sbrk_r>
 800a940:	3001      	adds	r0, #1
 800a942:	d1f2      	bne.n	800a92a <sbrk_aligned+0x22>
 800a944:	e7ef      	b.n	800a926 <sbrk_aligned+0x1e>
 800a946:	bf00      	nop
 800a948:	20000390 	.word	0x20000390

0800a94c <_malloc_r>:
 800a94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a950:	1ccd      	adds	r5, r1, #3
 800a952:	4606      	mov	r6, r0
 800a954:	f025 0503 	bic.w	r5, r5, #3
 800a958:	3508      	adds	r5, #8
 800a95a:	2d0c      	cmp	r5, #12
 800a95c:	bf38      	it	cc
 800a95e:	250c      	movcc	r5, #12
 800a960:	2d00      	cmp	r5, #0
 800a962:	db01      	blt.n	800a968 <_malloc_r+0x1c>
 800a964:	42a9      	cmp	r1, r5
 800a966:	d904      	bls.n	800a972 <_malloc_r+0x26>
 800a968:	230c      	movs	r3, #12
 800a96a:	6033      	str	r3, [r6, #0]
 800a96c:	2000      	movs	r0, #0
 800a96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa48 <_malloc_r+0xfc>
 800a976:	f000 f869 	bl	800aa4c <__malloc_lock>
 800a97a:	f8d8 3000 	ldr.w	r3, [r8]
 800a97e:	461c      	mov	r4, r3
 800a980:	bb44      	cbnz	r4, 800a9d4 <_malloc_r+0x88>
 800a982:	4629      	mov	r1, r5
 800a984:	4630      	mov	r0, r6
 800a986:	f7ff ffbf 	bl	800a908 <sbrk_aligned>
 800a98a:	1c43      	adds	r3, r0, #1
 800a98c:	4604      	mov	r4, r0
 800a98e:	d158      	bne.n	800aa42 <_malloc_r+0xf6>
 800a990:	f8d8 4000 	ldr.w	r4, [r8]
 800a994:	4627      	mov	r7, r4
 800a996:	2f00      	cmp	r7, #0
 800a998:	d143      	bne.n	800aa22 <_malloc_r+0xd6>
 800a99a:	2c00      	cmp	r4, #0
 800a99c:	d04b      	beq.n	800aa36 <_malloc_r+0xea>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	eb04 0903 	add.w	r9, r4, r3
 800a9a8:	f000 fdd2 	bl	800b550 <_sbrk_r>
 800a9ac:	4581      	cmp	r9, r0
 800a9ae:	d142      	bne.n	800aa36 <_malloc_r+0xea>
 800a9b0:	6821      	ldr	r1, [r4, #0]
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	1a6d      	subs	r5, r5, r1
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	f7ff ffa6 	bl	800a908 <sbrk_aligned>
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d03a      	beq.n	800aa36 <_malloc_r+0xea>
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	442b      	add	r3, r5
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	bb62      	cbnz	r2, 800aa28 <_malloc_r+0xdc>
 800a9ce:	f8c8 7000 	str.w	r7, [r8]
 800a9d2:	e00f      	b.n	800a9f4 <_malloc_r+0xa8>
 800a9d4:	6822      	ldr	r2, [r4, #0]
 800a9d6:	1b52      	subs	r2, r2, r5
 800a9d8:	d420      	bmi.n	800aa1c <_malloc_r+0xd0>
 800a9da:	2a0b      	cmp	r2, #11
 800a9dc:	d917      	bls.n	800aa0e <_malloc_r+0xc2>
 800a9de:	1961      	adds	r1, r4, r5
 800a9e0:	42a3      	cmp	r3, r4
 800a9e2:	6025      	str	r5, [r4, #0]
 800a9e4:	bf18      	it	ne
 800a9e6:	6059      	strne	r1, [r3, #4]
 800a9e8:	6863      	ldr	r3, [r4, #4]
 800a9ea:	bf08      	it	eq
 800a9ec:	f8c8 1000 	streq.w	r1, [r8]
 800a9f0:	5162      	str	r2, [r4, r5]
 800a9f2:	604b      	str	r3, [r1, #4]
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f000 f82f 	bl	800aa58 <__malloc_unlock>
 800a9fa:	f104 000b 	add.w	r0, r4, #11
 800a9fe:	1d23      	adds	r3, r4, #4
 800aa00:	f020 0007 	bic.w	r0, r0, #7
 800aa04:	1ac2      	subs	r2, r0, r3
 800aa06:	bf1c      	itt	ne
 800aa08:	1a1b      	subne	r3, r3, r0
 800aa0a:	50a3      	strne	r3, [r4, r2]
 800aa0c:	e7af      	b.n	800a96e <_malloc_r+0x22>
 800aa0e:	6862      	ldr	r2, [r4, #4]
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	bf0c      	ite	eq
 800aa14:	f8c8 2000 	streq.w	r2, [r8]
 800aa18:	605a      	strne	r2, [r3, #4]
 800aa1a:	e7eb      	b.n	800a9f4 <_malloc_r+0xa8>
 800aa1c:	4623      	mov	r3, r4
 800aa1e:	6864      	ldr	r4, [r4, #4]
 800aa20:	e7ae      	b.n	800a980 <_malloc_r+0x34>
 800aa22:	463c      	mov	r4, r7
 800aa24:	687f      	ldr	r7, [r7, #4]
 800aa26:	e7b6      	b.n	800a996 <_malloc_r+0x4a>
 800aa28:	461a      	mov	r2, r3
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	d1fb      	bne.n	800aa28 <_malloc_r+0xdc>
 800aa30:	2300      	movs	r3, #0
 800aa32:	6053      	str	r3, [r2, #4]
 800aa34:	e7de      	b.n	800a9f4 <_malloc_r+0xa8>
 800aa36:	230c      	movs	r3, #12
 800aa38:	4630      	mov	r0, r6
 800aa3a:	6033      	str	r3, [r6, #0]
 800aa3c:	f000 f80c 	bl	800aa58 <__malloc_unlock>
 800aa40:	e794      	b.n	800a96c <_malloc_r+0x20>
 800aa42:	6005      	str	r5, [r0, #0]
 800aa44:	e7d6      	b.n	800a9f4 <_malloc_r+0xa8>
 800aa46:	bf00      	nop
 800aa48:	20000394 	.word	0x20000394

0800aa4c <__malloc_lock>:
 800aa4c:	4801      	ldr	r0, [pc, #4]	@ (800aa54 <__malloc_lock+0x8>)
 800aa4e:	f7ff bf02 	b.w	800a856 <__retarget_lock_acquire_recursive>
 800aa52:	bf00      	nop
 800aa54:	2000038c 	.word	0x2000038c

0800aa58 <__malloc_unlock>:
 800aa58:	4801      	ldr	r0, [pc, #4]	@ (800aa60 <__malloc_unlock+0x8>)
 800aa5a:	f7ff befd 	b.w	800a858 <__retarget_lock_release_recursive>
 800aa5e:	bf00      	nop
 800aa60:	2000038c 	.word	0x2000038c

0800aa64 <__ssputs_r>:
 800aa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa68:	461f      	mov	r7, r3
 800aa6a:	688e      	ldr	r6, [r1, #8]
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	42be      	cmp	r6, r7
 800aa72:	4690      	mov	r8, r2
 800aa74:	680b      	ldr	r3, [r1, #0]
 800aa76:	d82d      	bhi.n	800aad4 <__ssputs_r+0x70>
 800aa78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa80:	d026      	beq.n	800aad0 <__ssputs_r+0x6c>
 800aa82:	6965      	ldr	r5, [r4, #20]
 800aa84:	6909      	ldr	r1, [r1, #16]
 800aa86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa8a:	eba3 0901 	sub.w	r9, r3, r1
 800aa8e:	1c7b      	adds	r3, r7, #1
 800aa90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa94:	444b      	add	r3, r9
 800aa96:	106d      	asrs	r5, r5, #1
 800aa98:	429d      	cmp	r5, r3
 800aa9a:	bf38      	it	cc
 800aa9c:	461d      	movcc	r5, r3
 800aa9e:	0553      	lsls	r3, r2, #21
 800aaa0:	d527      	bpl.n	800aaf2 <__ssputs_r+0x8e>
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f7ff ff52 	bl	800a94c <_malloc_r>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	b360      	cbz	r0, 800ab06 <__ssputs_r+0xa2>
 800aaac:	464a      	mov	r2, r9
 800aaae:	6921      	ldr	r1, [r4, #16]
 800aab0:	f7ff fed3 	bl	800a85a <memcpy>
 800aab4:	89a3      	ldrh	r3, [r4, #12]
 800aab6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aaba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aabe:	81a3      	strh	r3, [r4, #12]
 800aac0:	6126      	str	r6, [r4, #16]
 800aac2:	444e      	add	r6, r9
 800aac4:	6165      	str	r5, [r4, #20]
 800aac6:	eba5 0509 	sub.w	r5, r5, r9
 800aaca:	6026      	str	r6, [r4, #0]
 800aacc:	463e      	mov	r6, r7
 800aace:	60a5      	str	r5, [r4, #8]
 800aad0:	42be      	cmp	r6, r7
 800aad2:	d900      	bls.n	800aad6 <__ssputs_r+0x72>
 800aad4:	463e      	mov	r6, r7
 800aad6:	4632      	mov	r2, r6
 800aad8:	4641      	mov	r1, r8
 800aada:	6820      	ldr	r0, [r4, #0]
 800aadc:	f000 fcfb 	bl	800b4d6 <memmove>
 800aae0:	68a3      	ldr	r3, [r4, #8]
 800aae2:	2000      	movs	r0, #0
 800aae4:	1b9b      	subs	r3, r3, r6
 800aae6:	60a3      	str	r3, [r4, #8]
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	4433      	add	r3, r6
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf2:	462a      	mov	r2, r5
 800aaf4:	f000 fd4a 	bl	800b58c <_realloc_r>
 800aaf8:	4606      	mov	r6, r0
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d1e0      	bne.n	800aac0 <__ssputs_r+0x5c>
 800aafe:	6921      	ldr	r1, [r4, #16]
 800ab00:	4650      	mov	r0, sl
 800ab02:	f7ff feb7 	bl	800a874 <_free_r>
 800ab06:	230c      	movs	r3, #12
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0c:	f8ca 3000 	str.w	r3, [sl]
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab16:	81a3      	strh	r3, [r4, #12]
 800ab18:	e7e9      	b.n	800aaee <__ssputs_r+0x8a>
	...

0800ab1c <_svfiprintf_r>:
 800ab1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	4698      	mov	r8, r3
 800ab22:	898b      	ldrh	r3, [r1, #12]
 800ab24:	b09d      	sub	sp, #116	@ 0x74
 800ab26:	4607      	mov	r7, r0
 800ab28:	061b      	lsls	r3, r3, #24
 800ab2a:	460d      	mov	r5, r1
 800ab2c:	4614      	mov	r4, r2
 800ab2e:	d510      	bpl.n	800ab52 <_svfiprintf_r+0x36>
 800ab30:	690b      	ldr	r3, [r1, #16]
 800ab32:	b973      	cbnz	r3, 800ab52 <_svfiprintf_r+0x36>
 800ab34:	2140      	movs	r1, #64	@ 0x40
 800ab36:	f7ff ff09 	bl	800a94c <_malloc_r>
 800ab3a:	6028      	str	r0, [r5, #0]
 800ab3c:	6128      	str	r0, [r5, #16]
 800ab3e:	b930      	cbnz	r0, 800ab4e <_svfiprintf_r+0x32>
 800ab40:	230c      	movs	r3, #12
 800ab42:	603b      	str	r3, [r7, #0]
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295
 800ab48:	b01d      	add	sp, #116	@ 0x74
 800ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4e:	2340      	movs	r3, #64	@ 0x40
 800ab50:	616b      	str	r3, [r5, #20]
 800ab52:	2300      	movs	r3, #0
 800ab54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab58:	f04f 0901 	mov.w	r9, #1
 800ab5c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ad00 <_svfiprintf_r+0x1e4>
 800ab60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab62:	2320      	movs	r3, #32
 800ab64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab68:	2330      	movs	r3, #48	@ 0x30
 800ab6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab6e:	4623      	mov	r3, r4
 800ab70:	469a      	mov	sl, r3
 800ab72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab76:	b10a      	cbz	r2, 800ab7c <_svfiprintf_r+0x60>
 800ab78:	2a25      	cmp	r2, #37	@ 0x25
 800ab7a:	d1f9      	bne.n	800ab70 <_svfiprintf_r+0x54>
 800ab7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab80:	d00b      	beq.n	800ab9a <_svfiprintf_r+0x7e>
 800ab82:	465b      	mov	r3, fp
 800ab84:	4622      	mov	r2, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	4638      	mov	r0, r7
 800ab8a:	f7ff ff6b 	bl	800aa64 <__ssputs_r>
 800ab8e:	3001      	adds	r0, #1
 800ab90:	f000 80a7 	beq.w	800ace2 <_svfiprintf_r+0x1c6>
 800ab94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab96:	445a      	add	r2, fp
 800ab98:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 809f 	beq.w	800ace2 <_svfiprintf_r+0x1c6>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f04f 32ff 	mov.w	r2, #4294967295
 800abaa:	f10a 0a01 	add.w	sl, sl, #1
 800abae:	9304      	str	r3, [sp, #16]
 800abb0:	9307      	str	r3, [sp, #28]
 800abb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800abb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abbc:	4654      	mov	r4, sl
 800abbe:	2205      	movs	r2, #5
 800abc0:	484f      	ldr	r0, [pc, #316]	@ (800ad00 <_svfiprintf_r+0x1e4>)
 800abc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc6:	f000 fcd3 	bl	800b570 <memchr>
 800abca:	9a04      	ldr	r2, [sp, #16]
 800abcc:	b9d8      	cbnz	r0, 800ac06 <_svfiprintf_r+0xea>
 800abce:	06d0      	lsls	r0, r2, #27
 800abd0:	bf44      	itt	mi
 800abd2:	2320      	movmi	r3, #32
 800abd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abd8:	0711      	lsls	r1, r2, #28
 800abda:	bf44      	itt	mi
 800abdc:	232b      	movmi	r3, #43	@ 0x2b
 800abde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abe2:	f89a 3000 	ldrb.w	r3, [sl]
 800abe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abe8:	d015      	beq.n	800ac16 <_svfiprintf_r+0xfa>
 800abea:	9a07      	ldr	r2, [sp, #28]
 800abec:	4654      	mov	r4, sl
 800abee:	2000      	movs	r0, #0
 800abf0:	f04f 0c0a 	mov.w	ip, #10
 800abf4:	4621      	mov	r1, r4
 800abf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abfa:	3b30      	subs	r3, #48	@ 0x30
 800abfc:	2b09      	cmp	r3, #9
 800abfe:	d94b      	bls.n	800ac98 <_svfiprintf_r+0x17c>
 800ac00:	b1b0      	cbz	r0, 800ac30 <_svfiprintf_r+0x114>
 800ac02:	9207      	str	r2, [sp, #28]
 800ac04:	e014      	b.n	800ac30 <_svfiprintf_r+0x114>
 800ac06:	eba0 0308 	sub.w	r3, r0, r8
 800ac0a:	46a2      	mov	sl, r4
 800ac0c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac10:	4313      	orrs	r3, r2
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	e7d2      	b.n	800abbc <_svfiprintf_r+0xa0>
 800ac16:	9b03      	ldr	r3, [sp, #12]
 800ac18:	1d19      	adds	r1, r3, #4
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	9103      	str	r1, [sp, #12]
 800ac20:	bfbb      	ittet	lt
 800ac22:	425b      	neglt	r3, r3
 800ac24:	f042 0202 	orrlt.w	r2, r2, #2
 800ac28:	9307      	strge	r3, [sp, #28]
 800ac2a:	9307      	strlt	r3, [sp, #28]
 800ac2c:	bfb8      	it	lt
 800ac2e:	9204      	strlt	r2, [sp, #16]
 800ac30:	7823      	ldrb	r3, [r4, #0]
 800ac32:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac34:	d10a      	bne.n	800ac4c <_svfiprintf_r+0x130>
 800ac36:	7863      	ldrb	r3, [r4, #1]
 800ac38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac3a:	d132      	bne.n	800aca2 <_svfiprintf_r+0x186>
 800ac3c:	9b03      	ldr	r3, [sp, #12]
 800ac3e:	3402      	adds	r4, #2
 800ac40:	1d1a      	adds	r2, r3, #4
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac48:	9203      	str	r2, [sp, #12]
 800ac4a:	9305      	str	r3, [sp, #20]
 800ac4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad10 <_svfiprintf_r+0x1f4>
 800ac50:	2203      	movs	r2, #3
 800ac52:	7821      	ldrb	r1, [r4, #0]
 800ac54:	4650      	mov	r0, sl
 800ac56:	f000 fc8b 	bl	800b570 <memchr>
 800ac5a:	b138      	cbz	r0, 800ac6c <_svfiprintf_r+0x150>
 800ac5c:	eba0 000a 	sub.w	r0, r0, sl
 800ac60:	2240      	movs	r2, #64	@ 0x40
 800ac62:	9b04      	ldr	r3, [sp, #16]
 800ac64:	3401      	adds	r4, #1
 800ac66:	4082      	lsls	r2, r0
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	9304      	str	r3, [sp, #16]
 800ac6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac70:	2206      	movs	r2, #6
 800ac72:	4824      	ldr	r0, [pc, #144]	@ (800ad04 <_svfiprintf_r+0x1e8>)
 800ac74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac78:	f000 fc7a 	bl	800b570 <memchr>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d036      	beq.n	800acee <_svfiprintf_r+0x1d2>
 800ac80:	4b21      	ldr	r3, [pc, #132]	@ (800ad08 <_svfiprintf_r+0x1ec>)
 800ac82:	bb1b      	cbnz	r3, 800accc <_svfiprintf_r+0x1b0>
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	3307      	adds	r3, #7
 800ac88:	f023 0307 	bic.w	r3, r3, #7
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	9303      	str	r3, [sp, #12]
 800ac90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac92:	4433      	add	r3, r6
 800ac94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac96:	e76a      	b.n	800ab6e <_svfiprintf_r+0x52>
 800ac98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	2001      	movs	r0, #1
 800aca0:	e7a8      	b.n	800abf4 <_svfiprintf_r+0xd8>
 800aca2:	2300      	movs	r3, #0
 800aca4:	3401      	adds	r4, #1
 800aca6:	f04f 0c0a 	mov.w	ip, #10
 800acaa:	4619      	mov	r1, r3
 800acac:	9305      	str	r3, [sp, #20]
 800acae:	4620      	mov	r0, r4
 800acb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb4:	3a30      	subs	r2, #48	@ 0x30
 800acb6:	2a09      	cmp	r2, #9
 800acb8:	d903      	bls.n	800acc2 <_svfiprintf_r+0x1a6>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0c6      	beq.n	800ac4c <_svfiprintf_r+0x130>
 800acbe:	9105      	str	r1, [sp, #20]
 800acc0:	e7c4      	b.n	800ac4c <_svfiprintf_r+0x130>
 800acc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acc6:	4604      	mov	r4, r0
 800acc8:	2301      	movs	r3, #1
 800acca:	e7f0      	b.n	800acae <_svfiprintf_r+0x192>
 800accc:	ab03      	add	r3, sp, #12
 800acce:	462a      	mov	r2, r5
 800acd0:	a904      	add	r1, sp, #16
 800acd2:	4638      	mov	r0, r7
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad0c <_svfiprintf_r+0x1f0>)
 800acd8:	f3af 8000 	nop.w
 800acdc:	1c42      	adds	r2, r0, #1
 800acde:	4606      	mov	r6, r0
 800ace0:	d1d6      	bne.n	800ac90 <_svfiprintf_r+0x174>
 800ace2:	89ab      	ldrh	r3, [r5, #12]
 800ace4:	065b      	lsls	r3, r3, #25
 800ace6:	f53f af2d 	bmi.w	800ab44 <_svfiprintf_r+0x28>
 800acea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acec:	e72c      	b.n	800ab48 <_svfiprintf_r+0x2c>
 800acee:	ab03      	add	r3, sp, #12
 800acf0:	462a      	mov	r2, r5
 800acf2:	a904      	add	r1, sp, #16
 800acf4:	4638      	mov	r0, r7
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	4b04      	ldr	r3, [pc, #16]	@ (800ad0c <_svfiprintf_r+0x1f0>)
 800acfa:	f000 f9bf 	bl	800b07c <_printf_i>
 800acfe:	e7ed      	b.n	800acdc <_svfiprintf_r+0x1c0>
 800ad00:	0800b98c 	.word	0x0800b98c
 800ad04:	0800b996 	.word	0x0800b996
 800ad08:	00000000 	.word	0x00000000
 800ad0c:	0800aa65 	.word	0x0800aa65
 800ad10:	0800b992 	.word	0x0800b992

0800ad14 <__sfputc_r>:
 800ad14:	6893      	ldr	r3, [r2, #8]
 800ad16:	3b01      	subs	r3, #1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	6093      	str	r3, [r2, #8]
 800ad1c:	b410      	push	{r4}
 800ad1e:	da08      	bge.n	800ad32 <__sfputc_r+0x1e>
 800ad20:	6994      	ldr	r4, [r2, #24]
 800ad22:	42a3      	cmp	r3, r4
 800ad24:	db01      	blt.n	800ad2a <__sfputc_r+0x16>
 800ad26:	290a      	cmp	r1, #10
 800ad28:	d103      	bne.n	800ad32 <__sfputc_r+0x1e>
 800ad2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad2e:	f7ff bc84 	b.w	800a63a <__swbuf_r>
 800ad32:	6813      	ldr	r3, [r2, #0]
 800ad34:	1c58      	adds	r0, r3, #1
 800ad36:	6010      	str	r0, [r2, #0]
 800ad38:	4608      	mov	r0, r1
 800ad3a:	7019      	strb	r1, [r3, #0]
 800ad3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <__sfputs_r>:
 800ad42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad44:	4606      	mov	r6, r0
 800ad46:	460f      	mov	r7, r1
 800ad48:	4614      	mov	r4, r2
 800ad4a:	18d5      	adds	r5, r2, r3
 800ad4c:	42ac      	cmp	r4, r5
 800ad4e:	d101      	bne.n	800ad54 <__sfputs_r+0x12>
 800ad50:	2000      	movs	r0, #0
 800ad52:	e007      	b.n	800ad64 <__sfputs_r+0x22>
 800ad54:	463a      	mov	r2, r7
 800ad56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f7ff ffda 	bl	800ad14 <__sfputc_r>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d1f3      	bne.n	800ad4c <__sfputs_r+0xa>
 800ad64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad68 <_vfiprintf_r>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	460d      	mov	r5, r1
 800ad6e:	b09d      	sub	sp, #116	@ 0x74
 800ad70:	4614      	mov	r4, r2
 800ad72:	4698      	mov	r8, r3
 800ad74:	4606      	mov	r6, r0
 800ad76:	b118      	cbz	r0, 800ad80 <_vfiprintf_r+0x18>
 800ad78:	6a03      	ldr	r3, [r0, #32]
 800ad7a:	b90b      	cbnz	r3, 800ad80 <_vfiprintf_r+0x18>
 800ad7c:	f7ff fb54 	bl	800a428 <__sinit>
 800ad80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad82:	07d9      	lsls	r1, r3, #31
 800ad84:	d405      	bmi.n	800ad92 <_vfiprintf_r+0x2a>
 800ad86:	89ab      	ldrh	r3, [r5, #12]
 800ad88:	059a      	lsls	r2, r3, #22
 800ad8a:	d402      	bmi.n	800ad92 <_vfiprintf_r+0x2a>
 800ad8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad8e:	f7ff fd62 	bl	800a856 <__retarget_lock_acquire_recursive>
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	071b      	lsls	r3, r3, #28
 800ad96:	d501      	bpl.n	800ad9c <_vfiprintf_r+0x34>
 800ad98:	692b      	ldr	r3, [r5, #16]
 800ad9a:	b99b      	cbnz	r3, 800adc4 <_vfiprintf_r+0x5c>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f7ff fc8a 	bl	800a6b8 <__swsetup_r>
 800ada4:	b170      	cbz	r0, 800adc4 <_vfiprintf_r+0x5c>
 800ada6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ada8:	07dc      	lsls	r4, r3, #31
 800adaa:	d504      	bpl.n	800adb6 <_vfiprintf_r+0x4e>
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	b01d      	add	sp, #116	@ 0x74
 800adb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb6:	89ab      	ldrh	r3, [r5, #12]
 800adb8:	0598      	lsls	r0, r3, #22
 800adba:	d4f7      	bmi.n	800adac <_vfiprintf_r+0x44>
 800adbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adbe:	f7ff fd4b 	bl	800a858 <__retarget_lock_release_recursive>
 800adc2:	e7f3      	b.n	800adac <_vfiprintf_r+0x44>
 800adc4:	2300      	movs	r3, #0
 800adc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800adca:	f04f 0901 	mov.w	r9, #1
 800adce:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800af84 <_vfiprintf_r+0x21c>
 800add2:	9309      	str	r3, [sp, #36]	@ 0x24
 800add4:	2320      	movs	r3, #32
 800add6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adda:	2330      	movs	r3, #48	@ 0x30
 800addc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ade0:	4623      	mov	r3, r4
 800ade2:	469a      	mov	sl, r3
 800ade4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ade8:	b10a      	cbz	r2, 800adee <_vfiprintf_r+0x86>
 800adea:	2a25      	cmp	r2, #37	@ 0x25
 800adec:	d1f9      	bne.n	800ade2 <_vfiprintf_r+0x7a>
 800adee:	ebba 0b04 	subs.w	fp, sl, r4
 800adf2:	d00b      	beq.n	800ae0c <_vfiprintf_r+0xa4>
 800adf4:	465b      	mov	r3, fp
 800adf6:	4622      	mov	r2, r4
 800adf8:	4629      	mov	r1, r5
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff ffa1 	bl	800ad42 <__sfputs_r>
 800ae00:	3001      	adds	r0, #1
 800ae02:	f000 80a7 	beq.w	800af54 <_vfiprintf_r+0x1ec>
 800ae06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae08:	445a      	add	r2, fp
 800ae0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 809f 	beq.w	800af54 <_vfiprintf_r+0x1ec>
 800ae16:	2300      	movs	r3, #0
 800ae18:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1c:	f10a 0a01 	add.w	sl, sl, #1
 800ae20:	9304      	str	r3, [sp, #16]
 800ae22:	9307      	str	r3, [sp, #28]
 800ae24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae28:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae2e:	4654      	mov	r4, sl
 800ae30:	2205      	movs	r2, #5
 800ae32:	4854      	ldr	r0, [pc, #336]	@ (800af84 <_vfiprintf_r+0x21c>)
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	f000 fb9a 	bl	800b570 <memchr>
 800ae3c:	9a04      	ldr	r2, [sp, #16]
 800ae3e:	b9d8      	cbnz	r0, 800ae78 <_vfiprintf_r+0x110>
 800ae40:	06d1      	lsls	r1, r2, #27
 800ae42:	bf44      	itt	mi
 800ae44:	2320      	movmi	r3, #32
 800ae46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae4a:	0713      	lsls	r3, r2, #28
 800ae4c:	bf44      	itt	mi
 800ae4e:	232b      	movmi	r3, #43	@ 0x2b
 800ae50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae54:	f89a 3000 	ldrb.w	r3, [sl]
 800ae58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae5a:	d015      	beq.n	800ae88 <_vfiprintf_r+0x120>
 800ae5c:	9a07      	ldr	r2, [sp, #28]
 800ae5e:	4654      	mov	r4, sl
 800ae60:	2000      	movs	r0, #0
 800ae62:	f04f 0c0a 	mov.w	ip, #10
 800ae66:	4621      	mov	r1, r4
 800ae68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae6c:	3b30      	subs	r3, #48	@ 0x30
 800ae6e:	2b09      	cmp	r3, #9
 800ae70:	d94b      	bls.n	800af0a <_vfiprintf_r+0x1a2>
 800ae72:	b1b0      	cbz	r0, 800aea2 <_vfiprintf_r+0x13a>
 800ae74:	9207      	str	r2, [sp, #28]
 800ae76:	e014      	b.n	800aea2 <_vfiprintf_r+0x13a>
 800ae78:	eba0 0308 	sub.w	r3, r0, r8
 800ae7c:	46a2      	mov	sl, r4
 800ae7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae82:	4313      	orrs	r3, r2
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	e7d2      	b.n	800ae2e <_vfiprintf_r+0xc6>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	1d19      	adds	r1, r3, #4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	9103      	str	r1, [sp, #12]
 800ae92:	bfbb      	ittet	lt
 800ae94:	425b      	neglt	r3, r3
 800ae96:	f042 0202 	orrlt.w	r2, r2, #2
 800ae9a:	9307      	strge	r3, [sp, #28]
 800ae9c:	9307      	strlt	r3, [sp, #28]
 800ae9e:	bfb8      	it	lt
 800aea0:	9204      	strlt	r2, [sp, #16]
 800aea2:	7823      	ldrb	r3, [r4, #0]
 800aea4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aea6:	d10a      	bne.n	800aebe <_vfiprintf_r+0x156>
 800aea8:	7863      	ldrb	r3, [r4, #1]
 800aeaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeac:	d132      	bne.n	800af14 <_vfiprintf_r+0x1ac>
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	3402      	adds	r4, #2
 800aeb2:	1d1a      	adds	r2, r3, #4
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeba:	9203      	str	r2, [sp, #12]
 800aebc:	9305      	str	r3, [sp, #20]
 800aebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af94 <_vfiprintf_r+0x22c>
 800aec2:	2203      	movs	r2, #3
 800aec4:	7821      	ldrb	r1, [r4, #0]
 800aec6:	4650      	mov	r0, sl
 800aec8:	f000 fb52 	bl	800b570 <memchr>
 800aecc:	b138      	cbz	r0, 800aede <_vfiprintf_r+0x176>
 800aece:	eba0 000a 	sub.w	r0, r0, sl
 800aed2:	2240      	movs	r2, #64	@ 0x40
 800aed4:	9b04      	ldr	r3, [sp, #16]
 800aed6:	3401      	adds	r4, #1
 800aed8:	4082      	lsls	r2, r0
 800aeda:	4313      	orrs	r3, r2
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee2:	2206      	movs	r2, #6
 800aee4:	4828      	ldr	r0, [pc, #160]	@ (800af88 <_vfiprintf_r+0x220>)
 800aee6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aeea:	f000 fb41 	bl	800b570 <memchr>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d03f      	beq.n	800af72 <_vfiprintf_r+0x20a>
 800aef2:	4b26      	ldr	r3, [pc, #152]	@ (800af8c <_vfiprintf_r+0x224>)
 800aef4:	bb1b      	cbnz	r3, 800af3e <_vfiprintf_r+0x1d6>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	3307      	adds	r3, #7
 800aefa:	f023 0307 	bic.w	r3, r3, #7
 800aefe:	3308      	adds	r3, #8
 800af00:	9303      	str	r3, [sp, #12]
 800af02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af04:	443b      	add	r3, r7
 800af06:	9309      	str	r3, [sp, #36]	@ 0x24
 800af08:	e76a      	b.n	800ade0 <_vfiprintf_r+0x78>
 800af0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af0e:	460c      	mov	r4, r1
 800af10:	2001      	movs	r0, #1
 800af12:	e7a8      	b.n	800ae66 <_vfiprintf_r+0xfe>
 800af14:	2300      	movs	r3, #0
 800af16:	3401      	adds	r4, #1
 800af18:	f04f 0c0a 	mov.w	ip, #10
 800af1c:	4619      	mov	r1, r3
 800af1e:	9305      	str	r3, [sp, #20]
 800af20:	4620      	mov	r0, r4
 800af22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af26:	3a30      	subs	r2, #48	@ 0x30
 800af28:	2a09      	cmp	r2, #9
 800af2a:	d903      	bls.n	800af34 <_vfiprintf_r+0x1cc>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0c6      	beq.n	800aebe <_vfiprintf_r+0x156>
 800af30:	9105      	str	r1, [sp, #20]
 800af32:	e7c4      	b.n	800aebe <_vfiprintf_r+0x156>
 800af34:	fb0c 2101 	mla	r1, ip, r1, r2
 800af38:	4604      	mov	r4, r0
 800af3a:	2301      	movs	r3, #1
 800af3c:	e7f0      	b.n	800af20 <_vfiprintf_r+0x1b8>
 800af3e:	ab03      	add	r3, sp, #12
 800af40:	462a      	mov	r2, r5
 800af42:	a904      	add	r1, sp, #16
 800af44:	4630      	mov	r0, r6
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	4b11      	ldr	r3, [pc, #68]	@ (800af90 <_vfiprintf_r+0x228>)
 800af4a:	f3af 8000 	nop.w
 800af4e:	4607      	mov	r7, r0
 800af50:	1c78      	adds	r0, r7, #1
 800af52:	d1d6      	bne.n	800af02 <_vfiprintf_r+0x19a>
 800af54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af56:	07d9      	lsls	r1, r3, #31
 800af58:	d405      	bmi.n	800af66 <_vfiprintf_r+0x1fe>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	059a      	lsls	r2, r3, #22
 800af5e:	d402      	bmi.n	800af66 <_vfiprintf_r+0x1fe>
 800af60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af62:	f7ff fc79 	bl	800a858 <__retarget_lock_release_recursive>
 800af66:	89ab      	ldrh	r3, [r5, #12]
 800af68:	065b      	lsls	r3, r3, #25
 800af6a:	f53f af1f 	bmi.w	800adac <_vfiprintf_r+0x44>
 800af6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af70:	e71e      	b.n	800adb0 <_vfiprintf_r+0x48>
 800af72:	ab03      	add	r3, sp, #12
 800af74:	462a      	mov	r2, r5
 800af76:	a904      	add	r1, sp, #16
 800af78:	4630      	mov	r0, r6
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	4b04      	ldr	r3, [pc, #16]	@ (800af90 <_vfiprintf_r+0x228>)
 800af7e:	f000 f87d 	bl	800b07c <_printf_i>
 800af82:	e7e4      	b.n	800af4e <_vfiprintf_r+0x1e6>
 800af84:	0800b98c 	.word	0x0800b98c
 800af88:	0800b996 	.word	0x0800b996
 800af8c:	00000000 	.word	0x00000000
 800af90:	0800ad43 	.word	0x0800ad43
 800af94:	0800b992 	.word	0x0800b992

0800af98 <_printf_common>:
 800af98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af9c:	4616      	mov	r6, r2
 800af9e:	4698      	mov	r8, r3
 800afa0:	688a      	ldr	r2, [r1, #8]
 800afa2:	4607      	mov	r7, r0
 800afa4:	690b      	ldr	r3, [r1, #16]
 800afa6:	460c      	mov	r4, r1
 800afa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afac:	4293      	cmp	r3, r2
 800afae:	bfb8      	it	lt
 800afb0:	4613      	movlt	r3, r2
 800afb2:	6033      	str	r3, [r6, #0]
 800afb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afb8:	b10a      	cbz	r2, 800afbe <_printf_common+0x26>
 800afba:	3301      	adds	r3, #1
 800afbc:	6033      	str	r3, [r6, #0]
 800afbe:	6823      	ldr	r3, [r4, #0]
 800afc0:	0699      	lsls	r1, r3, #26
 800afc2:	bf42      	ittt	mi
 800afc4:	6833      	ldrmi	r3, [r6, #0]
 800afc6:	3302      	addmi	r3, #2
 800afc8:	6033      	strmi	r3, [r6, #0]
 800afca:	6825      	ldr	r5, [r4, #0]
 800afcc:	f015 0506 	ands.w	r5, r5, #6
 800afd0:	d106      	bne.n	800afe0 <_printf_common+0x48>
 800afd2:	f104 0a19 	add.w	sl, r4, #25
 800afd6:	68e3      	ldr	r3, [r4, #12]
 800afd8:	6832      	ldr	r2, [r6, #0]
 800afda:	1a9b      	subs	r3, r3, r2
 800afdc:	42ab      	cmp	r3, r5
 800afde:	dc2b      	bgt.n	800b038 <_printf_common+0xa0>
 800afe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afe4:	6822      	ldr	r2, [r4, #0]
 800afe6:	3b00      	subs	r3, #0
 800afe8:	bf18      	it	ne
 800afea:	2301      	movne	r3, #1
 800afec:	0692      	lsls	r2, r2, #26
 800afee:	d430      	bmi.n	800b052 <_printf_common+0xba>
 800aff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aff4:	4641      	mov	r1, r8
 800aff6:	4638      	mov	r0, r7
 800aff8:	47c8      	blx	r9
 800affa:	3001      	adds	r0, #1
 800affc:	d023      	beq.n	800b046 <_printf_common+0xae>
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	341a      	adds	r4, #26
 800b002:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b006:	f003 0306 	and.w	r3, r3, #6
 800b00a:	2b04      	cmp	r3, #4
 800b00c:	bf0a      	itet	eq
 800b00e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b012:	2500      	movne	r5, #0
 800b014:	6833      	ldreq	r3, [r6, #0]
 800b016:	f04f 0600 	mov.w	r6, #0
 800b01a:	bf08      	it	eq
 800b01c:	1aed      	subeq	r5, r5, r3
 800b01e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b022:	bf08      	it	eq
 800b024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b028:	4293      	cmp	r3, r2
 800b02a:	bfc4      	itt	gt
 800b02c:	1a9b      	subgt	r3, r3, r2
 800b02e:	18ed      	addgt	r5, r5, r3
 800b030:	42b5      	cmp	r5, r6
 800b032:	d11a      	bne.n	800b06a <_printf_common+0xd2>
 800b034:	2000      	movs	r0, #0
 800b036:	e008      	b.n	800b04a <_printf_common+0xb2>
 800b038:	2301      	movs	r3, #1
 800b03a:	4652      	mov	r2, sl
 800b03c:	4641      	mov	r1, r8
 800b03e:	4638      	mov	r0, r7
 800b040:	47c8      	blx	r9
 800b042:	3001      	adds	r0, #1
 800b044:	d103      	bne.n	800b04e <_printf_common+0xb6>
 800b046:	f04f 30ff 	mov.w	r0, #4294967295
 800b04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04e:	3501      	adds	r5, #1
 800b050:	e7c1      	b.n	800afd6 <_printf_common+0x3e>
 800b052:	18e1      	adds	r1, r4, r3
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	2030      	movs	r0, #48	@ 0x30
 800b058:	3302      	adds	r3, #2
 800b05a:	4422      	add	r2, r4
 800b05c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b060:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b064:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b068:	e7c2      	b.n	800aff0 <_printf_common+0x58>
 800b06a:	2301      	movs	r3, #1
 800b06c:	4622      	mov	r2, r4
 800b06e:	4641      	mov	r1, r8
 800b070:	4638      	mov	r0, r7
 800b072:	47c8      	blx	r9
 800b074:	3001      	adds	r0, #1
 800b076:	d0e6      	beq.n	800b046 <_printf_common+0xae>
 800b078:	3601      	adds	r6, #1
 800b07a:	e7d9      	b.n	800b030 <_printf_common+0x98>

0800b07c <_printf_i>:
 800b07c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b080:	7e0f      	ldrb	r7, [r1, #24]
 800b082:	4691      	mov	r9, r2
 800b084:	4680      	mov	r8, r0
 800b086:	460c      	mov	r4, r1
 800b088:	2f78      	cmp	r7, #120	@ 0x78
 800b08a:	469a      	mov	sl, r3
 800b08c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b08e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b092:	d807      	bhi.n	800b0a4 <_printf_i+0x28>
 800b094:	2f62      	cmp	r7, #98	@ 0x62
 800b096:	d80a      	bhi.n	800b0ae <_printf_i+0x32>
 800b098:	2f00      	cmp	r7, #0
 800b09a:	f000 80d2 	beq.w	800b242 <_printf_i+0x1c6>
 800b09e:	2f58      	cmp	r7, #88	@ 0x58
 800b0a0:	f000 80b9 	beq.w	800b216 <_printf_i+0x19a>
 800b0a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b0ac:	e03a      	b.n	800b124 <_printf_i+0xa8>
 800b0ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b0b2:	2b15      	cmp	r3, #21
 800b0b4:	d8f6      	bhi.n	800b0a4 <_printf_i+0x28>
 800b0b6:	a101      	add	r1, pc, #4	@ (adr r1, 800b0bc <_printf_i+0x40>)
 800b0b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0bc:	0800b115 	.word	0x0800b115
 800b0c0:	0800b129 	.word	0x0800b129
 800b0c4:	0800b0a5 	.word	0x0800b0a5
 800b0c8:	0800b0a5 	.word	0x0800b0a5
 800b0cc:	0800b0a5 	.word	0x0800b0a5
 800b0d0:	0800b0a5 	.word	0x0800b0a5
 800b0d4:	0800b129 	.word	0x0800b129
 800b0d8:	0800b0a5 	.word	0x0800b0a5
 800b0dc:	0800b0a5 	.word	0x0800b0a5
 800b0e0:	0800b0a5 	.word	0x0800b0a5
 800b0e4:	0800b0a5 	.word	0x0800b0a5
 800b0e8:	0800b229 	.word	0x0800b229
 800b0ec:	0800b153 	.word	0x0800b153
 800b0f0:	0800b1e3 	.word	0x0800b1e3
 800b0f4:	0800b0a5 	.word	0x0800b0a5
 800b0f8:	0800b0a5 	.word	0x0800b0a5
 800b0fc:	0800b24b 	.word	0x0800b24b
 800b100:	0800b0a5 	.word	0x0800b0a5
 800b104:	0800b153 	.word	0x0800b153
 800b108:	0800b0a5 	.word	0x0800b0a5
 800b10c:	0800b0a5 	.word	0x0800b0a5
 800b110:	0800b1eb 	.word	0x0800b1eb
 800b114:	6833      	ldr	r3, [r6, #0]
 800b116:	1d1a      	adds	r2, r3, #4
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6032      	str	r2, [r6, #0]
 800b11c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b120:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b124:	2301      	movs	r3, #1
 800b126:	e09d      	b.n	800b264 <_printf_i+0x1e8>
 800b128:	6833      	ldr	r3, [r6, #0]
 800b12a:	6820      	ldr	r0, [r4, #0]
 800b12c:	1d19      	adds	r1, r3, #4
 800b12e:	6031      	str	r1, [r6, #0]
 800b130:	0606      	lsls	r6, r0, #24
 800b132:	d501      	bpl.n	800b138 <_printf_i+0xbc>
 800b134:	681d      	ldr	r5, [r3, #0]
 800b136:	e003      	b.n	800b140 <_printf_i+0xc4>
 800b138:	0645      	lsls	r5, r0, #25
 800b13a:	d5fb      	bpl.n	800b134 <_printf_i+0xb8>
 800b13c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b140:	2d00      	cmp	r5, #0
 800b142:	da03      	bge.n	800b14c <_printf_i+0xd0>
 800b144:	232d      	movs	r3, #45	@ 0x2d
 800b146:	426d      	negs	r5, r5
 800b148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b14c:	4859      	ldr	r0, [pc, #356]	@ (800b2b4 <_printf_i+0x238>)
 800b14e:	230a      	movs	r3, #10
 800b150:	e011      	b.n	800b176 <_printf_i+0xfa>
 800b152:	6821      	ldr	r1, [r4, #0]
 800b154:	6833      	ldr	r3, [r6, #0]
 800b156:	0608      	lsls	r0, r1, #24
 800b158:	f853 5b04 	ldr.w	r5, [r3], #4
 800b15c:	d402      	bmi.n	800b164 <_printf_i+0xe8>
 800b15e:	0649      	lsls	r1, r1, #25
 800b160:	bf48      	it	mi
 800b162:	b2ad      	uxthmi	r5, r5
 800b164:	2f6f      	cmp	r7, #111	@ 0x6f
 800b166:	6033      	str	r3, [r6, #0]
 800b168:	4852      	ldr	r0, [pc, #328]	@ (800b2b4 <_printf_i+0x238>)
 800b16a:	bf14      	ite	ne
 800b16c:	230a      	movne	r3, #10
 800b16e:	2308      	moveq	r3, #8
 800b170:	2100      	movs	r1, #0
 800b172:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b176:	6866      	ldr	r6, [r4, #4]
 800b178:	2e00      	cmp	r6, #0
 800b17a:	60a6      	str	r6, [r4, #8]
 800b17c:	bfa2      	ittt	ge
 800b17e:	6821      	ldrge	r1, [r4, #0]
 800b180:	f021 0104 	bicge.w	r1, r1, #4
 800b184:	6021      	strge	r1, [r4, #0]
 800b186:	b90d      	cbnz	r5, 800b18c <_printf_i+0x110>
 800b188:	2e00      	cmp	r6, #0
 800b18a:	d04b      	beq.n	800b224 <_printf_i+0x1a8>
 800b18c:	4616      	mov	r6, r2
 800b18e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b192:	fb03 5711 	mls	r7, r3, r1, r5
 800b196:	5dc7      	ldrb	r7, [r0, r7]
 800b198:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b19c:	462f      	mov	r7, r5
 800b19e:	460d      	mov	r5, r1
 800b1a0:	42bb      	cmp	r3, r7
 800b1a2:	d9f4      	bls.n	800b18e <_printf_i+0x112>
 800b1a4:	2b08      	cmp	r3, #8
 800b1a6:	d10b      	bne.n	800b1c0 <_printf_i+0x144>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	07df      	lsls	r7, r3, #31
 800b1ac:	d508      	bpl.n	800b1c0 <_printf_i+0x144>
 800b1ae:	6923      	ldr	r3, [r4, #16]
 800b1b0:	6861      	ldr	r1, [r4, #4]
 800b1b2:	4299      	cmp	r1, r3
 800b1b4:	bfde      	ittt	le
 800b1b6:	2330      	movle	r3, #48	@ 0x30
 800b1b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1c0:	1b92      	subs	r2, r2, r6
 800b1c2:	6122      	str	r2, [r4, #16]
 800b1c4:	464b      	mov	r3, r9
 800b1c6:	aa03      	add	r2, sp, #12
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	f8cd a000 	str.w	sl, [sp]
 800b1d0:	f7ff fee2 	bl	800af98 <_printf_common>
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	d14a      	bne.n	800b26e <_printf_i+0x1f2>
 800b1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1dc:	b004      	add	sp, #16
 800b1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	f043 0320 	orr.w	r3, r3, #32
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	2778      	movs	r7, #120	@ 0x78
 800b1ec:	4832      	ldr	r0, [pc, #200]	@ (800b2b8 <_printf_i+0x23c>)
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1f4:	061f      	lsls	r7, r3, #24
 800b1f6:	6831      	ldr	r1, [r6, #0]
 800b1f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1fc:	d402      	bmi.n	800b204 <_printf_i+0x188>
 800b1fe:	065f      	lsls	r7, r3, #25
 800b200:	bf48      	it	mi
 800b202:	b2ad      	uxthmi	r5, r5
 800b204:	6031      	str	r1, [r6, #0]
 800b206:	07d9      	lsls	r1, r3, #31
 800b208:	bf44      	itt	mi
 800b20a:	f043 0320 	orrmi.w	r3, r3, #32
 800b20e:	6023      	strmi	r3, [r4, #0]
 800b210:	b11d      	cbz	r5, 800b21a <_printf_i+0x19e>
 800b212:	2310      	movs	r3, #16
 800b214:	e7ac      	b.n	800b170 <_printf_i+0xf4>
 800b216:	4827      	ldr	r0, [pc, #156]	@ (800b2b4 <_printf_i+0x238>)
 800b218:	e7e9      	b.n	800b1ee <_printf_i+0x172>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	f023 0320 	bic.w	r3, r3, #32
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	e7f6      	b.n	800b212 <_printf_i+0x196>
 800b224:	4616      	mov	r6, r2
 800b226:	e7bd      	b.n	800b1a4 <_printf_i+0x128>
 800b228:	6833      	ldr	r3, [r6, #0]
 800b22a:	6825      	ldr	r5, [r4, #0]
 800b22c:	1d18      	adds	r0, r3, #4
 800b22e:	6961      	ldr	r1, [r4, #20]
 800b230:	6030      	str	r0, [r6, #0]
 800b232:	062e      	lsls	r6, r5, #24
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	d501      	bpl.n	800b23c <_printf_i+0x1c0>
 800b238:	6019      	str	r1, [r3, #0]
 800b23a:	e002      	b.n	800b242 <_printf_i+0x1c6>
 800b23c:	0668      	lsls	r0, r5, #25
 800b23e:	d5fb      	bpl.n	800b238 <_printf_i+0x1bc>
 800b240:	8019      	strh	r1, [r3, #0]
 800b242:	2300      	movs	r3, #0
 800b244:	4616      	mov	r6, r2
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	e7bc      	b.n	800b1c4 <_printf_i+0x148>
 800b24a:	6833      	ldr	r3, [r6, #0]
 800b24c:	2100      	movs	r1, #0
 800b24e:	1d1a      	adds	r2, r3, #4
 800b250:	6032      	str	r2, [r6, #0]
 800b252:	681e      	ldr	r6, [r3, #0]
 800b254:	6862      	ldr	r2, [r4, #4]
 800b256:	4630      	mov	r0, r6
 800b258:	f000 f98a 	bl	800b570 <memchr>
 800b25c:	b108      	cbz	r0, 800b262 <_printf_i+0x1e6>
 800b25e:	1b80      	subs	r0, r0, r6
 800b260:	6060      	str	r0, [r4, #4]
 800b262:	6863      	ldr	r3, [r4, #4]
 800b264:	6123      	str	r3, [r4, #16]
 800b266:	2300      	movs	r3, #0
 800b268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b26c:	e7aa      	b.n	800b1c4 <_printf_i+0x148>
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	4632      	mov	r2, r6
 800b272:	4649      	mov	r1, r9
 800b274:	4640      	mov	r0, r8
 800b276:	47d0      	blx	sl
 800b278:	3001      	adds	r0, #1
 800b27a:	d0ad      	beq.n	800b1d8 <_printf_i+0x15c>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	079b      	lsls	r3, r3, #30
 800b280:	d413      	bmi.n	800b2aa <_printf_i+0x22e>
 800b282:	68e0      	ldr	r0, [r4, #12]
 800b284:	9b03      	ldr	r3, [sp, #12]
 800b286:	4298      	cmp	r0, r3
 800b288:	bfb8      	it	lt
 800b28a:	4618      	movlt	r0, r3
 800b28c:	e7a6      	b.n	800b1dc <_printf_i+0x160>
 800b28e:	2301      	movs	r3, #1
 800b290:	4632      	mov	r2, r6
 800b292:	4649      	mov	r1, r9
 800b294:	4640      	mov	r0, r8
 800b296:	47d0      	blx	sl
 800b298:	3001      	adds	r0, #1
 800b29a:	d09d      	beq.n	800b1d8 <_printf_i+0x15c>
 800b29c:	3501      	adds	r5, #1
 800b29e:	68e3      	ldr	r3, [r4, #12]
 800b2a0:	9903      	ldr	r1, [sp, #12]
 800b2a2:	1a5b      	subs	r3, r3, r1
 800b2a4:	42ab      	cmp	r3, r5
 800b2a6:	dcf2      	bgt.n	800b28e <_printf_i+0x212>
 800b2a8:	e7eb      	b.n	800b282 <_printf_i+0x206>
 800b2aa:	2500      	movs	r5, #0
 800b2ac:	f104 0619 	add.w	r6, r4, #25
 800b2b0:	e7f5      	b.n	800b29e <_printf_i+0x222>
 800b2b2:	bf00      	nop
 800b2b4:	0800b99d 	.word	0x0800b99d
 800b2b8:	0800b9ae 	.word	0x0800b9ae

0800b2bc <__sflush_r>:
 800b2bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c4:	0716      	lsls	r6, r2, #28
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	d454      	bmi.n	800b376 <__sflush_r+0xba>
 800b2cc:	684b      	ldr	r3, [r1, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	dc02      	bgt.n	800b2d8 <__sflush_r+0x1c>
 800b2d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	dd48      	ble.n	800b36a <__sflush_r+0xae>
 800b2d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	d045      	beq.n	800b36a <__sflush_r+0xae>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2e4:	682f      	ldr	r7, [r5, #0]
 800b2e6:	6a21      	ldr	r1, [r4, #32]
 800b2e8:	602b      	str	r3, [r5, #0]
 800b2ea:	d030      	beq.n	800b34e <__sflush_r+0x92>
 800b2ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2ee:	89a3      	ldrh	r3, [r4, #12]
 800b2f0:	0759      	lsls	r1, r3, #29
 800b2f2:	d505      	bpl.n	800b300 <__sflush_r+0x44>
 800b2f4:	6863      	ldr	r3, [r4, #4]
 800b2f6:	1ad2      	subs	r2, r2, r3
 800b2f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2fa:	b10b      	cbz	r3, 800b300 <__sflush_r+0x44>
 800b2fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2fe:	1ad2      	subs	r2, r2, r3
 800b300:	2300      	movs	r3, #0
 800b302:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b304:	6a21      	ldr	r1, [r4, #32]
 800b306:	4628      	mov	r0, r5
 800b308:	47b0      	blx	r6
 800b30a:	1c43      	adds	r3, r0, #1
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	d106      	bne.n	800b31e <__sflush_r+0x62>
 800b310:	6829      	ldr	r1, [r5, #0]
 800b312:	291d      	cmp	r1, #29
 800b314:	d82b      	bhi.n	800b36e <__sflush_r+0xb2>
 800b316:	4a2a      	ldr	r2, [pc, #168]	@ (800b3c0 <__sflush_r+0x104>)
 800b318:	410a      	asrs	r2, r1
 800b31a:	07d6      	lsls	r6, r2, #31
 800b31c:	d427      	bmi.n	800b36e <__sflush_r+0xb2>
 800b31e:	2200      	movs	r2, #0
 800b320:	04d9      	lsls	r1, r3, #19
 800b322:	6062      	str	r2, [r4, #4]
 800b324:	6922      	ldr	r2, [r4, #16]
 800b326:	6022      	str	r2, [r4, #0]
 800b328:	d504      	bpl.n	800b334 <__sflush_r+0x78>
 800b32a:	1c42      	adds	r2, r0, #1
 800b32c:	d101      	bne.n	800b332 <__sflush_r+0x76>
 800b32e:	682b      	ldr	r3, [r5, #0]
 800b330:	b903      	cbnz	r3, 800b334 <__sflush_r+0x78>
 800b332:	6560      	str	r0, [r4, #84]	@ 0x54
 800b334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b336:	602f      	str	r7, [r5, #0]
 800b338:	b1b9      	cbz	r1, 800b36a <__sflush_r+0xae>
 800b33a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b33e:	4299      	cmp	r1, r3
 800b340:	d002      	beq.n	800b348 <__sflush_r+0x8c>
 800b342:	4628      	mov	r0, r5
 800b344:	f7ff fa96 	bl	800a874 <_free_r>
 800b348:	2300      	movs	r3, #0
 800b34a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b34c:	e00d      	b.n	800b36a <__sflush_r+0xae>
 800b34e:	2301      	movs	r3, #1
 800b350:	4628      	mov	r0, r5
 800b352:	47b0      	blx	r6
 800b354:	4602      	mov	r2, r0
 800b356:	1c50      	adds	r0, r2, #1
 800b358:	d1c9      	bne.n	800b2ee <__sflush_r+0x32>
 800b35a:	682b      	ldr	r3, [r5, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d0c6      	beq.n	800b2ee <__sflush_r+0x32>
 800b360:	2b1d      	cmp	r3, #29
 800b362:	d001      	beq.n	800b368 <__sflush_r+0xac>
 800b364:	2b16      	cmp	r3, #22
 800b366:	d11d      	bne.n	800b3a4 <__sflush_r+0xe8>
 800b368:	602f      	str	r7, [r5, #0]
 800b36a:	2000      	movs	r0, #0
 800b36c:	e021      	b.n	800b3b2 <__sflush_r+0xf6>
 800b36e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b372:	b21b      	sxth	r3, r3
 800b374:	e01a      	b.n	800b3ac <__sflush_r+0xf0>
 800b376:	690f      	ldr	r7, [r1, #16]
 800b378:	2f00      	cmp	r7, #0
 800b37a:	d0f6      	beq.n	800b36a <__sflush_r+0xae>
 800b37c:	0793      	lsls	r3, r2, #30
 800b37e:	680e      	ldr	r6, [r1, #0]
 800b380:	600f      	str	r7, [r1, #0]
 800b382:	bf0c      	ite	eq
 800b384:	694b      	ldreq	r3, [r1, #20]
 800b386:	2300      	movne	r3, #0
 800b388:	eba6 0807 	sub.w	r8, r6, r7
 800b38c:	608b      	str	r3, [r1, #8]
 800b38e:	f1b8 0f00 	cmp.w	r8, #0
 800b392:	ddea      	ble.n	800b36a <__sflush_r+0xae>
 800b394:	4643      	mov	r3, r8
 800b396:	463a      	mov	r2, r7
 800b398:	6a21      	ldr	r1, [r4, #32]
 800b39a:	4628      	mov	r0, r5
 800b39c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b39e:	47b0      	blx	r6
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	dc08      	bgt.n	800b3b6 <__sflush_r+0xfa>
 800b3a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b6:	4407      	add	r7, r0
 800b3b8:	eba8 0800 	sub.w	r8, r8, r0
 800b3bc:	e7e7      	b.n	800b38e <__sflush_r+0xd2>
 800b3be:	bf00      	nop
 800b3c0:	dfbffffe 	.word	0xdfbffffe

0800b3c4 <_fflush_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	690b      	ldr	r3, [r1, #16]
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	b913      	cbnz	r3, 800b3d4 <_fflush_r+0x10>
 800b3ce:	2500      	movs	r5, #0
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	b118      	cbz	r0, 800b3de <_fflush_r+0x1a>
 800b3d6:	6a03      	ldr	r3, [r0, #32]
 800b3d8:	b90b      	cbnz	r3, 800b3de <_fflush_r+0x1a>
 800b3da:	f7ff f825 	bl	800a428 <__sinit>
 800b3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d0f3      	beq.n	800b3ce <_fflush_r+0xa>
 800b3e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3e8:	07d0      	lsls	r0, r2, #31
 800b3ea:	d404      	bmi.n	800b3f6 <_fflush_r+0x32>
 800b3ec:	0599      	lsls	r1, r3, #22
 800b3ee:	d402      	bmi.n	800b3f6 <_fflush_r+0x32>
 800b3f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3f2:	f7ff fa30 	bl	800a856 <__retarget_lock_acquire_recursive>
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	f7ff ff5f 	bl	800b2bc <__sflush_r>
 800b3fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b400:	4605      	mov	r5, r0
 800b402:	07da      	lsls	r2, r3, #31
 800b404:	d4e4      	bmi.n	800b3d0 <_fflush_r+0xc>
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	059b      	lsls	r3, r3, #22
 800b40a:	d4e1      	bmi.n	800b3d0 <_fflush_r+0xc>
 800b40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b40e:	f7ff fa23 	bl	800a858 <__retarget_lock_release_recursive>
 800b412:	e7dd      	b.n	800b3d0 <_fflush_r+0xc>

0800b414 <__swhatbuf_r>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	460c      	mov	r4, r1
 800b418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41c:	b096      	sub	sp, #88	@ 0x58
 800b41e:	4615      	mov	r5, r2
 800b420:	2900      	cmp	r1, #0
 800b422:	461e      	mov	r6, r3
 800b424:	da0c      	bge.n	800b440 <__swhatbuf_r+0x2c>
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	2100      	movs	r1, #0
 800b42a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b42e:	bf14      	ite	ne
 800b430:	2340      	movne	r3, #64	@ 0x40
 800b432:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b436:	2000      	movs	r0, #0
 800b438:	6031      	str	r1, [r6, #0]
 800b43a:	602b      	str	r3, [r5, #0]
 800b43c:	b016      	add	sp, #88	@ 0x58
 800b43e:	bd70      	pop	{r4, r5, r6, pc}
 800b440:	466a      	mov	r2, sp
 800b442:	f000 f863 	bl	800b50c <_fstat_r>
 800b446:	2800      	cmp	r0, #0
 800b448:	dbed      	blt.n	800b426 <__swhatbuf_r+0x12>
 800b44a:	9901      	ldr	r1, [sp, #4]
 800b44c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b450:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b454:	4259      	negs	r1, r3
 800b456:	4159      	adcs	r1, r3
 800b458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b45c:	e7eb      	b.n	800b436 <__swhatbuf_r+0x22>

0800b45e <__smakebuf_r>:
 800b45e:	898b      	ldrh	r3, [r1, #12]
 800b460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b462:	079d      	lsls	r5, r3, #30
 800b464:	4606      	mov	r6, r0
 800b466:	460c      	mov	r4, r1
 800b468:	d507      	bpl.n	800b47a <__smakebuf_r+0x1c>
 800b46a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	2301      	movs	r3, #1
 800b474:	6163      	str	r3, [r4, #20]
 800b476:	b003      	add	sp, #12
 800b478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47a:	ab01      	add	r3, sp, #4
 800b47c:	466a      	mov	r2, sp
 800b47e:	f7ff ffc9 	bl	800b414 <__swhatbuf_r>
 800b482:	9f00      	ldr	r7, [sp, #0]
 800b484:	4605      	mov	r5, r0
 800b486:	4630      	mov	r0, r6
 800b488:	4639      	mov	r1, r7
 800b48a:	f7ff fa5f 	bl	800a94c <_malloc_r>
 800b48e:	b948      	cbnz	r0, 800b4a4 <__smakebuf_r+0x46>
 800b490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b494:	059a      	lsls	r2, r3, #22
 800b496:	d4ee      	bmi.n	800b476 <__smakebuf_r+0x18>
 800b498:	f023 0303 	bic.w	r3, r3, #3
 800b49c:	f043 0302 	orr.w	r3, r3, #2
 800b4a0:	81a3      	strh	r3, [r4, #12]
 800b4a2:	e7e2      	b.n	800b46a <__smakebuf_r+0xc>
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	6020      	str	r0, [r4, #0]
 800b4a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ac:	81a3      	strh	r3, [r4, #12]
 800b4ae:	9b01      	ldr	r3, [sp, #4]
 800b4b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4b4:	b15b      	cbz	r3, 800b4ce <__smakebuf_r+0x70>
 800b4b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f000 f838 	bl	800b530 <_isatty_r>
 800b4c0:	b128      	cbz	r0, 800b4ce <__smakebuf_r+0x70>
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	f023 0303 	bic.w	r3, r3, #3
 800b4c8:	f043 0301 	orr.w	r3, r3, #1
 800b4cc:	81a3      	strh	r3, [r4, #12]
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	431d      	orrs	r5, r3
 800b4d2:	81a5      	strh	r5, [r4, #12]
 800b4d4:	e7cf      	b.n	800b476 <__smakebuf_r+0x18>

0800b4d6 <memmove>:
 800b4d6:	4288      	cmp	r0, r1
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	eb01 0402 	add.w	r4, r1, r2
 800b4de:	d902      	bls.n	800b4e6 <memmove+0x10>
 800b4e0:	4284      	cmp	r4, r0
 800b4e2:	4623      	mov	r3, r4
 800b4e4:	d807      	bhi.n	800b4f6 <memmove+0x20>
 800b4e6:	1e43      	subs	r3, r0, #1
 800b4e8:	42a1      	cmp	r1, r4
 800b4ea:	d008      	beq.n	800b4fe <memmove+0x28>
 800b4ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4f4:	e7f8      	b.n	800b4e8 <memmove+0x12>
 800b4f6:	4402      	add	r2, r0
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	428a      	cmp	r2, r1
 800b4fc:	d100      	bne.n	800b500 <memmove+0x2a>
 800b4fe:	bd10      	pop	{r4, pc}
 800b500:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b504:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b508:	e7f7      	b.n	800b4fa <memmove+0x24>
	...

0800b50c <_fstat_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	2300      	movs	r3, #0
 800b510:	4d06      	ldr	r5, [pc, #24]	@ (800b52c <_fstat_r+0x20>)
 800b512:	4604      	mov	r4, r0
 800b514:	4608      	mov	r0, r1
 800b516:	4611      	mov	r1, r2
 800b518:	602b      	str	r3, [r5, #0]
 800b51a:	f7f5 fc4c 	bl	8000db6 <_fstat>
 800b51e:	1c43      	adds	r3, r0, #1
 800b520:	d102      	bne.n	800b528 <_fstat_r+0x1c>
 800b522:	682b      	ldr	r3, [r5, #0]
 800b524:	b103      	cbz	r3, 800b528 <_fstat_r+0x1c>
 800b526:	6023      	str	r3, [r4, #0]
 800b528:	bd38      	pop	{r3, r4, r5, pc}
 800b52a:	bf00      	nop
 800b52c:	20000388 	.word	0x20000388

0800b530 <_isatty_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	2300      	movs	r3, #0
 800b534:	4d05      	ldr	r5, [pc, #20]	@ (800b54c <_isatty_r+0x1c>)
 800b536:	4604      	mov	r4, r0
 800b538:	4608      	mov	r0, r1
 800b53a:	602b      	str	r3, [r5, #0]
 800b53c:	f7f5 fc4b 	bl	8000dd6 <_isatty>
 800b540:	1c43      	adds	r3, r0, #1
 800b542:	d102      	bne.n	800b54a <_isatty_r+0x1a>
 800b544:	682b      	ldr	r3, [r5, #0]
 800b546:	b103      	cbz	r3, 800b54a <_isatty_r+0x1a>
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	bd38      	pop	{r3, r4, r5, pc}
 800b54c:	20000388 	.word	0x20000388

0800b550 <_sbrk_r>:
 800b550:	b538      	push	{r3, r4, r5, lr}
 800b552:	2300      	movs	r3, #0
 800b554:	4d05      	ldr	r5, [pc, #20]	@ (800b56c <_sbrk_r+0x1c>)
 800b556:	4604      	mov	r4, r0
 800b558:	4608      	mov	r0, r1
 800b55a:	602b      	str	r3, [r5, #0]
 800b55c:	f7f5 fc54 	bl	8000e08 <_sbrk>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	d102      	bne.n	800b56a <_sbrk_r+0x1a>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	b103      	cbz	r3, 800b56a <_sbrk_r+0x1a>
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
 800b56c:	20000388 	.word	0x20000388

0800b570 <memchr>:
 800b570:	b2c9      	uxtb	r1, r1
 800b572:	4603      	mov	r3, r0
 800b574:	4402      	add	r2, r0
 800b576:	b510      	push	{r4, lr}
 800b578:	4293      	cmp	r3, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	d101      	bne.n	800b582 <memchr+0x12>
 800b57e:	2000      	movs	r0, #0
 800b580:	e003      	b.n	800b58a <memchr+0x1a>
 800b582:	7804      	ldrb	r4, [r0, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	428c      	cmp	r4, r1
 800b588:	d1f6      	bne.n	800b578 <memchr+0x8>
 800b58a:	bd10      	pop	{r4, pc}

0800b58c <_realloc_r>:
 800b58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b590:	4680      	mov	r8, r0
 800b592:	4615      	mov	r5, r2
 800b594:	460c      	mov	r4, r1
 800b596:	b921      	cbnz	r1, 800b5a2 <_realloc_r+0x16>
 800b598:	4611      	mov	r1, r2
 800b59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b59e:	f7ff b9d5 	b.w	800a94c <_malloc_r>
 800b5a2:	b92a      	cbnz	r2, 800b5b0 <_realloc_r+0x24>
 800b5a4:	f7ff f966 	bl	800a874 <_free_r>
 800b5a8:	2400      	movs	r4, #0
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b0:	f000 f81a 	bl	800b5e8 <_malloc_usable_size_r>
 800b5b4:	4285      	cmp	r5, r0
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	d802      	bhi.n	800b5c0 <_realloc_r+0x34>
 800b5ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b5be:	d8f4      	bhi.n	800b5aa <_realloc_r+0x1e>
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	f7ff f9c2 	bl	800a94c <_malloc_r>
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d0ec      	beq.n	800b5a8 <_realloc_r+0x1c>
 800b5ce:	42b5      	cmp	r5, r6
 800b5d0:	462a      	mov	r2, r5
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	bf28      	it	cs
 800b5d6:	4632      	movcs	r2, r6
 800b5d8:	f7ff f93f 	bl	800a85a <memcpy>
 800b5dc:	4621      	mov	r1, r4
 800b5de:	4640      	mov	r0, r8
 800b5e0:	463c      	mov	r4, r7
 800b5e2:	f7ff f947 	bl	800a874 <_free_r>
 800b5e6:	e7e0      	b.n	800b5aa <_realloc_r+0x1e>

0800b5e8 <_malloc_usable_size_r>:
 800b5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ec:	1f18      	subs	r0, r3, #4
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	bfbc      	itt	lt
 800b5f2:	580b      	ldrlt	r3, [r1, r0]
 800b5f4:	18c0      	addlt	r0, r0, r3
 800b5f6:	4770      	bx	lr

0800b5f8 <_init>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	bf00      	nop
 800b5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fe:	bc08      	pop	{r3}
 800b600:	469e      	mov	lr, r3
 800b602:	4770      	bx	lr

0800b604 <_fini>:
 800b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b606:	bf00      	nop
 800b608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b60a:	bc08      	pop	{r3}
 800b60c:	469e      	mov	lr, r3
 800b60e:	4770      	bx	lr
