
Display128x64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  080025f8  080025f8  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e54  08002e54  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002e54  08002e54  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e54  08002e54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000010  08002e6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08002e6c  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008eba  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f2  00000000  00000000  00028ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016970  00000000  00000000  0002ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6be  00000000  00000000  00042388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084306  00000000  00000000  0004ca46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0d4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  000d0da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080025e0 	.word	0x080025e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080025e0 	.word	0x080025e0

0800014c <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
 800015a:	e01f      	b.n	800019c <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 800015c:	79fa      	ldrb	r2, [r7, #7]
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	fa02 f303 	lsl.w	r3, r2, r3
 8000164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000168:	2b00      	cmp	r3, #0
 800016a:	d005      	beq.n	8000178 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 800016c:	2201      	movs	r2, #1
 800016e:	2180      	movs	r1, #128	; 0x80
 8000170:	480e      	ldr	r0, [pc, #56]	; (80001ac <SendByteSPI+0x60>)
 8000172:	f001 fb5d 	bl	8001830 <HAL_GPIO_WritePin>
 8000176:	e004      	b.n	8000182 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8000178:	2200      	movs	r2, #0
 800017a:	2180      	movs	r1, #128	; 0x80
 800017c:	480b      	ldr	r0, [pc, #44]	; (80001ac <SendByteSPI+0x60>)
 800017e:	f001 fb57 	bl	8001830 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000182:	2200      	movs	r2, #0
 8000184:	2120      	movs	r1, #32
 8000186:	4809      	ldr	r0, [pc, #36]	; (80001ac <SendByteSPI+0x60>)
 8000188:	f001 fb52 	bl	8001830 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 800018c:	2201      	movs	r2, #1
 800018e:	2120      	movs	r1, #32
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <SendByteSPI+0x60>)
 8000192:	f001 fb4d 	bl	8001830 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	3301      	adds	r3, #1
 800019a:	60fb      	str	r3, [r7, #12]
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	2b07      	cmp	r3, #7
 80001a0:	dddc      	ble.n	800015c <SendByteSPI+0x10>

	}
}
 80001a2:	bf00      	nop
 80001a4:	bf00      	nop
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40010800 	.word	0x40010800

080001b0 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80001ba:	2201      	movs	r2, #1
 80001bc:	2140      	movs	r1, #64	; 0x40
 80001be:	480f      	ldr	r0, [pc, #60]	; (80001fc <ST7920_SendCmd+0x4c>)
 80001c0:	f001 fb36 	bl	8001830 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 80001c4:	20f8      	movs	r0, #248	; 0xf8
 80001c6:	f7ff ffc1 	bl	800014c <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f023 030f 	bic.w	r3, r3, #15
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	4618      	mov	r0, r3
 80001d4:	f7ff ffba 	bl	800014c <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	011b      	lsls	r3, r3, #4
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	4618      	mov	r0, r3
 80001e0:	f7ff ffb4 	bl	800014c <SendByteSPI>
	delay_us(50);
 80001e4:	2032      	movs	r0, #50	; 0x32
 80001e6:	f000 fdff 	bl	8000de8 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80001ea:	2200      	movs	r2, #0
 80001ec:	2140      	movs	r1, #64	; 0x40
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <ST7920_SendCmd+0x4c>)
 80001f0:	f001 fb1e 	bl	8001830 <HAL_GPIO_WritePin>

}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800

08000200 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800020a:	2201      	movs	r2, #1
 800020c:	2140      	movs	r1, #64	; 0x40
 800020e:	480f      	ldr	r0, [pc, #60]	; (800024c <ST7920_SendData+0x4c>)
 8000210:	f001 fb0e 	bl	8001830 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000214:	20fa      	movs	r0, #250	; 0xfa
 8000216:	f7ff ff99 	bl	800014c <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f023 030f 	bic.w	r3, r3, #15
 8000220:	b2db      	uxtb	r3, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ff92 	bl	800014c <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	b2db      	uxtb	r3, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f7ff ff8c 	bl	800014c <SendByteSPI>
	delay_us(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f000 fdd7 	bl	8000de8 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800023a:	2200      	movs	r2, #0
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4803      	ldr	r0, [pc, #12]	; (800024c <ST7920_SendData+0x4c>)
 8000240:	f001 faf6 	bl	8001830 <HAL_GPIO_WritePin>
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40010800 	.word	0x40010800

08000250 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	607a      	str	r2, [r7, #4]
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2b03      	cmp	r3, #3
 8000260:	d81e      	bhi.n	80002a0 <ST7920_SendString+0x50>
 8000262:	a201      	add	r2, pc, #4	; (adr r2, 8000268 <ST7920_SendString+0x18>)
 8000264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000268:	08000279 	.word	0x08000279
 800026c:	08000283 	.word	0x08000283
 8000270:	0800028d 	.word	0x0800028d
 8000274:	08000297 	.word	0x08000297
    switch (row)
    {
        case 0:
            col |= 0x80;
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027e:	60bb      	str	r3, [r7, #8]
            break;
 8000280:	e013      	b.n	80002aa <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000288:	60bb      	str	r3, [r7, #8]
            break;
 800028a:	e00e      	b.n	80002aa <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8000292:	60bb      	str	r3, [r7, #8]
            break;
 8000294:	e009      	b.n	80002aa <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 800029c:	60bb      	str	r3, [r7, #8]
            break;
 800029e:	e004      	b.n	80002aa <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	60bb      	str	r3, [r7, #8]
            break;
 80002a8:	bf00      	nop
    }

    ST7920_SendCmd(col);
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ff7e 	bl	80001b0 <ST7920_SendCmd>

    while (*string)
 80002b4:	e006      	b.n	80002c4 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	1c5a      	adds	r2, r3, #1
 80002ba:	607a      	str	r2, [r7, #4]
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ff9e 	bl	8000200 <ST7920_SendData>
    while (*string)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d1f4      	bne.n	80002b6 <ST7920_SendString+0x66>
    	}
}
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop

080002d8 <ST7920_GraphicMode>:


// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d115      	bne.n	8000312 <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
 80002e6:	2030      	movs	r0, #48	; 0x30
 80002e8:	f7ff ff62 	bl	80001b0 <ST7920_SendCmd>
		HAL_Delay (1);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f001 f813 	bl	8001318 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 80002f2:	2034      	movs	r0, #52	; 0x34
 80002f4:	f7ff ff5c 	bl	80001b0 <ST7920_SendCmd>
		HAL_Delay (1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f001 f80d 	bl	8001318 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 80002fe:	2036      	movs	r0, #54	; 0x36
 8000300:	f7ff ff56 	bl	80001b0 <ST7920_SendCmd>
		HAL_Delay (1);
 8000304:	2001      	movs	r0, #1
 8000306:	f001 f807 	bl	8001318 <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <ST7920_GraphicMode+0x5c>)
 800030c:	2201      	movs	r2, #1
 800030e:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 8000310:	e00b      	b.n	800032a <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d108      	bne.n	800032a <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  // 8 bit mode
 8000318:	2030      	movs	r0, #48	; 0x30
 800031a:	f7ff ff49 	bl	80001b0 <ST7920_SendCmd>
		HAL_Delay (1);
 800031e:	2001      	movs	r0, #1
 8000320:	f000 fffa 	bl	8001318 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <ST7920_GraphicMode+0x5c>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000002c 	.word	0x2000002c

08000338 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 8000340:	2300      	movs	r3, #0
 8000342:	73bb      	strb	r3, [r7, #14]
 8000344:	e06a      	b.n	800041c <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 8000346:	7bbb      	ldrb	r3, [r7, #14]
 8000348:	2b1f      	cmp	r3, #31
 800034a:	d830      	bhi.n	80003ae <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
 8000350:	e029      	b.n	80003a6 <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 8000352:	7bbb      	ldrb	r3, [r7, #14]
 8000354:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000358:	b2db      	uxtb	r3, r3
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff28 	bl	80001b0 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000366:	b2db      	uxtb	r3, r3
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff21 	bl	80001b0 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 800036e:	7bfa      	ldrb	r2, [r7, #15]
 8000370:	7bbb      	ldrb	r3, [r7, #14]
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	4413      	add	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	461a      	mov	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff3d 	bl	8000200 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	1c5a      	adds	r2, r3, #1
 800038c:	7bbb      	ldrb	r3, [r7, #14]
 800038e:	011b      	lsls	r3, r3, #4
 8000390:	4413      	add	r3, r2
 8000392:	461a      	mov	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff30 	bl	8000200 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	3301      	adds	r3, #1
 80003a4:	73fb      	strb	r3, [r7, #15]
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	2b07      	cmp	r3, #7
 80003aa:	d9d2      	bls.n	8000352 <ST7920_DrawBitmap+0x1a>
 80003ac:	e033      	b.n	8000416 <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80003ae:	2300      	movs	r3, #0
 80003b0:	73fb      	strb	r3, [r7, #15]
 80003b2:	e02d      	b.n	8000410 <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 80003b4:	7bbb      	ldrb	r3, [r7, #14]
 80003b6:	3b20      	subs	r3, #32
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	b25b      	sxtb	r3, r3
 80003bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003c0:	b25b      	sxtb	r3, r3
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff fef3 	bl	80001b0 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	f063 0377 	orn	r3, r3, #119	; 0x77
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff feec 	bl	80001b0 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80003d8:	7bfa      	ldrb	r2, [r7, #15]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	4413      	add	r3, r2
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	461a      	mov	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4413      	add	r3, r2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff08 	bl	8000200 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	7bbb      	ldrb	r3, [r7, #14]
 80003f8:	011b      	lsls	r3, r3, #4
 80003fa:	4413      	add	r3, r2
 80003fc:	461a      	mov	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff fefb 	bl	8000200 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	3301      	adds	r3, #1
 800040e:	73fb      	strb	r3, [r7, #15]
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	2b07      	cmp	r3, #7
 8000414:	d9ce      	bls.n	80003b4 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 8000416:	7bbb      	ldrb	r3, [r7, #14]
 8000418:	3301      	adds	r3, #1
 800041a:	73bb      	strb	r3, [r7, #14]
 800041c:	7bbb      	ldrb	r3, [r7, #14]
 800041e:	2b3f      	cmp	r3, #63	; 0x3f
 8000420:	d991      	bls.n	8000346 <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <ST7920_Update+0x10>)
 8000432:	f7ff ff81 	bl	8000338 <ST7920_DrawBitmap>
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000034 	.word	0x20000034

08000440 <ST7920_Clear>:



void ST7920_Clear()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000446:	4b21      	ldr	r3, [pc, #132]	; (80004cc <ST7920_Clear+0x8c>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d134      	bne.n	80004b8 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 800044e:	2300      	movs	r3, #0
 8000450:	71bb      	strb	r3, [r7, #6]
 8000452:	e02d      	b.n	80004b0 <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000454:	79bb      	ldrb	r3, [r7, #6]
 8000456:	2b1f      	cmp	r3, #31
 8000458:	d80a      	bhi.n	8000470 <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 800045a:	79bb      	ldrb	r3, [r7, #6]
 800045c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff fea4 	bl	80001b0 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000468:	2080      	movs	r0, #128	; 0x80
 800046a:	f7ff fea1 	bl	80001b0 <ST7920_SendCmd>
 800046e:	e00d      	b.n	800048c <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	3b20      	subs	r3, #32
 8000474:	b2db      	uxtb	r3, r3
 8000476:	b25b      	sxtb	r3, r3
 8000478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800047c:	b25b      	sxtb	r3, r3
 800047e:	b2db      	uxtb	r3, r3
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff fe95 	bl	80001b0 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000486:	2088      	movs	r0, #136	; 0x88
 8000488:	f7ff fe92 	bl	80001b0 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 800048c:	2300      	movs	r3, #0
 800048e:	71fb      	strb	r3, [r7, #7]
 8000490:	e008      	b.n	80004a4 <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 8000492:	2000      	movs	r0, #0
 8000494:	f7ff feb4 	bl	8000200 <ST7920_SendData>
				ST7920_SendData(0);
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff feb1 	bl	8000200 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	3301      	adds	r3, #1
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b07      	cmp	r3, #7
 80004a8:	d9f3      	bls.n	8000492 <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	3301      	adds	r3, #1
 80004ae:	71bb      	strb	r3, [r7, #6]
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	2b3f      	cmp	r3, #63	; 0x3f
 80004b4:	d9ce      	bls.n	8000454 <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 80004b6:	e005      	b.n	80004c4 <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 80004b8:	2001      	movs	r0, #1
 80004ba:	f7ff fe79 	bl	80001b0 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 80004be:	2002      	movs	r0, #2
 80004c0:	f000 ff2a 	bl	8001318 <HAL_Delay>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000002c 	.word	0x2000002c

080004d0 <ST7920_Init>:


void ST7920_Init (void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80004d4:	2200      	movs	r2, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	481c      	ldr	r0, [pc, #112]	; (800054c <ST7920_Init+0x7c>)
 80004da:	f001 f9a9 	bl	8001830 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80004de:	200a      	movs	r0, #10
 80004e0:	f000 ff1a 	bl	8001318 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 80004e4:	2201      	movs	r2, #1
 80004e6:	2101      	movs	r1, #1
 80004e8:	4818      	ldr	r0, [pc, #96]	; (800054c <ST7920_Init+0x7c>)
 80004ea:	f001 f9a1 	bl	8001830 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 80004ee:	2032      	movs	r0, #50	; 0x32
 80004f0:	f000 ff12 	bl	8001318 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 80004f4:	2030      	movs	r0, #48	; 0x30
 80004f6:	f7ff fe5b 	bl	80001b0 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 80004fa:	206e      	movs	r0, #110	; 0x6e
 80004fc:	f000 fc74 	bl	8000de8 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000500:	2030      	movs	r0, #48	; 0x30
 8000502:	f7ff fe55 	bl	80001b0 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 8000506:	2028      	movs	r0, #40	; 0x28
 8000508:	f000 fc6e 	bl	8000de8 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 800050c:	2008      	movs	r0, #8
 800050e:	f7ff fe4f 	bl	80001b0 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 8000512:	206e      	movs	r0, #110	; 0x6e
 8000514:	f000 fc68 	bl	8000de8 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff fe49 	bl	80001b0 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 800051e:	200c      	movs	r0, #12
 8000520:	f000 fefa 	bl	8001318 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000524:	2006      	movs	r0, #6
 8000526:	f7ff fe43 	bl	80001b0 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fef4 	bl	8001318 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000530:	200c      	movs	r0, #12
 8000532:	f7ff fe3d 	bl	80001b0 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000536:	2001      	movs	r0, #1
 8000538:	f000 feee 	bl	8001318 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 800053c:	2002      	movs	r0, #2
 800053e:	f7ff fe37 	bl	80001b0 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000542:	2001      	movs	r0, #1
 8000544:	f000 fee8 	bl	8001318 <HAL_Delay>

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40010c00 	.word	0x40010c00

08000550 <SetPixel>:


// set Pixel

void SetPixel(uint8_t x, uint8_t y)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	71fb      	strb	r3, [r7, #7]
 800055c:	4613      	mov	r3, r2
 800055e:	71bb      	strb	r3, [r7, #6]
  if (y < numRows && x < numCols)
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <SetPixel+0xb8>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	79ba      	ldrb	r2, [r7, #6]
 8000566:	429a      	cmp	r2, r3
 8000568:	d248      	bcs.n	80005fc <SetPixel+0xac>
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <SetPixel+0xbc>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	79fa      	ldrb	r2, [r7, #7]
 8000570:	429a      	cmp	r2, r3
 8000572:	d243      	bcs.n	80005fc <SetPixel+0xac>
  {
    uint8_t *p = image + ((y * (numCols/8)) + (x/8));
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	4a25      	ldr	r2, [pc, #148]	; (800060c <SetPixel+0xbc>)
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	08d2      	lsrs	r2, r2, #3
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	fb02 f303 	mul.w	r3, r2, r3
 8000582:	79fa      	ldrb	r2, [r7, #7]
 8000584:	08d2      	lsrs	r2, r2, #3
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	4413      	add	r3, r2
 800058a:	461a      	mov	r2, r3
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SetPixel+0xc0>)
 800058e:	4413      	add	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
    *p |= 0x80u >> (x%8);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	fa21 f303 	lsr.w	r3, r1, r3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4313      	orrs	r3, r2
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	701a      	strb	r2, [r3, #0]

    *image = *p;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <SetPixel+0xc0>)
 80005b2:	701a      	strb	r2, [r3, #0]

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <SetPixel+0xc4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	79ba      	ldrb	r2, [r7, #6]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d202      	bcs.n	80005c4 <SetPixel+0x74>
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <SetPixel+0xc4>)
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	7013      	strb	r3, [r2, #0]
    if (endRow <= y)  { endRow = y + 1; }
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <SetPixel+0xc8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	79ba      	ldrb	r2, [r7, #6]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d304      	bcc.n	80005d8 <SetPixel+0x88>
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <SetPixel+0xc8>)
 80005d6:	701a      	strb	r2, [r3, #0]
    if (startCol > x) { startCol = x; }
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <SetPixel+0xcc>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	79fa      	ldrb	r2, [r7, #7]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d202      	bcs.n	80005e8 <SetPixel+0x98>
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <SetPixel+0xcc>)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	7013      	strb	r3, [r2, #0]
    if (endCol <= x)  { endCol = x + 1; }
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <SetPixel+0xd0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	79fa      	ldrb	r2, [r7, #7]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d304      	bcc.n	80005fc <SetPixel+0xac>
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <SetPixel+0xd0>)
 80005fa:	701a      	strb	r2, [r3, #0]


  }

}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000000 	.word	0x20000000
 800060c:	20000001 	.word	0x20000001
 8000610:	20000034 	.word	0x20000034
 8000614:	20000434 	.word	0x20000434
 8000618:	20000436 	.word	0x20000436
 800061c:	20000030 	.word	0x20000030
 8000620:	20000435 	.word	0x20000435

08000624 <DrawLine>:
/* draw a line
 * start point (X0, Y0)
 * end point (X1, Y1)
 */
void DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b089      	sub	sp, #36	; 0x24
 8000628:	af00      	add	r7, sp, #0
 800062a:	4604      	mov	r4, r0
 800062c:	4608      	mov	r0, r1
 800062e:	4611      	mov	r1, r2
 8000630:	461a      	mov	r2, r3
 8000632:	4623      	mov	r3, r4
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4603      	mov	r3, r0
 8000638:	71bb      	strb	r3, [r7, #6]
 800063a:	460b      	mov	r3, r1
 800063c:	717b      	strb	r3, [r7, #5]
 800063e:	4613      	mov	r3, r2
 8000640:	713b      	strb	r3, [r7, #4]
  int dx = (x1 >= x0) ? x1 - x0 : x0 - x1;
 8000642:	797a      	ldrb	r2, [r7, #5]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	429a      	cmp	r2, r3
 8000648:	d303      	bcc.n	8000652 <DrawLine+0x2e>
 800064a:	797a      	ldrb	r2, [r7, #5]
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	e002      	b.n	8000658 <DrawLine+0x34>
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	797b      	ldrb	r3, [r7, #5]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	61bb      	str	r3, [r7, #24]
  int dy = (y1 >= y0) ? y1 - y0 : y0 - y1;
 800065a:	793a      	ldrb	r2, [r7, #4]
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	429a      	cmp	r2, r3
 8000660:	d303      	bcc.n	800066a <DrawLine+0x46>
 8000662:	793a      	ldrb	r2, [r7, #4]
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	e002      	b.n	8000670 <DrawLine+0x4c>
 800066a:	79ba      	ldrb	r2, [r7, #6]
 800066c:	793b      	ldrb	r3, [r7, #4]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	617b      	str	r3, [r7, #20]
  int sx = (x0 < x1) ? 1 : -1;
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	429a      	cmp	r2, r3
 8000678:	d201      	bcs.n	800067e <DrawLine+0x5a>
 800067a:	2301      	movs	r3, #1
 800067c:	e001      	b.n	8000682 <DrawLine+0x5e>
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	613b      	str	r3, [r7, #16]
  int sy = (y0 < y1) ? 1 : -1;
 8000684:	79ba      	ldrb	r2, [r7, #6]
 8000686:	793b      	ldrb	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	d201      	bcs.n	8000690 <DrawLine+0x6c>
 800068c:	2301      	movs	r3, #1
 800068e:	e001      	b.n	8000694 <DrawLine+0x70>
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	60fb      	str	r3, [r7, #12]
  int err = dx - dy;
 8000696:	69ba      	ldr	r2, [r7, #24]
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	61fb      	str	r3, [r7, #28]

  for (;;)
  {
    SetPixel(x0, y0);
 800069e:	79ba      	ldrb	r2, [r7, #6]
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4611      	mov	r1, r2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff53 	bl	8000550 <SetPixel>
    if (x0 == x1 && y0 == y1) break;
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d103      	bne.n	80006ba <DrawLine+0x96>
 80006b2:	79ba      	ldrb	r2, [r7, #6]
 80006b4:	793b      	ldrb	r3, [r7, #4]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d01e      	beq.n	80006f8 <DrawLine+0xd4>
    int e2 = err + err;
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
    if (e2 > -dy)
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	425b      	negs	r3, r3
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dd08      	ble.n	80006dc <DrawLine+0xb8>
    {
      err -= dy;
 80006ca:	69fa      	ldr	r2, [r7, #28]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	61fb      	str	r3, [r7, #28]
      x0 += sx;
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4413      	add	r3, r2
 80006da:	71fb      	strb	r3, [r7, #7]
    }
    if (e2 < dx)
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dadc      	bge.n	800069e <DrawLine+0x7a>
    {
      err += dx;
 80006e4:	69fa      	ldr	r2, [r7, #28]
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	4413      	add	r3, r2
 80006ea:	61fb      	str	r3, [r7, #28]
      y0 += sy;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	4413      	add	r3, r2
 80006f4:	71bb      	strb	r3, [r7, #6]
  {
 80006f6:	e7d2      	b.n	800069e <DrawLine+0x7a>
    if (x0 == x1 && y0 == y1) break;
 80006f8:	bf00      	nop
    }
  }
}
 80006fa:	bf00      	nop
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
	...

08000704 <DrawRectangle>:
 * start point (x,y)
 * w -> width
 * h -> height
 */
void DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4604      	mov	r4, r0
 800070c:	4608      	mov	r0, r1
 800070e:	4611      	mov	r1, r2
 8000710:	461a      	mov	r2, r3
 8000712:	4623      	mov	r3, r4
 8000714:	80fb      	strh	r3, [r7, #6]
 8000716:	4603      	mov	r3, r0
 8000718:	80bb      	strh	r3, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	807b      	strh	r3, [r7, #2]
 800071e:	4613      	mov	r3, r2
 8000720:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
		x >= numCols ||
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <DrawRectangle+0x10c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b29b      	uxth	r3, r3
	if (
 8000728:	88fa      	ldrh	r2, [r7, #6]
 800072a:	429a      	cmp	r2, r3
 800072c:	d26b      	bcs.n	8000806 <DrawRectangle+0x102>
		y >= numRows
 800072e:	4b39      	ldr	r3, [pc, #228]	; (8000814 <DrawRectangle+0x110>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
		x >= numCols ||
 8000734:	88ba      	ldrh	r2, [r7, #4]
 8000736:	429a      	cmp	r2, r3
 8000738:	d265      	bcs.n	8000806 <DrawRectangle+0x102>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 800073a:	88fa      	ldrh	r2, [r7, #6]
 800073c:	887b      	ldrh	r3, [r7, #2]
 800073e:	4413      	add	r3, r2
 8000740:	4a33      	ldr	r2, [pc, #204]	; (8000810 <DrawRectangle+0x10c>)
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	4293      	cmp	r3, r2
 8000746:	db05      	blt.n	8000754 <DrawRectangle+0x50>
		w = numCols - x;
 8000748:	4b31      	ldr	r3, [pc, #196]	; (8000810 <DrawRectangle+0x10c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b29a      	uxth	r2, r3
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8000754:	88ba      	ldrh	r2, [r7, #4]
 8000756:	883b      	ldrh	r3, [r7, #0]
 8000758:	4413      	add	r3, r2
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <DrawRectangle+0x110>)
 800075c:	7812      	ldrb	r2, [r2, #0]
 800075e:	4293      	cmp	r3, r2
 8000760:	db05      	blt.n	800076e <DrawRectangle+0x6a>
		h = numRows - y;
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <DrawRectangle+0x110>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b29a      	uxth	r2, r3
 8000768:	88bb      	ldrh	r3, [r7, #4]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	DrawLine(x, y, x + w, y);         /* Top line */
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	b2d8      	uxtb	r0, r3
 8000772:	88bb      	ldrh	r3, [r7, #4]
 8000774:	b2d9      	uxtb	r1, r3
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	887b      	ldrh	r3, [r7, #2]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4413      	add	r3, r2
 8000780:	b2da      	uxtb	r2, r3
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f7ff ff4d 	bl	8000624 <DrawLine>
	DrawLine(x, y + h, x + w, y + h); /* Bottom line */
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	b2d8      	uxtb	r0, r3
 800078e:	88bb      	ldrh	r3, [r7, #4]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	883b      	ldrh	r3, [r7, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4413      	add	r3, r2
 8000798:	b2d9      	uxtb	r1, r3
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	887b      	ldrh	r3, [r7, #2]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4413      	add	r3, r2
 80007a4:	b2dc      	uxtb	r4, r3
 80007a6:	88bb      	ldrh	r3, [r7, #4]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	883b      	ldrh	r3, [r7, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4622      	mov	r2, r4
 80007b4:	f7ff ff36 	bl	8000624 <DrawLine>
	DrawLine(x, y, x, y + h);         /* Left line */
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	b2d8      	uxtb	r0, r3
 80007bc:	88bb      	ldrh	r3, [r7, #4]
 80007be:	b2d9      	uxtb	r1, r3
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	b2dc      	uxtb	r4, r3
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	883b      	ldrh	r3, [r7, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4622      	mov	r2, r4
 80007d2:	f7ff ff27 	bl	8000624 <DrawLine>
	DrawLine(x + w, y, x + w, y + h); /* Right line */
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4413      	add	r3, r2
 80007e0:	b2d8      	uxtb	r0, r3
 80007e2:	88bb      	ldrh	r3, [r7, #4]
 80007e4:	b2d9      	uxtb	r1, r3
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	b2dc      	uxtb	r4, r3
 80007f2:	88bb      	ldrh	r3, [r7, #4]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	883b      	ldrh	r3, [r7, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4413      	add	r3, r2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4622      	mov	r2, r4
 8000800:	f7ff ff10 	bl	8000624 <DrawLine>
 8000804:	e000      	b.n	8000808 <DrawRectangle+0x104>
		return;
 8000806:	bf00      	nop
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bd90      	pop	{r4, r7, pc}
 800080e:	bf00      	nop
 8000810:	20000001 	.word	0x20000001
 8000814:	20000000 	.word	0x20000000

08000818 <DrawFilledRectangle>:
 * Start point (x,y)
 * w -> width
 * h -> height
 */
void DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	4604      	mov	r4, r0
 8000820:	4608      	mov	r0, r1
 8000822:	4611      	mov	r1, r2
 8000824:	461a      	mov	r2, r3
 8000826:	4623      	mov	r3, r4
 8000828:	80fb      	strh	r3, [r7, #6]
 800082a:	4603      	mov	r3, r0
 800082c:	80bb      	strh	r3, [r7, #4]
 800082e:	460b      	mov	r3, r1
 8000830:	807b      	strh	r3, [r7, #2]
 8000832:	4613      	mov	r3, r2
 8000834:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
		x >= numCols ||
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <DrawFilledRectangle+0xb4>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b29b      	uxth	r3, r3
	if (
 800083c:	88fa      	ldrh	r2, [r7, #6]
 800083e:	429a      	cmp	r2, r3
 8000840:	d240      	bcs.n	80008c4 <DrawFilledRectangle+0xac>
		y >= numRows
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <DrawFilledRectangle+0xb8>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b29b      	uxth	r3, r3
		x >= numCols ||
 8000848:	88ba      	ldrh	r2, [r7, #4]
 800084a:	429a      	cmp	r2, r3
 800084c:	d23a      	bcs.n	80008c4 <DrawFilledRectangle+0xac>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 800084e:	88fa      	ldrh	r2, [r7, #6]
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	4413      	add	r3, r2
 8000854:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <DrawFilledRectangle+0xb4>)
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	4293      	cmp	r3, r2
 800085a:	db05      	blt.n	8000868 <DrawFilledRectangle+0x50>
		w = numCols - x;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <DrawFilledRectangle+0xb4>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b29a      	uxth	r2, r3
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8000868:	88ba      	ldrh	r2, [r7, #4]
 800086a:	883b      	ldrh	r3, [r7, #0]
 800086c:	4413      	add	r3, r2
 800086e:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <DrawFilledRectangle+0xb8>)
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	4293      	cmp	r3, r2
 8000874:	db05      	blt.n	8000882 <DrawFilledRectangle+0x6a>
		h = numRows - y;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <DrawFilledRectangle+0xb8>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b29a      	uxth	r2, r3
 800087c:	88bb      	ldrh	r3, [r7, #4]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e017      	b.n	80008b8 <DrawFilledRectangle+0xa0>
		/* Draw lines */
		DrawLine(x, y + i, x + w, y + i);
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	b2d8      	uxtb	r0, r3
 800088c:	88bb      	ldrh	r3, [r7, #4]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	4413      	add	r3, r2
 8000894:	b2d9      	uxtb	r1, r3
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	887b      	ldrh	r3, [r7, #2]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4413      	add	r3, r2
 80008a0:	b2dc      	uxtb	r4, r3
 80008a2:	88bb      	ldrh	r3, [r7, #4]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	4413      	add	r3, r2
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4622      	mov	r2, r4
 80008ae:	f7ff feb9 	bl	8000624 <DrawLine>
	for (i = 0; i <= h; i++) {
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	883a      	ldrh	r2, [r7, #0]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d2e2      	bcs.n	8000888 <DrawFilledRectangle+0x70>
 80008c2:	e000      	b.n	80008c6 <DrawFilledRectangle+0xae>
		return;
 80008c4:	bf00      	nop
	}
}
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	20000001 	.word	0x20000001
 80008d0:	20000000 	.word	0x20000000

080008d4 <DrawCircle>:
/* draw circle
 * centre (x0,y0)
 * radius = radius
 */
void DrawCircle(uint8_t x0, uint8_t y0, uint8_t radius)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	460b      	mov	r3, r1
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	4613      	mov	r3, r2
 80008e4:	717b      	strb	r3, [r7, #5]
  int f = 1 - (int)radius;
 80008e6:	797b      	ldrb	r3, [r7, #5]
 80008e8:	f1c3 0301 	rsb	r3, r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  int ddF_x = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]

  int ddF_y = -2 * (int)radius;
 80008f2:	797a      	ldrb	r2, [r7, #5]
 80008f4:	4613      	mov	r3, r2
 80008f6:	07db      	lsls	r3, r3, #31
 80008f8:	1a9b      	subs	r3, r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
  int x = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]

  SetPixel(x0, y0 + radius);
 8000902:	79ba      	ldrb	r2, [r7, #6]
 8000904:	797b      	ldrb	r3, [r7, #5]
 8000906:	4413      	add	r3, r2
 8000908:	b2da      	uxtb	r2, r3
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe1e 	bl	8000550 <SetPixel>
  SetPixel(x0, y0 - radius);
 8000914:	79ba      	ldrb	r2, [r7, #6]
 8000916:	797b      	ldrb	r3, [r7, #5]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	b2da      	uxtb	r2, r3
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe15 	bl	8000550 <SetPixel>
  SetPixel(x0 + radius, y0);
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	797b      	ldrb	r3, [r7, #5]
 800092a:	4413      	add	r3, r2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	79ba      	ldrb	r2, [r7, #6]
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe0c 	bl	8000550 <SetPixel>
  SetPixel(x0 - radius, y0);
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	797b      	ldrb	r3, [r7, #5]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	79ba      	ldrb	r2, [r7, #6]
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe03 	bl	8000550 <SetPixel>

  int y = radius;
 800094a:	797b      	ldrb	r3, [r7, #5]
 800094c:	60fb      	str	r3, [r7, #12]
  while(x < y)
 800094e:	e07e      	b.n	8000a4e <DrawCircle+0x17a>
  {
    if(f >= 0)
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db09      	blt.n	800096a <DrawCircle+0x96>
    {
      y--;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3b01      	subs	r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
      ddF_y += 2;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3302      	adds	r3, #2
 8000960:	617b      	str	r3, [r7, #20]
      f += ddF_y;
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	4413      	add	r3, r2
 8000968:	61fb      	str	r3, [r7, #28]
    }
    x++;
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	3301      	adds	r3, #1
 800096e:	613b      	str	r3, [r7, #16]
    ddF_x += 2;
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	3302      	adds	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    f += ddF_x;
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	4413      	add	r3, r2
 800097c:	61fb      	str	r3, [r7, #28]
    SetPixel(x0 + x, y0 + y);
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4413      	add	r3, r2
 8000986:	b2d8      	uxtb	r0, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	4413      	add	r3, r2
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	f7ff fddc 	bl	8000550 <SetPixel>
    SetPixel(x0 - x, y0 + y);
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	4413      	add	r3, r2
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4619      	mov	r1, r3
 80009ae:	f7ff fdcf 	bl	8000550 <SetPixel>
    SetPixel(x0 + x, y0 - y);
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4413      	add	r3, r2
 80009ba:	b2d8      	uxtb	r0, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	79ba      	ldrb	r2, [r7, #6]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4619      	mov	r1, r3
 80009c8:	f7ff fdc2 	bl	8000550 <SetPixel>
    SetPixel(x0 - x, y0 - y);
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	b2d8      	uxtb	r0, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	79ba      	ldrb	r2, [r7, #6]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	f7ff fdb5 	bl	8000550 <SetPixel>
    SetPixel(x0 + y, y0 + x);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4413      	add	r3, r2
 80009ee:	b2d8      	uxtb	r0, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	4413      	add	r3, r2
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4619      	mov	r1, r3
 80009fc:	f7ff fda8 	bl	8000550 <SetPixel>
    SetPixel(x0 - y, y0 + x);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	b2d8      	uxtb	r0, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	4413      	add	r3, r2
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4619      	mov	r1, r3
 8000a16:	f7ff fd9b 	bl	8000550 <SetPixel>
    SetPixel(x0 + y, y0 - x);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4413      	add	r3, r2
 8000a22:	b2d8      	uxtb	r0, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	79ba      	ldrb	r2, [r7, #6]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f7ff fd8e 	bl	8000550 <SetPixel>
    SetPixel(x0 - y, y0 - x);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	b2d8      	uxtb	r0, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	79ba      	ldrb	r2, [r7, #6]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f7ff fd81 	bl	8000550 <SetPixel>
  while(x < y)
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	f6ff af7c 	blt.w	8000950 <DrawCircle+0x7c>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <DrawFilledCircle>:


// Draw Filled Circle

void DrawFilledCircle(int16_t x0, int16_t y0, int16_t r)
{
 8000a62:	b590      	push	{r4, r7, lr}
 8000a64:	b087      	sub	sp, #28
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	80bb      	strh	r3, [r7, #4]
 8000a70:	4613      	mov	r3, r2
 8000a72:	807b      	strh	r3, [r7, #2]
	int16_t f = 1 - r;
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	f1c3 0301 	rsb	r3, r3, #1
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	461a      	mov	r2, r3
 8000a86:	03d2      	lsls	r2, r2, #15
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	81fb      	strh	r3, [r7, #14]

    SetPixel(x0, y0 + r);
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	b2d8      	uxtb	r0, r3
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f7ff fd51 	bl	8000550 <SetPixel>
    SetPixel(x0, y0 - r);
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	b2d8      	uxtb	r0, r3
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f7ff fd46 	bl	8000550 <SetPixel>
    SetPixel(x0 + r, y0);
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4413      	add	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	88ba      	ldrh	r2, [r7, #4]
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fd3a 	bl	8000550 <SetPixel>
    SetPixel(x0 - r, y0);
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	887b      	ldrh	r3, [r7, #2]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd2e 	bl	8000550 <SetPixel>
    DrawLine(x0 - r, y0, x0 + r, y0);
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	887b      	ldrh	r3, [r7, #2]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	b2d8      	uxtb	r0, r3
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	b2d9      	uxtb	r1, r3
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f7ff fd86 	bl	8000624 <DrawLine>

    while (x < y) {
 8000b18:	e08d      	b.n	8000c36 <DrawFilledCircle+0x1d4>
        if (f >= 0) {
 8000b1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0e      	blt.n	8000b40 <DrawFilledCircle+0xde>
            y--;
 8000b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000b2e:	8a7b      	ldrh	r3, [r7, #18]
 8000b30:	3302      	adds	r3, #2
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000b36:	8afa      	ldrh	r2, [r7, #22]
 8000b38:	8a7b      	ldrh	r3, [r7, #18]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000b40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	3301      	adds	r3, #1
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000b4c:	8abb      	ldrh	r3, [r7, #20]
 8000b4e:	3302      	adds	r3, #2
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000b54:	8afa      	ldrh	r2, [r7, #22]
 8000b56:	8abb      	ldrh	r3, [r7, #20]
 8000b58:	4413      	add	r3, r2
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	82fb      	strh	r3, [r7, #22]

        DrawLine(x0 - x, y0 + y, x0 + x, y0 + y);
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	8a3b      	ldrh	r3, [r7, #16]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	b2d8      	uxtb	r0, r3
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	8a3b      	ldrh	r3, [r7, #16]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2dc      	uxtb	r4, r3
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	89fb      	ldrh	r3, [r7, #14]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4622      	mov	r2, r4
 8000b90:	f7ff fd48 	bl	8000624 <DrawLine>
        DrawLine(x0 + x, y0 - y, x0 - x, y0 - y);
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	8a3b      	ldrh	r3, [r7, #16]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b2d8      	uxtb	r0, r3
 8000ba0:	88bb      	ldrh	r3, [r7, #4]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b2d9      	uxtb	r1, r3
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	8a3b      	ldrh	r3, [r7, #16]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b2dc      	uxtb	r4, r3
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	89fb      	ldrh	r3, [r7, #14]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	4622      	mov	r2, r4
 8000bc6:	f7ff fd2d 	bl	8000624 <DrawLine>

        DrawLine(x0 + y, y0 + x, x0 - y, y0 + x);
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b2d8      	uxtb	r0, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	8a3b      	ldrh	r3, [r7, #16]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	b2d9      	uxtb	r1, r3
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	b2dc      	uxtb	r4, r3
 8000bee:	88bb      	ldrh	r3, [r7, #4]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	8a3b      	ldrh	r3, [r7, #16]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4622      	mov	r2, r4
 8000bfc:	f7ff fd12 	bl	8000624 <DrawLine>
        DrawLine(x0 + y, y0 - x, x0 - y, y0 - x);
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	b2d8      	uxtb	r0, r3
 8000c0c:	88bb      	ldrh	r3, [r7, #4]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	8a3b      	ldrh	r3, [r7, #16]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	b2d9      	uxtb	r1, r3
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	89fb      	ldrh	r3, [r7, #14]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b2dc      	uxtb	r4, r3
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	8a3b      	ldrh	r3, [r7, #16]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4622      	mov	r2, r4
 8000c32:	f7ff fcf7 	bl	8000624 <DrawLine>
    while (x < y) {
 8000c36:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	f6ff af6b 	blt.w	8000b1a <DrawFilledCircle+0xb8>
    }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}

08000c4e <DrawFilledTriangle>:



// Draw Filled Traingle with coordimates (x1, y1), (x2, y2), (x3, y3)
void DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3)
{
 8000c4e:	b590      	push	{r4, r7, lr}
 8000c50:	b08b      	sub	sp, #44	; 0x2c
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4604      	mov	r4, r0
 8000c56:	4608      	mov	r0, r1
 8000c58:	4611      	mov	r1, r2
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4623      	mov	r3, r4
 8000c5e:	80fb      	strh	r3, [r7, #6]
 8000c60:	4603      	mov	r3, r0
 8000c62:	80bb      	strh	r3, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	823b      	strh	r3, [r7, #16]
 8000c70:	2300      	movs	r3, #0
 8000c72:	81fb      	strh	r3, [r7, #14]
 8000c74:	2300      	movs	r3, #0
 8000c76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000c78:	2300      	movs	r3, #0
 8000c7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000c80:	2300      	movs	r3, #0
 8000c82:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8000c84:	2300      	movs	r3, #0
 8000c86:	83fb      	strh	r3, [r7, #30]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	83bb      	strh	r3, [r7, #28]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	837b      	strh	r3, [r7, #26]
 8000c90:	2300      	movs	r3, #0
 8000c92:	833b      	strh	r3, [r7, #24]
 8000c94:	2300      	movs	r3, #0
 8000c96:	82fb      	strh	r3, [r7, #22]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	827b      	strh	r3, [r7, #18]

#define ABS(x)   ((x) > 0 ? (x) : -(x))

	deltax = ABS(x2 - x1);
 8000ca0:	887a      	ldrh	r2, [r7, #2]
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bfb8      	it	lt
 8000caa:	425b      	neglt	r3, r3
 8000cac:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8000cae:	883a      	ldrh	r2, [r7, #0]
 8000cb0:	88bb      	ldrh	r3, [r7, #4]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bfb8      	it	lt
 8000cb8:	425b      	neglt	r3, r3
 8000cba:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8000cc4:	887a      	ldrh	r2, [r7, #2]
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d304      	bcc.n	8000cd6 <DrawFilledTriangle+0x88>
		xinc1 = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	843b      	strh	r3, [r7, #32]
 8000cd4:	e005      	b.n	8000ce2 <DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 8000cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cda:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8000cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce0:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8000ce2:	883a      	ldrh	r2, [r7, #0]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d304      	bcc.n	8000cf4 <DrawFilledTriangle+0xa6>
		yinc1 = 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	83bb      	strh	r3, [r7, #28]
 8000cf2:	e005      	b.n	8000d00 <DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 8000cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf8:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8000cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfe:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 8000d00:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	db10      	blt.n	8000d2e <DrawFilledTriangle+0xe0>
		xinc1 = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8000d14:	8a3b      	ldrh	r3, [r7, #16]
 8000d16:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8000d18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d1c:	0fda      	lsrs	r2, r3, #31
 8000d1e:	4413      	add	r3, r2
 8000d20:	105b      	asrs	r3, r3, #1
 8000d22:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8000d24:	89fb      	ldrh	r3, [r7, #14]
 8000d26:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8000d28:	8a3b      	ldrh	r3, [r7, #16]
 8000d2a:	82bb      	strh	r3, [r7, #20]
 8000d2c:	e00f      	b.n	8000d4e <DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8000d36:	89fb      	ldrh	r3, [r7, #14]
 8000d38:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8000d3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d3e:	0fda      	lsrs	r2, r3, #31
 8000d40:	4413      	add	r3, r2
 8000d42:	105b      	asrs	r3, r3, #1
 8000d44:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8000d46:	8a3b      	ldrh	r3, [r7, #16]
 8000d48:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	827b      	strh	r3, [r7, #18]
 8000d52:	e033      	b.n	8000dbc <DrawFilledTriangle+0x16e>
	{
		DrawLine(x, y, x3, y3);
 8000d54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d56:	b2d8      	uxtb	r0, r3
 8000d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d5a:	b2d9      	uxtb	r1, r3
 8000d5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f7ff fc5e 	bl	8000624 <DrawLine>

		num += numadd;
 8000d68:	8b3a      	ldrh	r2, [r7, #24]
 8000d6a:	8afb      	ldrh	r3, [r7, #22]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8000d72:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000d76:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	db0e      	blt.n	8000d9c <DrawFilledTriangle+0x14e>
			num -= den;
 8000d7e:	8b3a      	ldrh	r2, [r7, #24]
 8000d80:	8b7b      	ldrh	r3, [r7, #26]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8000d88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8000d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d94:	8bfb      	ldrh	r3, [r7, #30]
 8000d96:	4413      	add	r3, r2
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8000d9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d9e:	8c3b      	ldrh	r3, [r7, #32]
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8000da6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000da8:	8bbb      	ldrh	r3, [r7, #28]
 8000daa:	4413      	add	r3, r2
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8000db0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	3301      	adds	r3, #1
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	827b      	strh	r3, [r7, #18]
 8000dbc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000dc0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	ddc5      	ble.n	8000d54 <DrawFilledTriangle+0x106>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	372c      	adds	r7, #44	; 0x2c
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd90      	pop	{r4, r7, pc}
	...

08000dd4 <delay_init>:

extern TIM_HandleTypeDef htim1;


void delay_init ()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);  // change this according to ur setup
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <delay_init+0x10>)
 8000dda:	f001 f96d 	bl	80020b8 <HAL_TIM_Base_Start>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000438 	.word	0x20000438

08000de8 <delay_us>:

void delay_us (uint16_t delay)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <delay_us+0x2c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
 8000dfa:	bf00      	nop
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <delay_us+0x2c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d3f9      	bcc.n	8000dfc <delay_us+0x14>
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	20000438 	.word	0x20000438

08000e18 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e1e:	f000 fa19 	bl	8001254 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e22:	f000 f879 	bl	8000f18 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e26:	f000 f90d 	bl	8001044 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000e2a:	f000 f8bb 	bl	8000fa4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	delay_init();
 8000e2e:	f7ff ffd1 	bl	8000dd4 <delay_init>
	ST7920_Init();
 8000e32:	f7ff fb4d 	bl	80004d0 <ST7920_Init>

	ST7920_SendString(0,0, "HELLO WORLD");
 8000e36:	4a32      	ldr	r2, [pc, #200]	; (8000f00 <main+0xe8>)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fa08 	bl	8000250 <ST7920_SendString>
	ST7920_SendString(1,0, "FROM");
 8000e40:	4a30      	ldr	r2, [pc, #192]	; (8000f04 <main+0xec>)
 8000e42:	2100      	movs	r1, #0
 8000e44:	2001      	movs	r0, #1
 8000e46:	f7ff fa03 	bl	8000250 <ST7920_SendString>
	ST7920_SendString(2,0, "CONTROLLERSTECH");
 8000e4a:	4a2f      	ldr	r2, [pc, #188]	; (8000f08 <main+0xf0>)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f7ff f9fe 	bl	8000250 <ST7920_SendString>
	ST7920_SendString(3,0, "1234567890!@#$%^");
 8000e54:	4a2d      	ldr	r2, [pc, #180]	; (8000f0c <main+0xf4>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f7ff f9f9 	bl	8000250 <ST7920_SendString>

	HAL_Delay(2000);
 8000e5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e62:	f000 fa59 	bl	8001318 <HAL_Delay>
	ST7920_Clear();
 8000e66:	f7ff faeb 	bl	8000440 <ST7920_Clear>

	ST7920_GraphicMode(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fa34 	bl	80002d8 <ST7920_GraphicMode>

	ST7920_DrawBitmap(bitmap);
 8000e70:	4827      	ldr	r0, [pc, #156]	; (8000f10 <main+0xf8>)
 8000e72:	f7ff fa61 	bl	8000338 <ST7920_DrawBitmap>

	HAL_Delay(2000);
 8000e76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7a:	f000 fa4d 	bl	8001318 <HAL_Delay>

	ST7920_Clear();
 8000e7e:	f7ff fadf 	bl	8000440 <ST7920_Clear>

	ST7920_DrawBitmap(logo);
 8000e82:	4824      	ldr	r0, [pc, #144]	; (8000f14 <main+0xfc>)
 8000e84:	f7ff fa58 	bl	8000338 <ST7920_DrawBitmap>

	ST7920_Clear();
 8000e88:	f7ff fada 	bl	8000440 <ST7920_Clear>

	HAL_Delay(100);
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f000 fa43 	bl	8001318 <HAL_Delay>

	DrawCircle(110, 31, 12);
 8000e92:	220c      	movs	r2, #12
 8000e94:	211f      	movs	r1, #31
 8000e96:	206e      	movs	r0, #110	; 0x6e
 8000e98:	f7ff fd1c 	bl	80008d4 <DrawCircle>

	DrawCircle(110, 31, 16);
 8000e9c:	2210      	movs	r2, #16
 8000e9e:	211f      	movs	r1, #31
 8000ea0:	206e      	movs	r0, #110	; 0x6e
 8000ea2:	f7ff fd17 	bl	80008d4 <DrawCircle>

	DrawLine(3, 60, 127, 33);
 8000ea6:	2321      	movs	r3, #33	; 0x21
 8000ea8:	227f      	movs	r2, #127	; 0x7f
 8000eaa:	213c      	movs	r1, #60	; 0x3c
 8000eac:	2003      	movs	r0, #3
 8000eae:	f7ff fbb9 	bl	8000624 <DrawLine>

	ST7920_Update();
 8000eb2:	f7ff fabb 	bl	800042c <ST7920_Update>

	DrawRectangle (100, 12, 20, 14);
 8000eb6:	230e      	movs	r3, #14
 8000eb8:	2214      	movs	r2, #20
 8000eba:	210c      	movs	r1, #12
 8000ebc:	2064      	movs	r0, #100	; 0x64
 8000ebe:	f7ff fc21 	bl	8000704 <DrawRectangle>

	ST7920_Update();
 8000ec2:	f7ff fab3 	bl	800042c <ST7920_Update>

	DrawFilledRectangle(30, 20, 30, 10);
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	221e      	movs	r2, #30
 8000eca:	2114      	movs	r1, #20
 8000ecc:	201e      	movs	r0, #30
 8000ece:	f7ff fca3 	bl	8000818 <DrawFilledRectangle>

	ST7920_Update();
 8000ed2:	f7ff faab 	bl	800042c <ST7920_Update>

	DrawFilledCircle(15, 30, 6);
 8000ed6:	2206      	movs	r2, #6
 8000ed8:	211e      	movs	r1, #30
 8000eda:	200f      	movs	r0, #15
 8000edc:	f7ff fdc1 	bl	8000a62 <DrawFilledCircle>

	ST7920_Update();
 8000ee0:	f7ff faa4 	bl	800042c <ST7920_Update>

	DrawFilledTriangle(1,5,10,5,6,15);
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	2306      	movs	r3, #6
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2305      	movs	r3, #5
 8000eee:	220a      	movs	r2, #10
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff feab 	bl	8000c4e <DrawFilledTriangle>

	ST7920_Update();
 8000ef8:	f7ff fa98 	bl	800042c <ST7920_Update>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000efc:	e7fe      	b.n	8000efc <main+0xe4>
 8000efe:	bf00      	nop
 8000f00:	080025f8 	.word	0x080025f8
 8000f04:	08002604 	.word	0x08002604
 8000f08:	0800260c 	.word	0x0800260c
 8000f0c:	0800261c 	.word	0x0800261c
 8000f10:	08002630 	.word	0x08002630
 8000f14:	08002a30 	.word	0x08002a30

08000f18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b090      	sub	sp, #64	; 0x40
 8000f1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0318 	add.w	r3, r7, #24
 8000f22:	2228      	movs	r2, #40	; 0x28
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fb52 	bl	80025d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f42:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fc7d 	bl	8001860 <HAL_RCC_OscConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000f6c:	f000 f8c8 	bl	8001100 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f70:	230f      	movs	r3, #15
 8000f72:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f74:	2302      	movs	r3, #2
 8000f76:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f80:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2102      	movs	r1, #2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fee8 	bl	8001d60 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000f96:	f000 f8b3 	bl	8001100 <Error_Handler>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3740      	adds	r7, #64	; 0x40
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_TIM1_Init+0x98>)
 8000fc2:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000fc4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72-1;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_TIM1_Init+0x98>)
 8000fc8:	2247      	movs	r2, #71	; 0x47
 8000fca:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_TIM1_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM1_Init+0x98>)
 8000fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_TIM1_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_TIM1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_TIM1_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <MX_TIM1_Init+0x98>)
 8000fee:	f001 f813 	bl	8002018 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8000ff8:	f000 f882 	bl	8001100 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_TIM1_Init+0x98>)
 800100a:	f001 f89f 	bl	800214c <HAL_TIM_ConfigClockSource>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8001014:	f000 f874 	bl	8001100 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_TIM1_Init+0x98>)
 8001026:	f001 fa51 	bl	80024cc <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001030:	f000 f866 	bl	8001100 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000438 	.word	0x20000438
 8001040:	40012c00 	.word	0x40012c00

08001044 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <MX_GPIO_Init+0xb0>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a25      	ldr	r2, [pc, #148]	; (80010f4 <MX_GPIO_Init+0xb0>)
 800105e:	f043 0320 	orr.w	r3, r3, #32
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <MX_GPIO_Init+0xb0>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_GPIO_Init+0xb0>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <MX_GPIO_Init+0xb0>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_GPIO_Init+0xb0>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_GPIO_Init+0xb0>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <MX_GPIO_Init+0xb0>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_GPIO_Init+0xb0>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	21e0      	movs	r1, #224	; 0xe0
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <MX_GPIO_Init+0xb4>)
 80010a6:	f000 fbc3 	bl	8001830 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2101      	movs	r1, #1
 80010ae:	4813      	ldr	r0, [pc, #76]	; (80010fc <MX_GPIO_Init+0xb8>)
 80010b0:	f000 fbbe 	bl	8001830 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010b4:	23e0      	movs	r3, #224	; 0xe0
 80010b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	480b      	ldr	r0, [pc, #44]	; (80010f8 <MX_GPIO_Init+0xb4>)
 80010cc:	f000 fa2c 	bl	8001528 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010d0:	2301      	movs	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2302      	movs	r3, #2
 80010de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_GPIO_Init+0xb8>)
 80010e8:	f000 fa1e 	bl	8001528 <HAL_GPIO_Init>

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010800 	.word	0x40010800
 80010fc:	40010c00 	.word	0x40010c00

08001100 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>
	...

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_MspInit+0x5c>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <HAL_MspInit+0x5c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_MspInit+0x5c>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x5c>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_MspInit+0x5c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_MspInit+0x60>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_MspInit+0x60>)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000

08001170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <HAL_TIM_Base_MspInit+0x34>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10b      	bne.n	800119a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_TIM_Base_MspInit+0x38>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_TIM_Base_MspInit+0x38>)
 8001188:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_TIM_Base_MspInit+0x38>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40012c00 	.word	0x40012c00
 80011a8:	40021000 	.word	0x40021000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f2:	f000 f875 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}

080011fa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001208:	f7ff fff7 	bl	80011fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800120e:	490c      	ldr	r1, [pc, #48]	; (8001240 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001224:	4c09      	ldr	r4, [pc, #36]	; (800124c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001232:	f001 f9a9 	bl	8002588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001236:	f7ff fdef 	bl	8000e18 <main>
  bx lr
 800123a:	4770      	bx	lr
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001244:	08002e5c 	.word	0x08002e5c
  ldr r2, =_sbss
 8001248:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800124c:	20000484 	.word	0x20000484

08001250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC1_2_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_Init+0x28>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_Init+0x28>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f92b 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	200f      	movs	r0, #15
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff ff4c 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f935 	bl	800150e <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 f90b 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000004 	.word	0x20000004
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x1c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_IncTick+0x20>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a03      	ldr	r2, [pc, #12]	; (8001300 <HAL_IncTick+0x20>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	20000480 	.word	0x20000480

08001304 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <HAL_GetTick+0x10>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	20000480 	.word	0x20000480

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff fff0 	bl	8001304 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffe0 	bl	8001304 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000000c 	.word	0x2000000c

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff90 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff49 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff5e 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff90 	bl	8001418 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5f 	bl	80013c4 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffb0 	bl	800147c <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b08b      	sub	sp, #44	; 0x2c
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	e169      	b.n	8001810 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800153c:	2201      	movs	r2, #1
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	429a      	cmp	r2, r3
 8001556:	f040 8158 	bne.w	800180a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a9a      	ldr	r2, [pc, #616]	; (80017c8 <HAL_GPIO_Init+0x2a0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d05e      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001564:	4a98      	ldr	r2, [pc, #608]	; (80017c8 <HAL_GPIO_Init+0x2a0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d875      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 800156a:	4a98      	ldr	r2, [pc, #608]	; (80017cc <HAL_GPIO_Init+0x2a4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d058      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001570:	4a96      	ldr	r2, [pc, #600]	; (80017cc <HAL_GPIO_Init+0x2a4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d86f      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 8001576:	4a96      	ldr	r2, [pc, #600]	; (80017d0 <HAL_GPIO_Init+0x2a8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d052      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 800157c:	4a94      	ldr	r2, [pc, #592]	; (80017d0 <HAL_GPIO_Init+0x2a8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d869      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 8001582:	4a94      	ldr	r2, [pc, #592]	; (80017d4 <HAL_GPIO_Init+0x2ac>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d04c      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001588:	4a92      	ldr	r2, [pc, #584]	; (80017d4 <HAL_GPIO_Init+0x2ac>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d863      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 800158e:	4a92      	ldr	r2, [pc, #584]	; (80017d8 <HAL_GPIO_Init+0x2b0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d046      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001594:	4a90      	ldr	r2, [pc, #576]	; (80017d8 <HAL_GPIO_Init+0x2b0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d85d      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 800159a:	2b12      	cmp	r3, #18
 800159c:	d82a      	bhi.n	80015f4 <HAL_GPIO_Init+0xcc>
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d859      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <HAL_GPIO_Init+0x80>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	08001623 	.word	0x08001623
 80015ac:	080015fd 	.word	0x080015fd
 80015b0:	0800160f 	.word	0x0800160f
 80015b4:	08001651 	.word	0x08001651
 80015b8:	08001657 	.word	0x08001657
 80015bc:	08001657 	.word	0x08001657
 80015c0:	08001657 	.word	0x08001657
 80015c4:	08001657 	.word	0x08001657
 80015c8:	08001657 	.word	0x08001657
 80015cc:	08001657 	.word	0x08001657
 80015d0:	08001657 	.word	0x08001657
 80015d4:	08001657 	.word	0x08001657
 80015d8:	08001657 	.word	0x08001657
 80015dc:	08001657 	.word	0x08001657
 80015e0:	08001657 	.word	0x08001657
 80015e4:	08001657 	.word	0x08001657
 80015e8:	08001657 	.word	0x08001657
 80015ec:	08001605 	.word	0x08001605
 80015f0:	08001619 	.word	0x08001619
 80015f4:	4a79      	ldr	r2, [pc, #484]	; (80017dc <HAL_GPIO_Init+0x2b4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015fa:	e02c      	b.n	8001656 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e029      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	3304      	adds	r3, #4
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e024      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	3308      	adds	r3, #8
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e01f      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	330c      	adds	r3, #12
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e01a      	b.n	8001658 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800162a:	2304      	movs	r3, #4
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e013      	b.n	8001658 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001638:	2308      	movs	r3, #8
 800163a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	611a      	str	r2, [r3, #16]
          break;
 8001642:	e009      	b.n	8001658 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001644:	2308      	movs	r3, #8
 8001646:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	615a      	str	r2, [r3, #20]
          break;
 800164e:	e003      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x130>
          break;
 8001656:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2bff      	cmp	r3, #255	; 0xff
 800165c:	d801      	bhi.n	8001662 <HAL_GPIO_Init+0x13a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	e001      	b.n	8001666 <HAL_GPIO_Init+0x13e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3304      	adds	r3, #4
 8001666:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2bff      	cmp	r3, #255	; 0xff
 800166c:	d802      	bhi.n	8001674 <HAL_GPIO_Init+0x14c>
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x152>
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	3b08      	subs	r3, #8
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	210f      	movs	r1, #15
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	401a      	ands	r2, r3
 800168c:	6a39      	ldr	r1, [r7, #32]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	431a      	orrs	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80b1 	beq.w	800180a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a8:	4b4d      	ldr	r3, [pc, #308]	; (80017e0 <HAL_GPIO_Init+0x2b8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a4c      	ldr	r2, [pc, #304]	; (80017e0 <HAL_GPIO_Init+0x2b8>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <HAL_GPIO_Init+0x2b8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c0:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_GPIO_Init+0x2bc>)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a40      	ldr	r2, [pc, #256]	; (80017e8 <HAL_GPIO_Init+0x2c0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d013      	beq.n	8001714 <HAL_GPIO_Init+0x1ec>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a3f      	ldr	r2, [pc, #252]	; (80017ec <HAL_GPIO_Init+0x2c4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00d      	beq.n	8001710 <HAL_GPIO_Init+0x1e8>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3e      	ldr	r2, [pc, #248]	; (80017f0 <HAL_GPIO_Init+0x2c8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d007      	beq.n	800170c <HAL_GPIO_Init+0x1e4>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3d      	ldr	r2, [pc, #244]	; (80017f4 <HAL_GPIO_Init+0x2cc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_GPIO_Init+0x1e0>
 8001704:	2303      	movs	r3, #3
 8001706:	e006      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001708:	2304      	movs	r3, #4
 800170a:	e004      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 800170c:	2302      	movs	r3, #2
 800170e:	e002      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001714:	2300      	movs	r3, #0
 8001716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001718:	f002 0203 	and.w	r2, r2, #3
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	4093      	lsls	r3, r2
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001726:	492f      	ldr	r1, [pc, #188]	; (80017e4 <HAL_GPIO_Init+0x2bc>)
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	492c      	ldr	r1, [pc, #176]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	4928      	ldr	r1, [pc, #160]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001758:	4013      	ands	r3, r2
 800175a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	60cb      	str	r3, [r1, #12]
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	491e      	ldr	r1, [pc, #120]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001780:	4013      	ands	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4918      	ldr	r1, [pc, #96]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4914      	ldr	r1, [pc, #80]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d021      	beq.n	80017fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	490e      	ldr	r1, [pc, #56]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e021      	b.n	800180a <HAL_GPIO_Init+0x2e2>
 80017c6:	bf00      	nop
 80017c8:	10320000 	.word	0x10320000
 80017cc:	10310000 	.word	0x10310000
 80017d0:	10220000 	.word	0x10220000
 80017d4:	10210000 	.word	0x10210000
 80017d8:	10120000 	.word	0x10120000
 80017dc:	10110000 	.word	0x10110000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40010800 	.word	0x40010800
 80017ec:	40010c00 	.word	0x40010c00
 80017f0:	40011000 	.word	0x40011000
 80017f4:	40011400 	.word	0x40011400
 80017f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_GPIO_Init+0x304>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	43db      	mvns	r3, r3
 8001804:	4909      	ldr	r1, [pc, #36]	; (800182c <HAL_GPIO_Init+0x304>)
 8001806:	4013      	ands	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	3301      	adds	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	f47f ae8e 	bne.w	800153c <HAL_GPIO_Init+0x14>
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	372c      	adds	r7, #44	; 0x2c
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40010400 	.word	0x40010400

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800184c:	e003      	b.n	8001856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	041a      	lsls	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e26c      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8087 	beq.w	800198e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001880:	4b92      	ldr	r3, [pc, #584]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b04      	cmp	r3, #4
 800188a:	d00c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800188c:	4b8f      	ldr	r3, [pc, #572]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d112      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
 8001898:	4b8c      	ldr	r3, [pc, #560]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d10b      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a6:	4b89      	ldr	r3, [pc, #548]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d06c      	beq.n	800198c <HAL_RCC_OscConfig+0x12c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d168      	bne.n	800198c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e246      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x76>
 80018c8:	4b80      	ldr	r3, [pc, #512]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a7f      	ldr	r2, [pc, #508]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e02e      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x98>
 80018de:	4b7b      	ldr	r3, [pc, #492]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a7a      	ldr	r2, [pc, #488]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b78      	ldr	r3, [pc, #480]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a77      	ldr	r2, [pc, #476]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e01d      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0xbc>
 8001902:	4b72      	ldr	r3, [pc, #456]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a71      	ldr	r2, [pc, #452]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a6e      	ldr	r2, [pc, #440]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 800191c:	4b6b      	ldr	r3, [pc, #428]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a6a      	ldr	r2, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a67      	ldr	r2, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800192e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001932:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fce2 	bl	8001304 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff fcde 	bl	8001304 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1fa      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0xe4>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fcce 	bl	8001304 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fcca 	bl	8001304 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1e6      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x10c>
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019a6:	4b49      	ldr	r3, [pc, #292]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d11c      	bne.n	80019ec <HAL_RCC_OscConfig+0x18c>
 80019b2:	4b46      	ldr	r3, [pc, #280]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d116      	bne.n	80019ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	4b43      	ldr	r3, [pc, #268]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_OscConfig+0x176>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e1ba      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4939      	ldr	r1, [pc, #228]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	e03a      	b.n	8001a62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fc83 	bl	8001304 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fc7f 	bl	8001304 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e19b      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4927      	ldr	r1, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc62 	bl	8001304 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff fc5e 	bl	8001304 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e17a      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03a      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d019      	beq.n	8001aaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fc42 	bl	8001304 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff fc3e 	bl	8001304 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e15a      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f000 fa9a 	bl	8001fdc <RCC_Delay>
 8001aa8:	e01c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fc28 	bl	8001304 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab6:	e00f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fc24 	bl	8001304 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d908      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e140      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	42420000 	.word	0x42420000
 8001ad4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b9e      	ldr	r3, [pc, #632]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1e9      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a6 	beq.w	8001c3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	4b97      	ldr	r3, [pc, #604]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10d      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b94      	ldr	r3, [pc, #592]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a93      	ldr	r2, [pc, #588]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b91      	ldr	r3, [pc, #580]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b8e      	ldr	r3, [pc, #568]	; (8001d58 <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b8b      	ldr	r3, [pc, #556]	; (8001d58 <HAL_RCC_OscConfig+0x4f8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a8a      	ldr	r2, [pc, #552]	; (8001d58 <HAL_RCC_OscConfig+0x4f8>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fbe5 	bl	8001304 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff fbe1 	bl	8001304 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0fd      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b81      	ldr	r3, [pc, #516]	; (8001d58 <HAL_RCC_OscConfig+0x4f8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x312>
 8001b64:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a7a      	ldr	r2, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	e02d      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x334>
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a75      	ldr	r2, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a72      	ldr	r2, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	e01c      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d10c      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x356>
 8001b9c:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a6c      	ldr	r2, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a69      	ldr	r2, [pc, #420]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6213      	str	r3, [r2, #32]
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a66      	ldr	r2, [pc, #408]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a63      	ldr	r2, [pc, #396]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fb95 	bl	8001304 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff fb91 	bl	8001304 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0ab      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	4b57      	ldr	r3, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ee      	beq.n	8001bde <HAL_RCC_OscConfig+0x37e>
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb7f 	bl	8001304 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff fb7b 	bl	8001304 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e095      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d105      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c32:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a47      	ldr	r2, [pc, #284]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8081 	beq.w	8001d4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c48:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d061      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d146      	bne.n	8001cea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <HAL_RCC_OscConfig+0x4fc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb4f 	bl	8001304 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff fb4b 	bl	8001304 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e067      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d108      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	492d      	ldr	r1, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a19      	ldr	r1, [r3, #32]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	4927      	ldr	r1, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_RCC_OscConfig+0x4fc>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fb1f 	bl	8001304 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff fb1b 	bl	8001304 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e037      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x46a>
 8001ce8:	e02f      	b.n	8001d4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_RCC_OscConfig+0x4fc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fb08 	bl	8001304 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff fb04 	bl	8001304 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e020      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x498>
 8001d16:	e018      	b.n	8001d4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	42420060 	.word	0x42420060

08001d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0d0      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d910      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 0207 	bic.w	r2, r3, #7
 8001d8a:	4965      	ldr	r1, [pc, #404]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0b8      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a58      	ldr	r2, [pc, #352]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	494d      	ldr	r1, [pc, #308]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d040      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d115      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e07f      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e073      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e06b      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f023 0203 	bic.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4936      	ldr	r1, [pc, #216]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e50:	f7ff fa58 	bl	8001304 <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7ff fa54 	bl	8001304 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e053      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 020c 	and.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1eb      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d210      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4922      	ldr	r1, [pc, #136]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e032      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4916      	ldr	r1, [pc, #88]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	490e      	ldr	r1, [pc, #56]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eee:	f000 f821 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	490a      	ldr	r1, [pc, #40]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001f00:	5ccb      	ldrb	r3, [r1, r3]
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1cc>)
 8001f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1d0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f9b6 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40022000 	.word	0x40022000
 8001f24:	40021000 	.word	0x40021000
 8001f28:	08002e30 	.word	0x08002e30
 8001f2c:	20000004 	.word	0x20000004
 8001f30:	20000008 	.word	0x20000008

08001f34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d002      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x30>
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d003      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0x36>
 8001f62:	e027      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f66:	613b      	str	r3, [r7, #16]
      break;
 8001f68:	e027      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0c9b      	lsrs	r3, r3, #18
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f74:	5cd3      	ldrb	r3, [r2, r3]
 8001f76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0c5b      	lsrs	r3, r3, #17
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f96:	fb02 f203 	mul.w	r2, r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e004      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	613b      	str	r3, [r7, #16]
      break;
 8001fb2:	e002      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb6:	613b      	str	r3, [r7, #16]
      break;
 8001fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fba:	693b      	ldr	r3, [r7, #16]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	007a1200 	.word	0x007a1200
 8001fd0:	08002e40 	.word	0x08002e40
 8001fd4:	08002e50 	.word	0x08002e50
 8001fd8:	003d0900 	.word	0x003d0900

08001fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <RCC_Delay+0x34>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <RCC_Delay+0x38>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0a5b      	lsrs	r3, r3, #9
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff8:	bf00      	nop
  }
  while (Delay --);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	60fa      	str	r2, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <RCC_Delay+0x1c>
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000004 	.word	0x20000004
 8002014:	10624dd3 	.word	0x10624dd3

08002018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e041      	b.n	80020ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff f896 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f000 f940 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d001      	beq.n	80020d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_TIM_Base_Start+0x88>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00e      	beq.n	8002100 <HAL_TIM_Base_Start+0x48>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ea:	d009      	beq.n	8002100 <HAL_TIM_Base_Start+0x48>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_TIM_Base_Start+0x8c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_TIM_Base_Start+0x48>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_TIM_Base_Start+0x90>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b06      	cmp	r3, #6
 8002110:	d010      	beq.n	8002134 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002122:	e007      	b.n	8002134 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40012c00 	.word	0x40012c00
 8002144:	40000400 	.word	0x40000400
 8002148:	40000800 	.word	0x40000800

0800214c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_TIM_ConfigClockSource+0x1c>
 8002164:	2302      	movs	r3, #2
 8002166:	e0b4      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x186>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800218e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a0:	d03e      	beq.n	8002220 <HAL_TIM_ConfigClockSource+0xd4>
 80021a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a6:	f200 8087 	bhi.w	80022b8 <HAL_TIM_ConfigClockSource+0x16c>
 80021aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ae:	f000 8086 	beq.w	80022be <HAL_TIM_ConfigClockSource+0x172>
 80021b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b6:	d87f      	bhi.n	80022b8 <HAL_TIM_ConfigClockSource+0x16c>
 80021b8:	2b70      	cmp	r3, #112	; 0x70
 80021ba:	d01a      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0xa6>
 80021bc:	2b70      	cmp	r3, #112	; 0x70
 80021be:	d87b      	bhi.n	80022b8 <HAL_TIM_ConfigClockSource+0x16c>
 80021c0:	2b60      	cmp	r3, #96	; 0x60
 80021c2:	d050      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x11a>
 80021c4:	2b60      	cmp	r3, #96	; 0x60
 80021c6:	d877      	bhi.n	80022b8 <HAL_TIM_ConfigClockSource+0x16c>
 80021c8:	2b50      	cmp	r3, #80	; 0x50
 80021ca:	d03c      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0xfa>
 80021cc:	2b50      	cmp	r3, #80	; 0x50
 80021ce:	d873      	bhi.n	80022b8 <HAL_TIM_ConfigClockSource+0x16c>
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	d058      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x13a>
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d86f      	bhi.n	80022b8 <HAL_TIM_ConfigClockSource+0x16c>
 80021d8:	2b30      	cmp	r3, #48	; 0x30
 80021da:	d064      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0x15a>
 80021dc:	2b30      	cmp	r3, #48	; 0x30
 80021de:	d86b      	bhi.n	80022b8 <HAL_TIM_ConfigClockSource+0x16c>
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d060      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0x15a>
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d867      	bhi.n	80022b8 <HAL_TIM_ConfigClockSource+0x16c>
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d05c      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0x15a>
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	d05a      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0x15a>
 80021f0:	e062      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6899      	ldr	r1, [r3, #8]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f000 f944 	bl	800248e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	609a      	str	r2, [r3, #8]
      break;
 800221e:	e04f      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f000 f92d 	bl	800248e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002242:	609a      	str	r2, [r3, #8]
      break;
 8002244:	e03c      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	461a      	mov	r2, r3
 8002254:	f000 f8a4 	bl	80023a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2150      	movs	r1, #80	; 0x50
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f8fb 	bl	800245a <TIM_ITRx_SetConfig>
      break;
 8002264:	e02c      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6859      	ldr	r1, [r3, #4]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	461a      	mov	r2, r3
 8002274:	f000 f8c2 	bl	80023fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2160      	movs	r1, #96	; 0x60
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f8eb 	bl	800245a <TIM_ITRx_SetConfig>
      break;
 8002284:	e01c      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6859      	ldr	r1, [r3, #4]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	461a      	mov	r2, r3
 8002294:	f000 f884 	bl	80023a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2140      	movs	r1, #64	; 0x40
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f8db 	bl	800245a <TIM_ITRx_SetConfig>
      break;
 80022a4:	e00c      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4619      	mov	r1, r3
 80022b0:	4610      	mov	r0, r2
 80022b2:	f000 f8d2 	bl	800245a <TIM_ITRx_SetConfig>
      break;
 80022b6:	e003      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      break;
 80022bc:	e000      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a29      	ldr	r2, [pc, #164]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00b      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fa:	d007      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a26      	ldr	r2, [pc, #152]	; (8002398 <TIM_Base_SetConfig+0xbc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <TIM_Base_SetConfig+0xc0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00b      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d007      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <TIM_Base_SetConfig+0xbc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <TIM_Base_SetConfig+0xc0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d108      	bne.n	8002350 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d103      	bne.n	8002384 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800

080023a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0201 	bic.w	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f023 030a 	bic.w	r3, r3, #10
 80023dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	621a      	str	r2, [r3, #32]
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f023 0210 	bic.w	r2, r3, #16
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	031b      	lsls	r3, r3, #12
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002438:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	621a      	str	r2, [r3, #32]
}
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800245a:	b480      	push	{r7}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	f043 0307 	orr.w	r3, r3, #7
 800247c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800248e:	b480      	push	{r7}
 8002490:	b087      	sub	sp, #28
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	021a      	lsls	r2, r3, #8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	609a      	str	r2, [r3, #8]
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e046      	b.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00e      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002530:	d009      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10c      	bne.n	8002560 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800254c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4313      	orrs	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40000400 	.word	0x40000400
 8002584:	40000800 	.word	0x40000800

08002588 <__libc_init_array>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	2600      	movs	r6, #0
 800258c:	4d0c      	ldr	r5, [pc, #48]	; (80025c0 <__libc_init_array+0x38>)
 800258e:	4c0d      	ldr	r4, [pc, #52]	; (80025c4 <__libc_init_array+0x3c>)
 8002590:	1b64      	subs	r4, r4, r5
 8002592:	10a4      	asrs	r4, r4, #2
 8002594:	42a6      	cmp	r6, r4
 8002596:	d109      	bne.n	80025ac <__libc_init_array+0x24>
 8002598:	f000 f822 	bl	80025e0 <_init>
 800259c:	2600      	movs	r6, #0
 800259e:	4d0a      	ldr	r5, [pc, #40]	; (80025c8 <__libc_init_array+0x40>)
 80025a0:	4c0a      	ldr	r4, [pc, #40]	; (80025cc <__libc_init_array+0x44>)
 80025a2:	1b64      	subs	r4, r4, r5
 80025a4:	10a4      	asrs	r4, r4, #2
 80025a6:	42a6      	cmp	r6, r4
 80025a8:	d105      	bne.n	80025b6 <__libc_init_array+0x2e>
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b0:	4798      	blx	r3
 80025b2:	3601      	adds	r6, #1
 80025b4:	e7ee      	b.n	8002594 <__libc_init_array+0xc>
 80025b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ba:	4798      	blx	r3
 80025bc:	3601      	adds	r6, #1
 80025be:	e7f2      	b.n	80025a6 <__libc_init_array+0x1e>
 80025c0:	08002e54 	.word	0x08002e54
 80025c4:	08002e54 	.word	0x08002e54
 80025c8:	08002e54 	.word	0x08002e54
 80025cc:	08002e58 	.word	0x08002e58

080025d0 <memset>:
 80025d0:	4603      	mov	r3, r0
 80025d2:	4402      	add	r2, r0
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d100      	bne.n	80025da <memset+0xa>
 80025d8:	4770      	bx	lr
 80025da:	f803 1b01 	strb.w	r1, [r3], #1
 80025de:	e7f9      	b.n	80025d4 <memset+0x4>

080025e0 <_init>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	bf00      	nop
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr

080025ec <_fini>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	bf00      	nop
 80025f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f2:	bc08      	pop	{r3}
 80025f4:	469e      	mov	lr, r3
 80025f6:	4770      	bx	lr
