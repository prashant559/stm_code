
UartTxRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005684  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d80  08005d80  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005d80  08005d80  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d80  08005d80  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f74  20000020  08005da8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f94  08005da8  00020f94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf62  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002126  00000000  00000000  0002cfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001775a  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9c0  00000000  00000000  00047aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080b55  00000000  00000000  0005548a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5fdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002664  00000000  00000000  000d6034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08005778 	.word	0x08005778

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08005778 	.word	0x08005778

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <send_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart (char *string)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	b29a      	uxth	r2, r3
 8000172:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000176:	6879      	ldr	r1, [r7, #4]
 8000178:	4803      	ldr	r0, [pc, #12]	; (8000188 <send_uart+0x2c>)
 800017a:	f001 fa4b 	bl	8001614 <HAL_UART_Transmit>
}
 800017e:	bf00      	nop
 8000180:	3710      	adds	r7, #16
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	200004b0 	.word	0x200004b0

0800018c <bufclear>:
	return i;
}


void bufclear (void)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
	int i;
	for(i=0; i<1024; i++)
 8000192:	2300      	movs	r3, #0
 8000194:	607b      	str	r3, [r7, #4]
 8000196:	e007      	b.n	80001a8 <bufclear+0x1c>
	{
		buffer[i]= '\0';
 8000198:	4a08      	ldr	r2, [pc, #32]	; (80001bc <bufclear+0x30>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4413      	add	r3, r2
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
	for(i=0; i<1024; i++)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	3301      	adds	r3, #1
 80001a6:	607b      	str	r3, [r7, #4]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001ae:	dbf3      	blt.n	8000198 <bufclear+0xc>
	}
}
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	200004f8 	.word	0x200004f8

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c4:	f000 fa14 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c8:	f000 f86c 	bl	80002a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
HAL_UART_Receive_IT(&huart1, UartBuf, sizeof(UartBuf));
 80001cc:	220a      	movs	r2, #10
 80001ce:	492b      	ldr	r1, [pc, #172]	; (800027c <main+0xbc>)
 80001d0:	482b      	ldr	r0, [pc, #172]	; (8000280 <main+0xc0>)
 80001d2:	f001 faa2 	bl	800171a <HAL_UART_Receive_IT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8d5 	bl	8000384 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001da:	f000 f8a9 	bl	8000330 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80001de:	f002 f849 	bl	8002274 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  fresult = f_open(&fil,"file.txt",FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80001e2:	2213      	movs	r2, #19
 80001e4:	4927      	ldr	r1, [pc, #156]	; (8000284 <main+0xc4>)
 80001e6:	4828      	ldr	r0, [pc, #160]	; (8000288 <main+0xc8>)
 80001e8:	f004 fb0a 	bl	8004800 <f_open>
 80001ec:	4603      	mov	r3, r0
 80001ee:	461a      	mov	r2, r3
 80001f0:	4b26      	ldr	r3, [pc, #152]	; (800028c <main+0xcc>)
 80001f2:	701a      	strb	r2, [r3, #0]
  fresult = f_puts("data from first file", &fil);
 80001f4:	4924      	ldr	r1, [pc, #144]	; (8000288 <main+0xc8>)
 80001f6:	4826      	ldr	r0, [pc, #152]	; (8000290 <main+0xd0>)
 80001f8:	f005 f988 	bl	800550c <f_puts>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b22      	ldr	r3, [pc, #136]	; (800028c <main+0xcc>)
 8000202:	701a      	strb	r2, [r3, #0]
  fresult = f_close(&fil);
 8000204:	4820      	ldr	r0, [pc, #128]	; (8000288 <main+0xc8>)
 8000206:	f005 f8df 	bl	80053c8 <f_close>
 800020a:	4603      	mov	r3, r0
 800020c:	461a      	mov	r2, r3
 800020e:	4b1f      	ldr	r3, [pc, #124]	; (800028c <main+0xcc>)
 8000210:	701a      	strb	r2, [r3, #0]

  fresult = f_open(&fil, "file.txt",FA_READ);
 8000212:	2201      	movs	r2, #1
 8000214:	491b      	ldr	r1, [pc, #108]	; (8000284 <main+0xc4>)
 8000216:	481c      	ldr	r0, [pc, #112]	; (8000288 <main+0xc8>)
 8000218:	f004 faf2 	bl	8004800 <f_open>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b1a      	ldr	r3, [pc, #104]	; (800028c <main+0xcc>)
 8000222:	701a      	strb	r2, [r3, #0]

  f_gets(buffer,fil.fsize,&fil);
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <main+0xc8>)
 8000226:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <main+0xc8>)
 800022c:	4619      	mov	r1, r3
 800022e:	4819      	ldr	r0, [pc, #100]	; (8000294 <main+0xd4>)
 8000230:	f005 f8f2 	bl	8005418 <f_gets>
  send_uart(buffer);
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <main+0xd4>)
 8000236:	f7ff ff91 	bl	800015c <send_uart>
  f_close(&fil);
 800023a:	4813      	ldr	r0, [pc, #76]	; (8000288 <main+0xc8>)
 800023c:	f005 f8c4 	bl	80053c8 <f_close>
  bufclear();
 8000240:	f7ff ffa4 	bl	800018c <bufclear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 ret= memcmp(&UartBuf,"led on",6);
 8000244:	2206      	movs	r2, #6
 8000246:	4914      	ldr	r1, [pc, #80]	; (8000298 <main+0xd8>)
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <main+0xbc>)
 800024a:	f005 fa7f 	bl	800574c <memcmp>
 800024e:	4603      	mov	r3, r0
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <main+0xdc>)
 8000254:	701a      	strb	r2, [r3, #0]

	 if(ret==1)
 8000256:	4b11      	ldr	r3, [pc, #68]	; (800029c <main+0xdc>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d106      	bne.n	800026c <main+0xac>
	 {
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000264:	480e      	ldr	r0, [pc, #56]	; (80002a0 <main+0xe0>)
 8000266:	f000 fd5f 	bl	8000d28 <HAL_GPIO_WritePin>
 800026a:	e7eb      	b.n	8000244 <main+0x84>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	480b      	ldr	r0, [pc, #44]	; (80002a0 <main+0xe0>)
 8000274:	f000 fd58 	bl	8000d28 <HAL_GPIO_WritePin>
	 ret= memcmp(&UartBuf,"led on",6);
 8000278:	e7e4      	b.n	8000244 <main+0x84>
 800027a:	bf00      	nop
 800027c:	2000026c 	.word	0x2000026c
 8000280:	200004b0 	.word	0x200004b0
 8000284:	08005790 	.word	0x08005790
 8000288:	20000900 	.word	0x20000900
 800028c:	200008fc 	.word	0x200008fc
 8000290:	0800579c 	.word	0x0800579c
 8000294:	200004f8 	.word	0x200004f8
 8000298:	080057b4 	.word	0x080057b4
 800029c:	200008fd 	.word	0x200008fd
 80002a0:	40011000 	.word	0x40011000

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f005 fa58 	bl	8005768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	2301      	movs	r3, #1
 80002d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d8:	2302      	movs	r3, #2
 80002da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fd33 	bl	8000d58 <HAL_RCC_OscConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002f8:	f000 f890 	bl	800041c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	2302      	movs	r3, #2
 8000302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2102      	movs	r1, #2
 8000316:	4618      	mov	r0, r3
 8000318:	f000 ff9e 	bl	8001258 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000322:	f000 f87b 	bl	800041c <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	; 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_USART1_UART_Init+0x50>)
 8000338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <MX_USART1_UART_Init+0x4c>)
 800033c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_USART1_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000368:	f001 f904 	bl	8001574 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000372:	f000 f853 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200004b0 	.word	0x200004b0
 8000380:	40013800 	.word	0x40013800

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a1d      	ldr	r2, [pc, #116]	; (8000414 <MX_GPIO_Init+0x90>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0310 	and.w	r3, r3, #16
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a17      	ldr	r2, [pc, #92]	; (8000414 <MX_GPIO_Init+0x90>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0320 	and.w	r3, r3, #32
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a11      	ldr	r2, [pc, #68]	; (8000414 <MX_GPIO_Init+0x90>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	480c      	ldr	r0, [pc, #48]	; (8000418 <MX_GPIO_Init+0x94>)
 80003e8:	f000 fc9e 	bl	8000d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003fa:	2303      	movs	r3, #3
 80003fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4619      	mov	r1, r3
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <MX_GPIO_Init+0x94>)
 8000406:	f000 fb15 	bl	8000a34 <HAL_GPIO_Init>

}
 800040a:	bf00      	nop
 800040c:	3720      	adds	r7, #32
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000
 8000418:	40011000 	.word	0x40011000

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <HAL_MspInit+0x5c>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <HAL_MspInit+0x5c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_MspInit+0x60>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_MspInit+0x60>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000
 8000488:	40010000 	.word	0x40010000

0800048c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a20      	ldr	r2, [pc, #128]	; (8000528 <HAL_UART_MspInit+0x9c>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d139      	bne.n	8000520 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <HAL_UART_MspInit+0xa0>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a1e      	ldr	r2, [pc, #120]	; (800052c <HAL_UART_MspInit+0xa0>)
 80004b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <HAL_UART_MspInit+0xa0>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b19      	ldr	r3, [pc, #100]	; (800052c <HAL_UART_MspInit+0xa0>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a18      	ldr	r2, [pc, #96]	; (800052c <HAL_UART_MspInit+0xa0>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <HAL_UART_MspInit+0xa0>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e2:	2302      	movs	r3, #2
 80004e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e6:	2303      	movs	r3, #3
 80004e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4619      	mov	r1, r3
 80004f0:	480f      	ldr	r0, [pc, #60]	; (8000530 <HAL_UART_MspInit+0xa4>)
 80004f2:	f000 fa9f 	bl	8000a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4619      	mov	r1, r3
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <HAL_UART_MspInit+0xa4>)
 800050c:	f000 fa92 	bl	8000a34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	2025      	movs	r0, #37	; 0x25
 8000516:	f000 f9a4 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800051a:	2025      	movs	r0, #37	; 0x25
 800051c:	f000 f9bd 	bl	800089a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000520:	bf00      	nop
 8000522:	3720      	adds	r7, #32
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40013800 	.word	0x40013800
 800052c:	40021000 	.word	0x40021000
 8000530:	40010800 	.word	0x40010800

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <NMI_Handler+0x4>

0800053a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <MemManage_Handler+0x4>

08000546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <UsageFault_Handler+0x4>

08000552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057a:	f000 f87f 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <USART1_IRQHandler+0x10>)
 800058a:	f001 f8eb 	bl	8001764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200004b0 	.word	0x200004b0

08000598 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a4:	f7ff fff8 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005aa:	490c      	ldr	r1, [pc, #48]	; (80005dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005c0:	4c09      	ldr	r4, [pc, #36]	; (80005e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ce:	f005 f899 	bl	8005704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fdf5 	bl	80001c0 <main>
  bx lr
 80005d6:	4770      	bx	lr
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80005e0:	08005d88 	.word	0x08005d88
  ldr r2, =_sbss
 80005e4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80005e8:	20000f94 	.word	0x20000f94

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <HAL_Init+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <HAL_Init+0x28>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 f923 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000606:	200f      	movs	r0, #15
 8000608:	f000 f808 	bl	800061c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060c:	f7ff ff0c 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40022000 	.word	0x40022000

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x54>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_InitTick+0x58>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	fbb3 f3f1 	udiv	r3, r3, r1
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f93b 	bl	80008b6 <HAL_SYSTICK_Config>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e00e      	b.n	8000668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d80a      	bhi.n	8000666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000650:	2200      	movs	r2, #0
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	f04f 30ff 	mov.w	r0, #4294967295
 8000658:	f000 f903 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065c:	4a06      	ldr	r2, [pc, #24]	; (8000678 <HAL_InitTick+0x5c>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	20000008 	.word	0x20000008
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <HAL_IncTick+0x20>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000008 	.word	0x20000008
 800069c:	20000b2c 	.word	0x20000b2c

080006a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000b2c 	.word	0x20000b2c

080006b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <__NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db0b      	blt.n	8000742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 021f 	and.w	r2, r3, #31
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <__NVIC_EnableIRQ+0x34>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	095b      	lsrs	r3, r3, #5
 8000738:	2001      	movs	r0, #1
 800073a:	fa00 f202 	lsl.w	r2, r0, r2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff90 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff2d 	bl	80006b4 <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff42 	bl	80006fc <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff90 	bl	80007a4 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5f 	bl	8000750 <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff35 	bl	8000718 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b085      	sub	sp, #20
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d008      	beq.n	80008f8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2204      	movs	r2, #4
 80008ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e020      	b.n	800093a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 020e 	bic.w	r2, r2, #14
 8000906:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f022 0201 	bic.w	r2, r2, #1
 8000916:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000920:	2101      	movs	r1, #1
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2201      	movs	r2, #1
 800092c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000938:	7bfb      	ldrb	r3, [r7, #15]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b02      	cmp	r3, #2
 800095a:	d005      	beq.n	8000968 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2204      	movs	r2, #4
 8000960:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	e051      	b.n	8000a0c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f022 020e 	bic.w	r2, r2, #14
 8000976:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f022 0201 	bic.w	r2, r2, #1
 8000986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <HAL_DMA_Abort_IT+0xd4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d029      	beq.n	80009e6 <HAL_DMA_Abort_IT+0xa2>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <HAL_DMA_Abort_IT+0xd8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d022      	beq.n	80009e2 <HAL_DMA_Abort_IT+0x9e>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <HAL_DMA_Abort_IT+0xdc>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d01a      	beq.n	80009dc <HAL_DMA_Abort_IT+0x98>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a1e      	ldr	r2, [pc, #120]	; (8000a24 <HAL_DMA_Abort_IT+0xe0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d012      	beq.n	80009d6 <HAL_DMA_Abort_IT+0x92>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <HAL_DMA_Abort_IT+0xe4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d00a      	beq.n	80009d0 <HAL_DMA_Abort_IT+0x8c>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <HAL_DMA_Abort_IT+0xe8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d102      	bne.n	80009ca <HAL_DMA_Abort_IT+0x86>
 80009c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009c8:	e00e      	b.n	80009e8 <HAL_DMA_Abort_IT+0xa4>
 80009ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ce:	e00b      	b.n	80009e8 <HAL_DMA_Abort_IT+0xa4>
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	e008      	b.n	80009e8 <HAL_DMA_Abort_IT+0xa4>
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	e005      	b.n	80009e8 <HAL_DMA_Abort_IT+0xa4>
 80009dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e0:	e002      	b.n	80009e8 <HAL_DMA_Abort_IT+0xa4>
 80009e2:	2310      	movs	r3, #16
 80009e4:	e000      	b.n	80009e8 <HAL_DMA_Abort_IT+0xa4>
 80009e6:	2301      	movs	r3, #1
 80009e8:	4a11      	ldr	r2, [pc, #68]	; (8000a30 <HAL_DMA_Abort_IT+0xec>)
 80009ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	4798      	blx	r3
    } 
  }
  return status;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40020008 	.word	0x40020008
 8000a1c:	4002001c 	.word	0x4002001c
 8000a20:	40020030 	.word	0x40020030
 8000a24:	40020044 	.word	0x40020044
 8000a28:	40020058 	.word	0x40020058
 8000a2c:	4002006c 	.word	0x4002006c
 8000a30:	40020000 	.word	0x40020000

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	e148      	b.n	8000cda <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	f040 8137 	bne.w	8000cd4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	4aa3      	ldr	r2, [pc, #652]	; (8000cf8 <HAL_GPIO_Init+0x2c4>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d05e      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a70:	4aa1      	ldr	r2, [pc, #644]	; (8000cf8 <HAL_GPIO_Init+0x2c4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d875      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a76:	4aa1      	ldr	r2, [pc, #644]	; (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d058      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a7c:	4a9f      	ldr	r2, [pc, #636]	; (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d86f      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a82:	4a9f      	ldr	r2, [pc, #636]	; (8000d00 <HAL_GPIO_Init+0x2cc>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d052      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a88:	4a9d      	ldr	r2, [pc, #628]	; (8000d00 <HAL_GPIO_Init+0x2cc>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d869      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a8e:	4a9d      	ldr	r2, [pc, #628]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d04c      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a94:	4a9b      	ldr	r2, [pc, #620]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d863      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a9a:	4a9b      	ldr	r2, [pc, #620]	; (8000d08 <HAL_GPIO_Init+0x2d4>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d046      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000aa0:	4a99      	ldr	r2, [pc, #612]	; (8000d08 <HAL_GPIO_Init+0x2d4>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d85d      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000aa6:	2b12      	cmp	r3, #18
 8000aa8:	d82a      	bhi.n	8000b00 <HAL_GPIO_Init+0xcc>
 8000aaa:	2b12      	cmp	r3, #18
 8000aac:	d859      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000aae:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <HAL_GPIO_Init+0x80>)
 8000ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab4:	08000b2f 	.word	0x08000b2f
 8000ab8:	08000b09 	.word	0x08000b09
 8000abc:	08000b1b 	.word	0x08000b1b
 8000ac0:	08000b5d 	.word	0x08000b5d
 8000ac4:	08000b63 	.word	0x08000b63
 8000ac8:	08000b63 	.word	0x08000b63
 8000acc:	08000b63 	.word	0x08000b63
 8000ad0:	08000b63 	.word	0x08000b63
 8000ad4:	08000b63 	.word	0x08000b63
 8000ad8:	08000b63 	.word	0x08000b63
 8000adc:	08000b63 	.word	0x08000b63
 8000ae0:	08000b63 	.word	0x08000b63
 8000ae4:	08000b63 	.word	0x08000b63
 8000ae8:	08000b63 	.word	0x08000b63
 8000aec:	08000b63 	.word	0x08000b63
 8000af0:	08000b63 	.word	0x08000b63
 8000af4:	08000b63 	.word	0x08000b63
 8000af8:	08000b11 	.word	0x08000b11
 8000afc:	08000b25 	.word	0x08000b25
 8000b00:	4a82      	ldr	r2, [pc, #520]	; (8000d0c <HAL_GPIO_Init+0x2d8>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b06:	e02c      	b.n	8000b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e029      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	3304      	adds	r3, #4
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e024      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	3308      	adds	r3, #8
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e01f      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	330c      	adds	r3, #12
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e01a      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b36:	2304      	movs	r3, #4
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e013      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d105      	bne.n	8000b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b44:	2308      	movs	r3, #8
 8000b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	611a      	str	r2, [r3, #16]
          break;
 8000b4e:	e009      	b.n	8000b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b50:	2308      	movs	r3, #8
 8000b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	615a      	str	r2, [r3, #20]
          break;
 8000b5a:	e003      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
          break;
 8000b60:	e000      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          break;
 8000b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	2bff      	cmp	r3, #255	; 0xff
 8000b68:	d801      	bhi.n	8000b6e <HAL_GPIO_Init+0x13a>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	e001      	b.n	8000b72 <HAL_GPIO_Init+0x13e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3304      	adds	r3, #4
 8000b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	2bff      	cmp	r3, #255	; 0xff
 8000b78:	d802      	bhi.n	8000b80 <HAL_GPIO_Init+0x14c>
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x152>
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	3b08      	subs	r3, #8
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	6a39      	ldr	r1, [r7, #32]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 8090 	beq.w	8000cd4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb4:	4b56      	ldr	r3, [pc, #344]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a55      	ldr	r2, [pc, #340]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bcc:	4a51      	ldr	r2, [pc, #324]	; (8000d14 <HAL_GPIO_Init+0x2e0>)
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a49      	ldr	r2, [pc, #292]	; (8000d18 <HAL_GPIO_Init+0x2e4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d00d      	beq.n	8000c14 <HAL_GPIO_Init+0x1e0>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a48      	ldr	r2, [pc, #288]	; (8000d1c <HAL_GPIO_Init+0x2e8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d007      	beq.n	8000c10 <HAL_GPIO_Init+0x1dc>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a47      	ldr	r2, [pc, #284]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d101      	bne.n	8000c0c <HAL_GPIO_Init+0x1d8>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e004      	b.n	8000c16 <HAL_GPIO_Init+0x1e2>
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e002      	b.n	8000c16 <HAL_GPIO_Init+0x1e2>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <HAL_GPIO_Init+0x1e2>
 8000c14:	2300      	movs	r3, #0
 8000c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c18:	f002 0203 	and.w	r2, r2, #3
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c26:	493b      	ldr	r1, [pc, #236]	; (8000d14 <HAL_GPIO_Init+0x2e0>)
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c40:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	4937      	ldr	r1, [pc, #220]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	608b      	str	r3, [r1, #8]
 8000c4c:	e006      	b.n	8000c5c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c4e:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4933      	ldr	r1, [pc, #204]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	492d      	ldr	r1, [pc, #180]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	60cb      	str	r3, [r1, #12]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4929      	ldr	r1, [pc, #164]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c90:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4923      	ldr	r1, [pc, #140]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	491f      	ldr	r1, [pc, #124]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4919      	ldr	r1, [pc, #100]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4915      	ldr	r1, [pc, #84]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f47f aeaf 	bne.w	8000a48 <HAL_GPIO_Init+0x14>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	372c      	adds	r7, #44	; 0x2c
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	10320000 	.word	0x10320000
 8000cfc:	10310000 	.word	0x10310000
 8000d00:	10220000 	.word	0x10220000
 8000d04:	10210000 	.word	0x10210000
 8000d08:	10120000 	.word	0x10120000
 8000d0c:	10110000 	.word	0x10110000
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	40011000 	.word	0x40011000
 8000d24:	40010400 	.word	0x40010400

08000d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
 8000d34:	4613      	mov	r3, r2
 8000d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d38:	787b      	ldrb	r3, [r7, #1]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d44:	e003      	b.n	8000d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	041a      	lsls	r2, r3, #16
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	611a      	str	r2, [r3, #16]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e26c      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 8087 	beq.w	8000e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d78:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d00c      	beq.n	8000d9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d84:	4b8f      	ldr	r3, [pc, #572]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 030c 	and.w	r3, r3, #12
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d112      	bne.n	8000db6 <HAL_RCC_OscConfig+0x5e>
 8000d90:	4b8c      	ldr	r3, [pc, #560]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9c:	d10b      	bne.n	8000db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9e:	4b89      	ldr	r3, [pc, #548]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d06c      	beq.n	8000e84 <HAL_RCC_OscConfig+0x12c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d168      	bne.n	8000e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e246      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbe:	d106      	bne.n	8000dce <HAL_RCC_OscConfig+0x76>
 8000dc0:	4b80      	ldr	r3, [pc, #512]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a7f      	ldr	r2, [pc, #508]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	e02e      	b.n	8000e2c <HAL_RCC_OscConfig+0xd4>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x98>
 8000dd6:	4b7b      	ldr	r3, [pc, #492]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a7a      	ldr	r2, [pc, #488]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b78      	ldr	r3, [pc, #480]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a77      	ldr	r2, [pc, #476]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e01d      	b.n	8000e2c <HAL_RCC_OscConfig+0xd4>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df8:	d10c      	bne.n	8000e14 <HAL_RCC_OscConfig+0xbc>
 8000dfa:	4b72      	ldr	r3, [pc, #456]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a71      	ldr	r2, [pc, #452]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4b6f      	ldr	r3, [pc, #444]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a6e      	ldr	r2, [pc, #440]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e00b      	b.n	8000e2c <HAL_RCC_OscConfig+0xd4>
 8000e14:	4b6b      	ldr	r3, [pc, #428]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a6a      	ldr	r2, [pc, #424]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b68      	ldr	r3, [pc, #416]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a67      	ldr	r2, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d013      	beq.n	8000e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff fc34 	bl	80006a0 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fc30 	bl	80006a0 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e1fa      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	4b5d      	ldr	r3, [pc, #372]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <HAL_RCC_OscConfig+0xe4>
 8000e5a:	e014      	b.n	8000e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fc20 	bl	80006a0 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fc1c 	bl	80006a0 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e1e6      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x10c>
 8000e82:	e000      	b.n	8000e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d063      	beq.n	8000f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e92:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e9e:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d11c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x18c>
 8000eaa:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d116      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <HAL_RCC_OscConfig+0x176>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d001      	beq.n	8000ece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e1ba      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4939      	ldr	r1, [pc, #228]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee2:	e03a      	b.n	8000f5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d020      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_RCC_OscConfig+0x270>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fbd5 	bl	80006a0 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff fbd1 	bl	80006a0 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e19b      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4927      	ldr	r1, [pc, #156]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
 8000f2c:	e015      	b.n	8000f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <HAL_RCC_OscConfig+0x270>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fbb4 	bl	80006a0 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fbb0 	bl	80006a0 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e17a      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d03a      	beq.n	8000fdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d019      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_RCC_OscConfig+0x274>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f74:	f7ff fb94 	bl	80006a0 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fb90 	bl	80006a0 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e15a      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f000 facc 	bl	8001538 <RCC_Delay>
 8000fa0:	e01c      	b.n	8000fdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_RCC_OscConfig+0x274>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fb7a 	bl	80006a0 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fae:	e00f      	b.n	8000fd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fb76 	bl	80006a0 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d908      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e140      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	42420000 	.word	0x42420000
 8000fcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd0:	4b9e      	ldr	r3, [pc, #632]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e9      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80a6 	beq.w	8001136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fee:	4b97      	ldr	r3, [pc, #604]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10d      	bne.n	8001016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b94      	ldr	r3, [pc, #592]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a93      	ldr	r2, [pc, #588]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b91      	ldr	r3, [pc, #580]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001012:	2301      	movs	r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001016:	4b8e      	ldr	r3, [pc, #568]	; (8001250 <HAL_RCC_OscConfig+0x4f8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	2b00      	cmp	r3, #0
 8001020:	d118      	bne.n	8001054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001022:	4b8b      	ldr	r3, [pc, #556]	; (8001250 <HAL_RCC_OscConfig+0x4f8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a8a      	ldr	r2, [pc, #552]	; (8001250 <HAL_RCC_OscConfig+0x4f8>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102e:	f7ff fb37 	bl	80006a0 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001036:	f7ff fb33 	bl	80006a0 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e0fd      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001048:	4b81      	ldr	r3, [pc, #516]	; (8001250 <HAL_RCC_OscConfig+0x4f8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x312>
 800105c:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4a7a      	ldr	r2, [pc, #488]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6213      	str	r3, [r2, #32]
 8001068:	e02d      	b.n	80010c6 <HAL_RCC_OscConfig+0x36e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x334>
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a75      	ldr	r2, [pc, #468]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6213      	str	r3, [r2, #32]
 800107e:	4b73      	ldr	r3, [pc, #460]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a72      	ldr	r2, [pc, #456]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001084:	f023 0304 	bic.w	r3, r3, #4
 8001088:	6213      	str	r3, [r2, #32]
 800108a:	e01c      	b.n	80010c6 <HAL_RCC_OscConfig+0x36e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b05      	cmp	r3, #5
 8001092:	d10c      	bne.n	80010ae <HAL_RCC_OscConfig+0x356>
 8001094:	4b6d      	ldr	r3, [pc, #436]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a6c      	ldr	r2, [pc, #432]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	4b6a      	ldr	r3, [pc, #424]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4a69      	ldr	r2, [pc, #420]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6213      	str	r3, [r2, #32]
 80010ac:	e00b      	b.n	80010c6 <HAL_RCC_OscConfig+0x36e>
 80010ae:	4b67      	ldr	r3, [pc, #412]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a66      	ldr	r2, [pc, #408]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6213      	str	r3, [r2, #32]
 80010ba:	4b64      	ldr	r3, [pc, #400]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a63      	ldr	r2, [pc, #396]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d015      	beq.n	80010fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ce:	f7ff fae7 	bl	80006a0 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d4:	e00a      	b.n	80010ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f7ff fae3 	bl	80006a0 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e0ab      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ec:	4b57      	ldr	r3, [pc, #348]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ee      	beq.n	80010d6 <HAL_RCC_OscConfig+0x37e>
 80010f8:	e014      	b.n	8001124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fad1 	bl	80006a0 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001100:	e00a      	b.n	8001118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001102:	f7ff facd 	bl	80006a0 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001110:	4293      	cmp	r3, r2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e095      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001118:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1ee      	bne.n	8001102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d105      	bne.n	8001136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112a:	4b48      	ldr	r3, [pc, #288]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a47      	ldr	r2, [pc, #284]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8081 	beq.w	8001242 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b08      	cmp	r3, #8
 800114a:	d061      	beq.n	8001210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d146      	bne.n	80011e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001154:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <HAL_RCC_OscConfig+0x4fc>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff faa1 	bl	80006a0 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001162:	f7ff fa9d 	bl	80006a0 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e067      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001174:	4b35      	ldr	r3, [pc, #212]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f0      	bne.n	8001162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d108      	bne.n	800119c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	492d      	ldr	r1, [pc, #180]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a19      	ldr	r1, [r3, #32]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	430b      	orrs	r3, r1
 80011ae:	4927      	ldr	r1, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <HAL_RCC_OscConfig+0x4fc>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fa71 	bl	80006a0 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fa6d 	bl	80006a0 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e037      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x46a>
 80011e0:	e02f      	b.n	8001242 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_RCC_OscConfig+0x4fc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fa5a 	bl	80006a0 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f0:	f7ff fa56 	bl	80006a0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e020      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x498>
 800120e:	e018      	b.n	8001242 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e013      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_OscConfig+0x4f4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	429a      	cmp	r2, r3
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123a:	429a      	cmp	r2, r3
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	40007000 	.word	0x40007000
 8001254:	42420060 	.word	0x42420060

08001258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0d0      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800126c:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d910      	bls.n	800129c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b67      	ldr	r3, [pc, #412]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 0207 	bic.w	r2, r3, #7
 8001282:	4965      	ldr	r1, [pc, #404]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	4b63      	ldr	r3, [pc, #396]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0b8      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d020      	beq.n	80012ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b4:	4b59      	ldr	r3, [pc, #356]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a58      	ldr	r2, [pc, #352]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4a52      	ldr	r2, [pc, #328]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	494d      	ldr	r1, [pc, #308]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d040      	beq.n	8001378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d115      	bne.n	8001336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e07f      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d107      	bne.n	8001326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d109      	bne.n	8001336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e073      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001326:	4b3d      	ldr	r3, [pc, #244]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e06b      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001336:	4b39      	ldr	r3, [pc, #228]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f023 0203 	bic.w	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4936      	ldr	r1, [pc, #216]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001348:	f7ff f9aa 	bl	80006a0 <HAL_GetTick>
 800134c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	e00a      	b.n	8001366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001350:	f7ff f9a6 	bl	80006a0 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f241 3288 	movw	r2, #5000	; 0x1388
 800135e:	4293      	cmp	r3, r2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e053      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 020c 	and.w	r2, r3, #12
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	429a      	cmp	r2, r3
 8001376:	d1eb      	bne.n	8001350 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d210      	bcs.n	80013a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 0207 	bic.w	r2, r3, #7
 800138e:	4922      	ldr	r1, [pc, #136]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e032      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4916      	ldr	r1, [pc, #88]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	490e      	ldr	r1, [pc, #56]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e6:	f000 f821 	bl	800142c <HAL_RCC_GetSysClockFreq>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	490a      	ldr	r1, [pc, #40]	; (8001420 <HAL_RCC_ClockConfig+0x1c8>)
 80013f8:	5ccb      	ldrb	r3, [r1, r3]
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x1cc>)
 8001400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_ClockConfig+0x1d0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f908 	bl	800061c <HAL_InitTick>

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40022000 	.word	0x40022000
 800141c:	40021000 	.word	0x40021000
 8001420:	08005804 	.word	0x08005804
 8001424:	20000000 	.word	0x20000000
 8001428:	20000004 	.word	0x20000004

0800142c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b04      	cmp	r3, #4
 8001454:	d002      	beq.n	800145c <HAL_RCC_GetSysClockFreq+0x30>
 8001456:	2b08      	cmp	r3, #8
 8001458:	d003      	beq.n	8001462 <HAL_RCC_GetSysClockFreq+0x36>
 800145a:	e027      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800145e:	613b      	str	r3, [r7, #16]
      break;
 8001460:	e027      	b.n	80014b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	0c9b      	lsrs	r3, r3, #18
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800146c:	5cd3      	ldrb	r3, [r2, r3]
 800146e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d010      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	0c5b      	lsrs	r3, r3, #17
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	4a11      	ldr	r2, [pc, #68]	; (80014cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800148e:	fb02 f203 	mul.w	r2, r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	fbb2 f3f3 	udiv	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e004      	b.n	80014a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	613b      	str	r3, [r7, #16]
      break;
 80014aa:	e002      	b.n	80014b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ae:	613b      	str	r3, [r7, #16]
      break;
 80014b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014b2:	693b      	ldr	r3, [r7, #16]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	007a1200 	.word	0x007a1200
 80014c8:	0800581c 	.word	0x0800581c
 80014cc:	0800582c 	.word	0x0800582c
 80014d0:	003d0900 	.word	0x003d0900

080014d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014d8:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000000 	.word	0x20000000

080014e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014ec:	f7ff fff2 	bl	80014d4 <HAL_RCC_GetHCLKFreq>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	4903      	ldr	r1, [pc, #12]	; (800150c <HAL_RCC_GetPCLK1Freq+0x24>)
 80014fe:	5ccb      	ldrb	r3, [r1, r3]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000
 800150c:	08005814 	.word	0x08005814

08001510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001514:	f7ff ffde 	bl	80014d4 <HAL_RCC_GetHCLKFreq>
 8001518:	4602      	mov	r2, r0
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	0adb      	lsrs	r3, r3, #11
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	4903      	ldr	r1, [pc, #12]	; (8001534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001526:	5ccb      	ldrb	r3, [r1, r3]
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	08005814 	.word	0x08005814

08001538 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <RCC_Delay+0x34>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <RCC_Delay+0x38>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0a5b      	lsrs	r3, r3, #9
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001554:	bf00      	nop
  }
  while (Delay --);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1e5a      	subs	r2, r3, #1
 800155a:	60fa      	str	r2, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f9      	bne.n	8001554 <RCC_Delay+0x1c>
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000000 	.word	0x20000000
 8001570:	10624dd3 	.word	0x10624dd3

08001574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e042      	b.n	800160c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7fe ff76 	bl	800048c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2224      	movs	r2, #36	; 0x24
 80015a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fdcd 	bl	8002158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2220      	movs	r2, #32
 80015f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2220      	movs	r2, #32
 8001600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af02      	add	r7, sp, #8
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	4613      	mov	r3, r2
 8001622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b20      	cmp	r3, #32
 8001632:	d16d      	bne.n	8001710 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_UART_Transmit+0x2c>
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e066      	b.n	8001712 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2221      	movs	r2, #33	; 0x21
 800164e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001652:	f7ff f825 	bl	80006a0 <HAL_GetTick>
 8001656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166c:	d108      	bne.n	8001680 <HAL_UART_Transmit+0x6c>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d104      	bne.n	8001680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	e003      	b.n	8001688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001688:	e02a      	b.n	80016e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2200      	movs	r2, #0
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 fb1d 	bl	8001cd4 <UART_WaitOnFlagUntilTimeout>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e036      	b.n	8001712 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10b      	bne.n	80016c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	3302      	adds	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	e007      	b.n	80016d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3301      	adds	r3, #1
 80016d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1cf      	bne.n	800168a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2200      	movs	r2, #0
 80016f2:	2140      	movs	r1, #64	; 0x40
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 faed 	bl	8001cd4 <UART_WaitOnFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e006      	b.n	8001712 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	e000      	b.n	8001712 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001710:	2302      	movs	r3, #2
  }
}
 8001712:	4618      	mov	r0, r3
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	4613      	mov	r3, r2
 8001726:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b20      	cmp	r3, #32
 8001732:	d112      	bne.n	800175a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <HAL_UART_Receive_IT+0x26>
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e00b      	b.n	800175c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	461a      	mov	r2, r3
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 fb2d 	bl	8001db0 <UART_Start_Receive_IT>
 8001756:	4603      	mov	r3, r0
 8001758:	e000      	b.n	800175c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800175a:	2302      	movs	r3, #2
  }
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0ba      	sub	sp, #232	; 0xe8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80017a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10f      	bne.n	80017ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017ae:	f003 0320 	and.w	r3, r3, #32
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_UART_IRQHandler+0x66>
 80017b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fc0a 	bl	8001fdc <UART_Receive_IT>
      return;
 80017c8:	e25b      	b.n	8001c82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80017ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80de 	beq.w	8001990 <HAL_UART_IRQHandler+0x22c>
 80017d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d106      	bne.n	80017ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80017e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80d1 	beq.w	8001990 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80017ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_UART_IRQHandler+0xae>
 80017fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f043 0201 	orr.w	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_UART_IRQHandler+0xd2>
 800181e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f043 0202 	orr.w	r2, r3, #2
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_UART_IRQHandler+0xf6>
 8001842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f043 0204 	orr.w	r2, r3, #4
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800185a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d011      	beq.n	800188a <HAL_UART_IRQHandler+0x126>
 8001866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f043 0208 	orr.w	r2, r3, #8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 81f2 	beq.w	8001c78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_UART_IRQHandler+0x14e>
 80018a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fb95 	bl	8001fdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf14      	ite	ne
 80018c0:	2301      	movne	r3, #1
 80018c2:	2300      	moveq	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d103      	bne.n	80018de <HAL_UART_IRQHandler+0x17a>
 80018d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d04f      	beq.n	800197e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fa9f 	bl	8001e22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d041      	beq.n	8001976 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3314      	adds	r3, #20
 80018f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001900:	e853 3f00 	ldrex	r3, [r3]
 8001904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800190c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3314      	adds	r3, #20
 800191a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800191e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800192a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800192e:	e841 2300 	strex	r3, r2, [r1]
 8001932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1d9      	bne.n	80018f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001942:	2b00      	cmp	r3, #0
 8001944:	d013      	beq.n	800196e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194a:	4a7e      	ldr	r2, [pc, #504]	; (8001b44 <HAL_UART_IRQHandler+0x3e0>)
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fff6 	bl	8000944 <HAL_DMA_Abort_IT>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d016      	beq.n	800198c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001968:	4610      	mov	r0, r2
 800196a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800196c:	e00e      	b.n	800198c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f99c 	bl	8001cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001974:	e00a      	b.n	800198c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f998 	bl	8001cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800197c:	e006      	b.n	800198c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f994 	bl	8001cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800198a:	e175      	b.n	8001c78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800198c:	bf00      	nop
    return;
 800198e:	e173      	b.n	8001c78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	2b01      	cmp	r3, #1
 8001996:	f040 814f 	bne.w	8001c38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800199a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8148 	beq.w	8001c38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80019a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8141 	beq.w	8001c38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80b6 	beq.w	8001b48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80019e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8145 	beq.w	8001c7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80019f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80019fa:	429a      	cmp	r2, r3
 80019fc:	f080 813e 	bcs.w	8001c7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001a06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	f000 8088 	beq.w	8001b24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	330c      	adds	r3, #12
 8001a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a22:	e853 3f00 	ldrex	r3, [r3]
 8001a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	330c      	adds	r3, #12
 8001a3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001a40:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001a4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a50:	e841 2300 	strex	r3, r2, [r1]
 8001a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1d9      	bne.n	8001a14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3314      	adds	r3, #20
 8001a66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a6a:	e853 3f00 	ldrex	r3, [r3]
 8001a6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3314      	adds	r3, #20
 8001a80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001a88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001a8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001a90:	e841 2300 	strex	r3, r2, [r1]
 8001a94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e1      	bne.n	8001a60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3314      	adds	r3, #20
 8001aa2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aa6:	e853 3f00 	ldrex	r3, [r3]
 8001aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3314      	adds	r3, #20
 8001abc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001ac0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ac2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ac4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ac6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ac8:	e841 2300 	strex	r3, r2, [r1]
 8001acc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e3      	bne.n	8001a9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	330c      	adds	r3, #12
 8001ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aec:	e853 3f00 	ldrex	r3, [r3]
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af4:	f023 0310 	bic.w	r3, r3, #16
 8001af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	330c      	adds	r3, #12
 8001b02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001b06:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b08:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b0e:	e841 2300 	strex	r3, r2, [r1]
 8001b12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1e3      	bne.n	8001ae2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fed5 	bl	80008ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4619      	mov	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f8bf 	bl	8001cbe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001b40:	e09c      	b.n	8001c7c <HAL_UART_IRQHandler+0x518>
 8001b42:	bf00      	nop
 8001b44:	08001ee7 	.word	0x08001ee7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 808e 	beq.w	8001c80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 8089 	beq.w	8001c80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	330c      	adds	r3, #12
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b78:	e853 3f00 	ldrex	r3, [r3]
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	330c      	adds	r3, #12
 8001b8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001b92:	647a      	str	r2, [r7, #68]	; 0x44
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b9a:	e841 2300 	strex	r3, r2, [r1]
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1e3      	bne.n	8001b6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3314      	adds	r3, #20
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	e853 3f00 	ldrex	r3, [r3]
 8001bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3314      	adds	r3, #20
 8001bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001bca:	633a      	str	r2, [r7, #48]	; 0x30
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bd2:	e841 2300 	strex	r3, r2, [r1]
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1e3      	bne.n	8001ba6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	e853 3f00 	ldrex	r3, [r3]
 8001bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 0310 	bic.w	r3, r3, #16
 8001c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c10:	61fa      	str	r2, [r7, #28]
 8001c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c14:	69b9      	ldr	r1, [r7, #24]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	e841 2300 	strex	r3, r2, [r1]
 8001c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e3      	bne.n	8001bec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f844 	bl	8001cbe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c36:	e023      	b.n	8001c80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_UART_IRQHandler+0x4f4>
 8001c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f95c 	bl	8001f0e <UART_Transmit_IT>
    return;
 8001c56:	e014      	b.n	8001c82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00e      	beq.n	8001c82 <HAL_UART_IRQHandler+0x51e>
 8001c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f99b 	bl	8001fac <UART_EndTransmit_IT>
    return;
 8001c76:	e004      	b.n	8001c82 <HAL_UART_IRQHandler+0x51e>
    return;
 8001c78:	bf00      	nop
 8001c7a:	e002      	b.n	8001c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8001c7c:	bf00      	nop
 8001c7e:	e000      	b.n	8001c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8001c80:	bf00      	nop
  }
}
 8001c82:	37e8      	adds	r7, #232	; 0xe8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b090      	sub	sp, #64	; 0x40
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ce4:	e050      	b.n	8001d88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d04c      	beq.n	8001d88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cf4:	f7fe fcd4 	bl	80006a0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d241      	bcs.n	8001d88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	330c      	adds	r3, #12
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	e853 3f00 	ldrex	r3, [r3]
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	330c      	adds	r3, #12
 8001d22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d24:	637a      	str	r2, [r7, #52]	; 0x34
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d2c:	e841 2300 	strex	r3, r2, [r1]
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e5      	bne.n	8001d04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3314      	adds	r3, #20
 8001d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	e853 3f00 	ldrex	r3, [r3]
 8001d46:	613b      	str	r3, [r7, #16]
   return(result);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3314      	adds	r3, #20
 8001d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d58:	623a      	str	r2, [r7, #32]
 8001d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d5c:	69f9      	ldr	r1, [r7, #28]
 8001d5e:	6a3a      	ldr	r2, [r7, #32]
 8001d60:	e841 2300 	strex	r3, r2, [r1]
 8001d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e5      	bne.n	8001d38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e00f      	b.n	8001da8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4013      	ands	r3, r2
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d09f      	beq.n	8001ce6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3740      	adds	r7, #64	; 0x40
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	88fa      	ldrh	r2, [r7, #6]
 8001dc8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	88fa      	ldrh	r2, [r7, #6]
 8001dce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2222      	movs	r2, #34	; 0x22
 8001dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0201 	orr.w	r2, r2, #1
 8001e04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0220 	orr.w	r2, r2, #32
 8001e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b095      	sub	sp, #84	; 0x54
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	330c      	adds	r3, #12
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	e853 3f00 	ldrex	r3, [r3]
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	330c      	adds	r3, #12
 8001e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e4a:	643a      	str	r2, [r7, #64]	; 0x40
 8001e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e52:	e841 2300 	strex	r3, r2, [r1]
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1e5      	bne.n	8001e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3314      	adds	r3, #20
 8001e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	e853 3f00 	ldrex	r3, [r3]
 8001e6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3314      	adds	r3, #20
 8001e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e86:	e841 2300 	strex	r3, r2, [r1]
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1e5      	bne.n	8001e5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d119      	bne.n	8001ece <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	330c      	adds	r3, #12
 8001ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	e853 3f00 	ldrex	r3, [r3]
 8001ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f023 0310 	bic.w	r3, r3, #16
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	330c      	adds	r3, #12
 8001eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001eba:	61ba      	str	r2, [r7, #24]
 8001ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ebe:	6979      	ldr	r1, [r7, #20]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	e841 2300 	strex	r3, r2, [r1]
 8001ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1e5      	bne.n	8001e9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001edc:	bf00      	nop
 8001ede:	3754      	adds	r7, #84	; 0x54
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7ff fed3 	bl	8001cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b21      	cmp	r3, #33	; 0x21
 8001f20:	d13e      	bne.n	8001fa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2a:	d114      	bne.n	8001f56 <UART_Transmit_IT+0x48>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d110      	bne.n	8001f56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	1c9a      	adds	r2, r3, #2
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	621a      	str	r2, [r3, #32]
 8001f54:	e008      	b.n	8001f68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	1c59      	adds	r1, r3, #1
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6211      	str	r1, [r2, #32]
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4619      	mov	r1, r3
 8001f76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10f      	bne.n	8001f9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fe5b 	bl	8001c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b22      	cmp	r3, #34	; 0x22
 8001fee:	f040 80ae 	bne.w	800214e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ffa:	d117      	bne.n	800202c <UART_Receive_IT+0x50>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d113      	bne.n	800202c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	b29b      	uxth	r3, r3
 8002016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201a:	b29a      	uxth	r2, r3
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	1c9a      	adds	r2, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
 800202a:	e026      	b.n	800207a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203e:	d007      	beq.n	8002050 <UART_Receive_IT+0x74>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10a      	bne.n	800205e <UART_Receive_IT+0x82>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e008      	b.n	8002070 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800206a:	b2da      	uxtb	r2, r3
 800206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4619      	mov	r1, r3
 8002088:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800208a:	2b00      	cmp	r3, #0
 800208c:	d15d      	bne.n	800214a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0220 	bic.w	r2, r2, #32
 800209c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d135      	bne.n	8002140 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	330c      	adds	r3, #12
 80020e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	e853 3f00 	ldrex	r3, [r3]
 80020e8:	613b      	str	r3, [r7, #16]
   return(result);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f023 0310 	bic.w	r3, r3, #16
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	330c      	adds	r3, #12
 80020f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fa:	623a      	str	r2, [r7, #32]
 80020fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fe:	69f9      	ldr	r1, [r7, #28]
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	e841 2300 	strex	r3, r2, [r1]
 8002106:	61bb      	str	r3, [r7, #24]
   return(result);
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e5      	bne.n	80020da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b10      	cmp	r3, #16
 800211a:	d10a      	bne.n	8002132 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fdc0 	bl	8001cbe <HAL_UARTEx_RxEventCallback>
 800213e:	e002      	b.n	8002146 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fdaa 	bl	8001c9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e002      	b.n	8002150 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800214e:	2302      	movs	r3, #2
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3730      	adds	r7, #48	; 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002192:	f023 030c 	bic.w	r3, r3, #12
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2c      	ldr	r2, [pc, #176]	; (800226c <UART_SetConfig+0x114>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d103      	bne.n	80021c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021c0:	f7ff f9a6 	bl	8001510 <HAL_RCC_GetPCLK2Freq>
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	e002      	b.n	80021ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021c8:	f7ff f98e 	bl	80014e8 <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009a      	lsls	r2, r3, #2
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	4a22      	ldr	r2, [pc, #136]	; (8002270 <UART_SetConfig+0x118>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	0119      	lsls	r1, r3, #4
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fbb2 f2f3 	udiv	r2, r2, r3
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <UART_SetConfig+0x118>)
 8002206:	fba3 0302 	umull	r0, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2064      	movs	r0, #100	; 0x64
 800220e:	fb00 f303 	mul.w	r3, r0, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	3332      	adds	r3, #50	; 0x32
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <UART_SetConfig+0x118>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002224:	4419      	add	r1, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009a      	lsls	r2, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fbb2 f2f3 	udiv	r2, r2, r3
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <UART_SetConfig+0x118>)
 800223e:	fba3 0302 	umull	r0, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2064      	movs	r0, #100	; 0x64
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	3332      	adds	r3, #50	; 0x32
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <UART_SetConfig+0x118>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	f003 020f 	and.w	r2, r3, #15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	440a      	add	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40013800 	.word	0x40013800
 8002270:	51eb851f 	.word	0x51eb851f

08002274 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002278:	4904      	ldr	r1, [pc, #16]	; (800228c <MX_FATFS_Init+0x18>)
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_FATFS_Init+0x1c>)
 800227c:	f003 f9ca 	bl	8005614 <FATFS_LinkDriver>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <MX_FATFS_Init+0x20>)
 8002286:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000b30 	.word	0x20000b30
 8002290:	2000000c 	.word	0x2000000c
 8002294:	20000b34 	.word	0x20000b34

08002298 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800229c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
	...

080022a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <USER_initialize+0x20>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <USER_initialize+0x20>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000009 	.word	0x20000009

080022cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <USER_status+0x20>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
    return Stat;
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <USER_status+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000009 	.word	0x20000009

080022f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8002300:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800231c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	603a      	str	r2, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
 8002334:	460b      	mov	r3, r1
 8002336:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
    return res;
 800233c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	4a08      	ldr	r2, [pc, #32]	; (8002378 <disk_status+0x30>)
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	79fa      	ldrb	r2, [r7, #7]
 8002360:	4905      	ldr	r1, [pc, #20]	; (8002378 <disk_status+0x30>)
 8002362:	440a      	add	r2, r1
 8002364:	7a12      	ldrb	r2, [r2, #8]
 8002366:	4610      	mov	r0, r2
 8002368:	4798      	blx	r3
 800236a:	4603      	mov	r3, r0
 800236c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000025c 	.word	0x2000025c

0800237c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <disk_initialize+0x48>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d111      	bne.n	80023b8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <disk_initialize+0x48>)
 8002398:	2101      	movs	r1, #1
 800239a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <disk_initialize+0x48>)
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	4906      	ldr	r1, [pc, #24]	; (80023c4 <disk_initialize+0x48>)
 80023ac:	440a      	add	r2, r1
 80023ae:	7a12      	ldrb	r2, [r2, #8]
 80023b0:	4610      	mov	r0, r2
 80023b2:	4798      	blx	r3
 80023b4:	4603      	mov	r3, r0
 80023b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000025c 	.word	0x2000025c

080023c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	4603      	mov	r3, r0
 80023d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <disk_read+0x3c>)
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	689c      	ldr	r4, [r3, #8]
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	4a07      	ldr	r2, [pc, #28]	; (8002404 <disk_read+0x3c>)
 80023e8:	4413      	add	r3, r2
 80023ea:	7a18      	ldrb	r0, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	47a0      	blx	r4
 80023f4:	4603      	mov	r3, r0
 80023f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop
 8002404:	2000025c 	.word	0x2000025c

08002408 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <disk_write+0x3c>)
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	68dc      	ldr	r4, [r3, #12]
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <disk_write+0x3c>)
 8002428:	4413      	add	r3, r2
 800242a:	7a18      	ldrb	r0, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	47a0      	blx	r4
 8002434:	4603      	mov	r3, r0
 8002436:	75fb      	strb	r3, [r7, #23]
  return res;
 8002438:	7dfb      	ldrb	r3, [r7, #23]
}
 800243a:	4618      	mov	r0, r3
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}
 8002442:	bf00      	nop
 8002444:	2000025c 	.word	0x2000025c

08002448 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	603a      	str	r2, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
 8002454:	460b      	mov	r3, r1
 8002456:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <disk_ioctl+0x38>)
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	79fa      	ldrb	r2, [r7, #7]
 8002466:	4906      	ldr	r1, [pc, #24]	; (8002480 <disk_ioctl+0x38>)
 8002468:	440a      	add	r2, r1
 800246a:	7a10      	ldrb	r0, [r2, #8]
 800246c:	79b9      	ldrb	r1, [r7, #6]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4798      	blx	r3
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]
  return res;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000025c 	.word	0x2000025c

08002484 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002498:	e007      	b.n	80024aa <mem_cpy+0x26>
		*d++ = *s++;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	1c53      	adds	r3, r2, #1
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	1c59      	adds	r1, r3, #1
 80024a4:	6179      	str	r1, [r7, #20]
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f2      	bne.n	800249a <mem_cpy+0x16>
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80024d0:	e005      	b.n	80024de <mem_set+0x1e>
		*d++ = (BYTE)val;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	617a      	str	r2, [r7, #20]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f4      	bne.n	80024d2 <mem_set+0x12>
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800250c:	bf00      	nop
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <mem_cmp+0x40>
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	61fa      	str	r2, [r7, #28]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	61ba      	str	r2, [r7, #24]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	1acb      	subs	r3, r1, r3
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ec      	beq.n	800250e <mem_cmp+0x1a>
	return r;
 8002534:	697b      	ldr	r3, [r7, #20]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800254a:	e002      	b.n	8002552 <chk_chr+0x12>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3301      	adds	r3, #1
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <chk_chr+0x26>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4293      	cmp	r3, r2
 8002564:	d1f2      	bne.n	800254c <chk_chr+0xc>
	return *str;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	781b      	ldrb	r3, [r3, #0]
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	e038      	b.n	80025fa <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8002588:	492f      	ldr	r1, [pc, #188]	; (8002648 <chk_lock+0xd4>)
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d029      	beq.n	80025f0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800259c:	492a      	ldr	r1, [pc, #168]	; (8002648 <chk_lock+0xd4>)
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d11e      	bne.n	80025f4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80025b6:	4924      	ldr	r1, [pc, #144]	; (8002648 <chk_lock+0xd4>)
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3304      	adds	r3, #4
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d110      	bne.n	80025f4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80025d2:	491d      	ldr	r1, [pc, #116]	; (8002648 <chk_lock+0xd4>)
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	3308      	adds	r3, #8
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d102      	bne.n	80025f4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80025ee:	e007      	b.n	8002600 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3301      	adds	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d9c3      	bls.n	8002588 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d109      	bne.n	800261a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <chk_lock+0x9e>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d101      	bne.n	8002616 <chk_lock+0xa2>
 8002612:	2300      	movs	r3, #0
 8002614:	e013      	b.n	800263e <chk_lock+0xca>
 8002616:	2312      	movs	r3, #18
 8002618:	e011      	b.n	800263e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10b      	bne.n	8002638 <chk_lock+0xc4>
 8002620:	4909      	ldr	r1, [pc, #36]	; (8002648 <chk_lock+0xd4>)
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	330a      	adds	r3, #10
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002636:	d101      	bne.n	800263c <chk_lock+0xc8>
 8002638:	2310      	movs	r3, #16
 800263a:	e000      	b.n	800263e <chk_lock+0xca>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	20000044 	.word	0x20000044

0800264c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	e002      	b.n	800265e <enq_lock+0x12>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3301      	adds	r3, #1
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d809      	bhi.n	8002678 <enq_lock+0x2c>
 8002664:	490a      	ldr	r1, [pc, #40]	; (8002690 <enq_lock+0x44>)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ef      	bne.n	8002658 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000044 	.word	0x20000044

08002694 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e02b      	b.n	80026fc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80026a4:	4955      	ldr	r1, [pc, #340]	; (80027fc <inc_lock+0x168>)
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d11b      	bne.n	80026f6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80026be:	494f      	ldr	r1, [pc, #316]	; (80027fc <inc_lock+0x168>)
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3304      	adds	r3, #4
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10d      	bne.n	80026f6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80026da:	4948      	ldr	r1, [pc, #288]	; (80027fc <inc_lock+0x168>)
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3308      	adds	r3, #8
 80026ea:	881a      	ldrh	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d006      	beq.n	8002704 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3301      	adds	r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d9d0      	bls.n	80026a4 <inc_lock+0x10>
 8002702:	e000      	b.n	8002706 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8002704:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d145      	bne.n	8002798 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e002      	b.n	8002718 <inc_lock+0x84>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3301      	adds	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d809      	bhi.n	8002732 <inc_lock+0x9e>
 800271e:	4937      	ldr	r1, [pc, #220]	; (80027fc <inc_lock+0x168>)
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ef      	bne.n	8002712 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d101      	bne.n	800273c <inc_lock+0xa8>
 8002738:	2300      	movs	r3, #0
 800273a:	e05a      	b.n	80027f2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8002742:	482e      	ldr	r0, [pc, #184]	; (80027fc <inc_lock+0x168>)
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4403      	add	r3, r0
 8002750:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8002758:	4828      	ldr	r0, [pc, #160]	; (80027fc <inc_lock+0x168>)
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4403      	add	r3, r0
 8002766:	3304      	adds	r3, #4
 8002768:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8002770:	4922      	ldr	r1, [pc, #136]	; (80027fc <inc_lock+0x168>)
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3308      	adds	r3, #8
 8002780:	4602      	mov	r2, r0
 8002782:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8002784:	491d      	ldr	r1, [pc, #116]	; (80027fc <inc_lock+0x168>)
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	330a      	adds	r3, #10
 8002794:	2200      	movs	r2, #0
 8002796:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00c      	beq.n	80027b8 <inc_lock+0x124>
 800279e:	4917      	ldr	r1, [pc, #92]	; (80027fc <inc_lock+0x168>)
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	330a      	adds	r3, #10
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <inc_lock+0x124>
 80027b4:	2300      	movs	r3, #0
 80027b6:	e01c      	b.n	80027f2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10b      	bne.n	80027d6 <inc_lock+0x142>
 80027be:	490f      	ldr	r1, [pc, #60]	; (80027fc <inc_lock+0x168>)
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	330a      	adds	r3, #10
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	b299      	uxth	r1, r3
 80027d4:	e001      	b.n	80027da <inc_lock+0x146>
 80027d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027da:	4808      	ldr	r0, [pc, #32]	; (80027fc <inc_lock+0x168>)
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4403      	add	r3, r0
 80027e8:	330a      	adds	r3, #10
 80027ea:	460a      	mov	r2, r1
 80027ec:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3301      	adds	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	20000044 	.word	0x20000044

08002800 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d82e      	bhi.n	8002872 <dec_lock+0x72>
		n = Files[i].ctr;
 8002814:	491b      	ldr	r1, [pc, #108]	; (8002884 <dec_lock+0x84>)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	330a      	adds	r3, #10
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002828:	89fb      	ldrh	r3, [r7, #14]
 800282a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282e:	d101      	bne.n	8002834 <dec_lock+0x34>
 8002830:	2300      	movs	r3, #0
 8002832:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8002834:	89fb      	ldrh	r3, [r7, #14]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <dec_lock+0x40>
 800283a:	89fb      	ldrh	r3, [r7, #14]
 800283c:	3b01      	subs	r3, #1
 800283e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002840:	4910      	ldr	r1, [pc, #64]	; (8002884 <dec_lock+0x84>)
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	330a      	adds	r3, #10
 8002850:	89fa      	ldrh	r2, [r7, #14]
 8002852:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002854:	89fb      	ldrh	r3, [r7, #14]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <dec_lock+0x6c>
 800285a:	490a      	ldr	r1, [pc, #40]	; (8002884 <dec_lock+0x84>)
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	737b      	strb	r3, [r7, #13]
 8002870:	e001      	b.n	8002876 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002872:	2302      	movs	r3, #2
 8002874:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002876:	7b7b      	ldrb	r3, [r7, #13]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000044 	.word	0x20000044

08002888 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e016      	b.n	80028c4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002896:	4910      	ldr	r1, [pc, #64]	; (80028d8 <clear_lock+0x50>)
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d108      	bne.n	80028be <clear_lock+0x36>
 80028ac:	490a      	ldr	r1, [pc, #40]	; (80028d8 <clear_lock+0x50>)
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3301      	adds	r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d9e5      	bls.n	8002896 <clear_lock+0xe>
	}
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000044 	.word	0x20000044

080028dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d038      	beq.n	8002964 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80028f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	2301      	movs	r3, #1
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	f7ff fd7f 	bl	8002408 <disk_write>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e026      	b.n	8002964 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	1ad2      	subs	r2, r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800292e:	429a      	cmp	r2, r3
 8002930:	d218      	bcs.n	8002964 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	e010      	b.n	800295e <sync_window+0x82>
					wsect += fs->fsize;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4413      	add	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	2301      	movs	r3, #1
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	f7ff fd58 	bl	8002408 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3b01      	subs	r3, #1
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d8eb      	bhi.n	800293c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d01b      	beq.n	80029c0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ffa7 	bl	80028dc <sync_window>
 800298e:	4603      	mov	r3, r0
 8002990:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d113      	bne.n	80029c0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	2301      	movs	r3, #1
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	f7ff fd10 	bl	80023c8 <disk_read>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ff82 	bl	80028dc <sync_window>
 80029d8:	4603      	mov	r3, r0
 80029da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 809b 	bne.w	8002b1a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	f040 8088 	bne.w	8002b00 <sync_fs+0x136>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	f040 8082 	bne.w	8002b00 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fd5b 	bl	80024c0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2255      	movs	r2, #85	; 0x55
 8002a0e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	22aa      	movs	r2, #170	; 0xaa
 8002a16:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2252      	movs	r2, #82	; 0x52
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2252      	movs	r2, #82	; 0x52
 8002a24:	705a      	strb	r2, [r3, #1]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2261      	movs	r2, #97	; 0x61
 8002a2a:	709a      	strb	r2, [r3, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2241      	movs	r2, #65	; 0x41
 8002a30:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2272      	movs	r2, #114	; 0x72
 8002a36:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2272      	movs	r2, #114	; 0x72
 8002a3e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2241      	movs	r2, #65	; 0x41
 8002a46:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2261      	movs	r2, #97	; 0x61
 8002a4e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002a7a:	0c1b      	lsrs	r3, r3, #16
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002a8a:	0e1b      	lsrs	r3, r3, #24
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002acc:	0e1b      	lsrs	r3, r3, #24
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8002af2:	2301      	movs	r3, #1
 8002af4:	f7ff fc88 	bl	8002408 <disk_write>
			fs->fsi_flag = 0;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002b06:	2200      	movs	r2, #0
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fc9c 	bl	8002448 <disk_ioctl>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	3b02      	subs	r3, #2
 8002b32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002b3a:	3b02      	subs	r3, #2
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d301      	bcc.n	8002b46 <clust2sect+0x22>
 8002b42:	2300      	movs	r3, #0
 8002b44:	e00a      	b.n	8002b5c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	fb03 f202 	mul.w	r2, r3, r2
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002b5a:	4413      	add	r3, r2
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d905      	bls.n	8002b82 <get_fat+0x1c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <get_fat+0x22>
		val = 1;	/* Internal error */
 8002b82:	2301      	movs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e0a3      	b.n	8002cd0 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d068      	beq.n	8002c6a <get_fat+0x104>
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	f300 808f 	bgt.w	8002cbc <get_fat+0x156>
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d002      	beq.n	8002ba8 <get_fat+0x42>
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d040      	beq.n	8002c28 <get_fat+0xc2>
 8002ba6:	e089      	b.n	8002cbc <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff fed2 	bl	800296e <move_window>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d178      	bne.n	8002cc2 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	60fa      	str	r2, [r7, #12]
 8002bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	5cd3      	ldrb	r3, [r2, r3]
 8002bde:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	0a5b      	lsrs	r3, r3, #9
 8002bea:	4413      	add	r3, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff febd 	bl	800296e <move_window>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d165      	bne.n	8002cc6 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <get_fat+0xb8>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	e002      	b.n	8002c24 <get_fat+0xbe>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	617b      	str	r3, [r7, #20]
			break;
 8002c26:	e053      	b.n	8002cd0 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	4413      	add	r3, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fe99 	bl	800296e <move_window>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d143      	bne.n	8002cca <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3301      	adds	r3, #1
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b21b      	sxth	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	617b      	str	r3, [r7, #20]
			break;
 8002c68:	e032      	b.n	8002cd0 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	09db      	lsrs	r3, r3, #7
 8002c74:	4413      	add	r3, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fe78 	bl	800296e <move_window>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d124      	bne.n	8002cce <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	3303      	adds	r3, #3
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	061a      	lsls	r2, r3, #24
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	3201      	adds	r2, #1
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	0212      	lsls	r2, r2, #8
 8002cac:	4313      	orrs	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002cb8:	617b      	str	r3, [r7, #20]
			break;
 8002cba:	e009      	b.n	8002cd0 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e006      	b.n	8002cd0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cc2:	bf00      	nop
 8002cc4:	e004      	b.n	8002cd0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cc6:	bf00      	nop
 8002cc8:	e002      	b.n	8002cd0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002cce:	bf00      	nop
		}
	}

	return val;
 8002cd0:	697b      	ldr	r3, [r7, #20]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b088      	sub	sp, #32
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d905      	bls.n	8002cf8 <put_fat+0x1e>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d302      	bcc.n	8002cfe <put_fat+0x24>
		res = FR_INT_ERR;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e0f6      	b.n	8002eec <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	f000 809e 	beq.w	8002e46 <put_fat+0x16c>
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	f300 80e4 	bgt.w	8002ed8 <put_fat+0x1fe>
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d002      	beq.n	8002d1a <put_fat+0x40>
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d06f      	beq.n	8002df8 <put_fat+0x11e>
 8002d18:	e0de      	b.n	8002ed8 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4413      	add	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	0a5b      	lsrs	r3, r3, #9
 8002d32:	4413      	add	r3, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff fe19 	bl	800296e <move_window>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 80cb 	bne.w	8002ede <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	617a      	str	r2, [r7, #20]
 8002d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4413      	add	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <put_fat+0xa4>
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	b25a      	sxtb	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	4313      	orrs	r3, r2
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	e001      	b.n	8002d82 <put_fat+0xa8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	0a5b      	lsrs	r3, r3, #9
 8002d98:	4413      	add	r3, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff fde6 	bl	800296e <move_window>
 8002da2:	4603      	mov	r3, r0
 8002da4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f040 809a 	bne.w	8002ee2 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <put_fat+0xf2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e00e      	b.n	8002dea <put_fat+0x110>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	f023 030f 	bic.w	r3, r3, #15
 8002dd6:	b25a      	sxtb	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	4313      	orrs	r3, r2
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8002df6:	e079      	b.n	8002eec <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	4413      	add	r3, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fdb1 	bl	800296e <move_window>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002e10:	7ffb      	ldrb	r3, [r7, #31]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d167      	bne.n	8002ee6 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4413      	add	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	3301      	adds	r3, #1
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8002e44:	e052      	b.n	8002eec <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	09db      	lsrs	r3, r3, #7
 8002e50:	4413      	add	r3, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff fd8a 	bl	800296e <move_window>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002e5e:	7ffb      	ldrb	r3, [r7, #31]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d142      	bne.n	8002eea <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	3303      	adds	r3, #3
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	061a      	lsls	r2, r3, #24
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	4313      	orrs	r3, r2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	3201      	adds	r2, #1
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	0212      	lsls	r2, r2, #8
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	0c1a      	lsrs	r2, r3, #16
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	0e1a      	lsrs	r2, r3, #24
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	3303      	adds	r3, #3
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8002ed6:	e009      	b.n	8002eec <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	e006      	b.n	8002eec <put_fat+0x212>
			if (res != FR_OK) break;
 8002ede:	bf00      	nop
 8002ee0:	e004      	b.n	8002eec <put_fat+0x212>
			if (res != FR_OK) break;
 8002ee2:	bf00      	nop
 8002ee4:	e002      	b.n	8002eec <put_fat+0x212>
			if (res != FR_OK) break;
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <put_fat+0x212>
			if (res != FR_OK) break;
 8002eea:	bf00      	nop
		}
	}

	return res;
 8002eec:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d905      	bls.n	8002f12 <remove_chain+0x1c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <remove_chain+0x22>
		res = FR_INT_ERR;
 8002f12:	2302      	movs	r3, #2
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	e043      	b.n	8002fa0 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8002f1c:	e036      	b.n	8002f8c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8002f1e:	6839      	ldr	r1, [r7, #0]
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff fe20 	bl	8002b66 <get_fat>
 8002f26:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d035      	beq.n	8002f9a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d102      	bne.n	8002f3a <remove_chain+0x44>
 8002f34:	2302      	movs	r3, #2
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e032      	b.n	8002fa0 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d102      	bne.n	8002f48 <remove_chain+0x52>
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	e02b      	b.n	8002fa0 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fec4 	bl	8002cda <put_fat>
 8002f52:	4603      	mov	r3, r0
 8002f54:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d120      	bne.n	8002f9e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d00f      	beq.n	8002f88 <remove_chain+0x92>
				fs->free_clust++;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d3c2      	bcc.n	8002f1e <remove_chain+0x28>
 8002f98:	e002      	b.n	8002fa0 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8002f9a:	bf00      	nop
 8002f9c:	e000      	b.n	8002fa0 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8002f9e:	bf00      	nop
		}
	}

	return res;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002fc0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <create_chain+0x2a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d31c      	bcc.n	800300e <create_chain+0x64>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	e019      	b.n	800300e <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff fdc2 	bl	8002b66 <get_fat>
 8002fe2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d801      	bhi.n	8002fee <create_chain+0x44>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e076      	b.n	80030dc <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d101      	bne.n	8002ffa <create_chain+0x50>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	e070      	b.n	80030dc <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	d201      	bcs.n	800300a <create_chain+0x60>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	e068      	b.n	80030dc <create_chain+0x132>
		scl = clst;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3301      	adds	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d307      	bcc.n	8003034 <create_chain+0x8a>
			ncl = 2;
 8003024:	2302      	movs	r3, #2
 8003026:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	429a      	cmp	r2, r3
 800302e:	d901      	bls.n	8003034 <create_chain+0x8a>
 8003030:	2300      	movs	r3, #0
 8003032:	e053      	b.n	80030dc <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003034:	6979      	ldr	r1, [r7, #20]
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fd95 	bl	8002b66 <get_fat>
 800303c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d002      	beq.n	8003052 <create_chain+0xa8>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <create_chain+0xac>
			return cs;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	e042      	b.n	80030dc <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d1d9      	bne.n	8003012 <create_chain+0x68>
 800305e:	2300      	movs	r3, #0
 8003060:	e03c      	b.n	80030dc <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8003062:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003064:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fe35 	bl	8002cda <put_fat>
 8003070:	4603      	mov	r3, r0
 8003072:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <create_chain+0xe4>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fe28 	bl	8002cda <put_fat>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11a      	bne.n	80030ca <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d018      	beq.n	80030da <create_chain+0x130>
			fs->free_clust--;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80030ae:	1e5a      	subs	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80030c8:	e007      	b.n	80030da <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d102      	bne.n	80030d6 <create_chain+0x12c>
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	e000      	b.n	80030d8 <create_chain+0x12e>
 80030d6:	2301      	movs	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80030da:	697b      	ldr	r3, [r7, #20]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80030f4:	3304      	adds	r3, #4
 80030f6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	0a5b      	lsrs	r3, r3, #9
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003102:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003106:	fbb3 f3f2 	udiv	r3, r3, r2
 800310a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1d1a      	adds	r2, r3, #4
 8003110:	613a      	str	r2, [r7, #16]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <clmt_clust+0x3c>
 800311c:	2300      	movs	r3, #0
 800311e:	e010      	b.n	8003142 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	429a      	cmp	r2, r3
 8003126:	d307      	bcc.n	8003138 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3304      	adds	r3, #4
 8003134:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003136:	e7e9      	b.n	800310c <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8003138:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	4413      	add	r3, r2
}
 8003142:	4618      	mov	r0, r3
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003166:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d007      	beq.n	800317e <dir_sdi+0x32>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003174:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	429a      	cmp	r2, r3
 800317c:	d301      	bcc.n	8003182 <dir_sdi+0x36>
		return FR_INT_ERR;
 800317e:	2302      	movs	r3, #2
 8003180:	e074      	b.n	800326c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10c      	bne.n	80031a2 <dir_sdi+0x56>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800318e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003192:	2b03      	cmp	r3, #3
 8003194:	d105      	bne.n	80031a2 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800319c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80031a0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031ae:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80031b2:	461a      	mov	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d301      	bcc.n	80031be <dir_sdi+0x72>
			return FR_INT_ERR;
 80031ba:	2302      	movs	r3, #2
 80031bc:	e056      	b.n	800326c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031c4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e032      	b.n	8003232 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031d2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80031da:	e01e      	b.n	800321a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fcbe 	bl	8002b66 <get_fat>
 80031ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d101      	bne.n	80031f8 <dir_sdi+0xac>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e039      	b.n	800326c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d907      	bls.n	800320e <dir_sdi+0xc2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003204:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	429a      	cmp	r2, r3
 800320c:	d301      	bcc.n	8003212 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800320e:	2302      	movs	r3, #2
 8003210:	e02c      	b.n	800326c <dir_sdi+0x120>
			idx -= ic;
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	429a      	cmp	r2, r3
 8003220:	d2dc      	bcs.n	80031dc <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003228:	6979      	ldr	r1, [r7, #20]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fc7a 	bl	8002b24 <clust2sect>
 8003230:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <dir_sdi+0xf8>
 8003240:	2302      	movs	r3, #2
 8003242:	e013      	b.n	800326c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	091a      	lsrs	r2, r3, #4
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	441a      	add	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003258:	461a      	mov	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	015b      	lsls	r3, r3, #5
 8003262:	441a      	add	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8003284:	3301      	adds	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <dir_next+0x26>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <dir_next+0x2a>
		return FR_NO_FILE;
 800329a:	2304      	movs	r3, #4
 800329c:	e0dd      	b.n	800345a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f040 80c6 	bne.w	8003436 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032c8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80032cc:	461a      	mov	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4293      	cmp	r3, r2
 80032d2:	f0c0 80b0 	bcc.w	8003436 <dir_next+0x1c2>
				return FR_NO_FILE;
 80032d6:	2304      	movs	r3, #4
 80032d8:	e0bf      	b.n	800345a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80032e4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80032e8:	3a01      	subs	r2, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 80a2 	bne.w	8003436 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80032fe:	4619      	mov	r1, r3
 8003300:	4610      	mov	r0, r2
 8003302:	f7ff fc30 	bl	8002b66 <get_fat>
 8003306:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d801      	bhi.n	8003312 <dir_next+0x9e>
 800330e:	2302      	movs	r3, #2
 8003310:	e0a3      	b.n	800345a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d101      	bne.n	800331e <dir_next+0xaa>
 800331a:	2301      	movs	r3, #1
 800331c:	e09d      	b.n	800345a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003324:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	429a      	cmp	r2, r3
 800332c:	d374      	bcc.n	8003418 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <dir_next+0xc4>
 8003334:	2304      	movs	r3, #4
 8003336:	e090      	b.n	800345a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f7ff fe2f 	bl	8002faa <create_chain>
 800334c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <dir_next+0xe4>
 8003354:	2307      	movs	r3, #7
 8003356:	e080      	b.n	800345a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <dir_next+0xee>
 800335e:	2302      	movs	r3, #2
 8003360:	e07b      	b.n	800345a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d101      	bne.n	800336e <dir_next+0xfa>
 800336a:	2301      	movs	r3, #1
 800336c:	e075      	b.n	800345a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fab1 	bl	80028dc <sync_window>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <dir_next+0x110>
 8003380:	2301      	movs	r3, #1
 8003382:	e06a      	b.n	800345a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800338a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff f895 	bl	80024c0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80033a2:	6979      	ldr	r1, [r7, #20]
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7ff fbbd 	bl	8002b24 <clust2sect>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	e01b      	b.n	80033ee <dir_next+0x17a>
						dp->fs->wflag = 1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fa87 	bl	80028dc <sync_window>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <dir_next+0x164>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e040      	b.n	800345a <dir_next+0x1e6>
						dp->fs->winsect++;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033de:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80033e2:	3201      	adds	r2, #1
 80033e4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	3301      	adds	r3, #1
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033f4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80033f8:	461a      	mov	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d3da      	bcc.n	80033b6 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003406:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	1a8a      	subs	r2, r1, r2
 8003414:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003426:	6979      	ldr	r1, [r7, #20]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fb7b 	bl	8002b24 <clust2sect>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	015b      	lsls	r3, r3, #5
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bd90      	pop	{r4, r7, pc}

08003462 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800346c:	2100      	movs	r1, #0
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fe6c 	bl	800314c <dir_sdi>
 8003474:	4603      	mov	r3, r0
 8003476:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d131      	bne.n	80034e2 <dir_alloc+0x80>
		n = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f7ff fa6c 	bl	800296e <move_window>
 8003496:	4603      	mov	r3, r0
 8003498:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d11f      	bne.n	80034e0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2be5      	cmp	r3, #229	; 0xe5
 80034aa:	d005      	beq.n	80034b8 <dir_alloc+0x56>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	3301      	adds	r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d102      	bne.n	80034cc <dir_alloc+0x6a>
 80034c6:	e00c      	b.n	80034e2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80034cc:	2101      	movs	r1, #1
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fed0 	bl	8003274 <dir_next>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0d1      	beq.n	8003482 <dir_alloc+0x20>
 80034de:	e000      	b.n	80034e2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80034e0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d101      	bne.n	80034ec <dir_alloc+0x8a>
 80034e8:	2307      	movs	r3, #7
 80034ea:	73fb      	strb	r3, [r7, #15]
	return res;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	331b      	adds	r3, #27
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	b21a      	sxth	r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	331a      	adds	r3, #26
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b21b      	sxth	r3, r3
 8003512:	4313      	orrs	r3, r2
 8003514:	b21b      	sxth	r3, r3
 8003516:	b29b      	uxth	r3, r3
 8003518:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003520:	2b03      	cmp	r3, #3
 8003522:	d10f      	bne.n	8003544 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	3315      	adds	r3, #21
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	b21a      	sxth	r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	3314      	adds	r3, #20
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b21b      	sxth	r3, r3
 8003536:	4313      	orrs	r3, r2
 8003538:	b21b      	sxth	r3, r3
 800353a:	b29b      	uxth	r3, r3
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

	return cl;
 8003544:	68fb      	ldr	r3, [r7, #12]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	331a      	adds	r3, #26
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	331b      	adds	r3, #27
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	0c1a      	lsrs	r2, r3, #16
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3314      	adds	r3, #20
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b29b      	uxth	r3, r3
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	b29a      	uxth	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3315      	adds	r3, #21
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ae:	1e5a      	subs	r2, r3, #1
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	2301      	movs	r3, #1
 80035c2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80035c4:	4a2b      	ldr	r2, [pc, #172]	; (8003674 <cmp_lfn+0xd8>)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	b21a      	sxth	r2, r3
 80035d8:	4926      	ldr	r1, [pc, #152]	; (8003674 <cmp_lfn+0xd8>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	440b      	add	r3, r1
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	4619      	mov	r1, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	440b      	add	r3, r1
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80035f0:	89fb      	ldrh	r3, [r7, #14]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d019      	beq.n	800362a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80035f6:	89bb      	ldrh	r3, [r7, #12]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f002 f855 	bl	80056a8 <ff_wtoupper>
 80035fe:	4603      	mov	r3, r0
 8003600:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2bfe      	cmp	r3, #254	; 0xfe
 8003606:	d80e      	bhi.n	8003626 <cmp_lfn+0x8a>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	617a      	str	r2, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f002 f846 	bl	80056a8 <ff_wtoupper>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	89fb      	ldrh	r3, [r7, #14]
 8003622:	4293      	cmp	r3, r2
 8003624:	d008      	beq.n	8003638 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8003626:	2300      	movs	r3, #0
 8003628:	e01f      	b.n	800366a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800362a:	89bb      	ldrh	r3, [r7, #12]
 800362c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003630:	4293      	cmp	r3, r2
 8003632:	d001      	beq.n	8003638 <cmp_lfn+0x9c>
 8003634:	2300      	movs	r3, #0
 8003636:	e018      	b.n	800366a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	3301      	adds	r3, #1
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d9bf      	bls.n	80035c4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <cmp_lfn+0xcc>
 8003650:	89fb      	ldrh	r3, [r7, #14]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <cmp_lfn+0xcc>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <cmp_lfn+0xcc>
		return 0;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8003668:	2301      	movs	r3, #1
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	080058b0 	.word	0x080058b0

08003678 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8003678:	b480      	push	{r7}
 800367a:	b089      	sub	sp, #36	; 0x24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	460b      	mov	r3, r1
 8003688:	71fb      	strb	r3, [r7, #7]
 800368a:	4613      	mov	r3, r2
 800368c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	330d      	adds	r3, #13
 8003692:	79ba      	ldrb	r2, [r7, #6]
 8003694:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	330b      	adds	r3, #11
 800369a:	220f      	movs	r2, #15
 800369c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	330c      	adds	r3, #12
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	331a      	adds	r3, #26
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	331b      	adds	r3, #27
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	1e5a      	subs	r2, r3, #1
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	82fb      	strh	r3, [r7, #22]
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80036ce:	8afb      	ldrh	r3, [r7, #22]
 80036d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <fit_lfn+0x70>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	61fa      	str	r2, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80036e8:	4a1c      	ldr	r2, [pc, #112]	; (800375c <fit_lfn+0xe4>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	8afa      	ldrh	r2, [r7, #22]
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	8afb      	ldrh	r3, [r7, #22]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b299      	uxth	r1, r3
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <fit_lfn+0xe4>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	4413      	add	r3, r2
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4413      	add	r3, r2
 8003710:	b2ca      	uxtb	r2, r1
 8003712:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8003714:	8afb      	ldrh	r3, [r7, #22]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <fit_lfn+0xa8>
 800371a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800371e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	3301      	adds	r3, #1
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d9d0      	bls.n	80036ce <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800372c:	8afb      	ldrh	r3, [r7, #22]
 800372e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003732:	4293      	cmp	r3, r2
 8003734:	d006      	beq.n	8003744 <fit_lfn+0xcc>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <fit_lfn+0xd4>
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	79fa      	ldrb	r2, [r7, #7]
 8003750:	701a      	strb	r2, [r3, #0]
}
 8003752:	bf00      	nop
 8003754:	3724      	adds	r7, #36	; 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	080058b0 	.word	0x080058b0

08003760 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08c      	sub	sp, #48	; 0x30
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800376e:	220b      	movs	r2, #11
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7fe fe86 	bl	8002484 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b05      	cmp	r3, #5
 800377c:	d92b      	bls.n	80037d6 <gen_numname+0x76>
		sr = seq;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8003782:	e022      	b.n	80037ca <gen_numname+0x6a>
			wc = *lfn++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1c9a      	adds	r2, r3, #2
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800378e:	2300      	movs	r3, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
 8003792:	e017      	b.n	80037c4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005a      	lsls	r2, r3, #1
 8003798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80037a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <gen_numname+0x5e>
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80037b8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80037bc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	3301      	adds	r3, #1
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	d9e4      	bls.n	8003794 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1d8      	bne.n	8003784 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80037d6:	2307      	movs	r3, #7
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	3330      	adds	r3, #48	; 0x30
 80037e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80037ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ee:	2b39      	cmp	r3, #57	; 0x39
 80037f0:	d904      	bls.n	80037fc <gen_numname+0x9c>
 80037f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037f6:	3307      	adds	r3, #7
 80037f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	1e5a      	subs	r2, r3, #1
 8003800:	62ba      	str	r2, [r7, #40]	; 0x28
 8003802:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003806:	4413      	add	r3, r2
 8003808:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800380c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1de      	bne.n	80037da <gen_numname+0x7a>
	ns[i] = '~';
 800381c:	f107 0214 	add.w	r2, r7, #20
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	4413      	add	r3, r2
 8003824:	227e      	movs	r2, #126	; 0x7e
 8003826:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
 800382c:	e002      	b.n	8003834 <gen_numname+0xd4>
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	3301      	adds	r3, #1
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	429a      	cmp	r2, r3
 800383a:	d205      	bcs.n	8003848 <gen_numname+0xe8>
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b20      	cmp	r3, #32
 8003846:	d1f2      	bne.n	800382e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	2b07      	cmp	r3, #7
 800384c:	d808      	bhi.n	8003860 <gen_numname+0x100>
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	62ba      	str	r2, [r7, #40]	; 0x28
 8003854:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003858:	4413      	add	r3, r2
 800385a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800385e:	e000      	b.n	8003862 <gen_numname+0x102>
 8003860:	2120      	movs	r1, #32
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	627a      	str	r2, [r7, #36]	; 0x24
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4413      	add	r3, r2
 800386c:	460a      	mov	r2, r1
 800386e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	2b07      	cmp	r3, #7
 8003874:	d9e8      	bls.n	8003848 <gen_numname+0xe8>
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	3730      	adds	r7, #48	; 0x30
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800388c:	230b      	movs	r3, #11
 800388e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	0852      	lsrs	r2, r2, #1
 8003896:	01db      	lsls	r3, r3, #7
 8003898:	4313      	orrs	r3, r2
 800389a:	b2da      	uxtb	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	6079      	str	r1, [r7, #4]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4413      	add	r3, r2
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ed      	bne.n	8003890 <sum_sfn+0x10>
	return sum;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80038c8:	2100      	movs	r1, #0
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fc3e 	bl	800314c <dir_sdi>
 80038d0:	4603      	mov	r3, r0
 80038d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <dir_find+0x1e>
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	e0ac      	b.n	8003a38 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80038de:	23ff      	movs	r3, #255	; 0xff
 80038e0:	753b      	strb	r3, [r7, #20]
 80038e2:	7d3b      	ldrb	r3, [r7, #20]
 80038e4:	757b      	strb	r3, [r7, #21]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ec:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f7ff f835 	bl	800296e <move_window>
 8003904:	4603      	mov	r3, r0
 8003906:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 808e 	bne.w	8003a2c <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003916:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800391e:	7dbb      	ldrb	r3, [r7, #22]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <dir_find+0x6a>
 8003924:	2304      	movs	r3, #4
 8003926:	75fb      	strb	r3, [r7, #23]
 8003928:	e085      	b.n	8003a36 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	330b      	adds	r3, #11
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003934:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003936:	7dbb      	ldrb	r3, [r7, #22]
 8003938:	2be5      	cmp	r3, #229	; 0xe5
 800393a:	d007      	beq.n	800394c <dir_find+0x8c>
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <dir_find+0x9c>
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d007      	beq.n	800395c <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800394c:	23ff      	movs	r3, #255	; 0xff
 800394e:	757b      	strb	r3, [r7, #21]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003956:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 800395a:	e05c      	b.n	8003a16 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b0f      	cmp	r3, #15
 8003960:	d133      	bne.n	80039ca <dir_find+0x10a>
				if (dp->lfn) {
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003968:	2b00      	cmp	r3, #0
 800396a:	d054      	beq.n	8003a16 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800396c:	7dbb      	ldrb	r3, [r7, #22]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	7b5b      	ldrb	r3, [r3, #13]
 800397a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800397c:	7dbb      	ldrb	r3, [r7, #22]
 800397e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003982:	75bb      	strb	r3, [r7, #22]
 8003984:	7dbb      	ldrb	r3, [r7, #22]
 8003986:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003994:	7dba      	ldrb	r2, [r7, #22]
 8003996:	7d7b      	ldrb	r3, [r7, #21]
 8003998:	429a      	cmp	r2, r3
 800399a:	d113      	bne.n	80039c4 <dir_find+0x104>
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	330d      	adds	r3, #13
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	7d3a      	ldrb	r2, [r7, #20]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10d      	bne.n	80039c4 <dir_find+0x104>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80039ae:	6939      	ldr	r1, [r7, #16]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fdf3 	bl	800359c <cmp_lfn>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <dir_find+0x104>
 80039bc:	7d7b      	ldrb	r3, [r7, #21]
 80039be:	3b01      	subs	r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e000      	b.n	80039c6 <dir_find+0x106>
 80039c4:	23ff      	movs	r3, #255	; 0xff
 80039c6:	757b      	strb	r3, [r7, #21]
 80039c8:	e025      	b.n	8003a16 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80039ca:	7d7b      	ldrb	r3, [r7, #21]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <dir_find+0x120>
 80039d0:	6938      	ldr	r0, [r7, #16]
 80039d2:	f7ff ff55 	bl	8003880 <sum_sfn>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	7d3b      	ldrb	r3, [r7, #20]
 80039dc:	4293      	cmp	r3, r2
 80039de:	d027      	beq.n	8003a30 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80039e6:	330b      	adds	r3, #11
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <dir_find+0x148>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80039f8:	220b      	movs	r2, #11
 80039fa:	4619      	mov	r1, r3
 80039fc:	6938      	ldr	r0, [r7, #16]
 80039fe:	f7fe fd79 	bl	80024f4 <mem_cmp>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003a08:	23ff      	movs	r3, #255	; 0xff
 8003a0a:	757b      	strb	r3, [r7, #21]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a12:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8003a16:	2100      	movs	r1, #0
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fc2b 	bl	8003274 <dir_next>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f43f af63 	beq.w	80038f0 <dir_find+0x30>
 8003a2a:	e004      	b.n	8003a36 <dir_find+0x176>
		if (res != FR_OK) break;
 8003a2c:	bf00      	nop
 8003a2e:	e002      	b.n	8003a36 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003a34:	bf00      	nop

	return res;
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003a4e:	623b      	str	r3, [r7, #32]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003a56:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8003a58:	f107 030c 	add.w	r3, r7, #12
 8003a5c:	220c      	movs	r2, #12
 8003a5e:	6a39      	ldr	r1, [r7, #32]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fd0f 	bl	8002484 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d037      	beq.n	8003ae0 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	330b      	adds	r3, #11
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 8003a80:	2301      	movs	r3, #1
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a84:	e013      	b.n	8003aae <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8003a86:	f107 010c 	add.w	r1, r7, #12
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	6a38      	ldr	r0, [r7, #32]
 8003a90:	f7ff fe66 	bl	8003760 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ff13 	bl	80038c0 <dir_find>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8003aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	3301      	adds	r3, #1
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	2b63      	cmp	r3, #99	; 0x63
 8003ab2:	d9e8      	bls.n	8003a86 <dir_register+0x46>
 8003ab4:	e000      	b.n	8003ab8 <dir_register+0x78>
			if (res != FR_OK) break;
 8003ab6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d101      	bne.n	8003ac2 <dir_register+0x82>
 8003abe:	2307      	movs	r3, #7
 8003ac0:	e0c5      	b.n	8003c4e <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d002      	beq.n	8003ad0 <dir_register+0x90>
 8003aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ace:	e0be      	b.n	8003c4e <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	330b      	adds	r3, #11
 8003ad4:	7dfa      	ldrb	r2, [r7, #23]
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d014      	beq.n	8003b14 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aee:	e002      	b.n	8003af6 <dir_register+0xb6>
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	3301      	adds	r3, #1
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f5      	bne.n	8003af0 <dir_register+0xb0>
		nent = (n + 25) / 13;
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	3319      	adds	r3, #25
 8003b08:	4a53      	ldr	r2, [pc, #332]	; (8003c58 <dir_register+0x218>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
 8003b12:	e001      	b.n	8003b18 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8003b14:	2301      	movs	r3, #1
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fca1 	bl	8003462 <dir_alloc>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d153      	bne.n	8003bd6 <dir_register+0x196>
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	3b01      	subs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d04d      	beq.n	8003bd6 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8003b40:	461a      	mov	r2, r3
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff faff 	bl	800314c <dir_sdi>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d13c      	bne.n	8003bd6 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fe8c 	bl	8003880 <sum_sfn>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7fe fef7 	bl	800296e <move_window>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8003b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d122      	bne.n	8003bd4 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	7efb      	ldrb	r3, [r7, #27]
 8003ba0:	f7ff fd6a 	bl	8003678 <fit_lfn>
				dp->fs->wflag = 1;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fb5e 	bl	8003274 <dir_next>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8003bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d107      	bne.n	8003bd6 <dir_register+0x196>
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1cc      	bne.n	8003b6c <dir_register+0x12c>
 8003bd2:	e000      	b.n	8003bd6 <dir_register+0x196>
				if (res != FR_OK) break;
 8003bd4:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8003bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d135      	bne.n	8003c4a <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f7fe febe 	bl	800296e <move_window>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d124      	bne.n	8003c4a <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003c06:	2220      	movs	r2, #32
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fc58 	bl	80024c0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003c1c:	220b      	movs	r2, #11
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f7fe fc30 	bl	8002484 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003c2a:	330b      	adds	r3, #11
 8003c2c:	781a      	ldrb	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003c34:	330c      	adds	r3, #12
 8003c36:	f002 0218 	and.w	r2, r2, #24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8003c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3730      	adds	r7, #48	; 0x30
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	4ec4ec4f 	.word	0x4ec4ec4f

08003c5c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	e002      	b.n	8003c74 <create_name+0x18>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3301      	adds	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b2f      	cmp	r3, #47	; 0x2f
 8003c7a:	d0f8      	beq.n	8003c6e <create_name+0x12>
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b5c      	cmp	r3, #92	; 0x5c
 8003c82:	d0f4      	beq.n	8003c6e <create_name+0x12>
	lfn = dp->lfn;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003c8a:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	61ba      	str	r2, [r7, #24]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8003ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ca4:	2b1f      	cmp	r3, #31
 8003ca6:	d92f      	bls.n	8003d08 <create_name+0xac>
 8003ca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003caa:	2b2f      	cmp	r3, #47	; 0x2f
 8003cac:	d02c      	beq.n	8003d08 <create_name+0xac>
 8003cae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cb0:	2b5c      	cmp	r3, #92	; 0x5c
 8003cb2:	d029      	beq.n	8003d08 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2bfe      	cmp	r3, #254	; 0xfe
 8003cb8:	d901      	bls.n	8003cbe <create_name+0x62>
			return FR_INVALID_NAME;
 8003cba:	2306      	movs	r3, #6
 8003cbc:	e17b      	b.n	8003fb6 <create_name+0x35a>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f001 fcb3 	bl	8005634 <ff_convert>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <create_name+0x80>
 8003cd8:	2306      	movs	r3, #6
 8003cda:	e16c      	b.n	8003fb6 <create_name+0x35a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8003cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cde:	2b7f      	cmp	r3, #127	; 0x7f
 8003ce0:	d809      	bhi.n	8003cf6 <create_name+0x9a>
 8003ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	48b6      	ldr	r0, [pc, #728]	; (8003fc0 <create_name+0x364>)
 8003ce8:	f7fe fc2a 	bl	8002540 <chk_chr>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <create_name+0x9a>
			return FR_INVALID_NAME;
 8003cf2:	2306      	movs	r3, #6
 8003cf4:	e15f      	b.n	8003fb6 <create_name+0x35a>
		lfn[di++] = w;					/* Store the Unicode character */
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	617a      	str	r2, [r7, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d04:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8003d06:	e7c5      	b.n	8003c94 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	441a      	add	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d14:	2b1f      	cmp	r3, #31
 8003d16:	d801      	bhi.n	8003d1c <create_name+0xc0>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	e000      	b.n	8003d1e <create_name+0xc2>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8003d22:	e011      	b.n	8003d48 <create_name+0xec>
		w = lfn[di - 1];
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8003d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d002      	beq.n	8003d42 <create_name+0xe6>
 8003d3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d40:	d106      	bne.n	8003d50 <create_name+0xf4>
		di--;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ea      	bne.n	8003d24 <create_name+0xc8>
 8003d4e:	e000      	b.n	8003d52 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8003d50:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <create_name+0x100>
 8003d58:	2306      	movs	r3, #6
 8003d5a:	e12c      	b.n	8003fb6 <create_name+0x35a>

	lfn[di] = 0;						/* LFN is created */
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	2200      	movs	r2, #0
 8003d66:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003d6e:	220b      	movs	r2, #11
 8003d70:	2120      	movs	r1, #32
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fba4 	bl	80024c0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	e002      	b.n	8003d84 <create_name+0x128>
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	3301      	adds	r3, #1
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d0f5      	beq.n	8003d7e <create_name+0x122>
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d9e:	d0ee      	beq.n	8003d7e <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <create_name+0x15e>
 8003da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003daa:	f043 0303 	orr.w	r3, r3, #3
 8003dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003db2:	e002      	b.n	8003dba <create_name+0x15e>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <create_name+0x178>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8003dd2:	d1ef      	bne.n	8003db4 <create_name+0x158>

	b = i = 0; ni = 8;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003dde:	2308      	movs	r3, #8
 8003de0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	61ba      	str	r2, [r7, #24]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4413      	add	r3, r2
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8003df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8090 	beq.w	8003f1a <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d006      	beq.n	8003e0e <create_name+0x1b2>
 8003e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e02:	2b2e      	cmp	r3, #46	; 0x2e
 8003e04:	d10a      	bne.n	8003e1c <create_name+0x1c0>
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d006      	beq.n	8003e1c <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 8003e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e12:	f043 0303 	orr.w	r3, r3, #3
 8003e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e1a:	e07d      	b.n	8003f18 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d203      	bcs.n	8003e2c <create_name+0x1d0>
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d123      	bne.n	8003e74 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b0b      	cmp	r3, #11
 8003e30:	d106      	bne.n	8003e40 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 8003e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e36:	f043 0303 	orr.w	r3, r3, #3
 8003e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e3e:	e06f      	b.n	8003f20 <create_name+0x2c4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d005      	beq.n	8003e54 <create_name+0x1f8>
 8003e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e4c:	f043 0303 	orr.w	r3, r3, #3
 8003e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d860      	bhi.n	8003f1e <create_name+0x2c2>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	2308      	movs	r3, #8
 8003e62:	623b      	str	r3, [r7, #32]
 8003e64:	230b      	movs	r3, #11
 8003e66:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8003e68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003e72:	e051      	b.n	8003f18 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8003e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e76:	2b7f      	cmp	r3, #127	; 0x7f
 8003e78:	d914      	bls.n	8003ea4 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 fbd8 	bl	8005634 <ff_convert>
 8003e84:	4603      	mov	r3, r0
 8003e86:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <create_name+0x23c>
 8003e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e90:	3b80      	subs	r3, #128	; 0x80
 8003e92:	4a4c      	ldr	r2, [pc, #304]	; (8003fc4 <create_name+0x368>)
 8003e94:	5cd3      	ldrb	r3, [r2, r3]
 8003e96:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8003e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e9c:	f043 0302 	orr.w	r3, r3, #2
 8003ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003ea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <create_name+0x25e>
 8003eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003eac:	4619      	mov	r1, r3
 8003eae:	4846      	ldr	r0, [pc, #280]	; (8003fc8 <create_name+0x36c>)
 8003eb0:	f7fe fb46 	bl	8002540 <chk_chr>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003eba:	235f      	movs	r3, #95	; 0x5f
 8003ebc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ec2:	f043 0303 	orr.w	r3, r3, #3
 8003ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003eca:	e01b      	b.n	8003f04 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d909      	bls.n	8003ee6 <create_name+0x28a>
 8003ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ed4:	2b5a      	cmp	r3, #90	; 0x5a
 8003ed6:	d806      	bhi.n	8003ee6 <create_name+0x28a>
					b |= 2;
 8003ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ee4:	e00e      	b.n	8003f04 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8003ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ee8:	2b60      	cmp	r3, #96	; 0x60
 8003eea:	d90b      	bls.n	8003f04 <create_name+0x2a8>
 8003eec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003eee:	2b7a      	cmp	r3, #122	; 0x7a
 8003ef0:	d808      	bhi.n	8003f04 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 8003ef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f00:	3b20      	subs	r3, #32
 8003f02:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	1c59      	adds	r1, r3, #1
 8003f0e:	6239      	str	r1, [r7, #32]
 8003f10:	4413      	add	r3, r2
 8003f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8003f18:	e763      	b.n	8003de2 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <create_name+0x2c4>
			if (si > di) break;			/* No extension */
 8003f1e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2be5      	cmp	r3, #229	; 0xe5
 8003f2a:	d104      	bne.n	8003f36 <create_name+0x2da>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f32:	2205      	movs	r2, #5
 8003f34:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d104      	bne.n	8003f46 <create_name+0x2ea>
 8003f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8003f46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b0c      	cmp	r3, #12
 8003f50:	d005      	beq.n	8003f5e <create_name+0x302>
 8003f52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d105      	bne.n	8003f6a <create_name+0x30e>
		cf |= NS_LFN;
 8003f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d117      	bne.n	8003fa6 <create_name+0x34a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003f76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <create_name+0x332>
 8003f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f86:	f043 0310 	orr.w	r3, r3, #16
 8003f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d105      	bne.n	8003fa6 <create_name+0x34a>
 8003f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f9e:	f043 0308 	orr.w	r3, r3, #8
 8003fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003fac:	330b      	adds	r3, #11
 8003fae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003fb2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003fb4:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3728      	adds	r7, #40	; 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	080057bc 	.word	0x080057bc
 8003fc4:	08005830 	.word	0x08005830
 8003fc8:	080057c8 	.word	0x080057c8

08003fcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b2f      	cmp	r3, #47	; 0x2f
 8003fdc:	d003      	beq.n	8003fe6 <follow_path+0x1a>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b5c      	cmp	r3, #92	; 0x5c
 8003fe4:	d102      	bne.n	8003fec <follow_path+0x20>
		path++;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b1f      	cmp	r3, #31
 8003ffa:	d80a      	bhi.n	8004012 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff f8a4 	bl	800314c <dir_sdi>
 8004004:	4603      	mov	r3, r0
 8004006:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004010:	e045      	b.n	800409e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004012:	463b      	mov	r3, r7
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fe20 	bl	8003c5c <create_name>
 800401c:	4603      	mov	r3, r0
 800401e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d136      	bne.n	8004094 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fc4a 	bl	80038c0 <dir_find>
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004036:	7adb      	ldrb	r3, [r3, #11]
 8004038:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b04      	cmp	r3, #4
 8004044:	d128      	bne.n	8004098 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004046:	7bbb      	ldrb	r3, [r7, #14]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d123      	bne.n	8004098 <follow_path+0xcc>
 8004050:	2305      	movs	r3, #5
 8004052:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004054:	e020      	b.n	8004098 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004056:	7bbb      	ldrb	r3, [r7, #14]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11d      	bne.n	800409c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004066:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	330b      	adds	r3, #11
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8004076:	2305      	movs	r3, #5
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e010      	b.n	800409e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fa36 	bl	80034f6 <ld_clust>
 800408a:	4602      	mov	r2, r0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004092:	e7be      	b.n	8004012 <follow_path+0x46>
			if (res != FR_OK) break;
 8004094:	bf00      	nop
 8004096:	e002      	b.n	800409e <follow_path+0xd2>
				break;
 8004098:	bf00      	nop
 800409a:	e000      	b.n	800409e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800409c:	bf00      	nop
		}
	}

	return res;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80040b0:	f04f 33ff 	mov.w	r3, #4294967295
 80040b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d031      	beq.n	8004122 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	e002      	b.n	80040cc <get_ldnumber+0x24>
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3301      	adds	r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b1f      	cmp	r3, #31
 80040d2:	d903      	bls.n	80040dc <get_ldnumber+0x34>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b3a      	cmp	r3, #58	; 0x3a
 80040da:	d1f4      	bne.n	80040c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b3a      	cmp	r3, #58	; 0x3a
 80040e2:	d11c      	bne.n	800411e <get_ldnumber+0x76>
			tp = *path;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	60fa      	str	r2, [r7, #12]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	3b30      	subs	r3, #48	; 0x30
 80040f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b09      	cmp	r3, #9
 80040fa:	d80e      	bhi.n	800411a <get_ldnumber+0x72>
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	429a      	cmp	r2, r3
 8004102:	d10a      	bne.n	800411a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <get_ldnumber+0x72>
					vol = (int)i;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3301      	adds	r3, #1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	e002      	b.n	8004124 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004122:	693b      	ldr	r3, [r7, #16]
}
 8004124:	4618      	mov	r0, r3
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
	...

08004130 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800414c:	6839      	ldr	r1, [r7, #0]
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fe fc0d 	bl	800296e <move_window>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <check_fs+0x2e>
		return 3;
 800415a:	2303      	movs	r3, #3
 800415c:	e04a      	b.n	80041f4 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004164:	3301      	adds	r3, #1
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	b21a      	sxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004172:	b21b      	sxth	r3, r3
 8004174:	4313      	orrs	r3, r2
 8004176:	b21b      	sxth	r3, r3
 8004178:	4a20      	ldr	r2, [pc, #128]	; (80041fc <check_fs+0xcc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d001      	beq.n	8004182 <check_fs+0x52>
		return 2;
 800417e:	2302      	movs	r3, #2
 8004180:	e038      	b.n	80041f4 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3336      	adds	r3, #54	; 0x36
 8004186:	3303      	adds	r3, #3
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	061a      	lsls	r2, r3, #24
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3336      	adds	r3, #54	; 0x36
 8004190:	3302      	adds	r3, #2
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	4313      	orrs	r3, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	3236      	adds	r2, #54	; 0x36
 800419c:	3201      	adds	r2, #1
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	0212      	lsls	r2, r2, #8
 80041a2:	4313      	orrs	r3, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <check_fs+0xd0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <check_fs+0x8a>
		return 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e01c      	b.n	80041f4 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3352      	adds	r3, #82	; 0x52
 80041be:	3303      	adds	r3, #3
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	061a      	lsls	r2, r3, #24
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3352      	adds	r3, #82	; 0x52
 80041c8:	3302      	adds	r3, #2
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	041b      	lsls	r3, r3, #16
 80041ce:	4313      	orrs	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	3252      	adds	r2, #82	; 0x52
 80041d4:	3201      	adds	r2, #1
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	0212      	lsls	r2, r2, #8
 80041da:	4313      	orrs	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041e8:	4a05      	ldr	r2, [pc, #20]	; (8004200 <check_fs+0xd0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <check_fs+0xc2>
		return 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e000      	b.n	80041f4 <check_fs+0xc4>

	return 1;
 80041f2:	2301      	movs	r3, #1
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	ffffaa55 	.word	0xffffaa55
 8004200:	00544146 	.word	0x00544146

08004204 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b096      	sub	sp, #88	; 0x58
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004218:	68b8      	ldr	r0, [r7, #8]
 800421a:	f7ff ff45 	bl	80040a8 <get_ldnumber>
 800421e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004222:	2b00      	cmp	r3, #0
 8004224:	da01      	bge.n	800422a <find_volume+0x26>
 8004226:	230b      	movs	r3, #11
 8004228:	e2aa      	b.n	8004780 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800422a:	4a9e      	ldr	r2, [pc, #632]	; (80044a4 <find_volume+0x2a0>)
 800422c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <find_volume+0x3a>
 800423a:	230c      	movs	r3, #12
 800423c:	e2a0      	b.n	8004780 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004242:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01b      	beq.n	8004286 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe f877 	bl	8002348 <disk_status>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10c      	bne.n	8004286 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <find_volume+0x7e>
 8004272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800427e:	230a      	movs	r3, #10
 8004280:	e27e      	b.n	8004780 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8004282:	2300      	movs	r3, #0
 8004284:	e27c      	b.n	8004780 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004290:	b2da      	uxtb	r2, r3
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe f86c 	bl	800237c <disk_initialize>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80042aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80042b6:	2303      	movs	r3, #3
 80042b8:	e262      	b.n	8004780 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <find_volume+0xcc>
 80042c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80042cc:	230a      	movs	r3, #10
 80042ce:	e257      	b.n	8004780 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80042d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80042d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042d8:	f7ff ff2a 	bl	8004130 <check_fs>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80042e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d155      	bne.n	8004396 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80042ea:	2300      	movs	r3, #0
 80042ec:	643b      	str	r3, [r7, #64]	; 0x40
 80042ee:	e029      	b.n	8004344 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80042f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80042fa:	4413      	add	r3, r2
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	3304      	adds	r3, #4
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d012      	beq.n	800432e <find_volume+0x12a>
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	330b      	adds	r3, #11
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	061a      	lsls	r2, r3, #24
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	330a      	adds	r3, #10
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	4313      	orrs	r3, r2
 800431a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431c:	3209      	adds	r2, #9
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	0212      	lsls	r2, r2, #8
 8004322:	4313      	orrs	r3, r2
 8004324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004326:	3208      	adds	r2, #8
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	431a      	orrs	r2, r3
 800432c:	e000      	b.n	8004330 <find_volume+0x12c>
 800432e:	2200      	movs	r2, #0
 8004330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004338:	440b      	add	r3, r1
 800433a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800433e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004340:	3301      	adds	r3, #1
 8004342:	643b      	str	r3, [r7, #64]	; 0x40
 8004344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004346:	2b03      	cmp	r3, #3
 8004348:	d9d2      	bls.n	80042f0 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800434a:	2300      	movs	r3, #0
 800434c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800434e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <find_volume+0x156>
 8004354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004356:	3b01      	subs	r3, #1
 8004358:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800435a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004362:	4413      	add	r3, r2
 8004364:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004368:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800436a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <find_volume+0x178>
 8004370:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004372:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004374:	f7ff fedc 	bl	8004130 <check_fs>
 8004378:	4603      	mov	r3, r0
 800437a:	e000      	b.n	800437e <find_volume+0x17a>
 800437c:	2302      	movs	r3, #2
 800437e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <find_volume+0x192>
 800438a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438c:	3301      	adds	r3, #1
 800438e:	643b      	str	r3, [r7, #64]	; 0x40
 8004390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004392:	2b03      	cmp	r3, #3
 8004394:	d9e1      	bls.n	800435a <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800439a:	2b03      	cmp	r3, #3
 800439c:	d101      	bne.n	80043a2 <find_volume+0x19e>
 800439e:	2301      	movs	r3, #1
 80043a0:	e1ee      	b.n	8004780 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80043a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <find_volume+0x1aa>
 80043aa:	230d      	movs	r3, #13
 80043ac:	e1e8      	b.n	8004780 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	7b1b      	ldrb	r3, [r3, #12]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	b21a      	sxth	r2, r3
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	7adb      	ldrb	r3, [r3, #11]
 80043ba:	b21b      	sxth	r3, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	b21b      	sxth	r3, r3
 80043c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c4:	d001      	beq.n	80043ca <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 80043c6:	230d      	movs	r3, #13
 80043c8:	e1da      	b.n	8004780 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	7ddb      	ldrb	r3, [r3, #23]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	b21a      	sxth	r2, r3
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	7d9b      	ldrb	r3, [r3, #22]
 80043d6:	b21b      	sxth	r3, r3
 80043d8:	4313      	orrs	r3, r2
 80043da:	b21b      	sxth	r3, r3
 80043dc:	b29b      	uxth	r3, r3
 80043de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80043e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d112      	bne.n	800440c <find_volume+0x208>
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80043ec:	061a      	lsls	r2, r3, #24
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	4313      	orrs	r3, r2
 80043f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043fa:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80043fe:	0212      	lsls	r2, r2, #8
 8004400:	4313      	orrs	r3, r2
 8004402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004404:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004408:	4313      	orrs	r3, r2
 800440a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004410:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	7c1a      	ldrb	r2, [r3, #16]
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004424:	2b01      	cmp	r3, #1
 8004426:	d006      	beq.n	8004436 <find_volume+0x232>
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800442e:	2b02      	cmp	r3, #2
 8004430:	d001      	beq.n	8004436 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8004432:	230d      	movs	r3, #13
 8004434:	e1a4      	b.n	8004780 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800443c:	461a      	mov	r2, r3
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	fb02 f303 	mul.w	r3, r2, r3
 8004444:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	7b5a      	ldrb	r2, [r3, #13]
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <find_volume+0x26c>
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004460:	461a      	mov	r2, r3
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004468:	3b01      	subs	r3, #1
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8004470:	230d      	movs	r3, #13
 8004472:	e185      	b.n	8004780 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	7c9b      	ldrb	r3, [r3, #18]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	b21a      	sxth	r2, r3
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	7c5b      	ldrb	r3, [r3, #17]
 8004480:	b21b      	sxth	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b21b      	sxth	r3, r3
 8004486:	b29a      	uxth	r2, r3
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800449e:	230d      	movs	r3, #13
 80044a0:	e16e      	b.n	8004780 <find_volume+0x57c>
 80044a2:	bf00      	nop
 80044a4:	2000003c 	.word	0x2000003c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	7d1b      	ldrb	r3, [r3, #20]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	b21a      	sxth	r2, r3
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	7cdb      	ldrb	r3, [r3, #19]
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	4313      	orrs	r3, r2
 80044b8:	b21b      	sxth	r3, r3
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80044be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d112      	bne.n	80044ea <find_volume+0x2e6>
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80044ca:	061a      	lsls	r2, r3, #24
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	4313      	orrs	r3, r2
 80044d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044d8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80044dc:	0212      	lsls	r2, r2, #8
 80044de:	4313      	orrs	r3, r2
 80044e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	7bdb      	ldrb	r3, [r3, #15]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	b21a      	sxth	r2, r3
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	7b9b      	ldrb	r3, [r3, #14]
 80044f6:	b21b      	sxth	r3, r3
 80044f8:	4313      	orrs	r3, r2
 80044fa:	b21b      	sxth	r3, r3
 80044fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80044fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <find_volume+0x304>
 8004504:	230d      	movs	r3, #13
 8004506:	e13b      	b.n	8004780 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004508:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450c:	4413      	add	r3, r2
 800450e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004510:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8004514:	0912      	lsrs	r2, r2, #4
 8004516:	b292      	uxth	r2, r2
 8004518:	4413      	add	r3, r2
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800451c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	429a      	cmp	r2, r3
 8004522:	d201      	bcs.n	8004528 <find_volume+0x324>
 8004524:	230d      	movs	r3, #13
 8004526:	e12b      	b.n	8004780 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004530:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004534:	fbb3 f3f2 	udiv	r3, r3, r2
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <find_volume+0x340>
 8004540:	230d      	movs	r3, #13
 8004542:	e11d      	b.n	8004780 <find_volume+0x57c>
	fmt = FS_FAT12;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004550:	4293      	cmp	r3, r2
 8004552:	d902      	bls.n	800455a <find_volume+0x356>
 8004554:	2302      	movs	r3, #2
 8004556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004560:	4293      	cmp	r3, r2
 8004562:	d902      	bls.n	800456a <find_volume+0x366>
 8004564:	2303      	movs	r3, #3
 8004566:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	1c9a      	adds	r2, r3, #2
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004578:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800457c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800457e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004580:	441a      	add	r2, r3
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8004588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	441a      	add	r2, r3
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8004594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004598:	2b03      	cmp	r3, #3
 800459a:	d121      	bne.n	80045e0 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <find_volume+0x3a6>
 80045a6:	230d      	movs	r3, #13
 80045a8:	e0ea      	b.n	8004780 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80045b0:	061a      	lsls	r2, r3, #24
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	4313      	orrs	r3, r2
 80045bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045be:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80045c2:	0212      	lsls	r2, r2, #8
 80045c4:	4313      	orrs	r3, r2
 80045c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045c8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80045cc:	431a      	orrs	r2, r3
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	647b      	str	r3, [r7, #68]	; 0x44
 80045de:	e025      	b.n	800462c <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <find_volume+0x3ea>
 80045ea:	230d      	movs	r3, #13
 80045ec:	e0c8      	b.n	8004780 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80045f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f6:	441a      	add	r2, r3
 80045f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fa:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80045fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004602:	2b02      	cmp	r3, #2
 8004604:	d104      	bne.n	8004610 <find_volume+0x40c>
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	e00c      	b.n	800462a <find_volume+0x426>
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004616:	4613      	mov	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	085a      	lsrs	r2, r3, #1
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800462a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004634:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004638:	0a5b      	lsrs	r3, r3, #9
 800463a:	429a      	cmp	r2, r3
 800463c:	d201      	bcs.n	8004642 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800463e:	230d      	movs	r3, #13
 8004640:	e09e      	b.n	8004780 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	f04f 32ff 	mov.w	r2, #4294967295
 8004648:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465a:	2280      	movs	r2, #128	; 0x80
 800465c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004664:	2b03      	cmp	r3, #3
 8004666:	d177      	bne.n	8004758 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	b21a      	sxth	r2, r3
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004678:	b21b      	sxth	r3, r3
 800467a:	4313      	orrs	r3, r2
 800467c:	b21b      	sxth	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d16a      	bne.n	8004758 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004684:	3301      	adds	r3, #1
 8004686:	4619      	mov	r1, r3
 8004688:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800468a:	f7fe f970 	bl	800296e <move_window>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d161      	bne.n	8004758 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	b21a      	sxth	r2, r3
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80046ac:	b21b      	sxth	r3, r3
 80046ae:	4313      	orrs	r3, r2
 80046b0:	b21b      	sxth	r3, r3
 80046b2:	4a35      	ldr	r2, [pc, #212]	; (8004788 <find_volume+0x584>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d14f      	bne.n	8004758 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	78db      	ldrb	r3, [r3, #3]
 80046bc:	061a      	lsls	r2, r3, #24
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	789b      	ldrb	r3, [r3, #2]
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	4313      	orrs	r3, r2
 80046c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046c8:	7852      	ldrb	r2, [r2, #1]
 80046ca:	0212      	lsls	r2, r2, #8
 80046cc:	4313      	orrs	r3, r2
 80046ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	4a2d      	ldr	r2, [pc, #180]	; (800478c <find_volume+0x588>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d13e      	bne.n	8004758 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80046e0:	061a      	lsls	r2, r3, #24
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80046e8:	041b      	lsls	r3, r3, #16
 80046ea:	4313      	orrs	r3, r2
 80046ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ee:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80046f2:	0212      	lsls	r2, r2, #8
 80046f4:	4313      	orrs	r3, r2
 80046f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046f8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80046fc:	4313      	orrs	r3, r2
 80046fe:	4a24      	ldr	r2, [pc, #144]	; (8004790 <find_volume+0x58c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d129      	bne.n	8004758 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004706:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800470a:	061a      	lsls	r2, r3, #24
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	4313      	orrs	r3, r2
 8004716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004718:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800471c:	0212      	lsls	r2, r2, #8
 800471e:	4313      	orrs	r3, r2
 8004720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004722:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8004726:	431a      	orrs	r2, r3
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8004734:	061a      	lsls	r2, r3, #24
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	4313      	orrs	r3, r2
 8004740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004742:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8004746:	0212      	lsls	r2, r2, #8
 8004748:	4313      	orrs	r3, r2
 800474a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800474c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8004750:	431a      	orrs	r2, r3
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800475e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <find_volume+0x590>)
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <find_volume+0x590>)
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <find_volume+0x590>)
 8004770:	881a      	ldrh	r2, [r3, #0]
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004778:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800477a:	f7fe f885 	bl	8002888 <clear_lock>
#endif

	return FR_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3758      	adds	r7, #88	; 0x58
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	ffffaa55 	.word	0xffffaa55
 800478c:	41615252 	.word	0x41615252
 8004790:	61417272 	.word	0x61417272
 8004794:	20000040 	.word	0x20000040

08004798 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d022      	beq.n	80047f0 <validate+0x58>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01d      	beq.n	80047f0 <validate+0x58>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <validate+0x58>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047c8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d10c      	bne.n	80047f0 <validate+0x58>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047dc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fd fdb1 	bl	8002348 <disk_status>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <validate+0x5c>
		return FR_INVALID_OBJECT;
 80047f0:	2309      	movs	r3, #9
 80047f2:	e000      	b.n	80047f6 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8004806:	af00      	add	r7, sp, #0
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	6018      	str	r0, [r3, #0]
 800480e:	f107 0308 	add.w	r3, r7, #8
 8004812:	6019      	str	r1, [r3, #0]
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <f_open+0x26>
 8004822:	2309      	movs	r3, #9
 8004824:	e1f9      	b.n	8004c1a <f_open+0x41a>
	fp->fs = 0;			/* Clear file object */
 8004826:	f107 030c 	add.w	r3, r7, #12
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2200      	movs	r2, #0
 800482e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004832:	1dfb      	adds	r3, r7, #7
 8004834:	1dfa      	adds	r2, r7, #7
 8004836:	7812      	ldrb	r2, [r2, #0]
 8004838:	f002 021f 	and.w	r2, r2, #31
 800483c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800483e:	1dfb      	adds	r3, r7, #7
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	f107 0108 	add.w	r1, r7, #8
 800484c:	f107 0320 	add.w	r3, r7, #32
 8004850:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fcd5 	bl	8004204 <find_volume>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004860:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8004864:	2b00      	cmp	r3, #0
 8004866:	f040 81d6 	bne.w	8004c16 <f_open+0x416>
		INIT_BUF(dj);
 800486a:	f107 0320 	add.w	r3, r7, #32
 800486e:	f107 0214 	add.w	r2, r7, #20
 8004872:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8004876:	f107 0320 	add.w	r3, r7, #32
 800487a:	4a8b      	ldr	r2, [pc, #556]	; (8004aa8 <f_open+0x2a8>)
 800487c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 8004880:	f107 0308 	add.w	r3, r7, #8
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	f107 0320 	add.w	r3, r7, #32
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fb9d 	bl	8003fcc <follow_path>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 8004898:	f107 0320 	add.w	r3, r7, #32
 800489c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048a0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80048a4:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d11a      	bne.n	80048e2 <f_open+0xe2>
			if (!dir)	/* Default directory itself */
 80048ac:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <f_open+0xbc>
				res = FR_INVALID_NAME;
 80048b4:	2306      	movs	r3, #6
 80048b6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80048ba:	e012      	b.n	80048e2 <f_open+0xe2>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80048bc:	1dfb      	adds	r3, r7, #7
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	f023 0301 	bic.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	f107 0320 	add.w	r3, r7, #32
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd fe4c 	bl	8002574 <chk_lock>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80048e2:	1dfb      	adds	r3, r7, #7
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f003 031c 	and.w	r3, r3, #28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80cc 	beq.w	8004a88 <f_open+0x288>
			if (res != FR_OK) {					/* No file, create new */
 80048f0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01f      	beq.n	8004938 <f_open+0x138>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80048f8:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d10e      	bne.n	800491e <f_open+0x11e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004900:	f7fd fea4 	bl	800264c <enq_lock>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d006      	beq.n	8004918 <f_open+0x118>
 800490a:	f107 0320 	add.w	r3, r7, #32
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff f896 	bl	8003a40 <dir_register>
 8004914:	4603      	mov	r3, r0
 8004916:	e000      	b.n	800491a <f_open+0x11a>
 8004918:	2312      	movs	r3, #18
 800491a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800491e:	1dfb      	adds	r3, r7, #7
 8004920:	1dfa      	adds	r2, r7, #7
 8004922:	7812      	ldrb	r2, [r2, #0]
 8004924:	f042 0208 	orr.w	r2, r2, #8
 8004928:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800492a:	f107 0320 	add.w	r3, r7, #32
 800492e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004932:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8004936:	e014      	b.n	8004962 <f_open+0x162>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004938:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800493c:	330b      	adds	r3, #11
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	f003 0311 	and.w	r3, r3, #17
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <f_open+0x150>
					res = FR_DENIED;
 8004948:	2307      	movs	r3, #7
 800494a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800494e:	e008      	b.n	8004962 <f_open+0x162>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004950:	1dfb      	adds	r3, r7, #7
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <f_open+0x162>
						res = FR_EXIST;
 800495c:	2308      	movs	r3, #8
 800495e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004962:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8004966:	2b00      	cmp	r3, #0
 8004968:	f040 80b1 	bne.w	8004ace <f_open+0x2ce>
 800496c:	1dfb      	adds	r3, r7, #7
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80aa 	beq.w	8004ace <f_open+0x2ce>
				dw = GET_FATTIME();				/* Created time */
 800497a:	f7fd fc8d 	bl	8002298 <get_fattime>
 800497e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004982:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004986:	330e      	adds	r3, #14
 8004988:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004994:	b29b      	uxth	r3, r3
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	b29a      	uxth	r2, r3
 800499a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800499e:	330f      	adds	r3, #15
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80049a8:	0c1a      	lsrs	r2, r3, #16
 80049aa:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80049ae:	3310      	adds	r3, #16
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80049b8:	0e1a      	lsrs	r2, r3, #24
 80049ba:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80049be:	3311      	adds	r3, #17
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80049c4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80049c8:	330b      	adds	r3, #11
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80049ce:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80049d2:	331c      	adds	r3, #28
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80049dc:	331d      	adds	r3, #29
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80049e6:	331e      	adds	r3, #30
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80049f0:	331f      	adds	r3, #31
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80049f6:	f107 0320 	add.w	r3, r7, #32
 80049fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049fe:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fd77 	bl	80034f6 <ld_clust>
 8004a08:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				st_clust(dir, 0);				/* cluster = 0 */
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8004a12:	f7fe fd9d 	bl	8003550 <st_clust>
				dj.fs->wflag = 1;
 8004a16:	f107 0320 	add.w	r3, r7, #32
 8004a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8004a24:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d050      	beq.n	8004ace <f_open+0x2ce>
					dw = dj.fs->winsect;
 8004a2c:	f107 0320 	add.w	r3, r7, #32
 8004a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a34:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004a38:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					res = remove_chain(dj.fs, cl);
 8004a3c:	f107 0320 	add.w	r3, r7, #32
 8004a40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a44:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe fa54 	bl	8002ef6 <remove_chain>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 8004a54:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d138      	bne.n	8004ace <f_open+0x2ce>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004a5c:	f107 0320 	add.w	r3, r7, #32
 8004a60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a64:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8004a6e:	f107 0320 	add.w	r3, r7, #32
 8004a72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a76:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fd ff77 	bl	800296e <move_window>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8004a86:	e022      	b.n	8004ace <f_open+0x2ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8004a88:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11e      	bne.n	8004ace <f_open+0x2ce>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004a90:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004a94:	330b      	adds	r3, #11
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <f_open+0x2ac>
					res = FR_NO_FILE;
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8004aa6:	e012      	b.n	8004ace <f_open+0x2ce>
 8004aa8:	2000005c 	.word	0x2000005c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8004aac:	1dfb      	adds	r3, r7, #7
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <f_open+0x2ce>
 8004ab8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004abc:	330b      	adds	r3, #11
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <f_open+0x2ce>
						res = FR_DENIED;
 8004ac8:	2307      	movs	r3, #7
 8004aca:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 8004ace:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d13d      	bne.n	8004b52 <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004ad6:	1dfb      	adds	r3, r7, #7
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <f_open+0x2ee>
				mode |= FA__WRITTEN;
 8004ae2:	1dfb      	adds	r3, r7, #7
 8004ae4:	1dfa      	adds	r2, r7, #7
 8004ae6:	7812      	ldrb	r2, [r2, #0]
 8004ae8:	f042 0220 	orr.w	r2, r2, #32
 8004aec:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004aee:	f107 0320 	add.w	r3, r7, #32
 8004af2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004af6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004afa:	f107 030c 	add.w	r3, r7, #12
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8004b04:	f107 030c 	add.w	r3, r7, #12
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004b0e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004b12:	1dfb      	adds	r3, r7, #7
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf14      	ite	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	2300      	moveq	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	f107 0320 	add.w	r3, r7, #32
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fd fdb1 	bl	8002694 <inc_lock>
 8004b32:	4602      	mov	r2, r0
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8004b3e:	f107 030c 	add.w	r3, r7, #12
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <f_open+0x352>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8004b52:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d15d      	bne.n	8004c16 <f_open+0x416>
			fp->flag = mode;					/* File access mode */
 8004b5a:	f107 030c 	add.w	r3, r7, #12
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	1dfa      	adds	r2, r7, #7
 8004b62:	7812      	ldrb	r2, [r2, #0]
 8004b64:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004b74:	f107 0320 	add.w	r3, r7, #32
 8004b78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b7c:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fcb8 	bl	80034f6 <ld_clust>
 8004b86:	4602      	mov	r2, r0
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8004b92:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004b96:	331f      	adds	r3, #31
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	061a      	lsls	r2, r3, #24
 8004b9c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004ba0:	331e      	adds	r3, #30
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004bac:	321d      	adds	r2, #29
 8004bae:	7812      	ldrb	r2, [r2, #0]
 8004bb0:	0212      	lsls	r2, r2, #8
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004bb8:	321c      	adds	r2, #28
 8004bba:	7812      	ldrb	r2, [r2, #0]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	f107 030c 	add.w	r3, r7, #12
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8004bc8:	f107 030c 	add.w	r3, r7, #12
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8004be0:	f107 030c 	add.w	r3, r7, #12
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8004bec:	f107 0320 	add.w	r3, r7, #32
 8004bf0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004bf4:	f107 030c 	add.w	r3, r7, #12
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8004bfe:	f107 030c 	add.w	r3, r7, #12
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c08:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8004c0c:	f107 030c 	add.w	r3, r7, #12
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8004c16:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08c      	sub	sp, #48	; 0x30
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff fdab 	bl	8004798 <validate>
 8004c42:	4603      	mov	r3, r0
 8004c44:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <f_read+0x2c>
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
 8004c4e:	e150      	b.n	8004ef2 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8004c60:	e147      	b.n	8004ef2 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8004c70:	2307      	movs	r3, #7
 8004c72:	e13e      	b.n	8004ef2 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	f240 812d 	bls.w	8004ee8 <f_read+0x2c4>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004c92:	e129      	b.n	8004ee8 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 80f2 	bne.w	8004e88 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004caa:	0a5b      	lsrs	r3, r3, #9
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cb4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d139      	bne.n	8004d3a <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd8:	e018      	b.n	8004d0c <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004cea:	4619      	mov	r1, r3
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7fe f9f9 	bl	80030e4 <clmt_clust>
 8004cf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004cf4:	e00a      	b.n	8004d0c <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d02:	4619      	mov	r1, r3
 8004d04:	4610      	mov	r0, r2
 8004d06:	f7fd ff2e 	bl	8002b66 <get_fat>
 8004d0a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8004d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d805      	bhi.n	8004d1e <f_read+0xfa>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e0e9      	b.n	8004ef2 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d105      	bne.n	8004d32 <f_read+0x10e>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0df      	b.n	8004ef2 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7fd feeb 	bl	8002b24 <clust2sect>
 8004d4e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d105      	bne.n	8004d62 <f_read+0x13e>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e0c7      	b.n	8004ef2 <f_read+0x2ce>
			sect += csect;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4413      	add	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0a5b      	lsrs	r3, r3, #9
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d046      	beq.n	8004e04 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004d76:	7dfa      	ldrb	r2, [r7, #23]
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	4413      	add	r3, r2
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004d82:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d908      	bls.n	8004d9c <f_read+0x178>
					cc = fp->fs->csize - csect;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d90:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004d94:	461a      	mov	r2, r3
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004da2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	6a39      	ldr	r1, [r7, #32]
 8004dac:	f7fd fb0c 	bl	80023c8 <disk_read>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e097      	b.n	8004ef2 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d015      	beq.n	8004dfc <f_read+0x1d8>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d90d      	bls.n	8004dfc <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	025b      	lsls	r3, r3, #9
 8004dec:	6a3a      	ldr	r2, [r7, #32]
 8004dee:	4413      	add	r3, r2
 8004df0:	68f9      	ldr	r1, [r7, #12]
 8004df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd fb44 	bl	8002484 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	025b      	lsls	r3, r3, #9
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8004e02:	e05b      	b.n	8004ebc <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d037      	beq.n	8004e80 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01d      	beq.n	8004e5a <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e24:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004e30:	2301      	movs	r3, #1
 8004e32:	f7fd fae9 	bl	8002408 <disk_write>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004e44:	2301      	movs	r3, #1
 8004e46:	e054      	b.n	8004ef2 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e60:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	2301      	movs	r3, #1
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	f7fd faad 	bl	80023c8 <disk_read>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e038      	b.n	8004ef2 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e92:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8004e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d901      	bls.n	8004ea4 <f_read+0x280>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6a38      	ldr	r0, [r7, #32]
 8004eb8:	f7fd fae4 	bl	8002484 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004ebc:	6a3a      	ldr	r2, [r7, #32]
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	4413      	add	r3, r2
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	441a      	add	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	441a      	add	r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f47f aed2 	bne.w	8004c94 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3730      	adds	r7, #48	; 0x30
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b08a      	sub	sp, #40	; 0x28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff fc40 	bl	8004798 <validate>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <f_write+0x2c>
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	e192      	b.n	800524c <f_write+0x352>
	if (fp->err)							/* Check error */
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8004f36:	e189      	b.n	800524c <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8004f46:	2307      	movs	r3, #7
 8004f48:	e180      	b.n	800524c <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	441a      	add	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	f080 8158 	bcs.w	8005210 <f_write+0x316>
 8004f60:	2300      	movs	r3, #0
 8004f62:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8004f64:	e154      	b.n	8005210 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 8114 	bne.w	800519e <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004f7c:	0a5b      	lsrs	r3, r3, #9
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f86:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	4013      	ands	r3, r2
 8004f90:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8004f92:	7dbb      	ldrb	r3, [r7, #22]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d151      	bne.n	800503c <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10f      	bne.n	8004fc2 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d121      	bne.n	8004ff4 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fd fff6 	bl	8002faa <create_chain>
 8004fbe:	6278      	str	r0, [r7, #36]	; 0x24
 8004fc0:	e018      	b.n	8004ff4 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7fe f885 	bl	80030e4 <clmt_clust>
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24
 8004fdc:	e00a      	b.n	8004ff4 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f7fd ffdc 	bl	8002faa <create_chain>
 8004ff2:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 810f 	beq.w	800521a <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d105      	bne.n	800500e <f_write+0x114>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800500a:	2302      	movs	r3, #2
 800500c:	e11e      	b.n	800524c <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d105      	bne.n	8005022 <f_write+0x128>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800501e:	2301      	movs	r3, #1
 8005020:	e114      	b.n	800524c <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005026:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005030:	2b00      	cmp	r3, #0
 8005032:	d103      	bne.n	800503c <f_write+0x142>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01d      	beq.n	8005086 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005050:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800505c:	2301      	movs	r3, #1
 800505e:	f7fd f9d3 	bl	8002408 <disk_write>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005070:	2301      	movs	r3, #1
 8005072:	e0eb      	b.n	800524c <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800507a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507e:	b2da      	uxtb	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f7fd fd45 	bl	8002b24 <clust2sect>
 800509a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d105      	bne.n	80050ae <f_write+0x1b4>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80050aa:	2302      	movs	r3, #2
 80050ac:	e0ce      	b.n	800524c <f_write+0x352>
			sect += csect;
 80050ae:	7dbb      	ldrb	r3, [r7, #22]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4413      	add	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0a5b      	lsrs	r3, r3, #9
 80050ba:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d048      	beq.n	8005154 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80050c2:	7dba      	ldrb	r2, [r7, #22]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80050ce:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d908      	bls.n	80050e8 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050dc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80050e0:	461a      	mov	r2, r3
 80050e2:	7dbb      	ldrb	r3, [r7, #22]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050ee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	69b9      	ldr	r1, [r7, #24]
 80050f8:	f7fd f986 	bl	8002408 <disk_write>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800510a:	2301      	movs	r3, #1
 800510c:	e09e      	b.n	800524c <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	429a      	cmp	r2, r3
 800511c:	d916      	bls.n	800514c <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	025b      	lsls	r3, r3, #9
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4413      	add	r3, r2
 8005130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005134:	4619      	mov	r1, r3
 8005136:	f7fd f9a5 	bl	8002484 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005144:	b2da      	uxtb	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	025b      	lsls	r3, r3, #9
 8005150:	623b      	str	r3, [r7, #32]
				continue;
 8005152:	e047      	b.n	80051e4 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	429a      	cmp	r2, r3
 800515e:	d01a      	beq.n	8005196 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800516c:	429a      	cmp	r2, r3
 800516e:	d212      	bcs.n	8005196 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005176:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	2301      	movs	r3, #1
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	f7fd f922 	bl	80023c8 <disk_read>
 8005184:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005192:	2301      	movs	r3, #1
 8005194:	e05a      	b.n	800524c <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80051a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80051ac:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80051ae:	6a3a      	ldr	r2, [r7, #32]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d901      	bls.n	80051ba <f_write+0x2c0>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80051c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	6a3a      	ldr	r2, [r7, #32]
 80051ca:	69b9      	ldr	r1, [r7, #24]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fd f959 	bl	8002484 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80051d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	4413      	add	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	441a      	add	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	441a      	add	r2, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f47f aea7 	bne.w	8004f66 <f_write+0x6c>
 8005218:	e000      	b.n	800521c <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800521a:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005228:	429a      	cmp	r2, r3
 800522a:	d905      	bls.n	8005238 <f_write+0x33e>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800523e:	f043 0320 	orr.w	r3, r3, #32
 8005242:	b2da      	uxtb	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3728      	adds	r7, #40	; 0x28
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff fa9b 	bl	8004798 <validate>
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005266:	7dfb      	ldrb	r3, [r7, #23]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f040 80a8 	bne.w	80053be <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80a0 	beq.w	80053be <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d019      	beq.n	80052c0 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005292:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800529e:	2301      	movs	r3, #1
 80052a0:	f7fd f8b2 	bl	8002408 <disk_write>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80052aa:	2301      	movs	r3, #1
 80052ac:	e088      	b.n	80053c0 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80052b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f7fd fb4d 	bl	800296e <move_window>
 80052d4:	4603      	mov	r3, r0
 80052d6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d16f      	bne.n	80053be <f_sync+0x16a>
				dir = fp->dir_ptr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80052e4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	330b      	adds	r3, #11
 80052ea:	781a      	ldrb	r2, [r3, #0]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	330b      	adds	r3, #11
 80052f0:	f042 0220 	orr.w	r2, r2, #32
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	331c      	adds	r3, #28
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800530c:	b29b      	uxth	r3, r3
 800530e:	0a1b      	lsrs	r3, r3, #8
 8005310:	b29a      	uxth	r2, r3
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	331d      	adds	r3, #29
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005320:	0c1a      	lsrs	r2, r3, #16
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	331e      	adds	r3, #30
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005330:	0e1a      	lsrs	r2, r3, #24
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	331f      	adds	r3, #31
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005340:	4619      	mov	r1, r3
 8005342:	6938      	ldr	r0, [r7, #16]
 8005344:	f7fe f904 	bl	8003550 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005348:	f7fc ffa6 	bl	8002298 <get_fattime>
 800534c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3316      	adds	r3, #22
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	b29b      	uxth	r3, r3
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	b29a      	uxth	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	3317      	adds	r3, #23
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	0c1a      	lsrs	r2, r3, #16
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	3318      	adds	r3, #24
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	0e1a      	lsrs	r2, r3, #24
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3319      	adds	r3, #25
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	3312      	adds	r3, #18
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	3313      	adds	r3, #19
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005396:	f023 0320 	bic.w	r3, r3, #32
 800539a:	b2da      	uxtb	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fd fb08 	bl	80029ca <sync_fs>
 80053ba:	4603      	mov	r3, r0
 80053bc:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80053be:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ff3f 	bl	8005254 <f_sync>
 80053d6:	4603      	mov	r3, r0
 80053d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d116      	bne.n	800540e <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff f9d9 	bl	8004798 <validate>
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10e      	bne.n	800540e <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fd fa02 	bl	8002800 <dec_lock>
 80053fc:	4603      	mov	r3, r0
 80053fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800542c:	e01b      	b.n	8005466 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800542e:	f107 0310 	add.w	r3, r7, #16
 8005432:	f107 0114 	add.w	r1, r7, #20
 8005436:	2201      	movs	r2, #1
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff fbf3 	bl	8004c24 <f_read>
		if (rc != 1) break;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d116      	bne.n	8005472 <f_gets+0x5a>
		c = s[0];
 8005444:	7d3b      	ldrb	r3, [r7, #20]
 8005446:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b0d      	cmp	r3, #13
 800544c:	d100      	bne.n	8005450 <f_gets+0x38>
 800544e:	e00a      	b.n	8005466 <f_gets+0x4e>
		*p++ = c;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	61ba      	str	r2, [r7, #24]
 8005456:	7dfa      	ldrb	r2, [r7, #23]
 8005458:	701a      	strb	r2, [r3, #0]
		n++;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3301      	adds	r3, #1
 800545e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	2b0a      	cmp	r3, #10
 8005464:	d007      	beq.n	8005476 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	3b01      	subs	r3, #1
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	429a      	cmp	r2, r3
 800546e:	dbde      	blt.n	800542e <f_gets+0x16>
 8005470:	e002      	b.n	8005478 <f_gets+0x60>
		if (rc != 1) break;
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005476:	bf00      	nop
	}
	*p = 0;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <f_gets+0x70>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	e000      	b.n	800548a <f_gets+0x72>
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	460b      	mov	r3, r1
 800549c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	2b0a      	cmp	r3, #10
 80054a2:	d103      	bne.n	80054ac <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80054a4:	210d      	movs	r1, #13
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fff3 	bl	8005492 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	db25      	blt.n	8005504 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	60fa      	str	r2, [r7, #12]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b3c      	cmp	r3, #60	; 0x3c
 80054ca:	dd12      	ble.n	80054f2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f103 010c 	add.w	r1, r3, #12
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	f107 0308 	add.w	r3, r7, #8
 80054dc:	f7ff fd0d 	bl	8004efa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d101      	bne.n	80054ec <putc_bfd+0x5a>
 80054e8:	2300      	movs	r3, #0
 80054ea:	e001      	b.n	80054f0 <putc_bfd+0x5e>
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]
 8005502:	e000      	b.n	8005506 <putc_bfd+0x74>
	if (i < 0) return;
 8005504:	bf00      	nop
}
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b097      	sub	sp, #92	; 0x5c
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8005522:	e009      	b.n	8005538 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	781a      	ldrb	r2, [r3, #0]
 800552c:	f107 030c 	add.w	r3, r7, #12
 8005530:	4611      	mov	r1, r2
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff ffad 	bl	8005492 <putc_bfd>
	while (*str)			/* Put the string */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f1      	bne.n	8005524 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	db15      	blt.n	8005572 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	461c      	mov	r4, r3
 800554c:	f107 0208 	add.w	r2, r7, #8
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	f103 010c 	add.w	r1, r3, #12
 8005558:	4613      	mov	r3, r2
 800555a:	4622      	mov	r2, r4
 800555c:	f7ff fccd 	bl	8004efa <f_write>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	4293      	cmp	r3, r2
 800556c:	d101      	bne.n	8005572 <f_puts+0x66>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	e001      	b.n	8005576 <f_puts+0x6a>
	return EOF;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005576:	4618      	mov	r0, r3
 8005578:	375c      	adds	r7, #92	; 0x5c
 800557a:	46bd      	mov	sp, r7
 800557c:	bd90      	pop	{r4, r7, pc}
	...

08005580 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800558e:	2301      	movs	r3, #1
 8005590:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005596:	4b1e      	ldr	r3, [pc, #120]	; (8005610 <FATFS_LinkDriverEx+0x90>)
 8005598:	7a5b      	ldrb	r3, [r3, #9]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d831      	bhi.n	8005604 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80055a0:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <FATFS_LinkDriverEx+0x90>)
 80055a2:	7a5b      	ldrb	r3, [r3, #9]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	4b19      	ldr	r3, [pc, #100]	; (8005610 <FATFS_LinkDriverEx+0x90>)
 80055aa:	2100      	movs	r1, #0
 80055ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80055ae:	4b18      	ldr	r3, [pc, #96]	; (8005610 <FATFS_LinkDriverEx+0x90>)
 80055b0:	7a5b      	ldrb	r3, [r3, #9]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	4a16      	ldr	r2, [pc, #88]	; (8005610 <FATFS_LinkDriverEx+0x90>)
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80055be:	4b14      	ldr	r3, [pc, #80]	; (8005610 <FATFS_LinkDriverEx+0x90>)
 80055c0:	7a5b      	ldrb	r3, [r3, #9]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	4b12      	ldr	r3, [pc, #72]	; (8005610 <FATFS_LinkDriverEx+0x90>)
 80055c8:	4413      	add	r3, r2
 80055ca:	79fa      	ldrb	r2, [r7, #7]
 80055cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80055ce:	4b10      	ldr	r3, [pc, #64]	; (8005610 <FATFS_LinkDriverEx+0x90>)
 80055d0:	7a5b      	ldrb	r3, [r3, #9]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	b2d1      	uxtb	r1, r2
 80055d8:	4a0d      	ldr	r2, [pc, #52]	; (8005610 <FATFS_LinkDriverEx+0x90>)
 80055da:	7251      	strb	r1, [r2, #9]
 80055dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80055de:	7dbb      	ldrb	r3, [r7, #22]
 80055e0:	3330      	adds	r3, #48	; 0x30
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	3301      	adds	r3, #1
 80055ec:	223a      	movs	r2, #58	; 0x3a
 80055ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	3302      	adds	r3, #2
 80055f4:	222f      	movs	r2, #47	; 0x2f
 80055f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	3303      	adds	r3, #3
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
}
 8005606:	4618      	mov	r0, r3
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr
 8005610:	2000025c 	.word	0x2000025c

08005614 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800561e:	2200      	movs	r2, #0
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff ffac 	bl	8005580 <FATFS_LinkDriverEx>
 8005628:	4603      	mov	r3, r0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	6039      	str	r1, [r7, #0]
 800563e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	2b7f      	cmp	r3, #127	; 0x7f
 8005644:	d802      	bhi.n	800564c <ff_convert+0x18>
		c = chr;
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	81fb      	strh	r3, [r7, #14]
 800564a:	e025      	b.n	8005698 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2bff      	cmp	r3, #255	; 0xff
 8005656:	d805      	bhi.n	8005664 <ff_convert+0x30>
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	3b80      	subs	r3, #128	; 0x80
 800565c:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <ff_convert+0x70>)
 800565e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005662:	e000      	b.n	8005666 <ff_convert+0x32>
 8005664:	2300      	movs	r3, #0
 8005666:	81fb      	strh	r3, [r7, #14]
 8005668:	e016      	b.n	8005698 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800566a:	2300      	movs	r3, #0
 800566c:	81fb      	strh	r3, [r7, #14]
 800566e:	e009      	b.n	8005684 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005670:	89fb      	ldrh	r3, [r7, #14]
 8005672:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <ff_convert+0x70>)
 8005674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	429a      	cmp	r2, r3
 800567c:	d006      	beq.n	800568c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800567e:	89fb      	ldrh	r3, [r7, #14]
 8005680:	3301      	adds	r3, #1
 8005682:	81fb      	strh	r3, [r7, #14]
 8005684:	89fb      	ldrh	r3, [r7, #14]
 8005686:	2b7f      	cmp	r3, #127	; 0x7f
 8005688:	d9f2      	bls.n	8005670 <ff_convert+0x3c>
 800568a:	e000      	b.n	800568e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800568c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	3380      	adds	r3, #128	; 0x80
 8005692:	b29b      	uxth	r3, r3
 8005694:	b2db      	uxtb	r3, r3
 8005696:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005698:	89fb      	ldrh	r3, [r7, #14]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	080058c0 	.word	0x080058c0

080056a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	e002      	b.n	80056be <ff_wtoupper+0x16>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	4a0f      	ldr	r2, [pc, #60]	; (80056fc <ff_wtoupper+0x54>)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d006      	beq.n	80056d8 <ff_wtoupper+0x30>
 80056ca:	4a0c      	ldr	r2, [pc, #48]	; (80056fc <ff_wtoupper+0x54>)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d1ef      	bne.n	80056b8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80056d8:	4a08      	ldr	r2, [pc, #32]	; (80056fc <ff_wtoupper+0x54>)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <ff_wtoupper+0x46>
 80056e4:	4a06      	ldr	r2, [pc, #24]	; (8005700 <ff_wtoupper+0x58>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056ec:	e000      	b.n	80056f0 <ff_wtoupper+0x48>
 80056ee:	88fb      	ldrh	r3, [r7, #6]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	080059c0 	.word	0x080059c0
 8005700:	08005ba0 	.word	0x08005ba0

08005704 <__libc_init_array>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	2600      	movs	r6, #0
 8005708:	4d0c      	ldr	r5, [pc, #48]	; (800573c <__libc_init_array+0x38>)
 800570a:	4c0d      	ldr	r4, [pc, #52]	; (8005740 <__libc_init_array+0x3c>)
 800570c:	1b64      	subs	r4, r4, r5
 800570e:	10a4      	asrs	r4, r4, #2
 8005710:	42a6      	cmp	r6, r4
 8005712:	d109      	bne.n	8005728 <__libc_init_array+0x24>
 8005714:	f000 f830 	bl	8005778 <_init>
 8005718:	2600      	movs	r6, #0
 800571a:	4d0a      	ldr	r5, [pc, #40]	; (8005744 <__libc_init_array+0x40>)
 800571c:	4c0a      	ldr	r4, [pc, #40]	; (8005748 <__libc_init_array+0x44>)
 800571e:	1b64      	subs	r4, r4, r5
 8005720:	10a4      	asrs	r4, r4, #2
 8005722:	42a6      	cmp	r6, r4
 8005724:	d105      	bne.n	8005732 <__libc_init_array+0x2e>
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	f855 3b04 	ldr.w	r3, [r5], #4
 800572c:	4798      	blx	r3
 800572e:	3601      	adds	r6, #1
 8005730:	e7ee      	b.n	8005710 <__libc_init_array+0xc>
 8005732:	f855 3b04 	ldr.w	r3, [r5], #4
 8005736:	4798      	blx	r3
 8005738:	3601      	adds	r6, #1
 800573a:	e7f2      	b.n	8005722 <__libc_init_array+0x1e>
 800573c:	08005d80 	.word	0x08005d80
 8005740:	08005d80 	.word	0x08005d80
 8005744:	08005d80 	.word	0x08005d80
 8005748:	08005d84 	.word	0x08005d84

0800574c <memcmp>:
 800574c:	b530      	push	{r4, r5, lr}
 800574e:	2400      	movs	r4, #0
 8005750:	3901      	subs	r1, #1
 8005752:	42a2      	cmp	r2, r4
 8005754:	d101      	bne.n	800575a <memcmp+0xe>
 8005756:	2000      	movs	r0, #0
 8005758:	e005      	b.n	8005766 <memcmp+0x1a>
 800575a:	5d03      	ldrb	r3, [r0, r4]
 800575c:	3401      	adds	r4, #1
 800575e:	5d0d      	ldrb	r5, [r1, r4]
 8005760:	42ab      	cmp	r3, r5
 8005762:	d0f6      	beq.n	8005752 <memcmp+0x6>
 8005764:	1b58      	subs	r0, r3, r5
 8005766:	bd30      	pop	{r4, r5, pc}

08005768 <memset>:
 8005768:	4603      	mov	r3, r0
 800576a:	4402      	add	r2, r0
 800576c:	4293      	cmp	r3, r2
 800576e:	d100      	bne.n	8005772 <memset+0xa>
 8005770:	4770      	bx	lr
 8005772:	f803 1b01 	strb.w	r1, [r3], #1
 8005776:	e7f9      	b.n	800576c <memset+0x4>

08005778 <_init>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	bf00      	nop
 800577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577e:	bc08      	pop	{r3}
 8005780:	469e      	mov	lr, r3
 8005782:	4770      	bx	lr

08005784 <_fini>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr
