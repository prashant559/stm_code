
SCU_SMPS_rs232.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cbc  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08010f10  08010f10  00011f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114c8  080114c8  000131f0  2**0
                  CONTENTS
  4 .ARM          00000008  080114c8  080114c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114d0  080114d0  000131f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114d0  080114d0  000124d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080114d4  080114d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080114d8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a28  200001f0  080116c8  000131f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c18  080116c8  00013c18  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000131f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa56  00000000  00000000  00013226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003030  00000000  00000000  0002dc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00030cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c80  00000000  00000000  00031d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000346ac  00000000  00000000  00032980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d2f  00000000  00000000  0006702c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00140bf9  00000000  00000000  00080d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c1954  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  001c1998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001c6e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001f0 	.word	0x200001f0
 800026c:	00000000 	.word	0x00000000
 8000270:	08010ef4 	.word	0x08010ef4

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001f4 	.word	0x200001f4
 800028c:	08010ef4 	.word	0x08010ef4

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b97e 	b.w	8000f7c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14d      	bne.n	8000d40 <__udivmoddi4+0xa8>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	460f      	mov	r7, r1
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4696      	mov	lr, r2
 8000cac:	fab2 f382 	clz	r3, r2
 8000cb0:	d960      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cb2:	b14b      	cbz	r3, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000cc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ccc:	fa1f f48e 	uxth.w	r4, lr
 8000cd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd4:	fbb7 f1f6 	udiv	r1, r7, r6
 8000cd8:	fb06 7711 	mls	r7, r6, r1, r7
 8000cdc:	fb01 f004 	mul.w	r0, r1, r4
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce8:	eb1e 0202 	adds.w	r2, lr, r2
 8000cec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x60>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f200 812d 	bhi.w	8000f52 <__udivmoddi4+0x2ba>
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	fa1f fc8c 	uxth.w	ip, ip
 8000d00:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d04:	fb06 2210 	mls	r2, r6, r0, r2
 8000d08:	fb00 f404 	mul.w	r4, r0, r4
 8000d0c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d10:	4564      	cmp	r4, ip
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d14:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x8c>
 8000d1e:	4564      	cmp	r4, ip
 8000d20:	f200 811a 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	ebac 0c04 	sub.w	ip, ip, r4
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b125      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d32:	fa2c f303 	lsr.w	r3, ip, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0xb8>
 8000d44:	b10d      	cbz	r5, 8000d4a <__udivmoddi4+0xb2>
 8000d46:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7f5      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0x15c>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	f0c0 80f2 	bcc.w	8000f42 <__udivmoddi4+0x2aa>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f080 80ef 	bcs.w	8000f42 <__udivmoddi4+0x2aa>
 8000d64:	4606      	mov	r6, r0
 8000d66:	4623      	mov	r3, r4
 8000d68:	4608      	mov	r0, r1
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e6      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d6e:	e9c5 6300 	strd	r6, r3, [r5]
 8000d72:	e7e3      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80a2 	bne.w	8000ebe <__udivmoddi4+0x226>
 8000d7a:	1a8a      	subs	r2, r1, r2
 8000d7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d80:	fa1f f68e 	uxth.w	r6, lr
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d8a:	fb07 2014 	mls	r0, r7, r4, r2
 8000d8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb06 f004 	mul.w	r0, r6, r4
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d90f      	bls.n	8000dbe <__udivmoddi4+0x126>
 8000d9e:	eb1e 0202 	adds.w	r2, lr, r2
 8000da2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0901 	movcs.w	r9, #1
 8000dac:	f04f 0900 	movcc.w	r9, #0
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000db4:	f1b9 0f00 	cmp.w	r9, #0
 8000db8:	f000 80c8 	beq.w	8000f4c <__udivmoddi4+0x2b4>
 8000dbc:	4644      	mov	r4, r8
 8000dbe:	1a12      	subs	r2, r2, r0
 8000dc0:	fa1f fc8c 	uxth.w	ip, ip
 8000dc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dcc:	fb00 f606 	mul.w	r6, r0, r6
 8000dd0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd4:	4566      	cmp	r6, ip
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x152>
 8000dd8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ddc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x150>
 8000de2:	4566      	cmp	r6, ip
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000de8:	4610      	mov	r0, r2
 8000dea:	ebac 0c06 	sub.w	ip, ip, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	e79d      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa04 fe01 	lsl.w	lr, r4, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e06:	40f4      	lsrs	r4, r6
 8000e08:	408a      	lsls	r2, r1
 8000e0a:	431f      	orrs	r7, r3
 8000e0c:	ea4e 030c 	orr.w	r3, lr, ip
 8000e10:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e24:	fb08 4410 	mls	r4, r8, r0, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb00 f90c 	mul.w	r9, r0, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x1ba>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0b01 	movcs.w	fp, #1
 8000e40:	f04f 0b00 	movcc.w	fp, #0
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e48:	f1bb 0f00 	cmp.w	fp, #0
 8000e4c:	f000 8093 	beq.w	8000f76 <__udivmoddi4+0x2de>
 8000e50:	4650      	mov	r0, sl
 8000e52:	eba4 0409 	sub.w	r4, r4, r9
 8000e56:	fa1f f983 	uxth.w	r9, r3
 8000e5a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e5e:	fb08 4413 	mls	r4, r8, r3, r4
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d906      	bls.n	8000e7c <__udivmoddi4+0x1e4>
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x1e2>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d87a      	bhi.n	8000f70 <__udivmoddi4+0x2d8>
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e80:	eba4 040c 	sub.w	r4, r4, ip
 8000e84:	fba0 9802 	umull	r9, r8, r0, r2
 8000e88:	4544      	cmp	r4, r8
 8000e8a:	46cc      	mov	ip, r9
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	d302      	bcc.n	8000e96 <__udivmoddi4+0x1fe>
 8000e90:	d106      	bne.n	8000ea0 <__udivmoddi4+0x208>
 8000e92:	45ce      	cmp	lr, r9
 8000e94:	d204      	bcs.n	8000ea0 <__udivmoddi4+0x208>
 8000e96:	3801      	subs	r0, #1
 8000e98:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e9c:	eb68 0307 	sbc.w	r3, r8, r7
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x222>
 8000ea2:	ebbe 020c 	subs.w	r2, lr, ip
 8000ea6:	eb64 0403 	sbc.w	r4, r4, r3
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	fa22 f301 	lsr.w	r3, r2, r1
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e73e      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000ebe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ec2:	f1c3 0120 	rsb	r1, r3, #32
 8000ec6:	fa04 f203 	lsl.w	r2, r4, r3
 8000eca:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ed4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed8:	fa1f f68e 	uxth.w	r6, lr
 8000edc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fb07 4410 	mls	r4, r7, r0, r4
 8000ee6:	0c11      	lsrs	r1, r2, #16
 8000ee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000eec:	fb00 f406 	mul.w	r4, r0, r6
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	d90e      	bls.n	8000f12 <__udivmoddi4+0x27a>
 8000ef4:	eb1e 0101 	adds.w	r1, lr, r1
 8000ef8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efc:	bf2c      	ite	cs
 8000efe:	f04f 0901 	movcs.w	r9, #1
 8000f02:	f04f 0900 	movcc.w	r9, #0
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d902      	bls.n	8000f10 <__udivmoddi4+0x278>
 8000f0a:	f1b9 0f00 	cmp.w	r9, #0
 8000f0e:	d02c      	beq.n	8000f6a <__udivmoddi4+0x2d2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	1b09      	subs	r1, r1, r4
 8000f14:	b292      	uxth	r2, r2
 8000f16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f22:	fb04 f106 	mul.w	r1, r4, r6
 8000f26:	4291      	cmp	r1, r2
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x2a2>
 8000f2a:	eb1e 0202 	adds.w	r2, lr, r2
 8000f2e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f32:	d201      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d815      	bhi.n	8000f64 <__udivmoddi4+0x2cc>
 8000f38:	4644      	mov	r4, r8
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f40:	e721      	b.n	8000d86 <__udivmoddi4+0xee>
 8000f42:	1a86      	subs	r6, r0, r2
 8000f44:	eb64 0303 	sbc.w	r3, r4, r3
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e70e      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f4c:	3c02      	subs	r4, #2
 8000f4e:	4472      	add	r2, lr
 8000f50:	e735      	b.n	8000dbe <__udivmoddi4+0x126>
 8000f52:	3902      	subs	r1, #2
 8000f54:	4472      	add	r2, lr
 8000f56:	e6d0      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f58:	44f4      	add	ip, lr
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	e6e3      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000f5e:	44f4      	add	ip, lr
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x152>
 8000f64:	3c02      	subs	r4, #2
 8000f66:	4472      	add	r2, lr
 8000f68:	e7e7      	b.n	8000f3a <__udivmoddi4+0x2a2>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4471      	add	r1, lr
 8000f6e:	e7d0      	b.n	8000f12 <__udivmoddi4+0x27a>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	e782      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f76:	3802      	subs	r0, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	e76a      	b.n	8000e52 <__udivmoddi4+0x1ba>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <ADC_operation>:
float temp_sensor_12=0;



uint8_t ADC_operation()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

	float sensor_value;

	for(uint8_t i = 1 ;i<=3;i++)
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e038      	b.n	8000ffe <ADC_operation+0x7e>
	{
		for(uint8_t j = 1 ;j<=4;j++)
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	71bb      	strb	r3, [r7, #6]
 8000f90:	e02f      	b.n	8000ff2 <ADC_operation+0x72>
		{
			sensor_value =	ADC_READ(i,j);
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f849 	bl	8001030 <ADC_READ>
 8000f9e:	ed87 0a00 	vstr	s0, [r7]
			if(sensor_value > 1500 | sensor_value < -1000)
 8000fa2:	edd7 7a00 	vldr	s15, [r7]
 8000fa6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001018 <ADC_operation+0x98>
 8000faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	bfcc      	ite	gt
 8000fb4:	2301      	movgt	r3, #1
 8000fb6:	2300      	movle	r3, #0
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	edd7 7a00 	vldr	s15, [r7]
 8000fbe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800101c <ADC_operation+0x9c>
 8000fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	bf4c      	ite	mi
 8000fcc:	2301      	movmi	r3, #1
 8000fce:	2300      	movpl	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <ADC_operation+0x66>
			{
				sprintf(buffer, "S%derrorE",j);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4910      	ldr	r1, [pc, #64]	@ (8001020 <ADC_operation+0xa0>)
 8000fe0:	4810      	ldr	r0, [pc, #64]	@ (8001024 <ADC_operation+0xa4>)
 8000fe2:	f00d fe43 	bl	800ec6c <siprintf>
			{
				//sprintf(buffer, "S  %d  %.2fE",count++, sensor_value);
			}


			HAL_Delay(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f002 fe4e 	bl	8003c88 <HAL_Delay>
		for(uint8_t j = 1 ;j<=4;j++)
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	71bb      	strb	r3, [r7, #6]
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d9cc      	bls.n	8000f92 <ADC_operation+0x12>
	for(uint8_t i = 1 ;i<=3;i++)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b03      	cmp	r3, #3
 8001002:	d9c3      	bls.n	8000f8c <ADC_operation+0xc>
			//HAL_UART_Transmit_IT(&huart8, buffer, sizeof(buffer), 0xFFFF);
			//HAL_Delay(10);

		}
	}
	HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 8001004:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001008:	4807      	ldr	r0, [pc, #28]	@ (8001028 <ADC_operation+0xa8>)
 800100a:	f003 fa01 	bl	8004410 <HAL_GPIO_TogglePin>


}
 800100e:	bf00      	nop
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	44bb8000 	.word	0x44bb8000
 800101c:	c47a0000 	.word	0xc47a0000
 8001020:	08010f10 	.word	0x08010f10
 8001024:	2000020c 	.word	0x2000020c
 8001028:	42021000 	.word	0x42021000
 800102c:	00000000 	.word	0x00000000

08001030 <ADC_READ>:


#if 1

float ADC_READ(uint8_t adc_num,uint8_t channel)
{
 8001030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001034:	b0c5      	sub	sp, #276	@ 0x114
 8001036:	af1c      	add	r7, sp, #112	@ 0x70
 8001038:	4603      	mov	r3, r0
 800103a:	460a      	mov	r2, r1
 800103c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001040:	4613      	mov	r3, r2
 8001042:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t txd_buf[30]={0};
 8001046:	2300      	movs	r3, #0
 8001048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800104a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	831a      	strh	r2, [r3, #24]
	uint8_t rxd_buf[30]={0};
 800105e:	2300      	movs	r3, #0
 8001060:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001062:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	831a      	strh	r2, [r3, #24]
	float resistance = 0;
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	//	uint16_t reg_data;//[4]= {0};
	//	uint8_t res;
	//	uint8_t read_register = 0;
	//	uint8_t write_reagister = 0;

	txd_buf[0] = 0x40;
 800107e:	2340      	movs	r3, #64	@ 0x40
 8001080:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
	txd_buf[1] = 0x11;
 8001084:	2311      	movs	r3, #17
 8001086:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
	txd_buf[2] = 0x0c; // WREG write AIN10-AINCOM,(1010 1100) binary,MUXP and MUXN selection
 800108a:	230c      	movs	r3, #12
 800108c:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
	txd_buf[3] = 0x80; // gain =1
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	txd_buf[4] = 0x76; // DATA RATE 20 SPS
 8001096:	2376      	movs	r3, #118	@ 0x76
 8001098:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	txd_buf[5] = 0xEA; //REF on (0001 10-ref 01)
 800109c:	23ea      	movs	r3, #234	@ 0xea
 800109e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	txd_buf[6] = 0x1E; // IDAC MAG
 80010a2:	231e      	movs	r3, #30
 80010a4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	txd_buf[7] = 0x02; // IDAC MUX
 80010a8:	2302      	movs	r3, #2
 80010aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	txd_buf[8] = 0x07; // Vbias
 80010ae:	2307      	movs	r3, #7
 80010b0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	txd_buf[9] = 0xfb; // Timeout bit second =1 ,default is 10h
 80010b4:	23fb      	movs	r3, #251	@ 0xfb
 80010b6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
	txd_buf[10] = 0x00; // start converting command
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
	txd_buf[11] = 0x10; // start converting command
 80010c0:	2310      	movs	r3, #16
 80010c2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	txd_buf[12] = 0x0; // start converting command
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	txd_buf[13] = 0x0; // start converting command
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	txd_buf[14] = 0x0; // start converting command
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	txd_buf[15] = 0x0; // start converting command
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	txd_buf[16] = 0x0; // start converting command
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
	txd_buf[17] = 0x40; // start converting command
 80010e4:	2340      	movs	r3, #64	@ 0x40
 80010e6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	txd_buf[18] = 0x00; // start converting command
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	txd_buf[19] = 0x00; // start converting command
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	txd_buf[20] = 0x00; // start converting command
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
	txd_buf[18] = 0x00; // start converting command
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	//	txd_buf[18] = 0x00; // start converting command
	//	txd_buf[19] = 0x00; // start converting command
	//	txd_buf[20] = 0x00; // start converting command
	//	txd_buf[18] = 0x00; // start converting command

	switch(channel)
 8001102:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001106:	3b01      	subs	r3, #1
 8001108:	2b03      	cmp	r3, #3
 800110a:	d833      	bhi.n	8001174 <ADC_READ+0x144>
 800110c:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <ADC_READ+0xe4>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001125 	.word	0x08001125
 8001118:	08001139 	.word	0x08001139
 800111c:	0800114d 	.word	0x0800114d
 8001120:	08001161 	.word	0x08001161
	{
	case 1:
		txd_buf[4] = 0x43; // DATA RATE 20 SPS
 8001124:	2343      	movs	r3, #67	@ 0x43
 8001126:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 800112a:	2302      	movs	r3, #2
 800112c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xf5; // Timeout bit second =1 ,default is 10h
 8001130:	23f5      	movs	r3, #245	@ 0xf5
 8001132:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 8001136:	e01d      	b.n	8001174 <ADC_READ+0x144>

	case 2:
		txd_buf[4] = 0x10; // DATA RATE 20 SPS
 8001138:	2310      	movs	r3, #16
 800113a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 800113e:	2302      	movs	r3, #2
 8001140:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xf2; // Timeout bit second =1 ,default is 10h
 8001144:	23f2      	movs	r3, #242	@ 0xf2
 8001146:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 800114a:	e013      	b.n	8001174 <ADC_READ+0x144>

	case 3:
		txd_buf[4] = 0x9A; // DATA RATE 20 SPS
 800114c:	239a      	movs	r3, #154	@ 0x9a
 800114e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 8001152:	2302      	movs	r3, #2
 8001154:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xf8; // Timeout bit second =1 ,default is 10h
 8001158:	23f8      	movs	r3, #248	@ 0xf8
 800115a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 800115e:	e009      	b.n	8001174 <ADC_READ+0x144>
	case 4:
		txd_buf[4] = 0x76; // DATA RATE 20 SPS
 8001160:	2376      	movs	r3, #118	@ 0x76
 8001162:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		txd_buf[7] = 0x02; // IDAC MUX
 8001166:	2302      	movs	r3, #2
 8001168:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		txd_buf[9] = 0xfb; // Timeout bit second =1 ,default is 10h
 800116c:	23fb      	movs	r3, #251	@ 0xfb
 800116e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		break;
 8001172:	bf00      	nop
	}

	switch(adc_num)
 8001174:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001178:	2b03      	cmp	r3, #3
 800117a:	f000 82a7 	beq.w	80016cc <ADC_READ+0x69c>
 800117e:	2b03      	cmp	r3, #3
 8001180:	f300 83dd 	bgt.w	800193e <ADC_READ+0x90e>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d003      	beq.n	8001190 <ADC_READ+0x160>
 8001188:	2b02      	cmp	r3, #2
 800118a:	f000 8143 	beq.w	8001414 <ADC_READ+0x3e4>
 800118e:	e3d6      	b.n	800193e <ADC_READ+0x90e>
	{
	case 1:

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	@ 0x40
 8001194:	4890      	ldr	r0, [pc, #576]	@ (80013d8 <ADC_READ+0x3a8>)
 8001196:	f003 f923 	bl	80043e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a0:	488d      	ldr	r0, [pc, #564]	@ (80013d8 <ADC_READ+0x3a8>)
 80011a2:	f003 f91d 	bl	80043e0 <HAL_GPIO_WritePin>

		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2104      	movs	r1, #4
 80011aa:	488c      	ldr	r0, [pc, #560]	@ (80013dc <ADC_READ+0x3ac>)
 80011ac:	f003 f918 	bl	80043e0 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2104      	movs	r1, #4
 80011b4:	4889      	ldr	r0, [pc, #548]	@ (80013dc <ADC_READ+0x3ac>)
 80011b6:	f003 f913 	bl	80043e0 <HAL_GPIO_WritePin>
		//HAL_Delay(100);



		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2140      	movs	r1, #64	@ 0x40
 80011be:	4886      	ldr	r0, [pc, #536]	@ (80013d8 <ADC_READ+0x3a8>)
 80011c0:	f003 f90e 	bl	80043e0 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf,0x13, 0xFF);
 80011c4:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80011c8:	23ff      	movs	r3, #255	@ 0xff
 80011ca:	2213      	movs	r2, #19
 80011cc:	4884      	ldr	r0, [pc, #528]	@ (80013e0 <ADC_READ+0x3b0>)
 80011ce:	f009 ff1d 	bl	800b00c <HAL_SPI_Transmit>
		HAL_Delay(2);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f002 fd58 	bl	8003c88 <HAL_Delay>
		//HAL_SPI_Receive(&hspi5, (uint8_t*) &rxd_buf, 20, 0xFF);
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	2140      	movs	r1, #64	@ 0x40
 80011dc:	487e      	ldr	r0, [pc, #504]	@ (80013d8 <ADC_READ+0x3a8>)
 80011de:	f003 f8ff 	bl	80043e0 <HAL_GPIO_WritePin>


		//HAL_Delay(200);

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2140      	movs	r1, #64	@ 0x40
 80011e6:	487c      	ldr	r0, [pc, #496]	@ (80013d8 <ADC_READ+0x3a8>)
 80011e8:	f003 f8fa 	bl	80043e0 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x20;
 80011ec:	2320      	movs	r3, #32
 80011ee:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		txd_buf[1] = 0x11;
 80011f2:	2311      	movs	r3, #17
 80011f4:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
		HAL_Delay(2);
 80011f8:	2002      	movs	r0, #2
 80011fa:	f002 fd45 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 2, 0xFF);
 80011fe:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001202:	23ff      	movs	r3, #255	@ 0xff
 8001204:	2202      	movs	r2, #2
 8001206:	4876      	ldr	r0, [pc, #472]	@ (80013e0 <ADC_READ+0x3b0>)
 8001208:	f009 ff00 	bl	800b00c <HAL_SPI_Transmit>
		HAL_Delay(2);
 800120c:	2002      	movs	r0, #2
 800120e:	f002 fd3b 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Receive(&hspi5, (uint8_t*) &rxd_buf, 0x11, 0xFF);
 8001212:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001216:	23ff      	movs	r3, #255	@ 0xff
 8001218:	2211      	movs	r2, #17
 800121a:	4871      	ldr	r0, [pc, #452]	@ (80013e0 <ADC_READ+0x3b0>)
 800121c:	f00a f90c 	bl	800b438 <HAL_SPI_Receive>
		HAL_Delay(2);
 8001220:	2002      	movs	r0, #2
 8001222:	f002 fd31 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001226:	2201      	movs	r2, #1
 8001228:	2140      	movs	r1, #64	@ 0x40
 800122a:	486b      	ldr	r0, [pc, #428]	@ (80013d8 <ADC_READ+0x3a8>)
 800122c:	f003 f8d8 	bl	80043e0 <HAL_GPIO_WritePin>
		//		{
		//			HAL_Delay(1);
		//			sprintf(buffer, "S  %d  %dE\n\r",adc_num,channel);
		//					HAL_UART_Transmit_IT(&huart8, buffer, sizeof(buffer));
		//		}
		HAL_Delay(2);
 8001230:	2002      	movs	r0, #2
 8001232:	f002 fd29 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 1);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800123c:	4866      	ldr	r0, [pc, #408]	@ (80013d8 <ADC_READ+0x3a8>)
 800123e:	f003 f8cf 	bl	80043e0 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001242:	2002      	movs	r0, #2
 8001244:	f002 fd20 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2140      	movs	r1, #64	@ 0x40
 800124c:	4862      	ldr	r0, [pc, #392]	@ (80013d8 <ADC_READ+0x3a8>)
 800124e:	f003 f8c7 	bl	80043e0 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001252:	2319      	movs	r3, #25
 8001254:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		HAL_Delay(2);
 8001258:	2002      	movs	r0, #2
 800125a:	f002 fd15 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFF);
 800125e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001262:	23ff      	movs	r3, #255	@ 0xff
 8001264:	2201      	movs	r2, #1
 8001266:	485e      	ldr	r0, [pc, #376]	@ (80013e0 <ADC_READ+0x3b0>)
 8001268:	f009 fed0 	bl	800b00c <HAL_SPI_Transmit>
		HAL_Delay(2);
 800126c:	2002      	movs	r0, #2
 800126e:	f002 fd0b 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	2140      	movs	r1, #64	@ 0x40
 8001276:	4858      	ldr	r0, [pc, #352]	@ (80013d8 <ADC_READ+0x3a8>)
 8001278:	f003 f8b2 	bl	80043e0 <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 800127c:	4b59      	ldr	r3, [pc, #356]	@ (80013e4 <ADC_READ+0x3b4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fd01 	bl	8003c88 <HAL_Delay>


		//				while(1)
		//				{

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2140      	movs	r1, #64	@ 0x40
 800128a:	4853      	ldr	r0, [pc, #332]	@ (80013d8 <ADC_READ+0x3a8>)
 800128c:	f003 f8a8 	bl	80043e0 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 8001290:	2313      	movs	r3, #19
 8001292:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		//HAL_Delay(2);
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFF);
 8001296:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800129a:	23ff      	movs	r3, #255	@ 0xff
 800129c:	2201      	movs	r2, #1
 800129e:	4850      	ldr	r0, [pc, #320]	@ (80013e0 <ADC_READ+0x3b0>)
 80012a0:	f009 feb4 	bl	800b00c <HAL_SPI_Transmit>
		//HAL_Delay(2);
		HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1, 0x2, 0xFF);
 80012a4:	23ff      	movs	r3, #255	@ 0xff
 80012a6:	2202      	movs	r2, #2
 80012a8:	494f      	ldr	r1, [pc, #316]	@ (80013e8 <ADC_READ+0x3b8>)
 80012aa:	484d      	ldr	r0, [pc, #308]	@ (80013e0 <ADC_READ+0x3b0>)
 80012ac:	f00a f8c4 	bl	800b438 <HAL_SPI_Receive>

		reg_data_ADC_1 = (reg_data_ADC_1 >> 8 | reg_data_ADC_1 << 8 ) ;
 80012b0:	4b4d      	ldr	r3, [pc, #308]	@ (80013e8 <ADC_READ+0x3b8>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	4b4b      	ldr	r3, [pc, #300]	@ (80013e8 <ADC_READ+0x3b8>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <ADC_READ+0x3b8>)
 80012ca:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2140      	movs	r1, #64	@ 0x40
 80012d0:	4841      	ldr	r0, [pc, #260]	@ (80013d8 <ADC_READ+0x3a8>)
 80012d2:	f003 f885 	bl	80043e0 <HAL_GPIO_WritePin>

		resistance = ((2*1000*(float)reg_data_ADC_1)/4) / 0xFFFF;
 80012d6:	4b44      	ldr	r3, [pc, #272]	@ (80013e8 <ADC_READ+0x3b8>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e2:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80013ec <ADC_READ+0x3bc>
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ea:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80012ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012f2:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80013f0 <ADC_READ+0x3c0>
 80012f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fa:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		temperature = (resistance - 100.0 ) / 0.385;
 80012fe:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001302:	f7ff f931 	bl	8000568 <__aeabi_f2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b3a      	ldr	r3, [pc, #232]	@ (80013f4 <ADC_READ+0x3c4>)
 800130c:	f7fe ffcc 	bl	80002a8 <__aeabi_dsub>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	a32d      	add	r3, pc, #180	@ (adr r3, 80013d0 <ADC_READ+0x3a0>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff faa5 	bl	800086c <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc4d 	bl	8000bc8 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	4a31      	ldr	r2, [pc, #196]	@ (80013f8 <ADC_READ+0x3c8>)
 8001332:	6013      	str	r3, [r2, #0]

		if(rxd_buf[7]==txd_buf[9] )
 8001334:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001338:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800133c:	429a      	cmp	r2, r3
 800133e:	d122      	bne.n	8001386 <ADC_READ+0x356>
		{
			HAL_Delay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f002 fca1 	bl	8003c88 <HAL_Delay>
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,channel,reg_data_ADC_1,temperature,resistance);
 8001346:	f897 604f 	ldrb.w	r6, [r7, #79]	@ 0x4f
 800134a:	f897 804e 	ldrb.w	r8, [r7, #78]	@ 0x4e
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <ADC_READ+0x3b8>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	643b      	str	r3, [r7, #64]	@ 0x40
 8001354:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <ADC_READ+0x3c8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f905 	bl	8000568 <__aeabi_f2d>
 800135e:	4604      	mov	r4, r0
 8001360:	460d      	mov	r5, r1
 8001362:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001366:	f7ff f8ff 	bl	8000568 <__aeabi_f2d>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001372:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	4643      	mov	r3, r8
 800137c:	4632      	mov	r2, r6
 800137e:	491f      	ldr	r1, [pc, #124]	@ (80013fc <ADC_READ+0x3cc>)
 8001380:	481f      	ldr	r0, [pc, #124]	@ (8001400 <ADC_READ+0x3d0>)
 8001382:	f00d fc73 	bl	800ec6c <siprintf>
			//HAL_UART_Transmit_IT(&huart5, buffer, sizeof(buffer));
		}
		if(channel == 1)
 8001386:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800138a:	2b01      	cmp	r3, #1
 800138c:	d104      	bne.n	8001398 <ADC_READ+0x368>
		{
			temp_sensor_1 = temperature ;
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <ADC_READ+0x3c8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1c      	ldr	r2, [pc, #112]	@ (8001404 <ADC_READ+0x3d4>)
 8001394:	6013      	str	r3, [r2, #0]
			temp_sensor_4 = temperature ;

		}
		//HAL_Delay(100000000);

		break;
 8001396:	e2ab      	b.n	80018f0 <ADC_READ+0x8c0>
		else if(channel == 2)
 8001398:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800139c:	2b02      	cmp	r3, #2
 800139e:	d104      	bne.n	80013aa <ADC_READ+0x37a>
			temp_sensor_2 = temperature ;
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <ADC_READ+0x3c8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a18      	ldr	r2, [pc, #96]	@ (8001408 <ADC_READ+0x3d8>)
 80013a6:	6013      	str	r3, [r2, #0]
		break;
 80013a8:	e2a2      	b.n	80018f0 <ADC_READ+0x8c0>
		else if(channel == 3)
 80013aa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d104      	bne.n	80013bc <ADC_READ+0x38c>
			temp_sensor_3 = temperature ;
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <ADC_READ+0x3c8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a15      	ldr	r2, [pc, #84]	@ (800140c <ADC_READ+0x3dc>)
 80013b8:	6013      	str	r3, [r2, #0]
		break;
 80013ba:	e299      	b.n	80018f0 <ADC_READ+0x8c0>
		else if(channel == 4)
 80013bc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	f040 8295 	bne.w	80018f0 <ADC_READ+0x8c0>
			temp_sensor_4 = temperature ;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <ADC_READ+0x3c8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a11      	ldr	r2, [pc, #68]	@ (8001410 <ADC_READ+0x3e0>)
 80013cc:	6013      	str	r3, [r2, #0]
		break;
 80013ce:	e28f      	b.n	80018f0 <ADC_READ+0x8c0>
 80013d0:	0a3d70a4 	.word	0x0a3d70a4
 80013d4:	3fd8a3d7 	.word	0x3fd8a3d7
 80013d8:	42021400 	.word	0x42021400
 80013dc:	42020800 	.word	0x42020800
 80013e0:	20004718 	.word	0x20004718
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000464 	.word	0x20000464
 80013ec:	44fa0000 	.word	0x44fa0000
 80013f0:	477fff00 	.word	0x477fff00
 80013f4:	40590000 	.word	0x40590000
 80013f8:	2000046c 	.word	0x2000046c
 80013fc:	08010f1c 	.word	0x08010f1c
 8001400:	2000020c 	.word	0x2000020c
 8001404:	20000470 	.word	0x20000470
 8001408:	20000474 	.word	0x20000474
 800140c:	20000478 	.word	0x20000478
 8001410:	2000047c 	.word	0x2000047c

	case 2:
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800141a:	489d      	ldr	r0, [pc, #628]	@ (8001690 <ADC_READ+0x660>)
 800141c:	f002 ffe0 	bl	80043e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2140      	movs	r1, #64	@ 0x40
 8001424:	489b      	ldr	r0, [pc, #620]	@ (8001694 <ADC_READ+0x664>)
 8001426:	f002 ffdb 	bl	80043e0 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001430:	4898      	ldr	r0, [pc, #608]	@ (8001694 <ADC_READ+0x664>)
 8001432:	f002 ffd5 	bl	80043e0 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143c:	4895      	ldr	r0, [pc, #596]	@ (8001694 <ADC_READ+0x664>)
 800143e:	f002 ffcf 	bl	80043e0 <HAL_GPIO_WritePin>
		//HAL_Delay(100);



		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001448:	4891      	ldr	r0, [pc, #580]	@ (8001690 <ADC_READ+0x660>)
 800144a:	f002 ffc9 	bl	80043e0 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 800144e:	2002      	movs	r0, #2
 8001450:	f002 fc1a 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf,0x13, 0xFF);
 8001454:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001458:	23ff      	movs	r3, #255	@ 0xff
 800145a:	2213      	movs	r2, #19
 800145c:	488e      	ldr	r0, [pc, #568]	@ (8001698 <ADC_READ+0x668>)
 800145e:	f009 fdd5 	bl	800b00c <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001462:	2002      	movs	r0, #2
 8001464:	f002 fc10 	bl	8003c88 <HAL_Delay>
		//HAL_SPI_Receive(&hspi2, (uint8_t*) &rxd_buf, 20, 0xFF);
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800146e:	4888      	ldr	r0, [pc, #544]	@ (8001690 <ADC_READ+0x660>)
 8001470:	f002 ffb6 	bl	80043e0 <HAL_GPIO_WritePin>


		//HAL_Delay(200);

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800147a:	4885      	ldr	r0, [pc, #532]	@ (8001690 <ADC_READ+0x660>)
 800147c:	f002 ffb0 	bl	80043e0 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x20;
 8001480:	2320      	movs	r3, #32
 8001482:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		txd_buf[1] = 0x11;
 8001486:	2311      	movs	r3, #17
 8001488:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
		HAL_Delay(2);
 800148c:	2002      	movs	r0, #2
 800148e:	f002 fbfb 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 2, 0xFF);
 8001492:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001496:	23ff      	movs	r3, #255	@ 0xff
 8001498:	2202      	movs	r2, #2
 800149a:	487f      	ldr	r0, [pc, #508]	@ (8001698 <ADC_READ+0x668>)
 800149c:	f009 fdb6 	bl	800b00c <HAL_SPI_Transmit>
		HAL_Delay(2);
 80014a0:	2002      	movs	r0, #2
 80014a2:	f002 fbf1 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &rxd_buf, 0x11, 0xFF);
 80014a6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80014aa:	23ff      	movs	r3, #255	@ 0xff
 80014ac:	2211      	movs	r2, #17
 80014ae:	487a      	ldr	r0, [pc, #488]	@ (8001698 <ADC_READ+0x668>)
 80014b0:	f009 ffc2 	bl	800b438 <HAL_SPI_Receive>
		HAL_Delay(2);
 80014b4:	2002      	movs	r0, #2
 80014b6:	f002 fbe7 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014c0:	4873      	ldr	r0, [pc, #460]	@ (8001690 <ADC_READ+0x660>)
 80014c2:	f002 ff8d 	bl	80043e0 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 80014c6:	2002      	movs	r0, #2
 80014c8:	f002 fbde 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2140      	movs	r1, #64	@ 0x40
 80014d0:	4870      	ldr	r0, [pc, #448]	@ (8001694 <ADC_READ+0x664>)
 80014d2:	f002 ff85 	bl	80043e0 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80014d6:	2002      	movs	r0, #2
 80014d8:	f002 fbd6 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014e2:	486b      	ldr	r0, [pc, #428]	@ (8001690 <ADC_READ+0x660>)
 80014e4:	f002 ff7c 	bl	80043e0 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 80014e8:	2319      	movs	r3, #25
 80014ea:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		HAL_Delay(2);
 80014ee:	2002      	movs	r0, #2
 80014f0:	f002 fbca 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFF);
 80014f4:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80014f8:	23ff      	movs	r3, #255	@ 0xff
 80014fa:	2201      	movs	r2, #1
 80014fc:	4866      	ldr	r0, [pc, #408]	@ (8001698 <ADC_READ+0x668>)
 80014fe:	f009 fd85 	bl	800b00c <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001502:	2002      	movs	r0, #2
 8001504:	f002 fbc0 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800150e:	4860      	ldr	r0, [pc, #384]	@ (8001690 <ADC_READ+0x660>)
 8001510:	f002 ff66 	bl	80043e0 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001514:	2002      	movs	r0, #2
 8001516:	f002 fbb7 	bl	8003c88 <HAL_Delay>
		HAL_Delay(wait_time);
 800151a:	4b60      	ldr	r3, [pc, #384]	@ (800169c <ADC_READ+0x66c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fbb2 	bl	8003c88 <HAL_Delay>


		//				while(1)
		//				{

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800152a:	4859      	ldr	r0, [pc, #356]	@ (8001690 <ADC_READ+0x660>)
 800152c:	f002 ff58 	bl	80043e0 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 8001530:	2313      	movs	r3, #19
 8001532:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		HAL_Delay(2);
 8001536:	2002      	movs	r0, #2
 8001538:	f002 fba6 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFF);
 800153c:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001540:	23ff      	movs	r3, #255	@ 0xff
 8001542:	2201      	movs	r2, #1
 8001544:	4854      	ldr	r0, [pc, #336]	@ (8001698 <ADC_READ+0x668>)
 8001546:	f009 fd61 	bl	800b00c <HAL_SPI_Transmit>
		HAL_Delay(2);
 800154a:	2002      	movs	r0, #2
 800154c:	f002 fb9c 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2, 0x2, 0xFF);
 8001550:	23ff      	movs	r3, #255	@ 0xff
 8001552:	2202      	movs	r2, #2
 8001554:	4952      	ldr	r1, [pc, #328]	@ (80016a0 <ADC_READ+0x670>)
 8001556:	4850      	ldr	r0, [pc, #320]	@ (8001698 <ADC_READ+0x668>)
 8001558:	f009 ff6e 	bl	800b438 <HAL_SPI_Receive>
		reg_data_ADC_2 = (reg_data_ADC_2 >> 8 | reg_data_ADC_2 << 8 ) ;
 800155c:	4b50      	ldr	r3, [pc, #320]	@ (80016a0 <ADC_READ+0x670>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b4e      	ldr	r3, [pc, #312]	@ (80016a0 <ADC_READ+0x670>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <ADC_READ+0x670>)
 8001576:	801a      	strh	r2, [r3, #0]
		HAL_Delay(2);
 8001578:	2002      	movs	r0, #2
 800157a:	f002 fb85 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001584:	4842      	ldr	r0, [pc, #264]	@ (8001690 <ADC_READ+0x660>)
 8001586:	f002 ff2b 	bl	80043e0 <HAL_GPIO_WritePin>
		resistance = ((2*1000*(float)reg_data_ADC_2)/4) / 0xFFFF;
 800158a:	4b45      	ldr	r3, [pc, #276]	@ (80016a0 <ADC_READ+0x670>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001596:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80016a4 <ADC_READ+0x674>
 800159a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80015a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015a6:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80016a8 <ADC_READ+0x678>
 80015aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ae:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		temperature = (resistance - 100.0 ) / 0.385;
 80015b2:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80015b6:	f7fe ffd7 	bl	8000568 <__aeabi_f2d>
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4b3b      	ldr	r3, [pc, #236]	@ (80016ac <ADC_READ+0x67c>)
 80015c0:	f7fe fe72 	bl	80002a8 <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	a32e      	add	r3, pc, #184	@ (adr r3, 8001688 <ADC_READ+0x658>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f94b 	bl	800086c <__aeabi_ddiv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff faf3 	bl	8000bc8 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a32      	ldr	r2, [pc, #200]	@ (80016b0 <ADC_READ+0x680>)
 80015e6:	6013      	str	r3, [r2, #0]
		if(rxd_buf[7]==txd_buf[9] )
 80015e8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80015ec:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d122      	bne.n	800163a <ADC_READ+0x60a>
		{
			HAL_Delay(1);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f002 fb47 	bl	8003c88 <HAL_Delay>
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,channel,reg_data_ADC_2,temperature,resistance);
 80015fa:	f897 604f 	ldrb.w	r6, [r7, #79]	@ 0x4f
 80015fe:	f897 804e 	ldrb.w	r8, [r7, #78]	@ 0x4e
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <ADC_READ+0x670>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	643b      	str	r3, [r7, #64]	@ 0x40
 8001608:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <ADC_READ+0x680>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ffab 	bl	8000568 <__aeabi_f2d>
 8001612:	4604      	mov	r4, r0
 8001614:	460d      	mov	r5, r1
 8001616:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800161a:	f7fe ffa5 	bl	8000568 <__aeabi_f2d>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001626:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800162a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4643      	mov	r3, r8
 8001630:	4632      	mov	r2, r6
 8001632:	4920      	ldr	r1, [pc, #128]	@ (80016b4 <ADC_READ+0x684>)
 8001634:	4820      	ldr	r0, [pc, #128]	@ (80016b8 <ADC_READ+0x688>)
 8001636:	f00d fb19 	bl	800ec6c <siprintf>
			//HAL_UART_Transmit_IT(&huart5, buffer, sizeof(buffer));
		}
		if(channel == 1)
 800163a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800163e:	2b01      	cmp	r3, #1
 8001640:	d104      	bne.n	800164c <ADC_READ+0x61c>
		{
			temp_sensor_5 = temperature ;
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <ADC_READ+0x680>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a1d      	ldr	r2, [pc, #116]	@ (80016bc <ADC_READ+0x68c>)
 8001648:	6013      	str	r3, [r2, #0]
		else if(channel == 4)
		{
			temp_sensor_8 = temperature ;

		}
		break;
 800164a:	e153      	b.n	80018f4 <ADC_READ+0x8c4>
		else if(channel == 2)
 800164c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001650:	2b02      	cmp	r3, #2
 8001652:	d104      	bne.n	800165e <ADC_READ+0x62e>
			temp_sensor_6 = temperature ;
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <ADC_READ+0x680>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <ADC_READ+0x690>)
 800165a:	6013      	str	r3, [r2, #0]
		break;
 800165c:	e14a      	b.n	80018f4 <ADC_READ+0x8c4>
		else if(channel == 3)
 800165e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001662:	2b03      	cmp	r3, #3
 8001664:	d104      	bne.n	8001670 <ADC_READ+0x640>
			temp_sensor_7 = temperature ;
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <ADC_READ+0x680>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <ADC_READ+0x694>)
 800166c:	6013      	str	r3, [r2, #0]
		break;
 800166e:	e141      	b.n	80018f4 <ADC_READ+0x8c4>
		else if(channel == 4)
 8001670:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001674:	2b04      	cmp	r3, #4
 8001676:	f040 813d 	bne.w	80018f4 <ADC_READ+0x8c4>
			temp_sensor_8 = temperature ;
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <ADC_READ+0x680>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <ADC_READ+0x698>)
 8001680:	6013      	str	r3, [r2, #0]
		break;
 8001682:	e137      	b.n	80018f4 <ADC_READ+0x8c4>
 8001684:	f3af 8000 	nop.w
 8001688:	0a3d70a4 	.word	0x0a3d70a4
 800168c:	3fd8a3d7 	.word	0x3fd8a3d7
 8001690:	42020400 	.word	0x42020400
 8001694:	42021800 	.word	0x42021800
 8001698:	200045f8 	.word	0x200045f8
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000466 	.word	0x20000466
 80016a4:	44fa0000 	.word	0x44fa0000
 80016a8:	477fff00 	.word	0x477fff00
 80016ac:	40590000 	.word	0x40590000
 80016b0:	2000046c 	.word	0x2000046c
 80016b4:	08010f1c 	.word	0x08010f1c
 80016b8:	2000020c 	.word	0x2000020c
 80016bc:	20000480 	.word	0x20000480
 80016c0:	20000484 	.word	0x20000484
 80016c4:	20000488 	.word	0x20000488
 80016c8:	2000048c 	.word	0x2000048c

	case 3:
		HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d2:	488b      	ldr	r0, [pc, #556]	@ (8001900 <ADC_READ+0x8d0>)
 80016d4:	f002 fe84 	bl	80043e0 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80016d8:	200a      	movs	r0, #10
 80016da:	f002 fad5 	bl	8003c88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e4:	4886      	ldr	r0, [pc, #536]	@ (8001900 <ADC_READ+0x8d0>)
 80016e6:	f002 fe7b 	bl	80043e0 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2110      	movs	r1, #16
 80016ee:	4885      	ldr	r0, [pc, #532]	@ (8001904 <ADC_READ+0x8d4>)
 80016f0:	f002 fe76 	bl	80043e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016fa:	4881      	ldr	r0, [pc, #516]	@ (8001900 <ADC_READ+0x8d0>)
 80016fc:	f002 fe70 	bl	80043e0 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2110      	movs	r1, #16
 8001704:	487f      	ldr	r0, [pc, #508]	@ (8001904 <ADC_READ+0x8d4>)
 8001706:	f002 fe6b 	bl	80043e0 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf,0x13, 0xFF);
 800170a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800170e:	23ff      	movs	r3, #255	@ 0xff
 8001710:	2213      	movs	r2, #19
 8001712:	487d      	ldr	r0, [pc, #500]	@ (8001908 <ADC_READ+0x8d8>)
 8001714:	f009 fc7a 	bl	800b00c <HAL_SPI_Transmit>
		HAL_Delay(2);
 8001718:	2002      	movs	r0, #2
 800171a:	f002 fab5 	bl	8003c88 <HAL_Delay>
		//HAL_SPI_Receive(&hspi3, (uint8_t*) &rxd_buf, 20, 0xFF);
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800171e:	2201      	movs	r2, #1
 8001720:	2110      	movs	r1, #16
 8001722:	4878      	ldr	r0, [pc, #480]	@ (8001904 <ADC_READ+0x8d4>)
 8001724:	f002 fe5c 	bl	80043e0 <HAL_GPIO_WritePin>


		//HAL_Delay(200);

		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2110      	movs	r1, #16
 800172c:	4875      	ldr	r0, [pc, #468]	@ (8001904 <ADC_READ+0x8d4>)
 800172e:	f002 fe57 	bl	80043e0 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x20;
 8001732:	2320      	movs	r3, #32
 8001734:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
		txd_buf[1] = 0x11;
 8001738:	2311      	movs	r3, #17
 800173a:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 2, 0xFF);
 800173e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001742:	23ff      	movs	r3, #255	@ 0xff
 8001744:	2202      	movs	r2, #2
 8001746:	4870      	ldr	r0, [pc, #448]	@ (8001908 <ADC_READ+0x8d8>)
 8001748:	f009 fc60 	bl	800b00c <HAL_SPI_Transmit>
		HAL_Delay(2);
 800174c:	2002      	movs	r0, #2
 800174e:	f002 fa9b 	bl	8003c88 <HAL_Delay>
		HAL_SPI_Receive(&hspi3, (uint8_t*) &rxd_buf, 0x11, 0xFF);
 8001752:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001756:	23ff      	movs	r3, #255	@ 0xff
 8001758:	2211      	movs	r2, #17
 800175a:	486b      	ldr	r0, [pc, #428]	@ (8001908 <ADC_READ+0x8d8>)
 800175c:	f009 fe6c 	bl	800b438 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001760:	2201      	movs	r2, #1
 8001762:	2110      	movs	r1, #16
 8001764:	4867      	ldr	r0, [pc, #412]	@ (8001904 <ADC_READ+0x8d4>)
 8001766:	f002 fe3b 	bl	80043e0 <HAL_GPIO_WritePin>
		//		{
		//			HAL_Delay(1);
		//			sprintf(buffer, "S  %d  %dE\n\r",adc_num,channel);
		//					HAL_UART_Transmit_IT(&huart8, buffer, sizeof(buffer));
		//		}
		HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001770:	4863      	ldr	r0, [pc, #396]	@ (8001900 <ADC_READ+0x8d0>)
 8001772:	f002 fe35 	bl	80043e0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2110      	movs	r1, #16
 800177a:	4862      	ldr	r0, [pc, #392]	@ (8001904 <ADC_READ+0x8d4>)
 800177c:	f002 fe30 	bl	80043e0 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001780:	2319      	movs	r3, #25
 8001782:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFF);
 8001786:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800178a:	23ff      	movs	r3, #255	@ 0xff
 800178c:	2201      	movs	r2, #1
 800178e:	485e      	ldr	r0, [pc, #376]	@ (8001908 <ADC_READ+0x8d8>)
 8001790:	f009 fc3c 	bl	800b00c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001794:	2201      	movs	r2, #1
 8001796:	2110      	movs	r1, #16
 8001798:	485a      	ldr	r0, [pc, #360]	@ (8001904 <ADC_READ+0x8d4>)
 800179a:	f002 fe21 	bl	80043e0 <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 800179e:	4b5b      	ldr	r3, [pc, #364]	@ (800190c <ADC_READ+0x8dc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fa70 	bl	8003c88 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2110      	movs	r1, #16
 80017ac:	4855      	ldr	r0, [pc, #340]	@ (8001904 <ADC_READ+0x8d4>)
 80017ae:	f002 fe17 	bl	80043e0 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 80017b2:	2313      	movs	r3, #19
 80017b4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFF);
 80017b8:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80017bc:	23ff      	movs	r3, #255	@ 0xff
 80017be:	2201      	movs	r2, #1
 80017c0:	4851      	ldr	r0, [pc, #324]	@ (8001908 <ADC_READ+0x8d8>)
 80017c2:	f009 fc23 	bl	800b00c <HAL_SPI_Transmit>

		HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3, 0x2, 0xFF);
 80017c6:	23ff      	movs	r3, #255	@ 0xff
 80017c8:	2202      	movs	r2, #2
 80017ca:	4951      	ldr	r1, [pc, #324]	@ (8001910 <ADC_READ+0x8e0>)
 80017cc:	484e      	ldr	r0, [pc, #312]	@ (8001908 <ADC_READ+0x8d8>)
 80017ce:	f009 fe33 	bl	800b438 <HAL_SPI_Receive>
		reg_data_ADC_3 = (reg_data_ADC_3 >> 8 | reg_data_ADC_3 << 8 ) ;
 80017d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001910 <ADC_READ+0x8e0>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b21a      	sxth	r2, r3
 80017dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001910 <ADC_READ+0x8e0>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <ADC_READ+0x8e0>)
 80017ec:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2110      	movs	r1, #16
 80017f2:	4844      	ldr	r0, [pc, #272]	@ (8001904 <ADC_READ+0x8d4>)
 80017f4:	f002 fdf4 	bl	80043e0 <HAL_GPIO_WritePin>
		resistance = ((2*1000*(float)reg_data_ADC_3)/4) / 0xFFFF;
 80017f8:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <ADC_READ+0x8e0>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001804:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001914 <ADC_READ+0x8e4>
 8001808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001810:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001814:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001918 <ADC_READ+0x8e8>
 8001818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800181c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		temperature = (resistance - 100.0 ) / 0.385;
 8001820:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001824:	f7fe fea0 	bl	8000568 <__aeabi_f2d>
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <ADC_READ+0x8ec>)
 800182e:	f7fe fd3b 	bl	80002a8 <__aeabi_dsub>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	a32f      	add	r3, pc, #188	@ (adr r3, 80018f8 <ADC_READ+0x8c8>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7ff f814 	bl	800086c <__aeabi_ddiv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff f9bc 	bl	8000bc8 <__aeabi_d2f>
 8001850:	4603      	mov	r3, r0
 8001852:	4a33      	ldr	r2, [pc, #204]	@ (8001920 <ADC_READ+0x8f0>)
 8001854:	6013      	str	r3, [r2, #0]
		if(rxd_buf[7]==txd_buf[9] )
 8001856:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800185a:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800185e:	429a      	cmp	r2, r3
 8001860:	d122      	bne.n	80018a8 <ADC_READ+0x878>
		{
			HAL_Delay(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f002 fa10 	bl	8003c88 <HAL_Delay>
			sprintf(buffer, "S  %d  %dE  %X  temp = %f  resis == %f\n\r",adc_num,channel,reg_data_ADC_3,temperature,resistance);
 8001868:	f897 604f 	ldrb.w	r6, [r7, #79]	@ 0x4f
 800186c:	f897 804e 	ldrb.w	r8, [r7, #78]	@ 0x4e
 8001870:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <ADC_READ+0x8e0>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	643b      	str	r3, [r7, #64]	@ 0x40
 8001876:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <ADC_READ+0x8f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe74 	bl	8000568 <__aeabi_f2d>
 8001880:	4604      	mov	r4, r0
 8001882:	460d      	mov	r5, r1
 8001884:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001888:	f7fe fe6e 	bl	8000568 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001894:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	4643      	mov	r3, r8
 800189e:	4632      	mov	r2, r6
 80018a0:	4920      	ldr	r1, [pc, #128]	@ (8001924 <ADC_READ+0x8f4>)
 80018a2:	4821      	ldr	r0, [pc, #132]	@ (8001928 <ADC_READ+0x8f8>)
 80018a4:	f00d f9e2 	bl	800ec6c <siprintf>
			//HAL_UART_Transmit_IT(&huart5, buffer, sizeof(buffer));
		}
		if(channel == 1)
 80018a8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d104      	bne.n	80018ba <ADC_READ+0x88a>
		{
			temp_sensor_9 = temperature ;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <ADC_READ+0x8f0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1d      	ldr	r2, [pc, #116]	@ (800192c <ADC_READ+0x8fc>)
 80018b6:	6013      	str	r3, [r2, #0]
		else if(channel == 4)
		{
			temp_sensor_12 = temperature ;

		}
		break;
 80018b8:	e040      	b.n	800193c <ADC_READ+0x90c>
		else if(channel == 2)
 80018ba:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d104      	bne.n	80018cc <ADC_READ+0x89c>
			temp_sensor_10 = temperature ;
 80018c2:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <ADC_READ+0x8f0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001930 <ADC_READ+0x900>)
 80018c8:	6013      	str	r3, [r2, #0]
		break;
 80018ca:	e037      	b.n	800193c <ADC_READ+0x90c>
		else if(channel == 3)
 80018cc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d104      	bne.n	80018de <ADC_READ+0x8ae>
			temp_sensor_11 = temperature ;
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <ADC_READ+0x8f0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a16      	ldr	r2, [pc, #88]	@ (8001934 <ADC_READ+0x904>)
 80018da:	6013      	str	r3, [r2, #0]
		break;
 80018dc:	e02e      	b.n	800193c <ADC_READ+0x90c>
		else if(channel == 4)
 80018de:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d12a      	bne.n	800193c <ADC_READ+0x90c>
			temp_sensor_12 = temperature ;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <ADC_READ+0x8f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a13      	ldr	r2, [pc, #76]	@ (8001938 <ADC_READ+0x908>)
 80018ec:	6013      	str	r3, [r2, #0]
		break;
 80018ee:	e025      	b.n	800193c <ADC_READ+0x90c>
		break;
 80018f0:	bf00      	nop
 80018f2:	e024      	b.n	800193e <ADC_READ+0x90e>
		break;
 80018f4:	bf00      	nop
 80018f6:	e022      	b.n	800193e <ADC_READ+0x90e>
 80018f8:	0a3d70a4 	.word	0x0a3d70a4
 80018fc:	3fd8a3d7 	.word	0x3fd8a3d7
 8001900:	42020000 	.word	0x42020000
 8001904:	42020c00 	.word	0x42020c00
 8001908:	20004688 	.word	0x20004688
 800190c:	20000000 	.word	0x20000000
 8001910:	20000468 	.word	0x20000468
 8001914:	44fa0000 	.word	0x44fa0000
 8001918:	477fff00 	.word	0x477fff00
 800191c:	40590000 	.word	0x40590000
 8001920:	2000046c 	.word	0x2000046c
 8001924:	08010f1c 	.word	0x08010f1c
 8001928:	2000020c 	.word	0x2000020c
 800192c:	20000490 	.word	0x20000490
 8001930:	20000494 	.word	0x20000494
 8001934:	20000498 	.word	0x20000498
 8001938:	2000049c 	.word	0x2000049c
		break;
 800193c:	bf00      	nop
	}


	if(channel == 4 && adc_num == 3)
 800193e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001942:	2b04      	cmp	r3, #4
 8001944:	f040 80c0 	bne.w	8001ac8 <ADC_READ+0xa98>
 8001948:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800194c:	2b03      	cmp	r3, #3
 800194e:	f040 80bb 	bne.w	8001ac8 <ADC_READ+0xa98>
	{
		uint8_t time_data[8]={0};
 8001952:	2300      	movs	r3, #0
 8001954:	653b      	str	r3, [r7, #80]	@ 0x50
 8001956:	2300      	movs	r3, #0
 8001958:	657b      	str	r3, [r7, #84]	@ 0x54
		uint32_t sec_addr = 0x60000000 | 0x7FFF9;
 800195a:	4b60      	ldr	r3, [pc, #384]	@ (8001adc <ADC_READ+0xaac>)
 800195c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data,7);
 8001960:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001964:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001968:	2307      	movs	r3, #7
 800196a:	485d      	ldr	r0, [pc, #372]	@ (8001ae0 <ADC_READ+0xab0>)
 800196c:	f00a f848 	bl	800ba00 <HAL_SRAM_Read_8b>
		memset(buffer_1,0,sizeof(buffer));
 8001970:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001974:	2100      	movs	r1, #0
 8001976:	485b      	ldr	r0, [pc, #364]	@ (8001ae4 <ADC_READ+0xab4>)
 8001978:	f00d f9db 	bl	800ed32 <memset>
		HAL_Delay(1);
 800197c:	2001      	movs	r0, #1
 800197e:	f002 f983 	bl	8003c88 <HAL_Delay>
		sprintf(buffer_1,
 8001982:	4b59      	ldr	r3, [pc, #356]	@ (8001ae8 <ADC_READ+0xab8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fdee 	bl	8000568 <__aeabi_f2d>
 800198c:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001990:	4b56      	ldr	r3, [pc, #344]	@ (8001aec <ADC_READ+0xabc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fde7 	bl	8000568 <__aeabi_f2d>
 800199a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 800199e:	4b54      	ldr	r3, [pc, #336]	@ (8001af0 <ADC_READ+0xac0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fde0 	bl	8000568 <__aeabi_f2d>
 80019a8:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80019ac:	4b51      	ldr	r3, [pc, #324]	@ (8001af4 <ADC_READ+0xac4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdd9 	bl	8000568 <__aeabi_f2d>
 80019b6:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80019ba:	4b4f      	ldr	r3, [pc, #316]	@ (8001af8 <ADC_READ+0xac8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdd2 	bl	8000568 <__aeabi_f2d>
 80019c4:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80019c8:	4b4c      	ldr	r3, [pc, #304]	@ (8001afc <ADC_READ+0xacc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdcb 	bl	8000568 <__aeabi_f2d>
 80019d2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80019d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001b00 <ADC_READ+0xad0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdc4 	bl	8000568 <__aeabi_f2d>
 80019e0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80019e4:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <ADC_READ+0xad4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdbd 	bl	8000568 <__aeabi_f2d>
 80019ee:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80019f2:	4b45      	ldr	r3, [pc, #276]	@ (8001b08 <ADC_READ+0xad8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fdb6 	bl	8000568 <__aeabi_f2d>
 80019fc:	e9c7 0100 	strd	r0, r1, [r7]
 8001a00:	4b42      	ldr	r3, [pc, #264]	@ (8001b0c <ADC_READ+0xadc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fdaf 	bl	8000568 <__aeabi_f2d>
 8001a0a:	4682      	mov	sl, r0
 8001a0c:	468b      	mov	fp, r1
 8001a0e:	4b40      	ldr	r3, [pc, #256]	@ (8001b10 <ADC_READ+0xae0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fda8 	bl	8000568 <__aeabi_f2d>
 8001a18:	4680      	mov	r8, r0
 8001a1a:	4689      	mov	r9, r1
 8001a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b14 <ADC_READ+0xae4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fda1 	bl	8000568 <__aeabi_f2d>
				"{\"TS1\": \"%.2f\", \"TS2\": \"%.2f\", \"TS3\": \"%.2f\", \"TS4\": \"%.2f\", \"TS5\": \"%.2f\", "
				"\"TS6\": \"%.2f\", \"TS7\": \"%.2f\", \"TS8\": \"%.2f\", \"TS9\": \"%.2f\", \"TS10\": \"%.2f\", "
				"\"TS11\": \"%.2f\", \"TS12\": \"%.2f\"}",// \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x}\"\n\r",
				temp_sensor_1, temp_sensor_2, temp_sensor_3, temp_sensor_4, temp_sensor_5, temp_sensor_6,
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001a26:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
		sprintf(buffer_1,
 8001a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001a2c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
		sprintf(buffer_1,
 8001a30:	461e      	mov	r6, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001a32:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
		sprintf(buffer_1,
 8001a36:	461d      	mov	r5, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001a38:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
		sprintf(buffer_1,
 8001a3c:	461c      	mov	r4, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001a3e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
		sprintf(buffer_1,
 8001a42:	461a      	mov	r2, r3
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001a44:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
		sprintf(buffer_1,
 8001a48:	931b      	str	r3, [sp, #108]	@ 0x6c
 8001a4a:	921a      	str	r2, [sp, #104]	@ 0x68
 8001a4c:	9419      	str	r4, [sp, #100]	@ 0x64
 8001a4e:	9518      	str	r5, [sp, #96]	@ 0x60
 8001a50:	9617      	str	r6, [sp, #92]	@ 0x5c
 8001a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a54:	9316      	str	r3, [sp, #88]	@ 0x58
 8001a56:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8001a5a:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 8001a5e:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 8001a62:	ed97 7b00 	vldr	d7, [r7]
 8001a66:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001a6a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a6e:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001a72:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a76:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001a7a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a82:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a8a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001a8e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a92:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a9a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001a9e:	ed8d 7b00 	vstr	d7, [sp]
 8001aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001aa6:	491c      	ldr	r1, [pc, #112]	@ (8001b18 <ADC_READ+0xae8>)
 8001aa8:	480e      	ldr	r0, [pc, #56]	@ (8001ae4 <ADC_READ+0xab4>)
 8001aaa:	f00d f8df 	bl	800ec6c <siprintf>

//			HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_SET);
//			HAL_Delay(10);
//			HAL_UART_Transmit_IT(&huart4, buffer_1, strlen(buffer_1));

			HAL_UART_Transmit_IT(&huart5, buffer_1, strlen(buffer_1));
 8001aae:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <ADC_READ+0xab4>)
 8001ab0:	f7fe fbee 	bl	8000290 <strlen>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	490a      	ldr	r1, [pc, #40]	@ (8001ae4 <ADC_READ+0xab4>)
 8001abc:	4817      	ldr	r0, [pc, #92]	@ (8001b1c <ADC_READ+0xaec>)
 8001abe:	f00a f87d 	bl	800bbbc <HAL_UART_Transmit_IT>
//			HAL_UART_Transmit_IT(&huart10, buffer, strlen(buffer));
			HAL_Delay(10);
 8001ac2:	200a      	movs	r0, #10
 8001ac4:	f002 f8e0 	bl	8003c88 <HAL_Delay>

	}

	//HAL_Delay(500);

	return temperature;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <ADC_READ+0xaf0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	ee07 3a90 	vmov	s15, r3

	//}

}
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	37a4      	adds	r7, #164	@ 0xa4
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001adc:	6007fff9 	.word	0x6007fff9
 8001ae0:	200049f8 	.word	0x200049f8
 8001ae4:	20000338 	.word	0x20000338
 8001ae8:	20000470 	.word	0x20000470
 8001aec:	20000474 	.word	0x20000474
 8001af0:	20000478 	.word	0x20000478
 8001af4:	2000047c 	.word	0x2000047c
 8001af8:	20000480 	.word	0x20000480
 8001afc:	20000484 	.word	0x20000484
 8001b00:	20000488 	.word	0x20000488
 8001b04:	2000048c 	.word	0x2000048c
 8001b08:	20000490 	.word	0x20000490
 8001b0c:	20000494 	.word	0x20000494
 8001b10:	20000498 	.word	0x20000498
 8001b14:	2000049c 	.word	0x2000049c
 8001b18:	08010f48 	.word	0x08010f48
 8001b1c:	2000483c 	.word	0x2000483c
 8001b20:	2000046c 	.word	0x2000046c

08001b24 <NAND_operation>:

uint8_t NAND_data[8192] = {0};


void NAND_operation(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LED1_Pin, 1);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b2e:	483a      	ldr	r0, [pc, #232]	@ (8001c18 <NAND_operation+0xf4>)
 8001b30:	f002 fc56 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f002 f8a7 	bl	8003c88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED1_Pin, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b40:	4835      	ldr	r0, [pc, #212]	@ (8001c18 <NAND_operation+0xf4>)
 8001b42:	f002 fc4d 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f002 f89e 	bl	8003c88 <HAL_Delay>

	if(nand_update)
 8001b4c:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <NAND_operation+0xf8>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d05e      	beq.n	8001c12 <NAND_operation+0xee>
	{
		//		HAL_NAND_Erase_Block(&hnand1, &nand_address);
		//		HAL_Delay(1000);
		memset(&read_data[0],0,sizeof(read_data));
 8001b54:	f242 0203 	movw	r2, #8195	@ 0x2003
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4831      	ldr	r0, [pc, #196]	@ (8001c20 <NAND_operation+0xfc>)
 8001b5c:	f00d f8e9 	bl	800ed32 <memset>
		nand_update = 0 ;
 8001b60:	4b2e      	ldr	r3, [pc, #184]	@ (8001c1c <NAND_operation+0xf8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
		get_NAND_data(NAND_data);
 8001b66:	482f      	ldr	r0, [pc, #188]	@ (8001c24 <NAND_operation+0x100>)
 8001b68:	f000 f994 	bl	8001e94 <get_NAND_data>
		//		while(1)
		//		{
		HAL_NAND_Write_Page_8b(&hnand1, &nand_address,&NAND_data, 1);
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c24 <NAND_operation+0x100>)
 8001b70:	492d      	ldr	r1, [pc, #180]	@ (8001c28 <NAND_operation+0x104>)
 8001b72:	482e      	ldr	r0, [pc, #184]	@ (8001c2c <NAND_operation+0x108>)
 8001b74:	f002 fef4 	bl	8004960 <HAL_NAND_Write_Page_8b>
		HAL_UART_Transmit_IT(&huart5, "\n\rNAND_WRITE_DATA\n\r", strlen("NAND_READ_DATA\n\r"));
 8001b78:	2210      	movs	r2, #16
 8001b7a:	492d      	ldr	r1, [pc, #180]	@ (8001c30 <NAND_operation+0x10c>)
 8001b7c:	482d      	ldr	r0, [pc, #180]	@ (8001c34 <NAND_operation+0x110>)
 8001b7e:	f00a f81d 	bl	800bbbc <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001b82:	200a      	movs	r0, #10
 8001b84:	f002 f880 	bl	8003c88 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart5, NAND_data, 8192);
 8001b88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b8c:	4925      	ldr	r1, [pc, #148]	@ (8001c24 <NAND_operation+0x100>)
 8001b8e:	4829      	ldr	r0, [pc, #164]	@ (8001c34 <NAND_operation+0x110>)
 8001b90:	f00a f814 	bl	800bbbc <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 8001b94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b98:	f002 f876 	bl	8003c88 <HAL_Delay>


		HAL_NAND_Read_ID(&hnand1,&nand_details); //????
 8001b9c:	4926      	ldr	r1, [pc, #152]	@ (8001c38 <NAND_operation+0x114>)
 8001b9e:	4823      	ldr	r0, [pc, #140]	@ (8001c2c <NAND_operation+0x108>)
 8001ba0:	f002 fccc 	bl	800453c <HAL_NAND_Read_ID>
		HAL_NAND_Read_ID(&hnand1,&read_data); //????
 8001ba4:	491e      	ldr	r1, [pc, #120]	@ (8001c20 <NAND_operation+0xfc>)
 8001ba6:	4821      	ldr	r0, [pc, #132]	@ (8001c2c <NAND_operation+0x108>)
 8001ba8:	f002 fcc8 	bl	800453c <HAL_NAND_Read_ID>
		//HAL_Delay(100);
		HAL_NAND_Read_Page_8b(&hnand1,(const NAND_AddressTypeDef  *) &nand_address,(uint8_t *)&read_data, 1);
 8001bac:	2301      	movs	r3, #1
 8001bae:	4a1c      	ldr	r2, [pc, #112]	@ (8001c20 <NAND_operation+0xfc>)
 8001bb0:	491d      	ldr	r1, [pc, #116]	@ (8001c28 <NAND_operation+0x104>)
 8001bb2:	481e      	ldr	r0, [pc, #120]	@ (8001c2c <NAND_operation+0x108>)
 8001bb4:	f002 fd7a 	bl	80046ac <HAL_NAND_Read_Page_8b>
		HAL_UART_Transmit_IT(&huart5, "\n\rNAND_READ_DATA\n\r", strlen("NAND_READ_DATA\n\r"));
 8001bb8:	2210      	movs	r2, #16
 8001bba:	4920      	ldr	r1, [pc, #128]	@ (8001c3c <NAND_operation+0x118>)
 8001bbc:	481d      	ldr	r0, [pc, #116]	@ (8001c34 <NAND_operation+0x110>)
 8001bbe:	f009 fffd 	bl	800bbbc <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001bc2:	200a      	movs	r0, #10
 8001bc4:	f002 f860 	bl	8003c88 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart5, read_data, 8192);
 8001bc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bcc:	4914      	ldr	r1, [pc, #80]	@ (8001c20 <NAND_operation+0xfc>)
 8001bce:	4819      	ldr	r0, [pc, #100]	@ (8001c34 <NAND_operation+0x110>)
 8001bd0:	f009 fff4 	bl	800bbbc <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 8001bd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bd8:	f002 f856 	bl	8003c88 <HAL_Delay>
		nand_address.Page++;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <NAND_operation+0x104>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <NAND_operation+0x104>)
 8001be6:	801a      	strh	r2, [r3, #0]
		{
//			nand_address.Page = 0;
//			HAL_NAND_Erase_Block(&hnand1, &nand_address);
//			HAL_Delay(1000);
		}
		if(nand_address.Page> 127) //1block =128 pages
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <NAND_operation+0x104>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bee:	d910      	bls.n	8001c12 <NAND_operation+0xee>
		{
			nand_address.Block ++;//= ++block_read;
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <NAND_operation+0x104>)
 8001bf2:	889b      	ldrh	r3, [r3, #4]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <NAND_operation+0x104>)
 8001bfa:	809a      	strh	r2, [r3, #4]
			nand_address.Page = 0;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <NAND_operation+0x104>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	801a      	strh	r2, [r3, #0]
			HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8001c02:	4909      	ldr	r1, [pc, #36]	@ (8001c28 <NAND_operation+0x104>)
 8001c04:	4809      	ldr	r0, [pc, #36]	@ (8001c2c <NAND_operation+0x108>)
 8001c06:	f003 f803 	bl	8004c10 <HAL_NAND_Erase_Block>
			HAL_Delay(1000);
 8001c0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c0e:	f002 f83b 	bl	8003c88 <HAL_Delay>
		}
		//		}
	}

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	42021000 	.word	0x42021000
 8001c1c:	200024c7 	.word	0x200024c7
 8001c20:	200004c4 	.word	0x200004c4
 8001c24:	200024c8 	.word	0x200024c8
 8001c28:	200004bc 	.word	0x200004bc
 8001c2c:	20004a50 	.word	0x20004a50
 8001c30:	08011000 	.word	0x08011000
 8001c34:	2000483c 	.word	0x2000483c
 8001c38:	200004b8 	.word	0x200004b8
 8001c3c:	08011014 	.word	0x08011014

08001c40 <SRAM_operation>:

void time_setter( );
void update_NAND_addr();

uint8_t SRAM_operation()
{
 8001c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c44:	b0b3      	sub	sp, #204	@ 0xcc
 8001c46:	af1c      	add	r7, sp, #112	@ 0x70

	uint8_t time_data[8]={0};
 8001c48:	2300      	movs	r3, #0
 8001c4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	657b      	str	r3, [r7, #84]	@ 0x54
//	Erase_SRAM(&hsram1);
	//HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&cur_sec,1);
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data,7);
 8001c50:	4b7a      	ldr	r3, [pc, #488]	@ (8001e3c <SRAM_operation+0x1fc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	4878      	ldr	r0, [pc, #480]	@ (8001e40 <SRAM_operation+0x200>)
 8001c5e:	f009 fecf 	bl	800ba00 <HAL_SRAM_Read_8b>

	if(time_data[0] != old_sec)
 8001c62:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8001c66:	4b77      	ldr	r3, [pc, #476]	@ (8001e44 <SRAM_operation+0x204>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	f000 80d7 	beq.w	8001e1e <SRAM_operation+0x1de>
	{
		memset(SRAM_buffer,0,sizeof(SRAM_buffer));
 8001c70:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c74:	2100      	movs	r1, #0
 8001c76:	4874      	ldr	r0, [pc, #464]	@ (8001e48 <SRAM_operation+0x208>)
 8001c78:	f00d f85b 	bl	800ed32 <memset>
		sprintf(SRAM_buffer,
 8001c7c:	4b73      	ldr	r3, [pc, #460]	@ (8001e4c <SRAM_operation+0x20c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc71 	bl	8000568 <__aeabi_f2d>
 8001c86:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8001c8a:	4b71      	ldr	r3, [pc, #452]	@ (8001e50 <SRAM_operation+0x210>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc6a 	bl	8000568 <__aeabi_f2d>
 8001c94:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001c98:	4b6e      	ldr	r3, [pc, #440]	@ (8001e54 <SRAM_operation+0x214>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc63 	bl	8000568 <__aeabi_f2d>
 8001ca2:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8001e58 <SRAM_operation+0x218>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fc5c 	bl	8000568 <__aeabi_f2d>
 8001cb0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8001cb4:	4b69      	ldr	r3, [pc, #420]	@ (8001e5c <SRAM_operation+0x21c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc55 	bl	8000568 <__aeabi_f2d>
 8001cbe:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001cc2:	4b67      	ldr	r3, [pc, #412]	@ (8001e60 <SRAM_operation+0x220>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc4e 	bl	8000568 <__aeabi_f2d>
 8001ccc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001cd0:	4b64      	ldr	r3, [pc, #400]	@ (8001e64 <SRAM_operation+0x224>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc47 	bl	8000568 <__aeabi_f2d>
 8001cda:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001cde:	4b62      	ldr	r3, [pc, #392]	@ (8001e68 <SRAM_operation+0x228>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc40 	bl	8000568 <__aeabi_f2d>
 8001ce8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001cec:	4b5f      	ldr	r3, [pc, #380]	@ (8001e6c <SRAM_operation+0x22c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc39 	bl	8000568 <__aeabi_f2d>
 8001cf6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e70 <SRAM_operation+0x230>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc32 	bl	8000568 <__aeabi_f2d>
 8001d04:	4682      	mov	sl, r0
 8001d06:	468b      	mov	fp, r1
 8001d08:	4b5a      	ldr	r3, [pc, #360]	@ (8001e74 <SRAM_operation+0x234>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc2b 	bl	8000568 <__aeabi_f2d>
 8001d12:	4680      	mov	r8, r0
 8001d14:	4689      	mov	r9, r1
 8001d16:	4b58      	ldr	r3, [pc, #352]	@ (8001e78 <SRAM_operation+0x238>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc24 	bl	8000568 <__aeabi_f2d>
				"{\"TS1\": \"%.2f\", \"TS2\": \"%.2f\", \"TS3\": \"%.2f\", \"TS4\": \"%.2f\", \"TS5\": \"%.2f\", "
				"\"TS6\": \"%.2f\", \"TS7\": \"%.2f\", \"TS8\": \"%.2f\", \"TS9\": \"%.2f\", \"TS10\": \"%.2f\", "
				"\"TS11\": \"%.2f\", \"TS12\": \"%.2f\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x}\"\n\r",
				temp_sensor_1, temp_sensor_2, temp_sensor_3, temp_sensor_4, temp_sensor_5, temp_sensor_6,
				temp_sensor_7, temp_sensor_8, temp_sensor_9, temp_sensor_10, temp_sensor_11, temp_sensor_12,
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001d20:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
		sprintf(SRAM_buffer,
 8001d24:	607b      	str	r3, [r7, #4]
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001d26:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
		sprintf(SRAM_buffer,
 8001d2a:	461e      	mov	r6, r3
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001d2c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
		sprintf(SRAM_buffer,
 8001d30:	461d      	mov	r5, r3
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001d32:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
		sprintf(SRAM_buffer,
 8001d36:	461c      	mov	r4, r3
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001d38:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
		sprintf(SRAM_buffer,
 8001d3c:	461a      	mov	r2, r3
				time_data[2],time_data[1],time_data[0],time_data[4],time_data[5],time_data[6]);
 8001d3e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
		sprintf(SRAM_buffer,
 8001d42:	931b      	str	r3, [sp, #108]	@ 0x6c
 8001d44:	921a      	str	r2, [sp, #104]	@ 0x68
 8001d46:	9419      	str	r4, [sp, #100]	@ 0x64
 8001d48:	9518      	str	r5, [sp, #96]	@ 0x60
 8001d4a:	9617      	str	r6, [sp, #92]	@ 0x5c
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	9316      	str	r3, [sp, #88]	@ 0x58
 8001d50:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8001d54:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 8001d58:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 8001d5c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d60:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001d64:	ed97 7b04 	vldr	d7, [r7, #16]
 8001d68:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001d6c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d70:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001d74:	ed97 7b08 	vldr	d7, [r7, #32]
 8001d78:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001d7c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001d80:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d84:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001d88:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001d8c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001d90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001d94:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001d98:	ed8d 7b00 	vstr	d7, [sp]
 8001d9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001da0:	4936      	ldr	r1, [pc, #216]	@ (8001e7c <SRAM_operation+0x23c>)
 8001da2:	4829      	ldr	r0, [pc, #164]	@ (8001e48 <SRAM_operation+0x208>)
 8001da4:	f00c ff62 	bl	800ec6c <siprintf>
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAM_buffer, strlen(SRAM_buffer));
 8001da8:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <SRAM_operation+0x240>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461c      	mov	r4, r3
 8001dae:	4826      	ldr	r0, [pc, #152]	@ (8001e48 <SRAM_operation+0x208>)
 8001db0:	f7fe fa6e 	bl	8000290 <strlen>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a24      	ldr	r2, [pc, #144]	@ (8001e48 <SRAM_operation+0x208>)
 8001db8:	4621      	mov	r1, r4
 8001dba:	4821      	ldr	r0, [pc, #132]	@ (8001e40 <SRAM_operation+0x200>)
 8001dbc:	f009 fe69 	bl	800ba92 <HAL_SRAM_Write_8b>
		sram_location = sram_location + strlen(SRAM_buffer);
 8001dc0:	4821      	ldr	r0, [pc, #132]	@ (8001e48 <SRAM_operation+0x208>)
 8001dc2:	f7fe fa65 	bl	8000290 <strlen>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e80 <SRAM_operation+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a2c      	ldr	r2, [pc, #176]	@ (8001e80 <SRAM_operation+0x240>)
 8001dd0:	6013      	str	r3, [r2, #0]
		size_counter += strlen(SRAM_buffer);
 8001dd2:	481d      	ldr	r0, [pc, #116]	@ (8001e48 <SRAM_operation+0x208>)
 8001dd4:	f7fe fa5c 	bl	8000290 <strlen>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <SRAM_operation+0x244>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b27      	ldr	r3, [pc, #156]	@ (8001e84 <SRAM_operation+0x244>)
 8001de6:	801a      	strh	r2, [r3, #0]
		if(size_counter + strlen(SRAM_buffer) > NAND_PAGE_SIZE)
 8001de8:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <SRAM_operation+0x244>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	461c      	mov	r4, r3
 8001dee:	4816      	ldr	r0, [pc, #88]	@ (8001e48 <SRAM_operation+0x208>)
 8001df0:	f7fe fa4e 	bl	8000290 <strlen>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4423      	add	r3, r4
 8001df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dfc:	d90b      	bls.n	8001e16 <SRAM_operation+0x1d6>
		{
			sram_location = sram_base_location ;
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <SRAM_operation+0x248>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1f      	ldr	r2, [pc, #124]	@ (8001e80 <SRAM_operation+0x240>)
 8001e04:	6013      	str	r3, [r2, #0]
			size_counter = 0 ;
 8001e06:	4b1f      	ldr	r3, [pc, #124]	@ (8001e84 <SRAM_operation+0x244>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	801a      	strh	r2, [r3, #0]
			nand_update = 1;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <SRAM_operation+0x24c>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
			update_NAND_addr();
 8001e12:	f000 f889 	bl	8001f28 <update_NAND_addr>

		}

		old_sec = time_data[0];
 8001e16:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <SRAM_operation+0x204>)
 8001e1c:	701a      	strb	r2, [r3, #0]

	}

	if(time_set)
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <SRAM_operation+0x250>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <SRAM_operation+0x1f0>
	{
		time_set = 0 ;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <SRAM_operation+0x250>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
		time_setter();
 8001e2c:	f000 f88e 	bl	8001f4c <time_setter>

	}

}
 8001e30:	bf00      	nop
 8001e32:	4618      	mov	r0, r3
 8001e34:	375c      	adds	r7, #92	@ 0x5c
 8001e36:	46bd      	mov	sp, r7
 8001e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e3c:	20000010 	.word	0x20000010
 8001e40:	200049f8 	.word	0x200049f8
 8001e44:	200045f6 	.word	0x200045f6
 8001e48:	200044c8 	.word	0x200044c8
 8001e4c:	20000470 	.word	0x20000470
 8001e50:	20000474 	.word	0x20000474
 8001e54:	20000478 	.word	0x20000478
 8001e58:	2000047c 	.word	0x2000047c
 8001e5c:	20000480 	.word	0x20000480
 8001e60:	20000484 	.word	0x20000484
 8001e64:	20000488 	.word	0x20000488
 8001e68:	2000048c 	.word	0x2000048c
 8001e6c:	20000490 	.word	0x20000490
 8001e70:	20000494 	.word	0x20000494
 8001e74:	20000498 	.word	0x20000498
 8001e78:	2000049c 	.word	0x2000049c
 8001e7c:	08011028 	.word	0x08011028
 8001e80:	20000004 	.word	0x20000004
 8001e84:	200045f4 	.word	0x200045f4
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	200024c7 	.word	0x200024c7
 8001e90:	20004ab7 	.word	0x20004ab7

08001e94 <get_NAND_data>:


void get_NAND_data(uint8_t *sram_data)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	f843 0c04 	str.w	r0, [r3, #-4]
	uint8_t CLEAN_DATA[8192] = {0};
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00c ff3b 	bl	800ed32 <memset>
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <get_NAND_data+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ecc:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8001ed0:	480a      	ldr	r0, [pc, #40]	@ (8001efc <get_NAND_data+0x68>)
 8001ed2:	f009 fd95 	bl	800ba00 <HAL_SRAM_Read_8b>
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <get_NAND_data+0x64>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	f107 0208 	add.w	r2, r7, #8
 8001ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <get_NAND_data+0x68>)
 8001ee6:	f009 fdd4 	bl	800ba92 <HAL_SRAM_Write_8b>
	//HAL_UART_Transmit_IT(&huart8, sram_data, strlen(sram_data));
//	HAL_Delay(100);
}
 8001eea:	bf00      	nop
 8001eec:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	200049f8 	.word	0x200049f8

08001f00 <get_NAND_address>:

uint8_t get_NAND_address(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_base_addr,(uint8_t *)&nand_address, sizeof(nand_address));
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <get_NAND_address+0x1c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <get_NAND_address+0x20>)
 8001f0e:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <get_NAND_address+0x24>)
 8001f10:	f009 fd76 	bl	800ba00 <HAL_SRAM_Read_8b>

}
 8001f14:	bf00      	nop
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	200004bc 	.word	0x200004bc
 8001f24:	200049f8 	.word	0x200049f8

08001f28 <update_NAND_addr>:


void update_NAND_addr()
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr, (uint8_t * )&nand_address, sizeof(nand_address));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <update_NAND_addr+0x18>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	2306      	movs	r3, #6
 8001f34:	4a03      	ldr	r2, [pc, #12]	@ (8001f44 <update_NAND_addr+0x1c>)
 8001f36:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <update_NAND_addr+0x20>)
 8001f38:	f009 fdab 	bl	800ba92 <HAL_SRAM_Write_8b>


}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000000c 	.word	0x2000000c
 8001f44:	200004bc 	.word	0x200004bc
 8001f48:	200049f8 	.word	0x200049f8

08001f4c <time_setter>:



void time_setter( )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
	//	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	//	S D D - M M - Y Y Y  Y     H  H  :  M  M  :  S  S  E
	uint8_t day, month, year, hours, minutes, seconds;
	if (time_str[0] == 'S' && time_str[20] == 'E' && time_str[5] == '-' && time_str[8] == '-' && time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') // && time_str[11] == ' ' &&
 8001f52:	4b7b      	ldr	r3, [pc, #492]	@ (8002140 <time_setter+0x1f4>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b53      	cmp	r3, #83	@ 0x53
 8001f58:	f040 80ed 	bne.w	8002136 <time_setter+0x1ea>
 8001f5c:	4b78      	ldr	r3, [pc, #480]	@ (8002140 <time_setter+0x1f4>)
 8001f5e:	7d1b      	ldrb	r3, [r3, #20]
 8001f60:	2b45      	cmp	r3, #69	@ 0x45
 8001f62:	f040 80e8 	bne.w	8002136 <time_setter+0x1ea>
 8001f66:	4b76      	ldr	r3, [pc, #472]	@ (8002140 <time_setter+0x1f4>)
 8001f68:	795b      	ldrb	r3, [r3, #5]
 8001f6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f6c:	f040 80e3 	bne.w	8002136 <time_setter+0x1ea>
 8001f70:	4b73      	ldr	r3, [pc, #460]	@ (8002140 <time_setter+0x1f4>)
 8001f72:	7a1b      	ldrb	r3, [r3, #8]
 8001f74:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f76:	f040 80de 	bne.w	8002136 <time_setter+0x1ea>
 8001f7a:	4b71      	ldr	r3, [pc, #452]	@ (8002140 <time_setter+0x1f4>)
 8001f7c:	7adb      	ldrb	r3, [r3, #11]
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	f040 80d9 	bne.w	8002136 <time_setter+0x1ea>
 8001f84:	4b6e      	ldr	r3, [pc, #440]	@ (8002140 <time_setter+0x1f4>)
 8001f86:	7b9b      	ldrb	r3, [r3, #14]
 8001f88:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f8a:	f040 80d4 	bne.w	8002136 <time_setter+0x1ea>
 8001f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002140 <time_setter+0x1f4>)
 8001f90:	7c5b      	ldrb	r3, [r3, #17]
 8001f92:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f94:	f040 80cf 	bne.w	8002136 <time_setter+0x1ea>
	{
		month = (time_str[6] - 48) * 16 + (time_str[7] - 48);
 8001f98:	4b69      	ldr	r3, [pc, #420]	@ (8002140 <time_setter+0x1f4>)
 8001f9a:	799b      	ldrb	r3, [r3, #6]
 8001f9c:	3b30      	subs	r3, #48	@ 0x30
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <time_setter+0x1f4>)
 8001fa6:	79db      	ldrb	r3, [r3, #7]
 8001fa8:	4413      	add	r3, r2
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3b30      	subs	r3, #48	@ 0x30
 8001fae:	71fb      	strb	r3, [r7, #7]
		year = (time_str[3] - 48) * 16 + (time_str[4] - 48);
 8001fb0:	4b63      	ldr	r3, [pc, #396]	@ (8002140 <time_setter+0x1f4>)
 8001fb2:	78db      	ldrb	r3, [r3, #3]
 8001fb4:	3b30      	subs	r3, #48	@ 0x30
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b60      	ldr	r3, [pc, #384]	@ (8002140 <time_setter+0x1f4>)
 8001fbe:	791b      	ldrb	r3, [r3, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3b30      	subs	r3, #48	@ 0x30
 8001fc6:	71bb      	strb	r3, [r7, #6]
		day = (time_str[9] - 48) * 16 + (time_str[10] - 48);
 8001fc8:	4b5d      	ldr	r3, [pc, #372]	@ (8002140 <time_setter+0x1f4>)
 8001fca:	7a5b      	ldrb	r3, [r3, #9]
 8001fcc:	3b30      	subs	r3, #48	@ 0x30
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <time_setter+0x1f4>)
 8001fd6:	7a9b      	ldrb	r3, [r3, #10]
 8001fd8:	4413      	add	r3, r2
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3b30      	subs	r3, #48	@ 0x30
 8001fde:	717b      	strb	r3, [r7, #5]
		minutes = (time_str[15] - 48) * 16 + (time_str[16] - 48);
 8001fe0:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <time_setter+0x1f4>)
 8001fe2:	7bdb      	ldrb	r3, [r3, #15]
 8001fe4:	3b30      	subs	r3, #48	@ 0x30
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b54      	ldr	r3, [pc, #336]	@ (8002140 <time_setter+0x1f4>)
 8001fee:	7c1b      	ldrb	r3, [r3, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3b30      	subs	r3, #48	@ 0x30
 8001ff6:	713b      	strb	r3, [r7, #4]
		hours = (time_str[12] - 48) * 16 + (time_str[13] - 48);
 8001ff8:	4b51      	ldr	r3, [pc, #324]	@ (8002140 <time_setter+0x1f4>)
 8001ffa:	7b1b      	ldrb	r3, [r3, #12]
 8001ffc:	3b30      	subs	r3, #48	@ 0x30
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <time_setter+0x1f4>)
 8002006:	7b5b      	ldrb	r3, [r3, #13]
 8002008:	4413      	add	r3, r2
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3b30      	subs	r3, #48	@ 0x30
 800200e:	70fb      	strb	r3, [r7, #3]
		seconds = (time_str[18] - 48) * 16 + (time_str[19] - 48);
 8002010:	4b4b      	ldr	r3, [pc, #300]	@ (8002140 <time_setter+0x1f4>)
 8002012:	7c9b      	ldrb	r3, [r3, #18]
 8002014:	3b30      	subs	r3, #48	@ 0x30
 8002016:	b2db      	uxtb	r3, r3
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b48      	ldr	r3, [pc, #288]	@ (8002140 <time_setter+0x1f4>)
 800201e:	7cdb      	ldrb	r3, [r3, #19]
 8002020:	4413      	add	r3, r2
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3b30      	subs	r3, #48	@ 0x30
 8002026:	70bb      	strb	r3, [r7, #2]


		sramAddr = 0x60000000 | 0x7FFF8;
 8002028:	4b46      	ldr	r3, [pc, #280]	@ (8002144 <time_setter+0x1f8>)
 800202a:	4a47      	ldr	r2, [pc, #284]	@ (8002148 <time_setter+0x1fc>)
 800202c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x80;
 800202e:	4b47      	ldr	r3, [pc, #284]	@ (800214c <time_setter+0x200>)
 8002030:	2280      	movs	r2, #128	@ 0x80
 8002032:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002034:	4b43      	ldr	r3, [pc, #268]	@ (8002144 <time_setter+0x1f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	4b45      	ldr	r3, [pc, #276]	@ (8002150 <time_setter+0x204>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a43      	ldr	r2, [pc, #268]	@ (800214c <time_setter+0x200>)
 8002040:	4844      	ldr	r0, [pc, #272]	@ (8002154 <time_setter+0x208>)
 8002042:	f009 fd26 	bl	800ba92 <HAL_SRAM_Write_8b>


		sramAddr = 0x60000000 | 0x7FFF9;
 8002046:	4b3f      	ldr	r3, [pc, #252]	@ (8002144 <time_setter+0x1f8>)
 8002048:	4a43      	ldr	r2, [pc, #268]	@ (8002158 <time_setter+0x20c>)
 800204a:	601a      	str	r2, [r3, #0]
		pSrcBuffer = seconds;
 800204c:	4a3f      	ldr	r2, [pc, #252]	@ (800214c <time_setter+0x200>)
 800204e:	78bb      	ldrb	r3, [r7, #2]
 8002050:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002052:	4b3c      	ldr	r3, [pc, #240]	@ (8002144 <time_setter+0x1f8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	4b3d      	ldr	r3, [pc, #244]	@ (8002150 <time_setter+0x204>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a3b      	ldr	r2, [pc, #236]	@ (800214c <time_setter+0x200>)
 800205e:	483d      	ldr	r0, [pc, #244]	@ (8002154 <time_setter+0x208>)
 8002060:	f009 fd17 	bl	800ba92 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFa;
 8002064:	4b37      	ldr	r3, [pc, #220]	@ (8002144 <time_setter+0x1f8>)
 8002066:	4a3d      	ldr	r2, [pc, #244]	@ (800215c <time_setter+0x210>)
 8002068:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  minutes;
 800206a:	4a38      	ldr	r2, [pc, #224]	@ (800214c <time_setter+0x200>)
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002070:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <time_setter+0x1f8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <time_setter+0x204>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a34      	ldr	r2, [pc, #208]	@ (800214c <time_setter+0x200>)
 800207c:	4835      	ldr	r0, [pc, #212]	@ (8002154 <time_setter+0x208>)
 800207e:	f009 fd08 	bl	800ba92 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFb;
 8002082:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <time_setter+0x1f8>)
 8002084:	4a36      	ldr	r2, [pc, #216]	@ (8002160 <time_setter+0x214>)
 8002086:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  hours;
 8002088:	4a30      	ldr	r2, [pc, #192]	@ (800214c <time_setter+0x200>)
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 800208e:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <time_setter+0x1f8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4619      	mov	r1, r3
 8002094:	4b2e      	ldr	r3, [pc, #184]	@ (8002150 <time_setter+0x204>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2c      	ldr	r2, [pc, #176]	@ (800214c <time_setter+0x200>)
 800209a:	482e      	ldr	r0, [pc, #184]	@ (8002154 <time_setter+0x208>)
 800209c:	f009 fcf9 	bl	800ba92 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFc;
 80020a0:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <time_setter+0x1f8>)
 80020a2:	4a30      	ldr	r2, [pc, #192]	@ (8002164 <time_setter+0x218>)
 80020a4:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x02;
 80020a6:	4b29      	ldr	r3, [pc, #164]	@ (800214c <time_setter+0x200>)
 80020a8:	2202      	movs	r2, #2
 80020aa:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <time_setter+0x1f8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <time_setter+0x204>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a25      	ldr	r2, [pc, #148]	@ (800214c <time_setter+0x200>)
 80020b8:	4826      	ldr	r0, [pc, #152]	@ (8002154 <time_setter+0x208>)
 80020ba:	f009 fcea 	bl	800ba92 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFd;
 80020be:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <time_setter+0x1f8>)
 80020c0:	4a29      	ldr	r2, [pc, #164]	@ (8002168 <time_setter+0x21c>)
 80020c2:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  day;
 80020c4:	4a21      	ldr	r2, [pc, #132]	@ (800214c <time_setter+0x200>)
 80020c6:	797b      	ldrb	r3, [r7, #5]
 80020c8:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <time_setter+0x1f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <time_setter+0x204>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <time_setter+0x200>)
 80020d6:	481f      	ldr	r0, [pc, #124]	@ (8002154 <time_setter+0x208>)
 80020d8:	f009 fcdb 	bl	800ba92 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFe;
 80020dc:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <time_setter+0x1f8>)
 80020de:	4a23      	ldr	r2, [pc, #140]	@ (800216c <time_setter+0x220>)
 80020e0:	601a      	str	r2, [r3, #0]
		pSrcBuffer =   month;
 80020e2:	4a1a      	ldr	r2, [pc, #104]	@ (800214c <time_setter+0x200>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 80020e8:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <time_setter+0x1f8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <time_setter+0x204>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a16      	ldr	r2, [pc, #88]	@ (800214c <time_setter+0x200>)
 80020f4:	4817      	ldr	r0, [pc, #92]	@ (8002154 <time_setter+0x208>)
 80020f6:	f009 fccc 	bl	800ba92 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFf;
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <time_setter+0x1f8>)
 80020fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002170 <time_setter+0x224>)
 80020fe:	601a      	str	r2, [r3, #0]
		pSrcBuffer =  year ;
 8002100:	4a12      	ldr	r2, [pc, #72]	@ (800214c <time_setter+0x200>)
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <time_setter+0x1f8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <time_setter+0x204>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <time_setter+0x200>)
 8002112:	4810      	ldr	r0, [pc, #64]	@ (8002154 <time_setter+0x208>)
 8002114:	f009 fcbd 	bl	800ba92 <HAL_SRAM_Write_8b>


	    sramAddr = 0x60000000 | 0x7FFF8;
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <time_setter+0x1f8>)
 800211a:	4a0b      	ldr	r2, [pc, #44]	@ (8002148 <time_setter+0x1fc>)
 800211c:	601a      	str	r2, [r3, #0]
	    pSrcBuffer = 0x00;
 800211e:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <time_setter+0x200>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
	    HAL_SRAM_Write_8b(&hsram1,sramAddr,&pSrcBuffer,BufferSize);
 8002124:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <time_setter+0x1f8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <time_setter+0x204>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a07      	ldr	r2, [pc, #28]	@ (800214c <time_setter+0x200>)
 8002130:	4808      	ldr	r0, [pc, #32]	@ (8002154 <time_setter+0x208>)
 8002132:	f009 fcae 	bl	800ba92 <HAL_SRAM_Write_8b>

	}

}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20004a94 	.word	0x20004a94
 8002144:	20004a90 	.word	0x20004a90
 8002148:	6007fff8 	.word	0x6007fff8
 800214c:	20000014 	.word	0x20000014
 8002150:	20000018 	.word	0x20000018
 8002154:	200049f8 	.word	0x200049f8
 8002158:	6007fff9 	.word	0x6007fff9
 800215c:	6007fffa 	.word	0x6007fffa
 8002160:	6007fffb 	.word	0x6007fffb
 8002164:	6007fffc 	.word	0x6007fffc
 8002168:	6007fffd 	.word	0x6007fffd
 800216c:	6007fffe 	.word	0x6007fffe
 8002170:	6007ffff 	.word	0x6007ffff

08002174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800217a:	f001 fcc7 	bl	8003b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217e:	f000 f897 	bl	80022b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002182:	f000 fc05 	bl	8002990 <MX_GPIO_Init>
  MX_FMC_Init();
 8002186:	f000 fb37 	bl	80027f8 <MX_FMC_Init>
  MX_SPI2_Init();
 800218a:	f000 f901 	bl	8002390 <MX_SPI2_Init>
  MX_SPI3_Init();
 800218e:	f000 f955 	bl	800243c <MX_SPI3_Init>
  MX_SPI5_Init();
 8002192:	f000 f9a9 	bl	80024e8 <MX_SPI5_Init>
  MX_UART4_Init();
 8002196:	f000 f9fd 	bl	8002594 <MX_UART4_Init>
  MX_UART5_Init();
 800219a:	f000 fa47 	bl	800262c <MX_UART5_Init>
  MX_UART8_Init();
 800219e:	f000 fa91 	bl	80026c4 <MX_UART8_Init>
  MX_USART10_UART_Init();
 80021a2:	f000 fadd 	bl	8002760 <MX_USART10_UART_Init>
  /* USER CODE BEGIN 2 */
	UART_InitAllHandlers();
 80021a6:	f000 fda3 	bl	8002cf0 <UART_InitAllHandlers>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sramAddr = 0x60000000 | 0x7FFF8;
 80021aa:	4b38      	ldr	r3, [pc, #224]	@ (800228c <main+0x118>)
 80021ac:	4a38      	ldr	r2, [pc, #224]	@ (8002290 <main+0x11c>)
 80021ae:	601a      	str	r2, [r3, #0]
	pSrcBuffer = 0x00;
 80021b0:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <main+0x120>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
	HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 80021b6:	4b35      	ldr	r3, [pc, #212]	@ (800228c <main+0x118>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4619      	mov	r1, r3
 80021bc:	2301      	movs	r3, #1
 80021be:	4a35      	ldr	r2, [pc, #212]	@ (8002294 <main+0x120>)
 80021c0:	4835      	ldr	r0, [pc, #212]	@ (8002298 <main+0x124>)
 80021c2:	f009 fc66 	bl	800ba92 <HAL_SRAM_Write_8b>
	HAL_NAND_Reset(&hnand1);
 80021c6:	4835      	ldr	r0, [pc, #212]	@ (800229c <main+0x128>)
 80021c8:	f002 fa36 	bl	8004638 <HAL_NAND_Reset>

	HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 80021cc:	2201      	movs	r2, #1
 80021ce:	2104      	movs	r1, #4
 80021d0:	4833      	ldr	r0, [pc, #204]	@ (80022a0 <main+0x12c>)
 80021d2:	f002 f905 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f001 fd56 	bl	8003c88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2104      	movs	r1, #4
 80021e0:	482f      	ldr	r0, [pc, #188]	@ (80022a0 <main+0x12c>)
 80021e2:	f002 f8fd 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f001 fd4e 	bl	8003c88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 80021ec:	2201      	movs	r2, #1
 80021ee:	2104      	movs	r1, #4
 80021f0:	482b      	ldr	r0, [pc, #172]	@ (80022a0 <main+0x12c>)
 80021f2:	f002 f8f5 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f001 fd46 	bl	8003c88 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 80021fc:	2201      	movs	r2, #1
 80021fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002202:	4828      	ldr	r0, [pc, #160]	@ (80022a4 <main+0x130>)
 8002204:	f002 f8ec 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002208:	2001      	movs	r0, #1
 800220a:	f001 fd3d 	bl	8003c88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002214:	4823      	ldr	r0, [pc, #140]	@ (80022a4 <main+0x130>)
 8002216:	f002 f8e3 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800221a:	2001      	movs	r0, #1
 800221c:	f001 fd34 	bl	8003c88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 8002220:	2201      	movs	r2, #1
 8002222:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002226:	481f      	ldr	r0, [pc, #124]	@ (80022a4 <main+0x130>)
 8002228:	f002 f8da 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800222c:	2001      	movs	r0, #1
 800222e:	f001 fd2b 	bl	8003c88 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 8002232:	2201      	movs	r2, #1
 8002234:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002238:	481b      	ldr	r0, [pc, #108]	@ (80022a8 <main+0x134>)
 800223a:	f002 f8d1 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800223e:	2001      	movs	r0, #1
 8002240:	f001 fd22 	bl	8003c88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800224a:	4817      	ldr	r0, [pc, #92]	@ (80022a8 <main+0x134>)
 800224c:	f002 f8c8 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002250:	2001      	movs	r0, #1
 8002252:	f001 fd19 	bl	8003c88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 8002256:	2201      	movs	r2, #1
 8002258:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800225c:	4812      	ldr	r0, [pc, #72]	@ (80022a8 <main+0x134>)
 800225e:	f002 f8bf 	bl	80043e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002262:	200a      	movs	r0, #10
 8002264:	f001 fd10 	bl	8003c88 <HAL_Delay>
	get_NAND_address();
 8002268:	f7ff fe4a 	bl	8001f00 <get_NAND_address>
	//	HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
	char buffe33r[] = "HELLO";
 800226c:	4a0f      	ldr	r2, [pc, #60]	@ (80022ac <main+0x138>)
 800226e:	463b      	mov	r3, r7
 8002270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002274:	6018      	str	r0, [r3, #0]
 8002276:	3304      	adds	r3, #4
 8002278:	8019      	strh	r1, [r3, #0]
	while (1)
	{
		ADC_operation();
 800227a:	f7fe fe81 	bl	8000f80 <ADC_operation>
		NAND_operation();
 800227e:	f7ff fc51 	bl	8001b24 <NAND_operation>
		SRAM_operation();
 8002282:	f7ff fcdd 	bl	8001c40 <SRAM_operation>
	{
 8002286:	bf00      	nop
 8002288:	e7f7      	b.n	800227a <main+0x106>
 800228a:	bf00      	nop
 800228c:	20004a90 	.word	0x20004a90
 8002290:	6007fff8 	.word	0x6007fff8
 8002294:	20000014 	.word	0x20000014
 8002298:	200049f8 	.word	0x200049f8
 800229c:	20004a50 	.word	0x20004a50
 80022a0:	42020800 	.word	0x42020800
 80022a4:	42021800 	.word	0x42021800
 80022a8:	42020000 	.word	0x42020000
 80022ac:	0801110c 	.word	0x0801110c

080022b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b09c      	sub	sp, #112	@ 0x70
 80022b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b6:	f107 0320 	add.w	r3, r7, #32
 80022ba:	2250      	movs	r2, #80	@ 0x50
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f00c fd37 	bl	800ed32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
 80022d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80022d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002388 <SystemClock_Config+0xd8>)
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	4a2b      	ldr	r2, [pc, #172]	@ (8002388 <SystemClock_Config+0xd8>)
 80022dc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80022e0:	6113      	str	r3, [r2, #16]
 80022e2:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <SystemClock_Config+0xd8>)
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80022ee:	bf00      	nop
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <SystemClock_Config+0xd8>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d1f9      	bne.n	80022f0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002300:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002306:	2302      	movs	r3, #2
 8002308:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800230a:	2303      	movs	r3, #3
 800230c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800230e:	2304      	movs	r3, #4
 8002310:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002312:	2350      	movs	r3, #80	@ 0x50
 8002314:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002316:	2302      	movs	r3, #2
 8002318:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800231a:	2302      	movs	r3, #2
 800231c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800231e:	2302      	movs	r3, #2
 8002320:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8002322:	2308      	movs	r3, #8
 8002324:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002326:	2300      	movs	r3, #0
 8002328:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232e:	f107 0320 	add.w	r3, r7, #32
 8002332:	4618      	mov	r0, r3
 8002334:	f002 fd2e 	bl	8004d94 <HAL_RCC_OscConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800233e:	f000 fdf0 	bl	8002f22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002342:	231f      	movs	r3, #31
 8002344:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002346:	2303      	movs	r3, #3
 8002348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2105      	movs	r1, #5
 8002360:	4618      	mov	r0, r3
 8002362:	f003 f94f 	bl	8005604 <HAL_RCC_ClockConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800236c:	f000 fdd9 	bl	8002f22 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <SystemClock_Config+0xdc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002378:	4a04      	ldr	r2, [pc, #16]	@ (800238c <SystemClock_Config+0xdc>)
 800237a:	f043 0320 	orr.w	r3, r3, #32
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	3770      	adds	r7, #112	@ 0x70
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	44020800 	.word	0x44020800
 800238c:	40022000 	.word	0x40022000

08002390 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002394:	4b27      	ldr	r3, [pc, #156]	@ (8002434 <MX_SPI2_Init+0xa4>)
 8002396:	4a28      	ldr	r2, [pc, #160]	@ (8002438 <MX_SPI2_Init+0xa8>)
 8002398:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800239a:	4b26      	ldr	r3, [pc, #152]	@ (8002434 <MX_SPI2_Init+0xa4>)
 800239c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023a2:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023a8:	4b22      	ldr	r3, [pc, #136]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023aa:	2207      	movs	r2, #7
 80023ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ae:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023cc:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d2:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d8:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023e4:	4b13      	ldr	r3, [pc, #76]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023ea:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023f0:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <MX_SPI2_Init+0xa4>)
 80023fe:	2200      	movs	r2, #0
 8002400:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002402:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <MX_SPI2_Init+0xa4>)
 8002404:	2200      	movs	r2, #0
 8002406:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <MX_SPI2_Init+0xa4>)
 800240a:	2200      	movs	r2, #0
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <MX_SPI2_Init+0xa4>)
 8002410:	2200      	movs	r2, #0
 8002412:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002414:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <MX_SPI2_Init+0xa4>)
 8002416:	2200      	movs	r2, #0
 8002418:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <MX_SPI2_Init+0xa4>)
 800241c:	2200      	movs	r2, #0
 800241e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002420:	4804      	ldr	r0, [pc, #16]	@ (8002434 <MX_SPI2_Init+0xa4>)
 8002422:	f008 fc83 	bl	800ad2c <HAL_SPI_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800242c:	f000 fd79 	bl	8002f22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200045f8 	.word	0x200045f8
 8002438:	40003800 	.word	0x40003800

0800243c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002440:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002442:	4a28      	ldr	r2, [pc, #160]	@ (80024e4 <MX_SPI3_Init+0xa8>)
 8002444:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002446:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002448:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800244c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800244e:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002454:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002456:	2207      	movs	r2, #7
 8002458:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245a:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002460:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002462:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002466:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 800246a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800246e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002470:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002472:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002476:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002478:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800247e:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002480:	2200      	movs	r2, #0
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002484:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002486:	2200      	movs	r2, #0
 8002488:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 800248c:	2207      	movs	r2, #7
 800248e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002492:	2200      	movs	r2, #0
 8002494:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002496:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 8002498:	2200      	movs	r2, #0
 800249a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024a2:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024a8:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024b4:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024cc:	4804      	ldr	r0, [pc, #16]	@ (80024e0 <MX_SPI3_Init+0xa4>)
 80024ce:	f008 fc2d 	bl	800ad2c <HAL_SPI_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80024d8:	f000 fd23 	bl	8002f22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20004688 	.word	0x20004688
 80024e4:	40003c00 	.word	0x40003c00

080024e8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80024ec:	4b27      	ldr	r3, [pc, #156]	@ (800258c <MX_SPI5_Init+0xa4>)
 80024ee:	4a28      	ldr	r2, [pc, #160]	@ (8002590 <MX_SPI5_Init+0xa8>)
 80024f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80024f2:	4b26      	ldr	r3, [pc, #152]	@ (800258c <MX_SPI5_Init+0xa4>)
 80024f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80024f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80024fa:	4b24      	ldr	r3, [pc, #144]	@ (800258c <MX_SPI5_Init+0xa4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002500:	4b22      	ldr	r3, [pc, #136]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002502:	2207      	movs	r2, #7
 8002504:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002506:	4b21      	ldr	r3, [pc, #132]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 800250c:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <MX_SPI5_Init+0xa4>)
 800250e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002512:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002514:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002516:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800251a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <MX_SPI5_Init+0xa4>)
 800251e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002522:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800252a:	4b18      	ldr	r3, [pc, #96]	@ (800258c <MX_SPI5_Init+0xa4>)
 800252c:	2200      	movs	r2, #0
 800252e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002530:	4b16      	ldr	r3, [pc, #88]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002532:	2200      	movs	r2, #0
 8002534:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x7;
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002538:	2207      	movs	r2, #7
 800253a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800253c:	4b13      	ldr	r3, [pc, #76]	@ (800258c <MX_SPI5_Init+0xa4>)
 800253e:	2200      	movs	r2, #0
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002544:	2200      	movs	r2, #0
 8002546:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002548:	4b10      	ldr	r3, [pc, #64]	@ (800258c <MX_SPI5_Init+0xa4>)
 800254a:	2200      	movs	r2, #0
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002550:	2200      	movs	r2, #0
 8002552:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002554:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002556:	2200      	movs	r2, #0
 8002558:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800255a:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <MX_SPI5_Init+0xa4>)
 800255c:	2200      	movs	r2, #0
 800255e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002560:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002562:	2200      	movs	r2, #0
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002568:	2200      	movs	r2, #0
 800256a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi5.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800256c:	4b07      	ldr	r3, [pc, #28]	@ (800258c <MX_SPI5_Init+0xa4>)
 800256e:	2200      	movs	r2, #0
 8002570:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi5.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <MX_SPI5_Init+0xa4>)
 8002574:	2200      	movs	r2, #0
 8002576:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002578:	4804      	ldr	r0, [pc, #16]	@ (800258c <MX_SPI5_Init+0xa4>)
 800257a:	f008 fbd7 	bl	800ad2c <HAL_SPI_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8002584:	f000 fccd 	bl	8002f22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20004718 	.word	0x20004718
 8002590:	44002000 	.word	0x44002000

08002594 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002598:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <MX_UART4_Init+0x90>)
 800259a:	4a23      	ldr	r2, [pc, #140]	@ (8002628 <MX_UART4_Init+0x94>)
 800259c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800259e:	4b21      	ldr	r3, [pc, #132]	@ (8002624 <MX_UART4_Init+0x90>)
 80025a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <MX_UART4_Init+0x90>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <MX_UART4_Init+0x90>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <MX_UART4_Init+0x90>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <MX_UART4_Init+0x90>)
 80025ba:	220c      	movs	r2, #12
 80025bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025be:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <MX_UART4_Init+0x90>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c4:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <MX_UART4_Init+0x90>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ca:	4b16      	ldr	r3, [pc, #88]	@ (8002624 <MX_UART4_Init+0x90>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025d0:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <MX_UART4_Init+0x90>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d6:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <MX_UART4_Init+0x90>)
 80025d8:	2200      	movs	r2, #0
 80025da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025dc:	4811      	ldr	r0, [pc, #68]	@ (8002624 <MX_UART4_Init+0x90>)
 80025de:	f009 fa9c 	bl	800bb1a <HAL_UART_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80025e8:	f000 fc9b 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ec:	2100      	movs	r1, #0
 80025ee:	480d      	ldr	r0, [pc, #52]	@ (8002624 <MX_UART4_Init+0x90>)
 80025f0:	f00b fb9b 	bl	800dd2a <HAL_UARTEx_SetTxFifoThreshold>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80025fa:	f000 fc92 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025fe:	2100      	movs	r1, #0
 8002600:	4808      	ldr	r0, [pc, #32]	@ (8002624 <MX_UART4_Init+0x90>)
 8002602:	f00b fbd0 	bl	800dda6 <HAL_UARTEx_SetRxFifoThreshold>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800260c:	f000 fc89 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002610:	4804      	ldr	r0, [pc, #16]	@ (8002624 <MX_UART4_Init+0x90>)
 8002612:	f00b fb51 	bl	800dcb8 <HAL_UARTEx_DisableFifoMode>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800261c:	f000 fc81 	bl	8002f22 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200047a8 	.word	0x200047a8
 8002628:	40004c00 	.word	0x40004c00

0800262c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002630:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <MX_UART5_Init+0x90>)
 8002632:	4a23      	ldr	r2, [pc, #140]	@ (80026c0 <MX_UART5_Init+0x94>)
 8002634:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002636:	4b21      	ldr	r3, [pc, #132]	@ (80026bc <MX_UART5_Init+0x90>)
 8002638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800263c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800263e:	4b1f      	ldr	r3, [pc, #124]	@ (80026bc <MX_UART5_Init+0x90>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002644:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <MX_UART5_Init+0x90>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800264a:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <MX_UART5_Init+0x90>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002650:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <MX_UART5_Init+0x90>)
 8002652:	220c      	movs	r2, #12
 8002654:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002656:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <MX_UART5_Init+0x90>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800265c:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <MX_UART5_Init+0x90>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002662:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <MX_UART5_Init+0x90>)
 8002664:	2200      	movs	r2, #0
 8002666:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002668:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <MX_UART5_Init+0x90>)
 800266a:	2200      	movs	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800266e:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <MX_UART5_Init+0x90>)
 8002670:	2200      	movs	r2, #0
 8002672:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002674:	4811      	ldr	r0, [pc, #68]	@ (80026bc <MX_UART5_Init+0x90>)
 8002676:	f009 fa50 	bl	800bb1a <HAL_UART_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002680:	f000 fc4f 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002684:	2100      	movs	r1, #0
 8002686:	480d      	ldr	r0, [pc, #52]	@ (80026bc <MX_UART5_Init+0x90>)
 8002688:	f00b fb4f 	bl	800dd2a <HAL_UARTEx_SetTxFifoThreshold>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002692:	f000 fc46 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002696:	2100      	movs	r1, #0
 8002698:	4808      	ldr	r0, [pc, #32]	@ (80026bc <MX_UART5_Init+0x90>)
 800269a:	f00b fb84 	bl	800dda6 <HAL_UARTEx_SetRxFifoThreshold>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80026a4:	f000 fc3d 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80026a8:	4804      	ldr	r0, [pc, #16]	@ (80026bc <MX_UART5_Init+0x90>)
 80026aa:	f00b fb05 	bl	800dcb8 <HAL_UARTEx_DisableFifoMode>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80026b4:	f000 fc35 	bl	8002f22 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	2000483c 	.word	0x2000483c
 80026c0:	40005000 	.word	0x40005000

080026c4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80026c8:	4b23      	ldr	r3, [pc, #140]	@ (8002758 <MX_UART8_Init+0x94>)
 80026ca:	4a24      	ldr	r2, [pc, #144]	@ (800275c <MX_UART8_Init+0x98>)
 80026cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <MX_UART8_Init+0x94>)
 80026d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80026d6:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <MX_UART8_Init+0x94>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80026dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002758 <MX_UART8_Init+0x94>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80026e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <MX_UART8_Init+0x94>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <MX_UART8_Init+0x94>)
 80026ea:	220c      	movs	r2, #12
 80026ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <MX_UART8_Init+0x94>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f4:	4b18      	ldr	r3, [pc, #96]	@ (8002758 <MX_UART8_Init+0x94>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026fa:	4b17      	ldr	r3, [pc, #92]	@ (8002758 <MX_UART8_Init+0x94>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002700:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <MX_UART8_Init+0x94>)
 8002702:	2200      	movs	r2, #0
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002706:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <MX_UART8_Init+0x94>)
 8002708:	2200      	movs	r2, #0
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800270c:	4812      	ldr	r0, [pc, #72]	@ (8002758 <MX_UART8_Init+0x94>)
 800270e:	f009 fa04 	bl	800bb1a <HAL_UART_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002718:	f000 fc03 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800271c:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 8002720:	480d      	ldr	r0, [pc, #52]	@ (8002758 <MX_UART8_Init+0x94>)
 8002722:	f00b fb02 	bl	800dd2a <HAL_UARTEx_SetTxFifoThreshold>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 800272c:	f000 fbf9 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002730:	2100      	movs	r1, #0
 8002732:	4809      	ldr	r0, [pc, #36]	@ (8002758 <MX_UART8_Init+0x94>)
 8002734:	f00b fb37 	bl	800dda6 <HAL_UARTEx_SetRxFifoThreshold>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 800273e:	f000 fbf0 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	@ (8002758 <MX_UART8_Init+0x94>)
 8002744:	f00b fab8 	bl	800dcb8 <HAL_UARTEx_DisableFifoMode>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 800274e:	f000 fbe8 	bl	8002f22 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200048d0 	.word	0x200048d0
 800275c:	40007c00 	.word	0x40007c00

08002760 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 8002766:	4a23      	ldr	r2, [pc, #140]	@ (80027f4 <MX_USART10_UART_Init+0x94>)
 8002768:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800276a:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 800276c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002770:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b1f      	ldr	r3, [pc, #124]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800277e:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002796:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 800279e:	2200      	movs	r2, #0
 80027a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80027a8:	4811      	ldr	r0, [pc, #68]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 80027aa:	f009 f9b6 	bl	800bb1a <HAL_UART_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 80027b4:	f000 fbb5 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b8:	2100      	movs	r1, #0
 80027ba:	480d      	ldr	r0, [pc, #52]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 80027bc:	f00b fab5 	bl	800dd2a <HAL_UARTEx_SetTxFifoThreshold>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 80027c6:	f000 fbac 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ca:	2100      	movs	r1, #0
 80027cc:	4808      	ldr	r0, [pc, #32]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 80027ce:	f00b faea 	bl	800dda6 <HAL_UARTEx_SetRxFifoThreshold>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80027d8:	f000 fba3 	bl	8002f22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80027dc:	4804      	ldr	r0, [pc, #16]	@ (80027f0 <MX_USART10_UART_Init+0x90>)
 80027de:	f00b fa6b 	bl	800dcb8 <HAL_UARTEx_DisableFifoMode>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80027e8:	f000 fb9b 	bl	8002f22 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20004964 	.word	0x20004964
 80027f4:	40006800 	.word	0x40006800

080027f8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b090      	sub	sp, #64	@ 0x40
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80027fe:	f107 0320 	add.w	r3, r7, #32
 8002802:	2220      	movs	r2, #32
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f00c fa93 	bl	800ed32 <memset>
  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800281a:	463b      	mov	r3, r7
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002826:	4b55      	ldr	r3, [pc, #340]	@ (800297c <MX_FMC_Init+0x184>)
 8002828:	4a55      	ldr	r2, [pc, #340]	@ (8002980 <MX_FMC_Init+0x188>)
 800282a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800282c:	4b53      	ldr	r3, [pc, #332]	@ (800297c <MX_FMC_Init+0x184>)
 800282e:	4a55      	ldr	r2, [pc, #340]	@ (8002984 <MX_FMC_Init+0x18c>)
 8002830:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002832:	4b52      	ldr	r3, [pc, #328]	@ (800297c <MX_FMC_Init+0x184>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002838:	4b50      	ldr	r3, [pc, #320]	@ (800297c <MX_FMC_Init+0x184>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800283e:	4b4f      	ldr	r3, [pc, #316]	@ (800297c <MX_FMC_Init+0x184>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8002844:	4b4d      	ldr	r3, [pc, #308]	@ (800297c <MX_FMC_Init+0x184>)
 8002846:	2200      	movs	r2, #0
 8002848:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800284a:	4b4c      	ldr	r3, [pc, #304]	@ (800297c <MX_FMC_Init+0x184>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002850:	4b4a      	ldr	r3, [pc, #296]	@ (800297c <MX_FMC_Init+0x184>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002856:	4b49      	ldr	r3, [pc, #292]	@ (800297c <MX_FMC_Init+0x184>)
 8002858:	2200      	movs	r2, #0
 800285a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800285c:	4b47      	ldr	r3, [pc, #284]	@ (800297c <MX_FMC_Init+0x184>)
 800285e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002864:	4b45      	ldr	r3, [pc, #276]	@ (800297c <MX_FMC_Init+0x184>)
 8002866:	2200      	movs	r2, #0
 8002868:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800286a:	4b44      	ldr	r3, [pc, #272]	@ (800297c <MX_FMC_Init+0x184>)
 800286c:	2200      	movs	r2, #0
 800286e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002870:	4b42      	ldr	r3, [pc, #264]	@ (800297c <MX_FMC_Init+0x184>)
 8002872:	2200      	movs	r2, #0
 8002874:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002876:	4b41      	ldr	r3, [pc, #260]	@ (800297c <MX_FMC_Init+0x184>)
 8002878:	2200      	movs	r2, #0
 800287a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800287c:	4b3f      	ldr	r3, [pc, #252]	@ (800297c <MX_FMC_Init+0x184>)
 800287e:	2200      	movs	r2, #0
 8002880:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8002882:	4b3e      	ldr	r3, [pc, #248]	@ (800297c <MX_FMC_Init+0x184>)
 8002884:	2200      	movs	r2, #0
 8002886:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8002888:	4b3c      	ldr	r3, [pc, #240]	@ (800297c <MX_FMC_Init+0x184>)
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800288e:	4b3b      	ldr	r3, [pc, #236]	@ (800297c <MX_FMC_Init+0x184>)
 8002890:	2200      	movs	r2, #0
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8002894:	4b39      	ldr	r3, [pc, #228]	@ (800297c <MX_FMC_Init+0x184>)
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 800289c:	230f      	movs	r3, #15
 800289e:	623b      	str	r3, [r7, #32]
  Timing.AddressHoldTime = 15;
 80028a0:	230f      	movs	r3, #15
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.DataSetupTime = 255;
 80028a4:	23ff      	movs	r3, #255	@ 0xff
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.DataHoldTime = 3;
 80028a8:	2303      	movs	r3, #3
 80028aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.BusTurnAroundDuration = 15;
 80028ac:	230f      	movs	r3, #15
 80028ae:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.CLKDivision = 16;
 80028b0:	2310      	movs	r3, #16
 80028b2:	637b      	str	r3, [r7, #52]	@ 0x34
  Timing.DataLatency = 17;
 80028b4:	2311      	movs	r3, #17
 80028b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80028b8:	2300      	movs	r3, #0
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80028bc:	f107 0320 	add.w	r3, r7, #32
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	482d      	ldr	r0, [pc, #180]	@ (800297c <MX_FMC_Init+0x184>)
 80028c6:	f009 f84b 	bl	800b960 <HAL_SRAM_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_FMC_Init+0xdc>
  {
    Error_Handler( );
 80028d0:	f000 fb27 	bl	8002f22 <Error_Handler>
  }

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80028d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002988 <MX_FMC_Init+0x190>)
 80028d6:	4a2d      	ldr	r2, [pc, #180]	@ (800298c <MX_FMC_Init+0x194>)
 80028d8:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80028da:	4b2b      	ldr	r3, [pc, #172]	@ (8002988 <MX_FMC_Init+0x190>)
 80028dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028e0:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80028e2:	4b29      	ldr	r3, [pc, #164]	@ (8002988 <MX_FMC_Init+0x190>)
 80028e4:	2202      	movs	r2, #2
 80028e6:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80028e8:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <MX_FMC_Init+0x190>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 80028ee:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <MX_FMC_Init+0x190>)
 80028f0:	2240      	movs	r2, #64	@ 0x40
 80028f2:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_8192BYTE;
 80028f4:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <MX_FMC_Init+0x190>)
 80028f6:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80028fa:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 15;
 80028fc:	4b22      	ldr	r3, [pc, #136]	@ (8002988 <MX_FMC_Init+0x190>)
 80028fe:	220f      	movs	r2, #15
 8002900:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 15;
 8002902:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <MX_FMC_Init+0x190>)
 8002904:	220f      	movs	r2, #15
 8002906:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 8192;
 8002908:	4b1f      	ldr	r3, [pc, #124]	@ (8002988 <MX_FMC_Init+0x190>)
 800290a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 448;
 8002910:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <MX_FMC_Init+0x190>)
 8002912:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 128;
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <MX_FMC_Init+0x190>)
 800291a:	2280      	movs	r2, #128	@ 0x80
 800291c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 4096;
 800291e:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <MX_FMC_Init+0x190>)
 8002920:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 2;
 8002926:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <MX_FMC_Init+0x190>)
 8002928:	2202      	movs	r2, #2
 800292a:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 2048;
 800292c:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <MX_FMC_Init+0x190>)
 800292e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002932:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8002934:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <MX_FMC_Init+0x190>)
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 19;
 800293c:	2313      	movs	r3, #19
 800293e:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 19;
 8002940:	2313      	movs	r3, #19
 8002942:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 6;
 8002944:	2306      	movs	r3, #6
 8002946:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 3;
 8002948:	2303      	movs	r3, #3
 800294a:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 19;
 800294c:	2313      	movs	r3, #19
 800294e:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 19;
 8002950:	2313      	movs	r3, #19
 8002952:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 10;
 8002954:	230a      	movs	r3, #10
 8002956:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 9;
 8002958:	2309      	movs	r3, #9
 800295a:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800295c:	463a      	mov	r2, r7
 800295e:	f107 0310 	add.w	r3, r7, #16
 8002962:	4619      	mov	r1, r3
 8002964:	4808      	ldr	r0, [pc, #32]	@ (8002988 <MX_FMC_Init+0x190>)
 8002966:	f001 fd9f 	bl	80044a8 <HAL_NAND_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_FMC_Init+0x17c>
  {
    Error_Handler( );
 8002970:	f000 fad7 	bl	8002f22 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002974:	bf00      	nop
 8002976:	3740      	adds	r7, #64	@ 0x40
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200049f8 	.word	0x200049f8
 8002980:	47000400 	.word	0x47000400
 8002984:	47000504 	.word	0x47000504
 8002988:	20004a50 	.word	0x20004a50
 800298c:	47000480 	.word	0x47000480

08002990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08e      	sub	sp, #56	@ 0x38
 8002994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029a6:	4bc2      	ldr	r3, [pc, #776]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 80029a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ac:	4ac0      	ldr	r2, [pc, #768]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029b6:	4bbe      	ldr	r3, [pc, #760]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 80029b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	623b      	str	r3, [r7, #32]
 80029c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c4:	4bba      	ldr	r3, [pc, #744]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 80029c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ca:	4ab9      	ldr	r2, [pc, #740]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029d4:	4bb6      	ldr	r3, [pc, #728]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029e2:	4bb3      	ldr	r3, [pc, #716]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 80029e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e8:	4ab1      	ldr	r2, [pc, #708]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 80029ea:	f043 0320 	orr.w	r3, r3, #32
 80029ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029f2:	4baf      	ldr	r3, [pc, #700]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 80029f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a00:	4bab      	ldr	r3, [pc, #684]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a06:	4aaa      	ldr	r2, [pc, #680]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a10:	4ba7      	ldr	r3, [pc, #668]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4ba4      	ldr	r3, [pc, #656]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a24:	4aa2      	ldr	r2, [pc, #648]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a2e:	4ba0      	ldr	r3, [pc, #640]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	4b9c      	ldr	r3, [pc, #624]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a42:	4a9b      	ldr	r2, [pc, #620]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a4c:	4b98      	ldr	r3, [pc, #608]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a5a:	4b95      	ldr	r3, [pc, #596]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a60:	4a93      	ldr	r2, [pc, #588]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a6a:	4b91      	ldr	r3, [pc, #580]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a78:	4b8d      	ldr	r3, [pc, #564]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a7e:	4a8c      	ldr	r2, [pc, #560]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a88:	4b89      	ldr	r3, [pc, #548]	@ (8002cb0 <MX_GPIO_Init+0x320>)
 8002a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_1_Pin|START_1_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 8002a96:	2200      	movs	r2, #0
 8002a98:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8002a9c:	4885      	ldr	r0, [pc, #532]	@ (8002cb4 <MX_GPIO_Init+0x324>)
 8002a9e:	f001 fc9f 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	4884      	ldr	r0, [pc, #528]	@ (8002cb8 <MX_GPIO_Init+0x328>)
 8002aa8:	f001 fc9a 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 8002aac:	2200      	movs	r2, #0
 8002aae:	f241 4167 	movw	r1, #5223	@ 0x1467
 8002ab2:	4882      	ldr	r0, [pc, #520]	@ (8002cbc <MX_GPIO_Init+0x32c>)
 8002ab4:	f001 fc94 	bl	80043e0 <HAL_GPIO_WritePin>
                          |Pwr_Ctrl2_Pin|START_3_Pin|RESET_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPO_1_Pin|GPO_2_Pin|CS_2_Pin, GPIO_PIN_RESET);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f640 0103 	movw	r1, #2051	@ 0x803
 8002abe:	4880      	ldr	r0, [pc, #512]	@ (8002cc0 <MX_GPIO_Init+0x330>)
 8002ac0:	f001 fc8e 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8002aca:	487e      	ldr	r0, [pc, #504]	@ (8002cc4 <MX_GPIO_Init+0x334>)
 8002acc:	f001 fc88 	bl	80043e0 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ad6:	487a      	ldr	r0, [pc, #488]	@ (8002cc0 <MX_GPIO_Init+0x330>)
 8002ad8:	f001 fc82 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, START_2_Pin|RESET_2_Pin, GPIO_PIN_RESET);
 8002adc:	2200      	movs	r2, #0
 8002ade:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002ae2:	4879      	ldr	r0, [pc, #484]	@ (8002cc8 <MX_GPIO_Init+0x338>)
 8002ae4:	f001 fc7c 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2110      	movs	r1, #16
 8002aec:	4877      	ldr	r0, [pc, #476]	@ (8002ccc <MX_GPIO_Init+0x33c>)
 8002aee:	f001 fc77 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPI_3_Pin GPI_4_Pin GPI_5_Pin */
  GPIO_InitStruct.Pin = GPI_3_Pin|GPI_4_Pin|GPI_5_Pin;
 8002af2:	2370      	movs	r3, #112	@ 0x70
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b02:	4619      	mov	r1, r3
 8002b04:	486f      	ldr	r0, [pc, #444]	@ (8002cc4 <MX_GPIO_Init+0x334>)
 8002b06:	f001 fb19 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin START_1_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|START_1_Pin;
 8002b0a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b10:	2301      	movs	r3, #1
 8002b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b20:	4619      	mov	r1, r3
 8002b22:	4864      	ldr	r0, [pc, #400]	@ (8002cb4 <MX_GPIO_Init+0x324>)
 8002b24:	f001 fb0a 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_1_Pin */
  GPIO_InitStruct.Pin = DRDY_1_Pin;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b2c:	4b68      	ldr	r3, [pc, #416]	@ (8002cd0 <MX_GPIO_Init+0x340>)
 8002b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DRDY_1_GPIO_Port, &GPIO_InitStruct);
 8002b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	485f      	ldr	r0, [pc, #380]	@ (8002cb8 <MX_GPIO_Init+0x328>)
 8002b3c:	f001 fafe 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_1_Pin */
  GPIO_InitStruct.Pin = RESET_1_Pin;
 8002b40:	2304      	movs	r3, #4
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b44:	2301      	movs	r3, #1
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b54:	4619      	mov	r1, r3
 8002b56:	4858      	ldr	r0, [pc, #352]	@ (8002cb8 <MX_GPIO_Init+0x328>)
 8002b58:	f001 faf0 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS422_CTRL_Pin RS485_CTRL1_Pin RS485_CTRL2_Pin Pwr_Ctrl1_Pin
                           Pwr_Ctrl2_Pin */
  GPIO_InitStruct.Pin = RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 8002b5c:	2367      	movs	r3, #103	@ 0x67
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Pwr_Ctrl2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b70:	4619      	mov	r1, r3
 8002b72:	4852      	ldr	r0, [pc, #328]	@ (8002cbc <MX_GPIO_Init+0x32c>)
 8002b74:	f001 fae2 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPO_1_Pin GPO_2_Pin */
  GPIO_InitStruct.Pin = GPO_1_Pin|GPO_2_Pin;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	484c      	ldr	r0, [pc, #304]	@ (8002cc0 <MX_GPIO_Init+0x330>)
 8002b90:	f001 fad4 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_RST_Pin;
 8002b94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002baa:	4619      	mov	r1, r3
 8002bac:	4841      	ldr	r0, [pc, #260]	@ (8002cb4 <MX_GPIO_Init+0x324>)
 8002bae:	f001 fac5 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8002bb2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bc8:	4619      	mov	r1, r3
 8002bca:	483e      	ldr	r0, [pc, #248]	@ (8002cc4 <MX_GPIO_Init+0x334>)
 8002bcc:	f001 fab6 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 CS_2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|CS_2_Pin;
 8002bd0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be6:	4619      	mov	r1, r3
 8002be8:	4835      	ldr	r0, [pc, #212]	@ (8002cc0 <MX_GPIO_Init+0x330>)
 8002bea:	f001 faa7 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : START_2_Pin RESET_2_Pin */
  GPIO_InitStruct.Pin = START_2_Pin|RESET_2_Pin;
 8002bee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c04:	4619      	mov	r1, r3
 8002c06:	4830      	ldr	r0, [pc, #192]	@ (8002cc8 <MX_GPIO_Init+0x338>)
 8002c08:	f001 fa98 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_2_Pin */
  GPIO_InitStruct.Pin = DRDY_2_Pin;
 8002c0c:	2380      	movs	r3, #128	@ 0x80
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c10:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd0 <MX_GPIO_Init+0x340>)
 8002c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DRDY_2_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	482a      	ldr	r0, [pc, #168]	@ (8002cc8 <MX_GPIO_Init+0x338>)
 8002c20:	f001 fa8c 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : START_3_Pin RESET_3_Pin */
  GPIO_InitStruct.Pin = START_3_Pin|RESET_3_Pin;
 8002c24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c32:	2303      	movs	r3, #3
 8002c34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	481f      	ldr	r0, [pc, #124]	@ (8002cbc <MX_GPIO_Init+0x32c>)
 8002c3e:	f001 fa7d 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_3_Pin */
  GPIO_InitStruct.Pin = DRDY_3_Pin;
 8002c42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c48:	4b21      	ldr	r3, [pc, #132]	@ (8002cd0 <MX_GPIO_Init+0x340>)
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DRDY_3_GPIO_Port, &GPIO_InitStruct);
 8002c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c54:	4619      	mov	r1, r3
 8002c56:	4819      	ldr	r0, [pc, #100]	@ (8002cbc <MX_GPIO_Init+0x32c>)
 8002c58:	f001 fa70 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPI_1_Pin GPI_2_Pin */
  GPIO_InitStruct.Pin = GPI_1_Pin|GPI_2_Pin;
 8002c5c:	230c      	movs	r3, #12
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4817      	ldr	r0, [pc, #92]	@ (8002ccc <MX_GPIO_Init+0x33c>)
 8002c70:	f001 fa64 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_3_Pin */
  GPIO_InitStruct.Pin = CS_3_Pin;
 8002c74:	2310      	movs	r3, #16
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 8002c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4810      	ldr	r0, [pc, #64]	@ (8002ccc <MX_GPIO_Init+0x33c>)
 8002c8c:	f001 fa56 	bl	800413c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2100      	movs	r1, #0
 8002c94:	200c      	movs	r0, #12
 8002c96:	f001 f8d3 	bl	8003e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c9a:	200c      	movs	r0, #12
 8002c9c:	f001 f8ea 	bl	8003e74 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2012      	movs	r0, #18
 8002ca6:	f001 f8cb 	bl	8003e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8002caa:	2012      	movs	r0, #18
 8002cac:	e012      	b.n	8002cd4 <MX_GPIO_Init+0x344>
 8002cae:	bf00      	nop
 8002cb0:	44020c00 	.word	0x44020c00
 8002cb4:	42021400 	.word	0x42021400
 8002cb8:	42020800 	.word	0x42020800
 8002cbc:	42020000 	.word	0x42020000
 8002cc0:	42020400 	.word	0x42020400
 8002cc4:	42021000 	.word	0x42021000
 8002cc8:	42021800 	.word	0x42021800
 8002ccc:	42020c00 	.word	0x42020c00
 8002cd0:	10210000 	.word	0x10210000
 8002cd4:	f001 f8ce 	bl	8003e74 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2016      	movs	r0, #22
 8002cde:	f001 f8af 	bl	8003e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8002ce2:	2016      	movs	r0, #22
 8002ce4:	f001 f8c6 	bl	8003e74 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ce8:	bf00      	nop
 8002cea:	3738      	adds	r7, #56	@ 0x38
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_InitAllHandlers>:
        HAL_SRAM_Write_8b(hsram1, (uint32_t *)(address + i), &eraseValue, 1);
    }
}


void UART_InitAllHandlers(void) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart4, uart1_rx_buffer, sizeof(uart1_rx_buffer));
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	490a      	ldr	r1, [pc, #40]	@ (8002d20 <UART_InitAllHandlers+0x30>)
 8002cf8:	480a      	ldr	r0, [pc, #40]	@ (8002d24 <UART_InitAllHandlers+0x34>)
 8002cfa:	f009 f803 	bl	800bd04 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, uart2_rx_buffer, sizeof(uart2_rx_buffer));
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4909      	ldr	r1, [pc, #36]	@ (8002d28 <UART_InitAllHandlers+0x38>)
 8002d02:	480a      	ldr	r0, [pc, #40]	@ (8002d2c <UART_InitAllHandlers+0x3c>)
 8002d04:	f008 fffe 	bl	800bd04 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer, sizeof(uart3_rx_buffer));
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4909      	ldr	r1, [pc, #36]	@ (8002d30 <UART_InitAllHandlers+0x40>)
 8002d0c:	4809      	ldr	r0, [pc, #36]	@ (8002d34 <UART_InitAllHandlers+0x44>)
 8002d0e:	f008 fff9 	bl	800bd04 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, uart4_rx_buffer, sizeof(uart4_rx_buffer));
 8002d12:	2201      	movs	r2, #1
 8002d14:	4908      	ldr	r1, [pc, #32]	@ (8002d38 <UART_InitAllHandlers+0x48>)
 8002d16:	4809      	ldr	r0, [pc, #36]	@ (8002d3c <UART_InitAllHandlers+0x4c>)
 8002d18:	f008 fff4 	bl	800bd04 <HAL_UART_Receive_IT>
}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20004ab0 	.word	0x20004ab0
 8002d24:	200047a8 	.word	0x200047a8
 8002d28:	20004ab4 	.word	0x20004ab4
 8002d2c:	200048d0 	.word	0x200048d0
 8002d30:	20004ab8 	.word	0x20004ab8
 8002d34:	2000483c 	.word	0x2000483c
 8002d38:	20004abc 	.word	0x20004abc
 8002d3c:	20004964 	.word	0x20004964

08002d40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec4 <HAL_UART_RxCpltCallback+0x184>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	f000 80b4 	beq.w	8002ebc <HAL_UART_RxCpltCallback+0x17c>
		//			}
		//		}

	}

	else if (huart->Instance == UART5) {
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a5b      	ldr	r2, [pc, #364]	@ (8002ec8 <HAL_UART_RxCpltCallback+0x188>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	f040 8099 	bne.w	8002e92 <HAL_UART_RxCpltCallback+0x152>

		// Handle data received from UART5
		HAL_UART_Receive_IT(&huart5, &rcv, 1);
 8002d60:	2201      	movs	r2, #1
 8002d62:	495a      	ldr	r1, [pc, #360]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18c>)
 8002d64:	485a      	ldr	r0, [pc, #360]	@ (8002ed0 <HAL_UART_RxCpltCallback+0x190>)
 8002d66:	f008 ffcd 	bl	800bd04 <HAL_UART_Receive_IT>

		if(rcv == 'S' )
 8002d6a:	4b58      	ldr	r3, [pc, #352]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b53      	cmp	r3, #83	@ 0x53
 8002d70:	d111      	bne.n	8002d96 <HAL_UART_RxCpltCallback+0x56>
		{
			time_str_length=0;
 8002d72:	4b58      	ldr	r3, [pc, #352]	@ (8002ed4 <HAL_UART_RxCpltCallback+0x194>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
			time_str[time_str_length++] = rcv;
 8002d78:	4b56      	ldr	r3, [pc, #344]	@ (8002ed4 <HAL_UART_RxCpltCallback+0x194>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	b2d1      	uxtb	r1, r2
 8002d80:	4a54      	ldr	r2, [pc, #336]	@ (8002ed4 <HAL_UART_RxCpltCallback+0x194>)
 8002d82:	7011      	strb	r1, [r2, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b51      	ldr	r3, [pc, #324]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18c>)
 8002d88:	7819      	ldrb	r1, [r3, #0]
 8002d8a:	4b53      	ldr	r3, [pc, #332]	@ (8002ed8 <HAL_UART_RxCpltCallback+0x198>)
 8002d8c:	5499      	strb	r1, [r3, r2]
			time_rcv =1;
 8002d8e:	4b53      	ldr	r3, [pc, #332]	@ (8002edc <HAL_UART_RxCpltCallback+0x19c>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e018      	b.n	8002dc8 <HAL_UART_RxCpltCallback+0x88>
		}
		else if(time_rcv==1)
 8002d96:	4b51      	ldr	r3, [pc, #324]	@ (8002edc <HAL_UART_RxCpltCallback+0x19c>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d114      	bne.n	8002dc8 <HAL_UART_RxCpltCallback+0x88>
		{
			time_str[time_str_length++] = rcv;
 8002d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed4 <HAL_UART_RxCpltCallback+0x194>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	b2d1      	uxtb	r1, r2
 8002da6:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed4 <HAL_UART_RxCpltCallback+0x194>)
 8002da8:	7011      	strb	r1, [r2, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18c>)
 8002dae:	7819      	ldrb	r1, [r3, #0]
 8002db0:	4b49      	ldr	r3, [pc, #292]	@ (8002ed8 <HAL_UART_RxCpltCallback+0x198>)
 8002db2:	5499      	strb	r1, [r3, r2]
			if(time_str_length > 22)
 8002db4:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <HAL_UART_RxCpltCallback+0x194>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b16      	cmp	r3, #22
 8002dba:	d905      	bls.n	8002dc8 <HAL_UART_RxCpltCallback+0x88>
			{
				time_str_length = 0 ;
 8002dbc:	4b45      	ldr	r3, [pc, #276]	@ (8002ed4 <HAL_UART_RxCpltCallback+0x194>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
				time_rcv = 0 ;
 8002dc2:	4b46      	ldr	r3, [pc, #280]	@ (8002edc <HAL_UART_RxCpltCallback+0x19c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
			}
		}
		if(rcv == 'E' )
 8002dc8:	4b40      	ldr	r3, [pc, #256]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b45      	cmp	r3, #69	@ 0x45
 8002dce:	d112      	bne.n	8002df6 <HAL_UART_RxCpltCallback+0xb6>
		{
			if(time_str_length == 21)
 8002dd0:	4b40      	ldr	r3, [pc, #256]	@ (8002ed4 <HAL_UART_RxCpltCallback+0x194>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b15      	cmp	r3, #21
 8002dd6:	d103      	bne.n	8002de0 <HAL_UART_RxCpltCallback+0xa0>
			{
				//time_str[time_str_length++] = rcv;
				time_set = 1;
 8002dd8:	4b41      	ldr	r3, [pc, #260]	@ (8002ee0 <HAL_UART_RxCpltCallback+0x1a0>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e00a      	b.n	8002df6 <HAL_UART_RxCpltCallback+0xb6>
			}
			else
			{
				time_rcv = 0 ;
 8002de0:	4b3e      	ldr	r3, [pc, #248]	@ (8002edc <HAL_UART_RxCpltCallback+0x19c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
				time_str_length = 0 ;
 8002de6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_UART_RxCpltCallback+0x194>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
				memset(time_str,0,sizeof(time_str));
 8002dec:	2219      	movs	r2, #25
 8002dee:	2100      	movs	r1, #0
 8002df0:	4839      	ldr	r0, [pc, #228]	@ (8002ed8 <HAL_UART_RxCpltCallback+0x198>)
 8002df2:	f00b ff9e 	bl	800ed32 <memset>
			}
		}

		if(rcv == 'T')
 8002df6:	4b35      	ldr	r3, [pc, #212]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18c>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b54      	cmp	r3, #84	@ 0x54
 8002dfc:	d10e      	bne.n	8002e1c <HAL_UART_RxCpltCallback+0xdc>
		{
			command_str[command_str_index++] = rcv ;
 8002dfe:	4b39      	ldr	r3, [pc, #228]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	b2d1      	uxtb	r1, r2
 8002e06:	4a37      	ldr	r2, [pc, #220]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002e08:	7011      	strb	r1, [r2, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18c>)
 8002e0e:	7819      	ldrb	r1, [r3, #0]
 8002e10:	4b35      	ldr	r3, [pc, #212]	@ (8002ee8 <HAL_UART_RxCpltCallback+0x1a8>)
 8002e12:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8002e14:	4b35      	ldr	r3, [pc, #212]	@ (8002eec <HAL_UART_RxCpltCallback+0x1ac>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e018      	b.n	8002e4e <HAL_UART_RxCpltCallback+0x10e>

		}
		else if(command_rcv==1)
 8002e1c:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_UART_RxCpltCallback+0x1ac>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d114      	bne.n	8002e4e <HAL_UART_RxCpltCallback+0x10e>
		{
			command_str[command_str_index++] = rcv ;
 8002e24:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	b2d1      	uxtb	r1, r2
 8002e2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002e2e:	7011      	strb	r1, [r2, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b26      	ldr	r3, [pc, #152]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18c>)
 8002e34:	7819      	ldrb	r1, [r3, #0]
 8002e36:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee8 <HAL_UART_RxCpltCallback+0x1a8>)
 8002e38:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 10)
 8002e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b0a      	cmp	r3, #10
 8002e40:	d905      	bls.n	8002e4e <HAL_UART_RxCpltCallback+0x10e>
			{
				command_str_index = 0 ;
 8002e42:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8002e48:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <HAL_UART_RxCpltCallback+0x1ac>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(command_rcv == 1 && rcv == 'E')
 8002e4e:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <HAL_UART_RxCpltCallback+0x1ac>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d132      	bne.n	8002ebc <HAL_UART_RxCpltCallback+0x17c>
 8002e56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <HAL_UART_RxCpltCallback+0x18c>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b45      	cmp	r3, #69	@ 0x45
 8002e5c:	d12e      	bne.n	8002ebc <HAL_UART_RxCpltCallback+0x17c>
		{
			if(command_str_index == 4)
 8002e5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d109      	bne.n	8002e7a <HAL_UART_RxCpltCallback+0x13a>
			{
				ATP_test  = 1;
 8002e66:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <HAL_UART_RxCpltCallback+0x1b0>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8002e72:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <HAL_UART_RxCpltCallback+0x1ac>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
	else if (huart->Instance == USART10) {
		// Handle data received from UART4

		HAL_UART_Receive_IT(&huart10, uart4_rx_buffer, sizeof(uart4_rx_buffer));
	}
}
 8002e78:	e020      	b.n	8002ebc <HAL_UART_RxCpltCallback+0x17c>
				command_str_index = 0 ;
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x1a4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8002e80:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <HAL_UART_RxCpltCallback+0x1ac>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8002e86:	220f      	movs	r2, #15
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4817      	ldr	r0, [pc, #92]	@ (8002ee8 <HAL_UART_RxCpltCallback+0x1a8>)
 8002e8c:	f00b ff51 	bl	800ed32 <memset>
}
 8002e90:	e014      	b.n	8002ebc <HAL_UART_RxCpltCallback+0x17c>
	else if (huart->Instance == UART8) {
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a17      	ldr	r2, [pc, #92]	@ (8002ef4 <HAL_UART_RxCpltCallback+0x1b4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d105      	bne.n	8002ea8 <HAL_UART_RxCpltCallback+0x168>
		HAL_UART_Receive_IT(&huart8, uart2_rx_buffer, sizeof(uart2_rx_buffer));
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4916      	ldr	r1, [pc, #88]	@ (8002ef8 <HAL_UART_RxCpltCallback+0x1b8>)
 8002ea0:	4816      	ldr	r0, [pc, #88]	@ (8002efc <HAL_UART_RxCpltCallback+0x1bc>)
 8002ea2:	f008 ff2f 	bl	800bd04 <HAL_UART_Receive_IT>
}
 8002ea6:	e009      	b.n	8002ebc <HAL_UART_RxCpltCallback+0x17c>
	else if (huart->Instance == USART10) {
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a14      	ldr	r2, [pc, #80]	@ (8002f00 <HAL_UART_RxCpltCallback+0x1c0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d104      	bne.n	8002ebc <HAL_UART_RxCpltCallback+0x17c>
		HAL_UART_Receive_IT(&huart10, uart4_rx_buffer, sizeof(uart4_rx_buffer));
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4913      	ldr	r1, [pc, #76]	@ (8002f04 <HAL_UART_RxCpltCallback+0x1c4>)
 8002eb6:	4814      	ldr	r0, [pc, #80]	@ (8002f08 <HAL_UART_RxCpltCallback+0x1c8>)
 8002eb8:	f008 ff24 	bl	800bd04 <HAL_UART_Receive_IT>
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40004c00 	.word	0x40004c00
 8002ec8:	40005000 	.word	0x40005000
 8002ecc:	20004ab5 	.word	0x20004ab5
 8002ed0:	2000483c 	.word	0x2000483c
 8002ed4:	20004aad 	.word	0x20004aad
 8002ed8:	20004a94 	.word	0x20004a94
 8002edc:	20004ab6 	.word	0x20004ab6
 8002ee0:	20004ab7 	.word	0x20004ab7
 8002ee4:	200004b4 	.word	0x200004b4
 8002ee8:	200004a0 	.word	0x200004a0
 8002eec:	20004aae 	.word	0x20004aae
 8002ef0:	200004b5 	.word	0x200004b5
 8002ef4:	40007c00 	.word	0x40007c00
 8002ef8:	20004ab4 	.word	0x20004ab4
 8002efc:	200048d0 	.word	0x200048d0
 8002f00:	40006800 	.word	0x40006800
 8002f04:	20004abc 	.word	0x20004abc
 8002f08:	20004964 	.word	0x20004964

08002f0c <HAL_GPIO_EXTI_Falling_Callback>:



// User-defined callback to handle the data-ready event
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
		//HAL_UART_Transmit_IT(&huart8, "DR_3\n\r", strlen("DR_1\n\r"));
		//HAL_Delay(1);
		// Data ready logic
		// For example, read data from a sensor using SPI/I2C
	}
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f26:	b672      	cpsid	i
}
 8002f28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002f2a:	bf00      	nop
 8002f2c:	e7fd      	b.n	8002f2a <Error_Handler+0x8>

08002f2e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b0d0      	sub	sp, #320	@ 0x140
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f46:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f4a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f60:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f64:	4618      	mov	r0, r3
 8002f66:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f00b fee0 	bl	800ed32 <memset>
  if(hspi->Instance==SPI2)
 8002f72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f76:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a9c      	ldr	r2, [pc, #624]	@ (80031f0 <HAL_SPI_MspInit+0x2b4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d15f      	bne.n	8003044 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002f84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f88:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8002f98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f9c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa6:	f107 0320 	add.w	r3, r7, #32
 8002faa:	4618      	mov	r0, r3
 8002fac:	f002 fe6c 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 8002fb6:	f7ff ffb4 	bl	8002f22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fba:	4b8e      	ldr	r3, [pc, #568]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8002fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fc0:	4a8c      	ldr	r2, [pc, #560]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8002fc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002fca:	4b8a      	ldr	r3, [pc, #552]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8002fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fd0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002fd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fe2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fe6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe8:	4b82      	ldr	r3, [pc, #520]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8002fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fee:	4a81      	ldr	r2, [pc, #516]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8002ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ffe:	f003 0202 	and.w	r2, r3, #2
 8003002:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003006:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003010:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003014:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCKL_2_Pin|MISO_2_Pin|MOSI_2_Pin;
 8003016:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800301a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003030:	2305      	movs	r3, #5
 8003032:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003036:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800303a:	4619      	mov	r1, r3
 800303c:	486e      	ldr	r0, [pc, #440]	@ (80031f8 <HAL_SPI_MspInit+0x2bc>)
 800303e:	f001 f87d 	bl	800413c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003042:	e0d0      	b.n	80031e6 <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI3)
 8003044:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003048:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6a      	ldr	r2, [pc, #424]	@ (80031fc <HAL_SPI_MspInit+0x2c0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d15f      	bne.n	8003116 <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003056:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800305a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800305e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 800306a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800306e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003072:	2200      	movs	r2, #0
 8003074:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003078:	f107 0320 	add.w	r3, r7, #32
 800307c:	4618      	mov	r0, r3
 800307e:	f002 fe03 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8003088:	f7ff ff4b 	bl	8002f22 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800308c:	4b59      	ldr	r3, [pc, #356]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 800308e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003092:	4a58      	ldr	r2, [pc, #352]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8003094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003098:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800309c:	4b55      	ldr	r3, [pc, #340]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 800309e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030a2:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80030a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80030aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80030b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030b8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ba:	4b4e      	ldr	r3, [pc, #312]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 80030bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c0:	4a4c      	ldr	r2, [pc, #304]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030ca:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 80030cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030d0:	f003 0204 	and.w	r2, r3, #4
 80030d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80030d8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80030e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030e6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 80030e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80030ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003102:	2306      	movs	r3, #6
 8003104:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003108:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800310c:	4619      	mov	r1, r3
 800310e:	483c      	ldr	r0, [pc, #240]	@ (8003200 <HAL_SPI_MspInit+0x2c4>)
 8003110:	f001 f814 	bl	800413c <HAL_GPIO_Init>
}
 8003114:	e067      	b.n	80031e6 <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI5)
 8003116:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800311a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a38      	ldr	r2, [pc, #224]	@ (8003204 <HAL_SPI_MspInit+0x2c8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d15e      	bne.n	80031e6 <HAL_SPI_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003128:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800312c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003130:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi5ClockSelection = RCC_SPI5CLKSOURCE_PCLK3;
 800313c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003140:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003144:	2200      	movs	r2, #0
 8003146:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800314a:	f107 0320 	add.w	r3, r7, #32
 800314e:	4618      	mov	r0, r3
 8003150:	f002 fd9a 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800315a:	f7ff fee2 	bl	8002f22 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800315e:	4b25      	ldr	r3, [pc, #148]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8003160:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003164:	4a23      	ldr	r2, [pc, #140]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8003166:	f043 0320 	orr.w	r3, r3, #32
 800316a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800316e:	4b21      	ldr	r3, [pc, #132]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8003170:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003174:	f003 0220 	and.w	r2, r3, #32
 8003178:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800317c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003186:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800318a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800318c:	4b19      	ldr	r3, [pc, #100]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 800318e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003192:	4a18      	ldr	r2, [pc, #96]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 8003194:	f043 0320 	orr.w	r3, r3, #32
 8003198:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800319c:	4b15      	ldr	r3, [pc, #84]	@ (80031f4 <HAL_SPI_MspInit+0x2b8>)
 800319e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031a2:	f003 0220 	and.w	r2, r3, #32
 80031a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031b4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031b8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_1_Pin|MISO_1_Pin|MOSI_1_Pin;
 80031ba:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80031be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80031d4:	2305      	movs	r3, #5
 80031d6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031da:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80031de:	4619      	mov	r1, r3
 80031e0:	4809      	ldr	r0, [pc, #36]	@ (8003208 <HAL_SPI_MspInit+0x2cc>)
 80031e2:	f000 ffab 	bl	800413c <HAL_GPIO_Init>
}
 80031e6:	bf00      	nop
 80031e8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40003800 	.word	0x40003800
 80031f4:	44020c00 	.word	0x44020c00
 80031f8:	42020400 	.word	0x42020400
 80031fc:	40003c00 	.word	0x40003c00
 8003200:	42020800 	.word	0x42020800
 8003204:	44002000 	.word	0x44002000
 8003208:	42021400 	.word	0x42021400

0800320c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b0d2      	sub	sp, #328	@ 0x148
 8003210:	af00      	add	r7, sp, #0
 8003212:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003216:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800321a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800322c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003230:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003234:	4618      	mov	r0, r3
 8003236:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800323a:	461a      	mov	r2, r3
 800323c:	2100      	movs	r1, #0
 800323e:	f00b fd78 	bl	800ed32 <memset>
  if(huart->Instance==UART4)
 8003242:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003246:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4aa4      	ldr	r2, [pc, #656]	@ (80034e0 <HAL_UART_MspInit+0x2d4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d166      	bne.n	8003322 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003254:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003258:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800325c:	f04f 0208 	mov.w	r2, #8
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003268:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800326c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003270:	2200      	movs	r2, #0
 8003272:	669a      	str	r2, [r3, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003274:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003278:	4618      	mov	r0, r3
 800327a:	f002 fd05 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8003284:	f7ff fe4d 	bl	8002f22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003288:	4b96      	ldr	r3, [pc, #600]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 800328a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800328e:	4a95      	ldr	r2, [pc, #596]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 8003290:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003294:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003298:	4b92      	ldr	r3, [pc, #584]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 800329a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800329e:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80032a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80032b4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b6:	4b8b      	ldr	r3, [pc, #556]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 80032b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032bc:	4a89      	ldr	r2, [pc, #548]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80032c6:	4b87      	ldr	r3, [pc, #540]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 80032c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032cc:	f003 0202 	and.w	r2, r3, #2
 80032d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032d4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80032e2:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART_RX2_Pin|UART_TX2_Pin;
 80032e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80032e8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80032fe:	2308      	movs	r3, #8
 8003300:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003304:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003308:	4619      	mov	r1, r3
 800330a:	4877      	ldr	r0, [pc, #476]	@ (80034e8 <HAL_UART_MspInit+0x2dc>)
 800330c:	f000 ff16 	bl	800413c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003310:	2200      	movs	r2, #0
 8003312:	2100      	movs	r1, #0
 8003314:	203d      	movs	r0, #61	@ 0x3d
 8003316:	f000 fd93 	bl	8003e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800331a:	203d      	movs	r0, #61	@ 0x3d
 800331c:	f000 fdaa 	bl	8003e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8003320:	e159      	b.n	80035d6 <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART5)
 8003322:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003326:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6f      	ldr	r2, [pc, #444]	@ (80034ec <HAL_UART_MspInit+0x2e0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d165      	bne.n	8003400 <HAL_UART_MspInit+0x1f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003334:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003338:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800333c:	f04f 0210 	mov.w	r2, #16
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003348:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800334c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003350:	2200      	movs	r2, #0
 8003352:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003354:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003358:	4618      	mov	r0, r3
 800335a:	f002 fc95 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8003364:	f7ff fddd 	bl	8002f22 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003368:	4b5e      	ldr	r3, [pc, #376]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 800336a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800336e:	4a5d      	ldr	r2, [pc, #372]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 8003370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003374:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003378:	4b5a      	ldr	r3, [pc, #360]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 800337a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800337e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003382:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003386:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003390:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003394:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	4b53      	ldr	r3, [pc, #332]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 8003398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800339c:	4a51      	ldr	r2, [pc, #324]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 800339e:	f043 0302 	orr.w	r3, r3, #2
 80033a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033a6:	4b4f      	ldr	r3, [pc, #316]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 80033a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ac:	f003 0202 	and.w	r2, r3, #2
 80033b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033b4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80033c2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX3_Pin|UART_TX3_Pin;
 80033c4:	2360      	movs	r3, #96	@ 0x60
 80033c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80033dc:	230e      	movs	r3, #14
 80033de:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80033e6:	4619      	mov	r1, r3
 80033e8:	483f      	ldr	r0, [pc, #252]	@ (80034e8 <HAL_UART_MspInit+0x2dc>)
 80033ea:	f000 fea7 	bl	800413c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	203e      	movs	r0, #62	@ 0x3e
 80033f4:	f000 fd24 	bl	8003e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80033f8:	203e      	movs	r0, #62	@ 0x3e
 80033fa:	f000 fd3b 	bl	8003e74 <HAL_NVIC_EnableIRQ>
}
 80033fe:	e0ea      	b.n	80035d6 <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART8)
 8003400:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003404:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a38      	ldr	r2, [pc, #224]	@ (80034f0 <HAL_UART_MspInit+0x2e4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d172      	bne.n	80034f8 <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003412:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003416:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800341a:	f04f 0280 	mov.w	r2, #128	@ 0x80
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8003426:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800342a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800342e:	2200      	movs	r2, #0
 8003430:	679a      	str	r2, [r3, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003432:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003436:	4618      	mov	r0, r3
 8003438:	f002 fc26 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8003442:	f7ff fd6e 	bl	8002f22 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003446:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 8003448:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800344c:	4a25      	ldr	r2, [pc, #148]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 800344e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003452:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003456:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 8003458:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800345c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003460:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003464:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800346e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003472:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 8003476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800347a:	4a1a      	ldr	r2, [pc, #104]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 800347c:	f043 0310 	orr.w	r3, r3, #16
 8003480:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003484:	4b17      	ldr	r3, [pc, #92]	@ (80034e4 <HAL_UART_MspInit+0x2d8>)
 8003486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800348a:	f003 0210 	and.w	r2, r3, #16
 800348e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003492:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800349c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80034a0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX1_Pin|UART_TX1_Pin;
 80034a2:	2303      	movs	r3, #3
 80034a4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80034ba:	2308      	movs	r3, #8
 80034bc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034c0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80034c4:	4619      	mov	r1, r3
 80034c6:	480b      	ldr	r0, [pc, #44]	@ (80034f4 <HAL_UART_MspInit+0x2e8>)
 80034c8:	f000 fe38 	bl	800413c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2100      	movs	r1, #0
 80034d0:	2063      	movs	r0, #99	@ 0x63
 80034d2:	f000 fcb5 	bl	8003e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80034d6:	2063      	movs	r0, #99	@ 0x63
 80034d8:	f000 fccc 	bl	8003e74 <HAL_NVIC_EnableIRQ>
}
 80034dc:	e07b      	b.n	80035d6 <HAL_UART_MspInit+0x3ca>
 80034de:	bf00      	nop
 80034e0:	40004c00 	.word	0x40004c00
 80034e4:	44020c00 	.word	0x44020c00
 80034e8:	42020400 	.word	0x42020400
 80034ec:	40005000 	.word	0x40005000
 80034f0:	40007c00 	.word	0x40007c00
 80034f4:	42021000 	.word	0x42021000
  else if(huart->Instance==USART10)
 80034f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80034fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a36      	ldr	r2, [pc, #216]	@ (80035e0 <HAL_UART_MspInit+0x3d4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d165      	bne.n	80035d6 <HAL_UART_MspInit+0x3ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800350a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800350e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart10ClockSelection = RCC_USART10CLKSOURCE_PCLK1;
 800351e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003522:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003526:	2200      	movs	r2, #0
 8003528:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800352c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003530:	4618      	mov	r0, r3
 8003532:	f002 fba9 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_UART_MspInit+0x334>
      Error_Handler();
 800353c:	f7ff fcf1 	bl	8002f22 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8003540:	4b28      	ldr	r3, [pc, #160]	@ (80035e4 <HAL_UART_MspInit+0x3d8>)
 8003542:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003546:	4a27      	ldr	r2, [pc, #156]	@ (80035e4 <HAL_UART_MspInit+0x3d8>)
 8003548:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800354c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003550:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <HAL_UART_MspInit+0x3d8>)
 8003552:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003556:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800355a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800355e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003568:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800356c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800356e:	4b1d      	ldr	r3, [pc, #116]	@ (80035e4 <HAL_UART_MspInit+0x3d8>)
 8003570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003574:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <HAL_UART_MspInit+0x3d8>)
 8003576:	f043 0310 	orr.w	r3, r3, #16
 800357a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800357e:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_UART_MspInit+0x3d8>)
 8003580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003584:	f003 0210 	and.w	r2, r3, #16
 8003588:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800358c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003596:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800359a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX4_Pin|UART_TX4_Pin;
 800359c:	230c      	movs	r3, #12
 800359e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART10;
 80035b4:	2307      	movs	r3, #7
 80035b6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ba:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80035be:	4619      	mov	r1, r3
 80035c0:	4809      	ldr	r0, [pc, #36]	@ (80035e8 <HAL_UART_MspInit+0x3dc>)
 80035c2:	f000 fdbb 	bl	800413c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	2056      	movs	r0, #86	@ 0x56
 80035cc:	f000 fc38 	bl	8003e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 80035d0:	2056      	movs	r0, #86	@ 0x56
 80035d2:	f000 fc4f 	bl	8003e74 <HAL_NVIC_EnableIRQ>
}
 80035d6:	bf00      	nop
 80035d8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40006800 	.word	0x40006800
 80035e4:	44020c00 	.word	0x44020c00
 80035e8:	42021000 	.word	0x42021000

080035ec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003600:	4b43      	ldr	r3, [pc, #268]	@ (8003710 <HAL_FMC_MspInit+0x124>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d17f      	bne.n	8003708 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8003608:	4b41      	ldr	r3, [pc, #260]	@ (8003710 <HAL_FMC_MspInit+0x124>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800360e:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <HAL_FMC_MspInit+0x128>)
 8003610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003614:	4a3f      	ldr	r2, [pc, #252]	@ (8003714 <HAL_FMC_MspInit+0x128>)
 8003616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800361e:	4b3d      	ldr	r3, [pc, #244]	@ (8003714 <HAL_FMC_MspInit+0x128>)
 8003620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
  PA8   ------> FMC_NOE
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800362c:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8003630:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800363e:	230c      	movs	r3, #12
 8003640:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4834      	ldr	r0, [pc, #208]	@ (8003718 <HAL_FMC_MspInit+0x12c>)
 8003648:	f000 fd78 	bl	800413c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800364c:	2380      	movs	r3, #128	@ 0x80
 800364e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 800365c:	230d      	movs	r3, #13
 800365e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	4619      	mov	r1, r3
 8003664:	482d      	ldr	r0, [pc, #180]	@ (800371c <HAL_FMC_MspInit+0x130>)
 8003666:	f000 fd69 	bl	800413c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800366a:	233f      	movs	r3, #63	@ 0x3f
 800366c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003676:	2303      	movs	r3, #3
 8003678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800367a:	230c      	movs	r3, #12
 800367c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4827      	ldr	r0, [pc, #156]	@ (8003720 <HAL_FMC_MspInit+0x134>)
 8003684:	f000 fd5a 	bl	800413c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003688:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800368c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003696:	2303      	movs	r3, #3
 8003698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800369a:	230c      	movs	r3, #12
 800369c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4820      	ldr	r0, [pc, #128]	@ (8003724 <HAL_FMC_MspInit+0x138>)
 80036a4:	f000 fd4a 	bl	800413c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80036a8:	f64f 0383 	movw	r3, #63619	@ 0xf883
 80036ac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ae:	2302      	movs	r3, #2
 80036b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b6:	2303      	movs	r3, #3
 80036b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036ba:	230c      	movs	r3, #12
 80036bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	4819      	ldr	r0, [pc, #100]	@ (8003728 <HAL_FMC_MspInit+0x13c>)
 80036c4:	f000 fd3a 	bl	800413c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036c8:	23c0      	movs	r3, #192	@ 0xc0
 80036ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d4:	2303      	movs	r3, #3
 80036d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80036d8:	2309      	movs	r3, #9
 80036da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036dc:	1d3b      	adds	r3, r7, #4
 80036de:	4619      	mov	r1, r3
 80036e0:	4812      	ldr	r0, [pc, #72]	@ (800372c <HAL_FMC_MspInit+0x140>)
 80036e2:	f000 fd2b 	bl	800413c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f4:	2303      	movs	r3, #3
 80036f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036f8:	230c      	movs	r3, #12
 80036fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fc:	1d3b      	adds	r3, r7, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4806      	ldr	r0, [pc, #24]	@ (800371c <HAL_FMC_MspInit+0x130>)
 8003702:	f000 fd1b 	bl	800413c <HAL_GPIO_Init>
 8003706:	e000      	b.n	800370a <HAL_FMC_MspInit+0x11e>
    return;
 8003708:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20004ac0 	.word	0x20004ac0
 8003714:	44020c00 	.word	0x44020c00
 8003718:	42021400 	.word	0x42021400
 800371c:	42020000 	.word	0x42020000
 8003720:	42021800 	.word	0x42021800
 8003724:	42021000 	.word	0x42021000
 8003728:	42020c00 	.word	0x42020c00
 800372c:	42020800 	.word	0x42020800

08003730 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003738:	f7ff ff58 	bl	80035ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 800374c:	f7ff ff4e 	bl	80035ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <NMI_Handler+0x4>

08003760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <HardFault_Handler+0x4>

08003768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <MemManage_Handler+0x4>

08003770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003774:	bf00      	nop
 8003776:	e7fd      	b.n	8003774 <BusFault_Handler+0x4>

08003778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800377c:	bf00      	nop
 800377e:	e7fd      	b.n	800377c <UsageFault_Handler+0x4>

08003780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ae:	f000 fa4b 	bl	8003c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_1_Pin);
 80037ba:	2002      	movs	r0, #2
 80037bc:	f000 fe42 	bl	8004444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80037c0:	bf00      	nop
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_2_Pin);
 80037c8:	2080      	movs	r0, #128	@ 0x80
 80037ca:	f000 fe3b 	bl	8004444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_3_Pin);
 80037d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80037da:	f000 fe33 	bl	8004444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80037e8:	4802      	ldr	r0, [pc, #8]	@ (80037f4 <UART4_IRQHandler+0x10>)
 80037ea:	f008 faed 	bl	800bdc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200047a8 	.word	0x200047a8

080037f8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80037fc:	4802      	ldr	r0, [pc, #8]	@ (8003808 <UART5_IRQHandler+0x10>)
 80037fe:	f008 fae3 	bl	800bdc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	2000483c 	.word	0x2000483c

0800380c <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8003810:	4802      	ldr	r0, [pc, #8]	@ (800381c <USART10_IRQHandler+0x10>)
 8003812:	f008 fad9 	bl	800bdc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20004964 	.word	0x20004964

08003820 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003824:	4802      	ldr	r0, [pc, #8]	@ (8003830 <UART8_IRQHandler+0x10>)
 8003826:	f008 facf 	bl	800bdc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200048d0 	.word	0x200048d0

08003834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return 1;
 8003838:	2301      	movs	r3, #1
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <_kill>:

int _kill(int pid, int sig)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800384e:	f00b fac3 	bl	800edd8 <__errno>
 8003852:	4603      	mov	r3, r0
 8003854:	2216      	movs	r2, #22
 8003856:	601a      	str	r2, [r3, #0]
  return -1;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <_exit>:

void _exit (int status)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800386c:	f04f 31ff 	mov.w	r1, #4294967295
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ffe7 	bl	8003844 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003876:	bf00      	nop
 8003878:	e7fd      	b.n	8003876 <_exit+0x12>

0800387a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e00a      	b.n	80038a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800388c:	f3af 8000 	nop.w
 8003890:	4601      	mov	r1, r0
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	60ba      	str	r2, [r7, #8]
 8003898:	b2ca      	uxtb	r2, r1
 800389a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3301      	adds	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	dbf0      	blt.n	800388c <_read+0x12>
  }

  return len;
 80038aa:	687b      	ldr	r3, [r7, #4]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e009      	b.n	80038da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	60ba      	str	r2, [r7, #8]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	3301      	adds	r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	429a      	cmp	r2, r3
 80038e0:	dbf1      	blt.n	80038c6 <_write+0x12>
  }
  return len;
 80038e2:	687b      	ldr	r3, [r7, #4]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_close>:

int _close(int file)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003914:	605a      	str	r2, [r3, #4]
  return 0;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_isatty>:

int _isatty(int file)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800392c:	2301      	movs	r3, #1
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800395c:	4a14      	ldr	r2, [pc, #80]	@ (80039b0 <_sbrk+0x5c>)
 800395e:	4b15      	ldr	r3, [pc, #84]	@ (80039b4 <_sbrk+0x60>)
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003968:	4b13      	ldr	r3, [pc, #76]	@ (80039b8 <_sbrk+0x64>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <_sbrk+0x64>)
 8003972:	4a12      	ldr	r2, [pc, #72]	@ (80039bc <_sbrk+0x68>)
 8003974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003976:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <_sbrk+0x64>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	429a      	cmp	r2, r3
 8003982:	d207      	bcs.n	8003994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003984:	f00b fa28 	bl	800edd8 <__errno>
 8003988:	4603      	mov	r3, r0
 800398a:	220c      	movs	r2, #12
 800398c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	e009      	b.n	80039a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003994:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <_sbrk+0x64>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800399a:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <_sbrk+0x64>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	4a05      	ldr	r2, [pc, #20]	@ (80039b8 <_sbrk+0x64>)
 80039a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039a6:	68fb      	ldr	r3, [r7, #12]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200a0000 	.word	0x200a0000
 80039b4:	00000400 	.word	0x00000400
 80039b8:	20004ac4 	.word	0x20004ac4
 80039bc:	20004c18 	.word	0x20004c18

080039c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80039c6:	4b35      	ldr	r3, [pc, #212]	@ (8003a9c <SystemInit+0xdc>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039cc:	4a33      	ldr	r2, [pc, #204]	@ (8003a9c <SystemInit+0xdc>)
 80039ce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80039d6:	4b32      	ldr	r3, [pc, #200]	@ (8003aa0 <SystemInit+0xe0>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80039dc:	4b30      	ldr	r3, [pc, #192]	@ (8003aa0 <SystemInit+0xe0>)
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80039e2:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <SystemInit+0xe0>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80039e8:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa0 <SystemInit+0xe0>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	492c      	ldr	r1, [pc, #176]	@ (8003aa0 <SystemInit+0xe0>)
 80039ee:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <SystemInit+0xe4>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80039f4:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa0 <SystemInit+0xe0>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80039fa:	4b29      	ldr	r3, [pc, #164]	@ (8003aa0 <SystemInit+0xe0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8003a00:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <SystemInit+0xe0>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8003a06:	4b26      	ldr	r3, [pc, #152]	@ (8003aa0 <SystemInit+0xe0>)
 8003a08:	4a27      	ldr	r2, [pc, #156]	@ (8003aa8 <SystemInit+0xe8>)
 8003a0a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8003a0c:	4b24      	ldr	r3, [pc, #144]	@ (8003aa0 <SystemInit+0xe0>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8003a12:	4b23      	ldr	r3, [pc, #140]	@ (8003aa0 <SystemInit+0xe0>)
 8003a14:	4a24      	ldr	r2, [pc, #144]	@ (8003aa8 <SystemInit+0xe8>)
 8003a16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8003a18:	4b21      	ldr	r3, [pc, #132]	@ (8003aa0 <SystemInit+0xe0>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8003a1e:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <SystemInit+0xe0>)
 8003a20:	4a21      	ldr	r2, [pc, #132]	@ (8003aa8 <SystemInit+0xe8>)
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8003a24:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <SystemInit+0xe0>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa0 <SystemInit+0xe0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <SystemInit+0xe0>)
 8003a30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa0 <SystemInit+0xe0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a3c:	4b17      	ldr	r3, [pc, #92]	@ (8003a9c <SystemInit+0xdc>)
 8003a3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a42:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003a44:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <SystemInit+0xec>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003a4c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003a54:	d003      	beq.n	8003a5e <SystemInit+0x9e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a5c:	d117      	bne.n	8003a8e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8003a5e:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <SystemInit+0xec>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8003a6a:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <SystemInit+0xec>)
 8003a6c:	4a10      	ldr	r2, [pc, #64]	@ (8003ab0 <SystemInit+0xf0>)
 8003a6e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8003a70:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <SystemInit+0xec>)
 8003a72:	4a10      	ldr	r2, [pc, #64]	@ (8003ab4 <SystemInit+0xf4>)
 8003a74:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <SystemInit+0xec>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003aac <SystemInit+0xec>)
 8003a7c:	f043 0302 	orr.w	r3, r3, #2
 8003a80:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003a82:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <SystemInit+0xec>)
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	4a09      	ldr	r2, [pc, #36]	@ (8003aac <SystemInit+0xec>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	61d3      	str	r3, [r2, #28]
  }
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	e000ed00 	.word	0xe000ed00
 8003aa0:	44020c00 	.word	0x44020c00
 8003aa4:	eae2eae3 	.word	0xeae2eae3
 8003aa8:	01010280 	.word	0x01010280
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	08192a3b 	.word	0x08192a3b
 8003ab4:	4c5d6e7f 	.word	0x4c5d6e7f

08003ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ab8:	480d      	ldr	r0, [pc, #52]	@ (8003af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003aba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003abc:	f7ff ff80 	bl	80039c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ac0:	480c      	ldr	r0, [pc, #48]	@ (8003af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ac2:	490d      	ldr	r1, [pc, #52]	@ (8003af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8003afc <LoopForever+0xe>)
  movs r3, #0
 8003ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ac8:	e002      	b.n	8003ad0 <LoopCopyDataInit>

08003aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ace:	3304      	adds	r3, #4

08003ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ad4:	d3f9      	bcc.n	8003aca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8003b04 <LoopForever+0x16>)
  movs r3, #0
 8003ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003adc:	e001      	b.n	8003ae2 <LoopFillZerobss>

08003ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae0:	3204      	adds	r2, #4

08003ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ae4:	d3fb      	bcc.n	8003ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ae6:	f00b f97d 	bl	800ede4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003aea:	f7fe fb43 	bl	8002174 <main>

08003aee <LoopForever>:

LoopForever:
    b LoopForever
 8003aee:	e7fe      	b.n	8003aee <LoopForever>
  ldr   r0, =_estack
 8003af0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003afc:	080114d8 	.word	0x080114d8
  ldr r2, =_sbss
 8003b00:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003b04:	20004c18 	.word	0x20004c18

08003b08 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b08:	e7fe      	b.n	8003b08 <ADC1_IRQHandler>
	...

08003b0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b10:	2003      	movs	r0, #3
 8003b12:	f000 f98a 	bl	8003e2a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b16:	f001 ff2d 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b50 <HAL_Init+0x44>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	490b      	ldr	r1, [pc, #44]	@ (8003b54 <HAL_Init+0x48>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b58 <HAL_Init+0x4c>)
 8003b2e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003b30:	2004      	movs	r0, #4
 8003b32:	f000 f9cf 	bl	8003ed4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b36:	200f      	movs	r0, #15
 8003b38:	f000 f810 	bl	8003b5c <HAL_InitTick>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e002      	b.n	8003b4c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b46:	f7ff f9f2 	bl	8002f2e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	44020c00 	.word	0x44020c00
 8003b54:	08011114 	.word	0x08011114
 8003b58:	2000001c 	.word	0x2000001c

08003b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003b68:	4b33      	ldr	r3, [pc, #204]	@ (8003c38 <HAL_InitTick+0xdc>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e05c      	b.n	8003c2e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003b74:	4b31      	ldr	r3, [pc, #196]	@ (8003c3c <HAL_InitTick+0xe0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d10c      	bne.n	8003b9a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003b80:	4b2f      	ldr	r3, [pc, #188]	@ (8003c40 <HAL_InitTick+0xe4>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b2c      	ldr	r3, [pc, #176]	@ (8003c38 <HAL_InitTick+0xdc>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e037      	b.n	8003c0a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003b9a:	f000 f9f3 	bl	8003f84 <HAL_SYSTICK_GetCLKSourceConfig>
 8003b9e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d023      	beq.n	8003bee <HAL_InitTick+0x92>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d82d      	bhi.n	8003c08 <HAL_InitTick+0xac>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_InitTick+0x5e>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003bb8:	e026      	b.n	8003c08 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003bba:	4b21      	ldr	r3, [pc, #132]	@ (8003c40 <HAL_InitTick+0xe4>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003c38 <HAL_InitTick+0xdc>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003bc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	60fb      	str	r3, [r7, #12]
        break;
 8003bd2:	e01a      	b.n	8003c0a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003bd4:	4b18      	ldr	r3, [pc, #96]	@ (8003c38 <HAL_InitTick+0xdc>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bde:	fbb3 f3f2 	udiv	r3, r3, r2
 8003be2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	60fb      	str	r3, [r7, #12]
        break;
 8003bec:	e00d      	b.n	8003c0a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003bee:	4b12      	ldr	r3, [pc, #72]	@ (8003c38 <HAL_InitTick+0xdc>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bfc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	60fb      	str	r3, [r7, #12]
        break;
 8003c06:	e000      	b.n	8003c0a <HAL_InitTick+0xae>
        break;
 8003c08:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f940 	bl	8003e90 <HAL_SYSTICK_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e009      	b.n	8003c2e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c22:	f000 f90d 	bl	8003e40 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003c26:	4a07      	ldr	r2, [pc, #28]	@ (8003c44 <HAL_InitTick+0xe8>)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000024 	.word	0x20000024
 8003c3c:	e000e010 	.word	0xe000e010
 8003c40:	2000001c 	.word	0x2000001c
 8003c44:	20000020 	.word	0x20000020

08003c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <HAL_IncTick+0x20>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_IncTick+0x24>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	4a04      	ldr	r2, [pc, #16]	@ (8003c6c <HAL_IncTick+0x24>)
 8003c5a:	6013      	str	r3, [r2, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000024 	.word	0x20000024
 8003c6c:	20004ac8 	.word	0x20004ac8

08003c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return uwTick;
 8003c74:	4b03      	ldr	r3, [pc, #12]	@ (8003c84 <HAL_GetTick+0x14>)
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20004ac8 	.word	0x20004ac8

08003c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c90:	f7ff ffee 	bl	8003c70 <HAL_GetTick>
 8003c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d005      	beq.n	8003cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <HAL_Delay+0x44>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cae:	bf00      	nop
 8003cb0:	f7ff ffde 	bl	8003c70 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d8f7      	bhi.n	8003cb0 <HAL_Delay+0x28>
  {
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000024 	.word	0x20000024

08003cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cec:	4013      	ands	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d02:	4a04      	ldr	r2, [pc, #16]	@ (8003d14 <__NVIC_SetPriorityGrouping+0x44>)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	60d3      	str	r3, [r2, #12]
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d1c:	4b04      	ldr	r3, [pc, #16]	@ (8003d30 <__NVIC_GetPriorityGrouping+0x18>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	f003 0307 	and.w	r3, r3, #7
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	db0b      	blt.n	8003d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	f003 021f 	and.w	r2, r3, #31
 8003d4c:	4907      	ldr	r1, [pc, #28]	@ (8003d6c <__NVIC_EnableIRQ+0x38>)
 8003d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2001      	movs	r0, #1
 8003d56:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000e100 	.word	0xe000e100

08003d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	db0a      	blt.n	8003d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	490c      	ldr	r1, [pc, #48]	@ (8003dbc <__NVIC_SetPriority+0x4c>)
 8003d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d8e:	0112      	lsls	r2, r2, #4
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	440b      	add	r3, r1
 8003d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d98:	e00a      	b.n	8003db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	4908      	ldr	r1, [pc, #32]	@ (8003dc0 <__NVIC_SetPriority+0x50>)
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	3b04      	subs	r3, #4
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	440b      	add	r3, r1
 8003dae:	761a      	strb	r2, [r3, #24]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000e100 	.word	0xe000e100
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b089      	sub	sp, #36	@ 0x24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f1c3 0307 	rsb	r3, r3, #7
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	bf28      	it	cs
 8003de2:	2304      	movcs	r3, #4
 8003de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d902      	bls.n	8003df4 <NVIC_EncodePriority+0x30>
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3b03      	subs	r3, #3
 8003df2:	e000      	b.n	8003df6 <NVIC_EncodePriority+0x32>
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	401a      	ands	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fa01 f303 	lsl.w	r3, r1, r3
 8003e16:	43d9      	mvns	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	4313      	orrs	r3, r2
         );
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3724      	adds	r7, #36	@ 0x24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ff4c 	bl	8003cd0 <__NVIC_SetPriorityGrouping>
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e4e:	f7ff ff63 	bl	8003d18 <__NVIC_GetPriorityGrouping>
 8003e52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	6978      	ldr	r0, [r7, #20]
 8003e5a:	f7ff ffb3 	bl	8003dc4 <NVIC_EncodePriority>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff ff82 	bl	8003d70 <__NVIC_SetPriority>
}
 8003e6c:	bf00      	nop
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff ff56 	bl	8003d34 <__NVIC_EnableIRQ>
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ea0:	d301      	bcc.n	8003ea6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00d      	b.n	8003ec2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed0 <HAL_SYSTICK_Config+0x40>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003eae:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <HAL_SYSTICK_Config+0x40>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003eb4:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_SYSTICK_Config+0x40>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a05      	ldr	r2, [pc, #20]	@ (8003ed0 <HAL_SYSTICK_Config+0x40>)
 8003eba:	f043 0303 	orr.w	r3, r3, #3
 8003ebe:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000e010 	.word	0xe000e010

08003ed4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d844      	bhi.n	8003f6c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003f0b 	.word	0x08003f0b
 8003eec:	08003f29 	.word	0x08003f29
 8003ef0:	08003f4b 	.word	0x08003f4b
 8003ef4:	08003f6d 	.word	0x08003f6d
 8003ef8:	08003efd 	.word	0x08003efd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003efc:	4b1f      	ldr	r3, [pc, #124]	@ (8003f7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1e      	ldr	r2, [pc, #120]	@ (8003f7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6013      	str	r3, [r2, #0]
      break;
 8003f08:	e031      	b.n	8003f6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003f10:	f023 0304 	bic.w	r3, r3, #4
 8003f14:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003f16:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003f18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f1c:	4a18      	ldr	r2, [pc, #96]	@ (8003f80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003f1e:	f023 030c 	bic.w	r3, r3, #12
 8003f22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003f26:	e022      	b.n	8003f6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003f28:	4b14      	ldr	r3, [pc, #80]	@ (8003f7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003f2e:	f023 0304 	bic.w	r3, r3, #4
 8003f32:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003f34:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003f36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f3a:	f023 030c 	bic.w	r3, r3, #12
 8003f3e:	4a10      	ldr	r2, [pc, #64]	@ (8003f80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003f48:	e011      	b.n	8003f6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8003f7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003f50:	f023 0304 	bic.w	r3, r3, #4
 8003f54:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003f58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f5c:	f023 030c 	bic.w	r3, r3, #12
 8003f60:	4a07      	ldr	r2, [pc, #28]	@ (8003f80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003f62:	f043 0308 	orr.w	r3, r3, #8
 8003f66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003f6a:	e000      	b.n	8003f6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003f6c:	bf00      	nop
  }
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	e000e010 	.word	0xe000e010
 8003f80:	44020c00 	.word	0x44020c00

08003f84 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003f8a:	4b17      	ldr	r3, [pc, #92]	@ (8003fe8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003f96:	2304      	movs	r3, #4
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	e01e      	b.n	8003fda <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003f9c:	4b13      	ldr	r3, [pc, #76]	@ (8003fec <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003f9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d00f      	beq.n	8003fce <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d80f      	bhi.n	8003fd4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d003      	beq.n	8003fc8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003fc0:	e008      	b.n	8003fd4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
        break;
 8003fc6:	e008      	b.n	8003fda <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	607b      	str	r3, [r7, #4]
        break;
 8003fcc:	e005      	b.n	8003fda <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	607b      	str	r3, [r7, #4]
        break;
 8003fd2:	e002      	b.n	8003fda <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	607b      	str	r3, [r7, #4]
        break;
 8003fd8:	bf00      	nop
    }
  }
  return systick_source;
 8003fda:	687b      	ldr	r3, [r7, #4]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000e010 	.word	0xe000e010
 8003fec:	44020c00 	.word	0x44020c00

08003ff0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003ff8:	f7ff fe3a 	bl	8003c70 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e06b      	b.n	80040e0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d008      	beq.n	8004026 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e05c      	b.n	80040e0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0204 	orr.w	r2, r2, #4
 8004034:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2205      	movs	r2, #5
 800403a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800403e:	e020      	b.n	8004082 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004040:	f7ff fe16 	bl	8003c70 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b05      	cmp	r3, #5
 800404c:	d919      	bls.n	8004082 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004052:	f043 0210 	orr.w	r2, r3, #16
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2203      	movs	r2, #3
 800405e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004072:	2201      	movs	r2, #1
 8004074:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e02e      	b.n	80040e0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0d7      	beq.n	8004040 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0202 	orr.w	r2, r2, #2
 800409e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2204      	movs	r2, #4
 80040a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80040b0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ca:	2201      	movs	r2, #1
 80040cc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e019      	b.n	800412e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d004      	beq.n	8004110 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e00e      	b.n	800412e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2204      	movs	r2, #4
 8004114:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004126:	f043 0304 	orr.w	r3, r3, #4
 800412a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800414a:	e136      	b.n	80043ba <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	2101      	movs	r1, #1
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 8128 	beq.w	80043b4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x38>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b12      	cmp	r3, #18
 8004172:	d125      	bne.n	80041c0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	08da      	lsrs	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3208      	adds	r2, #8
 800417c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004180:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	220f      	movs	r2, #15
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4013      	ands	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	08da      	lsrs	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3208      	adds	r2, #8
 80041ba:	6979      	ldr	r1, [r7, #20]
 80041bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	2203      	movs	r2, #3
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4013      	ands	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0203 	and.w	r2, r3, #3
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d00b      	beq.n	8004214 <HAL_GPIO_Init+0xd8>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d007      	beq.n	8004214 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004208:	2b11      	cmp	r3, #17
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b12      	cmp	r3, #18
 8004212:	d130      	bne.n	8004276 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	2203      	movs	r2, #3
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4013      	ands	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800424a:	2201      	movs	r2, #1
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4013      	ands	r3, r2
 8004258:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 0201 	and.w	r2, r3, #1
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d017      	beq.n	80042ae <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	2203      	movs	r2, #3
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4013      	ands	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d07c      	beq.n	80043b4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80042ba:	4a47      	ldr	r2, [pc, #284]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	3318      	adds	r3, #24
 80042c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	220f      	movs	r2, #15
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4013      	ands	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	0a9a      	lsrs	r2, r3, #10
 80042e2:	4b3e      	ldr	r3, [pc, #248]	@ (80043dc <HAL_GPIO_Init+0x2a0>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	f002 0203 	and.w	r2, r2, #3
 80042ec:	00d2      	lsls	r2, r2, #3
 80042ee:	4093      	lsls	r3, r2
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80042f6:	4938      	ldr	r1, [pc, #224]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3318      	adds	r3, #24
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004304:	4b34      	ldr	r3, [pc, #208]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	43db      	mvns	r3, r3
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4013      	ands	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004328:	4a2b      	ldr	r2, [pc, #172]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800432e:	4b2a      	ldr	r3, [pc, #168]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	43db      	mvns	r3, r3
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4013      	ands	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004352:	4a21      	ldr	r2, [pc, #132]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004358:	4b1f      	ldr	r3, [pc, #124]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 800435a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800435e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	43db      	mvns	r3, r3
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4013      	ands	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800437e:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004386:	4b14      	ldr	r3, [pc, #80]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 8004388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800438c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	43db      	mvns	r3, r3
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4013      	ands	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80043ac:	4a0a      	ldr	r2, [pc, #40]	@ (80043d8 <HAL_GPIO_Init+0x29c>)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	3301      	adds	r3, #1
 80043b8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f47f aec1 	bne.w	800414c <HAL_GPIO_Init+0x10>
  }
}
 80043ca:	bf00      	nop
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	44022000 	.word	0x44022000
 80043dc:	002f7f7f 	.word	0x002f7f7f

080043e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]
 80043ec:	4613      	mov	r3, r2
 80043ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043f0:	787b      	ldrb	r3, [r7, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043fc:	e002      	b.n	8004404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043fe:	887a      	ldrh	r2, [r7, #2]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4013      	ands	r3, r2
 8004428:	041a      	lsls	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	43d9      	mvns	r1, r3
 800442e:	887b      	ldrh	r3, [r7, #2]
 8004430:	400b      	ands	r3, r1
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800444e:	4b0f      	ldr	r3, [pc, #60]	@ (800448c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d006      	beq.n	8004468 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800445a:	4a0c      	ldr	r2, [pc, #48]	@ (800448c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f814 	bl	8004490 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004468:	4b08      	ldr	r3, [pc, #32]	@ (800448c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d006      	beq.n	8004482 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004474:	4a05      	ldr	r2, [pc, #20]	@ (800448c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fd45 	bl	8002f0c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	44022000 	.word	0x44022000

08004490 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e037      	b.n	800452e <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff f936 	bl	8003744 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f009 fe42 	bl	800e16c <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	461a      	mov	r2, r3
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	f009 fe64 	bl	800e1c0 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	461a      	mov	r2, r3
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	f009 fe79 	bl	800e1fa <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0204 	orr.w	r2, r2, #4
 8004516:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004518:	4b07      	ldr	r3, [pc, #28]	@ (8004538 <HAL_NAND_Init+0x90>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a06      	ldr	r2, [pc, #24]	@ (8004538 <HAL_NAND_Init+0x90>)
 800451e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004522:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	47000400 	.word	0x47000400

0800453c <HAL_NAND_Read_ID>:
  *                the configuration information for NAND module.
  * @param  pNAND_ID NAND ID structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  __IO uint32_t data = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
  __IO uint32_t data1 = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d101      	bne.n	800455e <HAL_NAND_Read_ID+0x22>
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
 800455c:	e066      	b.n	800462c <HAL_NAND_Read_ID+0xf0>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d15f      	bne.n	800462a <HAL_NAND_Read_ID+0xee>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_NAND_Read_ID+0x3c>
 8004574:	2302      	movs	r3, #2
 8004576:	e059      	b.n	800462c <HAL_NAND_Read_ID+0xf0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8004588:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800458c:	617b      	str	r3, [r7, #20]

    /* Send Read ID command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004594:	2290      	movs	r2, #144	@ 0x90
 8004596:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004598:	f3bf 8f4f 	dsb	sy
}
 800459c:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80045a8:	f3bf 8f4f 	dsb	sy
}
 80045ac:	bf00      	nop
    __DSB();

    /* Read the electronic signature from NAND flash */
    if (hnand->Init.MemoryDataWidth == FMC_NAND_MEM_BUS_WIDTH_8)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d116      	bne.n	80045e4 <HAL_NAND_Read_ID+0xa8>
    {
      data = *(__IO uint32_t *)deviceaddress;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	613b      	str	r3, [r7, #16]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	0e1b      	lsrs	r3, r3, #24
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	70da      	strb	r2, [r3, #3]
 80045e2:	e018      	b.n	8004616 <HAL_NAND_Read_ID+0xda>
    }
    else
    {
      data = *(__IO uint32_t *)deviceaddress;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	613b      	str	r3, [r7, #16]
      data1 = *((__IO uint32_t *)deviceaddress + 4);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	3310      	adds	r3, #16
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60fb      	str	r3, [r7, #12]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	0c1b      	lsrs	r3, r3, #16
 8004610:	b2da      	uxtb	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	70da      	strb	r2, [r3, #3]
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e000      	b.n	800462c <HAL_NAND_Read_ID+0xf0>
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d101      	bne.n	8004650 <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
 800464e:	e027      	b.n	80046a0 <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d120      	bne.n	800469e <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_NAND_Reset+0x32>
 8004666:	2302      	movs	r3, #2
 8004668:	e01a      	b.n	80046a0 <HAL_NAND_Reset+0x68>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 800467a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800467e:	60fb      	str	r3, [r7, #12]

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004686:	22ff      	movs	r2, #255	@ 0xff
 8004688:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1

}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	@ 0x30
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d101      	bne.n	80046d6 <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
 80046d4:	e140      	b.n	8004958 <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	f040 8139 	bne.w	8004956 <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_NAND_Read_Page_8b+0x46>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e132      	b.n	8004958 <HAL_NAND_Read_Page_8b+0x2ac>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8004702:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004706:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	4619      	mov	r1, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	889b      	ldrh	r3, [r3, #4]
 8004712:	461a      	mov	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	885b      	ldrh	r3, [r3, #2]
 8004718:	4618      	mov	r0, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	fb00 f303 	mul.w	r3, r0, r3
 8004722:	4413      	add	r3, r2
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	440b      	add	r3, r1
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004730:	e0fa      	b.n	8004928 <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800473c:	f3bf 8f4f 	dsb	sy
}
 8004740:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800474a:	d848      	bhi.n	80047de <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004754:	fb02 f303 	mul.w	r3, r2, r3
 8004758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475c:	d21a      	bcs.n	8004794 <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004768:	f3bf 8f4f 	dsb	sy
}
 800476c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800477a:	f3bf 8f4f 	dsb	sy
}
 800477e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	0a1a      	lsrs	r2, r3, #8
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800478e:	f3bf 8f4f 	dsb	sy
}
 8004792:	e07d      	b.n	8004890 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800479e:	f3bf 8f4f 	dsb	sy
}
 80047a2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80047b0:	f3bf 8f4f 	dsb	sy
}
 80047b4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	0a1a      	lsrs	r2, r3, #8
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80047c4:	f3bf 8f4f 	dsb	sy
}
 80047c8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	0c1a      	lsrs	r2, r3, #16
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80047d8:	f3bf 8f4f 	dsb	sy
}
 80047dc:	e058      	b.n	8004890 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ee:	d222      	bcs.n	8004836 <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80047fa:	f3bf 8f4f 	dsb	sy
}
 80047fe:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800480a:	f3bf 8f4f 	dsb	sy
}
 800480e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800481c:	f3bf 8f4f 	dsb	sy
}
 8004820:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	0a1a      	lsrs	r2, r3, #8
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004830:	f3bf 8f4f 	dsb	sy
}
 8004834:	e02c      	b.n	8004890 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800483c:	2200      	movs	r2, #0
 800483e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004840:	f3bf 8f4f 	dsb	sy
}
 8004844:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004850:	f3bf 8f4f 	dsb	sy
}
 8004854:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800485c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004862:	f3bf 8f4f 	dsb	sy
}
 8004866:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	0a1a      	lsrs	r2, r3, #8
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004876:	f3bf 8f4f 	dsb	sy
}
 800487a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	0c1a      	lsrs	r2, r3, #16
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800488a:	f3bf 8f4f 	dsb	sy
}
 800488e:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004896:	2230      	movs	r2, #48	@ 0x30
 8004898:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800489a:	f3bf 8f4f 	dsb	sy
}
 800489e:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d123      	bne.n	80048f2 <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048aa:	f7ff f9e1 	bl	8003c70 <HAL_GetTick>
 80048ae:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80048b0:	e011      	b.n	80048d6 <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80048b2:	f7ff f9dd 	bl	8003c70 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c0:	d909      	bls.n	80048d6 <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2203      	movs	r2, #3
 80048c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e040      	b.n	8004958 <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fa37 	bl	8004d4a <HAL_NAND_Read_Status>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b40      	cmp	r3, #64	@ 0x40
 80048e0:	d1e7      	bne.n	80048b2 <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80048ec:	f3bf 8f4f 	dsb	sy
}
 80048f0:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048f6:	e009      	b.n	800490c <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	701a      	strb	r2, [r3, #0]
        buff++;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3301      	adds	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	3301      	adds	r3, #1
 800490a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004912:	429a      	cmp	r2, r3
 8004914:	d3f0      	bcc.n	80048f8 <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	3301      	adds	r3, #1
 800491a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	3b01      	subs	r3, #1
 8004920:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	3301      	adds	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <HAL_NAND_Read_Page_8b+0x296>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493c:	429a      	cmp	r2, r3
 800493e:	f4ff aef8 	bcc.w	8004732 <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
}
 8004958:	4618      	mov	r0, r3
 800495a:	3730      	adds	r7, #48	@ 0x30
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08c      	sub	sp, #48	@ 0x30
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d101      	bne.n	800498a <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
 8004988:	e13e      	b.n	8004c08 <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	f040 8137 	bne.w	8004c06 <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_NAND_Write_Page_8b+0x46>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e130      	b.n	8004c08 <HAL_NAND_Write_Page_8b+0x2a8>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80049b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80049ba:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	4619      	mov	r1, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	889b      	ldrh	r3, [r3, #4]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	885b      	ldrh	r3, [r3, #2]
 80049cc:	4618      	mov	r0, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d2:	fb00 f303 	mul.w	r3, r0, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	440b      	add	r3, r1
 80049e2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80049e4:	e0f8      	b.n	8004bd8 <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80049f0:	f3bf 8f4f 	dsb	sy
}
 80049f4:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049fc:	2280      	movs	r2, #128	@ 0x80
 80049fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a00:	f3bf 8f4f 	dsb	sy
}
 8004a04:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a0e:	d848      	bhi.n	8004aa2 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a20:	d21a      	bcs.n	8004a58 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a2c:	f3bf 8f4f 	dsb	sy
}
 8004a30:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a3e:	f3bf 8f4f 	dsb	sy
}
 8004a42:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	0a1a      	lsrs	r2, r3, #8
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a52:	f3bf 8f4f 	dsb	sy
}
 8004a56:	e07d      	b.n	8004b54 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a62:	f3bf 8f4f 	dsb	sy
}
 8004a66:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a74:	f3bf 8f4f 	dsb	sy
}
 8004a78:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	0a1a      	lsrs	r2, r3, #8
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a88:	f3bf 8f4f 	dsb	sy
}
 8004a8c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	0c1a      	lsrs	r2, r3, #16
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a9c:	f3bf 8f4f 	dsb	sy
}
 8004aa0:	e058      	b.n	8004b54 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab2:	d222      	bcs.n	8004afa <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004abe:	f3bf 8f4f 	dsb	sy
}
 8004ac2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ace:	f3bf 8f4f 	dsb	sy
}
 8004ad2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ae0:	f3bf 8f4f 	dsb	sy
}
 8004ae4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	0a1a      	lsrs	r2, r3, #8
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004af4:	f3bf 8f4f 	dsb	sy
}
 8004af8:	e02c      	b.n	8004b54 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b04:	f3bf 8f4f 	dsb	sy
}
 8004b08:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b14:	f3bf 8f4f 	dsb	sy
}
 8004b18:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b26:	f3bf 8f4f 	dsb	sy
}
 8004b2a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	0a1a      	lsrs	r2, r3, #8
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b3a:	f3bf 8f4f 	dsb	sy
}
 8004b3e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	0c1a      	lsrs	r2, r3, #16
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b4e:	f3bf 8f4f 	dsb	sy
}
 8004b52:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8004b54:	2300      	movs	r3, #0
 8004b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b58:	e00c      	b.n	8004b74 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	701a      	strb	r2, [r3, #0]
        buff++;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b68:	f3bf 8f4f 	dsb	sy
}
 8004b6c:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8004b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b70:	3301      	adds	r3, #1
 8004b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d3ed      	bcc.n	8004b5a <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b84:	2210      	movs	r2, #16
 8004b86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b88:	f3bf 8f4f 	dsb	sy
}
 8004b8c:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8004b8e:	f7ff f86f 	bl	8003c70 <HAL_GetTick>
 8004b92:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004b94:	e011      	b.n	8004bba <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8004b96:	f7ff f86b 	bl	8003c70 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ba4:	d909      	bls.n	8004bba <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2203      	movs	r2, #3
 8004baa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e026      	b.n	8004c08 <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f8c5 	bl	8004d4a <HAL_NAND_Read_Status>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b40      	cmp	r3, #64	@ 0x40
 8004bc4:	d1e7      	bne.n	8004b96 <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	3301      	adds	r3, #1
 8004bca:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_NAND_Write_Page_8b+0x292>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bec:	429a      	cmp	r2, r3
 8004bee:	f4ff aefa 	bcc.w	80049e6 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3730      	adds	r7, #48	@ 0x30
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d101      	bne.n	8004c2a <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8004c26:	2302      	movs	r3, #2
 8004c28:	e089      	b.n	8004d3e <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	f040 8082 	bne.w	8004d3c <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_NAND_Erase_Block+0x36>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e07b      	b.n	8004d3e <HAL_NAND_Erase_Block+0x12e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2202      	movs	r2, #2
 8004c52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8004c56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004c5a:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c62:	2260      	movs	r2, #96	@ 0x60
 8004c64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c66:	f3bf 8f4f 	dsb	sy
}
 8004c6a:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	889b      	ldrh	r3, [r3, #4]
 8004c76:	4619      	mov	r1, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	885b      	ldrh	r3, [r3, #2]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c82:	fb00 f303 	mul.w	r3, r0, r3
 8004c86:	440b      	add	r3, r1
 8004c88:	b2d9      	uxtb	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	fb11 f303 	smulbb	r3, r1, r3
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004c9c:	4413      	add	r3, r2
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ca2:	f3bf 8f4f 	dsb	sy
}
 8004ca6:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	4619      	mov	r1, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	889b      	ldrh	r3, [r3, #4]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	885b      	ldrh	r3, [r3, #2]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbe:	fb00 f303 	mul.w	r3, r0, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	440b      	add	r3, r1
 8004cce:	0a1a      	lsrs	r2, r3, #8
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cda:	f3bf 8f4f 	dsb	sy
}
 8004cde:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	889b      	ldrh	r3, [r3, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	885b      	ldrh	r3, [r3, #2]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf6:	fb00 f303 	mul.w	r3, r0, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	440b      	add	r3, r1
 8004d06:	0c1a      	lsrs	r2, r3, #16
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d12:	f3bf 8f4f 	dsb	sy
}
 8004d16:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1e:	22d0      	movs	r2, #208	@ 0xd0
 8004d20:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d22:	f3bf 8f4f 	dsb	sy
}
 8004d26:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e000      	b.n	8004d3e <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8004d52:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d5e:	2270      	movs	r2, #112	@ 0x70
 8004d60:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e007      	b.n	8004d88 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8004d82:	2340      	movs	r3, #64	@ 0x40
 8004d84:	e000      	b.n	8004d88 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8004d86:	2300      	movs	r3, #0
  }
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f000 bc28 	b.w	80055f8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da8:	4b94      	ldr	r3, [pc, #592]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f003 0318 	and.w	r3, r3, #24
 8004db0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004db2:	4b92      	ldr	r3, [pc, #584]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d05b      	beq.n	8004e80 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x46>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b18      	cmp	r3, #24
 8004dd2:	d114      	bne.n	8004dfe <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d111      	bne.n	8004dfe <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f000 bc08 	b.w	80055f8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004de8:	4b84      	ldr	r3, [pc, #528]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	041b      	lsls	r3, r3, #16
 8004df6:	4981      	ldr	r1, [pc, #516]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004dfc:	e040      	b.n	8004e80 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d023      	beq.n	8004e4e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e06:	4b7d      	ldr	r3, [pc, #500]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fe ff2d 	bl	8003c70 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004e1a:	f7fe ff29 	bl	8003c70 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e3e5      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004e2c:	4b73      	ldr	r3, [pc, #460]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004e38:	4b70      	ldr	r3, [pc, #448]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	041b      	lsls	r3, r3, #16
 8004e46:	496d      	ldr	r1, [pc, #436]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	618b      	str	r3, [r1, #24]
 8004e4c:	e018      	b.n	8004e80 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e4e:	4b6b      	ldr	r3, [pc, #428]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a6a      	ldr	r2, [pc, #424]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fe ff09 	bl	8003c70 <HAL_GetTick>
 8004e5e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004e62:	f7fe ff05 	bl	8003c70 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e3c1      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004e74:	4b61      	ldr	r3, [pc, #388]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f0      	bne.n	8004e62 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80a0 	beq.w	8004fce <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d005      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x10c>
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	2b18      	cmp	r3, #24
 8004e98:	d109      	bne.n	8004eae <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f040 8092 	bne.w	8004fce <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e3a4      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x132>
 8004eb8:	4b50      	ldr	r3, [pc, #320]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e058      	b.n	8004f78 <HAL_RCC_OscConfig+0x1e4>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d112      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x160>
 8004ece:	4b4b      	ldr	r3, [pc, #300]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	4b48      	ldr	r3, [pc, #288]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a47      	ldr	r2, [pc, #284]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004ee0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4b45      	ldr	r3, [pc, #276]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a44      	ldr	r2, [pc, #272]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e041      	b.n	8004f78 <HAL_RCC_OscConfig+0x1e4>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004efc:	d112      	bne.n	8004f24 <HAL_RCC_OscConfig+0x190>
 8004efe:	4b3f      	ldr	r3, [pc, #252]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a3e      	ldr	r2, [pc, #248]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	4b39      	ldr	r3, [pc, #228]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a38      	ldr	r2, [pc, #224]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e029      	b.n	8004f78 <HAL_RCC_OscConfig+0x1e4>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004f2c:	d112      	bne.n	8004f54 <HAL_RCC_OscConfig+0x1c0>
 8004f2e:	4b33      	ldr	r3, [pc, #204]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a32      	ldr	r2, [pc, #200]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4b30      	ldr	r3, [pc, #192]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b2d      	ldr	r3, [pc, #180]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e011      	b.n	8004f78 <HAL_RCC_OscConfig+0x1e4>
 8004f54:	4b29      	ldr	r3, [pc, #164]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a28      	ldr	r2, [pc, #160]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	4b26      	ldr	r3, [pc, #152]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a25      	ldr	r2, [pc, #148]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4b23      	ldr	r3, [pc, #140]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a22      	ldr	r2, [pc, #136]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f72:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d013      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fe fe76 	bl	8003c70 <HAL_GetTick>
 8004f84:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004f88:	f7fe fe72 	bl	8003c70 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b64      	cmp	r3, #100	@ 0x64
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e32e      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f9a:	4b18      	ldr	r3, [pc, #96]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x1f4>
 8004fa6:	e012      	b.n	8004fce <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fe fe62 	bl	8003c70 <HAL_GetTick>
 8004fac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004fb0:	f7fe fe5e 	bl	8003c70 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	@ 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e31a      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <HAL_RCC_OscConfig+0x268>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 809a 	beq.w	8005110 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_RCC_OscConfig+0x25a>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2b18      	cmp	r3, #24
 8004fe6:	d149      	bne.n	800507c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d146      	bne.n	800507c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d104      	bne.n	8005000 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e2fe      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
 8004ffa:	bf00      	nop
 8004ffc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11c      	bne.n	8005040 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005006:	4b9a      	ldr	r3, [pc, #616]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0218 	and.w	r2, r3, #24
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d014      	beq.n	8005040 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005016:	4b96      	ldr	r3, [pc, #600]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f023 0218 	bic.w	r2, r3, #24
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	4993      	ldr	r1, [pc, #588]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005024:	4313      	orrs	r3, r2
 8005026:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005028:	f000 fdd0 	bl	8005bcc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800502c:	4b91      	ldr	r3, [pc, #580]	@ (8005274 <HAL_RCC_OscConfig+0x4e0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe fd93 	bl	8003b5c <HAL_InitTick>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e2db      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fe fe16 	bl	8003c70 <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005048:	f7fe fe12 	bl	8003c70 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e2ce      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800505a:	4b85      	ldr	r3, [pc, #532]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005066:	4b82      	ldr	r3, [pc, #520]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	041b      	lsls	r3, r3, #16
 8005074:	497e      	ldr	r1, [pc, #504]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800507a:	e049      	b.n	8005110 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d02c      	beq.n	80050de <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005084:	4b7a      	ldr	r3, [pc, #488]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 0218 	bic.w	r2, r3, #24
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	4977      	ldr	r1, [pc, #476]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005096:	4b76      	ldr	r3, [pc, #472]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a75      	ldr	r2, [pc, #468]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fe fde5 	bl	8003c70 <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80050aa:	f7fe fde1 	bl	8003c70 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e29d      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80050c8:	4b69      	ldr	r3, [pc, #420]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	4966      	ldr	r1, [pc, #408]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	610b      	str	r3, [r1, #16]
 80050dc:	e018      	b.n	8005110 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050de:	4b64      	ldr	r3, [pc, #400]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a63      	ldr	r2, [pc, #396]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ea:	f7fe fdc1 	bl	8003c70 <HAL_GetTick>
 80050ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80050f2:	f7fe fdbd 	bl	8003c70 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e279      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005104:	4b5a      	ldr	r3, [pc, #360]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f0      	bne.n	80050f2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d03c      	beq.n	8005196 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01c      	beq.n	800515e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005124:	4b52      	ldr	r3, [pc, #328]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800512a:	4a51      	ldr	r2, [pc, #324]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 800512c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005130:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fe fd9c 	bl	8003c70 <HAL_GetTick>
 8005138:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800513c:	f7fe fd98 	bl	8003c70 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e254      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800514e:	4b48      	ldr	r3, [pc, #288]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ef      	beq.n	800513c <HAL_RCC_OscConfig+0x3a8>
 800515c:	e01b      	b.n	8005196 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800515e:	4b44      	ldr	r3, [pc, #272]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005164:	4a42      	ldr	r2, [pc, #264]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005166:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800516a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516e:	f7fe fd7f 	bl	8003c70 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005176:	f7fe fd7b 	bl	8003c70 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e237      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005188:	4b39      	ldr	r3, [pc, #228]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 800518a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800518e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1ef      	bne.n	8005176 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80d2 	beq.w	8005348 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80051a4:	4b34      	ldr	r3, [pc, #208]	@ (8005278 <HAL_RCC_OscConfig+0x4e4>)
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d118      	bne.n	80051e2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80051b0:	4b31      	ldr	r3, [pc, #196]	@ (8005278 <HAL_RCC_OscConfig+0x4e4>)
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	4a30      	ldr	r2, [pc, #192]	@ (8005278 <HAL_RCC_OscConfig+0x4e4>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051bc:	f7fe fd58 	bl	8003c70 <HAL_GetTick>
 80051c0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c4:	f7fe fd54 	bl	8003c70 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e210      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80051d6:	4b28      	ldr	r3, [pc, #160]	@ (8005278 <HAL_RCC_OscConfig+0x4e4>)
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d108      	bne.n	80051fc <HAL_RCC_OscConfig+0x468>
 80051ea:	4b21      	ldr	r3, [pc, #132]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 80051ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051fa:	e074      	b.n	80052e6 <HAL_RCC_OscConfig+0x552>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d118      	bne.n	8005236 <HAL_RCC_OscConfig+0x4a2>
 8005204:	4b1a      	ldr	r3, [pc, #104]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800520a:	4a19      	ldr	r2, [pc, #100]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005214:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800521a:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 800521c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005220:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005224:	4b12      	ldr	r3, [pc, #72]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800522a:	4a11      	ldr	r2, [pc, #68]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005234:	e057      	b.n	80052e6 <HAL_RCC_OscConfig+0x552>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b05      	cmp	r3, #5
 800523c:	d11e      	bne.n	800527c <HAL_RCC_OscConfig+0x4e8>
 800523e:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005244:	4a0a      	ldr	r2, [pc, #40]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005246:	f043 0304 	orr.w	r3, r3, #4
 800524a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800524e:	4b08      	ldr	r3, [pc, #32]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005254:	4a06      	ldr	r2, [pc, #24]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800525a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800525e:	4b04      	ldr	r3, [pc, #16]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005264:	4a02      	ldr	r2, [pc, #8]	@ (8005270 <HAL_RCC_OscConfig+0x4dc>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800526e:	e03a      	b.n	80052e6 <HAL_RCC_OscConfig+0x552>
 8005270:	44020c00 	.word	0x44020c00
 8005274:	20000020 	.word	0x20000020
 8005278:	44020800 	.word	0x44020800
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b85      	cmp	r3, #133	@ 0x85
 8005282:	d118      	bne.n	80052b6 <HAL_RCC_OscConfig+0x522>
 8005284:	4ba2      	ldr	r3, [pc, #648]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800528a:	4aa1      	ldr	r2, [pc, #644]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005294:	4b9e      	ldr	r3, [pc, #632]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800529a:	4a9d      	ldr	r2, [pc, #628]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 800529c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052a4:	4b9a      	ldr	r3, [pc, #616]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80052a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052aa:	4a99      	ldr	r2, [pc, #612]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80052ac:	f043 0301 	orr.w	r3, r3, #1
 80052b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052b4:	e017      	b.n	80052e6 <HAL_RCC_OscConfig+0x552>
 80052b6:	4b96      	ldr	r3, [pc, #600]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80052b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052bc:	4a94      	ldr	r2, [pc, #592]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052c6:	4b92      	ldr	r3, [pc, #584]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80052c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052cc:	4a90      	ldr	r2, [pc, #576]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80052ce:	f023 0304 	bic.w	r3, r3, #4
 80052d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052d6:	4b8e      	ldr	r3, [pc, #568]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80052d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052dc:	4a8c      	ldr	r2, [pc, #560]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80052de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d016      	beq.n	800531c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ee:	f7fe fcbf 	bl	8003c70 <HAL_GetTick>
 80052f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f4:	e00a      	b.n	800530c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f7fe fcbb 	bl	8003c70 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e175      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800530c:	4b80      	ldr	r3, [pc, #512]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 800530e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0ed      	beq.n	80052f6 <HAL_RCC_OscConfig+0x562>
 800531a:	e015      	b.n	8005348 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fe fca8 	bl	8003c70 <HAL_GetTick>
 8005320:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005322:	e00a      	b.n	800533a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005324:	f7fe fca4 	bl	8003c70 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e15e      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800533a:	4b75      	ldr	r3, [pc, #468]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 800533c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1ed      	bne.n	8005324 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d036      	beq.n	80053c2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	d019      	beq.n	8005390 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800535c:	4b6c      	ldr	r3, [pc, #432]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a6b      	ldr	r2, [pc, #428]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005362:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005366:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fe fc82 	bl	8003c70 <HAL_GetTick>
 800536c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005370:	f7fe fc7e 	bl	8003c70 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e13a      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005382:	4b63      	ldr	r3, [pc, #396]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x5dc>
 800538e:	e018      	b.n	80053c2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005390:	4b5f      	ldr	r3, [pc, #380]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a5e      	ldr	r2, [pc, #376]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800539a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539c:	f7fe fc68 	bl	8003c70 <HAL_GetTick>
 80053a0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80053a4:	f7fe fc64 	bl	8003c70 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e120      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80053b6:	4b56      	ldr	r3, [pc, #344]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8115 	beq.w	80055f6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b18      	cmp	r3, #24
 80053d0:	f000 80af 	beq.w	8005532 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d8:	2b02      	cmp	r3, #2
 80053da:	f040 8086 	bne.w	80054ea <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80053de:	4b4c      	ldr	r3, [pc, #304]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a4b      	ldr	r2, [pc, #300]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80053e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ea:	f7fe fc41 	bl	8003c70 <HAL_GetTick>
 80053ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80053f2:	f7fe fc3d 	bl	8003c70 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e0f9      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005404:	4b42      	ldr	r3, [pc, #264]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f0      	bne.n	80053f2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005410:	4b3f      	ldr	r3, [pc, #252]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005414:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005418:	f023 0303 	bic.w	r3, r3, #3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005424:	0212      	lsls	r2, r2, #8
 8005426:	430a      	orrs	r2, r1
 8005428:	4939      	ldr	r1, [pc, #228]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 800542a:	4313      	orrs	r3, r2
 800542c:	628b      	str	r3, [r1, #40]	@ 0x28
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005432:	3b01      	subs	r3, #1
 8005434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543c:	3b01      	subs	r3, #1
 800543e:	025b      	lsls	r3, r3, #9
 8005440:	b29b      	uxth	r3, r3
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005448:	3b01      	subs	r3, #1
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	3b01      	subs	r3, #1
 8005458:	061b      	lsls	r3, r3, #24
 800545a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800545e:	492c      	ldr	r1, [pc, #176]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005460:	4313      	orrs	r3, r2
 8005462:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005464:	4b2a      	ldr	r3, [pc, #168]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	4a29      	ldr	r2, [pc, #164]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 800546a:	f023 0310 	bic.w	r3, r3, #16
 800546e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005474:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800547a:	4b25      	ldr	r3, [pc, #148]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	4a24      	ldr	r2, [pc, #144]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005480:	f043 0310 	orr.w	r3, r3, #16
 8005484:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005486:	4b22      	ldr	r3, [pc, #136]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548a:	f023 020c 	bic.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	491f      	ldr	r1, [pc, #124]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005498:	4b1d      	ldr	r3, [pc, #116]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 800549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549c:	f023 0220 	bic.w	r2, r3, #32
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a4:	491a      	ldr	r1, [pc, #104]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054aa:	4b19      	ldr	r3, [pc, #100]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	4a18      	ldr	r2, [pc, #96]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80054b6:	4b16      	ldr	r3, [pc, #88]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a15      	ldr	r2, [pc, #84]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80054bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fe fbd5 	bl	8003c70 <HAL_GetTick>
 80054c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80054ca:	f7fe fbd1 	bl	8003c70 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e08d      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x736>
 80054e8:	e085      	b.n	80055f6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80054ea:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a08      	ldr	r2, [pc, #32]	@ (8005510 <HAL_RCC_OscConfig+0x77c>)
 80054f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fe fbbb 	bl	8003c70 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054fc:	e00a      	b.n	8005514 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80054fe:	f7fe fbb7 	bl	8003c70 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d903      	bls.n	8005514 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e073      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
 8005510:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005514:	4b3a      	ldr	r3, [pc, #232]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ee      	bne.n	80054fe <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005520:	4b37      	ldr	r3, [pc, #220]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 8005522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005524:	4a36      	ldr	r2, [pc, #216]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 8005526:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	6293      	str	r3, [r2, #40]	@ 0x28
 8005530:	e061      	b.n	80055f6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005532:	4b33      	ldr	r3, [pc, #204]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005536:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005538:	4b31      	ldr	r3, [pc, #196]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 800553a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	2b01      	cmp	r3, #1
 8005544:	d031      	beq.n	80055aa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f003 0203 	and.w	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d12a      	bne.n	80055aa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	0a1b      	lsrs	r3, r3, #8
 8005558:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005560:	429a      	cmp	r2, r3
 8005562:	d122      	bne.n	80055aa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d11a      	bne.n	80055aa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	0a5b      	lsrs	r3, r3, #9
 8005578:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d111      	bne.n	80055aa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005592:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005594:	429a      	cmp	r2, r3
 8005596:	d108      	bne.n	80055aa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	0e1b      	lsrs	r3, r3, #24
 800559c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d001      	beq.n	80055ae <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e024      	b.n	80055f8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80055ae:	4b14      	ldr	r3, [pc, #80]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 80055b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b2:	08db      	lsrs	r3, r3, #3
 80055b4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80055bc:	429a      	cmp	r2, r3
 80055be:	d01a      	beq.n	80055f6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80055c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 80055c6:	f023 0310 	bic.w	r3, r3, #16
 80055ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fe fb50 	bl	8003c70 <HAL_GetTick>
 80055d0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80055d2:	bf00      	nop
 80055d4:	f7fe fb4c 	bl	8003c70 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	4293      	cmp	r3, r2
 80055de:	d0f9      	beq.n	80055d4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055e4:	4a06      	ldr	r2, [pc, #24]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80055ea:	4b05      	ldr	r3, [pc, #20]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 80055ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ee:	4a04      	ldr	r2, [pc, #16]	@ (8005600 <HAL_RCC_OscConfig+0x86c>)
 80055f0:	f043 0310 	orr.w	r3, r3, #16
 80055f4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	44020c00 	.word	0x44020c00

08005604 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e19e      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005618:	4b83      	ldr	r3, [pc, #524]	@ (8005828 <HAL_RCC_ClockConfig+0x224>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d910      	bls.n	8005648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005626:	4b80      	ldr	r3, [pc, #512]	@ (8005828 <HAL_RCC_ClockConfig+0x224>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 020f 	bic.w	r2, r3, #15
 800562e:	497e      	ldr	r1, [pc, #504]	@ (8005828 <HAL_RCC_ClockConfig+0x224>)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005636:	4b7c      	ldr	r3, [pc, #496]	@ (8005828 <HAL_RCC_ClockConfig+0x224>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e186      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b00      	cmp	r3, #0
 8005652:	d012      	beq.n	800567a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	4b74      	ldr	r3, [pc, #464]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	0a1b      	lsrs	r3, r3, #8
 800565e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005662:	429a      	cmp	r2, r3
 8005664:	d909      	bls.n	800567a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005666:	4b71      	ldr	r3, [pc, #452]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	021b      	lsls	r3, r3, #8
 8005674:	496d      	ldr	r1, [pc, #436]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 8005676:	4313      	orrs	r3, r2
 8005678:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d012      	beq.n	80056ac <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	4b68      	ldr	r3, [pc, #416]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	091b      	lsrs	r3, r3, #4
 8005690:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005694:	429a      	cmp	r2, r3
 8005696:	d909      	bls.n	80056ac <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005698:	4b64      	ldr	r3, [pc, #400]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4961      	ldr	r1, [pc, #388]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d010      	beq.n	80056da <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	4b5b      	ldr	r3, [pc, #364]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d908      	bls.n	80056da <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80056c8:	4b58      	ldr	r3, [pc, #352]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4955      	ldr	r1, [pc, #340]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d010      	beq.n	8005708 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	4b50      	ldr	r3, [pc, #320]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d908      	bls.n	8005708 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80056f6:	4b4d      	ldr	r3, [pc, #308]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f023 020f 	bic.w	r2, r3, #15
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	494a      	ldr	r1, [pc, #296]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 8005704:	4313      	orrs	r3, r2
 8005706:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8093 	beq.w	800583c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b03      	cmp	r3, #3
 800571c:	d107      	bne.n	800572e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800571e:	4b43      	ldr	r3, [pc, #268]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d121      	bne.n	800576e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e113      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005736:	4b3d      	ldr	r3, [pc, #244]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d115      	bne.n	800576e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e107      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d107      	bne.n	800575e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800574e:	4b37      	ldr	r3, [pc, #220]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e0fb      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800575e:	4b33      	ldr	r3, [pc, #204]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e0f3      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800576e:	4b2f      	ldr	r3, [pc, #188]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f023 0203 	bic.w	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	492c      	ldr	r1, [pc, #176]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 800577c:	4313      	orrs	r3, r2
 800577e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005780:	f7fe fa76 	bl	8003c70 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d112      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fe fa6e 	bl	8003c70 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0d7      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a6:	4b21      	ldr	r3, [pc, #132]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 0318 	and.w	r3, r3, #24
 80057ae:	2b18      	cmp	r3, #24
 80057b0:	d1ee      	bne.n	8005790 <HAL_RCC_ClockConfig+0x18c>
 80057b2:	e043      	b.n	800583c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d112      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057bc:	e00a      	b.n	80057d4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80057be:	f7fe fa57 	bl	8003c70 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e0c0      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057d4:	4b15      	ldr	r3, [pc, #84]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 0318 	and.w	r3, r3, #24
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d1ee      	bne.n	80057be <HAL_RCC_ClockConfig+0x1ba>
 80057e0:	e02c      	b.n	800583c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d122      	bne.n	8005830 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fe fa40 	bl	8003c70 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0a9      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005802:	4b0a      	ldr	r3, [pc, #40]	@ (800582c <HAL_RCC_ClockConfig+0x228>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f003 0318 	and.w	r3, r3, #24
 800580a:	2b08      	cmp	r3, #8
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_ClockConfig+0x1e8>
 800580e:	e015      	b.n	800583c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005810:	f7fe fa2e 	bl	8003c70 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d906      	bls.n	8005830 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e097      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
 8005826:	bf00      	nop
 8005828:	40022000 	.word	0x40022000
 800582c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005830:	4b4b      	ldr	r3, [pc, #300]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f003 0318 	and.w	r3, r3, #24
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e9      	bne.n	8005810 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d010      	beq.n	800586a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	4b44      	ldr	r3, [pc, #272]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	429a      	cmp	r2, r3
 8005856:	d208      	bcs.n	800586a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005858:	4b41      	ldr	r3, [pc, #260]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f023 020f 	bic.w	r2, r3, #15
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	493e      	ldr	r1, [pc, #248]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 8005866:	4313      	orrs	r3, r2
 8005868:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800586a:	4b3e      	ldr	r3, [pc, #248]	@ (8005964 <HAL_RCC_ClockConfig+0x360>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d210      	bcs.n	800589a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005878:	4b3a      	ldr	r3, [pc, #232]	@ (8005964 <HAL_RCC_ClockConfig+0x360>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f023 020f 	bic.w	r2, r3, #15
 8005880:	4938      	ldr	r1, [pc, #224]	@ (8005964 <HAL_RCC_ClockConfig+0x360>)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	4313      	orrs	r3, r2
 8005886:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005888:	4b36      	ldr	r3, [pc, #216]	@ (8005964 <HAL_RCC_ClockConfig+0x360>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d001      	beq.n	800589a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e05d      	b.n	8005956 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d010      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d208      	bcs.n	80058c8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80058b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	4927      	ldr	r1, [pc, #156]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d012      	beq.n	80058fa <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	4b21      	ldr	r3, [pc, #132]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d209      	bcs.n	80058fa <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80058e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	491a      	ldr	r1, [pc, #104]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	2b00      	cmp	r3, #0
 8005904:	d012      	beq.n	800592c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005914:	429a      	cmp	r2, r3
 8005916:	d209      	bcs.n	800592c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005918:	4b11      	ldr	r3, [pc, #68]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	490e      	ldr	r1, [pc, #56]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 8005928:	4313      	orrs	r3, r2
 800592a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800592c:	f000 f822 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8005930:	4602      	mov	r2, r0
 8005932:	4b0b      	ldr	r3, [pc, #44]	@ (8005960 <HAL_RCC_ClockConfig+0x35c>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	490b      	ldr	r1, [pc, #44]	@ (8005968 <HAL_RCC_ClockConfig+0x364>)
 800593c:	5ccb      	ldrb	r3, [r1, r3]
 800593e:	fa22 f303 	lsr.w	r3, r2, r3
 8005942:	4a0a      	ldr	r2, [pc, #40]	@ (800596c <HAL_RCC_ClockConfig+0x368>)
 8005944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005946:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <HAL_RCC_ClockConfig+0x36c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe f906 	bl	8003b5c <HAL_InitTick>
 8005950:	4603      	mov	r3, r0
 8005952:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005954:	7afb      	ldrb	r3, [r7, #11]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	44020c00 	.word	0x44020c00
 8005964:	40022000 	.word	0x40022000
 8005968:	08011114 	.word	0x08011114
 800596c:	2000001c 	.word	0x2000001c
 8005970:	20000020 	.word	0x20000020

08005974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	@ 0x24
 8005978:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800597a:	4b8c      	ldr	r3, [pc, #560]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f003 0318 	and.w	r3, r3, #24
 8005982:	2b08      	cmp	r3, #8
 8005984:	d102      	bne.n	800598c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005986:	4b8a      	ldr	r3, [pc, #552]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	e107      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800598c:	4b87      	ldr	r3, [pc, #540]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f003 0318 	and.w	r3, r3, #24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d112      	bne.n	80059be <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005998:	4b84      	ldr	r3, [pc, #528]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059a4:	4b81      	ldr	r3, [pc, #516]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	08db      	lsrs	r3, r3, #3
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	4a81      	ldr	r2, [pc, #516]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x240>)
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	e0f1      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80059b8:	4b7e      	ldr	r3, [pc, #504]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x240>)
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	e0ee      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059be:	4b7b      	ldr	r3, [pc, #492]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0318 	and.w	r3, r3, #24
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d102      	bne.n	80059d0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059ca:	4b7b      	ldr	r3, [pc, #492]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x244>)
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	e0e5      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059d0:	4b76      	ldr	r3, [pc, #472]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f003 0318 	and.w	r3, r3, #24
 80059d8:	2b18      	cmp	r3, #24
 80059da:	f040 80dd 	bne.w	8005b98 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80059de:	4b73      	ldr	r3, [pc, #460]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80059e8:	4b70      	ldr	r3, [pc, #448]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 80059ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ec:	0a1b      	lsrs	r3, r3, #8
 80059ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80059f4:	4b6d      	ldr	r3, [pc, #436]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 80059f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005a00:	4b6a      	ldr	r3, [pc, #424]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 8005a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005a04:	08db      	lsrs	r3, r3, #3
 8005a06:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	ee07 3a90 	vmov	s15, r3
 8005a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a18:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80b7 	beq.w	8005b92 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d003      	beq.n	8005a32 <HAL_RCC_GetSysClockFreq+0xbe>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d056      	beq.n	8005ade <HAL_RCC_GetSysClockFreq+0x16a>
 8005a30:	e077      	b.n	8005b22 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005a32:	4b5e      	ldr	r3, [pc, #376]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02d      	beq.n	8005a9a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	08db      	lsrs	r3, r3, #3
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	4a5a      	ldr	r2, [pc, #360]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x240>)
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a68:	4b50      	ldr	r3, [pc, #320]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a78:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a7c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005bbc <HAL_RCC_GetSysClockFreq+0x248>
 8005a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a94:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005a98:	e065      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	ee07 3a90 	vmov	s15, r3
 8005aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005bc0 <HAL_RCC_GetSysClockFreq+0x24c>
 8005aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aac:	4b3f      	ldr	r3, [pc, #252]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 8005aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005abc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ac0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005bbc <HAL_RCC_GetSysClockFreq+0x248>
 8005ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005acc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005adc:	e043      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	ee07 3a90 	vmov	s15, r3
 8005ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005bc4 <HAL_RCC_GetSysClockFreq+0x250>
 8005aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af0:	4b2e      	ldr	r3, [pc, #184]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 8005af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af8:	ee07 3a90 	vmov	s15, r3
 8005afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b00:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b04:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005bbc <HAL_RCC_GetSysClockFreq+0x248>
 8005b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005b20:	e021      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005bc8 <HAL_RCC_GetSysClockFreq+0x254>
 8005b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b34:	4b1d      	ldr	r3, [pc, #116]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 8005b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3c:	ee07 3a90 	vmov	s15, r3
 8005b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b44:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b48:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005bbc <HAL_RCC_GetSysClockFreq+0x248>
 8005b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b60:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005b64:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005b66:	4b11      	ldr	r3, [pc, #68]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x238>)
 8005b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b6a:	0a5b      	lsrs	r3, r3, #9
 8005b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b70:	3301      	adds	r3, #1
 8005b72:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b7e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b8a:	ee17 3a90 	vmov	r3, s15
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	e004      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	e001      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005b98:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x240>)
 8005b9a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3724      	adds	r7, #36	@ 0x24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	44020c00 	.word	0x44020c00
 8005bb0:	003d0900 	.word	0x003d0900
 8005bb4:	03d09000 	.word	0x03d09000
 8005bb8:	017d7840 	.word	0x017d7840
 8005bbc:	46000000 	.word	0x46000000
 8005bc0:	4c742400 	.word	0x4c742400
 8005bc4:	4bbebc20 	.word	0x4bbebc20
 8005bc8:	4a742400 	.word	0x4a742400

08005bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005bd0:	f7ff fed0 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	4b08      	ldr	r3, [pc, #32]	@ (8005bf8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005bda:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005bde:	4907      	ldr	r1, [pc, #28]	@ (8005bfc <HAL_RCC_GetHCLKFreq+0x30>)
 8005be0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005be2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005be6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bea:	4a05      	ldr	r2, [pc, #20]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x34>)
 8005bec:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005bee:	4b04      	ldr	r3, [pc, #16]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x34>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	44020c00 	.word	0x44020c00
 8005bfc:	08011114 	.word	0x08011114
 8005c00:	2000001c 	.word	0x2000001c

08005c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005c08:	f7ff ffe0 	bl	8005bcc <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	091b      	lsrs	r3, r3, #4
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4904      	ldr	r1, [pc, #16]	@ (8005c2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	44020c00 	.word	0x44020c00
 8005c2c:	08011124 	.word	0x08011124

08005c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005c34:	f7ff ffca 	bl	8005bcc <HAL_RCC_GetHCLKFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	0a1b      	lsrs	r3, r3, #8
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	4904      	ldr	r1, [pc, #16]	@ (8005c58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c46:	5ccb      	ldrb	r3, [r1, r3]
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	44020c00 	.word	0x44020c00
 8005c58:	08011124 	.word	0x08011124

08005c5c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005c60:	f7ff ffb4 	bl	8005bcc <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	0b1b      	lsrs	r3, r3, #12
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4904      	ldr	r1, [pc, #16]	@ (8005c84 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	44020c00 	.word	0x44020c00
 8005c84:	08011124 	.word	0x08011124

08005c88 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c8c:	b0d8      	sub	sp, #352	@ 0x160
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005cac:	2500      	movs	r5, #0
 8005cae:	ea54 0305 	orrs.w	r3, r4, r5
 8005cb2:	d00b      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005cb4:	4bcd      	ldr	r3, [pc, #820]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cba:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc4:	4ac9      	ldr	r2, [pc, #804]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f002 0801 	and.w	r8, r2, #1
 8005cd8:	f04f 0900 	mov.w	r9, #0
 8005cdc:	ea58 0309 	orrs.w	r3, r8, r9
 8005ce0:	d042      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d823      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005cec:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d3d 	.word	0x08005d3d
 8005cf8:	08005d0d 	.word	0x08005d0d
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d3d 	.word	0x08005d3d
 8005d04:	08005d3d 	.word	0x08005d3d
 8005d08:	08005d3d 	.word	0x08005d3d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d10:	3308      	adds	r3, #8
 8005d12:	4618      	mov	r0, r3
 8005d14:	f004 feda 	bl	800aacc <RCCEx_PLL2_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005d1e:	e00e      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d24:	3330      	adds	r3, #48	@ 0x30
 8005d26:	4618      	mov	r0, r3
 8005d28:	f004 ff68 	bl	800abfc <RCCEx_PLL3_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005d32:	e004      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8005d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005d46:	4ba9      	ldr	r3, [pc, #676]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d4c:	f023 0107 	bic.w	r1, r3, #7
 8005d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d56:	4aa5      	ldr	r2, [pc, #660]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005d5e:	e003      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d64:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f002 0a02 	and.w	sl, r2, #2
 8005d74:	f04f 0b00 	mov.w	fp, #0
 8005d78:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d7c:	f000 8088 	beq.w	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005d80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d86:	2b28      	cmp	r3, #40	@ 0x28
 8005d88:	d868      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d90 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005e65 	.word	0x08005e65
 8005d94:	08005e5d 	.word	0x08005e5d
 8005d98:	08005e5d 	.word	0x08005e5d
 8005d9c:	08005e5d 	.word	0x08005e5d
 8005da0:	08005e5d 	.word	0x08005e5d
 8005da4:	08005e5d 	.word	0x08005e5d
 8005da8:	08005e5d 	.word	0x08005e5d
 8005dac:	08005e5d 	.word	0x08005e5d
 8005db0:	08005e35 	.word	0x08005e35
 8005db4:	08005e5d 	.word	0x08005e5d
 8005db8:	08005e5d 	.word	0x08005e5d
 8005dbc:	08005e5d 	.word	0x08005e5d
 8005dc0:	08005e5d 	.word	0x08005e5d
 8005dc4:	08005e5d 	.word	0x08005e5d
 8005dc8:	08005e5d 	.word	0x08005e5d
 8005dcc:	08005e5d 	.word	0x08005e5d
 8005dd0:	08005e49 	.word	0x08005e49
 8005dd4:	08005e5d 	.word	0x08005e5d
 8005dd8:	08005e5d 	.word	0x08005e5d
 8005ddc:	08005e5d 	.word	0x08005e5d
 8005de0:	08005e5d 	.word	0x08005e5d
 8005de4:	08005e5d 	.word	0x08005e5d
 8005de8:	08005e5d 	.word	0x08005e5d
 8005dec:	08005e5d 	.word	0x08005e5d
 8005df0:	08005e65 	.word	0x08005e65
 8005df4:	08005e5d 	.word	0x08005e5d
 8005df8:	08005e5d 	.word	0x08005e5d
 8005dfc:	08005e5d 	.word	0x08005e5d
 8005e00:	08005e5d 	.word	0x08005e5d
 8005e04:	08005e5d 	.word	0x08005e5d
 8005e08:	08005e5d 	.word	0x08005e5d
 8005e0c:	08005e5d 	.word	0x08005e5d
 8005e10:	08005e65 	.word	0x08005e65
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e5d 	.word	0x08005e5d
 8005e1c:	08005e5d 	.word	0x08005e5d
 8005e20:	08005e5d 	.word	0x08005e5d
 8005e24:	08005e5d 	.word	0x08005e5d
 8005e28:	08005e5d 	.word	0x08005e5d
 8005e2c:	08005e5d 	.word	0x08005e5d
 8005e30:	08005e65 	.word	0x08005e65
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e38:	3308      	adds	r3, #8
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f004 fe46 	bl	800aacc <RCCEx_PLL2_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005e46:	e00e      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e4c:	3330      	adds	r3, #48	@ 0x30
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f004 fed4 	bl	800abfc <RCCEx_PLL3_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005e5a:	e004      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e62:	e000      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10c      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e74:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005e80:	430b      	orrs	r3, r1
 8005e82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e88:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e8c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f002 0304 	and.w	r3, r2, #4
 8005e9c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005ea6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d04e      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eb6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005eba:	d02c      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005ebc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005ec0:	d825      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec6:	d028      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ecc:	d81f      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ece:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed0:	d025      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed4:	d81b      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ed6:	2b80      	cmp	r3, #128	@ 0x80
 8005ed8:	d00f      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005eda:	2b80      	cmp	r3, #128	@ 0x80
 8005edc:	d817      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01f      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005ee2:	2b40      	cmp	r3, #64	@ 0x40
 8005ee4:	d113      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ee6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eea:	3308      	adds	r3, #8
 8005eec:	4618      	mov	r0, r3
 8005eee:	f004 fded 	bl	800aacc <RCCEx_PLL2_Config>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005ef8:	e014      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005efa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005efe:	3330      	adds	r3, #48	@ 0x30
 8005f00:	4618      	mov	r0, r3
 8005f02:	f004 fe7b 	bl	800abfc <RCCEx_PLL3_Config>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005f0c:	e00a      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f14:	e006      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005f16:	bf00      	nop
 8005f18:	e004      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e002      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005f1e:	bf00      	nop
 8005f20:	e000      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10c      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f32:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005f44:	e003      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f4a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f002 0308 	and.w	r3, r2, #8
 8005f5a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005f64:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	d056      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f74:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005f78:	d031      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005f7a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005f7e:	d82a      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f84:	d02d      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005f86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f8a:	d824      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005f8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f90:	d029      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005f92:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f96:	d81e      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f9c:	d011      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fa2:	d818      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d023      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fac:	d113      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f004 fd89 	bl	800aacc <RCCEx_PLL2_Config>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005fc0:	e017      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fc6:	3330      	adds	r3, #48	@ 0x30
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f004 fe17 	bl	800abfc <RCCEx_PLL3_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005fd4:	e00d      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fdc:	e009      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005fde:	bf00      	nop
 8005fe0:	e007      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005fe2:	bf00      	nop
 8005fe4:	e005      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005fe6:	bf00      	nop
 8005fe8:	e003      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005fea:	bf00      	nop
 8005fec:	44020c00 	.word	0x44020c00
        break;
 8005ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005ffa:	4bbb      	ldr	r3, [pc, #748]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006000:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800600a:	4ab7      	ldr	r2, [pc, #732]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800600c:	430b      	orrs	r3, r1
 800600e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006012:	e003      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006014:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006018:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800601c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f002 0310 	and.w	r3, r2, #16
 8006028:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800602c:	2300      	movs	r3, #0
 800602e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006032:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8006036:	460b      	mov	r3, r1
 8006038:	4313      	orrs	r3, r2
 800603a:	d053      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800603c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006042:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006046:	d031      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006048:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800604c:	d82a      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800604e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006052:	d02d      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006058:	d824      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800605a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800605e:	d029      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006064:	d81e      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800606a:	d011      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800606c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006070:	d818      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d020      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800607a:	d113      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800607c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006080:	3308      	adds	r3, #8
 8006082:	4618      	mov	r0, r3
 8006084:	f004 fd22 	bl	800aacc <RCCEx_PLL2_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800608e:	e014      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006094:	3330      	adds	r3, #48	@ 0x30
 8006096:	4618      	mov	r0, r3
 8006098:	f004 fdb0 	bl	800abfc <RCCEx_PLL3_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80060a2:	e00a      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060aa:	e006      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80060ac:	bf00      	nop
 80060ae:	e004      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80060b0:	bf00      	nop
 80060b2:	e002      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80060b4:	bf00      	nop
 80060b6:	e000      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80060b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10c      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80060c2:	4b89      	ldr	r3, [pc, #548]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80060c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80060c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80060cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d2:	4a85      	ldr	r2, [pc, #532]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80060e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f002 0320 	and.w	r3, r2, #32
 80060f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80060fa:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80060fe:	460b      	mov	r3, r1
 8006100:	4313      	orrs	r3, r2
 8006102:	d053      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006104:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800610e:	d031      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006110:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006114:	d82a      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800611a:	d02d      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800611c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006120:	d824      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006122:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006126:	d029      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006128:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800612c:	d81e      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800612e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006132:	d011      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006138:	d818      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d020      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800613e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006142:	d113      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006144:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006148:	3308      	adds	r3, #8
 800614a:	4618      	mov	r0, r3
 800614c:	f004 fcbe 	bl	800aacc <RCCEx_PLL2_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8006156:	e014      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006158:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800615c:	3330      	adds	r3, #48	@ 0x30
 800615e:	4618      	mov	r0, r3
 8006160:	f004 fd4c 	bl	800abfc <RCCEx_PLL3_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800616a:	e00a      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006172:	e006      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006174:	bf00      	nop
 8006176:	e004      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006178:	bf00      	nop
 800617a:	e002      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006182:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10c      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800618a:	4b57      	ldr	r3, [pc, #348]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800618c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006190:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006194:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619a:	4a53      	ldr	r2, [pc, #332]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800619c:	430b      	orrs	r3, r1
 800619e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80061a2:	e003      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80061ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80061b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80061bc:	2300      	movs	r3, #0
 80061be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80061c2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80061c6:	460b      	mov	r3, r1
 80061c8:	4313      	orrs	r3, r2
 80061ca:	d053      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80061cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061d2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80061d6:	d031      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80061d8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80061dc:	d82a      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80061de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061e2:	d02d      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80061e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061e8:	d824      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80061ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80061ee:	d029      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80061f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80061f4:	d81e      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80061f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80061fa:	d011      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80061fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006200:	d818      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006206:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800620a:	d113      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800620c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006210:	3308      	adds	r3, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f004 fc5a 	bl	800aacc <RCCEx_PLL2_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800621e:	e014      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006220:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006224:	3330      	adds	r3, #48	@ 0x30
 8006226:	4618      	mov	r0, r3
 8006228:	f004 fce8 	bl	800abfc <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006232:	e00a      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800623a:	e006      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800623c:	bf00      	nop
 800623e:	e004      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10c      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8006252:	4b25      	ldr	r3, [pc, #148]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006254:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006258:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800625c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006262:	4a21      	ldr	r2, [pc, #132]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006264:	430b      	orrs	r3, r1
 8006266:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800626a:	e003      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006270:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006274:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006280:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006284:	2300      	movs	r3, #0
 8006286:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800628a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800628e:	460b      	mov	r3, r1
 8006290:	4313      	orrs	r3, r2
 8006292:	d055      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8006294:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800629a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800629e:	d033      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80062a0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80062a4:	d82c      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80062a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062aa:	d02f      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x684>
 80062ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062b0:	d826      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80062b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062b6:	d02b      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80062b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062bc:	d820      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80062be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062c2:	d013      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80062c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062c8:	d81a      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d022      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80062ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062d2:	d115      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062d8:	3308      	adds	r3, #8
 80062da:	4618      	mov	r0, r3
 80062dc:	f004 fbf6 	bl	800aacc <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80062e6:	e016      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80062e8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062f0:	3330      	adds	r3, #48	@ 0x30
 80062f2:	4618      	mov	r0, r3
 80062f4:	f004 fc82 	bl	800abfc <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80062fe:	e00a      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006306:	e006      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006308:	bf00      	nop
 800630a:	e004      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800630c:	bf00      	nop
 800630e:	e002      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006316:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10c      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800631e:	4bbb      	ldr	r3, [pc, #748]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006324:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006328:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800632c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800632e:	4ab7      	ldr	r2, [pc, #732]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006330:	430b      	orrs	r3, r1
 8006332:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006336:	e003      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006338:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800633c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8006340:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800634c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8006350:	2300      	movs	r3, #0
 8006352:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006356:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800635a:	460b      	mov	r3, r1
 800635c:	4313      	orrs	r3, r2
 800635e:	d053      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8006360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006366:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800636a:	d031      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800636c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006370:	d82a      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006372:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006376:	d02d      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8006378:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800637c:	d824      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800637e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006382:	d029      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8006384:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006388:	d81e      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800638a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800638e:	d011      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8006390:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006394:	d818      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d020      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x754>
 800639a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800639e:	d113      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063a4:	3308      	adds	r3, #8
 80063a6:	4618      	mov	r0, r3
 80063a8:	f004 fb90 	bl	800aacc <RCCEx_PLL2_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80063b2:	e014      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063b8:	3330      	adds	r3, #48	@ 0x30
 80063ba:	4618      	mov	r0, r3
 80063bc:	f004 fc1e 	bl	800abfc <RCCEx_PLL3_Config>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80063c6:	e00a      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063ce:	e006      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80063d0:	bf00      	nop
 80063d2:	e004      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80063d4:	bf00      	nop
 80063d6:	e002      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80063d8:	bf00      	nop
 80063da:	e000      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80063dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10c      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80063e6:	4b89      	ldr	r3, [pc, #548]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80063e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80063f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063f6:	4a85      	ldr	r2, [pc, #532]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80063f8:	430b      	orrs	r3, r1
 80063fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80063fe:	e003      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006400:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006404:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006408:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006414:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006418:	2300      	movs	r3, #0
 800641a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800641e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006422:	460b      	mov	r3, r1
 8006424:	4313      	orrs	r3, r2
 8006426:	d055      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8006428:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800642c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006430:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006434:	d031      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8006436:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800643a:	d82a      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800643c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006440:	d02d      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006446:	d824      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006448:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800644c:	d029      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800644e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006452:	d81e      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006458:	d011      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800645a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800645e:	d818      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d020      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8006464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006468:	d113      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800646a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800646e:	3308      	adds	r3, #8
 8006470:	4618      	mov	r0, r3
 8006472:	f004 fb2b 	bl	800aacc <RCCEx_PLL2_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800647c:	e014      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800647e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006482:	3330      	adds	r3, #48	@ 0x30
 8006484:	4618      	mov	r0, r3
 8006486:	f004 fbb9 	bl	800abfc <RCCEx_PLL3_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006490:	e00a      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006498:	e006      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800649a:	bf00      	nop
 800649c:	e004      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800649e:	bf00      	nop
 80064a0:	e002      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80064a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10d      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80064b0:	4b56      	ldr	r3, [pc, #344]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80064b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064b6:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80064ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c2:	4a52      	ldr	r2, [pc, #328]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80064c4:	430b      	orrs	r3, r1
 80064c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80064ca:	e003      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80064d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80064e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064e4:	2300      	movs	r3, #0
 80064e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80064ea:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d044      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80064f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064fc:	2b05      	cmp	r3, #5
 80064fe:	d823      	bhi.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006500:	a201      	add	r2, pc, #4	@ (adr r2, 8006508 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006551 	.word	0x08006551
 800650c:	08006521 	.word	0x08006521
 8006510:	08006535 	.word	0x08006535
 8006514:	08006551 	.word	0x08006551
 8006518:	08006551 	.word	0x08006551
 800651c:	08006551 	.word	0x08006551
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006524:	3308      	adds	r3, #8
 8006526:	4618      	mov	r0, r3
 8006528:	f004 fad0 	bl	800aacc <RCCEx_PLL2_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006532:	e00e      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006538:	3330      	adds	r3, #48	@ 0x30
 800653a:	4618      	mov	r0, r3
 800653c:	f004 fb5e 	bl	800abfc <RCCEx_PLL3_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006546:	e004      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800654e:	e000      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8006550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006552:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10d      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800655a:	4b2c      	ldr	r3, [pc, #176]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800655c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006560:	f023 0107 	bic.w	r1, r3, #7
 8006564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800656c:	4a27      	ldr	r2, [pc, #156]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800656e:	430b      	orrs	r3, r1
 8006570:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006574:	e003      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006576:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800657a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800657e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800658a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800658e:	2300      	movs	r3, #0
 8006590:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006594:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d04f      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800659e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a6:	2b50      	cmp	r3, #80	@ 0x50
 80065a8:	d029      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x976>
 80065aa:	2b50      	cmp	r3, #80	@ 0x50
 80065ac:	d823      	bhi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80065ae:	2b40      	cmp	r3, #64	@ 0x40
 80065b0:	d027      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80065b2:	2b40      	cmp	r3, #64	@ 0x40
 80065b4:	d81f      	bhi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80065b6:	2b30      	cmp	r3, #48	@ 0x30
 80065b8:	d025      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80065ba:	2b30      	cmp	r3, #48	@ 0x30
 80065bc:	d81b      	bhi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80065be:	2b20      	cmp	r3, #32
 80065c0:	d00f      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d817      	bhi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d022      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d113      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065d2:	3308      	adds	r3, #8
 80065d4:	4618      	mov	r0, r3
 80065d6:	f004 fa79 	bl	800aacc <RCCEx_PLL2_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80065e0:	e017      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065e6:	3330      	adds	r3, #48	@ 0x30
 80065e8:	4618      	mov	r0, r3
 80065ea:	f004 fb07 	bl	800abfc <RCCEx_PLL3_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80065f4:	e00d      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065fc:	e009      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80065fe:	bf00      	nop
 8006600:	e007      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006602:	bf00      	nop
 8006604:	e005      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006606:	bf00      	nop
 8006608:	e003      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800660a:	bf00      	nop
 800660c:	44020c00 	.word	0x44020c00
        break;
 8006610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006612:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10d      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800661a:	4baf      	ldr	r3, [pc, #700]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800661c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006620:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006624:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662c:	4aaa      	ldr	r2, [pc, #680]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800662e:	430b      	orrs	r3, r1
 8006630:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006634:	e003      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800663a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800663e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800664a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800664e:	2300      	movs	r3, #0
 8006650:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006654:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	d055      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800665e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006666:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800666a:	d031      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800666c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006670:	d82a      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006672:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006676:	d02d      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006678:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800667c:	d824      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800667e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006682:	d029      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8006684:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006688:	d81e      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800668a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800668e:	d011      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006690:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006694:	d818      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d020      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800669a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800669e:	d113      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066a4:	3308      	adds	r3, #8
 80066a6:	4618      	mov	r0, r3
 80066a8:	f004 fa10 	bl	800aacc <RCCEx_PLL2_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80066b2:	e014      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066b8:	3330      	adds	r3, #48	@ 0x30
 80066ba:	4618      	mov	r0, r3
 80066bc:	f004 fa9e 	bl	800abfc <RCCEx_PLL3_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80066c6:	e00a      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066ce:	e006      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80066d0:	bf00      	nop
 80066d2:	e004      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80066d4:	bf00      	nop
 80066d6:	e002      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80066dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80066e6:	4b7c      	ldr	r3, [pc, #496]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80066e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80066f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066f8:	4a77      	ldr	r2, [pc, #476]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80066fa:	430b      	orrs	r3, r1
 80066fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006700:	e003      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006702:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006706:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800670a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800671a:	2300      	movs	r3, #0
 800671c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006720:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006724:	460b      	mov	r3, r1
 8006726:	4313      	orrs	r3, r2
 8006728:	d03d      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800672a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006732:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006736:	d01b      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8006738:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800673c:	d814      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800673e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006742:	d017      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8006744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006748:	d80e      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d014      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800674e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006752:	d109      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006758:	3330      	adds	r3, #48	@ 0x30
 800675a:	4618      	mov	r0, r3
 800675c:	f004 fa4e 	bl	800abfc <RCCEx_PLL3_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006766:	e008      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800676e:	e004      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006770:	bf00      	nop
 8006772:	e002      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10d      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006782:	4b55      	ldr	r3, [pc, #340]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006784:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006788:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800678c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006794:	4a50      	ldr	r2, [pc, #320]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006796:	430b      	orrs	r3, r1
 8006798:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800679c:	e003      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80067b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067b6:	2300      	movs	r3, #0
 80067b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4313      	orrs	r3, r2
 80067c4:	d03d      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80067c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80067d2:	d01b      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80067d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80067d8:	d814      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80067da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80067de:	d017      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80067e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80067e4:	d80e      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d014      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80067ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067ee:	d109      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f4:	3330      	adds	r3, #48	@ 0x30
 80067f6:	4618      	mov	r0, r3
 80067f8:	f004 fa00 	bl	800abfc <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006802:	e008      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800680a:	e004      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800680c:	bf00      	nop
 800680e:	e002      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006810:	bf00      	nop
 8006812:	e000      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006816:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10d      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800681e:	4b2e      	ldr	r3, [pc, #184]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006820:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006824:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006828:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006830:	4a29      	ldr	r2, [pc, #164]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006832:	430b      	orrs	r3, r1
 8006834:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006838:	e003      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800683e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006842:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800684e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006852:	2300      	movs	r3, #0
 8006854:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006858:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800685c:	460b      	mov	r3, r1
 800685e:	4313      	orrs	r3, r2
 8006860:	d040      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8006862:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006866:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800686a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800686e:	d01b      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8006870:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006874:	d814      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006876:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800687a:	d017      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800687c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006880:	d80e      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d014      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800688a:	d109      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800688c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006890:	3330      	adds	r3, #48	@ 0x30
 8006892:	4618      	mov	r0, r3
 8006894:	f004 f9b2 	bl	800abfc <RCCEx_PLL3_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800689e:	e008      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068a6:	e004      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80068a8:	bf00      	nop
 80068aa:	e002      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80068ac:	bf00      	nop
 80068ae:	e000      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80068b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d110      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80068ba:	4b07      	ldr	r3, [pc, #28]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80068bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068c0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068cc:	4a02      	ldr	r2, [pc, #8]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80068ce:	430b      	orrs	r3, r1
 80068d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80068d4:	e006      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80068d6:	bf00      	nop
 80068d8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	2100      	movs	r1, #0
 80068ee:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80068f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80068fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80068fe:	460b      	mov	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	d03d      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8006904:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006908:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800690c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006910:	d01b      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006912:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006916:	d814      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006918:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800691c:	d017      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800691e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006922:	d80e      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d014      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800692c:	d109      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800692e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006932:	3330      	adds	r3, #48	@ 0x30
 8006934:	4618      	mov	r0, r3
 8006936:	f004 f961 	bl	800abfc <RCCEx_PLL3_Config>
 800693a:	4603      	mov	r3, r0
 800693c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8006940:	e008      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006948:	e004      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800694a:	bf00      	nop
 800694c:	e002      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006954:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10d      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800695c:	4bbe      	ldr	r3, [pc, #760]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800695e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006962:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006966:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800696a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800696e:	4aba      	ldr	r2, [pc, #744]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006970:	430b      	orrs	r3, r1
 8006972:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006976:	e003      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006978:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800697c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800698c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006990:	2300      	movs	r3, #0
 8006992:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006996:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800699a:	460b      	mov	r3, r1
 800699c:	4313      	orrs	r3, r2
 800699e:	d035      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80069a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069ac:	d015      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80069ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069b2:	d80e      	bhi.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d012      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80069b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069bc:	d109      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069c2:	3330      	adds	r3, #48	@ 0x30
 80069c4:	4618      	mov	r0, r3
 80069c6:	f004 f919 	bl	800abfc <RCCEx_PLL3_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80069d0:	e006      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069d8:	e002      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80069de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10d      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80069e8:	4b9b      	ldr	r3, [pc, #620]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80069ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069ee:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80069f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069fa:	4a97      	ldr	r2, [pc, #604]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80069fc:	430b      	orrs	r3, r1
 80069fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a02:	e003      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	2100      	movs	r1, #0
 8006a16:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8006a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006a2c:	4b8a      	ldr	r3, [pc, #552]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	4a89      	ldr	r2, [pc, #548]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006a32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a36:	61d3      	str	r3, [r2, #28]
 8006a38:	4b87      	ldr	r3, [pc, #540]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006a3a:	69d9      	ldr	r1, [r3, #28]
 8006a3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a40:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006a44:	4a84      	ldr	r2, [pc, #528]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006a46:	430b      	orrs	r3, r1
 8006a48:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a60:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a64:	460b      	mov	r3, r1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	d055      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a72:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006a76:	d031      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006a78:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006a7c:	d82a      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a82:	d02d      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a88:	d824      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a8e:	d029      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a94:	d81e      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a9a:	d011      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aa0:	d818      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d020      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aaa:	d113      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f004 f80a 	bl	800aacc <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006abe:	e014      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ac4:	3330      	adds	r3, #48	@ 0x30
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f004 f898 	bl	800abfc <RCCEx_PLL3_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006ad2:	e00a      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ada:	e006      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006adc:	bf00      	nop
 8006ade:	e004      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006ae0:	bf00      	nop
 8006ae2:	e002      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006ae4:	bf00      	nop
 8006ae6:	e000      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10d      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006af2:	4b59      	ldr	r3, [pc, #356]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006af4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006af8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b04:	4a54      	ldr	r2, [pc, #336]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006b06:	430b      	orrs	r3, r1
 8006b08:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006b0c:	e003      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b26:	2300      	movs	r3, #0
 8006b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b2c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4313      	orrs	r3, r2
 8006b34:	d055      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006b36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b3e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b42:	d031      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8006b44:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b48:	d82a      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b4e:	d02d      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8006b50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b54:	d824      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006b56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b5a:	d029      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8006b5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b60:	d81e      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b66:	d011      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8006b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b6c:	d818      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d020      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b76:	d113      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f003 ffa4 	bl	800aacc <RCCEx_PLL2_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006b8a:	e014      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b90:	3330      	adds	r3, #48	@ 0x30
 8006b92:	4618      	mov	r0, r3
 8006b94:	f004 f832 	bl	800abfc <RCCEx_PLL3_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006b9e:	e00a      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ba6:	e006      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006ba8:	bf00      	nop
 8006baa:	e004      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006bac:	bf00      	nop
 8006bae:	e002      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006bb0:	bf00      	nop
 8006bb2:	e000      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10d      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006bbe:	4b26      	ldr	r3, [pc, #152]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006bc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006bc4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bcc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006bd0:	4a21      	ldr	r2, [pc, #132]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006bd8:	e003      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bde:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	2100      	movs	r1, #0
 8006bec:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	d057      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c0e:	d033      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c14:	d82c      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006c16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c1a:	d02f      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8006c1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c20:	d826      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006c22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c26:	d02b      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006c28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c2c:	d820      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006c2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c32:	d013      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c38:	d81a      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d022      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8006c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c42:	d115      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c48:	3308      	adds	r3, #8
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f003 ff3e 	bl	800aacc <RCCEx_PLL2_Config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006c56:	e016      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006c58:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c60:	3330      	adds	r3, #48	@ 0x30
 8006c62:	4618      	mov	r0, r3
 8006c64:	f003 ffca 	bl	800abfc <RCCEx_PLL3_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006c6e:	e00a      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c76:	e006      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006c78:	bf00      	nop
 8006c7a:	e004      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006c7c:	bf00      	nop
 8006c7e:	e002      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006c80:	bf00      	nop
 8006c82:	e000      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10d      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8006c8e:	4bbb      	ldr	r3, [pc, #748]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006c90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006c94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ca0:	4ab6      	ldr	r2, [pc, #728]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006ca8:	e003      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006caa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006cb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	2100      	movs	r1, #0
 8006cbc:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006cc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	d055      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006cd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cda:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006cde:	d031      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006ce0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006ce4:	d82a      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cea:	d02d      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8006cec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf0:	d824      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006cf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cf6:	d029      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006cf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cfc:	d81e      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006cfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d02:	d011      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006d04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d08:	d818      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d020      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8006d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d12:	d113      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d18:	3308      	adds	r3, #8
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f003 fed6 	bl	800aacc <RCCEx_PLL2_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006d26:	e014      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d2c:	3330      	adds	r3, #48	@ 0x30
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f003 ff64 	bl	800abfc <RCCEx_PLL3_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006d3a:	e00a      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d42:	e006      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006d44:	bf00      	nop
 8006d46:	e004      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006d48:	bf00      	nop
 8006d4a:	e002      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006d4c:	bf00      	nop
 8006d4e:	e000      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10d      	bne.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8006d5a:	4b88      	ldr	r3, [pc, #544]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006d5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006d60:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8006d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d6c:	4a83      	ldr	r2, [pc, #524]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006d6e:	430b      	orrs	r3, r1
 8006d70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006d74:	e003      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8006d7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	2100      	movs	r1, #0
 8006d88:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d94:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	d055      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006da6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006daa:	d031      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006dac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006db0:	d82a      	bhi.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006db2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006db6:	d02d      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006db8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dbc:	d824      	bhi.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006dbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dc2:	d029      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006dc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dc8:	d81e      	bhi.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dce:	d011      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006dd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dd4:	d818      	bhi.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d020      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8006dda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dde:	d113      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006de0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006de4:	3308      	adds	r3, #8
 8006de6:	4618      	mov	r0, r3
 8006de8:	f003 fe70 	bl	800aacc <RCCEx_PLL2_Config>
 8006dec:	4603      	mov	r3, r0
 8006dee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006df2:	e014      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006df4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006df8:	3330      	adds	r3, #48	@ 0x30
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f003 fefe 	bl	800abfc <RCCEx_PLL3_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006e06:	e00a      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e0e:	e006      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006e10:	bf00      	nop
 8006e12:	e004      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006e14:	bf00      	nop
 8006e16:	e002      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006e18:	bf00      	nop
 8006e1a:	e000      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10d      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006e26:	4b55      	ldr	r3, [pc, #340]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006e28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e2c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e38:	4a50      	ldr	r2, [pc, #320]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006e40:	e003      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	2100      	movs	r1, #0
 8006e54:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8006e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e60:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e64:	460b      	mov	r3, r1
 8006e66:	4313      	orrs	r3, r2
 8006e68:	d055      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e6e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e76:	d031      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e7c:	d82a      	bhi.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e82:	d02d      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e88:	d824      	bhi.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006e8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e8e:	d029      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006e90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e94:	d81e      	bhi.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e9a:	d011      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ea0:	d818      	bhi.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d020      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eaa:	d113      	bne.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f003 fe0a 	bl	800aacc <RCCEx_PLL2_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006ebe:	e014      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ec4:	3330      	adds	r3, #48	@ 0x30
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f003 fe98 	bl	800abfc <RCCEx_PLL3_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006ed2:	e00a      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006eda:	e006      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006edc:	bf00      	nop
 8006ede:	e004      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006ee0:	bf00      	nop
 8006ee2:	e002      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006ee4:	bf00      	nop
 8006ee6:	e000      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10d      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006ef2:	4b22      	ldr	r3, [pc, #136]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006ef4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ef8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006f04:	4a1d      	ldr	r2, [pc, #116]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006f06:	430b      	orrs	r3, r1
 8006f08:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006f0c:	e003      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006f22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f26:	2300      	movs	r3, #0
 8006f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f30:	460b      	mov	r3, r1
 8006f32:	4313      	orrs	r3, r2
 8006f34:	d055      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006f3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f42:	d035      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006f44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f48:	d82e      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006f4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f4e:	d031      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006f50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f54:	d828      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f5a:	d01b      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f60:	d822      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f6a:	d009      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006f6c:	e01c      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6e:	4b03      	ldr	r3, [pc, #12]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	4a02      	ldr	r2, [pc, #8]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006f7a:	e01c      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006f7c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f84:	3308      	adds	r3, #8
 8006f86:	4618      	mov	r0, r3
 8006f88:	f003 fda0 	bl	800aacc <RCCEx_PLL2_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006f92:	e010      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f98:	3330      	adds	r3, #48	@ 0x30
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f003 fe2e 	bl	800abfc <RCCEx_PLL3_Config>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006fa6:	e006      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fae:	e002      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006fb0:	bf00      	nop
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10d      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006fbe:	4bc3      	ldr	r3, [pc, #780]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fc4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006fd0:	4abe      	ldr	r2, [pc, #760]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006fd8:	e003      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fde:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006fee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ff8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4313      	orrs	r3, r2
 8007000:	d051      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007002:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007006:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800700a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800700e:	d033      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007010:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007014:	d82c      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007016:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800701a:	d02d      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800701c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007020:	d826      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007026:	d019      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8007028:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800702c:	d820      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8007032:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007036:	d007      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8007038:	e01a      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703a:	4ba4      	ldr	r3, [pc, #656]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800703c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703e:	4aa3      	ldr	r2, [pc, #652]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007044:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007046:	e018      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800704c:	3308      	adds	r3, #8
 800704e:	4618      	mov	r0, r3
 8007050:	f003 fd3c 	bl	800aacc <RCCEx_PLL2_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800705a:	e00e      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800705c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007060:	3330      	adds	r3, #48	@ 0x30
 8007062:	4618      	mov	r0, r3
 8007064:	f003 fdca 	bl	800abfc <RCCEx_PLL3_Config>
 8007068:	4603      	mov	r3, r0
 800706a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800706e:	e004      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007076:	e000      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8007078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800707a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10d      	bne.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007082:	4b92      	ldr	r3, [pc, #584]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007088:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800708c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007090:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007094:	4a8d      	ldr	r2, [pc, #564]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007096:	430b      	orrs	r3, r1
 8007098:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800709c:	e003      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80070a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80070b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070b4:	2300      	movs	r3, #0
 80070b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80070bc:	460b      	mov	r3, r1
 80070be:	4313      	orrs	r3, r2
 80070c0:	d032      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80070c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d80f      	bhi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d211      	bcs.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d911      	bls.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d109      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070de:	3308      	adds	r3, #8
 80070e0:	4618      	mov	r0, r3
 80070e2:	f003 fcf3 	bl	800aacc <RCCEx_PLL2_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070ec:	e006      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070f4:	e002      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80070f6:	bf00      	nop
 80070f8:	e000      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80070fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10d      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007104:	4b71      	ldr	r3, [pc, #452]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800710a:	f023 0107 	bic.w	r1, r3, #7
 800710e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007112:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007116:	4a6d      	ldr	r2, [pc, #436]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007118:	430b      	orrs	r3, r1
 800711a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800711e:	e003      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007120:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007124:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007128:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	2100      	movs	r1, #0
 8007132:	6739      	str	r1, [r7, #112]	@ 0x70
 8007134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007138:	677b      	str	r3, [r7, #116]	@ 0x74
 800713a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800713e:	460b      	mov	r3, r1
 8007140:	4313      	orrs	r3, r2
 8007142:	d024      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007144:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8007150:	2b08      	cmp	r3, #8
 8007152:	d005      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800715a:	e002      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800715c:	bf00      	nop
 800715e:	e000      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007162:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800716a:	4b58      	ldr	r3, [pc, #352]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800716c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007170:	f023 0108 	bic.w	r1, r3, #8
 8007174:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007178:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800717c:	4a53      	ldr	r2, [pc, #332]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800717e:	430b      	orrs	r3, r1
 8007180:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007184:	e003      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007186:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800718a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800718e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800719a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800719c:	2300      	movs	r3, #0
 800719e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80071a4:	460b      	mov	r3, r1
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f000 80b9 	beq.w	800731e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80071ac:	4b48      	ldr	r3, [pc, #288]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	4a47      	ldr	r2, [pc, #284]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071b8:	f7fc fd5a 	bl	8003c70 <HAL_GetTick>
 80071bc:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80071c0:	e00b      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c2:	f7fc fd55 	bl	8003c70 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d903      	bls.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071d8:	e005      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80071da:	4b3d      	ldr	r3, [pc, #244]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0ed      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80071e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 8093 	bne.w	8007316 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071f0:	4b36      	ldr	r3, [pc, #216]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80071f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071fa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80071fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d023      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8007206:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800720a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800720e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007212:	4293      	cmp	r3, r2
 8007214:	d01b      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007216:	4b2d      	ldr	r3, [pc, #180]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800721c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007220:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007224:	4b29      	ldr	r3, [pc, #164]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800722a:	4a28      	ldr	r2, [pc, #160]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800722c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007230:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007234:	4b25      	ldr	r3, [pc, #148]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800723a:	4a24      	ldr	r2, [pc, #144]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800723c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007240:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007244:	4a21      	ldr	r2, [pc, #132]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007246:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800724a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800724e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d019      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725a:	f7fc fd09 	bl	8003c70 <HAL_GetTick>
 800725e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007262:	e00d      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007264:	f7fc fd04 	bl	8003c70 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007274:	429a      	cmp	r2, r3
 8007276:	d903      	bls.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800727e:	e006      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007280:	4b12      	ldr	r3, [pc, #72]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0ea      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800728e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007292:	2b00      	cmp	r3, #0
 8007294:	d13a      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800729a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800729e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072a6:	d115      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80072a8:	4b08      	ldr	r3, [pc, #32]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80072b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072b4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80072b8:	091b      	lsrs	r3, r3, #4
 80072ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80072be:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80072c2:	4a02      	ldr	r2, [pc, #8]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	61d3      	str	r3, [r2, #28]
 80072c8:	e00a      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80072ca:	bf00      	nop
 80072cc:	44020c00 	.word	0x44020c00
 80072d0:	44020800 	.word	0x44020800
 80072d4:	4b9f      	ldr	r3, [pc, #636]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	4a9e      	ldr	r2, [pc, #632]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80072da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072de:	61d3      	str	r3, [r2, #28]
 80072e0:	4b9c      	ldr	r3, [pc, #624]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80072e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072e6:	4a9b      	ldr	r2, [pc, #620]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80072e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80072f0:	4b98      	ldr	r3, [pc, #608]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80072f2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80072f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072fa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80072fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007302:	4a94      	ldr	r2, [pc, #592]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007304:	430b      	orrs	r3, r1
 8007306:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800730a:	e008      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800730c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007310:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8007314:	e003      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007316:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800731a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800731e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800732a:	663b      	str	r3, [r7, #96]	@ 0x60
 800732c:	2300      	movs	r3, #0
 800732e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007330:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d035      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800733a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800733e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007342:	2b30      	cmp	r3, #48	@ 0x30
 8007344:	d014      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8007346:	2b30      	cmp	r3, #48	@ 0x30
 8007348:	d80e      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800734a:	2b20      	cmp	r3, #32
 800734c:	d012      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800734e:	2b20      	cmp	r3, #32
 8007350:	d80a      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d010      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8007356:	2b10      	cmp	r3, #16
 8007358:	d106      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735a:	4b7e      	ldr	r3, [pc, #504]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800735c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735e:	4a7d      	ldr	r2, [pc, #500]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007364:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007366:	e008      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800736e:	e004      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007370:	bf00      	nop
 8007372:	e002      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10d      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007382:	4b74      	ldr	r3, [pc, #464]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007388:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800738c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007390:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007394:	4a6f      	ldr	r2, [pc, #444]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007396:	430b      	orrs	r3, r1
 8007398:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800739c:	e003      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80073a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80073b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073b4:	2300      	movs	r3, #0
 80073b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073b8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80073bc:	460b      	mov	r3, r1
 80073be:	4313      	orrs	r3, r2
 80073c0:	d033      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80073c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80073ce:	2b40      	cmp	r3, #64	@ 0x40
 80073d0:	d007      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80073d2:	e010      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d4:	4b5f      	ldr	r3, [pc, #380]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80073d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d8:	4a5e      	ldr	r2, [pc, #376]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80073da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073de:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80073e0:	e00d      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073e6:	3308      	adds	r3, #8
 80073e8:	4618      	mov	r0, r3
 80073ea:	f003 fb6f 	bl	800aacc <RCCEx_PLL2_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80073f4:	e003      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007406:	4b53      	ldr	r3, [pc, #332]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007408:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800740c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007410:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007414:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007418:	4a4e      	ldr	r2, [pc, #312]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800741a:	430b      	orrs	r3, r1
 800741c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007420:	e003      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007426:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800742a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007436:	653b      	str	r3, [r7, #80]	@ 0x50
 8007438:	2300      	movs	r3, #0
 800743a:	657b      	str	r3, [r7, #84]	@ 0x54
 800743c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007440:	460b      	mov	r3, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	d033      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8007446:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800744a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8007452:	2b80      	cmp	r3, #128	@ 0x80
 8007454:	d007      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8007456:	e010      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007458:	4b3e      	ldr	r3, [pc, #248]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800745a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745c:	4a3d      	ldr	r2, [pc, #244]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800745e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007462:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007464:	e00d      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007466:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800746a:	3308      	adds	r3, #8
 800746c:	4618      	mov	r0, r3
 800746e:	f003 fb2d 	bl	800aacc <RCCEx_PLL2_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007478:	e003      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10d      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800748a:	4b32      	ldr	r3, [pc, #200]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800748c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007490:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007494:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007498:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800749c:	4a2d      	ldr	r2, [pc, #180]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800749e:	430b      	orrs	r3, r1
 80074a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80074a4:	e003      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80074ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80074ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074bc:	2300      	movs	r3, #0
 80074be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80074c4:	460b      	mov	r3, r1
 80074c6:	4313      	orrs	r3, r2
 80074c8:	d04a      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80074ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d827      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80074d6:	a201      	add	r2, pc, #4	@ (adr r2, 80074dc <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	080074f1 	.word	0x080074f1
 80074e0:	080074ff 	.word	0x080074ff
 80074e4:	08007513 	.word	0x08007513
 80074e8:	0800752f 	.word	0x0800752f
 80074ec:	0800752f 	.word	0x0800752f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f0:	4b18      	ldr	r3, [pc, #96]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	4a17      	ldr	r2, [pc, #92]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80074f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074fa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80074fc:	e018      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007502:	3308      	adds	r3, #8
 8007504:	4618      	mov	r0, r3
 8007506:	f003 fae1 	bl	800aacc <RCCEx_PLL2_Config>
 800750a:	4603      	mov	r3, r0
 800750c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007510:	e00e      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007512:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007516:	3330      	adds	r3, #48	@ 0x30
 8007518:	4618      	mov	r0, r3
 800751a:	f003 fb6f 	bl	800abfc <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007524:	e004      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800752e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007530:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10f      	bne.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007538:	4b06      	ldr	r3, [pc, #24]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800753a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800753e:	f023 0107 	bic.w	r1, r3, #7
 8007542:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800754a:	4a02      	ldr	r2, [pc, #8]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800754c:	430b      	orrs	r3, r1
 800754e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007552:	e005      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8007554:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007558:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800755c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800756c:	643b      	str	r3, [r7, #64]	@ 0x40
 800756e:	2300      	movs	r3, #0
 8007570:	647b      	str	r3, [r7, #68]	@ 0x44
 8007572:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007576:	460b      	mov	r3, r1
 8007578:	4313      	orrs	r3, r2
 800757a:	f000 8081 	beq.w	8007680 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800757e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007582:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007586:	2b20      	cmp	r3, #32
 8007588:	d85f      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800758a:	a201      	add	r2, pc, #4	@ (adr r2, 8007590 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	08007615 	.word	0x08007615
 8007594:	0800764b 	.word	0x0800764b
 8007598:	0800764b 	.word	0x0800764b
 800759c:	0800764b 	.word	0x0800764b
 80075a0:	0800764b 	.word	0x0800764b
 80075a4:	0800764b 	.word	0x0800764b
 80075a8:	0800764b 	.word	0x0800764b
 80075ac:	0800764b 	.word	0x0800764b
 80075b0:	08007623 	.word	0x08007623
 80075b4:	0800764b 	.word	0x0800764b
 80075b8:	0800764b 	.word	0x0800764b
 80075bc:	0800764b 	.word	0x0800764b
 80075c0:	0800764b 	.word	0x0800764b
 80075c4:	0800764b 	.word	0x0800764b
 80075c8:	0800764b 	.word	0x0800764b
 80075cc:	0800764b 	.word	0x0800764b
 80075d0:	08007637 	.word	0x08007637
 80075d4:	0800764b 	.word	0x0800764b
 80075d8:	0800764b 	.word	0x0800764b
 80075dc:	0800764b 	.word	0x0800764b
 80075e0:	0800764b 	.word	0x0800764b
 80075e4:	0800764b 	.word	0x0800764b
 80075e8:	0800764b 	.word	0x0800764b
 80075ec:	0800764b 	.word	0x0800764b
 80075f0:	08007653 	.word	0x08007653
 80075f4:	0800764b 	.word	0x0800764b
 80075f8:	0800764b 	.word	0x0800764b
 80075fc:	0800764b 	.word	0x0800764b
 8007600:	0800764b 	.word	0x0800764b
 8007604:	0800764b 	.word	0x0800764b
 8007608:	0800764b 	.word	0x0800764b
 800760c:	0800764b 	.word	0x0800764b
 8007610:	08007653 	.word	0x08007653
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007614:	4bab      	ldr	r3, [pc, #684]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007618:	4aaa      	ldr	r2, [pc, #680]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800761a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800761e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007620:	e018      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007626:	3308      	adds	r3, #8
 8007628:	4618      	mov	r0, r3
 800762a:	f003 fa4f 	bl	800aacc <RCCEx_PLL2_Config>
 800762e:	4603      	mov	r3, r0
 8007630:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007634:	e00e      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800763a:	3330      	adds	r3, #48	@ 0x30
 800763c:	4618      	mov	r0, r3
 800763e:	f003 fadd 	bl	800abfc <RCCEx_PLL3_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007648:	e004      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007650:	e000      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8007652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007654:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10d      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800765c:	4b99      	ldr	r3, [pc, #612]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800765e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007662:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007666:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800766a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800766e:	4a95      	ldr	r2, [pc, #596]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007670:	430b      	orrs	r3, r1
 8007672:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007676:	e003      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007678:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800767c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800768c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800768e:	2300      	movs	r3, #0
 8007690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007692:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007696:	460b      	mov	r3, r1
 8007698:	4313      	orrs	r3, r2
 800769a:	d04e      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800769c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a8:	d02e      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80076aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ae:	d827      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80076b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b2:	d02b      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80076b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b6:	d823      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80076b8:	2b80      	cmp	r3, #128	@ 0x80
 80076ba:	d017      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80076bc:	2b80      	cmp	r3, #128	@ 0x80
 80076be:	d81f      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80076c4:	2b40      	cmp	r3, #64	@ 0x40
 80076c6:	d007      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80076c8:	e01a      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ca:	4b7e      	ldr	r3, [pc, #504]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80076cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ce:	4a7d      	ldr	r2, [pc, #500]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80076d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076d4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80076d6:	e01a      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076dc:	3308      	adds	r3, #8
 80076de:	4618      	mov	r0, r3
 80076e0:	f003 f9f4 	bl	800aacc <RCCEx_PLL2_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80076ea:	e010      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076f0:	3330      	adds	r3, #48	@ 0x30
 80076f2:	4618      	mov	r0, r3
 80076f4:	f003 fa82 	bl	800abfc <RCCEx_PLL3_Config>
 80076f8:	4603      	mov	r3, r0
 80076fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80076fe:	e006      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007706:	e002      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007708:	bf00      	nop
 800770a:	e000      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800770c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10d      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007716:	4b6b      	ldr	r3, [pc, #428]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800771c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007720:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007728:	4a66      	ldr	r2, [pc, #408]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800772a:	430b      	orrs	r3, r1
 800772c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007730:	e003      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007732:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007736:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800773a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007746:	633b      	str	r3, [r7, #48]	@ 0x30
 8007748:	2300      	movs	r3, #0
 800774a:	637b      	str	r3, [r7, #52]	@ 0x34
 800774c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007750:	460b      	mov	r3, r1
 8007752:	4313      	orrs	r3, r2
 8007754:	d055      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007756:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800775a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800775e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007762:	d031      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8007764:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007768:	d82a      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800776a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800776e:	d02d      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8007770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007774:	d824      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007776:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800777a:	d029      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800777c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007780:	d81e      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007786:	d011      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800778c:	d818      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d020      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8007792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007796:	d113      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007798:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800779c:	3308      	adds	r3, #8
 800779e:	4618      	mov	r0, r3
 80077a0:	f003 f994 	bl	800aacc <RCCEx_PLL2_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80077aa:	e014      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077b0:	3330      	adds	r3, #48	@ 0x30
 80077b2:	4618      	mov	r0, r3
 80077b4:	f003 fa22 	bl	800abfc <RCCEx_PLL3_Config>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80077be:	e00a      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80077c6:	e006      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80077c8:	bf00      	nop
 80077ca:	e004      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80077cc:	bf00      	nop
 80077ce:	e002      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80077d0:	bf00      	nop
 80077d2:	e000      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80077d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10d      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80077de:	4b39      	ldr	r3, [pc, #228]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80077e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077e4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80077e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80077f0:	4a34      	ldr	r2, [pc, #208]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80077f2:	430b      	orrs	r3, r1
 80077f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80077f8:	e003      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800780e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007810:	2300      	movs	r3, #0
 8007812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007814:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007818:	460b      	mov	r3, r1
 800781a:	4313      	orrs	r3, r2
 800781c:	d058      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800781e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007826:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800782a:	d031      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800782c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007830:	d82a      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007836:	d02d      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8007838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800783c:	d824      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800783e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007842:	d029      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007844:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007848:	d81e      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800784a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800784e:	d011      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8007850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007854:	d818      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d020      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800785a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800785e:	d113      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007864:	3308      	adds	r3, #8
 8007866:	4618      	mov	r0, r3
 8007868:	f003 f930 	bl	800aacc <RCCEx_PLL2_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007872:	e014      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007874:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007878:	3330      	adds	r3, #48	@ 0x30
 800787a:	4618      	mov	r0, r3
 800787c:	f003 f9be 	bl	800abfc <RCCEx_PLL3_Config>
 8007880:	4603      	mov	r3, r0
 8007882:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007886:	e00a      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800788e:	e006      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007890:	bf00      	nop
 8007892:	e004      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007894:	bf00      	nop
 8007896:	e002      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007898:	bf00      	nop
 800789a:	e000      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800789c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d110      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80078a6:	4b07      	ldr	r3, [pc, #28]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80078a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078ac:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80078b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078b8:	4902      	ldr	r1, [pc, #8]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80078c0:	e006      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80078c2:	bf00      	nop
 80078c4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	2100      	movs	r1, #0
 80078da:	6239      	str	r1, [r7, #32]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80078e6:	460b      	mov	r3, r1
 80078e8:	4313      	orrs	r3, r2
 80078ea:	d055      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80078ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078f4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80078f8:	d031      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80078fa:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80078fe:	d82a      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007904:	d02d      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8007906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800790a:	d824      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800790c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007910:	d029      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8007912:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007916:	d81e      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800791c:	d011      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800791e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007922:	d818      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d020      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800792c:	d113      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800792e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007932:	3308      	adds	r3, #8
 8007934:	4618      	mov	r0, r3
 8007936:	f003 f8c9 	bl	800aacc <RCCEx_PLL2_Config>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007940:	e014      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007942:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007946:	3330      	adds	r3, #48	@ 0x30
 8007948:	4618      	mov	r0, r3
 800794a:	f003 f957 	bl	800abfc <RCCEx_PLL3_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007954:	e00a      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800795c:	e006      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800795e:	bf00      	nop
 8007960:	e004      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007962:	bf00      	nop
 8007964:	e002      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007966:	bf00      	nop
 8007968:	e000      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800796a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10d      	bne.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007974:	4b88      	ldr	r3, [pc, #544]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800797a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800797e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007986:	4984      	ldr	r1, [pc, #528]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007988:	4313      	orrs	r3, r2
 800798a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800798e:	e003      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007990:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007994:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	2100      	movs	r1, #0
 80079a2:	61b9      	str	r1, [r7, #24]
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80079ae:	460b      	mov	r3, r1
 80079b0:	4313      	orrs	r3, r2
 80079b2:	d03d      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80079b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d81c      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80079c0:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	08007a03 	.word	0x08007a03
 80079cc:	080079d9 	.word	0x080079d9
 80079d0:	080079e7 	.word	0x080079e7
 80079d4:	08007a03 	.word	0x08007a03
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80079da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079dc:	4a6e      	ldr	r2, [pc, #440]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80079de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079e2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80079e4:	e00e      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079ea:	3308      	adds	r3, #8
 80079ec:	4618      	mov	r0, r3
 80079ee:	f003 f86d 	bl	800aacc <RCCEx_PLL2_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80079f8:	e004      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a00:	e000      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8007a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10d      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007a0c:	4b62      	ldr	r3, [pc, #392]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007a0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a12:	f023 0203 	bic.w	r2, r3, #3
 8007a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a1e:	495e      	ldr	r1, [pc, #376]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007a26:	e003      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6139      	str	r1, [r7, #16]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a46:	460b      	mov	r3, r1
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	d03a      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a58:	d00e      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8007a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a5e:	d815      	bhi.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d017      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8007a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a68:	d110      	bne.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a74:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007a76:	e00e      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f003 f824 	bl	800aacc <RCCEx_PLL2_Config>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007a8a:	e004      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a92:	e000      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8007a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10d      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007aa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007aac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ab0:	4939      	ldr	r1, [pc, #228]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007ab8:	e003      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007abe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ac2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	2100      	movs	r1, #0
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	f003 0310 	and.w	r3, r3, #16
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4313      	orrs	r3, r2
 8007adc:	d038      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007ade:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ae2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007ae6:	2b30      	cmp	r3, #48	@ 0x30
 8007ae8:	d01b      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8007aea:	2b30      	cmp	r3, #48	@ 0x30
 8007aec:	d815      	bhi.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d002      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	d007      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8007af6:	e010      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af8:	4b27      	ldr	r3, [pc, #156]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afc:	4a26      	ldr	r2, [pc, #152]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b04:	e00e      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b0a:	3330      	adds	r3, #48	@ 0x30
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f003 f875 	bl	800abfc <RCCEx_PLL3_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007b18:	e004      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b20:	e000      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8007b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10d      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007b2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b32:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007b3e:	4916      	ldr	r1, [pc, #88]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007b46:	e003      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b48:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b4c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	2100      	movs	r1, #0
 8007b5a:	6039      	str	r1, [r7, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b66:	460b      	mov	r3, r1
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	d00c      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b7a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8007b7e:	4906      	ldr	r1, [pc, #24]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8007b86:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8007b90:	46bd      	mov	sp, r7
 8007b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b96:	bf00      	nop
 8007b98:	44020c00 	.word	0x44020c00

08007b9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b08b      	sub	sp, #44	@ 0x2c
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007ba4:	4bad      	ldr	r3, [pc, #692]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bac:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007bae:	4bab      	ldr	r3, [pc, #684]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007bb8:	4ba8      	ldr	r3, [pc, #672]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbc:	0a1b      	lsrs	r3, r3, #8
 8007bbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bc2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8007bc4:	4ba5      	ldr	r3, [pc, #660]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007bce:	4ba3      	ldr	r3, [pc, #652]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd2:	08db      	lsrs	r3, r3, #3
 8007bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 8126 	beq.w	8007e3e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d053      	beq.n	8007ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d86f      	bhi.n	8007cde <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d003      	beq.n	8007c0c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d02b      	beq.n	8007c62 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8007c0a:	e068      	b.n	8007cde <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c0c:	4b93      	ldr	r3, [pc, #588]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	08db      	lsrs	r3, r3, #3
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	4a92      	ldr	r2, [pc, #584]	@ (8007e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007c18:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	ee07 3a90 	vmov	s15, r3
 8007c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c40:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c44:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007c60:	e068      	b.n	8007d34 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	ee07 3a90 	vmov	s15, r3
 8007c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8007e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007c9e:	e049      	b.n	8007d34 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007caa:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007e6c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8007cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	ee07 3a90 	vmov	s15, r3
 8007cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbc:	ed97 6a04 	vldr	s12, [r7, #16]
 8007cc0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ccc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007cdc:	e02a      	b.n	8007d34 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cde:	4b5f      	ldr	r3, [pc, #380]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	08db      	lsrs	r3, r3, #3
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	4a5d      	ldr	r2, [pc, #372]	@ (8007e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007cea:	fa22 f303 	lsr.w	r3, r2, r3
 8007cee:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	ee07 3a90 	vmov	s15, r3
 8007cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	ee07 3a90 	vmov	s15, r3
 8007d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d12:	ed97 6a04 	vldr	s12, [r7, #16]
 8007d16:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007d32:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d34:	4b49      	ldr	r3, [pc, #292]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d40:	d121      	bne.n	8007d86 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007d42:	4b46      	ldr	r3, [pc, #280]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d017      	beq.n	8007d7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007d4e:	4b43      	ldr	r3, [pc, #268]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d52:	0a5b      	lsrs	r3, r3, #9
 8007d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d58:	ee07 3a90 	vmov	s15, r3
 8007d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8007d60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d64:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007d68:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d74:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	e006      	b.n	8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e002      	b.n	8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d8c:	4b33      	ldr	r3, [pc, #204]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d98:	d121      	bne.n	8007dde <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007d9a:	4b30      	ldr	r3, [pc, #192]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d017      	beq.n	8007dd6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007da6:	4b2d      	ldr	r3, [pc, #180]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007daa:	0c1b      	lsrs	r3, r3, #16
 8007dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007db0:	ee07 3a90 	vmov	s15, r3
 8007db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007dc0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dcc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	605a      	str	r2, [r3, #4]
 8007dd4:	e006      	b.n	8007de4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	605a      	str	r2, [r3, #4]
 8007ddc:	e002      	b.n	8007de4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007de4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007df0:	d121      	bne.n	8007e36 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007df2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d017      	beq.n	8007e2e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007dfe:	4b17      	ldr	r3, [pc, #92]	@ (8007e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e02:	0e1b      	lsrs	r3, r3, #24
 8007e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e08:	ee07 3a90 	vmov	s15, r3
 8007e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e14:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007e18:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e24:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007e2c:	e010      	b.n	8007e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	609a      	str	r2, [r3, #8]
}
 8007e34:	e00c      	b.n	8007e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	609a      	str	r2, [r3, #8]
}
 8007e3c:	e008      	b.n	8007e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	609a      	str	r2, [r3, #8]
}
 8007e50:	bf00      	nop
 8007e52:	372c      	adds	r7, #44	@ 0x2c
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	44020c00 	.word	0x44020c00
 8007e60:	03d09000 	.word	0x03d09000
 8007e64:	46000000 	.word	0x46000000
 8007e68:	4a742400 	.word	0x4a742400
 8007e6c:	4bbebc20 	.word	0x4bbebc20

08007e70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b08b      	sub	sp, #44	@ 0x2c
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007e78:	4bad      	ldr	r3, [pc, #692]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e80:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007e82:	4bab      	ldr	r3, [pc, #684]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007e8c:	4ba8      	ldr	r3, [pc, #672]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e90:	0a1b      	lsrs	r3, r3, #8
 8007e92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e96:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8007e98:	4ba5      	ldr	r3, [pc, #660]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007ea2:	4ba3      	ldr	r3, [pc, #652]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea6:	08db      	lsrs	r3, r3, #3
 8007ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	fb02 f303 	mul.w	r3, r2, r3
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eba:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8126 	beq.w	8008112 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d053      	beq.n	8007f74 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d86f      	bhi.n	8007fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d003      	beq.n	8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d02b      	beq.n	8007f36 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8007ede:	e068      	b.n	8007fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ee0:	4b93      	ldr	r3, [pc, #588]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	08db      	lsrs	r3, r3, #3
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	4a92      	ldr	r2, [pc, #584]	@ (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	ee07 3a90 	vmov	s15, r3
 8007f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f14:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f18:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007f34:	e068      	b.n	8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	ee07 3a90 	vmov	s15, r3
 8007f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f40:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800813c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f52:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007f72:	e049      	b.n	8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	ee07 3a90 	vmov	s15, r3
 8007f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f90:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f94:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007fb0:	e02a      	b.n	8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	08db      	lsrs	r3, r3, #3
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	ee07 3a90 	vmov	s15, r3
 8007fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	ee07 3a90 	vmov	s15, r3
 8007fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	ee07 3a90 	vmov	s15, r3
 8007fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe6:	ed97 6a04 	vldr	s12, [r7, #16]
 8007fea:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008002:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008006:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008008:	4b49      	ldr	r3, [pc, #292]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008014:	d121      	bne.n	800805a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008016:	4b46      	ldr	r3, [pc, #280]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d017      	beq.n	8008052 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008022:	4b43      	ldr	r3, [pc, #268]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008026:	0a5b      	lsrs	r3, r3, #9
 8008028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800802c:	ee07 3a90 	vmov	s15, r3
 8008030:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8008034:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008038:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800803c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008048:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	e006      	b.n	8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	e002      	b.n	8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008060:	4b33      	ldr	r3, [pc, #204]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800806c:	d121      	bne.n	80080b2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800806e:	4b30      	ldr	r3, [pc, #192]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d017      	beq.n	80080aa <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800807a:	4b2d      	ldr	r3, [pc, #180]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800807c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807e:	0c1b      	lsrs	r3, r3, #16
 8008080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008084:	ee07 3a90 	vmov	s15, r3
 8008088:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800808c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008090:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008094:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800809c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080a0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	605a      	str	r2, [r3, #4]
 80080a8:	e006      	b.n	80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	605a      	str	r2, [r3, #4]
 80080b0:	e002      	b.n	80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080c4:	d121      	bne.n	800810a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80080c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80080c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d017      	beq.n	8008102 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80080d2:	4b17      	ldr	r3, [pc, #92]	@ (8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80080d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d6:	0e1b      	lsrs	r3, r3, #24
 80080d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080dc:	ee07 3a90 	vmov	s15, r3
 80080e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80080e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080e8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80080ec:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80080f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008100:	e010      	b.n	8008124 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	609a      	str	r2, [r3, #8]
}
 8008108:	e00c      	b.n	8008124 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	609a      	str	r2, [r3, #8]
}
 8008110:	e008      	b.n	8008124 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	609a      	str	r2, [r3, #8]
}
 8008124:	bf00      	nop
 8008126:	372c      	adds	r7, #44	@ 0x2c
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	44020c00 	.word	0x44020c00
 8008134:	03d09000 	.word	0x03d09000
 8008138:	46000000 	.word	0x46000000
 800813c:	4a742400 	.word	0x4a742400
 8008140:	4bbebc20 	.word	0x4bbebc20

08008144 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8008144:	b480      	push	{r7}
 8008146:	b08b      	sub	sp, #44	@ 0x2c
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800814c:	4bad      	ldr	r3, [pc, #692]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800814e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008154:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008156:	4bab      	ldr	r3, [pc, #684]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8008160:	4ba8      	ldr	r3, [pc, #672]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008164:	0a1b      	lsrs	r3, r3, #8
 8008166:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800816a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800816c:	4ba5      	ldr	r3, [pc, #660]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800816e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008170:	f003 0310 	and.w	r3, r3, #16
 8008174:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008176:	4ba3      	ldr	r3, [pc, #652]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800817a:	08db      	lsrs	r3, r3, #3
 800817c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	fb02 f303 	mul.w	r3, r2, r3
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 8126 	beq.w	80083e6 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d053      	beq.n	8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d86f      	bhi.n	8008286 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d003      	beq.n	80081b4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d02b      	beq.n	800820a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80081b2:	e068      	b.n	8008286 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081b4:	4b93      	ldr	r3, [pc, #588]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	08db      	lsrs	r3, r3, #3
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	4a92      	ldr	r2, [pc, #584]	@ (8008408 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80081c0:	fa22 f303 	lsr.w	r3, r2, r3
 80081c4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	ee07 3a90 	vmov	s15, r3
 80081cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80081ec:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800840c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80081f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008204:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008208:	e068      	b.n	80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	ee07 3a90 	vmov	s15, r3
 8008210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008214:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008410 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008226:	ed97 6a04 	vldr	s12, [r7, #16]
 800822a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800840c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800822e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800823a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008242:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008246:	e049      	b.n	80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8008256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008264:	ed97 6a04 	vldr	s12, [r7, #16]
 8008268:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800840c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800826c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800827c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008280:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008284:	e02a      	b.n	80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008286:	4b5f      	ldr	r3, [pc, #380]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	08db      	lsrs	r3, r3, #3
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	4a5d      	ldr	r2, [pc, #372]	@ (8008408 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008292:	fa22 f303 	lsr.w	r3, r2, r3
 8008296:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80082be:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800840c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80082c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80082da:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082dc:	4b49      	ldr	r3, [pc, #292]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e8:	d121      	bne.n	800832e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80082ea:	4b46      	ldr	r3, [pc, #280]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80082ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d017      	beq.n	8008326 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80082f6:	4b43      	ldr	r3, [pc, #268]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80082f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082fa:	0a5b      	lsrs	r3, r3, #9
 80082fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008300:	ee07 3a90 	vmov	s15, r3
 8008304:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8008308:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800830c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008310:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800831c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e006      	b.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	e002      	b.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008334:	4b33      	ldr	r3, [pc, #204]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800833c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008340:	d121      	bne.n	8008386 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008342:	4b30      	ldr	r3, [pc, #192]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d017      	beq.n	800837e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800834e:	4b2d      	ldr	r3, [pc, #180]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008352:	0c1b      	lsrs	r3, r3, #16
 8008354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008358:	ee07 3a90 	vmov	s15, r3
 800835c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008360:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008364:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008368:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800836c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008374:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	e006      	b.n	800838c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	605a      	str	r2, [r3, #4]
 8008384:	e002      	b.n	800838c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800838c:	4b1d      	ldr	r3, [pc, #116]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008398:	d121      	bne.n	80083de <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800839a:	4b1a      	ldr	r3, [pc, #104]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800839c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d017      	beq.n	80083d6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80083a6:	4b17      	ldr	r3, [pc, #92]	@ (8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80083a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083aa:	0e1b      	lsrs	r3, r3, #24
 80083ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80083b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083bc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80083c0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80083c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083cc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80083d4:	e010      	b.n	80083f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	609a      	str	r2, [r3, #8]
}
 80083dc:	e00c      	b.n	80083f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	609a      	str	r2, [r3, #8]
}
 80083e4:	e008      	b.n	80083f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	609a      	str	r2, [r3, #8]
}
 80083f8:	bf00      	nop
 80083fa:	372c      	adds	r7, #44	@ 0x2c
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	44020c00 	.word	0x44020c00
 8008408:	03d09000 	.word	0x03d09000
 800840c:	46000000 	.word	0x46000000
 8008410:	4a742400 	.word	0x4a742400
 8008414:	4bbebc20 	.word	0x4bbebc20

08008418 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008418:	b590      	push	{r4, r7, lr}
 800841a:	b08f      	sub	sp, #60	@ 0x3c
 800841c:	af00      	add	r7, sp, #0
 800841e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008426:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800842a:	4321      	orrs	r1, r4
 800842c:	d150      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800842e:	4b26      	ldr	r3, [pc, #152]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008438:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800843a:	4b23      	ldr	r3, [pc, #140]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800843c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b02      	cmp	r3, #2
 8008446:	d108      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800844e:	d104      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008450:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008454:	637b      	str	r3, [r7, #52]	@ 0x34
 8008456:	f002 bb2a 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800845a:	4b1b      	ldr	r3, [pc, #108]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800845c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008468:	d108      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008470:	d104      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8008472:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
 8008478:	f002 bb19 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800847c:	4b12      	ldr	r3, [pc, #72]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008488:	d119      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800848a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008490:	d115      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008492:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800849a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849e:	d30a      	bcc.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80084a0:	4b09      	ldr	r3, [pc, #36]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	0a1b      	lsrs	r3, r3, #8
 80084a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084aa:	4a08      	ldr	r2, [pc, #32]	@ (80084cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80084ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80084b2:	f002 bafc 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80084ba:	f002 baf8 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c2:	f002 baf4 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084c6:	bf00      	nop
 80084c8:	44020c00 	.word	0x44020c00
 80084cc:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80084d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084d4:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80084d8:	ea50 0104 	orrs.w	r1, r0, r4
 80084dc:	f001 8275 	beq.w	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80084e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084e4:	2801      	cmp	r0, #1
 80084e6:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80084ea:	f082 82dd 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084f2:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80084f6:	ea50 0104 	orrs.w	r1, r0, r4
 80084fa:	f001 816c 	beq.w	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80084fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008502:	2801      	cmp	r0, #1
 8008504:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8008508:	f082 82ce 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800850c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008510:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8008514:	ea50 0104 	orrs.w	r1, r0, r4
 8008518:	f001 8602 	beq.w	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800851c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008520:	2801      	cmp	r0, #1
 8008522:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8008526:	f082 82bf 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800852a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800852e:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8008532:	ea50 0104 	orrs.w	r1, r0, r4
 8008536:	f001 854c 	beq.w	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800853a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800853e:	2801      	cmp	r0, #1
 8008540:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8008544:	f082 82b0 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800854c:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8008550:	ea50 0104 	orrs.w	r1, r0, r4
 8008554:	f001 849e 	beq.w	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8008558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800855c:	2801      	cmp	r0, #1
 800855e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8008562:	f082 82a1 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800856a:	f1a1 0420 	sub.w	r4, r1, #32
 800856e:	ea50 0104 	orrs.w	r1, r0, r4
 8008572:	f001 83e8 	beq.w	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8008576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800857a:	2801      	cmp	r0, #1
 800857c:	f171 0120 	sbcs.w	r1, r1, #32
 8008580:	f082 8292 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008588:	f1a1 0410 	sub.w	r4, r1, #16
 800858c:	ea50 0104 	orrs.w	r1, r0, r4
 8008590:	f002 8256 	beq.w	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8008594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008598:	2801      	cmp	r0, #1
 800859a:	f171 0110 	sbcs.w	r1, r1, #16
 800859e:	f082 8283 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80085a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085a6:	f1a1 0408 	sub.w	r4, r1, #8
 80085aa:	ea50 0104 	orrs.w	r1, r0, r4
 80085ae:	f002 81cc 	beq.w	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80085b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085b6:	2801      	cmp	r0, #1
 80085b8:	f171 0108 	sbcs.w	r1, r1, #8
 80085bc:	f082 8274 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80085c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085c4:	1f0c      	subs	r4, r1, #4
 80085c6:	ea50 0104 	orrs.w	r1, r0, r4
 80085ca:	f001 8648 	beq.w	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80085ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085d2:	2801      	cmp	r0, #1
 80085d4:	f171 0104 	sbcs.w	r1, r1, #4
 80085d8:	f082 8266 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80085dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085e0:	1e8c      	subs	r4, r1, #2
 80085e2:	ea50 0104 	orrs.w	r1, r0, r4
 80085e6:	f002 8143 	beq.w	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80085ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085ee:	2801      	cmp	r0, #1
 80085f0:	f171 0102 	sbcs.w	r1, r1, #2
 80085f4:	f082 8258 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80085f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085fc:	1e4c      	subs	r4, r1, #1
 80085fe:	ea50 0104 	orrs.w	r1, r0, r4
 8008602:	f002 80ce 	beq.w	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8008606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800860a:	2801      	cmp	r0, #1
 800860c:	f171 0101 	sbcs.w	r1, r1, #1
 8008610:	f082 824a 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008614:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008618:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800861c:	4321      	orrs	r1, r4
 800861e:	f002 8059 	beq.w	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8008622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008626:	4cd9      	ldr	r4, [pc, #868]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008628:	42a0      	cmp	r0, r4
 800862a:	f171 0100 	sbcs.w	r1, r1, #0
 800862e:	f082 823b 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008636:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800863a:	4321      	orrs	r1, r4
 800863c:	f001 87d9 	beq.w	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8008640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008644:	4cd2      	ldr	r4, [pc, #840]	@ (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008646:	42a0      	cmp	r0, r4
 8008648:	f171 0100 	sbcs.w	r1, r1, #0
 800864c:	f082 822c 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008654:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008658:	4321      	orrs	r1, r4
 800865a:	f001 8751 	beq.w	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800865e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008662:	4ccc      	ldr	r4, [pc, #816]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008664:	42a0      	cmp	r0, r4
 8008666:	f171 0100 	sbcs.w	r1, r1, #0
 800866a:	f082 821d 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800866e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008672:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008676:	4321      	orrs	r1, r4
 8008678:	f001 869a 	beq.w	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800867c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008680:	4cc5      	ldr	r4, [pc, #788]	@ (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008682:	42a0      	cmp	r0, r4
 8008684:	f171 0100 	sbcs.w	r1, r1, #0
 8008688:	f082 820e 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800868c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008690:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008694:	4321      	orrs	r1, r4
 8008696:	f001 8612 	beq.w	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800869a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800869e:	4cbf      	ldr	r4, [pc, #764]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80086a0:	42a0      	cmp	r0, r4
 80086a2:	f171 0100 	sbcs.w	r1, r1, #0
 80086a6:	f082 81ff 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80086aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086ae:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80086b2:	4321      	orrs	r1, r4
 80086b4:	f002 817e 	beq.w	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80086b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086bc:	4cb8      	ldr	r4, [pc, #736]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80086be:	42a0      	cmp	r0, r4
 80086c0:	f171 0100 	sbcs.w	r1, r1, #0
 80086c4:	f082 81f0 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80086c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086cc:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 80086d0:	4321      	orrs	r1, r4
 80086d2:	f000 829e 	beq.w	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80086d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086da:	4cb2      	ldr	r4, [pc, #712]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086dc:	42a0      	cmp	r0, r4
 80086de:	f171 0100 	sbcs.w	r1, r1, #0
 80086e2:	f082 81e1 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80086e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086ea:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80086ee:	4321      	orrs	r1, r4
 80086f0:	f000 826d 	beq.w	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80086f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086f8:	4cab      	ldr	r4, [pc, #684]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80086fa:	42a0      	cmp	r0, r4
 80086fc:	f171 0100 	sbcs.w	r1, r1, #0
 8008700:	f082 81d2 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008708:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800870c:	4321      	orrs	r1, r4
 800870e:	f001 800d 	beq.w	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8008712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008716:	4ca5      	ldr	r4, [pc, #660]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008718:	42a0      	cmp	r0, r4
 800871a:	f171 0100 	sbcs.w	r1, r1, #0
 800871e:	f082 81c3 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008726:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800872a:	4321      	orrs	r1, r4
 800872c:	f000 81d0 	beq.w	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8008730:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008734:	4c9e      	ldr	r4, [pc, #632]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008736:	42a0      	cmp	r0, r4
 8008738:	f171 0100 	sbcs.w	r1, r1, #0
 800873c:	f082 81b4 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008744:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8008748:	4321      	orrs	r1, r4
 800874a:	f000 8142 	beq.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800874e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008752:	4c98      	ldr	r4, [pc, #608]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008754:	42a0      	cmp	r0, r4
 8008756:	f171 0100 	sbcs.w	r1, r1, #0
 800875a:	f082 81a5 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800875e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008762:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8008766:	4321      	orrs	r1, r4
 8008768:	f001 824e 	beq.w	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800876c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008770:	4c91      	ldr	r4, [pc, #580]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008772:	42a0      	cmp	r0, r4
 8008774:	f171 0100 	sbcs.w	r1, r1, #0
 8008778:	f082 8196 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800877c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008780:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008784:	4321      	orrs	r1, r4
 8008786:	f001 8197 	beq.w	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800878a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800878e:	4c8b      	ldr	r4, [pc, #556]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008790:	42a0      	cmp	r0, r4
 8008792:	f171 0100 	sbcs.w	r1, r1, #0
 8008796:	f082 8187 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800879a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800879e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80087a2:	4321      	orrs	r1, r4
 80087a4:	f001 8154 	beq.w	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80087a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087ac:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80087b0:	f171 0100 	sbcs.w	r1, r1, #0
 80087b4:	f082 8178 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80087b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087bc:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80087c0:	4321      	orrs	r1, r4
 80087c2:	f001 80b7 	beq.w	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80087c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087ca:	f248 0401 	movw	r4, #32769	@ 0x8001
 80087ce:	42a0      	cmp	r0, r4
 80087d0:	f171 0100 	sbcs.w	r1, r1, #0
 80087d4:	f082 8168 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80087d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087dc:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80087e0:	4321      	orrs	r1, r4
 80087e2:	f001 8064 	beq.w	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80087e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087ea:	f244 0401 	movw	r4, #16385	@ 0x4001
 80087ee:	42a0      	cmp	r0, r4
 80087f0:	f171 0100 	sbcs.w	r1, r1, #0
 80087f4:	f082 8158 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80087f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087fc:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008800:	4321      	orrs	r1, r4
 8008802:	f001 8011 	beq.w	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8008806:	e9d7 0100 	ldrd	r0, r1, [r7]
 800880a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800880e:	42a0      	cmp	r0, r4
 8008810:	f171 0100 	sbcs.w	r1, r1, #0
 8008814:	f082 8148 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800881c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8008820:	4321      	orrs	r1, r4
 8008822:	f000 871e 	beq.w	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8008826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800882a:	f241 0401 	movw	r4, #4097	@ 0x1001
 800882e:	42a0      	cmp	r0, r4
 8008830:	f171 0100 	sbcs.w	r1, r1, #0
 8008834:	f082 8138 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800883c:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8008840:	4321      	orrs	r1, r4
 8008842:	f000 86a8 	beq.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8008846:	e9d7 0100 	ldrd	r0, r1, [r7]
 800884a:	f640 0401 	movw	r4, #2049	@ 0x801
 800884e:	42a0      	cmp	r0, r4
 8008850:	f171 0100 	sbcs.w	r1, r1, #0
 8008854:	f082 8128 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800885c:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8008860:	4321      	orrs	r1, r4
 8008862:	f000 8632 	beq.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8008866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800886a:	f240 4401 	movw	r4, #1025	@ 0x401
 800886e:	42a0      	cmp	r0, r4
 8008870:	f171 0100 	sbcs.w	r1, r1, #0
 8008874:	f082 8118 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800887c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8008880:	4321      	orrs	r1, r4
 8008882:	f000 85b0 	beq.w	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8008886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800888a:	f240 2401 	movw	r4, #513	@ 0x201
 800888e:	42a0      	cmp	r0, r4
 8008890:	f171 0100 	sbcs.w	r1, r1, #0
 8008894:	f082 8108 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800889c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80088a0:	4321      	orrs	r1, r4
 80088a2:	f000 8535 	beq.w	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80088a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088aa:	f240 1401 	movw	r4, #257	@ 0x101
 80088ae:	42a0      	cmp	r0, r4
 80088b0:	f171 0100 	sbcs.w	r1, r1, #0
 80088b4:	f082 80f8 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088bc:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80088c0:	4321      	orrs	r1, r4
 80088c2:	f000 84ba 	beq.w	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80088c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088ca:	2881      	cmp	r0, #129	@ 0x81
 80088cc:	f171 0100 	sbcs.w	r1, r1, #0
 80088d0:	f082 80ea 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088d8:	2821      	cmp	r0, #33	@ 0x21
 80088da:	f171 0100 	sbcs.w	r1, r1, #0
 80088de:	d26f      	bcs.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80088e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088e4:	4301      	orrs	r1, r0
 80088e6:	f002 80df 	beq.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088ee:	1e42      	subs	r2, r0, #1
 80088f0:	f141 33ff 	adc.w	r3, r1, #4294967295
 80088f4:	2a20      	cmp	r2, #32
 80088f6:	f173 0100 	sbcs.w	r1, r3, #0
 80088fa:	f082 80d5 	bcs.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088fe:	2a1f      	cmp	r2, #31
 8008900:	f202 80d2 	bhi.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008904:	a101      	add	r1, pc, #4	@ (adr r1, 800890c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008906:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800890a:	bf00      	nop
 800890c:	08008c6d 	.word	0x08008c6d
 8008910:	08008d39 	.word	0x08008d39
 8008914:	0800aaa9 	.word	0x0800aaa9
 8008918:	08008df9 	.word	0x08008df9
 800891c:	0800aaa9 	.word	0x0800aaa9
 8008920:	0800aaa9 	.word	0x0800aaa9
 8008924:	0800aaa9 	.word	0x0800aaa9
 8008928:	08008ec9 	.word	0x08008ec9
 800892c:	0800aaa9 	.word	0x0800aaa9
 8008930:	0800aaa9 	.word	0x0800aaa9
 8008934:	0800aaa9 	.word	0x0800aaa9
 8008938:	0800aaa9 	.word	0x0800aaa9
 800893c:	0800aaa9 	.word	0x0800aaa9
 8008940:	0800aaa9 	.word	0x0800aaa9
 8008944:	0800aaa9 	.word	0x0800aaa9
 8008948:	08008fab 	.word	0x08008fab
 800894c:	0800aaa9 	.word	0x0800aaa9
 8008950:	0800aaa9 	.word	0x0800aaa9
 8008954:	0800aaa9 	.word	0x0800aaa9
 8008958:	0800aaa9 	.word	0x0800aaa9
 800895c:	0800aaa9 	.word	0x0800aaa9
 8008960:	0800aaa9 	.word	0x0800aaa9
 8008964:	0800aaa9 	.word	0x0800aaa9
 8008968:	0800aaa9 	.word	0x0800aaa9
 800896c:	0800aaa9 	.word	0x0800aaa9
 8008970:	0800aaa9 	.word	0x0800aaa9
 8008974:	0800aaa9 	.word	0x0800aaa9
 8008978:	0800aaa9 	.word	0x0800aaa9
 800897c:	0800aaa9 	.word	0x0800aaa9
 8008980:	0800aaa9 	.word	0x0800aaa9
 8008984:	0800aaa9 	.word	0x0800aaa9
 8008988:	08009081 	.word	0x08009081
 800898c:	80000001 	.word	0x80000001
 8008990:	40000001 	.word	0x40000001
 8008994:	20000001 	.word	0x20000001
 8008998:	10000001 	.word	0x10000001
 800899c:	08000001 	.word	0x08000001
 80089a0:	04000001 	.word	0x04000001
 80089a4:	00800001 	.word	0x00800001
 80089a8:	00400001 	.word	0x00400001
 80089ac:	00200001 	.word	0x00200001
 80089b0:	00100001 	.word	0x00100001
 80089b4:	00080001 	.word	0x00080001
 80089b8:	00040001 	.word	0x00040001
 80089bc:	00020001 	.word	0x00020001
 80089c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c4:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80089c8:	430b      	orrs	r3, r1
 80089ca:	f000 83c4 	beq.w	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80089ce:	f002 b86b 	b.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80089d2:	4ba1      	ldr	r3, [pc, #644]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80089d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80089d8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80089dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089e4:	d036      	beq.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089ec:	d86b      	bhi.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089f4:	d02b      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089fc:	d863      	bhi.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a04:	d01b      	beq.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a0c:	d85b      	bhi.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a1a:	d008      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8008a1c:	e053      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a1e:	f107 0320 	add.w	r3, r7, #32
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff f8ba 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a2c:	e04e      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a2e:	f107 0314 	add.w	r3, r7, #20
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fa1c 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a3c:	e046      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a3e:	f107 0308 	add.w	r3, r7, #8
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff fb7e 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a4c:	e03e      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008a4e:	4b83      	ldr	r3, [pc, #524]	@ (8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008a50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a52:	e03b      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a54:	4b80      	ldr	r3, [pc, #512]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a5a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a60:	4b7d      	ldr	r3, [pc, #500]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d10c      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d109      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a72:	4b79      	ldr	r3, [pc, #484]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	08db      	lsrs	r3, r3, #3
 8008a78:	f003 0303 	and.w	r3, r3, #3
 8008a7c:	4a78      	ldr	r2, [pc, #480]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a84:	e01e      	b.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a86:	4b74      	ldr	r3, [pc, #464]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a92:	d106      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a9a:	d102      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a9c:	4b71      	ldr	r3, [pc, #452]	@ (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa0:	e010      	b.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aae:	d106      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ab6:	d102      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008abc:	e002      	b.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008ac2:	e003      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008ac4:	e002      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008aca:	bf00      	nop
          }
        }
        break;
 8008acc:	f001 bfef 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008ad0:	4b61      	ldr	r3, [pc, #388]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ad6:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8008ada:	633b      	str	r3, [r7, #48]	@ 0x30
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ae2:	d036      	beq.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008aea:	d86b      	bhi.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008af2:	d02b      	beq.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008afa:	d863      	bhi.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b02:	d01b      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b0a:	d85b      	bhi.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d004      	beq.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008b18:	d008      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8008b1a:	e053      	b.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b1c:	f107 0320 	add.w	r3, r7, #32
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff f83b 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b2a:	e04e      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b2c:	f107 0314 	add.w	r3, r7, #20
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff f99d 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b3a:	e046      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b3c:	f107 0308 	add.w	r3, r7, #8
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff faff 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b4a:	e03e      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008b4c:	4b43      	ldr	r3, [pc, #268]	@ (8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008b4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b50:	e03b      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b52:	4b41      	ldr	r3, [pc, #260]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b58:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d10c      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8008b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d109      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b70:	4b39      	ldr	r3, [pc, #228]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	08db      	lsrs	r3, r3, #3
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	4a39      	ldr	r2, [pc, #228]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b82:	e01e      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b84:	4b34      	ldr	r3, [pc, #208]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b90:	d106      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b98:	d102      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b9a:	4b32      	ldr	r3, [pc, #200]	@ (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b9e:	e010      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bac:	d106      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8008bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bb4:	d102      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bba:	e002      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008bc0:	e003      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008bc2:	e002      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bc8:	bf00      	nop
          }
        }
        break;
 8008bca:	f001 bf70 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008bce:	4b22      	ldr	r3, [pc, #136]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008bd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d108      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008be0:	f107 0320 	add.w	r3, r7, #32
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fe ffd9 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008bee:	f001 bf5e 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	2b40      	cmp	r3, #64	@ 0x40
 8008bf6:	d108      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf8:	f107 0314 	add.w	r3, r7, #20
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7ff f937 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c06:	f001 bf52 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c0e:	f001 bf4e 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008c12:	4b11      	ldr	r3, [pc, #68]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008c14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d108      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c24:	f107 0320 	add.w	r3, r7, #32
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe ffb7 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c32:	f001 bf3c 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	2b80      	cmp	r3, #128	@ 0x80
 8008c3a:	d108      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff f915 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c4a:	f001 bf30 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c52:	f001 bf2c 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c56:	bf00      	nop
 8008c58:	44020c00 	.word	0x44020c00
 8008c5c:	00bb8000 	.word	0x00bb8000
 8008c60:	03d09000 	.word	0x03d09000
 8008c64:	003d0900 	.word	0x003d0900
 8008c68:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008c6c:	4b9d      	ldr	r3, [pc, #628]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008c6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d104      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008c7e:	f7fc ffd7 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 8008c82:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c84:	f001 bf13 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008c88:	4b96      	ldr	r3, [pc, #600]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c94:	d10a      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d107      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c9c:	f107 0314 	add.w	r3, r7, #20
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff f8e5 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008caa:	e043      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008cac:	4b8d      	ldr	r3, [pc, #564]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cb8:	d10a      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8008cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d107      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff fa3d 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cce:	e031      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008cd0:	4b84      	ldr	r3, [pc, #528]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d10c      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d109      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ce2:	4b80      	ldr	r3, [pc, #512]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	08db      	lsrs	r3, r3, #3
 8008ce8:	f003 0303 	and.w	r3, r3, #3
 8008cec:	4a7e      	ldr	r2, [pc, #504]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008cee:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf4:	e01e      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d02:	d105      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d102      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8008d0a:	4b78      	ldr	r3, [pc, #480]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0e:	e011      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008d10:	4b74      	ldr	r3, [pc, #464]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d106      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	2b05      	cmp	r3, #5
 8008d22:	d103      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008d24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d2a:	e003      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d30:	f001 bebd 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d34:	f001 bebb 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008d38:	4b6a      	ldr	r3, [pc, #424]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008d3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d42:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d104      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d4a:	f7fc ff5b 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8008d4e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d50:	f001 bead 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008d54:	4b63      	ldr	r3, [pc, #396]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d60:	d10a      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	2b08      	cmp	r3, #8
 8008d66:	d107      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d68:	f107 0314 	add.w	r3, r7, #20
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff f87f 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d76:	e03d      	b.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	2b10      	cmp	r3, #16
 8008d7c:	d108      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff f9de 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d8c:	f001 be8f 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008d90:	4b54      	ldr	r3, [pc, #336]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0302 	and.w	r3, r3, #2
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d10c      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	2b18      	cmp	r3, #24
 8008da0:	d109      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008da2:	4b50      	ldr	r3, [pc, #320]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	08db      	lsrs	r3, r3, #3
 8008da8:	f003 0303 	and.w	r3, r3, #3
 8008dac:	4a4e      	ldr	r2, [pc, #312]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008dae:	fa22 f303 	lsr.w	r3, r2, r3
 8008db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db4:	e01e      	b.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008db6:	4b4b      	ldr	r3, [pc, #300]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dc2:	d105      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d102      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8008dca:	4b48      	ldr	r3, [pc, #288]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dce:	e011      	b.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008dd0:	4b44      	ldr	r3, [pc, #272]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d106      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8008dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de0:	2b28      	cmp	r3, #40	@ 0x28
 8008de2:	d103      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008de4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dea:	e003      	b.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008df0:	f001 be5d 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008df4:	f001 be5b 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008df8:	4b3a      	ldr	r3, [pc, #232]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008dfe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008e02:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d104      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e0a:	f7fc fefb 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8008e0e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e10:	f001 be4d 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008e14:	4b33      	ldr	r3, [pc, #204]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e20:	d10a      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	2b40      	cmp	r3, #64	@ 0x40
 8008e26:	d107      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e28:	f107 0314 	add.w	r3, r7, #20
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff f81f 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e36:	e045      	b.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008e38:	4b2a      	ldr	r3, [pc, #168]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e44:	d10a      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	2b80      	cmp	r3, #128	@ 0x80
 8008e4a:	d107      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e4c:	f107 0308 	add.w	r3, r7, #8
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7ff f977 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e5a:	e033      	b.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008e5c:	4b21      	ldr	r3, [pc, #132]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d10c      	bne.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e6c:	d109      	bne.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	08db      	lsrs	r3, r3, #3
 8008e74:	f003 0303 	and.w	r3, r3, #3
 8008e78:	4a1b      	ldr	r2, [pc, #108]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e80:	e020      	b.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008e82:	4b18      	ldr	r3, [pc, #96]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e8e:	d106      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e96:	d102      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008e98:	4b14      	ldr	r3, [pc, #80]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e9c:	e012      	b.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008e9e:	4b11      	ldr	r3, [pc, #68]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008eb2:	d103      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008eb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eba:	e003      	b.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ec0:	f001 bdf5 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ec4:	f001 bdf3 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008ec8:	4b06      	ldr	r3, [pc, #24]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ece:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008ed2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10a      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008eda:	f7fc fe93 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8008ede:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ee0:	f001 bde5 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ee4:	44020c00 	.word	0x44020c00
 8008ee8:	03d09000 	.word	0x03d09000
 8008eec:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008ef0:	4ba0      	ldr	r3, [pc, #640]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008efc:	d10b      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f04:	d107      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f06:	f107 0314 	add.w	r3, r7, #20
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe ffb0 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f14:	e047      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008f16:	4b97      	ldr	r3, [pc, #604]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f22:	d10b      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f2a:	d107      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2c:	f107 0308 	add.w	r3, r7, #8
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff f907 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3a:	e034      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008f3c:	4b8d      	ldr	r3, [pc, #564]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d10d      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f4e:	d109      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f50:	4b88      	ldr	r3, [pc, #544]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	08db      	lsrs	r3, r3, #3
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	4a87      	ldr	r2, [pc, #540]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f62:	e020      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008f64:	4b83      	ldr	r3, [pc, #524]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f70:	d106      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f78:	d102      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008f7a:	4b80      	ldr	r3, [pc, #512]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7e:	e012      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008f80:	4b7c      	ldr	r3, [pc, #496]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d107      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f90:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008f94:	d103      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f9c:	e003      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fa2:	f001 bd84 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fa6:	f001 bd82 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008faa:	4b72      	ldr	r3, [pc, #456]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008fb0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008fb4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d104      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fbc:	f7fc fe22 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8008fc0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008fc2:	f001 bd74 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fd2:	d10b      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fda:	d107      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fdc:	f107 0314 	add.w	r3, r7, #20
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe ff45 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fea:	e047      	b.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008fec:	4b61      	ldr	r3, [pc, #388]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ff8:	d10b      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009000:	d107      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009002:	f107 0308 	add.w	r3, r7, #8
 8009006:	4618      	mov	r0, r3
 8009008:	f7ff f89c 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009010:	e034      	b.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009012:	4b58      	ldr	r3, [pc, #352]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b02      	cmp	r3, #2
 800901c:	d10d      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800901e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009020:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009024:	d109      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009026:	4b53      	ldr	r3, [pc, #332]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	08db      	lsrs	r3, r3, #3
 800902c:	f003 0303 	and.w	r3, r3, #3
 8009030:	4a51      	ldr	r2, [pc, #324]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009032:	fa22 f303 	lsr.w	r3, r2, r3
 8009036:	637b      	str	r3, [r7, #52]	@ 0x34
 8009038:	e020      	b.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800903a:	4b4e      	ldr	r3, [pc, #312]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009046:	d106      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800904e:	d102      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8009050:	4b4a      	ldr	r3, [pc, #296]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
 8009054:	e012      	b.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009056:	4b47      	ldr	r3, [pc, #284]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b02      	cmp	r3, #2
 8009062:	d107      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800906a:	d103      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800906c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009070:	637b      	str	r3, [r7, #52]	@ 0x34
 8009072:	e003      	b.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009078:	f001 bd19 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800907c:	f001 bd17 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009080:	4b3c      	ldr	r3, [pc, #240]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009086:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800908a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800908c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009092:	f7fc fdb7 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8009096:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8009098:	f001 bd09 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800909c:	4b35      	ldr	r3, [pc, #212]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090a8:	d10b      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090b0:	d107      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090b2:	f107 0314 	add.w	r3, r7, #20
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe feda 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c0:	e047      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80090c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ce:	d10b      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090d6:	d107      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090d8:	f107 0308 	add.w	r3, r7, #8
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff f831 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e6:	e034      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80090e8:	4b22      	ldr	r3, [pc, #136]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d10d      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80090fa:	d109      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	08db      	lsrs	r3, r3, #3
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	4a1c      	ldr	r2, [pc, #112]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009108:	fa22 f303 	lsr.w	r3, r2, r3
 800910c:	637b      	str	r3, [r7, #52]	@ 0x34
 800910e:	e020      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8009110:	4b18      	ldr	r3, [pc, #96]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800911c:	d106      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009124:	d102      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8009126:	4b15      	ldr	r3, [pc, #84]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
 800912a:	e012      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800912c:	4b11      	ldr	r3, [pc, #68]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800912e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b02      	cmp	r3, #2
 8009138:	d107      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009140:	d103      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8009142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009146:	637b      	str	r3, [r7, #52]	@ 0x34
 8009148:	e003      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800914e:	f001 bcae 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009152:	f001 bcac 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8009156:	4b07      	ldr	r3, [pc, #28]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800915c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8009160:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8009162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10b      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009168:	f7fc fd4c 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 800916c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800916e:	f001 bc9e 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009172:	bf00      	nop
 8009174:	44020c00 	.word	0x44020c00
 8009178:	03d09000 	.word	0x03d09000
 800917c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8009180:	4ba0      	ldr	r3, [pc, #640]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009188:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800918c:	d10b      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009190:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009194:	d107      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009196:	f107 0314 	add.w	r3, r7, #20
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fe68 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a4:	e047      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80091a6:	4b97      	ldr	r3, [pc, #604]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091b2:	d10b      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80091b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80091ba:	d107      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091bc:	f107 0308 	add.w	r3, r7, #8
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe ffbf 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ca:	e034      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80091cc:	4b8d      	ldr	r3, [pc, #564]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d10d      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80091de:	d109      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091e0:	4b88      	ldr	r3, [pc, #544]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	08db      	lsrs	r3, r3, #3
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	4a87      	ldr	r2, [pc, #540]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
 80091f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f2:	e020      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80091f4:	4b83      	ldr	r3, [pc, #524]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009200:	d106      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8009202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009208:	d102      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800920a:	4b80      	ldr	r3, [pc, #512]	@ (800940c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800920c:	637b      	str	r3, [r7, #52]	@ 0x34
 800920e:	e012      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8009210:	4b7c      	ldr	r3, [pc, #496]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b02      	cmp	r3, #2
 800921c:	d107      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800921e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009220:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009224:	d103      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8009226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800922a:	637b      	str	r3, [r7, #52]	@ 0x34
 800922c:	e003      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009232:	f001 bc3c 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009236:	f001 bc3a 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800923a:	4b72      	ldr	r3, [pc, #456]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800923c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009240:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009244:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800924c:	f7fc fcda 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8009250:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8009252:	f001 bc2c 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8009256:	4b6b      	ldr	r3, [pc, #428]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800925e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009262:	d10b      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800926a:	d107      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800926c:	f107 0314 	add.w	r3, r7, #20
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe fdfd 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	637b      	str	r3, [r7, #52]	@ 0x34
 800927a:	e047      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800927c:	4b61      	ldr	r3, [pc, #388]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009288:	d10b      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009290:	d107      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009292:	f107 0308 	add.w	r3, r7, #8
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe ff54 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a0:	e034      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80092a2:	4b58      	ldr	r3, [pc, #352]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d10d      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092b4:	d109      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092b6:	4b53      	ldr	r3, [pc, #332]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	08db      	lsrs	r3, r3, #3
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	4a51      	ldr	r2, [pc, #324]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80092c2:	fa22 f303 	lsr.w	r3, r2, r3
 80092c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c8:	e020      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80092ca:	4b4e      	ldr	r3, [pc, #312]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092d6:	d106      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092de:	d102      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80092e0:	4b4a      	ldr	r3, [pc, #296]	@ (800940c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80092e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092e4:	e012      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80092e6:	4b47      	ldr	r3, [pc, #284]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80092e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d107      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80092fa:	d103      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80092fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009300:	637b      	str	r3, [r7, #52]	@ 0x34
 8009302:	e003      	b.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009308:	f001 bbd1 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800930c:	f001 bbcf 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8009310:	4b3c      	ldr	r3, [pc, #240]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009312:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009316:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800931a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	2b00      	cmp	r3, #0
 8009320:	d104      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009322:	f7fc fc6f 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8009326:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8009328:	f001 bbc1 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800932c:	4b35      	ldr	r3, [pc, #212]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009334:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009338:	d10b      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009340:	d107      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009342:	f107 0314 	add.w	r3, r7, #20
 8009346:	4618      	mov	r0, r3
 8009348:	f7fe fd92 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009350:	e047      	b.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8009352:	4b2c      	ldr	r3, [pc, #176]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800935a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800935e:	d10b      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009366:	d107      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009368:	f107 0308 	add.w	r3, r7, #8
 800936c:	4618      	mov	r0, r3
 800936e:	f7fe fee9 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
 8009376:	e034      	b.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8009378:	4b22      	ldr	r3, [pc, #136]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b02      	cmp	r3, #2
 8009382:	d10d      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800938a:	d109      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800938c:	4b1d      	ldr	r3, [pc, #116]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	08db      	lsrs	r3, r3, #3
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	4a1c      	ldr	r2, [pc, #112]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	637b      	str	r3, [r7, #52]	@ 0x34
 800939e:	e020      	b.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80093a0:	4b18      	ldr	r3, [pc, #96]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093ac:	d106      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093b4:	d102      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80093b6:	4b15      	ldr	r3, [pc, #84]	@ (800940c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80093b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ba:	e012      	b.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80093bc:	4b11      	ldr	r3, [pc, #68]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80093be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d107      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80093d0:	d103      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80093d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d8:	e003      	b.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093de:	f001 bb66 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093e2:	f001 bb64 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80093e6:	4b07      	ldr	r3, [pc, #28]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80093e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80093ec:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80093f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10b      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80093f8:	f7fc fc04 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 80093fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80093fe:	f001 bb56 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009402:	bf00      	nop
 8009404:	44020c00 	.word	0x44020c00
 8009408:	03d09000 	.word	0x03d09000
 800940c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8009410:	4ba1      	ldr	r3, [pc, #644]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800941c:	d10b      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009424:	d107      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009426:	f107 0314 	add.w	r3, r7, #20
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fd20 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	637b      	str	r3, [r7, #52]	@ 0x34
 8009434:	e047      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8009436:	4b98      	ldr	r3, [pc, #608]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800943e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009442:	d10b      	bne.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800944a:	d107      	bne.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800944c:	f107 0308 	add.w	r3, r7, #8
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe fe77 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
 800945a:	e034      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800945c:	4b8e      	ldr	r3, [pc, #568]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b02      	cmp	r3, #2
 8009466:	d10d      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800946e:	d109      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009470:	4b89      	ldr	r3, [pc, #548]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	08db      	lsrs	r3, r3, #3
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	4a88      	ldr	r2, [pc, #544]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
 8009480:	637b      	str	r3, [r7, #52]	@ 0x34
 8009482:	e020      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8009484:	4b84      	ldr	r3, [pc, #528]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800948c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009490:	d106      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009498:	d102      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800949a:	4b81      	ldr	r3, [pc, #516]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
 800949e:	e012      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80094a0:	4b7d      	ldr	r3, [pc, #500]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80094a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d107      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80094b4:	d103      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80094b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80094bc:	e003      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094c2:	f001 baf4 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094c6:	f001 baf2 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80094ca:	4b73      	ldr	r3, [pc, #460]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80094cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80094d0:	f003 0307 	and.w	r3, r3, #7
 80094d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d104      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80094dc:	f7fc fb92 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 80094e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80094e2:	f001 bae4 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80094e6:	4b6c      	ldr	r3, [pc, #432]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094f2:	d10a      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80094f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d107      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094fa:	f107 0314 	add.w	r3, r7, #20
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe fcb6 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
 8009508:	e043      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800950a:	4b63      	ldr	r3, [pc, #396]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009516:	d10a      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8009518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951a:	2b02      	cmp	r3, #2
 800951c:	d107      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800951e:	f107 0308 	add.w	r3, r7, #8
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe fe0e 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	637b      	str	r3, [r7, #52]	@ 0x34
 800952c:	e031      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800952e:	4b5a      	ldr	r3, [pc, #360]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0302 	and.w	r3, r3, #2
 8009536:	2b02      	cmp	r3, #2
 8009538:	d10c      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	2b03      	cmp	r3, #3
 800953e:	d109      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009540:	4b55      	ldr	r3, [pc, #340]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	08db      	lsrs	r3, r3, #3
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	4a54      	ldr	r2, [pc, #336]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800954c:	fa22 f303 	lsr.w	r3, r2, r3
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
 8009552:	e01e      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8009554:	4b50      	ldr	r3, [pc, #320]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800955c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009560:	d105      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	2b04      	cmp	r3, #4
 8009566:	d102      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8009568:	4b4d      	ldr	r3, [pc, #308]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
 800956c:	e011      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800956e:	4b4a      	ldr	r3, [pc, #296]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009574:	f003 0302 	and.w	r3, r3, #2
 8009578:	2b02      	cmp	r3, #2
 800957a:	d106      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	2b05      	cmp	r3, #5
 8009580:	d103      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8009582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009586:	637b      	str	r3, [r7, #52]	@ 0x34
 8009588:	e003      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800958e:	f001 ba8e 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009592:	f001 ba8c 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8009596:	4b40      	ldr	r3, [pc, #256]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009598:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800959c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80095a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80095a8:	f7fc fb2c 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 80095ac:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80095ae:	f001 ba7e 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80095b2:	4b39      	ldr	r3, [pc, #228]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095be:	d10a      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80095c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c2:	2b10      	cmp	r3, #16
 80095c4:	d107      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c6:	f107 0314 	add.w	r3, r7, #20
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fc50 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d4:	e043      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80095d6:	4b30      	ldr	r3, [pc, #192]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095e2:	d10a      	bne.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80095e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e6:	2b20      	cmp	r3, #32
 80095e8:	d107      	bne.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ea:	f107 0308 	add.w	r3, r7, #8
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fe fda8 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f8:	e031      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80095fa:	4b27      	ldr	r3, [pc, #156]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	2b02      	cmp	r3, #2
 8009604:	d10c      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	2b30      	cmp	r3, #48	@ 0x30
 800960a:	d109      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800960c:	4b22      	ldr	r3, [pc, #136]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	08db      	lsrs	r3, r3, #3
 8009612:	f003 0303 	and.w	r3, r3, #3
 8009616:	4a21      	ldr	r2, [pc, #132]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009618:	fa22 f303 	lsr.w	r3, r2, r3
 800961c:	637b      	str	r3, [r7, #52]	@ 0x34
 800961e:	e01e      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8009620:	4b1d      	ldr	r3, [pc, #116]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800962c:	d105      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	2b40      	cmp	r3, #64	@ 0x40
 8009632:	d102      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8009634:	4b1a      	ldr	r3, [pc, #104]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009636:	637b      	str	r3, [r7, #52]	@ 0x34
 8009638:	e011      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800963a:	4b17      	ldr	r3, [pc, #92]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800963c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009640:	f003 0302 	and.w	r3, r3, #2
 8009644:	2b02      	cmp	r3, #2
 8009646:	d106      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8009648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964a:	2b50      	cmp	r3, #80	@ 0x50
 800964c:	d103      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800964e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009652:	637b      	str	r3, [r7, #52]	@ 0x34
 8009654:	e003      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800965a:	f001 ba28 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800965e:	f001 ba26 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009662:	4b0d      	ldr	r3, [pc, #52]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009668:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800966c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	2b00      	cmp	r3, #0
 8009672:	d104      	bne.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009674:	f7fc faf2 	bl	8005c5c <HAL_RCC_GetPCLK3Freq>
 8009678:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800967a:	f001 ba18 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800967e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009684:	d10e      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009686:	f107 0314 	add.w	r3, r7, #20
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fbf0 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009694:	f001 ba0b 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009698:	44020c00 	.word	0x44020c00
 800969c:	03d09000 	.word	0x03d09000
 80096a0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096aa:	d108      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ac:	f107 0308 	add.w	r3, r7, #8
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fe fd47 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096ba:	f001 b9f8 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80096be:	4ba4      	ldr	r3, [pc, #656]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d10d      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80096ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80096d0:	d109      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096d2:	4b9f      	ldr	r3, [pc, #636]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	08db      	lsrs	r3, r3, #3
 80096d8:	f003 0303 	and.w	r3, r3, #3
 80096dc:	4a9d      	ldr	r2, [pc, #628]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80096de:	fa22 f303 	lsr.w	r3, r2, r3
 80096e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e4:	e020      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80096e6:	4b9a      	ldr	r3, [pc, #616]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096f2:	d106      	bne.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096fa:	d102      	bne.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80096fc:	4b96      	ldr	r3, [pc, #600]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80096fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009700:	e012      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009702:	4b93      	ldr	r3, [pc, #588]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b02      	cmp	r3, #2
 800970e:	d107      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8009710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009712:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009716:	d103      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8009718:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800971c:	637b      	str	r3, [r7, #52]	@ 0x34
 800971e:	e003      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009724:	f001 b9c3 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009728:	f001 b9c1 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800972c:	4b88      	ldr	r3, [pc, #544]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800972e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973a:	2b00      	cmp	r3, #0
 800973c:	d104      	bne.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800973e:	f7fc fa45 	bl	8005bcc <HAL_RCC_GetHCLKFreq>
 8009742:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009744:	f001 b9b3 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974a:	2b01      	cmp	r3, #1
 800974c:	d104      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800974e:	f7fc f911 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8009752:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009754:	f001 b9ab 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	2b02      	cmp	r3, #2
 800975c:	d108      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800975e:	f107 0314 	add.w	r3, r7, #20
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe fb84 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800976c:	f001 b99f 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009770:	4b77      	ldr	r3, [pc, #476]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800977c:	d105      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	2b03      	cmp	r3, #3
 8009782:	d102      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8009784:	4b75      	ldr	r3, [pc, #468]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8009786:	637b      	str	r3, [r7, #52]	@ 0x34
 8009788:	e023      	b.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800978a:	4b71      	ldr	r3, [pc, #452]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b02      	cmp	r3, #2
 8009794:	d10c      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8009796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009798:	2b04      	cmp	r3, #4
 800979a:	d109      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800979c:	4b6c      	ldr	r3, [pc, #432]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	08db      	lsrs	r3, r3, #3
 80097a2:	f003 0303 	and.w	r3, r3, #3
 80097a6:	4a6b      	ldr	r2, [pc, #428]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80097a8:	fa22 f303 	lsr.w	r3, r2, r3
 80097ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ae:	e010      	b.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80097b0:	4b67      	ldr	r3, [pc, #412]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097bc:	d105      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	2b05      	cmp	r3, #5
 80097c2:	d102      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80097c4:	4b64      	ldr	r3, [pc, #400]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80097c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c8:	e003      	b.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097ce:	f001 b96e 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80097d2:	f001 b96c 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80097d6:	4b5e      	ldr	r3, [pc, #376]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80097d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097dc:	f003 0308 	and.w	r3, r3, #8
 80097e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80097e2:	4b5b      	ldr	r3, [pc, #364]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80097e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097e8:	f003 0302 	and.w	r3, r3, #2
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d106      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d103      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80097f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fc:	e012      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80097fe:	4b54      	ldr	r3, [pc, #336]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800980c:	d106      	bne.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800980e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009810:	2b08      	cmp	r3, #8
 8009812:	d103      	bne.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8009814:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
 800981a:	e003      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009820:	f001 b945 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009824:	f001 b943 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009828:	4b49      	ldr	r3, [pc, #292]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800982a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800982e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009832:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009836:	2b00      	cmp	r3, #0
 8009838:	d104      	bne.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800983a:	f7fc f9e3 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 800983e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009840:	f001 b935 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800984a:	d108      	bne.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800984c:	f107 0308 	add.w	r3, r7, #8
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe fc77 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800985a:	f001 b928 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800985e:	4b3c      	ldr	r3, [pc, #240]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b02      	cmp	r3, #2
 8009868:	d10d      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009870:	d109      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009872:	4b37      	ldr	r3, [pc, #220]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	08db      	lsrs	r3, r3, #3
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	4a35      	ldr	r2, [pc, #212]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800987e:	fa22 f303 	lsr.w	r3, r2, r3
 8009882:	637b      	str	r3, [r7, #52]	@ 0x34
 8009884:	e011      	b.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8009886:	4b32      	ldr	r3, [pc, #200]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800988e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009892:	d106      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8009894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009896:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800989a:	d102      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800989c:	4b2e      	ldr	r3, [pc, #184]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800989e:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a0:	e003      	b.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098a6:	f001 b902 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80098aa:	f001 b900 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80098ae:	4b28      	ldr	r3, [pc, #160]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80098b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098b4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80098b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d104      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80098c0:	f7fc f9a0 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 80098c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80098c6:	f001 b8f2 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098d0:	d108      	bne.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098d2:	f107 0308 	add.w	r3, r7, #8
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fc34 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098e0:	f001 b8e5 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80098e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d10d      	bne.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80098f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80098f6:	d109      	bne.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098f8:	4b15      	ldr	r3, [pc, #84]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	08db      	lsrs	r3, r3, #3
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	4a14      	ldr	r2, [pc, #80]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009904:	fa22 f303 	lsr.w	r3, r2, r3
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
 800990a:	e011      	b.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800990c:	4b10      	ldr	r3, [pc, #64]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009918:	d106      	bne.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800991a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009920:	d102      	bne.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8009922:	4b0d      	ldr	r3, [pc, #52]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009924:	637b      	str	r3, [r7, #52]	@ 0x34
 8009926:	e003      	b.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800992c:	f001 b8bf 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009930:	f001 b8bd 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009934:	4b06      	ldr	r3, [pc, #24]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800993a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800993e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10c      	bne.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009946:	f7fc f989 	bl	8005c5c <HAL_RCC_GetPCLK3Freq>
 800994a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800994c:	f001 b8af 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009950:	44020c00 	.word	0x44020c00
 8009954:	03d09000 	.word	0x03d09000
 8009958:	003d0900 	.word	0x003d0900
 800995c:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009966:	d108      	bne.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009968:	f107 0308 	add.w	r3, r7, #8
 800996c:	4618      	mov	r0, r3
 800996e:	f7fe fbe9 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009976:	f001 b89a 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800997a:	4b9f      	ldr	r3, [pc, #636]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b02      	cmp	r3, #2
 8009984:	d10d      	bne.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800998c:	d109      	bne.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800998e:	4b9a      	ldr	r3, [pc, #616]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	08db      	lsrs	r3, r3, #3
 8009994:	f003 0303 	and.w	r3, r3, #3
 8009998:	4a98      	ldr	r2, [pc, #608]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800999a:	fa22 f303 	lsr.w	r3, r2, r3
 800999e:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a0:	e011      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80099a2:	4b95      	ldr	r3, [pc, #596]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099ae:	d106      	bne.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80099b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099b6:	d102      	bne.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80099b8:	4b91      	ldr	r3, [pc, #580]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80099bc:	e003      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099c2:	f001 b874 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80099c6:	f001 b872 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80099ca:	4b8b      	ldr	r3, [pc, #556]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80099cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099d0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80099d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80099dc:	f7fc f93e 	bl	8005c5c <HAL_RCC_GetPCLK3Freq>
 80099e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80099e2:	f001 b864 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80099e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099ec:	d108      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ee:	f107 0308 	add.w	r3, r7, #8
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe fba6 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099fc:	f001 b857 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009a00:	4b7d      	ldr	r3, [pc, #500]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d10d      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a12:	d109      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a14:	4b78      	ldr	r3, [pc, #480]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	08db      	lsrs	r3, r3, #3
 8009a1a:	f003 0303 	and.w	r3, r3, #3
 8009a1e:	4a77      	ldr	r2, [pc, #476]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009a20:	fa22 f303 	lsr.w	r3, r2, r3
 8009a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a26:	e011      	b.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8009a28:	4b73      	ldr	r3, [pc, #460]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a34:	d106      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8009a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009a3c:	d102      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8009a3e:	4b70      	ldr	r3, [pc, #448]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a42:	e003      	b.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a48:	f001 b831 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a4c:	f001 b82f 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009a50:	4b69      	ldr	r3, [pc, #420]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009a52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a56:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009a5a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d104      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009a62:	f7fc f8cf 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8009a66:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009a68:	f001 b821 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a72:	d108      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a74:	f107 0308 	add.w	r3, r7, #8
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe fb63 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a82:	f001 b814 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009a86:	4b5c      	ldr	r3, [pc, #368]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d10e      	bne.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a98:	d10a      	bne.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a9a:	4b57      	ldr	r3, [pc, #348]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	08db      	lsrs	r3, r3, #3
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	4a55      	ldr	r2, [pc, #340]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aac:	f000 bfff 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ab4:	f000 bffb 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009aba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009abe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009aca:	d056      	beq.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009ad2:	f200 808b 	bhi.w	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009adc:	d03e      	beq.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ae4:	f200 8082 	bhi.w	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009aee:	d027      	beq.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009af6:	d879      	bhi.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009afe:	d017      	beq.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b06:	d871      	bhi.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d004      	beq.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b14:	d004      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8009b16:	e069      	b.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009b18:	f7fc f8a0 	bl	8005c5c <HAL_RCC_GetPCLK3Freq>
 8009b1c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009b1e:	e068      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b20:	f107 0314 	add.w	r3, r7, #20
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe f9a3 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b2e:	e060      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b30:	f107 0308 	add.w	r3, r7, #8
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fe fb05 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b3e:	e058      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009b40:	4b2d      	ldr	r3, [pc, #180]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b46:	f003 0302 	and.w	r3, r3, #2
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d103      	bne.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8009b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b52:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b54:	e04d      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b5a:	e04a      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009b5c:	4b26      	ldr	r3, [pc, #152]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b6a:	d103      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8009b6c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b70:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b72:	e03e      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b78:	e03b      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b80:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b84:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b86:	4b1c      	ldr	r3, [pc, #112]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d10c      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8009b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d109      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b98:	4b17      	ldr	r3, [pc, #92]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	08db      	lsrs	r3, r3, #3
 8009b9e:	f003 0303 	and.w	r3, r3, #3
 8009ba2:	4a16      	ldr	r2, [pc, #88]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009baa:	e01e      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bac:	4b12      	ldr	r3, [pc, #72]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bb8:	d106      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8009bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bc0:	d102      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc6:	e010      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bd4:	d106      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8009bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bdc:	d102      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009bde:	4b09      	ldr	r3, [pc, #36]	@ (8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be2:	e002      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009be8:	e003      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8009bea:	e002      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bf0:	bf00      	nop
          }
        }
        break;
 8009bf2:	f000 bf5c 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bf6:	bf00      	nop
 8009bf8:	44020c00 	.word	0x44020c00
 8009bfc:	03d09000 	.word	0x03d09000
 8009c00:	003d0900 	.word	0x003d0900
 8009c04:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009c08:	4b9e      	ldr	r3, [pc, #632]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009c0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009c0e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c16:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009c1a:	d056      	beq.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009c22:	f200 808b 	bhi.w	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c2c:	d03e      	beq.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c34:	f200 8082 	bhi.w	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c3e:	d027      	beq.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c46:	d879      	bhi.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c4e:	d017      	beq.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8009c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c56:	d871      	bhi.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d004      	beq.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c64:	d004      	beq.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8009c66:	e069      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009c68:	f7fb ffcc 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8009c6c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009c6e:	e068      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c70:	f107 0314 	add.w	r3, r7, #20
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe f8fb 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c7e:	e060      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c80:	f107 0308 	add.w	r3, r7, #8
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe fa5d 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c8e:	e058      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009c90:	4b7c      	ldr	r3, [pc, #496]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d103      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8009c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ca2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009ca4:	e04d      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009caa:	e04a      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009cac:	4b75      	ldr	r3, [pc, #468]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cba:	d103      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009cbc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009cc0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009cc2:	e03e      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cc8:	e03b      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cca:	4b6e      	ldr	r3, [pc, #440]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cd0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d10c      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8009ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d109      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ce8:	4b66      	ldr	r3, [pc, #408]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	08db      	lsrs	r3, r3, #3
 8009cee:	f003 0303 	and.w	r3, r3, #3
 8009cf2:	4a65      	ldr	r2, [pc, #404]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfa:	e01e      	b.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cfc:	4b61      	ldr	r3, [pc, #388]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d08:	d106      	bne.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8009d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d10:	d102      	bne.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009d12:	4b5e      	ldr	r3, [pc, #376]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d16:	e010      	b.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d18:	4b5a      	ldr	r3, [pc, #360]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d24:	d106      	bne.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8009d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d2c:	d102      	bne.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d2e:	4b58      	ldr	r3, [pc, #352]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d32:	e002      	b.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d34:	2300      	movs	r3, #0
 8009d36:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009d38:	e003      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8009d3a:	e002      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d40:	bf00      	nop
          }
        }
        break;
 8009d42:	f000 beb4 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009d46:	4b4f      	ldr	r3, [pc, #316]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009d48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009d4c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d58:	d056      	beq.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d60:	f200 808b 	bhi.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d6a:	d03e      	beq.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d72:	f200 8082 	bhi.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d7c:	d027      	beq.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d84:	d879      	bhi.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d8c:	d017      	beq.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d94:	d871      	bhi.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d004      	beq.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009da2:	d004      	beq.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009da4:	e069      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009da6:	f7fb ff59 	bl	8005c5c <HAL_RCC_GetPCLK3Freq>
 8009daa:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009dac:	e068      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dae:	f107 0314 	add.w	r3, r7, #20
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe f85c 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dbc:	e060      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe f9be 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dcc:	e058      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009dce:	4b2d      	ldr	r3, [pc, #180]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dd4:	f003 0302 	and.w	r3, r3, #2
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d103      	bne.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8009ddc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009de0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009de2:	e04d      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009de8:	e04a      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009dea:	4b26      	ldr	r3, [pc, #152]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009df4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009df8:	d103      	bne.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8009dfa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009dfe:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009e00:	e03e      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e06:	e03b      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e08:	4b1e      	ldr	r3, [pc, #120]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e14:	4b1b      	ldr	r3, [pc, #108]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0302 	and.w	r3, r3, #2
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d10c      	bne.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d109      	bne.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e26:	4b17      	ldr	r3, [pc, #92]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	08db      	lsrs	r3, r3, #3
 8009e2c:	f003 0303 	and.w	r3, r3, #3
 8009e30:	4a15      	ldr	r2, [pc, #84]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009e32:	fa22 f303 	lsr.w	r3, r2, r3
 8009e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e38:	e01e      	b.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e3a:	4b12      	ldr	r3, [pc, #72]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e46:	d106      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e4e:	d102      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e50:	4b0e      	ldr	r3, [pc, #56]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e54:	e010      	b.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e56:	4b0b      	ldr	r3, [pc, #44]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e62:	d106      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e6a:	d102      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e6c:	4b08      	ldr	r3, [pc, #32]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e70:	e002      	b.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009e76:	e003      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009e78:	e002      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e7e:	bf00      	nop
          }
        }
        break;
 8009e80:	f000 be15 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e84:	44020c00 	.word	0x44020c00
 8009e88:	03d09000 	.word	0x03d09000
 8009e8c:	003d0900 	.word	0x003d0900
 8009e90:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009e94:	4b9e      	ldr	r3, [pc, #632]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009e96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009e9a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8009e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009ea6:	d056      	beq.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009eae:	f200 808b 	bhi.w	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009eb8:	d03e      	beq.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ec0:	f200 8082 	bhi.w	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009eca:	d027      	beq.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ece:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ed2:	d879      	bhi.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009eda:	d017      	beq.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ee2:	d871      	bhi.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ef0:	d004      	beq.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009ef2:	e069      	b.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009ef4:	f7fb feb2 	bl	8005c5c <HAL_RCC_GetPCLK3Freq>
 8009ef8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009efa:	e068      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efc:	f107 0314 	add.w	r3, r7, #20
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fd ffb5 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f0a:	e060      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f0c:	f107 0308 	add.w	r3, r7, #8
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe f917 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f1a:	e058      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f1c:	4b7c      	ldr	r3, [pc, #496]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f22:	f003 0302 	and.w	r3, r3, #2
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d103      	bne.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009f30:	e04d      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f36:	e04a      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009f38:	4b75      	ldr	r3, [pc, #468]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f46:	d103      	bne.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009f48:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009f4e:	e03e      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f54:	e03b      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f56:	4b6e      	ldr	r3, [pc, #440]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f5c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009f60:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f62:	4b6b      	ldr	r3, [pc, #428]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0302 	and.w	r3, r3, #2
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d10c      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d109      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f74:	4b66      	ldr	r3, [pc, #408]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	08db      	lsrs	r3, r3, #3
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	4a65      	ldr	r2, [pc, #404]	@ (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009f80:	fa22 f303 	lsr.w	r3, r2, r3
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f86:	e01e      	b.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f88:	4b61      	ldr	r3, [pc, #388]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f94:	d106      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f9c:	d102      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009f9e:	4b5e      	ldr	r3, [pc, #376]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa2:	e010      	b.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fa4:	4b5a      	ldr	r3, [pc, #360]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fb0:	d106      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fb8:	d102      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009fba:	4b58      	ldr	r3, [pc, #352]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fbe:	e002      	b.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009fc4:	e003      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009fc6:	e002      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009fcc:	bf00      	nop
          }
        }
        break;
 8009fce:	f000 bd6e 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009fd2:	4b4f      	ldr	r3, [pc, #316]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009fd4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009fd8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009fe4:	d056      	beq.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009fec:	f200 808b 	bhi.w	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ff6:	d03e      	beq.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ffe:	f200 8082 	bhi.w	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a004:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a008:	d027      	beq.n	800a05a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a010:	d879      	bhi.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a018:	d017      	beq.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800a01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a020:	d871      	bhi.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	2b00      	cmp	r3, #0
 800a026:	d004      	beq.n	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800a028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a02e:	d004      	beq.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800a030:	e069      	b.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a032:	f7fb fe13 	bl	8005c5c <HAL_RCC_GetPCLK3Freq>
 800a036:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a038:	e068      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a03a:	f107 0314 	add.w	r3, r7, #20
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fd ff16 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a048:	e060      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a04a:	f107 0308 	add.w	r3, r7, #8
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe f878 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a058:	e058      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a05a:	4b2d      	ldr	r3, [pc, #180]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a05c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	2b02      	cmp	r3, #2
 800a066:	d103      	bne.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800a068:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a06c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a06e:	e04d      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a070:	2300      	movs	r3, #0
 800a072:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a074:	e04a      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a076:	4b26      	ldr	r3, [pc, #152]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a07c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a084:	d103      	bne.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800a086:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a08a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a08c:	e03e      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a092:	e03b      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a094:	4b1e      	ldr	r3, [pc, #120]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a09a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a09e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0a0:	4b1b      	ldr	r3, [pc, #108]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0302 	and.w	r3, r3, #2
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d10c      	bne.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800a0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0b2:	4b17      	ldr	r3, [pc, #92]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	08db      	lsrs	r3, r3, #3
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	4a15      	ldr	r2, [pc, #84]	@ (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a0be:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0c4:	e01e      	b.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0c6:	4b12      	ldr	r3, [pc, #72]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d2:	d106      	bne.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800a0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0da:	d102      	bne.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a0dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a0de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0e0:	e010      	b.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0ee:	d106      	bne.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800a0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0f6:	d102      	bne.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a0f8:	4b08      	ldr	r3, [pc, #32]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a0fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0fc:	e002      	b.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a102:	e003      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800a104:	e002      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800a106:	2300      	movs	r3, #0
 800a108:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a10a:	bf00      	nop
          }
        }
        break;
 800a10c:	f000 bccf 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a110:	44020c00 	.word	0x44020c00
 800a114:	03d09000 	.word	0x03d09000
 800a118:	003d0900 	.word	0x003d0900
 800a11c:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800a120:	4b9e      	ldr	r3, [pc, #632]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a122:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a126:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a12a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a132:	d056      	beq.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800a134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a13a:	f200 808b 	bhi.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a144:	d03e      	beq.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800a146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a14c:	f200 8082 	bhi.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a152:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a156:	d027      	beq.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800a158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a15e:	d879      	bhi.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a166:	d017      	beq.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a16e:	d871      	bhi.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a172:	2b00      	cmp	r3, #0
 800a174:	d004      	beq.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a17c:	d004      	beq.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800a17e:	e069      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a180:	f7fb fd6c 	bl	8005c5c <HAL_RCC_GetPCLK3Freq>
 800a184:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a186:	e068      	b.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a188:	f107 0314 	add.w	r3, r7, #20
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fd fe6f 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a196:	e060      	b.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a198:	f107 0308 	add.w	r3, r7, #8
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fd ffd1 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1a6:	e058      	b.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a1a8:	4b7c      	ldr	r3, [pc, #496]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a1aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d103      	bne.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800a1b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a1bc:	e04d      	b.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1c2:	e04a      	b.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a1c4:	4b75      	ldr	r3, [pc, #468]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a1c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1d2:	d103      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800a1d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a1d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a1da:	e03e      	b.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1e0:	e03b      	b.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1e2:	4b6e      	ldr	r3, [pc, #440]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a1e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1ee:	4b6b      	ldr	r3, [pc, #428]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d10c      	bne.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800a1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d109      	bne.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a200:	4b66      	ldr	r3, [pc, #408]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	08db      	lsrs	r3, r3, #3
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	4a65      	ldr	r2, [pc, #404]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800a20c:	fa22 f303 	lsr.w	r3, r2, r3
 800a210:	637b      	str	r3, [r7, #52]	@ 0x34
 800a212:	e01e      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a214:	4b61      	ldr	r3, [pc, #388]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a21c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a220:	d106      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800a222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a228:	d102      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a22a:	4b5e      	ldr	r3, [pc, #376]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800a22c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a22e:	e010      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a230:	4b5a      	ldr	r3, [pc, #360]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a23c:	d106      	bne.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800a23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a244:	d102      	bne.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a246:	4b58      	ldr	r3, [pc, #352]	@ (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a248:	637b      	str	r3, [r7, #52]	@ 0x34
 800a24a:	e002      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a250:	e003      	b.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800a252:	e002      	b.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a258:	bf00      	nop
          }
        }
        break;
 800a25a:	f000 bc28 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a25e:	4b4f      	ldr	r3, [pc, #316]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a268:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800a26a:	4b4c      	ldr	r3, [pc, #304]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a276:	d106      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800a27e:	4b4a      	ldr	r3, [pc, #296]	@ (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a280:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800a282:	f000 bc14 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a28c:	d108      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a28e:	f107 0320 	add.w	r3, r7, #32
 800a292:	4618      	mov	r0, r3
 800a294:	f7fd fc82 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a29c:	f000 bc07 	b.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2a6:	d107      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a8:	f107 0314 	add.w	r3, r7, #20
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fd fddf 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2b6:	e3fa      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2bc:	e3f7      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800a2be:	4b37      	ldr	r3, [pc, #220]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a2c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2c4:	f003 0307 	and.w	r3, r3, #7
 800a2c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d861      	bhi.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800a2d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800a2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d6:	bf00      	nop
 800a2d8:	0800a2ed 	.word	0x0800a2ed
 800a2dc:	0800a2fd 	.word	0x0800a2fd
 800a2e0:	0800a30d 	.word	0x0800a30d
 800a2e4:	0800a31d 	.word	0x0800a31d
 800a2e8:	0800a323 	.word	0x0800a323
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2ec:	f107 0320 	add.w	r3, r7, #32
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fd fc53 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2fa:	e04e      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fc:	f107 0314 	add.w	r3, r7, #20
 800a300:	4618      	mov	r0, r3
 800a302:	f7fd fdb5 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a30a:	e046      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a30c:	f107 0308 	add.w	r3, r7, #8
 800a310:	4618      	mov	r0, r3
 800a312:	f7fd ff17 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a31a:	e03e      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a31c:	4b23      	ldr	r3, [pc, #140]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800a31e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a320:	e03b      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a322:	4b1e      	ldr	r3, [pc, #120]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a328:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a32c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a32e:	4b1b      	ldr	r3, [pc, #108]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b02      	cmp	r3, #2
 800a338:	d10c      	bne.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800a33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d109      	bne.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a340:	4b16      	ldr	r3, [pc, #88]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	08db      	lsrs	r3, r3, #3
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	4a15      	ldr	r2, [pc, #84]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800a34c:	fa22 f303 	lsr.w	r3, r2, r3
 800a350:	637b      	str	r3, [r7, #52]	@ 0x34
 800a352:	e01e      	b.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a354:	4b11      	ldr	r3, [pc, #68]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a35c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a360:	d106      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800a362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a368:	d102      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a36a:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a36e:	e010      	b.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a370:	4b0a      	ldr	r3, [pc, #40]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a378:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a37c:	d106      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800a37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a384:	d102      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a386:	4b08      	ldr	r3, [pc, #32]	@ (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a388:	637b      	str	r3, [r7, #52]	@ 0x34
 800a38a:	e002      	b.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a390:	e003      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800a392:	e002      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a398:	bf00      	nop
          }
        }
        break;
 800a39a:	e388      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a39c:	44020c00 	.word	0x44020c00
 800a3a0:	03d09000 	.word	0x03d09000
 800a3a4:	003d0900 	.word	0x003d0900
 800a3a8:	017d7840 	.word	0x017d7840
 800a3ac:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a3b0:	4ba9      	ldr	r3, [pc, #676]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a3b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a3b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a3ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3be:	2b20      	cmp	r3, #32
 800a3c0:	f200 809a 	bhi.w	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800a3c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800a3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ca:	bf00      	nop
 800a3cc:	0800a451 	.word	0x0800a451
 800a3d0:	0800a4f9 	.word	0x0800a4f9
 800a3d4:	0800a4f9 	.word	0x0800a4f9
 800a3d8:	0800a4f9 	.word	0x0800a4f9
 800a3dc:	0800a4f9 	.word	0x0800a4f9
 800a3e0:	0800a4f9 	.word	0x0800a4f9
 800a3e4:	0800a4f9 	.word	0x0800a4f9
 800a3e8:	0800a4f9 	.word	0x0800a4f9
 800a3ec:	0800a461 	.word	0x0800a461
 800a3f0:	0800a4f9 	.word	0x0800a4f9
 800a3f4:	0800a4f9 	.word	0x0800a4f9
 800a3f8:	0800a4f9 	.word	0x0800a4f9
 800a3fc:	0800a4f9 	.word	0x0800a4f9
 800a400:	0800a4f9 	.word	0x0800a4f9
 800a404:	0800a4f9 	.word	0x0800a4f9
 800a408:	0800a4f9 	.word	0x0800a4f9
 800a40c:	0800a471 	.word	0x0800a471
 800a410:	0800a4f9 	.word	0x0800a4f9
 800a414:	0800a4f9 	.word	0x0800a4f9
 800a418:	0800a4f9 	.word	0x0800a4f9
 800a41c:	0800a4f9 	.word	0x0800a4f9
 800a420:	0800a4f9 	.word	0x0800a4f9
 800a424:	0800a4f9 	.word	0x0800a4f9
 800a428:	0800a4f9 	.word	0x0800a4f9
 800a42c:	0800a481 	.word	0x0800a481
 800a430:	0800a4f9 	.word	0x0800a4f9
 800a434:	0800a4f9 	.word	0x0800a4f9
 800a438:	0800a4f9 	.word	0x0800a4f9
 800a43c:	0800a4f9 	.word	0x0800a4f9
 800a440:	0800a4f9 	.word	0x0800a4f9
 800a444:	0800a4f9 	.word	0x0800a4f9
 800a448:	0800a4f9 	.word	0x0800a4f9
 800a44c:	0800a487 	.word	0x0800a487
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a450:	f107 0320 	add.w	r3, r7, #32
 800a454:	4618      	mov	r0, r3
 800a456:	f7fd fba1 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a45e:	e04e      	b.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a460:	f107 0314 	add.w	r3, r7, #20
 800a464:	4618      	mov	r0, r3
 800a466:	f7fd fd03 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a46e:	e046      	b.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a470:	f107 0308 	add.w	r3, r7, #8
 800a474:	4618      	mov	r0, r3
 800a476:	f7fd fe65 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a47e:	e03e      	b.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a480:	4b76      	ldr	r3, [pc, #472]	@ (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a482:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a484:	e03b      	b.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a486:	4b74      	ldr	r3, [pc, #464]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a48c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a490:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a492:	4b71      	ldr	r3, [pc, #452]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d10c      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d109      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a4a4:	4b6c      	ldr	r3, [pc, #432]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	08db      	lsrs	r3, r3, #3
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	4a6c      	ldr	r2, [pc, #432]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4b6:	e01e      	b.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4b8:	4b67      	ldr	r3, [pc, #412]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4c4:	d106      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4cc:	d102      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a4ce:	4b65      	ldr	r3, [pc, #404]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a4d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4d2:	e010      	b.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4d4:	4b60      	ldr	r3, [pc, #384]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4e0:	d106      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4e8:	d102      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a4ea:	4b5f      	ldr	r3, [pc, #380]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ee:	e002      	b.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a4f4:	e003      	b.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800a4f6:	e002      	b.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4fc:	bf00      	nop
          }
        }
        break;
 800a4fe:	e2d6      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a500:	4b55      	ldr	r3, [pc, #340]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a506:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a50a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a512:	d031      	beq.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800a514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a51a:	d866      	bhi.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a520:	d027      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	2bc0      	cmp	r3, #192	@ 0xc0
 800a526:	d860      	bhi.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	2b80      	cmp	r3, #128	@ 0x80
 800a52c:	d019      	beq.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800a52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a530:	2b80      	cmp	r3, #128	@ 0x80
 800a532:	d85a      	bhi.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53c:	2b40      	cmp	r3, #64	@ 0x40
 800a53e:	d008      	beq.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800a540:	e053      	b.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a542:	f107 0320 	add.w	r3, r7, #32
 800a546:	4618      	mov	r0, r3
 800a548:	f7fd fb28 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a550:	e04e      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a552:	f107 0314 	add.w	r3, r7, #20
 800a556:	4618      	mov	r0, r3
 800a558:	f7fd fc8a 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a560:	e046      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a562:	f107 0308 	add.w	r3, r7, #8
 800a566:	4618      	mov	r0, r3
 800a568:	f7fd fdec 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a570:	e03e      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a572:	4b3a      	ldr	r3, [pc, #232]	@ (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a574:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a576:	e03b      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a578:	4b37      	ldr	r3, [pc, #220]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a57a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a57e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a582:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a584:	4b34      	ldr	r3, [pc, #208]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0302 	and.w	r3, r3, #2
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d10c      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800a590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a592:	2b00      	cmp	r3, #0
 800a594:	d109      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a596:	4b30      	ldr	r3, [pc, #192]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	08db      	lsrs	r3, r3, #3
 800a59c:	f003 0303 	and.w	r3, r3, #3
 800a5a0:	4a2f      	ldr	r2, [pc, #188]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5a8:	e01e      	b.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5aa:	4b2b      	ldr	r3, [pc, #172]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5b6:	d106      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800a5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5be:	d102      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a5c0:	4b28      	ldr	r3, [pc, #160]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c4:	e010      	b.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5c6:	4b24      	ldr	r3, [pc, #144]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5d2:	d106      	bne.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800a5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5da:	d102      	bne.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a5dc:	4b22      	ldr	r3, [pc, #136]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a5de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5e0:	e002      	b.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a5e6:	e003      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800a5e8:	e002      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a5ee:	bf00      	nop
          }
        }
        break;
 800a5f0:	e25d      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a5f2:	4b19      	ldr	r3, [pc, #100]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a5f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5f8:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a5fc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a600:	2b00      	cmp	r3, #0
 800a602:	d103      	bne.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a604:	f7fb fb14 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 800a608:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a60a:	e250      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a60c:	4b12      	ldr	r3, [pc, #72]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a618:	d10b      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800a61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a620:	d107      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a622:	f107 0314 	add.w	r3, r7, #20
 800a626:	4618      	mov	r0, r3
 800a628:	f7fd fc22 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a630:	e04f      	b.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a632:	4b09      	ldr	r3, [pc, #36]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a63a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a63e:	d115      	bne.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a646:	d111      	bne.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a648:	f107 0308 	add.w	r3, r7, #8
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fd fd79 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	637b      	str	r3, [r7, #52]	@ 0x34
 800a656:	e03c      	b.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800a658:	44020c00 	.word	0x44020c00
 800a65c:	00bb8000 	.word	0x00bb8000
 800a660:	03d09000 	.word	0x03d09000
 800a664:	003d0900 	.word	0x003d0900
 800a668:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800a66c:	4b94      	ldr	r3, [pc, #592]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0302 	and.w	r3, r3, #2
 800a674:	2b02      	cmp	r3, #2
 800a676:	d10d      	bne.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a67e:	d109      	bne.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a680:	4b8f      	ldr	r3, [pc, #572]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	08db      	lsrs	r3, r3, #3
 800a686:	f003 0303 	and.w	r3, r3, #3
 800a68a:	4a8e      	ldr	r2, [pc, #568]	@ (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a68c:	fa22 f303 	lsr.w	r3, r2, r3
 800a690:	637b      	str	r3, [r7, #52]	@ 0x34
 800a692:	e01e      	b.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800a694:	4b8a      	ldr	r3, [pc, #552]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a69c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6a0:	d106      	bne.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6a8:	d102      	bne.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800a6aa:	4b87      	ldr	r3, [pc, #540]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a6ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ae:	e010      	b.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800a6b0:	4b83      	ldr	r3, [pc, #524]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6bc:	d106      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a6c4:	d102      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800a6c6:	4b81      	ldr	r3, [pc, #516]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ca:	e002      	b.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6d0:	e1ed      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6d2:	e1ec      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800a6d4:	4b7a      	ldr	r3, [pc, #488]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a6d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6da:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a6de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d103      	bne.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a6e6:	f7fb fab9 	bl	8005c5c <HAL_RCC_GetPCLK3Freq>
 800a6ea:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a6ec:	e1df      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800a6ee:	4b74      	ldr	r3, [pc, #464]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6fa:	d10b      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a702:	d107      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a704:	f107 0314 	add.w	r3, r7, #20
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fd fbb1 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	637b      	str	r3, [r7, #52]	@ 0x34
 800a712:	e045      	b.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800a714:	4b6a      	ldr	r3, [pc, #424]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a720:	d10b      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a728:	d107      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a72a:	f107 0308 	add.w	r3, r7, #8
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fd fd08 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	637b      	str	r3, [r7, #52]	@ 0x34
 800a738:	e032      	b.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800a73a:	4b61      	ldr	r3, [pc, #388]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b02      	cmp	r3, #2
 800a744:	d10d      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a74c:	d109      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a74e:	4b5c      	ldr	r3, [pc, #368]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	08db      	lsrs	r3, r3, #3
 800a754:	f003 0303 	and.w	r3, r3, #3
 800a758:	4a5a      	ldr	r2, [pc, #360]	@ (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a75a:	fa22 f303 	lsr.w	r3, r2, r3
 800a75e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a760:	e01e      	b.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800a762:	4b57      	ldr	r3, [pc, #348]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a76a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a76e:	d106      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800a770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a776:	d102      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800a778:	4b53      	ldr	r3, [pc, #332]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a77a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a77c:	e010      	b.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a77e:	4b50      	ldr	r3, [pc, #320]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a78a:	d106      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a792:	d102      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800a794:	4b4d      	ldr	r3, [pc, #308]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a796:	637b      	str	r3, [r7, #52]	@ 0x34
 800a798:	e002      	b.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a79e:	e186      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a7a0:	e185      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a7a2:	4b47      	ldr	r3, [pc, #284]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a7a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7a8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a7ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a7b4:	f7fb fa3c 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 800a7b8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a7ba:	e178      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800a7bc:	4b40      	ldr	r3, [pc, #256]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7c8:	d10b      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7d0:	d107      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7d2:	f107 0314 	add.w	r3, r7, #20
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fd fb4a 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e0:	e045      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800a7e2:	4b37      	ldr	r3, [pc, #220]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ee:	d10b      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7f6:	d107      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7f8:	f107 0308 	add.w	r3, r7, #8
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fd fca1 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	637b      	str	r3, [r7, #52]	@ 0x34
 800a806:	e032      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a808:	4b2d      	ldr	r3, [pc, #180]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0302 	and.w	r3, r3, #2
 800a810:	2b02      	cmp	r3, #2
 800a812:	d10d      	bne.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a816:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a81a:	d109      	bne.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a81c:	4b28      	ldr	r3, [pc, #160]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	08db      	lsrs	r3, r3, #3
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	4a27      	ldr	r2, [pc, #156]	@ (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a828:	fa22 f303 	lsr.w	r3, r2, r3
 800a82c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a82e:	e01e      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a830:	4b23      	ldr	r3, [pc, #140]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a83c:	d106      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a844:	d102      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a846:	4b20      	ldr	r3, [pc, #128]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a848:	637b      	str	r3, [r7, #52]	@ 0x34
 800a84a:	e010      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a84c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a858:	d106      	bne.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a860:	d102      	bne.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a862:	4b1a      	ldr	r3, [pc, #104]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a864:	637b      	str	r3, [r7, #52]	@ 0x34
 800a866:	e002      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a868:	2300      	movs	r3, #0
 800a86a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a86c:	e11f      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a86e:	e11e      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a870:	4b13      	ldr	r3, [pc, #76]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d85f      	bhi.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a882:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a8a1 	.word	0x0800a8a1
 800a890:	0800a8b1 	.word	0x0800a8b1
 800a894:	0800a8d1 	.word	0x0800a8d1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a898:	f7fb f998 	bl	8005bcc <HAL_RCC_GetHCLKFreq>
 800a89c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a89e:	e053      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a0:	f107 0320 	add.w	r3, r7, #32
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fd f979 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8ae:	e04b      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b0:	f107 0314 	add.w	r3, r7, #20
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fd fadb 	bl	8007e70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8be:	e043      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a8c0:	44020c00 	.word	0x44020c00
 800a8c4:	03d09000 	.word	0x03d09000
 800a8c8:	003d0900 	.word	0x003d0900
 800a8cc:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8d0:	4b79      	ldr	r3, [pc, #484]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a8d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a8d6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a8da:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8dc:	4b76      	ldr	r3, [pc, #472]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d10c      	bne.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d109      	bne.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8ee:	4b72      	ldr	r3, [pc, #456]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	08db      	lsrs	r3, r3, #3
 800a8f4:	f003 0303 	and.w	r3, r3, #3
 800a8f8:	4a70      	ldr	r2, [pc, #448]	@ (800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a900:	e01e      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a902:	4b6d      	ldr	r3, [pc, #436]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a90a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a90e:	d106      	bne.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a916:	d102      	bne.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a918:	4b69      	ldr	r3, [pc, #420]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a91a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a91c:	e010      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a91e:	4b66      	ldr	r3, [pc, #408]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a92a:	d106      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a932:	d102      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a934:	4b63      	ldr	r3, [pc, #396]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a936:	637b      	str	r3, [r7, #52]	@ 0x34
 800a938:	e002      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a93e:	e003      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a940:	e002      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a942:	2300      	movs	r3, #0
 800a944:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a946:	bf00      	nop
          }
        }
        break;
 800a948:	e0b1      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a94a:	4b5b      	ldr	r3, [pc, #364]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a94c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a950:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a954:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a956:	4b58      	ldr	r3, [pc, #352]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b02      	cmp	r3, #2
 800a962:	d106      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a96a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a96e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a970:	e01f      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a972:	4b51      	ldr	r3, [pc, #324]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a97c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a980:	d106      	bne.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	2b40      	cmp	r3, #64	@ 0x40
 800a986:	d103      	bne.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a988:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a98c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a98e:	e010      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a990:	4b49      	ldr	r3, [pc, #292]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a99c:	d106      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a0:	2b80      	cmp	r3, #128	@ 0x80
 800a9a2:	d103      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a9a4:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a9a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9aa:	e002      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a9b0:	e07d      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a9b2:	e07c      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a9b4:	4b40      	ldr	r3, [pc, #256]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a9b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a9ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a9be:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a9c0:	4b3d      	ldr	r3, [pc, #244]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9cc:	d105      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d102      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a9d4:	4b3c      	ldr	r3, [pc, #240]	@ (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a9d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d8:	e031      	b.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a9da:	4b37      	ldr	r3, [pc, #220]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9e6:	d10a      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ea:	2b10      	cmp	r3, #16
 800a9ec:	d107      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9ee:	f107 0320 	add.w	r3, r7, #32
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fd f8d2 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9fc:	e01f      	b.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a9fe:	4b2e      	ldr	r3, [pc, #184]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aa00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa04:	f003 0302 	and.w	r3, r3, #2
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d106      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0e:	2b20      	cmp	r3, #32
 800aa10:	d103      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800aa12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa16:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa18:	e011      	b.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800aa1a:	4b27      	ldr	r3, [pc, #156]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aa1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa28:	d106      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	2b30      	cmp	r3, #48	@ 0x30
 800aa2e:	d103      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800aa30:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aa34:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa36:	e002      	b.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800aa3c:	e037      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa3e:	e036      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800aa40:	4b1d      	ldr	r3, [pc, #116]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aa42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aa46:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aa4a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4e:	2b10      	cmp	r3, #16
 800aa50:	d107      	bne.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa52:	f107 0320 	add.w	r3, r7, #32
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fd f8a0 	bl	8007b9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800aa60:	e025      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800aa62:	4b15      	ldr	r3, [pc, #84]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa6e:	d10a      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800aa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa72:	2b20      	cmp	r3, #32
 800aa74:	d107      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa76:	f107 0308 	add.w	r3, r7, #8
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fd fb62 	bl	8008144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa84:	e00f      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800aa86:	4b0c      	ldr	r3, [pc, #48]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa92:	d105      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800aa94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa96:	2b30      	cmp	r3, #48	@ 0x30
 800aa98:	d102      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800aa9a:	4b0b      	ldr	r3, [pc, #44]	@ (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800aa9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa9e:	e002      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800aaa4:	e003      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aaa6:	e002      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaac:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800aaae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	373c      	adds	r7, #60	@ 0x3c
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd90      	pop	{r4, r7, pc}
 800aab8:	44020c00 	.word	0x44020c00
 800aabc:	03d09000 	.word	0x03d09000
 800aac0:	003d0900 	.word	0x003d0900
 800aac4:	017d7840 	.word	0x017d7840
 800aac8:	02dc6c00 	.word	0x02dc6c00

0800aacc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800aad4:	4b48      	ldr	r3, [pc, #288]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a47      	ldr	r2, [pc, #284]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800aada:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aade:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aae0:	f7f9 f8c6 	bl	8003c70 <HAL_GetTick>
 800aae4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aae6:	e008      	b.n	800aafa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aae8:	f7f9 f8c2 	bl	8003c70 <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d901      	bls.n	800aafa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e07a      	b.n	800abf0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aafa:	4b3f      	ldr	r3, [pc, #252]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1f0      	bne.n	800aae8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800ab06:	4b3c      	ldr	r3, [pc, #240]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	6811      	ldr	r1, [r2, #0]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	6852      	ldr	r2, [r2, #4]
 800ab1a:	0212      	lsls	r2, r2, #8
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	4936      	ldr	r1, [pc, #216]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab20:	4313      	orrs	r3, r2
 800ab22:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	025b      	lsls	r3, r3, #9
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	431a      	orrs	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	041b      	lsls	r3, r3, #16
 800ab42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ab46:	431a      	orrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	061b      	lsls	r3, r3, #24
 800ab50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ab54:	4928      	ldr	r1, [pc, #160]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800ab5a:	4b27      	ldr	r3, [pc, #156]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5e:	f023 020c 	bic.w	r2, r3, #12
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	4924      	ldr	r1, [pc, #144]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800ab6c:	4b22      	ldr	r3, [pc, #136]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab70:	f023 0220 	bic.w	r2, r3, #32
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	69db      	ldr	r3, [r3, #28]
 800ab78:	491f      	ldr	r1, [pc, #124]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800ab7e:	4b1e      	ldr	r3, [pc, #120]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab86:	491c      	ldr	r1, [pc, #112]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800ab8c:	4b1a      	ldr	r3, [pc, #104]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab90:	4a19      	ldr	r2, [pc, #100]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab92:	f023 0310 	bic.w	r3, r3, #16
 800ab96:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800ab98:	4b17      	ldr	r3, [pc, #92]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aba0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	6a12      	ldr	r2, [r2, #32]
 800aba8:	00d2      	lsls	r2, r2, #3
 800abaa:	4913      	ldr	r1, [pc, #76]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800abac:	4313      	orrs	r3, r2
 800abae:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800abb0:	4b11      	ldr	r3, [pc, #68]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800abb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb4:	4a10      	ldr	r2, [pc, #64]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800abb6:	f043 0310 	orr.w	r3, r3, #16
 800abba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800abbc:	4b0e      	ldr	r3, [pc, #56]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a0d      	ldr	r2, [pc, #52]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800abc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800abc6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800abc8:	f7f9 f852 	bl	8003c70 <HAL_GetTick>
 800abcc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abce:	e008      	b.n	800abe2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800abd0:	f7f9 f84e 	bl	8003c70 <HAL_GetTick>
 800abd4:	4602      	mov	r2, r0
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d901      	bls.n	800abe2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800abde:	2303      	movs	r3, #3
 800abe0:	e006      	b.n	800abf0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abe2:	4b05      	ldr	r3, [pc, #20]	@ (800abf8 <RCCEx_PLL2_Config+0x12c>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0f0      	beq.n	800abd0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800abee:	2300      	movs	r3, #0

}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	44020c00 	.word	0x44020c00

0800abfc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800ac04:	4b48      	ldr	r3, [pc, #288]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a47      	ldr	r2, [pc, #284]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ac0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ac10:	f7f9 f82e 	bl	8003c70 <HAL_GetTick>
 800ac14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac16:	e008      	b.n	800ac2a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac18:	f7f9 f82a 	bl	8003c70 <HAL_GetTick>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d901      	bls.n	800ac2a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e07a      	b.n	800ad20 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac2a:	4b3f      	ldr	r3, [pc, #252]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1f0      	bne.n	800ac18 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ac36:	4b3c      	ldr	r3, [pc, #240]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ac38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac3a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ac3e:	f023 0303 	bic.w	r3, r3, #3
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	6811      	ldr	r1, [r2, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6852      	ldr	r2, [r2, #4]
 800ac4a:	0212      	lsls	r2, r2, #8
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	4936      	ldr	r1, [pc, #216]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ac50:	4313      	orrs	r3, r2
 800ac52:	630b      	str	r3, [r1, #48]	@ 0x30
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	025b      	lsls	r3, r3, #9
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	431a      	orrs	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	041b      	lsls	r3, r3, #16
 800ac72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ac76:	431a      	orrs	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	695b      	ldr	r3, [r3, #20]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	061b      	lsls	r3, r3, #24
 800ac80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ac84:	4928      	ldr	r1, [pc, #160]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac8a:	4b27      	ldr	r3, [pc, #156]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8e:	f023 020c 	bic.w	r2, r3, #12
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	4924      	ldr	r1, [pc, #144]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800ac9c:	4b22      	ldr	r3, [pc, #136]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aca0:	f023 0220 	bic.w	r2, r3, #32
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	69db      	ldr	r3, [r3, #28]
 800aca8:	491f      	ldr	r1, [pc, #124]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800acae:	4b1e      	ldr	r3, [pc, #120]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800acb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb6:	491c      	ldr	r1, [pc, #112]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800acb8:	4313      	orrs	r3, r2
 800acba:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800acbc:	4b1a      	ldr	r3, [pc, #104]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800acbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc0:	4a19      	ldr	r2, [pc, #100]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800acc2:	f023 0310 	bic.w	r3, r3, #16
 800acc6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800acc8:	4b17      	ldr	r3, [pc, #92]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800acca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800accc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800acd0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	6a12      	ldr	r2, [r2, #32]
 800acd8:	00d2      	lsls	r2, r2, #3
 800acda:	4913      	ldr	r1, [pc, #76]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800acdc:	4313      	orrs	r3, r2
 800acde:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800ace0:	4b11      	ldr	r3, [pc, #68]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ace2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace4:	4a10      	ldr	r2, [pc, #64]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ace6:	f043 0310 	orr.w	r3, r3, #16
 800acea:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800acec:	4b0e      	ldr	r3, [pc, #56]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a0d      	ldr	r2, [pc, #52]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800acf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acf6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800acf8:	f7f8 ffba 	bl	8003c70 <HAL_GetTick>
 800acfc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800acfe:	e008      	b.n	800ad12 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad00:	f7f8 ffb6 	bl	8003c70 <HAL_GetTick>
 800ad04:	4602      	mov	r2, r0
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d901      	bls.n	800ad12 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e006      	b.n	800ad20 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad12:	4b05      	ldr	r3, [pc, #20]	@ (800ad28 <RCCEx_PLL3_Config+0x12c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0f0      	beq.n	800ad00 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	44020c00 	.word	0x44020c00

0800ad2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d101      	bne.n	800ad3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e162      	b.n	800b004 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a70      	ldr	r2, [pc, #448]	@ (800af04 <HAL_SPI_Init+0x1d8>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d018      	beq.n	800ad7a <HAL_SPI_Init+0x4e>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a6e      	ldr	r2, [pc, #440]	@ (800af08 <HAL_SPI_Init+0x1dc>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d013      	beq.n	800ad7a <HAL_SPI_Init+0x4e>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a6d      	ldr	r2, [pc, #436]	@ (800af0c <HAL_SPI_Init+0x1e0>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d00e      	beq.n	800ad7a <HAL_SPI_Init+0x4e>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a6b      	ldr	r2, [pc, #428]	@ (800af10 <HAL_SPI_Init+0x1e4>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d009      	beq.n	800ad7a <HAL_SPI_Init+0x4e>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a6a      	ldr	r2, [pc, #424]	@ (800af14 <HAL_SPI_Init+0x1e8>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d004      	beq.n	800ad7a <HAL_SPI_Init+0x4e>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a68      	ldr	r2, [pc, #416]	@ (800af18 <HAL_SPI_Init+0x1ec>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	e000      	b.n	800ad7c <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800ad7a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a5f      	ldr	r2, [pc, #380]	@ (800af04 <HAL_SPI_Init+0x1d8>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d018      	beq.n	800adbe <HAL_SPI_Init+0x92>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a5d      	ldr	r2, [pc, #372]	@ (800af08 <HAL_SPI_Init+0x1dc>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d013      	beq.n	800adbe <HAL_SPI_Init+0x92>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a5c      	ldr	r2, [pc, #368]	@ (800af0c <HAL_SPI_Init+0x1e0>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d00e      	beq.n	800adbe <HAL_SPI_Init+0x92>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a5a      	ldr	r2, [pc, #360]	@ (800af10 <HAL_SPI_Init+0x1e4>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d009      	beq.n	800adbe <HAL_SPI_Init+0x92>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a59      	ldr	r2, [pc, #356]	@ (800af14 <HAL_SPI_Init+0x1e8>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d004      	beq.n	800adbe <HAL_SPI_Init+0x92>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a57      	ldr	r2, [pc, #348]	@ (800af18 <HAL_SPI_Init+0x1ec>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d105      	bne.n	800adca <HAL_SPI_Init+0x9e>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	2b0f      	cmp	r3, #15
 800adc4:	d901      	bls.n	800adca <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e11c      	b.n	800b004 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fdac 	bl	800b928 <SPI_GetPacketSize>
 800add0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a4b      	ldr	r2, [pc, #300]	@ (800af04 <HAL_SPI_Init+0x1d8>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d018      	beq.n	800ae0e <HAL_SPI_Init+0xe2>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a49      	ldr	r2, [pc, #292]	@ (800af08 <HAL_SPI_Init+0x1dc>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d013      	beq.n	800ae0e <HAL_SPI_Init+0xe2>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a48      	ldr	r2, [pc, #288]	@ (800af0c <HAL_SPI_Init+0x1e0>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00e      	beq.n	800ae0e <HAL_SPI_Init+0xe2>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a46      	ldr	r2, [pc, #280]	@ (800af10 <HAL_SPI_Init+0x1e4>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d009      	beq.n	800ae0e <HAL_SPI_Init+0xe2>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a45      	ldr	r2, [pc, #276]	@ (800af14 <HAL_SPI_Init+0x1e8>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d004      	beq.n	800ae0e <HAL_SPI_Init+0xe2>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a43      	ldr	r2, [pc, #268]	@ (800af18 <HAL_SPI_Init+0x1ec>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d102      	bne.n	800ae14 <HAL_SPI_Init+0xe8>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b08      	cmp	r3, #8
 800ae12:	d820      	bhi.n	800ae56 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ae18:	4a40      	ldr	r2, [pc, #256]	@ (800af1c <HAL_SPI_Init+0x1f0>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d018      	beq.n	800ae50 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a3f      	ldr	r2, [pc, #252]	@ (800af20 <HAL_SPI_Init+0x1f4>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d013      	beq.n	800ae50 <HAL_SPI_Init+0x124>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a3d      	ldr	r2, [pc, #244]	@ (800af24 <HAL_SPI_Init+0x1f8>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d00e      	beq.n	800ae50 <HAL_SPI_Init+0x124>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a3c      	ldr	r2, [pc, #240]	@ (800af28 <HAL_SPI_Init+0x1fc>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d009      	beq.n	800ae50 <HAL_SPI_Init+0x124>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a3a      	ldr	r2, [pc, #232]	@ (800af2c <HAL_SPI_Init+0x200>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d004      	beq.n	800ae50 <HAL_SPI_Init+0x124>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a39      	ldr	r2, [pc, #228]	@ (800af30 <HAL_SPI_Init+0x204>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d104      	bne.n	800ae5a <HAL_SPI_Init+0x12e>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b10      	cmp	r3, #16
 800ae54:	d901      	bls.n	800ae5a <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e0d4      	b.n	800b004 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d106      	bne.n	800ae74 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7f8 f864 	bl	8002f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2202      	movs	r2, #2
 800ae78:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0201 	bic.w	r2, r2, #1
 800ae8a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ae96:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aea0:	d119      	bne.n	800aed6 <HAL_SPI_Init+0x1aa>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aeaa:	d103      	bne.n	800aeb4 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d008      	beq.n	800aec6 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10c      	bne.n	800aed6 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aec4:	d107      	bne.n	800aed6 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aed4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d028      	beq.n	800af34 <HAL_SPI_Init+0x208>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	2b06      	cmp	r3, #6
 800aee8:	d924      	bls.n	800af34 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	e020      	b.n	800af44 <HAL_SPI_Init+0x218>
 800af02:	bf00      	nop
 800af04:	40014c00 	.word	0x40014c00
 800af08:	50014c00 	.word	0x50014c00
 800af0c:	44002000 	.word	0x44002000
 800af10:	54002000 	.word	0x54002000
 800af14:	40015000 	.word	0x40015000
 800af18:	50015000 	.word	0x50015000
 800af1c:	40013000 	.word	0x40013000
 800af20:	50013000 	.word	0x50013000
 800af24:	40003800 	.word	0x40003800
 800af28:	50003800 	.word	0x50003800
 800af2c:	40003c00 	.word	0x40003c00
 800af30:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800af42:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	69da      	ldr	r2, [r3, #28]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4c:	431a      	orrs	r2, r3
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	431a      	orrs	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af56:	ea42 0103 	orr.w	r1, r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6e:	431a      	orrs	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af74:	431a      	orrs	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	431a      	orrs	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	431a      	orrs	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	431a      	orrs	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a1b      	ldr	r3, [r3, #32]
 800af8c:	431a      	orrs	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	431a      	orrs	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af98:	431a      	orrs	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	431a      	orrs	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afa4:	431a      	orrs	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afaa:	431a      	orrs	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afb0:	ea42 0103 	orr.w	r1, r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	430a      	orrs	r2, r1
 800afbe:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0201 	bic.w	r2, r2, #1
 800afce:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00a      	beq.n	800aff2 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	430a      	orrs	r2, r1
 800aff0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2201      	movs	r2, #1
 800affe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af02      	add	r7, sp, #8
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	4613      	mov	r3, r2
 800b01a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3320      	adds	r3, #32
 800b022:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b024:	f7f8 fe24 	bl	8003c70 <HAL_GetTick>
 800b028:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b01      	cmp	r3, #1
 800b034:	d001      	beq.n	800b03a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b036:	2302      	movs	r3, #2
 800b038:	e1f9      	b.n	800b42e <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <HAL_SPI_Transmit+0x3a>
 800b040:	88fb      	ldrh	r3, [r7, #6]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e1f1      	b.n	800b42e <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b050:	2b01      	cmp	r3, #1
 800b052:	d101      	bne.n	800b058 <HAL_SPI_Transmit+0x4c>
 800b054:	2302      	movs	r3, #2
 800b056:	e1ea      	b.n	800b42e <HAL_SPI_Transmit+0x422>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2203      	movs	r2, #3
 800b064:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	88fa      	ldrh	r2, [r7, #6]
 800b07a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	88fa      	ldrh	r2, [r7, #6]
 800b082:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b0b0:	d108      	bne.n	800b0c4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0c0:	601a      	str	r2, [r3, #0]
 800b0c2:	e009      	b.n	800b0d8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b0d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	0c1b      	lsrs	r3, r3, #16
 800b0e0:	041b      	lsls	r3, r3, #16
 800b0e2:	88f9      	ldrh	r1, [r7, #6]
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	6812      	ldr	r2, [r2, #0]
 800b0e8:	430b      	orrs	r3, r1
 800b0ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f042 0201 	orr.w	r2, r2, #1
 800b0fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b104:	d107      	bne.n	800b116 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b114:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	2b0f      	cmp	r3, #15
 800b11c:	d965      	bls.n	800b1ea <HAL_SPI_Transmit+0x1de>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a94      	ldr	r2, [pc, #592]	@ (800b374 <HAL_SPI_Transmit+0x368>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d059      	beq.n	800b1dc <HAL_SPI_Transmit+0x1d0>
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a92      	ldr	r2, [pc, #584]	@ (800b378 <HAL_SPI_Transmit+0x36c>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d054      	beq.n	800b1dc <HAL_SPI_Transmit+0x1d0>
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a91      	ldr	r2, [pc, #580]	@ (800b37c <HAL_SPI_Transmit+0x370>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d04f      	beq.n	800b1dc <HAL_SPI_Transmit+0x1d0>
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a8f      	ldr	r2, [pc, #572]	@ (800b380 <HAL_SPI_Transmit+0x374>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d04a      	beq.n	800b1dc <HAL_SPI_Transmit+0x1d0>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a8e      	ldr	r2, [pc, #568]	@ (800b384 <HAL_SPI_Transmit+0x378>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d045      	beq.n	800b1dc <HAL_SPI_Transmit+0x1d0>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a8c      	ldr	r2, [pc, #560]	@ (800b388 <HAL_SPI_Transmit+0x37c>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d147      	bne.n	800b1ea <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b15a:	e03f      	b.n	800b1dc <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	f003 0302 	and.w	r3, r3, #2
 800b166:	2b02      	cmp	r3, #2
 800b168:	d114      	bne.n	800b194 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6812      	ldr	r2, [r2, #0]
 800b174:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b17a:	1d1a      	adds	r2, r3, #4
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b186:	b29b      	uxth	r3, r3
 800b188:	3b01      	subs	r3, #1
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b192:	e023      	b.n	800b1dc <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b194:	f7f8 fd6c 	bl	8003c70 <HAL_GetTick>
 800b198:	4602      	mov	r2, r0
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d803      	bhi.n	800b1ac <HAL_SPI_Transmit+0x1a0>
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1aa:	d102      	bne.n	800b1b2 <HAL_SPI_Transmit+0x1a6>
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d114      	bne.n	800b1dc <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 faea 	bl	800b78c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	e128      	b.n	800b42e <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1b9      	bne.n	800b15c <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b1e8:	e0fb      	b.n	800b3e2 <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	2b07      	cmp	r3, #7
 800b1f0:	f240 80f0 	bls.w	800b3d4 <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b1f4:	e05d      	b.n	800b2b2 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	f003 0302 	and.w	r3, r3, #2
 800b200:	2b02      	cmp	r3, #2
 800b202:	d132      	bne.n	800b26a <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d918      	bls.n	800b242 <HAL_SPI_Transmit+0x236>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d014      	beq.n	800b242 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6812      	ldr	r2, [r2, #0]
 800b222:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b228:	1d1a      	adds	r2, r3, #4
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b234:	b29b      	uxth	r3, r3
 800b236:	3b02      	subs	r3, #2
 800b238:	b29a      	uxth	r2, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b240:	e037      	b.n	800b2b2 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b246:	881a      	ldrh	r2, [r3, #0]
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b250:	1c9a      	adds	r2, r3, #2
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	3b01      	subs	r3, #1
 800b260:	b29a      	uxth	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b268:	e023      	b.n	800b2b2 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b26a:	f7f8 fd01 	bl	8003c70 <HAL_GetTick>
 800b26e:	4602      	mov	r2, r0
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	1ad3      	subs	r3, r2, r3
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d803      	bhi.n	800b282 <HAL_SPI_Transmit+0x276>
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b280:	d102      	bne.n	800b288 <HAL_SPI_Transmit+0x27c>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d114      	bne.n	800b2b2 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f000 fa7f 	bl	800b78c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b294:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e0bd      	b.n	800b42e <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d19b      	bne.n	800b1f6 <HAL_SPI_Transmit+0x1ea>
 800b2be:	e090      	b.n	800b3e2 <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	f003 0302 	and.w	r3, r3, #2
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d15e      	bne.n	800b38c <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d918      	bls.n	800b30c <HAL_SPI_Transmit+0x300>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2de:	2b40      	cmp	r3, #64	@ 0x40
 800b2e0:	d914      	bls.n	800b30c <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6812      	ldr	r2, [r2, #0]
 800b2ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2f2:	1d1a      	adds	r2, r3, #4
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	3b04      	subs	r3, #4
 800b302:	b29a      	uxth	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b30a:	e063      	b.n	800b3d4 <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b312:	b29b      	uxth	r3, r3
 800b314:	2b01      	cmp	r3, #1
 800b316:	d917      	bls.n	800b348 <HAL_SPI_Transmit+0x33c>
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d013      	beq.n	800b348 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b324:	881a      	ldrh	r2, [r3, #0]
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b32e:	1c9a      	adds	r2, r3, #2
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	3b02      	subs	r3, #2
 800b33e:	b29a      	uxth	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b346:	e045      	b.n	800b3d4 <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3320      	adds	r3, #32
 800b352:	7812      	ldrb	r2, [r2, #0]
 800b354:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b366:	b29b      	uxth	r3, r3
 800b368:	3b01      	subs	r3, #1
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b372:	e02f      	b.n	800b3d4 <HAL_SPI_Transmit+0x3c8>
 800b374:	40013000 	.word	0x40013000
 800b378:	50013000 	.word	0x50013000
 800b37c:	40003800 	.word	0x40003800
 800b380:	50003800 	.word	0x50003800
 800b384:	40003c00 	.word	0x40003c00
 800b388:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b38c:	f7f8 fc70 	bl	8003c70 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d803      	bhi.n	800b3a4 <HAL_SPI_Transmit+0x398>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a2:	d102      	bne.n	800b3aa <HAL_SPI_Transmit+0x39e>
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d114      	bne.n	800b3d4 <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f000 f9ee 	bl	800b78c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e02c      	b.n	800b42e <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f47f af6f 	bne.w	800b2c0 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	2108      	movs	r1, #8
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 fa6d 	bl	800b8cc <SPI_WaitOnFlagUntilTimeout>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d007      	beq.n	800b408 <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3fe:	f043 0220 	orr.w	r2, r3, #32
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f000 f9bf 	bl	800b78c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e000      	b.n	800b42e <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 800b42c:	2300      	movs	r3, #0
  }
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3718      	adds	r7, #24
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop

0800b438 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	4613      	mov	r3, r2
 800b446:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3330      	adds	r3, #48	@ 0x30
 800b44e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b450:	f7f8 fc0e 	bl	8003c70 <HAL_GetTick>
 800b454:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d001      	beq.n	800b466 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800b462:	2302      	movs	r3, #2
 800b464:	e181      	b.n	800b76a <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <HAL_SPI_Receive+0x3a>
 800b46c:	88fb      	ldrh	r3, [r7, #6]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e179      	b.n	800b76a <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <HAL_SPI_Receive+0x4c>
 800b480:	2302      	movs	r3, #2
 800b482:	e172      	b.n	800b76a <HAL_SPI_Receive+0x332>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2204      	movs	r2, #4
 800b490:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	88fa      	ldrh	r2, [r7, #6]
 800b4a6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	88fa      	ldrh	r2, [r7, #6]
 800b4ae:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b4dc:	d108      	bne.n	800b4f0 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	e009      	b.n	800b504 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b502:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	0c1b      	lsrs	r3, r3, #16
 800b50c:	041b      	lsls	r3, r3, #16
 800b50e:	88f9      	ldrh	r1, [r7, #6]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	6812      	ldr	r2, [r2, #0]
 800b514:	430b      	orrs	r3, r1
 800b516:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f042 0201 	orr.w	r2, r2, #1
 800b526:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b530:	d107      	bne.n	800b542 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b540:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	2b0f      	cmp	r3, #15
 800b548:	d966      	bls.n	800b618 <HAL_SPI_Receive+0x1e0>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a89      	ldr	r2, [pc, #548]	@ (800b774 <HAL_SPI_Receive+0x33c>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d05a      	beq.n	800b60a <HAL_SPI_Receive+0x1d2>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a87      	ldr	r2, [pc, #540]	@ (800b778 <HAL_SPI_Receive+0x340>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d055      	beq.n	800b60a <HAL_SPI_Receive+0x1d2>
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a86      	ldr	r2, [pc, #536]	@ (800b77c <HAL_SPI_Receive+0x344>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d050      	beq.n	800b60a <HAL_SPI_Receive+0x1d2>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a84      	ldr	r2, [pc, #528]	@ (800b780 <HAL_SPI_Receive+0x348>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d04b      	beq.n	800b60a <HAL_SPI_Receive+0x1d2>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a83      	ldr	r2, [pc, #524]	@ (800b784 <HAL_SPI_Receive+0x34c>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d046      	beq.n	800b60a <HAL_SPI_Receive+0x1d2>
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a81      	ldr	r2, [pc, #516]	@ (800b788 <HAL_SPI_Receive+0x350>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d148      	bne.n	800b618 <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b586:	e040      	b.n	800b60a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	695a      	ldr	r2, [r3, #20]
 800b58e:	f248 0308 	movw	r3, #32776	@ 0x8008
 800b592:	4013      	ands	r3, r2
 800b594:	2b00      	cmp	r3, #0
 800b596:	d014      	beq.n	800b5c2 <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b5a2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5a8:	1d1a      	adds	r2, r3, #4
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b5c0:	e023      	b.n	800b60a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5c2:	f7f8 fb55 	bl	8003c70 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d803      	bhi.n	800b5da <HAL_SPI_Receive+0x1a2>
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d8:	d102      	bne.n	800b5e0 <HAL_SPI_Receive+0x1a8>
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d114      	bne.n	800b60a <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f000 f8d3 	bl	800b78c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b606:	2303      	movs	r3, #3
 800b608:	e0af      	b.n	800b76a <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b610:	b29b      	uxth	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1b8      	bne.n	800b588 <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b616:	e095      	b.n	800b744 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	2b07      	cmp	r3, #7
 800b61e:	f240 808b 	bls.w	800b738 <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b622:	e03f      	b.n	800b6a4 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	f003 0301 	and.w	r3, r3, #1
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d114      	bne.n	800b65c <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	8812      	ldrh	r2, [r2, #0]
 800b63a:	b292      	uxth	r2, r2
 800b63c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b642:	1c9a      	adds	r2, r3, #2
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b64e:	b29b      	uxth	r3, r3
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b65a:	e023      	b.n	800b6a4 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b65c:	f7f8 fb08 	bl	8003c70 <HAL_GetTick>
 800b660:	4602      	mov	r2, r0
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d803      	bhi.n	800b674 <HAL_SPI_Receive+0x23c>
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b672:	d102      	bne.n	800b67a <HAL_SPI_Receive+0x242>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d114      	bne.n	800b6a4 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 f886 	bl	800b78c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b686:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e062      	b.n	800b76a <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1b9      	bne.n	800b624 <HAL_SPI_Receive+0x1ec>
 800b6b0:	e048      	b.n	800b744 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d117      	bne.n	800b6f0 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6cc:	7812      	ldrb	r2, [r2, #0]
 800b6ce:	b2d2      	uxtb	r2, r2
 800b6d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800b6ee:	e023      	b.n	800b738 <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6f0:	f7f8 fabe 	bl	8003c70 <HAL_GetTick>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d803      	bhi.n	800b708 <HAL_SPI_Receive+0x2d0>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b706:	d102      	bne.n	800b70e <HAL_SPI_Receive+0x2d6>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d114      	bne.n	800b738 <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f000 f83c 	bl	800b78c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b71a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b734:	2303      	movs	r3, #3
 800b736:	e018      	b.n	800b76a <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b73e:	b29b      	uxth	r3, r3
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1b6      	bne.n	800b6b2 <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 f821 	bl	800b78c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	e000      	b.n	800b76a <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 800b768:	2300      	movs	r3, #0
  }
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	40013000 	.word	0x40013000
 800b778:	50013000 	.word	0x50013000
 800b77c:	40003800 	.word	0x40003800
 800b780:	50003800 	.word	0x50003800
 800b784:	40003c00 	.word	0x40003c00
 800b788:	50003c00 	.word	0x50003c00

0800b78c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	699a      	ldr	r2, [r3, #24]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f042 0208 	orr.w	r2, r2, #8
 800b7aa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	699a      	ldr	r2, [r3, #24]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f042 0210 	orr.w	r2, r2, #16
 800b7ba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f022 0201 	bic.w	r2, r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	6812      	ldr	r2, [r2, #0]
 800b7d6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800b7da:	f023 0303 	bic.w	r3, r3, #3
 800b7de:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	689a      	ldr	r2, [r3, #8]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b7ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d014      	beq.n	800b826 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f003 0320 	and.w	r3, r3, #32
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00f      	beq.n	800b826 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b80c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	699a      	ldr	r2, [r3, #24]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f042 0220 	orr.w	r2, r2, #32
 800b824:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d014      	beq.n	800b85c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00f      	beq.n	800b85c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b842:	f043 0204 	orr.w	r2, r3, #4
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	699a      	ldr	r2, [r3, #24]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b85a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00f      	beq.n	800b886 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b86c:	f043 0201 	orr.w	r2, r3, #1
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	699a      	ldr	r2, [r3, #24]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b884:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00f      	beq.n	800b8b0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b896:	f043 0208 	orr.w	r2, r3, #8
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	699a      	ldr	r2, [r3, #24]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800b8c0:	bf00      	nop
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	603b      	str	r3, [r7, #0]
 800b8d8:	4613      	mov	r3, r2
 800b8da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b8dc:	e010      	b.n	800b900 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8de:	f7f8 f9c7 	bl	8003c70 <HAL_GetTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d803      	bhi.n	800b8f6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d102      	bne.n	800b8fc <SPI_WaitOnFlagUntilTimeout+0x30>
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e00f      	b.n	800b920 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	695a      	ldr	r2, [r3, #20]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	4013      	ands	r3, r2
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	bf0c      	ite	eq
 800b910:	2301      	moveq	r3, #1
 800b912:	2300      	movne	r3, #0
 800b914:	b2db      	uxtb	r3, r3
 800b916:	461a      	mov	r2, r3
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d0df      	beq.n	800b8de <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b934:	095b      	lsrs	r3, r3, #5
 800b936:	3301      	adds	r3, #1
 800b938:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	3301      	adds	r3, #1
 800b940:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	3307      	adds	r3, #7
 800b946:	08db      	lsrs	r3, r3, #3
 800b948:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b952:	4618      	mov	r0, r3
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
	...

0800b960 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e03e      	b.n	800b9f4 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d106      	bne.n	800b990 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7f7 fed0 	bl	8003730 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3308      	adds	r3, #8
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f002 fa90 	bl	800dec0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	68b9      	ldr	r1, [r7, #8]
 800b9ac:	f002 fb56 	bl	800e05c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6858      	ldr	r0, [r3, #4]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	689a      	ldr	r2, [r3, #8]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9bc:	6879      	ldr	r1, [r7, #4]
 800b9be:	f002 fb9a 	bl	800e0f6 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	6892      	ldr	r2, [r2, #8]
 800b9ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	6892      	ldr	r2, [r2, #8]
 800b9d6:	f041 0101 	orr.w	r1, r1, #1
 800b9da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b9de:	4b07      	ldr	r3, [pc, #28]	@ (800b9fc <HAL_SRAM_Init+0x9c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a06      	ldr	r2, [pc, #24]	@ (800b9fc <HAL_SRAM_Init+0x9c>)
 800b9e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9e8:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	47000400 	.word	0x47000400

0800ba00 <HAL_SRAM_Read_8b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
                                   uint32_t BufferSize)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b089      	sub	sp, #36	@ 0x24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	61bb      	str	r3, [r7, #24]
  uint8_t *pdestbuff = pDstBuffer;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	617b      	str	r3, [r7, #20]
  HAL_SRAM_StateTypeDef state = hsram->State;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ba1c:	74fb      	strb	r3, [r7, #19]

  /* Check the SRAM controller state */
  if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 800ba1e:	7cfb      	ldrb	r3, [r7, #19]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d002      	beq.n	800ba2a <HAL_SRAM_Read_8b+0x2a>
 800ba24:	7cfb      	ldrb	r3, [r7, #19]
 800ba26:	2b04      	cmp	r3, #4
 800ba28:	d12c      	bne.n	800ba84 <HAL_SRAM_Read_8b+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d101      	bne.n	800ba38 <HAL_SRAM_Read_8b+0x38>
 800ba34:	2302      	movs	r3, #2
 800ba36:	e026      	b.n	800ba86 <HAL_SRAM_Read_8b+0x86>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2202      	movs	r2, #2
 800ba44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Read data from memory */
    for (size = BufferSize; size != 0U; size--)
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	61fb      	str	r3, [r7, #28]
 800ba4c:	e00d      	b.n	800ba6a <HAL_SRAM_Read_8b+0x6a>
    {
      *pdestbuff = *psramaddress;
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	701a      	strb	r2, [r3, #0]
      pdestbuff++;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	3301      	adds	r3, #1
 800ba62:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	61fb      	str	r3, [r7, #28]
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1ee      	bne.n	800ba4e <HAL_SRAM_Read_8b+0x4e>
    }

    /* Update the SRAM controller state */
    hsram->State = state;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	7cfa      	ldrb	r2, [r7, #19]
 800ba74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	e000      	b.n	800ba86 <HAL_SRAM_Read_8b+0x86>
    return HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3724      	adds	r7, #36	@ 0x24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b089      	sub	sp, #36	@ 0x24
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
 800ba9e:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d12b      	bne.n	800bb0c <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800baba:	2b01      	cmp	r3, #1
 800babc:	d101      	bne.n	800bac2 <HAL_SRAM_Write_8b+0x30>
 800babe:	2302      	movs	r3, #2
 800bac0:	e025      	b.n	800bb0e <HAL_SRAM_Write_8b+0x7c>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2202      	movs	r2, #2
 800bace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	61fb      	str	r3, [r7, #28]
 800bad6:	e00c      	b.n	800baf2 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	781a      	ldrb	r2, [r3, #0]
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	3301      	adds	r3, #1
 800bae4:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	3301      	adds	r3, #1
 800baea:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	3b01      	subs	r3, #1
 800baf0:	61fb      	str	r3, [r7, #28]
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1ef      	bne.n	800bad8 <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e000      	b.n	800bb0e <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3724      	adds	r7, #36	@ 0x24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e042      	b.n	800bbb2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7f7 fb64 	bl	800320c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2224      	movs	r2, #36	@ 0x24
 800bb48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f022 0201 	bic.w	r2, r2, #1
 800bb5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fe2b 	bl	800c7c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fc3a 	bl	800c3e4 <UART_SetConfig>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d101      	bne.n	800bb7a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e01b      	b.n	800bbb2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	685a      	ldr	r2, [r3, #4]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	689a      	ldr	r2, [r3, #8]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bb98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f042 0201 	orr.w	r2, r2, #1
 800bba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 feaa 	bl	800c904 <UART_CheckIdleState>
 800bbb0:	4603      	mov	r3, r0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b091      	sub	sp, #68	@ 0x44
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbd0:	2b20      	cmp	r3, #32
 800bbd2:	f040 8088 	bne.w	800bce6 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <HAL_UART_Transmit_IT+0x26>
 800bbdc:	88fb      	ldrh	r3, [r7, #6]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e080      	b.n	800bce8 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbf0:	2b80      	cmp	r3, #128	@ 0x80
 800bbf2:	d107      	bne.n	800bc04 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	689a      	ldr	r2, [r3, #8]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bc02:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	88fa      	ldrh	r2, [r7, #6]
 800bc0e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	88fa      	ldrh	r2, [r7, #6]
 800bc16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2221      	movs	r2, #33	@ 0x21
 800bc2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc38:	d12a      	bne.n	800bc90 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc42:	d107      	bne.n	800bc54 <HAL_UART_Transmit_IT+0x98>
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d103      	bne.n	800bc54 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4a29      	ldr	r2, [pc, #164]	@ (800bcf4 <HAL_UART_Transmit_IT+0x138>)
 800bc50:	679a      	str	r2, [r3, #120]	@ 0x78
 800bc52:	e002      	b.n	800bc5a <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4a28      	ldr	r2, [pc, #160]	@ (800bcf8 <HAL_UART_Transmit_IT+0x13c>)
 800bc58:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3308      	adds	r3, #8
 800bc60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc64:	e853 3f00 	ldrex	r3, [r3]
 800bc68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bc70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3308      	adds	r3, #8
 800bc78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc7a:	637a      	str	r2, [r7, #52]	@ 0x34
 800bc7c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bc80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc82:	e841 2300 	strex	r3, r2, [r1]
 800bc86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e5      	bne.n	800bc5a <HAL_UART_Transmit_IT+0x9e>
 800bc8e:	e028      	b.n	800bce2 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc98:	d107      	bne.n	800bcaa <HAL_UART_Transmit_IT+0xee>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d103      	bne.n	800bcaa <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	4a15      	ldr	r2, [pc, #84]	@ (800bcfc <HAL_UART_Transmit_IT+0x140>)
 800bca6:	679a      	str	r2, [r3, #120]	@ 0x78
 800bca8:	e002      	b.n	800bcb0 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	4a14      	ldr	r2, [pc, #80]	@ (800bd00 <HAL_UART_Transmit_IT+0x144>)
 800bcae:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	613b      	str	r3, [r7, #16]
   return(result);
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcce:	623b      	str	r3, [r7, #32]
 800bcd0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd2:	69f9      	ldr	r1, [r7, #28]
 800bcd4:	6a3a      	ldr	r2, [r7, #32]
 800bcd6:	e841 2300 	strex	r3, r2, [r1]
 800bcda:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1e6      	bne.n	800bcb0 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	e000      	b.n	800bce8 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800bce6:	2302      	movs	r3, #2
  }
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3744      	adds	r7, #68	@ 0x44
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr
 800bcf4:	0800d0cb 	.word	0x0800d0cb
 800bcf8:	0800cfeb 	.word	0x0800cfeb
 800bcfc:	0800cf29 	.word	0x0800cf29
 800bd00:	0800ce71 	.word	0x0800ce71

0800bd04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08a      	sub	sp, #40	@ 0x28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd18:	2b20      	cmp	r3, #32
 800bd1a:	d14b      	bne.n	800bdb4 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d002      	beq.n	800bd28 <HAL_UART_Receive_IT+0x24>
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e044      	b.n	800bdb6 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd3c:	2b40      	cmp	r3, #64	@ 0x40
 800bd3e:	d107      	bne.n	800bd50 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	689a      	ldr	r2, [r3, #8]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd4e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a1a      	ldr	r2, [pc, #104]	@ (800bdc0 <HAL_UART_Receive_IT+0xbc>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d024      	beq.n	800bda4 <HAL_UART_Receive_IT+0xa0>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a19      	ldr	r2, [pc, #100]	@ (800bdc4 <HAL_UART_Receive_IT+0xc0>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d01f      	beq.n	800bda4 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d018      	beq.n	800bda4 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	e853 3f00 	ldrex	r3, [r3]
 800bd7e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bd86:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd90:	623b      	str	r3, [r7, #32]
 800bd92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd94:	69f9      	ldr	r1, [r7, #28]
 800bd96:	6a3a      	ldr	r2, [r7, #32]
 800bd98:	e841 2300 	strex	r3, r2, [r1]
 800bd9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e6      	bne.n	800bd72 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bda4:	88fb      	ldrh	r3, [r7, #6]
 800bda6:	461a      	mov	r2, r3
 800bda8:	68b9      	ldr	r1, [r7, #8]
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 fec2 	bl	800cb34 <UART_Start_Receive_IT>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	e000      	b.n	800bdb6 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800bdb4:	2302      	movs	r3, #2
  }
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3728      	adds	r7, #40	@ 0x28
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	44002400 	.word	0x44002400
 800bdc4:	54002400 	.word	0x54002400

0800bdc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b0ae      	sub	sp, #184	@ 0xb8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69db      	ldr	r3, [r3, #28]
 800bdd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bdf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bdf6:	4013      	ands	r3, r2
 800bdf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800bdfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be00:	2b00      	cmp	r3, #0
 800be02:	d11b      	bne.n	800be3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be08:	f003 0320 	and.w	r3, r3, #32
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d015      	beq.n	800be3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800be14:	f003 0320 	and.w	r3, r3, #32
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d105      	bne.n	800be28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d009      	beq.n	800be3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 82ac 	beq.w	800c38a <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	4798      	blx	r3
      }
      return;
 800be3a:	e2a6      	b.n	800c38a <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 80fd 	beq.w	800c040 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800be4a:	4b7a      	ldr	r3, [pc, #488]	@ (800c034 <HAL_UART_IRQHandler+0x26c>)
 800be4c:	4013      	ands	r3, r2
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d106      	bne.n	800be60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800be56:	4b78      	ldr	r3, [pc, #480]	@ (800c038 <HAL_UART_IRQHandler+0x270>)
 800be58:	4013      	ands	r3, r2
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 80f0 	beq.w	800c040 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d011      	beq.n	800be90 <HAL_UART_IRQHandler+0xc8>
 800be6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800be70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00b      	beq.n	800be90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2201      	movs	r2, #1
 800be7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be86:	f043 0201 	orr.w	r2, r3, #1
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d011      	beq.n	800bec0 <HAL_UART_IRQHandler+0xf8>
 800be9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00b      	beq.n	800bec0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2202      	movs	r2, #2
 800beae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beb6:	f043 0204 	orr.w	r2, r3, #4
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bec0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d011      	beq.n	800bef0 <HAL_UART_IRQHandler+0x128>
 800becc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00b      	beq.n	800bef0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2204      	movs	r2, #4
 800bede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bee6:	f043 0202 	orr.w	r2, r3, #2
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bef4:	f003 0308 	and.w	r3, r3, #8
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d017      	beq.n	800bf2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800befc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bf00:	f003 0320 	and.w	r3, r3, #32
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d105      	bne.n	800bf14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bf0c:	4b49      	ldr	r3, [pc, #292]	@ (800c034 <HAL_UART_IRQHandler+0x26c>)
 800bf0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00b      	beq.n	800bf2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2208      	movs	r2, #8
 800bf1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf22:	f043 0208 	orr.w	r2, r3, #8
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bf30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d012      	beq.n	800bf5e <HAL_UART_IRQHandler+0x196>
 800bf38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bf3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00c      	beq.n	800bf5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf54:	f043 0220 	orr.w	r2, r3, #32
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 8212 	beq.w	800c38e <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bf6e:	f003 0320 	and.w	r3, r3, #32
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d013      	beq.n	800bf9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bf7a:	f003 0320 	and.w	r3, r3, #32
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d105      	bne.n	800bf8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d003      	beq.n	800bf9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfb2:	2b40      	cmp	r3, #64	@ 0x40
 800bfb4:	d005      	beq.n	800bfc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bfb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d02e      	beq.n	800c020 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fed8 	bl	800cd78 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfd2:	2b40      	cmp	r3, #64	@ 0x40
 800bfd4:	d120      	bne.n	800c018 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d017      	beq.n	800c010 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfe6:	4a15      	ldr	r2, [pc, #84]	@ (800c03c <HAL_UART_IRQHandler+0x274>)
 800bfe8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7f8 f879 	bl	80040e8 <HAL_DMA_Abort_IT>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d019      	beq.n	800c030 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c00a:	4610      	mov	r0, r2
 800c00c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c00e:	e00f      	b.n	800c030 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f9d1 	bl	800c3b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c016:	e00b      	b.n	800c030 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f9cd 	bl	800c3b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c01e:	e007      	b.n	800c030 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f9c9 	bl	800c3b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c02e:	e1ae      	b.n	800c38e <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c030:	bf00      	nop
    return;
 800c032:	e1ac      	b.n	800c38e <HAL_UART_IRQHandler+0x5c6>
 800c034:	10000001 	.word	0x10000001
 800c038:	04000120 	.word	0x04000120
 800c03c:	0800ce45 	.word	0x0800ce45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c044:	2b01      	cmp	r3, #1
 800c046:	f040 8142 	bne.w	800c2ce <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c04a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c04e:	f003 0310 	and.w	r3, r3, #16
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 813b 	beq.w	800c2ce <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c05c:	f003 0310 	and.w	r3, r3, #16
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 8134 	beq.w	800c2ce <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2210      	movs	r2, #16
 800c06c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c078:	2b40      	cmp	r3, #64	@ 0x40
 800c07a:	f040 80aa 	bne.w	800c1d2 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c088:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800c08c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 8084 	beq.w	800c19e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c09c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d27c      	bcs.n	800c19e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c0aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0b6:	2b81      	cmp	r3, #129	@ 0x81
 800c0b8:	d060      	beq.n	800c17c <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0c2:	e853 3f00 	ldrex	r3, [r3]
 800c0c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c0c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c0e0:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c0e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c0e8:	e841 2300 	strex	r3, r2, [r1]
 800c0ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c0ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1e2      	bne.n	800c0ba <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3308      	adds	r3, #8
 800c0fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0fe:	e853 3f00 	ldrex	r3, [r3]
 800c102:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c104:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c106:	f023 0301 	bic.w	r3, r3, #1
 800c10a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3308      	adds	r3, #8
 800c114:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c118:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c11a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c11e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c120:	e841 2300 	strex	r3, r2, [r1]
 800c124:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1e3      	bne.n	800c0f4 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2220      	movs	r2, #32
 800c130:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c142:	e853 3f00 	ldrex	r3, [r3]
 800c146:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c14a:	f023 0310 	bic.w	r3, r3, #16
 800c14e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c15c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c15e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c160:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c162:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c164:	e841 2300 	strex	r3, r2, [r1]
 800c168:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c16a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1e4      	bne.n	800c13a <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c176:	4618      	mov	r0, r3
 800c178:	f7f7 ff3a 	bl	8003ff0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2202      	movs	r2, #2
 800c180:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c18e:	b29b      	uxth	r3, r3
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	b29b      	uxth	r3, r3
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 f918 	bl	800c3cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c19c:	e0f9      	b.n	800c392 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1a4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	f040 80f2 	bne.w	800c392 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1b6:	2b81      	cmp	r3, #129	@ 0x81
 800c1b8:	f040 80eb 	bne.w	800c392 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f8fe 	bl	800c3cc <HAL_UARTEx_RxEventCallback>
      return;
 800c1d0:	e0df      	b.n	800c392 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f000 80d1 	beq.w	800c396 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800c1f4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 80cc 	beq.w	800c396 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c206:	e853 3f00 	ldrex	r3, [r3]
 800c20a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c20e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	461a      	mov	r2, r3
 800c21c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c220:	647b      	str	r3, [r7, #68]	@ 0x44
 800c222:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c224:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c228:	e841 2300 	strex	r3, r2, [r1]
 800c22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1e4      	bne.n	800c1fe <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3308      	adds	r3, #8
 800c23a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23e:	e853 3f00 	ldrex	r3, [r3]
 800c242:	623b      	str	r3, [r7, #32]
   return(result);
 800c244:	6a3b      	ldr	r3, [r7, #32]
 800c246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c24a:	f023 0301 	bic.w	r3, r3, #1
 800c24e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	3308      	adds	r3, #8
 800c258:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c25c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c25e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c260:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c264:	e841 2300 	strex	r3, r2, [r1]
 800c268:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e1      	bne.n	800c234 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2220      	movs	r2, #32
 800c274:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	60fb      	str	r3, [r7, #12]
   return(result);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f023 0310 	bic.w	r3, r3, #16
 800c298:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c2a6:	61fb      	str	r3, [r7, #28]
 800c2a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2aa:	69b9      	ldr	r1, [r7, #24]
 800c2ac:	69fa      	ldr	r2, [r7, #28]
 800c2ae:	e841 2300 	strex	r3, r2, [r1]
 800c2b2:	617b      	str	r3, [r7, #20]
   return(result);
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1e4      	bne.n	800c284 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2202      	movs	r2, #2
 800c2be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c2c0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f880 	bl	800c3cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2cc:	e063      	b.n	800c396 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c2ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c2d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00e      	beq.n	800c2f8 <HAL_UART_IRQHandler+0x530>
 800c2da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d008      	beq.n	800c2f8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c2ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 fcc3 	bl	800dc7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2f6:	e051      	b.n	800c39c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c2f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c2fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c300:	2b00      	cmp	r3, #0
 800c302:	d014      	beq.n	800c32e <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d105      	bne.n	800c31c <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c314:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d008      	beq.n	800c32e <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c320:	2b00      	cmp	r3, #0
 800c322:	d03a      	beq.n	800c39a <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	4798      	blx	r3
    }
    return;
 800c32c:	e035      	b.n	800c39a <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c32e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c336:	2b00      	cmp	r3, #0
 800c338:	d009      	beq.n	800c34e <HAL_UART_IRQHandler+0x586>
 800c33a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c33e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 ff34 	bl	800d1b4 <UART_EndTransmit_IT>
    return;
 800c34c:	e026      	b.n	800c39c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c34e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c356:	2b00      	cmp	r3, #0
 800c358:	d009      	beq.n	800c36e <HAL_UART_IRQHandler+0x5a6>
 800c35a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c35e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d003      	beq.n	800c36e <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f001 fc9c 	bl	800dca4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c36c:	e016      	b.n	800c39c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c36e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c372:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c376:	2b00      	cmp	r3, #0
 800c378:	d010      	beq.n	800c39c <HAL_UART_IRQHandler+0x5d4>
 800c37a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	da0c      	bge.n	800c39c <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f001 fc84 	bl	800dc90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c388:	e008      	b.n	800c39c <HAL_UART_IRQHandler+0x5d4>
      return;
 800c38a:	bf00      	nop
 800c38c:	e006      	b.n	800c39c <HAL_UART_IRQHandler+0x5d4>
    return;
 800c38e:	bf00      	nop
 800c390:	e004      	b.n	800c39c <HAL_UART_IRQHandler+0x5d4>
      return;
 800c392:	bf00      	nop
 800c394:	e002      	b.n	800c39c <HAL_UART_IRQHandler+0x5d4>
      return;
 800c396:	bf00      	nop
 800c398:	e000      	b.n	800c39c <HAL_UART_IRQHandler+0x5d4>
    return;
 800c39a:	bf00      	nop
  }
}
 800c39c:	37b8      	adds	r7, #184	@ 0xb8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop

0800c3a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3e8:	b094      	sub	sp, #80	@ 0x50
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	4b78      	ldr	r3, [pc, #480]	@ (800c5dc <UART_SetConfig+0x1f8>)
 800c3fa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fe:	689a      	ldr	r2, [r3, #8]
 800c400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	431a      	orrs	r2, r3
 800c406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	431a      	orrs	r2, r3
 800c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40e:	69db      	ldr	r3, [r3, #28]
 800c410:	4313      	orrs	r3, r2
 800c412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4971      	ldr	r1, [pc, #452]	@ (800c5e0 <UART_SetConfig+0x1fc>)
 800c41c:	4019      	ands	r1, r3
 800c41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c424:	430b      	orrs	r3, r1
 800c426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c434:	68d9      	ldr	r1, [r3, #12]
 800c436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	ea40 0301 	orr.w	r3, r0, r1
 800c43e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c442:	699b      	ldr	r3, [r3, #24]
 800c444:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	4b64      	ldr	r3, [pc, #400]	@ (800c5dc <UART_SetConfig+0x1f8>)
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d009      	beq.n	800c464 <UART_SetConfig+0x80>
 800c450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	4b63      	ldr	r3, [pc, #396]	@ (800c5e4 <UART_SetConfig+0x200>)
 800c456:	429a      	cmp	r2, r3
 800c458:	d004      	beq.n	800c464 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45c:	6a1a      	ldr	r2, [r3, #32]
 800c45e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c460:	4313      	orrs	r3, r2
 800c462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c46e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c478:	430b      	orrs	r3, r1
 800c47a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c482:	f023 000f 	bic.w	r0, r3, #15
 800c486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c488:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	ea40 0301 	orr.w	r3, r0, r1
 800c492:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	4b53      	ldr	r3, [pc, #332]	@ (800c5e8 <UART_SetConfig+0x204>)
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d102      	bne.n	800c4a4 <UART_SetConfig+0xc0>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4a2:	e066      	b.n	800c572 <UART_SetConfig+0x18e>
 800c4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	4b50      	ldr	r3, [pc, #320]	@ (800c5ec <UART_SetConfig+0x208>)
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d102      	bne.n	800c4b4 <UART_SetConfig+0xd0>
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4b2:	e05e      	b.n	800c572 <UART_SetConfig+0x18e>
 800c4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	4b4d      	ldr	r3, [pc, #308]	@ (800c5f0 <UART_SetConfig+0x20c>)
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d102      	bne.n	800c4c4 <UART_SetConfig+0xe0>
 800c4be:	2304      	movs	r3, #4
 800c4c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4c2:	e056      	b.n	800c572 <UART_SetConfig+0x18e>
 800c4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	4b4a      	ldr	r3, [pc, #296]	@ (800c5f4 <UART_SetConfig+0x210>)
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d102      	bne.n	800c4d4 <UART_SetConfig+0xf0>
 800c4ce:	2308      	movs	r3, #8
 800c4d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4d2:	e04e      	b.n	800c572 <UART_SetConfig+0x18e>
 800c4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	4b47      	ldr	r3, [pc, #284]	@ (800c5f8 <UART_SetConfig+0x214>)
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d102      	bne.n	800c4e4 <UART_SetConfig+0x100>
 800c4de:	2310      	movs	r3, #16
 800c4e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4e2:	e046      	b.n	800c572 <UART_SetConfig+0x18e>
 800c4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	4b44      	ldr	r3, [pc, #272]	@ (800c5fc <UART_SetConfig+0x218>)
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d102      	bne.n	800c4f4 <UART_SetConfig+0x110>
 800c4ee:	2320      	movs	r3, #32
 800c4f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4f2:	e03e      	b.n	800c572 <UART_SetConfig+0x18e>
 800c4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	4b41      	ldr	r3, [pc, #260]	@ (800c600 <UART_SetConfig+0x21c>)
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d102      	bne.n	800c504 <UART_SetConfig+0x120>
 800c4fe:	2340      	movs	r3, #64	@ 0x40
 800c500:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c502:	e036      	b.n	800c572 <UART_SetConfig+0x18e>
 800c504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	4b3e      	ldr	r3, [pc, #248]	@ (800c604 <UART_SetConfig+0x220>)
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d102      	bne.n	800c514 <UART_SetConfig+0x130>
 800c50e:	2380      	movs	r3, #128	@ 0x80
 800c510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c512:	e02e      	b.n	800c572 <UART_SetConfig+0x18e>
 800c514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	4b3b      	ldr	r3, [pc, #236]	@ (800c608 <UART_SetConfig+0x224>)
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d103      	bne.n	800c526 <UART_SetConfig+0x142>
 800c51e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c522:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c524:	e025      	b.n	800c572 <UART_SetConfig+0x18e>
 800c526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	4b38      	ldr	r3, [pc, #224]	@ (800c60c <UART_SetConfig+0x228>)
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d103      	bne.n	800c538 <UART_SetConfig+0x154>
 800c530:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c534:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c536:	e01c      	b.n	800c572 <UART_SetConfig+0x18e>
 800c538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	4b34      	ldr	r3, [pc, #208]	@ (800c610 <UART_SetConfig+0x22c>)
 800c53e:	429a      	cmp	r2, r3
 800c540:	d103      	bne.n	800c54a <UART_SetConfig+0x166>
 800c542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c546:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c548:	e013      	b.n	800c572 <UART_SetConfig+0x18e>
 800c54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b31      	ldr	r3, [pc, #196]	@ (800c614 <UART_SetConfig+0x230>)
 800c550:	429a      	cmp	r2, r3
 800c552:	d103      	bne.n	800c55c <UART_SetConfig+0x178>
 800c554:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c558:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c55a:	e00a      	b.n	800c572 <UART_SetConfig+0x18e>
 800c55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	4b1e      	ldr	r3, [pc, #120]	@ (800c5dc <UART_SetConfig+0x1f8>)
 800c562:	429a      	cmp	r2, r3
 800c564:	d103      	bne.n	800c56e <UART_SetConfig+0x18a>
 800c566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c56a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c56c:	e001      	b.n	800c572 <UART_SetConfig+0x18e>
 800c56e:	2300      	movs	r3, #0
 800c570:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	4b19      	ldr	r3, [pc, #100]	@ (800c5dc <UART_SetConfig+0x1f8>)
 800c578:	429a      	cmp	r2, r3
 800c57a:	d005      	beq.n	800c588 <UART_SetConfig+0x1a4>
 800c57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	4b18      	ldr	r3, [pc, #96]	@ (800c5e4 <UART_SetConfig+0x200>)
 800c582:	429a      	cmp	r2, r3
 800c584:	f040 8094 	bne.w	800c6b0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c58a:	2200      	movs	r2, #0
 800c58c:	623b      	str	r3, [r7, #32]
 800c58e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c590:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c594:	f7fb ff40 	bl	8008418 <HAL_RCCEx_GetPeriphCLKFreq>
 800c598:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c59a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f000 80f7 	beq.w	800c790 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a6:	4a1c      	ldr	r2, [pc, #112]	@ (800c618 <UART_SetConfig+0x234>)
 800c5a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5b4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b8:	685a      	ldr	r2, [r3, #4]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	4413      	add	r3, r2
 800c5c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d305      	bcc.n	800c5d2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c5cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d924      	bls.n	800c61c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c5d8:	e069      	b.n	800c6ae <UART_SetConfig+0x2ca>
 800c5da:	bf00      	nop
 800c5dc:	44002400 	.word	0x44002400
 800c5e0:	cfff69f3 	.word	0xcfff69f3
 800c5e4:	54002400 	.word	0x54002400
 800c5e8:	40013800 	.word	0x40013800
 800c5ec:	40004400 	.word	0x40004400
 800c5f0:	40004800 	.word	0x40004800
 800c5f4:	40004c00 	.word	0x40004c00
 800c5f8:	40005000 	.word	0x40005000
 800c5fc:	40006400 	.word	0x40006400
 800c600:	40007800 	.word	0x40007800
 800c604:	40007c00 	.word	0x40007c00
 800c608:	40008000 	.word	0x40008000
 800c60c:	40006800 	.word	0x40006800
 800c610:	40006c00 	.word	0x40006c00
 800c614:	40008400 	.word	0x40008400
 800c618:	0801112c 	.word	0x0801112c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c61c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c61e:	2200      	movs	r2, #0
 800c620:	61bb      	str	r3, [r7, #24]
 800c622:	61fa      	str	r2, [r7, #28]
 800c624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c628:	4a64      	ldr	r2, [pc, #400]	@ (800c7bc <UART_SetConfig+0x3d8>)
 800c62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c62e:	b29b      	uxth	r3, r3
 800c630:	2200      	movs	r2, #0
 800c632:	613b      	str	r3, [r7, #16]
 800c634:	617a      	str	r2, [r7, #20]
 800c636:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c63a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c63e:	f7f4 fb13 	bl	8000c68 <__aeabi_uldivmod>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4610      	mov	r0, r2
 800c648:	4619      	mov	r1, r3
 800c64a:	f04f 0200 	mov.w	r2, #0
 800c64e:	f04f 0300 	mov.w	r3, #0
 800c652:	020b      	lsls	r3, r1, #8
 800c654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c658:	0202      	lsls	r2, r0, #8
 800c65a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c65c:	6849      	ldr	r1, [r1, #4]
 800c65e:	0849      	lsrs	r1, r1, #1
 800c660:	2000      	movs	r0, #0
 800c662:	460c      	mov	r4, r1
 800c664:	4605      	mov	r5, r0
 800c666:	eb12 0804 	adds.w	r8, r2, r4
 800c66a:	eb43 0905 	adc.w	r9, r3, r5
 800c66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	60bb      	str	r3, [r7, #8]
 800c676:	60fa      	str	r2, [r7, #12]
 800c678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c67c:	4640      	mov	r0, r8
 800c67e:	4649      	mov	r1, r9
 800c680:	f7f4 faf2 	bl	8000c68 <__aeabi_uldivmod>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	4613      	mov	r3, r2
 800c68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c68c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c68e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c692:	d308      	bcc.n	800c6a6 <UART_SetConfig+0x2c2>
 800c694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c69a:	d204      	bcs.n	800c6a6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800c69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c6a2:	60da      	str	r2, [r3, #12]
 800c6a4:	e003      	b.n	800c6ae <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c6ac:	e070      	b.n	800c790 <UART_SetConfig+0x3ac>
 800c6ae:	e06f      	b.n	800c790 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6b8:	d13c      	bne.n	800c734 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c6ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6bc:	2200      	movs	r2, #0
 800c6be:	603b      	str	r3, [r7, #0]
 800c6c0:	607a      	str	r2, [r7, #4]
 800c6c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6c6:	f7fb fea7 	bl	8008418 <HAL_RCCEx_GetPeriphCLKFreq>
 800c6ca:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d05e      	beq.n	800c790 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d6:	4a39      	ldr	r2, [pc, #228]	@ (800c7bc <UART_SetConfig+0x3d8>)
 800c6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6dc:	461a      	mov	r2, r3
 800c6de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6e4:	005a      	lsls	r2, r3, #1
 800c6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	085b      	lsrs	r3, r3, #1
 800c6ec:	441a      	add	r2, r3
 800c6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6fa:	2b0f      	cmp	r3, #15
 800c6fc:	d916      	bls.n	800c72c <UART_SetConfig+0x348>
 800c6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c704:	d212      	bcs.n	800c72c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c708:	b29b      	uxth	r3, r3
 800c70a:	f023 030f 	bic.w	r3, r3, #15
 800c70e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c712:	085b      	lsrs	r3, r3, #1
 800c714:	b29b      	uxth	r3, r3
 800c716:	f003 0307 	and.w	r3, r3, #7
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c71e:	4313      	orrs	r3, r2
 800c720:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c728:	60da      	str	r2, [r3, #12]
 800c72a:	e031      	b.n	800c790 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c732:	e02d      	b.n	800c790 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c736:	2200      	movs	r2, #0
 800c738:	469a      	mov	sl, r3
 800c73a:	4693      	mov	fp, r2
 800c73c:	4650      	mov	r0, sl
 800c73e:	4659      	mov	r1, fp
 800c740:	f7fb fe6a 	bl	8008418 <HAL_RCCEx_GetPeriphCLKFreq>
 800c744:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d021      	beq.n	800c790 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c750:	4a1a      	ldr	r2, [pc, #104]	@ (800c7bc <UART_SetConfig+0x3d8>)
 800c752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c756:	461a      	mov	r2, r3
 800c758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c75a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	085b      	lsrs	r3, r3, #1
 800c764:	441a      	add	r2, r3
 800c766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c772:	2b0f      	cmp	r3, #15
 800c774:	d909      	bls.n	800c78a <UART_SetConfig+0x3a6>
 800c776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c77c:	d205      	bcs.n	800c78a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c77e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c780:	b29a      	uxth	r2, r3
 800c782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	60da      	str	r2, [r3, #12]
 800c788:	e002      	b.n	800c790 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c792:	2201      	movs	r2, #1
 800c794:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79a:	2201      	movs	r2, #1
 800c79c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c7ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3750      	adds	r7, #80	@ 0x50
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7ba:	bf00      	nop
 800c7bc:	0801112c 	.word	0x0801112c

0800c7c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7cc:	f003 0308 	and.w	r3, r3, #8
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00a      	beq.n	800c7ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7ee:	f003 0301 	and.w	r3, r3, #1
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00a      	beq.n	800c80c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	430a      	orrs	r2, r1
 800c80a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c810:	f003 0302 	and.w	r3, r3, #2
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00a      	beq.n	800c82e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	430a      	orrs	r2, r1
 800c82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c832:	f003 0304 	and.w	r3, r3, #4
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00a      	beq.n	800c850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	430a      	orrs	r2, r1
 800c84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c854:	f003 0310 	and.w	r3, r3, #16
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00a      	beq.n	800c872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	430a      	orrs	r2, r1
 800c870:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c876:	f003 0320 	and.w	r3, r3, #32
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00a      	beq.n	800c894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	430a      	orrs	r2, r1
 800c892:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d01a      	beq.n	800c8d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	430a      	orrs	r2, r1
 800c8b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8be:	d10a      	bne.n	800c8d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	605a      	str	r2, [r3, #4]
  }
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b098      	sub	sp, #96	@ 0x60
 800c908:	af02      	add	r7, sp, #8
 800c90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c914:	f7f7 f9ac 	bl	8003c70 <HAL_GetTick>
 800c918:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0308 	and.w	r3, r3, #8
 800c924:	2b08      	cmp	r3, #8
 800c926:	d12f      	bne.n	800c988 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c928:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c930:	2200      	movs	r2, #0
 800c932:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f88e 	bl	800ca58 <UART_WaitOnFlagUntilTimeout>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d022      	beq.n	800c988 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94a:	e853 3f00 	ldrex	r3, [r3]
 800c94e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c956:	653b      	str	r3, [r7, #80]	@ 0x50
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	461a      	mov	r2, r3
 800c95e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c960:	647b      	str	r3, [r7, #68]	@ 0x44
 800c962:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c964:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c968:	e841 2300 	strex	r3, r2, [r1]
 800c96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1e6      	bne.n	800c942 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2220      	movs	r2, #32
 800c978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c984:	2303      	movs	r3, #3
 800c986:	e063      	b.n	800ca50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f003 0304 	and.w	r3, r3, #4
 800c992:	2b04      	cmp	r3, #4
 800c994:	d149      	bne.n	800ca2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c996:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 f857 	bl	800ca58 <UART_WaitOnFlagUntilTimeout>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d03c      	beq.n	800ca2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	e853 3f00 	ldrex	r3, [r3]
 800c9bc:	623b      	str	r3, [r7, #32]
   return(result);
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9d6:	e841 2300 	strex	r3, r2, [r1]
 800c9da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1e6      	bne.n	800c9b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	e853 3f00 	ldrex	r3, [r3]
 800c9f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f023 0301 	bic.w	r3, r3, #1
 800c9f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	3308      	adds	r3, #8
 800ca00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca02:	61fa      	str	r2, [r7, #28]
 800ca04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca06:	69b9      	ldr	r1, [r7, #24]
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	e841 2300 	strex	r3, r2, [r1]
 800ca0e:	617b      	str	r3, [r7, #20]
   return(result);
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1e5      	bne.n	800c9e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2220      	movs	r2, #32
 800ca1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e012      	b.n	800ca50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2220      	movs	r2, #32
 800ca2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2220      	movs	r2, #32
 800ca36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3758      	adds	r7, #88	@ 0x58
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	4613      	mov	r3, r2
 800ca66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca68:	e04f      	b.n	800cb0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca70:	d04b      	beq.n	800cb0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca72:	f7f7 f8fd 	bl	8003c70 <HAL_GetTick>
 800ca76:	4602      	mov	r2, r0
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	69ba      	ldr	r2, [r7, #24]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d302      	bcc.n	800ca88 <UART_WaitOnFlagUntilTimeout+0x30>
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e04e      	b.n	800cb2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 0304 	and.w	r3, r3, #4
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d037      	beq.n	800cb0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2b80      	cmp	r3, #128	@ 0x80
 800ca9e:	d034      	beq.n	800cb0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2b40      	cmp	r3, #64	@ 0x40
 800caa4:	d031      	beq.n	800cb0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	f003 0308 	and.w	r3, r3, #8
 800cab0:	2b08      	cmp	r3, #8
 800cab2:	d110      	bne.n	800cad6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2208      	movs	r2, #8
 800caba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f000 f95b 	bl	800cd78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2208      	movs	r2, #8
 800cac6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e029      	b.n	800cb2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	69db      	ldr	r3, [r3, #28]
 800cadc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cae4:	d111      	bne.n	800cb0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800caee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f000 f941 	bl	800cd78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2220      	movs	r2, #32
 800cafa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cb06:	2303      	movs	r3, #3
 800cb08:	e00f      	b.n	800cb2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	69da      	ldr	r2, [r3, #28]
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	4013      	ands	r3, r2
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	bf0c      	ite	eq
 800cb1a:	2301      	moveq	r3, #1
 800cb1c:	2300      	movne	r3, #0
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	461a      	mov	r2, r3
 800cb22:	79fb      	ldrb	r3, [r7, #7]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d0a0      	beq.n	800ca6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
	...

0800cb34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b0a3      	sub	sp, #140	@ 0x8c
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	88fa      	ldrh	r2, [r7, #6]
 800cb4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	88fa      	ldrh	r2, [r7, #6]
 800cb54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb66:	d10e      	bne.n	800cb86 <UART_Start_Receive_IT+0x52>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d105      	bne.n	800cb7c <UART_Start_Receive_IT+0x48>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cb76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cb7a:	e02d      	b.n	800cbd8 <UART_Start_Receive_IT+0xa4>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	22ff      	movs	r2, #255	@ 0xff
 800cb80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cb84:	e028      	b.n	800cbd8 <UART_Start_Receive_IT+0xa4>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10d      	bne.n	800cbaa <UART_Start_Receive_IT+0x76>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d104      	bne.n	800cba0 <UART_Start_Receive_IT+0x6c>
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	22ff      	movs	r2, #255	@ 0xff
 800cb9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cb9e:	e01b      	b.n	800cbd8 <UART_Start_Receive_IT+0xa4>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	227f      	movs	r2, #127	@ 0x7f
 800cba4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cba8:	e016      	b.n	800cbd8 <UART_Start_Receive_IT+0xa4>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbb2:	d10d      	bne.n	800cbd0 <UART_Start_Receive_IT+0x9c>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d104      	bne.n	800cbc6 <UART_Start_Receive_IT+0x92>
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	227f      	movs	r2, #127	@ 0x7f
 800cbc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cbc4:	e008      	b.n	800cbd8 <UART_Start_Receive_IT+0xa4>
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	223f      	movs	r2, #63	@ 0x3f
 800cbca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cbce:	e003      	b.n	800cbd8 <UART_Start_Receive_IT+0xa4>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2222      	movs	r2, #34	@ 0x22
 800cbe4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3308      	adds	r3, #8
 800cbee:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbf2:	e853 3f00 	ldrex	r3, [r3]
 800cbf6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cbf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbfa:	f043 0301 	orr.w	r3, r3, #1
 800cbfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	3308      	adds	r3, #8
 800cc08:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cc0c:	673a      	str	r2, [r7, #112]	@ 0x70
 800cc0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cc12:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cc14:	e841 2300 	strex	r3, r2, [r1]
 800cc18:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800cc1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e3      	bne.n	800cbe8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc28:	d14f      	bne.n	800ccca <UART_Start_Receive_IT+0x196>
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cc30:	88fa      	ldrh	r2, [r7, #6]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d349      	bcc.n	800ccca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc3e:	d107      	bne.n	800cc50 <UART_Start_Receive_IT+0x11c>
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d103      	bne.n	800cc50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	4a47      	ldr	r2, [pc, #284]	@ (800cd68 <UART_Start_Receive_IT+0x234>)
 800cc4c:	675a      	str	r2, [r3, #116]	@ 0x74
 800cc4e:	e002      	b.n	800cc56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4a46      	ldr	r2, [pc, #280]	@ (800cd6c <UART_Start_Receive_IT+0x238>)
 800cc54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d01a      	beq.n	800cc94 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc66:	e853 3f00 	ldrex	r3, [r3]
 800cc6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cc6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cc80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc82:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cc86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc88:	e841 2300 	strex	r3, r2, [r1]
 800cc8c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800cc8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1e4      	bne.n	800cc5e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3308      	adds	r3, #8
 800cc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ccaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3308      	adds	r3, #8
 800ccb2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ccb4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ccb6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ccba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccbc:	e841 2300 	strex	r3, r2, [r1]
 800ccc0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ccc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e5      	bne.n	800cc94 <UART_Start_Receive_IT+0x160>
 800ccc8:	e046      	b.n	800cd58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccd2:	d107      	bne.n	800cce4 <UART_Start_Receive_IT+0x1b0>
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d103      	bne.n	800cce4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	4a24      	ldr	r2, [pc, #144]	@ (800cd70 <UART_Start_Receive_IT+0x23c>)
 800cce0:	675a      	str	r2, [r3, #116]	@ 0x74
 800cce2:	e002      	b.n	800ccea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	4a23      	ldr	r2, [pc, #140]	@ (800cd74 <UART_Start_Receive_IT+0x240>)
 800cce8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d019      	beq.n	800cd26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccfa:	e853 3f00 	ldrex	r3, [r3]
 800ccfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd02:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cd06:	677b      	str	r3, [r7, #116]	@ 0x74
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd10:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd12:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd18:	e841 2300 	strex	r3, r2, [r1]
 800cd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d1e6      	bne.n	800ccf2 <UART_Start_Receive_IT+0x1be>
 800cd24:	e018      	b.n	800cd58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	e853 3f00 	ldrex	r3, [r3]
 800cd32:	613b      	str	r3, [r7, #16]
   return(result);
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	f043 0320 	orr.w	r3, r3, #32
 800cd3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	461a      	mov	r2, r3
 800cd42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd44:	623b      	str	r3, [r7, #32]
 800cd46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd48:	69f9      	ldr	r1, [r7, #28]
 800cd4a:	6a3a      	ldr	r2, [r7, #32]
 800cd4c:	e841 2300 	strex	r3, r2, [r1]
 800cd50:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1e6      	bne.n	800cd26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	378c      	adds	r7, #140	@ 0x8c
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	0800d905 	.word	0x0800d905
 800cd6c:	0800d595 	.word	0x0800d595
 800cd70:	0800d3d1 	.word	0x0800d3d1
 800cd74:	0800d20d 	.word	0x0800d20d

0800cd78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b095      	sub	sp, #84	@ 0x54
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd88:	e853 3f00 	ldrex	r3, [r3]
 800cd8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cda0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cda4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cda6:	e841 2300 	strex	r3, r2, [r1]
 800cdaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1e6      	bne.n	800cd80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3308      	adds	r3, #8
 800cdb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	e853 3f00 	ldrex	r3, [r3]
 800cdc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cdc8:	f023 0301 	bic.w	r3, r3, #1
 800cdcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3308      	adds	r3, #8
 800cdd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cdd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cdd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdde:	e841 2300 	strex	r3, r2, [r1]
 800cde2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1e3      	bne.n	800cdb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d118      	bne.n	800ce24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	e853 3f00 	ldrex	r3, [r3]
 800cdfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	f023 0310 	bic.w	r3, r3, #16
 800ce06:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce10:	61bb      	str	r3, [r7, #24]
 800ce12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce14:	6979      	ldr	r1, [r7, #20]
 800ce16:	69ba      	ldr	r2, [r7, #24]
 800ce18:	e841 2300 	strex	r3, r2, [r1]
 800ce1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1e6      	bne.n	800cdf2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2220      	movs	r2, #32
 800ce28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ce38:	bf00      	nop
 800ce3a:	3754      	adds	r7, #84	@ 0x54
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7ff faa8 	bl	800c3b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce68:	bf00      	nop
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b08f      	sub	sp, #60	@ 0x3c
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce7e:	2b21      	cmp	r3, #33	@ 0x21
 800ce80:	d14c      	bne.n	800cf1c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d132      	bne.n	800cef4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	e853 3f00 	ldrex	r3, [r3]
 800ce9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cea2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	461a      	mov	r2, r3
 800ceaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ceae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ceb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceb4:	e841 2300 	strex	r3, r2, [r1]
 800ceb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ceba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1e6      	bne.n	800ce8e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	e853 3f00 	ldrex	r3, [r3]
 800cecc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ced4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	461a      	mov	r2, r3
 800cedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cede:	61bb      	str	r3, [r7, #24]
 800cee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee2:	6979      	ldr	r1, [r7, #20]
 800cee4:	69ba      	ldr	r2, [r7, #24]
 800cee6:	e841 2300 	strex	r3, r2, [r1]
 800ceea:	613b      	str	r3, [r7, #16]
   return(result);
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1e6      	bne.n	800cec0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cef2:	e013      	b.n	800cf1c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cef8:	781a      	ldrb	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	3b01      	subs	r3, #1
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800cf1c:	bf00      	nop
 800cf1e:	373c      	adds	r7, #60	@ 0x3c
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b091      	sub	sp, #68	@ 0x44
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf36:	2b21      	cmp	r3, #33	@ 0x21
 800cf38:	d151      	bne.n	800cfde <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d132      	bne.n	800cfac <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4e:	e853 3f00 	ldrex	r3, [r3]
 800cf52:	623b      	str	r3, [r7, #32]
   return(result);
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	461a      	mov	r2, r3
 800cf62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf64:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf6c:	e841 2300 	strex	r3, r2, [r1]
 800cf70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1e6      	bne.n	800cf46 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	e853 3f00 	ldrex	r3, [r3]
 800cf84:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf96:	61fb      	str	r3, [r7, #28]
 800cf98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9a:	69b9      	ldr	r1, [r7, #24]
 800cf9c:	69fa      	ldr	r2, [r7, #28]
 800cf9e:	e841 2300 	strex	r3, r2, [r1]
 800cfa2:	617b      	str	r3, [r7, #20]
   return(result);
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1e6      	bne.n	800cf78 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cfaa:	e018      	b.n	800cfde <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfc0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfc6:	1c9a      	adds	r2, r3, #2
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800cfde:	bf00      	nop
 800cfe0:	3744      	adds	r7, #68	@ 0x44
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cfea:	b480      	push	{r7}
 800cfec:	b091      	sub	sp, #68	@ 0x44
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cff8:	2b21      	cmp	r3, #33	@ 0x21
 800cffa:	d160      	bne.n	800d0be <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d002:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d004:	e057      	b.n	800d0b6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d133      	bne.n	800d07a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3308      	adds	r3, #8
 800d018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	e853 3f00 	ldrex	r3, [r3]
 800d020:	623b      	str	r3, [r7, #32]
   return(result);
 800d022:	6a3b      	ldr	r3, [r7, #32]
 800d024:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d028:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	3308      	adds	r3, #8
 800d030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d032:	633a      	str	r2, [r7, #48]	@ 0x30
 800d034:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d03a:	e841 2300 	strex	r3, r2, [r1]
 800d03e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1e5      	bne.n	800d012 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	e853 3f00 	ldrex	r3, [r3]
 800d052:	60fb      	str	r3, [r7, #12]
   return(result);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d05a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	461a      	mov	r2, r3
 800d062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d064:	61fb      	str	r3, [r7, #28]
 800d066:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d068:	69b9      	ldr	r1, [r7, #24]
 800d06a:	69fa      	ldr	r2, [r7, #28]
 800d06c:	e841 2300 	strex	r3, r2, [r1]
 800d070:	617b      	str	r3, [r7, #20]
   return(result);
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d1e6      	bne.n	800d046 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d078:	e021      	b.n	800d0be <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	69db      	ldr	r3, [r3, #28]
 800d080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d084:	2b00      	cmp	r3, #0
 800d086:	d013      	beq.n	800d0b0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d08c:	781a      	ldrb	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d0b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d0b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1a4      	bne.n	800d006 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d0bc:	e7ff      	b.n	800d0be <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d0be:	bf00      	nop
 800d0c0:	3744      	adds	r7, #68	@ 0x44
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d0ca:	b480      	push	{r7}
 800d0cc:	b091      	sub	sp, #68	@ 0x44
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0d8:	2b21      	cmp	r3, #33	@ 0x21
 800d0da:	d165      	bne.n	800d1a8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d0e4:	e05c      	b.n	800d1a0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d133      	bne.n	800d15a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3308      	adds	r3, #8
 800d0f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fa:	6a3b      	ldr	r3, [r7, #32]
 800d0fc:	e853 3f00 	ldrex	r3, [r3]
 800d100:	61fb      	str	r3, [r7, #28]
   return(result);
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d108:	637b      	str	r3, [r7, #52]	@ 0x34
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3308      	adds	r3, #8
 800d110:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d112:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d114:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d118:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d11a:	e841 2300 	strex	r3, r2, [r1]
 800d11e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1e5      	bne.n	800d0f2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	e853 3f00 	ldrex	r3, [r3]
 800d132:	60bb      	str	r3, [r7, #8]
   return(result);
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d13a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	461a      	mov	r2, r3
 800d142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d144:	61bb      	str	r3, [r7, #24]
 800d146:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d148:	6979      	ldr	r1, [r7, #20]
 800d14a:	69ba      	ldr	r2, [r7, #24]
 800d14c:	e841 2300 	strex	r3, r2, [r1]
 800d150:	613b      	str	r3, [r7, #16]
   return(result);
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1e6      	bne.n	800d126 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d158:	e026      	b.n	800d1a8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	69db      	ldr	r3, [r3, #28]
 800d160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d164:	2b00      	cmp	r3, #0
 800d166:	d018      	beq.n	800d19a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d16c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d170:	881b      	ldrh	r3, [r3, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d17c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d182:	1c9a      	adds	r2, r3, #2
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d18e:	b29b      	uxth	r3, r3
 800d190:	3b01      	subs	r3, #1
 800d192:	b29a      	uxth	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d19a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d19c:	3b01      	subs	r3, #1
 800d19e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d1a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d19f      	bne.n	800d0e6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d1a6:	e7ff      	b.n	800d1a8 <UART_TxISR_16BIT_FIFOEN+0xde>
 800d1a8:	bf00      	nop
 800d1aa:	3744      	adds	r7, #68	@ 0x44
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b088      	sub	sp, #32
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	e853 3f00 	ldrex	r3, [r3]
 800d1c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1d0:	61fb      	str	r3, [r7, #28]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	61bb      	str	r3, [r7, #24]
 800d1dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1de:	6979      	ldr	r1, [r7, #20]
 800d1e0:	69ba      	ldr	r2, [r7, #24]
 800d1e2:	e841 2300 	strex	r3, r2, [r1]
 800d1e6:	613b      	str	r3, [r7, #16]
   return(result);
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1e6      	bne.n	800d1bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2220      	movs	r2, #32
 800d1f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff f8d1 	bl	800c3a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d202:	bf00      	nop
 800d204:	3720      	adds	r7, #32
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
	...

0800d20c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b09c      	sub	sp, #112	@ 0x70
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d21a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d224:	2b22      	cmp	r3, #34	@ 0x22
 800d226:	f040 80c3 	bne.w	800d3b0 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d230:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d234:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d238:	b2d9      	uxtb	r1, r3
 800d23a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d244:	400a      	ands	r2, r1
 800d246:	b2d2      	uxtb	r2, r2
 800d248:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d24e:	1c5a      	adds	r2, r3, #1
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	3b01      	subs	r3, #1
 800d25e:	b29a      	uxth	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f040 80a6 	bne.w	800d3c0 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d27c:	e853 3f00 	ldrex	r3, [r3]
 800d280:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d288:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	461a      	mov	r2, r3
 800d290:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d292:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d294:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d296:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d298:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d29a:	e841 2300 	strex	r3, r2, [r1]
 800d29e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d2a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1e6      	bne.n	800d274 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	3308      	adds	r3, #8
 800d2ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b0:	e853 3f00 	ldrex	r3, [r3]
 800d2b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b8:	f023 0301 	bic.w	r3, r3, #1
 800d2bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3308      	adds	r3, #8
 800d2c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d2c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800d2c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d2cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2ce:	e841 2300 	strex	r3, r2, [r1]
 800d2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1e5      	bne.n	800d2a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2220      	movs	r2, #32
 800d2de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a35      	ldr	r2, [pc, #212]	@ (800d3c8 <UART_RxISR_8BIT+0x1bc>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d024      	beq.n	800d342 <UART_RxISR_8BIT+0x136>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a33      	ldr	r2, [pc, #204]	@ (800d3cc <UART_RxISR_8BIT+0x1c0>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d01f      	beq.n	800d342 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d018      	beq.n	800d342 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d318:	e853 3f00 	ldrex	r3, [r3]
 800d31c:	623b      	str	r3, [r7, #32]
   return(result);
 800d31e:	6a3b      	ldr	r3, [r7, #32]
 800d320:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d324:	663b      	str	r3, [r7, #96]	@ 0x60
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	461a      	mov	r2, r3
 800d32c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d32e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d330:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d336:	e841 2300 	strex	r3, r2, [r1]
 800d33a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1e6      	bne.n	800d310 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d346:	2b01      	cmp	r3, #1
 800d348:	d12e      	bne.n	800d3a8 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	e853 3f00 	ldrex	r3, [r3]
 800d35c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f023 0310 	bic.w	r3, r3, #16
 800d364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d36e:	61fb      	str	r3, [r7, #28]
 800d370:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d372:	69b9      	ldr	r1, [r7, #24]
 800d374:	69fa      	ldr	r2, [r7, #28]
 800d376:	e841 2300 	strex	r3, r2, [r1]
 800d37a:	617b      	str	r3, [r7, #20]
   return(result);
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1e6      	bne.n	800d350 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	69db      	ldr	r3, [r3, #28]
 800d388:	f003 0310 	and.w	r3, r3, #16
 800d38c:	2b10      	cmp	r3, #16
 800d38e:	d103      	bne.n	800d398 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2210      	movs	r2, #16
 800d396:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff f813 	bl	800c3cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3a6:	e00b      	b.n	800d3c0 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7f5 fcc9 	bl	8002d40 <HAL_UART_RxCpltCallback>
}
 800d3ae:	e007      	b.n	800d3c0 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	699a      	ldr	r2, [r3, #24]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f042 0208 	orr.w	r2, r2, #8
 800d3be:	619a      	str	r2, [r3, #24]
}
 800d3c0:	bf00      	nop
 800d3c2:	3770      	adds	r7, #112	@ 0x70
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	44002400 	.word	0x44002400
 800d3cc:	54002400 	.word	0x54002400

0800d3d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b09c      	sub	sp, #112	@ 0x70
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d3de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3e8:	2b22      	cmp	r3, #34	@ 0x22
 800d3ea:	f040 80c3 	bne.w	800d574 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d3fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d402:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d406:	4013      	ands	r3, r2
 800d408:	b29a      	uxth	r2, r3
 800d40a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d40c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d412:	1c9a      	adds	r2, r3, #2
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d41e:	b29b      	uxth	r3, r3
 800d420:	3b01      	subs	r3, #1
 800d422:	b29a      	uxth	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d430:	b29b      	uxth	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	f040 80a6 	bne.w	800d584 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d440:	e853 3f00 	ldrex	r3, [r3]
 800d444:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d44c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	461a      	mov	r2, r3
 800d454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d456:	657b      	str	r3, [r7, #84]	@ 0x54
 800d458:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d45c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d45e:	e841 2300 	strex	r3, r2, [r1]
 800d462:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1e6      	bne.n	800d438 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	3308      	adds	r3, #8
 800d470:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d474:	e853 3f00 	ldrex	r3, [r3]
 800d478:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47c:	f023 0301 	bic.w	r3, r3, #1
 800d480:	663b      	str	r3, [r7, #96]	@ 0x60
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3308      	adds	r3, #8
 800d488:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d48a:	643a      	str	r2, [r7, #64]	@ 0x40
 800d48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d490:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d492:	e841 2300 	strex	r3, r2, [r1]
 800d496:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d1e5      	bne.n	800d46a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2220      	movs	r2, #32
 800d4a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a35      	ldr	r2, [pc, #212]	@ (800d58c <UART_RxISR_16BIT+0x1bc>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d024      	beq.n	800d506 <UART_RxISR_16BIT+0x136>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a33      	ldr	r2, [pc, #204]	@ (800d590 <UART_RxISR_16BIT+0x1c0>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d01f      	beq.n	800d506 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d018      	beq.n	800d506 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4da:	6a3b      	ldr	r3, [r7, #32]
 800d4dc:	e853 3f00 	ldrex	r3, [r3]
 800d4e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d4e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4f4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4fa:	e841 2300 	strex	r3, r2, [r1]
 800d4fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1e6      	bne.n	800d4d4 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d12e      	bne.n	800d56c <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	e853 3f00 	ldrex	r3, [r3]
 800d520:	60bb      	str	r3, [r7, #8]
   return(result);
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	f023 0310 	bic.w	r3, r3, #16
 800d528:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	461a      	mov	r2, r3
 800d530:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d532:	61bb      	str	r3, [r7, #24]
 800d534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d536:	6979      	ldr	r1, [r7, #20]
 800d538:	69ba      	ldr	r2, [r7, #24]
 800d53a:	e841 2300 	strex	r3, r2, [r1]
 800d53e:	613b      	str	r3, [r7, #16]
   return(result);
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1e6      	bne.n	800d514 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	69db      	ldr	r3, [r3, #28]
 800d54c:	f003 0310 	and.w	r3, r3, #16
 800d550:	2b10      	cmp	r3, #16
 800d552:	d103      	bne.n	800d55c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2210      	movs	r2, #16
 800d55a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7fe ff31 	bl	800c3cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d56a:	e00b      	b.n	800d584 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7f5 fbe7 	bl	8002d40 <HAL_UART_RxCpltCallback>
}
 800d572:	e007      	b.n	800d584 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	699a      	ldr	r2, [r3, #24]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f042 0208 	orr.w	r2, r2, #8
 800d582:	619a      	str	r2, [r3, #24]
}
 800d584:	bf00      	nop
 800d586:	3770      	adds	r7, #112	@ 0x70
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	44002400 	.word	0x44002400
 800d590:	54002400 	.word	0x54002400

0800d594 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b0ac      	sub	sp, #176	@ 0xb0
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d5a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	69db      	ldr	r3, [r3, #28]
 800d5ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5ca:	2b22      	cmp	r3, #34	@ 0x22
 800d5cc:	f040 8188 	bne.w	800d8e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d5d6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5da:	e12b      	b.n	800d834 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5e2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d5ea:	b2d9      	uxtb	r1, r3
 800d5ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5f6:	400a      	ands	r2, r1
 800d5f8:	b2d2      	uxtb	r2, r2
 800d5fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d600:	1c5a      	adds	r2, r3, #1
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	3b01      	subs	r3, #1
 800d610:	b29a      	uxth	r2, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	69db      	ldr	r3, [r3, #28]
 800d61e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d626:	f003 0307 	and.w	r3, r3, #7
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d053      	beq.n	800d6d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d62e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	2b00      	cmp	r3, #0
 800d638:	d011      	beq.n	800d65e <UART_RxISR_8BIT_FIFOEN+0xca>
 800d63a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d63e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00b      	beq.n	800d65e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2201      	movs	r2, #1
 800d64c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d654:	f043 0201 	orr.w	r2, r3, #1
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d662:	f003 0302 	and.w	r3, r3, #2
 800d666:	2b00      	cmp	r3, #0
 800d668:	d011      	beq.n	800d68e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d66a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00b      	beq.n	800d68e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2202      	movs	r2, #2
 800d67c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d684:	f043 0204 	orr.w	r2, r3, #4
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d68e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d692:	f003 0304 	and.w	r3, r3, #4
 800d696:	2b00      	cmp	r3, #0
 800d698:	d011      	beq.n	800d6be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d69a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d69e:	f003 0301 	and.w	r3, r3, #1
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00b      	beq.n	800d6be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2204      	movs	r2, #4
 800d6ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6b4:	f043 0202 	orr.w	r2, r3, #2
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d006      	beq.n	800d6d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7fe fe75 	bl	800c3b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f040 80a8 	bne.w	800d834 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6ec:	e853 3f00 	ldrex	r3, [r3]
 800d6f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d6f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	461a      	mov	r2, r3
 800d702:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d706:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d708:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d70c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d70e:	e841 2300 	strex	r3, r2, [r1]
 800d712:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d714:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1e4      	bne.n	800d6e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	3308      	adds	r3, #8
 800d720:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d724:	e853 3f00 	ldrex	r3, [r3]
 800d728:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d72a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d72c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d730:	f023 0301 	bic.w	r3, r3, #1
 800d734:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	3308      	adds	r3, #8
 800d73e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d742:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d744:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d746:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d748:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d74a:	e841 2300 	strex	r3, r2, [r1]
 800d74e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e1      	bne.n	800d71a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2220      	movs	r2, #32
 800d75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a62      	ldr	r2, [pc, #392]	@ (800d8f8 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d026      	beq.n	800d7c2 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a60      	ldr	r2, [pc, #384]	@ (800d8fc <UART_RxISR_8BIT_FIFOEN+0x368>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d021      	beq.n	800d7c2 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d01a      	beq.n	800d7c2 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d794:	e853 3f00 	ldrex	r3, [r3]
 800d798:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d79c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d7a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d7ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800d7b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d7b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d7bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1e4      	bne.n	800d78c <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d130      	bne.n	800d82c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d8:	e853 3f00 	ldrex	r3, [r3]
 800d7dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e0:	f023 0310 	bic.w	r3, r3, #16
 800d7e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7fa:	e841 2300 	strex	r3, r2, [r1]
 800d7fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1e4      	bne.n	800d7d0 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	69db      	ldr	r3, [r3, #28]
 800d80c:	f003 0310 	and.w	r3, r3, #16
 800d810:	2b10      	cmp	r3, #16
 800d812:	d103      	bne.n	800d81c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2210      	movs	r2, #16
 800d81a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d822:	4619      	mov	r1, r3
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7fe fdd1 	bl	800c3cc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800d82a:	e00e      	b.n	800d84a <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7f5 fa87 	bl	8002d40 <HAL_UART_RxCpltCallback>
        break;
 800d832:	e00a      	b.n	800d84a <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d834:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d006      	beq.n	800d84a <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800d83c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d840:	f003 0320 	and.w	r3, r3, #32
 800d844:	2b00      	cmp	r3, #0
 800d846:	f47f aec9 	bne.w	800d5dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d850:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d854:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d049      	beq.n	800d8f0 <UART_RxISR_8BIT_FIFOEN+0x35c>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d862:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d866:	429a      	cmp	r2, r3
 800d868:	d242      	bcs.n	800d8f0 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	3308      	adds	r3, #8
 800d870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d872:	6a3b      	ldr	r3, [r7, #32]
 800d874:	e853 3f00 	ldrex	r3, [r3]
 800d878:	61fb      	str	r3, [r7, #28]
   return(result);
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3308      	adds	r3, #8
 800d88a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d88e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d890:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d896:	e841 2300 	strex	r3, r2, [r1]
 800d89a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1e3      	bne.n	800d86a <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a16      	ldr	r2, [pc, #88]	@ (800d900 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800d8a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	e853 3f00 	ldrex	r3, [r3]
 800d8b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	f043 0320 	orr.w	r3, r3, #32
 800d8bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d8ca:	61bb      	str	r3, [r7, #24]
 800d8cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ce:	6979      	ldr	r1, [r7, #20]
 800d8d0:	69ba      	ldr	r2, [r7, #24]
 800d8d2:	e841 2300 	strex	r3, r2, [r1]
 800d8d6:	613b      	str	r3, [r7, #16]
   return(result);
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1e4      	bne.n	800d8a8 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d8de:	e007      	b.n	800d8f0 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	699a      	ldr	r2, [r3, #24]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f042 0208 	orr.w	r2, r2, #8
 800d8ee:	619a      	str	r2, [r3, #24]
}
 800d8f0:	bf00      	nop
 800d8f2:	37b0      	adds	r7, #176	@ 0xb0
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	44002400 	.word	0x44002400
 800d8fc:	54002400 	.word	0x54002400
 800d900:	0800d20d 	.word	0x0800d20d

0800d904 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b0ae      	sub	sp, #184	@ 0xb8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d912:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	69db      	ldr	r3, [r3, #28]
 800d91c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d93a:	2b22      	cmp	r3, #34	@ 0x22
 800d93c:	f040 818c 	bne.w	800dc58 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d946:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d94a:	e12f      	b.n	800dbac <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d952:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d95a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d95e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d962:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d966:	4013      	ands	r3, r2
 800d968:	b29a      	uxth	r2, r3
 800d96a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d96e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d974:	1c9a      	adds	r2, r3, #2
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d980:	b29b      	uxth	r3, r3
 800d982:	3b01      	subs	r3, #1
 800d984:	b29a      	uxth	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	69db      	ldr	r3, [r3, #28]
 800d992:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d99a:	f003 0307 	and.w	r3, r3, #7
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d053      	beq.n	800da4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d9a6:	f003 0301 	and.w	r3, r3, #1
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d011      	beq.n	800d9d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d9ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00b      	beq.n	800d9d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9c8:	f043 0201 	orr.w	r2, r3, #1
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d9d6:	f003 0302 	and.w	r3, r3, #2
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d011      	beq.n	800da02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d9de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9e2:	f003 0301 	and.w	r3, r3, #1
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00b      	beq.n	800da02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2202      	movs	r2, #2
 800d9f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9f8:	f043 0204 	orr.w	r2, r3, #4
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800da06:	f003 0304 	and.w	r3, r3, #4
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d011      	beq.n	800da32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800da0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00b      	beq.n	800da32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2204      	movs	r2, #4
 800da20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da28:	f043 0202 	orr.w	r2, r3, #2
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d006      	beq.n	800da4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f7fe fcbb 	bl	800c3b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da50:	b29b      	uxth	r3, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	f040 80aa 	bne.w	800dbac <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800da66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800da7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800da82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800da86:	e841 2300 	strex	r3, r2, [r1]
 800da8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800da8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1e2      	bne.n	800da58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	3308      	adds	r3, #8
 800da98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da9c:	e853 3f00 	ldrex	r3, [r3]
 800daa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800daa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800daa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800daa8:	f023 0301 	bic.w	r3, r3, #1
 800daac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	3308      	adds	r3, #8
 800dab6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800daba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dabc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dabe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dac0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dac2:	e841 2300 	strex	r3, r2, [r1]
 800dac6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1e1      	bne.n	800da92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2220      	movs	r2, #32
 800dad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a62      	ldr	r2, [pc, #392]	@ (800dc70 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d026      	beq.n	800db3a <UART_RxISR_16BIT_FIFOEN+0x236>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a60      	ldr	r2, [pc, #384]	@ (800dc74 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d021      	beq.n	800db3a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db00:	2b00      	cmp	r3, #0
 800db02:	d01a      	beq.n	800db3a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db0c:	e853 3f00 	ldrex	r3, [r3]
 800db10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800db12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	461a      	mov	r2, r3
 800db22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800db26:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db2e:	e841 2300 	strex	r3, r2, [r1]
 800db32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800db34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1e4      	bne.n	800db04 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d130      	bne.n	800dba4 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db50:	e853 3f00 	ldrex	r3, [r3]
 800db54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db58:	f023 0310 	bic.w	r3, r3, #16
 800db5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	461a      	mov	r2, r3
 800db66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800db6a:	647b      	str	r3, [r7, #68]	@ 0x44
 800db6c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db72:	e841 2300 	strex	r3, r2, [r1]
 800db76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d1e4      	bne.n	800db48 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	69db      	ldr	r3, [r3, #28]
 800db84:	f003 0310 	and.w	r3, r3, #16
 800db88:	2b10      	cmp	r3, #16
 800db8a:	d103      	bne.n	800db94 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2210      	movs	r2, #16
 800db92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7fe fc15 	bl	800c3cc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800dba2:	e00e      	b.n	800dbc2 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7f5 f8cb 	bl	8002d40 <HAL_UART_RxCpltCallback>
        break;
 800dbaa:	e00a      	b.n	800dbc2 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dbac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d006      	beq.n	800dbc2 <UART_RxISR_16BIT_FIFOEN+0x2be>
 800dbb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dbb8:	f003 0320 	and.w	r3, r3, #32
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f47f aec5 	bne.w	800d94c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dbc8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dbcc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d049      	beq.n	800dc68 <UART_RxISR_16BIT_FIFOEN+0x364>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dbda:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d242      	bcs.n	800dc68 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbec:	e853 3f00 	ldrex	r3, [r3]
 800dbf0:	623b      	str	r3, [r7, #32]
   return(result);
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dbf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3308      	adds	r3, #8
 800dc02:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dc06:	633a      	str	r2, [r7, #48]	@ 0x30
 800dc08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc0e:	e841 2300 	strex	r3, r2, [r1]
 800dc12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1e3      	bne.n	800dbe2 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a16      	ldr	r2, [pc, #88]	@ (800dc78 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800dc1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	e853 3f00 	ldrex	r3, [r3]
 800dc2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f043 0320 	orr.w	r3, r3, #32
 800dc34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dc42:	61fb      	str	r3, [r7, #28]
 800dc44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc46:	69b9      	ldr	r1, [r7, #24]
 800dc48:	69fa      	ldr	r2, [r7, #28]
 800dc4a:	e841 2300 	strex	r3, r2, [r1]
 800dc4e:	617b      	str	r3, [r7, #20]
   return(result);
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d1e4      	bne.n	800dc20 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc56:	e007      	b.n	800dc68 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	699a      	ldr	r2, [r3, #24]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f042 0208 	orr.w	r2, r2, #8
 800dc66:	619a      	str	r2, [r3, #24]
}
 800dc68:	bf00      	nop
 800dc6a:	37b8      	adds	r7, #184	@ 0xb8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	44002400 	.word	0x44002400
 800dc74:	54002400 	.word	0x54002400
 800dc78:	0800d3d1 	.word	0x0800d3d1

0800dc7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc98:	bf00      	nop
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dcac:	bf00      	nop
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d101      	bne.n	800dcce <HAL_UARTEx_DisableFifoMode+0x16>
 800dcca:	2302      	movs	r3, #2
 800dccc:	e027      	b.n	800dd1e <HAL_UARTEx_DisableFifoMode+0x66>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2224      	movs	r2, #36	@ 0x24
 800dcda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f022 0201 	bic.w	r2, r2, #1
 800dcf4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dcfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2220      	movs	r2, #32
 800dd10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr

0800dd2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d101      	bne.n	800dd42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd3e:	2302      	movs	r3, #2
 800dd40:	e02d      	b.n	800dd9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2201      	movs	r2, #1
 800dd46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2224      	movs	r2, #36	@ 0x24
 800dd4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f022 0201 	bic.w	r2, r2, #1
 800dd68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	430a      	orrs	r2, r1
 800dd7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f850 	bl	800de24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd9c:	2300      	movs	r3, #0
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d101      	bne.n	800ddbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddba:	2302      	movs	r3, #2
 800ddbc:	e02d      	b.n	800de1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2224      	movs	r2, #36	@ 0x24
 800ddca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f022 0201 	bic.w	r2, r2, #1
 800dde4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	430a      	orrs	r2, r1
 800ddf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 f812 	bl	800de24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2220      	movs	r2, #32
 800de0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
	...

0800de24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de30:	2b00      	cmp	r3, #0
 800de32:	d108      	bne.n	800de46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de44:	e031      	b.n	800deaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de46:	2308      	movs	r3, #8
 800de48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de4a:	2308      	movs	r3, #8
 800de4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	0e5b      	lsrs	r3, r3, #25
 800de56:	b2db      	uxtb	r3, r3
 800de58:	f003 0307 	and.w	r3, r3, #7
 800de5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	0f5b      	lsrs	r3, r3, #29
 800de66:	b2db      	uxtb	r3, r3
 800de68:	f003 0307 	and.w	r3, r3, #7
 800de6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de6e:	7bbb      	ldrb	r3, [r7, #14]
 800de70:	7b3a      	ldrb	r2, [r7, #12]
 800de72:	4911      	ldr	r1, [pc, #68]	@ (800deb8 <UARTEx_SetNbDataToProcess+0x94>)
 800de74:	5c8a      	ldrb	r2, [r1, r2]
 800de76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de7a:	7b3a      	ldrb	r2, [r7, #12]
 800de7c:	490f      	ldr	r1, [pc, #60]	@ (800debc <UARTEx_SetNbDataToProcess+0x98>)
 800de7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de80:	fb93 f3f2 	sdiv	r3, r3, r2
 800de84:	b29a      	uxth	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	7b7a      	ldrb	r2, [r7, #13]
 800de90:	4909      	ldr	r1, [pc, #36]	@ (800deb8 <UARTEx_SetNbDataToProcess+0x94>)
 800de92:	5c8a      	ldrb	r2, [r1, r2]
 800de94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de98:	7b7a      	ldrb	r2, [r7, #13]
 800de9a:	4908      	ldr	r1, [pc, #32]	@ (800debc <UARTEx_SetNbDataToProcess+0x98>)
 800de9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800deaa:	bf00      	nop
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	08011144 	.word	0x08011144
 800debc:	0801114c 	.word	0x0801114c

0800dec0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b087      	sub	sp, #28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ded4:	683a      	ldr	r2, [r7, #0]
 800ded6:	6812      	ldr	r2, [r2, #0]
 800ded8:	f023 0101 	bic.w	r1, r3, #1
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	2b08      	cmp	r3, #8
 800dee8:	d102      	bne.n	800def0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800deea:	2340      	movs	r3, #64	@ 0x40
 800deec:	617b      	str	r3, [r7, #20]
 800deee:	e001      	b.n	800def4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800def0:	2300      	movs	r3, #0
 800def2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800df00:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800df06:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800df0c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800df12:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800df18:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800df1e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800df24:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800df2a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800df30:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800df36:	4313      	orrs	r3, r2
 800df38:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	4313      	orrs	r3, r2
 800df42:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	4313      	orrs	r3, r2
 800df56:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df5c:	693a      	ldr	r2, [r7, #16]
 800df5e:	4313      	orrs	r3, r2
 800df60:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800df62:	4b3d      	ldr	r3, [pc, #244]	@ (800e058 <FMC_NORSRAM_Init+0x198>)
 800df64:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df6c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800df74:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800df7c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800df84:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	43db      	mvns	r3, r3
 800df94:	ea02 0103 	and.w	r1, r2, r3
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	4319      	orrs	r1, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfae:	d10c      	bne.n	800dfca <FMC_NORSRAM_Init+0x10a>
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d008      	beq.n	800dfca <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d006      	beq.n	800dfe0 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfda:	431a      	orrs	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d12f      	bne.n	800e04a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a1b      	ldr	r3, [r3, #32]
 800dfee:	0c1b      	lsrs	r3, r3, #16
 800dff0:	041b      	lsls	r3, r3, #16
 800dff2:	683a      	ldr	r2, [r7, #0]
 800dff4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800dff6:	431a      	orrs	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b04      	cmp	r3, #4
 800e002:	d014      	beq.n	800e02e <FMC_NORSRAM_Init+0x16e>
 800e004:	2b04      	cmp	r3, #4
 800e006:	d819      	bhi.n	800e03c <FMC_NORSRAM_Init+0x17c>
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <FMC_NORSRAM_Init+0x152>
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d007      	beq.n	800e020 <FMC_NORSRAM_Init+0x160>
 800e010:	e014      	b.n	800e03c <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a1b      	ldr	r3, [r3, #32]
 800e016:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	621a      	str	r2, [r3, #32]
        break;
 800e01e:	e014      	b.n	800e04a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6a1b      	ldr	r3, [r3, #32]
 800e024:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	621a      	str	r2, [r3, #32]
        break;
 800e02c:	e00d      	b.n	800e04a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6a1b      	ldr	r3, [r3, #32]
 800e032:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	621a      	str	r2, [r3, #32]
        break;
 800e03a:	e006      	b.n	800e04a <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6a1b      	ldr	r3, [r3, #32]
 800e040:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	621a      	str	r2, [r3, #32]
        break;
 800e048:	bf00      	nop
    }
  }

  return HAL_OK;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	371c      	adds	r7, #28
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr
 800e058:	0008fb7f 	.word	0x0008fb7f

0800e05c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b087      	sub	sp, #28
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800e072:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800e07a:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800e082:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	691b      	ldr	r3, [r3, #16]
 800e088:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800e08a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	695b      	ldr	r3, [r3, #20]
 800e090:	3b01      	subs	r3, #1
 800e092:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800e094:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	699b      	ldr	r3, [r3, #24]
 800e09a:	3b02      	subs	r3, #2
 800e09c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800e09e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800e0aa:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e0ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0be:	d113      	bne.n	800e0e8 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e0c8:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	695b      	ldr	r3, [r3, #20]
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	051b      	lsls	r3, r3, #20
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	431a      	orrs	r2, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	371c      	adds	r7, #28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800e0f6:	b480      	push	{r7}
 800e0f8:	b085      	sub	sp, #20
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	60f8      	str	r0, [r7, #12]
 800e0fe:	60b9      	str	r1, [r7, #8]
 800e100:	607a      	str	r2, [r7, #4]
 800e102:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e10a:	d121      	bne.n	800e150 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e114:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	6819      	ldr	r1, [r3, #0]
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	011b      	lsls	r3, r3, #4
 800e122:	4319      	orrs	r1, r3
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	021b      	lsls	r3, r3, #8
 800e12a:	4319      	orrs	r1, r3
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	079b      	lsls	r3, r3, #30
 800e132:	4319      	orrs	r1, r3
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	69db      	ldr	r3, [r3, #28]
 800e138:	4319      	orrs	r1, r3
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	691b      	ldr	r3, [r3, #16]
 800e13e:	041b      	lsls	r3, r3, #16
 800e140:	430b      	orrs	r3, r1
 800e142:	ea42 0103 	orr.w	r1, r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e14e:	e005      	b.n	800e15c <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3714      	adds	r7, #20
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
	...

0800e16c <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	4b10      	ldr	r3, [pc, #64]	@ (800e1bc <FMC_NAND_Init+0x50>)
 800e17c:	4013      	ands	r3, r2
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	6851      	ldr	r1, [r2, #4]
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	6892      	ldr	r2, [r2, #8]
 800e186:	4311      	orrs	r1, r2
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	68d2      	ldr	r2, [r2, #12]
 800e18c:	4311      	orrs	r1, r2
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	6912      	ldr	r2, [r2, #16]
 800e192:	4311      	orrs	r1, r2
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	6952      	ldr	r2, [r2, #20]
 800e198:	0252      	lsls	r2, r2, #9
 800e19a:	4311      	orrs	r1, r2
 800e19c:	683a      	ldr	r2, [r7, #0]
 800e19e:	6992      	ldr	r2, [r2, #24]
 800e1a0:	0352      	lsls	r2, r2, #13
 800e1a2:	430a      	orrs	r2, r1
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	f043 0208 	orr.w	r2, r3, #8
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr
 800e1bc:	fff00181 	.word	0xfff00181

0800e1c0 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b085      	sub	sp, #20
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 800e1d6:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800e1de:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800e1e6:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3714      	adds	r7, #20
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800e1fa:	b480      	push	{r7}
 800e1fc:	b085      	sub	sp, #20
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	60f8      	str	r0, [r7, #12]
 800e202:	60b9      	str	r1, [r7, #8]
 800e204:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 800e210:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 800e218:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800e220:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <__cvt>:
 800e234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e238:	ec57 6b10 	vmov	r6, r7, d0
 800e23c:	2f00      	cmp	r7, #0
 800e23e:	460c      	mov	r4, r1
 800e240:	4619      	mov	r1, r3
 800e242:	463b      	mov	r3, r7
 800e244:	bfb4      	ite	lt
 800e246:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e24a:	2300      	movge	r3, #0
 800e24c:	4691      	mov	r9, r2
 800e24e:	bfbf      	itttt	lt
 800e250:	4632      	movlt	r2, r6
 800e252:	461f      	movlt	r7, r3
 800e254:	232d      	movlt	r3, #45	@ 0x2d
 800e256:	4616      	movlt	r6, r2
 800e258:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e25c:	700b      	strb	r3, [r1, #0]
 800e25e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e260:	f023 0820 	bic.w	r8, r3, #32
 800e264:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e268:	d005      	beq.n	800e276 <__cvt+0x42>
 800e26a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e26e:	d100      	bne.n	800e272 <__cvt+0x3e>
 800e270:	3401      	adds	r4, #1
 800e272:	2102      	movs	r1, #2
 800e274:	e000      	b.n	800e278 <__cvt+0x44>
 800e276:	2103      	movs	r1, #3
 800e278:	ab03      	add	r3, sp, #12
 800e27a:	4622      	mov	r2, r4
 800e27c:	9301      	str	r3, [sp, #4]
 800e27e:	ab02      	add	r3, sp, #8
 800e280:	ec47 6b10 	vmov	d0, r6, r7
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	4653      	mov	r3, sl
 800e288:	f000 fe6e 	bl	800ef68 <_dtoa_r>
 800e28c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e290:	4605      	mov	r5, r0
 800e292:	d119      	bne.n	800e2c8 <__cvt+0x94>
 800e294:	f019 0f01 	tst.w	r9, #1
 800e298:	d00e      	beq.n	800e2b8 <__cvt+0x84>
 800e29a:	eb00 0904 	add.w	r9, r0, r4
 800e29e:	2200      	movs	r2, #0
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	4639      	mov	r1, r7
 800e2a6:	f7f2 fc1f 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2aa:	b108      	cbz	r0, 800e2b0 <__cvt+0x7c>
 800e2ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800e2b0:	2230      	movs	r2, #48	@ 0x30
 800e2b2:	9b03      	ldr	r3, [sp, #12]
 800e2b4:	454b      	cmp	r3, r9
 800e2b6:	d31e      	bcc.n	800e2f6 <__cvt+0xc2>
 800e2b8:	9b03      	ldr	r3, [sp, #12]
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2be:	1b5b      	subs	r3, r3, r5
 800e2c0:	6013      	str	r3, [r2, #0]
 800e2c2:	b004      	add	sp, #16
 800e2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e2cc:	eb00 0904 	add.w	r9, r0, r4
 800e2d0:	d1e5      	bne.n	800e29e <__cvt+0x6a>
 800e2d2:	7803      	ldrb	r3, [r0, #0]
 800e2d4:	2b30      	cmp	r3, #48	@ 0x30
 800e2d6:	d10a      	bne.n	800e2ee <__cvt+0xba>
 800e2d8:	2200      	movs	r2, #0
 800e2da:	2300      	movs	r3, #0
 800e2dc:	4630      	mov	r0, r6
 800e2de:	4639      	mov	r1, r7
 800e2e0:	f7f2 fc02 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2e4:	b918      	cbnz	r0, 800e2ee <__cvt+0xba>
 800e2e6:	f1c4 0401 	rsb	r4, r4, #1
 800e2ea:	f8ca 4000 	str.w	r4, [sl]
 800e2ee:	f8da 3000 	ldr.w	r3, [sl]
 800e2f2:	4499      	add	r9, r3
 800e2f4:	e7d3      	b.n	800e29e <__cvt+0x6a>
 800e2f6:	1c59      	adds	r1, r3, #1
 800e2f8:	9103      	str	r1, [sp, #12]
 800e2fa:	701a      	strb	r2, [r3, #0]
 800e2fc:	e7d9      	b.n	800e2b2 <__cvt+0x7e>

0800e2fe <__exponent>:
 800e2fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e300:	2900      	cmp	r1, #0
 800e302:	7002      	strb	r2, [r0, #0]
 800e304:	bfba      	itte	lt
 800e306:	4249      	neglt	r1, r1
 800e308:	232d      	movlt	r3, #45	@ 0x2d
 800e30a:	232b      	movge	r3, #43	@ 0x2b
 800e30c:	2909      	cmp	r1, #9
 800e30e:	7043      	strb	r3, [r0, #1]
 800e310:	dd28      	ble.n	800e364 <__exponent+0x66>
 800e312:	f10d 0307 	add.w	r3, sp, #7
 800e316:	270a      	movs	r7, #10
 800e318:	461d      	mov	r5, r3
 800e31a:	461a      	mov	r2, r3
 800e31c:	3b01      	subs	r3, #1
 800e31e:	fbb1 f6f7 	udiv	r6, r1, r7
 800e322:	fb07 1416 	mls	r4, r7, r6, r1
 800e326:	3430      	adds	r4, #48	@ 0x30
 800e328:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e32c:	460c      	mov	r4, r1
 800e32e:	4631      	mov	r1, r6
 800e330:	2c63      	cmp	r4, #99	@ 0x63
 800e332:	dcf2      	bgt.n	800e31a <__exponent+0x1c>
 800e334:	3130      	adds	r1, #48	@ 0x30
 800e336:	1e94      	subs	r4, r2, #2
 800e338:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e33c:	1c41      	adds	r1, r0, #1
 800e33e:	4623      	mov	r3, r4
 800e340:	42ab      	cmp	r3, r5
 800e342:	d30a      	bcc.n	800e35a <__exponent+0x5c>
 800e344:	f10d 0309 	add.w	r3, sp, #9
 800e348:	1a9b      	subs	r3, r3, r2
 800e34a:	42ac      	cmp	r4, r5
 800e34c:	bf88      	it	hi
 800e34e:	2300      	movhi	r3, #0
 800e350:	3302      	adds	r3, #2
 800e352:	4403      	add	r3, r0
 800e354:	1a18      	subs	r0, r3, r0
 800e356:	b003      	add	sp, #12
 800e358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e35a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e35e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e362:	e7ed      	b.n	800e340 <__exponent+0x42>
 800e364:	2330      	movs	r3, #48	@ 0x30
 800e366:	3130      	adds	r1, #48	@ 0x30
 800e368:	7083      	strb	r3, [r0, #2]
 800e36a:	1d03      	adds	r3, r0, #4
 800e36c:	70c1      	strb	r1, [r0, #3]
 800e36e:	e7f1      	b.n	800e354 <__exponent+0x56>

0800e370 <_printf_float>:
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	b08d      	sub	sp, #52	@ 0x34
 800e376:	460c      	mov	r4, r1
 800e378:	4616      	mov	r6, r2
 800e37a:	461f      	mov	r7, r3
 800e37c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e380:	4605      	mov	r5, r0
 800e382:	f000 fcdf 	bl	800ed44 <_localeconv_r>
 800e386:	6803      	ldr	r3, [r0, #0]
 800e388:	4618      	mov	r0, r3
 800e38a:	9304      	str	r3, [sp, #16]
 800e38c:	f7f1 ff80 	bl	8000290 <strlen>
 800e390:	2300      	movs	r3, #0
 800e392:	9005      	str	r0, [sp, #20]
 800e394:	930a      	str	r3, [sp, #40]	@ 0x28
 800e396:	f8d8 3000 	ldr.w	r3, [r8]
 800e39a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e39e:	3307      	adds	r3, #7
 800e3a0:	f8d4 b000 	ldr.w	fp, [r4]
 800e3a4:	f023 0307 	bic.w	r3, r3, #7
 800e3a8:	f103 0208 	add.w	r2, r3, #8
 800e3ac:	f8c8 2000 	str.w	r2, [r8]
 800e3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e3bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800e3c0:	9307      	str	r3, [sp, #28]
 800e3c2:	4b9d      	ldr	r3, [pc, #628]	@ (800e638 <_printf_float+0x2c8>)
 800e3c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e3cc:	f7f2 fbbe 	bl	8000b4c <__aeabi_dcmpun>
 800e3d0:	bb70      	cbnz	r0, 800e430 <_printf_float+0xc0>
 800e3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d6:	4b98      	ldr	r3, [pc, #608]	@ (800e638 <_printf_float+0x2c8>)
 800e3d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3dc:	f7f2 fb98 	bl	8000b10 <__aeabi_dcmple>
 800e3e0:	bb30      	cbnz	r0, 800e430 <_printf_float+0xc0>
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	4640      	mov	r0, r8
 800e3e8:	4649      	mov	r1, r9
 800e3ea:	f7f2 fb87 	bl	8000afc <__aeabi_dcmplt>
 800e3ee:	b110      	cbz	r0, 800e3f6 <_printf_float+0x86>
 800e3f0:	232d      	movs	r3, #45	@ 0x2d
 800e3f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3f6:	4a91      	ldr	r2, [pc, #580]	@ (800e63c <_printf_float+0x2cc>)
 800e3f8:	4b91      	ldr	r3, [pc, #580]	@ (800e640 <_printf_float+0x2d0>)
 800e3fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e3fe:	bf94      	ite	ls
 800e400:	4690      	movls	r8, r2
 800e402:	4698      	movhi	r8, r3
 800e404:	2303      	movs	r3, #3
 800e406:	f04f 0900 	mov.w	r9, #0
 800e40a:	6123      	str	r3, [r4, #16]
 800e40c:	f02b 0304 	bic.w	r3, fp, #4
 800e410:	6023      	str	r3, [r4, #0]
 800e412:	4633      	mov	r3, r6
 800e414:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e416:	4621      	mov	r1, r4
 800e418:	4628      	mov	r0, r5
 800e41a:	9700      	str	r7, [sp, #0]
 800e41c:	f000 f9d2 	bl	800e7c4 <_printf_common>
 800e420:	3001      	adds	r0, #1
 800e422:	f040 808d 	bne.w	800e540 <_printf_float+0x1d0>
 800e426:	f04f 30ff 	mov.w	r0, #4294967295
 800e42a:	b00d      	add	sp, #52	@ 0x34
 800e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e430:	4642      	mov	r2, r8
 800e432:	464b      	mov	r3, r9
 800e434:	4640      	mov	r0, r8
 800e436:	4649      	mov	r1, r9
 800e438:	f7f2 fb88 	bl	8000b4c <__aeabi_dcmpun>
 800e43c:	b140      	cbz	r0, 800e450 <_printf_float+0xe0>
 800e43e:	464b      	mov	r3, r9
 800e440:	4a80      	ldr	r2, [pc, #512]	@ (800e644 <_printf_float+0x2d4>)
 800e442:	2b00      	cmp	r3, #0
 800e444:	bfbc      	itt	lt
 800e446:	232d      	movlt	r3, #45	@ 0x2d
 800e448:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e44c:	4b7e      	ldr	r3, [pc, #504]	@ (800e648 <_printf_float+0x2d8>)
 800e44e:	e7d4      	b.n	800e3fa <_printf_float+0x8a>
 800e450:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e454:	6863      	ldr	r3, [r4, #4]
 800e456:	9206      	str	r2, [sp, #24]
 800e458:	1c5a      	adds	r2, r3, #1
 800e45a:	d13b      	bne.n	800e4d4 <_printf_float+0x164>
 800e45c:	2306      	movs	r3, #6
 800e45e:	6063      	str	r3, [r4, #4]
 800e460:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e464:	2300      	movs	r3, #0
 800e466:	4628      	mov	r0, r5
 800e468:	6022      	str	r2, [r4, #0]
 800e46a:	9303      	str	r3, [sp, #12]
 800e46c:	ab0a      	add	r3, sp, #40	@ 0x28
 800e46e:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e472:	ab09      	add	r3, sp, #36	@ 0x24
 800e474:	ec49 8b10 	vmov	d0, r8, r9
 800e478:	9300      	str	r3, [sp, #0]
 800e47a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e47e:	6861      	ldr	r1, [r4, #4]
 800e480:	f7ff fed8 	bl	800e234 <__cvt>
 800e484:	9b06      	ldr	r3, [sp, #24]
 800e486:	4680      	mov	r8, r0
 800e488:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e48a:	2b47      	cmp	r3, #71	@ 0x47
 800e48c:	d129      	bne.n	800e4e2 <_printf_float+0x172>
 800e48e:	1cc8      	adds	r0, r1, #3
 800e490:	db02      	blt.n	800e498 <_printf_float+0x128>
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	4299      	cmp	r1, r3
 800e496:	dd41      	ble.n	800e51c <_printf_float+0x1ac>
 800e498:	f1aa 0a02 	sub.w	sl, sl, #2
 800e49c:	fa5f fa8a 	uxtb.w	sl, sl
 800e4a0:	3901      	subs	r1, #1
 800e4a2:	4652      	mov	r2, sl
 800e4a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e4a8:	9109      	str	r1, [sp, #36]	@ 0x24
 800e4aa:	f7ff ff28 	bl	800e2fe <__exponent>
 800e4ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4b0:	4681      	mov	r9, r0
 800e4b2:	1813      	adds	r3, r2, r0
 800e4b4:	2a01      	cmp	r2, #1
 800e4b6:	6123      	str	r3, [r4, #16]
 800e4b8:	dc02      	bgt.n	800e4c0 <_printf_float+0x150>
 800e4ba:	6822      	ldr	r2, [r4, #0]
 800e4bc:	07d2      	lsls	r2, r2, #31
 800e4be:	d501      	bpl.n	800e4c4 <_printf_float+0x154>
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	6123      	str	r3, [r4, #16]
 800e4c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d0a2      	beq.n	800e412 <_printf_float+0xa2>
 800e4cc:	232d      	movs	r3, #45	@ 0x2d
 800e4ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4d2:	e79e      	b.n	800e412 <_printf_float+0xa2>
 800e4d4:	9a06      	ldr	r2, [sp, #24]
 800e4d6:	2a47      	cmp	r2, #71	@ 0x47
 800e4d8:	d1c2      	bne.n	800e460 <_printf_float+0xf0>
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1c0      	bne.n	800e460 <_printf_float+0xf0>
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e7bd      	b.n	800e45e <_printf_float+0xee>
 800e4e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e4e6:	d9db      	bls.n	800e4a0 <_printf_float+0x130>
 800e4e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e4ec:	d118      	bne.n	800e520 <_printf_float+0x1b0>
 800e4ee:	2900      	cmp	r1, #0
 800e4f0:	6863      	ldr	r3, [r4, #4]
 800e4f2:	dd0b      	ble.n	800e50c <_printf_float+0x19c>
 800e4f4:	6121      	str	r1, [r4, #16]
 800e4f6:	b913      	cbnz	r3, 800e4fe <_printf_float+0x18e>
 800e4f8:	6822      	ldr	r2, [r4, #0]
 800e4fa:	07d0      	lsls	r0, r2, #31
 800e4fc:	d502      	bpl.n	800e504 <_printf_float+0x194>
 800e4fe:	3301      	adds	r3, #1
 800e500:	440b      	add	r3, r1
 800e502:	6123      	str	r3, [r4, #16]
 800e504:	f04f 0900 	mov.w	r9, #0
 800e508:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e50a:	e7db      	b.n	800e4c4 <_printf_float+0x154>
 800e50c:	b913      	cbnz	r3, 800e514 <_printf_float+0x1a4>
 800e50e:	6822      	ldr	r2, [r4, #0]
 800e510:	07d2      	lsls	r2, r2, #31
 800e512:	d501      	bpl.n	800e518 <_printf_float+0x1a8>
 800e514:	3302      	adds	r3, #2
 800e516:	e7f4      	b.n	800e502 <_printf_float+0x192>
 800e518:	2301      	movs	r3, #1
 800e51a:	e7f2      	b.n	800e502 <_printf_float+0x192>
 800e51c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e522:	4299      	cmp	r1, r3
 800e524:	db05      	blt.n	800e532 <_printf_float+0x1c2>
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	6121      	str	r1, [r4, #16]
 800e52a:	07d8      	lsls	r0, r3, #31
 800e52c:	d5ea      	bpl.n	800e504 <_printf_float+0x194>
 800e52e:	1c4b      	adds	r3, r1, #1
 800e530:	e7e7      	b.n	800e502 <_printf_float+0x192>
 800e532:	2900      	cmp	r1, #0
 800e534:	bfd4      	ite	le
 800e536:	f1c1 0202 	rsble	r2, r1, #2
 800e53a:	2201      	movgt	r2, #1
 800e53c:	4413      	add	r3, r2
 800e53e:	e7e0      	b.n	800e502 <_printf_float+0x192>
 800e540:	6823      	ldr	r3, [r4, #0]
 800e542:	055a      	lsls	r2, r3, #21
 800e544:	d407      	bmi.n	800e556 <_printf_float+0x1e6>
 800e546:	6923      	ldr	r3, [r4, #16]
 800e548:	4642      	mov	r2, r8
 800e54a:	4631      	mov	r1, r6
 800e54c:	4628      	mov	r0, r5
 800e54e:	47b8      	blx	r7
 800e550:	3001      	adds	r0, #1
 800e552:	d12b      	bne.n	800e5ac <_printf_float+0x23c>
 800e554:	e767      	b.n	800e426 <_printf_float+0xb6>
 800e556:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e55a:	f240 80dd 	bls.w	800e718 <_printf_float+0x3a8>
 800e55e:	2200      	movs	r2, #0
 800e560:	2300      	movs	r3, #0
 800e562:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e566:	f7f2 fabf 	bl	8000ae8 <__aeabi_dcmpeq>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d033      	beq.n	800e5d6 <_printf_float+0x266>
 800e56e:	2301      	movs	r3, #1
 800e570:	4a36      	ldr	r2, [pc, #216]	@ (800e64c <_printf_float+0x2dc>)
 800e572:	4631      	mov	r1, r6
 800e574:	4628      	mov	r0, r5
 800e576:	47b8      	blx	r7
 800e578:	3001      	adds	r0, #1
 800e57a:	f43f af54 	beq.w	800e426 <_printf_float+0xb6>
 800e57e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e582:	4543      	cmp	r3, r8
 800e584:	db02      	blt.n	800e58c <_printf_float+0x21c>
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	07d8      	lsls	r0, r3, #31
 800e58a:	d50f      	bpl.n	800e5ac <_printf_float+0x23c>
 800e58c:	4631      	mov	r1, r6
 800e58e:	4628      	mov	r0, r5
 800e590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e594:	47b8      	blx	r7
 800e596:	3001      	adds	r0, #1
 800e598:	f43f af45 	beq.w	800e426 <_printf_float+0xb6>
 800e59c:	f04f 0900 	mov.w	r9, #0
 800e5a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e5a4:	f104 0a1a 	add.w	sl, r4, #26
 800e5a8:	45c8      	cmp	r8, r9
 800e5aa:	dc09      	bgt.n	800e5c0 <_printf_float+0x250>
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	079b      	lsls	r3, r3, #30
 800e5b0:	f100 8103 	bmi.w	800e7ba <_printf_float+0x44a>
 800e5b4:	68e0      	ldr	r0, [r4, #12]
 800e5b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5b8:	4298      	cmp	r0, r3
 800e5ba:	bfb8      	it	lt
 800e5bc:	4618      	movlt	r0, r3
 800e5be:	e734      	b.n	800e42a <_printf_float+0xba>
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	4652      	mov	r2, sl
 800e5c4:	4631      	mov	r1, r6
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	47b8      	blx	r7
 800e5ca:	3001      	adds	r0, #1
 800e5cc:	f43f af2b 	beq.w	800e426 <_printf_float+0xb6>
 800e5d0:	f109 0901 	add.w	r9, r9, #1
 800e5d4:	e7e8      	b.n	800e5a8 <_printf_float+0x238>
 800e5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	dc39      	bgt.n	800e650 <_printf_float+0x2e0>
 800e5dc:	2301      	movs	r3, #1
 800e5de:	4a1b      	ldr	r2, [pc, #108]	@ (800e64c <_printf_float+0x2dc>)
 800e5e0:	4631      	mov	r1, r6
 800e5e2:	4628      	mov	r0, r5
 800e5e4:	47b8      	blx	r7
 800e5e6:	3001      	adds	r0, #1
 800e5e8:	f43f af1d 	beq.w	800e426 <_printf_float+0xb6>
 800e5ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e5f0:	ea59 0303 	orrs.w	r3, r9, r3
 800e5f4:	d102      	bne.n	800e5fc <_printf_float+0x28c>
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	07d9      	lsls	r1, r3, #31
 800e5fa:	d5d7      	bpl.n	800e5ac <_printf_float+0x23c>
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4628      	mov	r0, r5
 800e600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e604:	47b8      	blx	r7
 800e606:	3001      	adds	r0, #1
 800e608:	f43f af0d 	beq.w	800e426 <_printf_float+0xb6>
 800e60c:	f04f 0a00 	mov.w	sl, #0
 800e610:	f104 0b1a 	add.w	fp, r4, #26
 800e614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e616:	425b      	negs	r3, r3
 800e618:	4553      	cmp	r3, sl
 800e61a:	dc01      	bgt.n	800e620 <_printf_float+0x2b0>
 800e61c:	464b      	mov	r3, r9
 800e61e:	e793      	b.n	800e548 <_printf_float+0x1d8>
 800e620:	2301      	movs	r3, #1
 800e622:	465a      	mov	r2, fp
 800e624:	4631      	mov	r1, r6
 800e626:	4628      	mov	r0, r5
 800e628:	47b8      	blx	r7
 800e62a:	3001      	adds	r0, #1
 800e62c:	f43f aefb 	beq.w	800e426 <_printf_float+0xb6>
 800e630:	f10a 0a01 	add.w	sl, sl, #1
 800e634:	e7ee      	b.n	800e614 <_printf_float+0x2a4>
 800e636:	bf00      	nop
 800e638:	7fefffff 	.word	0x7fefffff
 800e63c:	08011154 	.word	0x08011154
 800e640:	08011158 	.word	0x08011158
 800e644:	0801115c 	.word	0x0801115c
 800e648:	08011160 	.word	0x08011160
 800e64c:	08011164 	.word	0x08011164
 800e650:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e652:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e656:	4553      	cmp	r3, sl
 800e658:	bfa8      	it	ge
 800e65a:	4653      	movge	r3, sl
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	4699      	mov	r9, r3
 800e660:	dc36      	bgt.n	800e6d0 <_printf_float+0x360>
 800e662:	f04f 0b00 	mov.w	fp, #0
 800e666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e66a:	f104 021a 	add.w	r2, r4, #26
 800e66e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e670:	9306      	str	r3, [sp, #24]
 800e672:	eba3 0309 	sub.w	r3, r3, r9
 800e676:	455b      	cmp	r3, fp
 800e678:	dc31      	bgt.n	800e6de <_printf_float+0x36e>
 800e67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e67c:	459a      	cmp	sl, r3
 800e67e:	dc3a      	bgt.n	800e6f6 <_printf_float+0x386>
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	07da      	lsls	r2, r3, #31
 800e684:	d437      	bmi.n	800e6f6 <_printf_float+0x386>
 800e686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e688:	ebaa 0903 	sub.w	r9, sl, r3
 800e68c:	9b06      	ldr	r3, [sp, #24]
 800e68e:	ebaa 0303 	sub.w	r3, sl, r3
 800e692:	4599      	cmp	r9, r3
 800e694:	bfa8      	it	ge
 800e696:	4699      	movge	r9, r3
 800e698:	f1b9 0f00 	cmp.w	r9, #0
 800e69c:	dc33      	bgt.n	800e706 <_printf_float+0x396>
 800e69e:	f04f 0800 	mov.w	r8, #0
 800e6a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6a6:	f104 0b1a 	add.w	fp, r4, #26
 800e6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6ac:	ebaa 0303 	sub.w	r3, sl, r3
 800e6b0:	eba3 0309 	sub.w	r3, r3, r9
 800e6b4:	4543      	cmp	r3, r8
 800e6b6:	f77f af79 	ble.w	800e5ac <_printf_float+0x23c>
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	465a      	mov	r2, fp
 800e6be:	4631      	mov	r1, r6
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	47b8      	blx	r7
 800e6c4:	3001      	adds	r0, #1
 800e6c6:	f43f aeae 	beq.w	800e426 <_printf_float+0xb6>
 800e6ca:	f108 0801 	add.w	r8, r8, #1
 800e6ce:	e7ec      	b.n	800e6aa <_printf_float+0x33a>
 800e6d0:	4642      	mov	r2, r8
 800e6d2:	4631      	mov	r1, r6
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	47b8      	blx	r7
 800e6d8:	3001      	adds	r0, #1
 800e6da:	d1c2      	bne.n	800e662 <_printf_float+0x2f2>
 800e6dc:	e6a3      	b.n	800e426 <_printf_float+0xb6>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	9206      	str	r2, [sp, #24]
 800e6e6:	47b8      	blx	r7
 800e6e8:	3001      	adds	r0, #1
 800e6ea:	f43f ae9c 	beq.w	800e426 <_printf_float+0xb6>
 800e6ee:	f10b 0b01 	add.w	fp, fp, #1
 800e6f2:	9a06      	ldr	r2, [sp, #24]
 800e6f4:	e7bb      	b.n	800e66e <_printf_float+0x2fe>
 800e6f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6fa:	4631      	mov	r1, r6
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	47b8      	blx	r7
 800e700:	3001      	adds	r0, #1
 800e702:	d1c0      	bne.n	800e686 <_printf_float+0x316>
 800e704:	e68f      	b.n	800e426 <_printf_float+0xb6>
 800e706:	9a06      	ldr	r2, [sp, #24]
 800e708:	464b      	mov	r3, r9
 800e70a:	4631      	mov	r1, r6
 800e70c:	4628      	mov	r0, r5
 800e70e:	4442      	add	r2, r8
 800e710:	47b8      	blx	r7
 800e712:	3001      	adds	r0, #1
 800e714:	d1c3      	bne.n	800e69e <_printf_float+0x32e>
 800e716:	e686      	b.n	800e426 <_printf_float+0xb6>
 800e718:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e71c:	f1ba 0f01 	cmp.w	sl, #1
 800e720:	dc01      	bgt.n	800e726 <_printf_float+0x3b6>
 800e722:	07db      	lsls	r3, r3, #31
 800e724:	d536      	bpl.n	800e794 <_printf_float+0x424>
 800e726:	2301      	movs	r3, #1
 800e728:	4642      	mov	r2, r8
 800e72a:	4631      	mov	r1, r6
 800e72c:	4628      	mov	r0, r5
 800e72e:	47b8      	blx	r7
 800e730:	3001      	adds	r0, #1
 800e732:	f43f ae78 	beq.w	800e426 <_printf_float+0xb6>
 800e736:	4631      	mov	r1, r6
 800e738:	4628      	mov	r0, r5
 800e73a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e73e:	47b8      	blx	r7
 800e740:	3001      	adds	r0, #1
 800e742:	f43f ae70 	beq.w	800e426 <_printf_float+0xb6>
 800e746:	2200      	movs	r2, #0
 800e748:	2300      	movs	r3, #0
 800e74a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e74e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e752:	f7f2 f9c9 	bl	8000ae8 <__aeabi_dcmpeq>
 800e756:	b9c0      	cbnz	r0, 800e78a <_printf_float+0x41a>
 800e758:	4653      	mov	r3, sl
 800e75a:	f108 0201 	add.w	r2, r8, #1
 800e75e:	4631      	mov	r1, r6
 800e760:	4628      	mov	r0, r5
 800e762:	47b8      	blx	r7
 800e764:	3001      	adds	r0, #1
 800e766:	d10c      	bne.n	800e782 <_printf_float+0x412>
 800e768:	e65d      	b.n	800e426 <_printf_float+0xb6>
 800e76a:	2301      	movs	r3, #1
 800e76c:	465a      	mov	r2, fp
 800e76e:	4631      	mov	r1, r6
 800e770:	4628      	mov	r0, r5
 800e772:	47b8      	blx	r7
 800e774:	3001      	adds	r0, #1
 800e776:	f43f ae56 	beq.w	800e426 <_printf_float+0xb6>
 800e77a:	f108 0801 	add.w	r8, r8, #1
 800e77e:	45d0      	cmp	r8, sl
 800e780:	dbf3      	blt.n	800e76a <_printf_float+0x3fa>
 800e782:	464b      	mov	r3, r9
 800e784:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e788:	e6df      	b.n	800e54a <_printf_float+0x1da>
 800e78a:	f04f 0800 	mov.w	r8, #0
 800e78e:	f104 0b1a 	add.w	fp, r4, #26
 800e792:	e7f4      	b.n	800e77e <_printf_float+0x40e>
 800e794:	2301      	movs	r3, #1
 800e796:	4642      	mov	r2, r8
 800e798:	e7e1      	b.n	800e75e <_printf_float+0x3ee>
 800e79a:	2301      	movs	r3, #1
 800e79c:	464a      	mov	r2, r9
 800e79e:	4631      	mov	r1, r6
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	47b8      	blx	r7
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	f43f ae3e 	beq.w	800e426 <_printf_float+0xb6>
 800e7aa:	f108 0801 	add.w	r8, r8, #1
 800e7ae:	68e3      	ldr	r3, [r4, #12]
 800e7b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e7b2:	1a5b      	subs	r3, r3, r1
 800e7b4:	4543      	cmp	r3, r8
 800e7b6:	dcf0      	bgt.n	800e79a <_printf_float+0x42a>
 800e7b8:	e6fc      	b.n	800e5b4 <_printf_float+0x244>
 800e7ba:	f04f 0800 	mov.w	r8, #0
 800e7be:	f104 0919 	add.w	r9, r4, #25
 800e7c2:	e7f4      	b.n	800e7ae <_printf_float+0x43e>

0800e7c4 <_printf_common>:
 800e7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7c8:	4616      	mov	r6, r2
 800e7ca:	4698      	mov	r8, r3
 800e7cc:	688a      	ldr	r2, [r1, #8]
 800e7ce:	4607      	mov	r7, r0
 800e7d0:	690b      	ldr	r3, [r1, #16]
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	bfb8      	it	lt
 800e7dc:	4613      	movlt	r3, r2
 800e7de:	6033      	str	r3, [r6, #0]
 800e7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7e4:	b10a      	cbz	r2, 800e7ea <_printf_common+0x26>
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	6033      	str	r3, [r6, #0]
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	0699      	lsls	r1, r3, #26
 800e7ee:	bf42      	ittt	mi
 800e7f0:	6833      	ldrmi	r3, [r6, #0]
 800e7f2:	3302      	addmi	r3, #2
 800e7f4:	6033      	strmi	r3, [r6, #0]
 800e7f6:	6825      	ldr	r5, [r4, #0]
 800e7f8:	f015 0506 	ands.w	r5, r5, #6
 800e7fc:	d106      	bne.n	800e80c <_printf_common+0x48>
 800e7fe:	f104 0a19 	add.w	sl, r4, #25
 800e802:	68e3      	ldr	r3, [r4, #12]
 800e804:	6832      	ldr	r2, [r6, #0]
 800e806:	1a9b      	subs	r3, r3, r2
 800e808:	42ab      	cmp	r3, r5
 800e80a:	dc2b      	bgt.n	800e864 <_printf_common+0xa0>
 800e80c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e810:	6822      	ldr	r2, [r4, #0]
 800e812:	3b00      	subs	r3, #0
 800e814:	bf18      	it	ne
 800e816:	2301      	movne	r3, #1
 800e818:	0692      	lsls	r2, r2, #26
 800e81a:	d430      	bmi.n	800e87e <_printf_common+0xba>
 800e81c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e820:	4641      	mov	r1, r8
 800e822:	4638      	mov	r0, r7
 800e824:	47c8      	blx	r9
 800e826:	3001      	adds	r0, #1
 800e828:	d023      	beq.n	800e872 <_printf_common+0xae>
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	341a      	adds	r4, #26
 800e82e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e832:	f003 0306 	and.w	r3, r3, #6
 800e836:	2b04      	cmp	r3, #4
 800e838:	bf0a      	itet	eq
 800e83a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e83e:	2500      	movne	r5, #0
 800e840:	6833      	ldreq	r3, [r6, #0]
 800e842:	f04f 0600 	mov.w	r6, #0
 800e846:	bf08      	it	eq
 800e848:	1aed      	subeq	r5, r5, r3
 800e84a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e84e:	bf08      	it	eq
 800e850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e854:	4293      	cmp	r3, r2
 800e856:	bfc4      	itt	gt
 800e858:	1a9b      	subgt	r3, r3, r2
 800e85a:	18ed      	addgt	r5, r5, r3
 800e85c:	42b5      	cmp	r5, r6
 800e85e:	d11a      	bne.n	800e896 <_printf_common+0xd2>
 800e860:	2000      	movs	r0, #0
 800e862:	e008      	b.n	800e876 <_printf_common+0xb2>
 800e864:	2301      	movs	r3, #1
 800e866:	4652      	mov	r2, sl
 800e868:	4641      	mov	r1, r8
 800e86a:	4638      	mov	r0, r7
 800e86c:	47c8      	blx	r9
 800e86e:	3001      	adds	r0, #1
 800e870:	d103      	bne.n	800e87a <_printf_common+0xb6>
 800e872:	f04f 30ff 	mov.w	r0, #4294967295
 800e876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e87a:	3501      	adds	r5, #1
 800e87c:	e7c1      	b.n	800e802 <_printf_common+0x3e>
 800e87e:	18e1      	adds	r1, r4, r3
 800e880:	1c5a      	adds	r2, r3, #1
 800e882:	2030      	movs	r0, #48	@ 0x30
 800e884:	3302      	adds	r3, #2
 800e886:	4422      	add	r2, r4
 800e888:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e88c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e894:	e7c2      	b.n	800e81c <_printf_common+0x58>
 800e896:	2301      	movs	r3, #1
 800e898:	4622      	mov	r2, r4
 800e89a:	4641      	mov	r1, r8
 800e89c:	4638      	mov	r0, r7
 800e89e:	47c8      	blx	r9
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	d0e6      	beq.n	800e872 <_printf_common+0xae>
 800e8a4:	3601      	adds	r6, #1
 800e8a6:	e7d9      	b.n	800e85c <_printf_common+0x98>

0800e8a8 <_printf_i>:
 800e8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ac:	7e0f      	ldrb	r7, [r1, #24]
 800e8ae:	4691      	mov	r9, r2
 800e8b0:	4680      	mov	r8, r0
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	2f78      	cmp	r7, #120	@ 0x78
 800e8b6:	469a      	mov	sl, r3
 800e8b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e8ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e8be:	d807      	bhi.n	800e8d0 <_printf_i+0x28>
 800e8c0:	2f62      	cmp	r7, #98	@ 0x62
 800e8c2:	d80a      	bhi.n	800e8da <_printf_i+0x32>
 800e8c4:	2f00      	cmp	r7, #0
 800e8c6:	f000 80d2 	beq.w	800ea6e <_printf_i+0x1c6>
 800e8ca:	2f58      	cmp	r7, #88	@ 0x58
 800e8cc:	f000 80b9 	beq.w	800ea42 <_printf_i+0x19a>
 800e8d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8d8:	e03a      	b.n	800e950 <_printf_i+0xa8>
 800e8da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8de:	2b15      	cmp	r3, #21
 800e8e0:	d8f6      	bhi.n	800e8d0 <_printf_i+0x28>
 800e8e2:	a101      	add	r1, pc, #4	@ (adr r1, 800e8e8 <_printf_i+0x40>)
 800e8e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8e8:	0800e941 	.word	0x0800e941
 800e8ec:	0800e955 	.word	0x0800e955
 800e8f0:	0800e8d1 	.word	0x0800e8d1
 800e8f4:	0800e8d1 	.word	0x0800e8d1
 800e8f8:	0800e8d1 	.word	0x0800e8d1
 800e8fc:	0800e8d1 	.word	0x0800e8d1
 800e900:	0800e955 	.word	0x0800e955
 800e904:	0800e8d1 	.word	0x0800e8d1
 800e908:	0800e8d1 	.word	0x0800e8d1
 800e90c:	0800e8d1 	.word	0x0800e8d1
 800e910:	0800e8d1 	.word	0x0800e8d1
 800e914:	0800ea55 	.word	0x0800ea55
 800e918:	0800e97f 	.word	0x0800e97f
 800e91c:	0800ea0f 	.word	0x0800ea0f
 800e920:	0800e8d1 	.word	0x0800e8d1
 800e924:	0800e8d1 	.word	0x0800e8d1
 800e928:	0800ea77 	.word	0x0800ea77
 800e92c:	0800e8d1 	.word	0x0800e8d1
 800e930:	0800e97f 	.word	0x0800e97f
 800e934:	0800e8d1 	.word	0x0800e8d1
 800e938:	0800e8d1 	.word	0x0800e8d1
 800e93c:	0800ea17 	.word	0x0800ea17
 800e940:	6833      	ldr	r3, [r6, #0]
 800e942:	1d1a      	adds	r2, r3, #4
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	6032      	str	r2, [r6, #0]
 800e948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e94c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e950:	2301      	movs	r3, #1
 800e952:	e09d      	b.n	800ea90 <_printf_i+0x1e8>
 800e954:	6833      	ldr	r3, [r6, #0]
 800e956:	6820      	ldr	r0, [r4, #0]
 800e958:	1d19      	adds	r1, r3, #4
 800e95a:	6031      	str	r1, [r6, #0]
 800e95c:	0606      	lsls	r6, r0, #24
 800e95e:	d501      	bpl.n	800e964 <_printf_i+0xbc>
 800e960:	681d      	ldr	r5, [r3, #0]
 800e962:	e003      	b.n	800e96c <_printf_i+0xc4>
 800e964:	0645      	lsls	r5, r0, #25
 800e966:	d5fb      	bpl.n	800e960 <_printf_i+0xb8>
 800e968:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e96c:	2d00      	cmp	r5, #0
 800e96e:	da03      	bge.n	800e978 <_printf_i+0xd0>
 800e970:	232d      	movs	r3, #45	@ 0x2d
 800e972:	426d      	negs	r5, r5
 800e974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e978:	4859      	ldr	r0, [pc, #356]	@ (800eae0 <_printf_i+0x238>)
 800e97a:	230a      	movs	r3, #10
 800e97c:	e011      	b.n	800e9a2 <_printf_i+0xfa>
 800e97e:	6821      	ldr	r1, [r4, #0]
 800e980:	6833      	ldr	r3, [r6, #0]
 800e982:	0608      	lsls	r0, r1, #24
 800e984:	f853 5b04 	ldr.w	r5, [r3], #4
 800e988:	d402      	bmi.n	800e990 <_printf_i+0xe8>
 800e98a:	0649      	lsls	r1, r1, #25
 800e98c:	bf48      	it	mi
 800e98e:	b2ad      	uxthmi	r5, r5
 800e990:	2f6f      	cmp	r7, #111	@ 0x6f
 800e992:	6033      	str	r3, [r6, #0]
 800e994:	4852      	ldr	r0, [pc, #328]	@ (800eae0 <_printf_i+0x238>)
 800e996:	bf14      	ite	ne
 800e998:	230a      	movne	r3, #10
 800e99a:	2308      	moveq	r3, #8
 800e99c:	2100      	movs	r1, #0
 800e99e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e9a2:	6866      	ldr	r6, [r4, #4]
 800e9a4:	2e00      	cmp	r6, #0
 800e9a6:	60a6      	str	r6, [r4, #8]
 800e9a8:	bfa2      	ittt	ge
 800e9aa:	6821      	ldrge	r1, [r4, #0]
 800e9ac:	f021 0104 	bicge.w	r1, r1, #4
 800e9b0:	6021      	strge	r1, [r4, #0]
 800e9b2:	b90d      	cbnz	r5, 800e9b8 <_printf_i+0x110>
 800e9b4:	2e00      	cmp	r6, #0
 800e9b6:	d04b      	beq.n	800ea50 <_printf_i+0x1a8>
 800e9b8:	4616      	mov	r6, r2
 800e9ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800e9be:	fb03 5711 	mls	r7, r3, r1, r5
 800e9c2:	5dc7      	ldrb	r7, [r0, r7]
 800e9c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9c8:	462f      	mov	r7, r5
 800e9ca:	460d      	mov	r5, r1
 800e9cc:	42bb      	cmp	r3, r7
 800e9ce:	d9f4      	bls.n	800e9ba <_printf_i+0x112>
 800e9d0:	2b08      	cmp	r3, #8
 800e9d2:	d10b      	bne.n	800e9ec <_printf_i+0x144>
 800e9d4:	6823      	ldr	r3, [r4, #0]
 800e9d6:	07df      	lsls	r7, r3, #31
 800e9d8:	d508      	bpl.n	800e9ec <_printf_i+0x144>
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	6861      	ldr	r1, [r4, #4]
 800e9de:	4299      	cmp	r1, r3
 800e9e0:	bfde      	ittt	le
 800e9e2:	2330      	movle	r3, #48	@ 0x30
 800e9e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9ec:	1b92      	subs	r2, r2, r6
 800e9ee:	6122      	str	r2, [r4, #16]
 800e9f0:	464b      	mov	r3, r9
 800e9f2:	aa03      	add	r2, sp, #12
 800e9f4:	4621      	mov	r1, r4
 800e9f6:	4640      	mov	r0, r8
 800e9f8:	f8cd a000 	str.w	sl, [sp]
 800e9fc:	f7ff fee2 	bl	800e7c4 <_printf_common>
 800ea00:	3001      	adds	r0, #1
 800ea02:	d14a      	bne.n	800ea9a <_printf_i+0x1f2>
 800ea04:	f04f 30ff 	mov.w	r0, #4294967295
 800ea08:	b004      	add	sp, #16
 800ea0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	f043 0320 	orr.w	r3, r3, #32
 800ea14:	6023      	str	r3, [r4, #0]
 800ea16:	2778      	movs	r7, #120	@ 0x78
 800ea18:	4832      	ldr	r0, [pc, #200]	@ (800eae4 <_printf_i+0x23c>)
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea20:	061f      	lsls	r7, r3, #24
 800ea22:	6831      	ldr	r1, [r6, #0]
 800ea24:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea28:	d402      	bmi.n	800ea30 <_printf_i+0x188>
 800ea2a:	065f      	lsls	r7, r3, #25
 800ea2c:	bf48      	it	mi
 800ea2e:	b2ad      	uxthmi	r5, r5
 800ea30:	6031      	str	r1, [r6, #0]
 800ea32:	07d9      	lsls	r1, r3, #31
 800ea34:	bf44      	itt	mi
 800ea36:	f043 0320 	orrmi.w	r3, r3, #32
 800ea3a:	6023      	strmi	r3, [r4, #0]
 800ea3c:	b11d      	cbz	r5, 800ea46 <_printf_i+0x19e>
 800ea3e:	2310      	movs	r3, #16
 800ea40:	e7ac      	b.n	800e99c <_printf_i+0xf4>
 800ea42:	4827      	ldr	r0, [pc, #156]	@ (800eae0 <_printf_i+0x238>)
 800ea44:	e7e9      	b.n	800ea1a <_printf_i+0x172>
 800ea46:	6823      	ldr	r3, [r4, #0]
 800ea48:	f023 0320 	bic.w	r3, r3, #32
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	e7f6      	b.n	800ea3e <_printf_i+0x196>
 800ea50:	4616      	mov	r6, r2
 800ea52:	e7bd      	b.n	800e9d0 <_printf_i+0x128>
 800ea54:	6833      	ldr	r3, [r6, #0]
 800ea56:	6825      	ldr	r5, [r4, #0]
 800ea58:	1d18      	adds	r0, r3, #4
 800ea5a:	6961      	ldr	r1, [r4, #20]
 800ea5c:	6030      	str	r0, [r6, #0]
 800ea5e:	062e      	lsls	r6, r5, #24
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	d501      	bpl.n	800ea68 <_printf_i+0x1c0>
 800ea64:	6019      	str	r1, [r3, #0]
 800ea66:	e002      	b.n	800ea6e <_printf_i+0x1c6>
 800ea68:	0668      	lsls	r0, r5, #25
 800ea6a:	d5fb      	bpl.n	800ea64 <_printf_i+0x1bc>
 800ea6c:	8019      	strh	r1, [r3, #0]
 800ea6e:	2300      	movs	r3, #0
 800ea70:	4616      	mov	r6, r2
 800ea72:	6123      	str	r3, [r4, #16]
 800ea74:	e7bc      	b.n	800e9f0 <_printf_i+0x148>
 800ea76:	6833      	ldr	r3, [r6, #0]
 800ea78:	2100      	movs	r1, #0
 800ea7a:	1d1a      	adds	r2, r3, #4
 800ea7c:	6032      	str	r2, [r6, #0]
 800ea7e:	681e      	ldr	r6, [r3, #0]
 800ea80:	6862      	ldr	r2, [r4, #4]
 800ea82:	4630      	mov	r0, r6
 800ea84:	f000 f9d5 	bl	800ee32 <memchr>
 800ea88:	b108      	cbz	r0, 800ea8e <_printf_i+0x1e6>
 800ea8a:	1b80      	subs	r0, r0, r6
 800ea8c:	6060      	str	r0, [r4, #4]
 800ea8e:	6863      	ldr	r3, [r4, #4]
 800ea90:	6123      	str	r3, [r4, #16]
 800ea92:	2300      	movs	r3, #0
 800ea94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea98:	e7aa      	b.n	800e9f0 <_printf_i+0x148>
 800ea9a:	6923      	ldr	r3, [r4, #16]
 800ea9c:	4632      	mov	r2, r6
 800ea9e:	4649      	mov	r1, r9
 800eaa0:	4640      	mov	r0, r8
 800eaa2:	47d0      	blx	sl
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	d0ad      	beq.n	800ea04 <_printf_i+0x15c>
 800eaa8:	6823      	ldr	r3, [r4, #0]
 800eaaa:	079b      	lsls	r3, r3, #30
 800eaac:	d413      	bmi.n	800ead6 <_printf_i+0x22e>
 800eaae:	68e0      	ldr	r0, [r4, #12]
 800eab0:	9b03      	ldr	r3, [sp, #12]
 800eab2:	4298      	cmp	r0, r3
 800eab4:	bfb8      	it	lt
 800eab6:	4618      	movlt	r0, r3
 800eab8:	e7a6      	b.n	800ea08 <_printf_i+0x160>
 800eaba:	2301      	movs	r3, #1
 800eabc:	4632      	mov	r2, r6
 800eabe:	4649      	mov	r1, r9
 800eac0:	4640      	mov	r0, r8
 800eac2:	47d0      	blx	sl
 800eac4:	3001      	adds	r0, #1
 800eac6:	d09d      	beq.n	800ea04 <_printf_i+0x15c>
 800eac8:	3501      	adds	r5, #1
 800eaca:	68e3      	ldr	r3, [r4, #12]
 800eacc:	9903      	ldr	r1, [sp, #12]
 800eace:	1a5b      	subs	r3, r3, r1
 800ead0:	42ab      	cmp	r3, r5
 800ead2:	dcf2      	bgt.n	800eaba <_printf_i+0x212>
 800ead4:	e7eb      	b.n	800eaae <_printf_i+0x206>
 800ead6:	2500      	movs	r5, #0
 800ead8:	f104 0619 	add.w	r6, r4, #25
 800eadc:	e7f5      	b.n	800eaca <_printf_i+0x222>
 800eade:	bf00      	nop
 800eae0:	08011166 	.word	0x08011166
 800eae4:	08011177 	.word	0x08011177

0800eae8 <std>:
 800eae8:	2300      	movs	r3, #0
 800eaea:	b510      	push	{r4, lr}
 800eaec:	4604      	mov	r4, r0
 800eaee:	6083      	str	r3, [r0, #8]
 800eaf0:	8181      	strh	r1, [r0, #12]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	6643      	str	r3, [r0, #100]	@ 0x64
 800eaf6:	81c2      	strh	r2, [r0, #14]
 800eaf8:	2208      	movs	r2, #8
 800eafa:	6183      	str	r3, [r0, #24]
 800eafc:	e9c0 3300 	strd	r3, r3, [r0]
 800eb00:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb04:	305c      	adds	r0, #92	@ 0x5c
 800eb06:	f000 f914 	bl	800ed32 <memset>
 800eb0a:	4b0d      	ldr	r3, [pc, #52]	@ (800eb40 <std+0x58>)
 800eb0c:	6224      	str	r4, [r4, #32]
 800eb0e:	6263      	str	r3, [r4, #36]	@ 0x24
 800eb10:	4b0c      	ldr	r3, [pc, #48]	@ (800eb44 <std+0x5c>)
 800eb12:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eb14:	4b0c      	ldr	r3, [pc, #48]	@ (800eb48 <std+0x60>)
 800eb16:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eb18:	4b0c      	ldr	r3, [pc, #48]	@ (800eb4c <std+0x64>)
 800eb1a:	6323      	str	r3, [r4, #48]	@ 0x30
 800eb1c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb50 <std+0x68>)
 800eb1e:	429c      	cmp	r4, r3
 800eb20:	d006      	beq.n	800eb30 <std+0x48>
 800eb22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800eb26:	4294      	cmp	r4, r2
 800eb28:	d002      	beq.n	800eb30 <std+0x48>
 800eb2a:	33d0      	adds	r3, #208	@ 0xd0
 800eb2c:	429c      	cmp	r4, r3
 800eb2e:	d105      	bne.n	800eb3c <std+0x54>
 800eb30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb38:	f000 b978 	b.w	800ee2c <__retarget_lock_init_recursive>
 800eb3c:	bd10      	pop	{r4, pc}
 800eb3e:	bf00      	nop
 800eb40:	0800ecad 	.word	0x0800ecad
 800eb44:	0800eccf 	.word	0x0800eccf
 800eb48:	0800ed07 	.word	0x0800ed07
 800eb4c:	0800ed2b 	.word	0x0800ed2b
 800eb50:	20004acc 	.word	0x20004acc

0800eb54 <stdio_exit_handler>:
 800eb54:	4a02      	ldr	r2, [pc, #8]	@ (800eb60 <stdio_exit_handler+0xc>)
 800eb56:	4903      	ldr	r1, [pc, #12]	@ (800eb64 <stdio_exit_handler+0x10>)
 800eb58:	4803      	ldr	r0, [pc, #12]	@ (800eb68 <stdio_exit_handler+0x14>)
 800eb5a:	f000 b869 	b.w	800ec30 <_fwalk_sglue>
 800eb5e:	bf00      	nop
 800eb60:	20000028 	.word	0x20000028
 800eb64:	080107b9 	.word	0x080107b9
 800eb68:	20000038 	.word	0x20000038

0800eb6c <cleanup_stdio>:
 800eb6c:	6841      	ldr	r1, [r0, #4]
 800eb6e:	4b0c      	ldr	r3, [pc, #48]	@ (800eba0 <cleanup_stdio+0x34>)
 800eb70:	4299      	cmp	r1, r3
 800eb72:	b510      	push	{r4, lr}
 800eb74:	4604      	mov	r4, r0
 800eb76:	d001      	beq.n	800eb7c <cleanup_stdio+0x10>
 800eb78:	f001 fe1e 	bl	80107b8 <_fflush_r>
 800eb7c:	68a1      	ldr	r1, [r4, #8]
 800eb7e:	4b09      	ldr	r3, [pc, #36]	@ (800eba4 <cleanup_stdio+0x38>)
 800eb80:	4299      	cmp	r1, r3
 800eb82:	d002      	beq.n	800eb8a <cleanup_stdio+0x1e>
 800eb84:	4620      	mov	r0, r4
 800eb86:	f001 fe17 	bl	80107b8 <_fflush_r>
 800eb8a:	68e1      	ldr	r1, [r4, #12]
 800eb8c:	4b06      	ldr	r3, [pc, #24]	@ (800eba8 <cleanup_stdio+0x3c>)
 800eb8e:	4299      	cmp	r1, r3
 800eb90:	d004      	beq.n	800eb9c <cleanup_stdio+0x30>
 800eb92:	4620      	mov	r0, r4
 800eb94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb98:	f001 be0e 	b.w	80107b8 <_fflush_r>
 800eb9c:	bd10      	pop	{r4, pc}
 800eb9e:	bf00      	nop
 800eba0:	20004acc 	.word	0x20004acc
 800eba4:	20004b34 	.word	0x20004b34
 800eba8:	20004b9c 	.word	0x20004b9c

0800ebac <global_stdio_init.part.0>:
 800ebac:	b510      	push	{r4, lr}
 800ebae:	4b0b      	ldr	r3, [pc, #44]	@ (800ebdc <global_stdio_init.part.0+0x30>)
 800ebb0:	2104      	movs	r1, #4
 800ebb2:	4c0b      	ldr	r4, [pc, #44]	@ (800ebe0 <global_stdio_init.part.0+0x34>)
 800ebb4:	4a0b      	ldr	r2, [pc, #44]	@ (800ebe4 <global_stdio_init.part.0+0x38>)
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	601a      	str	r2, [r3, #0]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f7ff ff94 	bl	800eae8 <std>
 800ebc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	2109      	movs	r1, #9
 800ebc8:	f7ff ff8e 	bl	800eae8 <std>
 800ebcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ebd0:	2202      	movs	r2, #2
 800ebd2:	2112      	movs	r1, #18
 800ebd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebd8:	f7ff bf86 	b.w	800eae8 <std>
 800ebdc:	20004c04 	.word	0x20004c04
 800ebe0:	20004acc 	.word	0x20004acc
 800ebe4:	0800eb55 	.word	0x0800eb55

0800ebe8 <__sfp_lock_acquire>:
 800ebe8:	4801      	ldr	r0, [pc, #4]	@ (800ebf0 <__sfp_lock_acquire+0x8>)
 800ebea:	f000 b920 	b.w	800ee2e <__retarget_lock_acquire_recursive>
 800ebee:	bf00      	nop
 800ebf0:	20004c0d 	.word	0x20004c0d

0800ebf4 <__sfp_lock_release>:
 800ebf4:	4801      	ldr	r0, [pc, #4]	@ (800ebfc <__sfp_lock_release+0x8>)
 800ebf6:	f000 b91b 	b.w	800ee30 <__retarget_lock_release_recursive>
 800ebfa:	bf00      	nop
 800ebfc:	20004c0d 	.word	0x20004c0d

0800ec00 <__sinit>:
 800ec00:	b510      	push	{r4, lr}
 800ec02:	4604      	mov	r4, r0
 800ec04:	f7ff fff0 	bl	800ebe8 <__sfp_lock_acquire>
 800ec08:	6a23      	ldr	r3, [r4, #32]
 800ec0a:	b11b      	cbz	r3, 800ec14 <__sinit+0x14>
 800ec0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec10:	f7ff bff0 	b.w	800ebf4 <__sfp_lock_release>
 800ec14:	4b04      	ldr	r3, [pc, #16]	@ (800ec28 <__sinit+0x28>)
 800ec16:	6223      	str	r3, [r4, #32]
 800ec18:	4b04      	ldr	r3, [pc, #16]	@ (800ec2c <__sinit+0x2c>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1f5      	bne.n	800ec0c <__sinit+0xc>
 800ec20:	f7ff ffc4 	bl	800ebac <global_stdio_init.part.0>
 800ec24:	e7f2      	b.n	800ec0c <__sinit+0xc>
 800ec26:	bf00      	nop
 800ec28:	0800eb6d 	.word	0x0800eb6d
 800ec2c:	20004c04 	.word	0x20004c04

0800ec30 <_fwalk_sglue>:
 800ec30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec34:	4607      	mov	r7, r0
 800ec36:	4688      	mov	r8, r1
 800ec38:	4614      	mov	r4, r2
 800ec3a:	2600      	movs	r6, #0
 800ec3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec40:	f1b9 0901 	subs.w	r9, r9, #1
 800ec44:	d505      	bpl.n	800ec52 <_fwalk_sglue+0x22>
 800ec46:	6824      	ldr	r4, [r4, #0]
 800ec48:	2c00      	cmp	r4, #0
 800ec4a:	d1f7      	bne.n	800ec3c <_fwalk_sglue+0xc>
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec52:	89ab      	ldrh	r3, [r5, #12]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d907      	bls.n	800ec68 <_fwalk_sglue+0x38>
 800ec58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	d003      	beq.n	800ec68 <_fwalk_sglue+0x38>
 800ec60:	4629      	mov	r1, r5
 800ec62:	4638      	mov	r0, r7
 800ec64:	47c0      	blx	r8
 800ec66:	4306      	orrs	r6, r0
 800ec68:	3568      	adds	r5, #104	@ 0x68
 800ec6a:	e7e9      	b.n	800ec40 <_fwalk_sglue+0x10>

0800ec6c <siprintf>:
 800ec6c:	b40e      	push	{r1, r2, r3}
 800ec6e:	b500      	push	{lr}
 800ec70:	b09c      	sub	sp, #112	@ 0x70
 800ec72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ec76:	ab1d      	add	r3, sp, #116	@ 0x74
 800ec78:	9002      	str	r0, [sp, #8]
 800ec7a:	9006      	str	r0, [sp, #24]
 800ec7c:	9107      	str	r1, [sp, #28]
 800ec7e:	9104      	str	r1, [sp, #16]
 800ec80:	4808      	ldr	r0, [pc, #32]	@ (800eca4 <siprintf+0x38>)
 800ec82:	4909      	ldr	r1, [pc, #36]	@ (800eca8 <siprintf+0x3c>)
 800ec84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec88:	9105      	str	r1, [sp, #20]
 800ec8a:	a902      	add	r1, sp, #8
 800ec8c:	6800      	ldr	r0, [r0, #0]
 800ec8e:	9301      	str	r3, [sp, #4]
 800ec90:	f001 fc12 	bl	80104b8 <_svfiprintf_r>
 800ec94:	9b02      	ldr	r3, [sp, #8]
 800ec96:	2200      	movs	r2, #0
 800ec98:	701a      	strb	r2, [r3, #0]
 800ec9a:	b01c      	add	sp, #112	@ 0x70
 800ec9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eca0:	b003      	add	sp, #12
 800eca2:	4770      	bx	lr
 800eca4:	20000034 	.word	0x20000034
 800eca8:	ffff0208 	.word	0xffff0208

0800ecac <__sread>:
 800ecac:	b510      	push	{r4, lr}
 800ecae:	460c      	mov	r4, r1
 800ecb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb4:	f000 f86c 	bl	800ed90 <_read_r>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	bfab      	itete	ge
 800ecbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ecbe:	89a3      	ldrhlt	r3, [r4, #12]
 800ecc0:	181b      	addge	r3, r3, r0
 800ecc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ecc6:	bfac      	ite	ge
 800ecc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ecca:	81a3      	strhlt	r3, [r4, #12]
 800eccc:	bd10      	pop	{r4, pc}

0800ecce <__swrite>:
 800ecce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd2:	461f      	mov	r7, r3
 800ecd4:	898b      	ldrh	r3, [r1, #12]
 800ecd6:	4605      	mov	r5, r0
 800ecd8:	460c      	mov	r4, r1
 800ecda:	05db      	lsls	r3, r3, #23
 800ecdc:	4616      	mov	r6, r2
 800ecde:	d505      	bpl.n	800ecec <__swrite+0x1e>
 800ece0:	2302      	movs	r3, #2
 800ece2:	2200      	movs	r2, #0
 800ece4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ece8:	f000 f840 	bl	800ed6c <_lseek_r>
 800ecec:	89a3      	ldrh	r3, [r4, #12]
 800ecee:	4632      	mov	r2, r6
 800ecf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ecfa:	81a3      	strh	r3, [r4, #12]
 800ecfc:	463b      	mov	r3, r7
 800ecfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed02:	f000 b857 	b.w	800edb4 <_write_r>

0800ed06 <__sseek>:
 800ed06:	b510      	push	{r4, lr}
 800ed08:	460c      	mov	r4, r1
 800ed0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed0e:	f000 f82d 	bl	800ed6c <_lseek_r>
 800ed12:	1c43      	adds	r3, r0, #1
 800ed14:	89a3      	ldrh	r3, [r4, #12]
 800ed16:	bf15      	itete	ne
 800ed18:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ed1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ed1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ed22:	81a3      	strheq	r3, [r4, #12]
 800ed24:	bf18      	it	ne
 800ed26:	81a3      	strhne	r3, [r4, #12]
 800ed28:	bd10      	pop	{r4, pc}

0800ed2a <__sclose>:
 800ed2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed2e:	f000 b80d 	b.w	800ed4c <_close_r>

0800ed32 <memset>:
 800ed32:	4402      	add	r2, r0
 800ed34:	4603      	mov	r3, r0
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d100      	bne.n	800ed3c <memset+0xa>
 800ed3a:	4770      	bx	lr
 800ed3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ed40:	e7f9      	b.n	800ed36 <memset+0x4>
	...

0800ed44 <_localeconv_r>:
 800ed44:	4800      	ldr	r0, [pc, #0]	@ (800ed48 <_localeconv_r+0x4>)
 800ed46:	4770      	bx	lr
 800ed48:	20000174 	.word	0x20000174

0800ed4c <_close_r>:
 800ed4c:	b538      	push	{r3, r4, r5, lr}
 800ed4e:	2300      	movs	r3, #0
 800ed50:	4d05      	ldr	r5, [pc, #20]	@ (800ed68 <_close_r+0x1c>)
 800ed52:	4604      	mov	r4, r0
 800ed54:	4608      	mov	r0, r1
 800ed56:	602b      	str	r3, [r5, #0]
 800ed58:	f7f4 fdc8 	bl	80038ec <_close>
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	d102      	bne.n	800ed66 <_close_r+0x1a>
 800ed60:	682b      	ldr	r3, [r5, #0]
 800ed62:	b103      	cbz	r3, 800ed66 <_close_r+0x1a>
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	bd38      	pop	{r3, r4, r5, pc}
 800ed68:	20004c08 	.word	0x20004c08

0800ed6c <_lseek_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4d06      	ldr	r5, [pc, #24]	@ (800ed8c <_lseek_r+0x20>)
 800ed72:	4608      	mov	r0, r1
 800ed74:	4611      	mov	r1, r2
 800ed76:	2200      	movs	r2, #0
 800ed78:	602a      	str	r2, [r5, #0]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	f7f4 fddd 	bl	800393a <_lseek>
 800ed80:	1c43      	adds	r3, r0, #1
 800ed82:	d102      	bne.n	800ed8a <_lseek_r+0x1e>
 800ed84:	682b      	ldr	r3, [r5, #0]
 800ed86:	b103      	cbz	r3, 800ed8a <_lseek_r+0x1e>
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	bd38      	pop	{r3, r4, r5, pc}
 800ed8c:	20004c08 	.word	0x20004c08

0800ed90 <_read_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4604      	mov	r4, r0
 800ed94:	4d06      	ldr	r5, [pc, #24]	@ (800edb0 <_read_r+0x20>)
 800ed96:	4608      	mov	r0, r1
 800ed98:	4611      	mov	r1, r2
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	602a      	str	r2, [r5, #0]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	f7f4 fd6b 	bl	800387a <_read>
 800eda4:	1c43      	adds	r3, r0, #1
 800eda6:	d102      	bne.n	800edae <_read_r+0x1e>
 800eda8:	682b      	ldr	r3, [r5, #0]
 800edaa:	b103      	cbz	r3, 800edae <_read_r+0x1e>
 800edac:	6023      	str	r3, [r4, #0]
 800edae:	bd38      	pop	{r3, r4, r5, pc}
 800edb0:	20004c08 	.word	0x20004c08

0800edb4 <_write_r>:
 800edb4:	b538      	push	{r3, r4, r5, lr}
 800edb6:	4604      	mov	r4, r0
 800edb8:	4d06      	ldr	r5, [pc, #24]	@ (800edd4 <_write_r+0x20>)
 800edba:	4608      	mov	r0, r1
 800edbc:	4611      	mov	r1, r2
 800edbe:	2200      	movs	r2, #0
 800edc0:	602a      	str	r2, [r5, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	f7f4 fd76 	bl	80038b4 <_write>
 800edc8:	1c43      	adds	r3, r0, #1
 800edca:	d102      	bne.n	800edd2 <_write_r+0x1e>
 800edcc:	682b      	ldr	r3, [r5, #0]
 800edce:	b103      	cbz	r3, 800edd2 <_write_r+0x1e>
 800edd0:	6023      	str	r3, [r4, #0]
 800edd2:	bd38      	pop	{r3, r4, r5, pc}
 800edd4:	20004c08 	.word	0x20004c08

0800edd8 <__errno>:
 800edd8:	4b01      	ldr	r3, [pc, #4]	@ (800ede0 <__errno+0x8>)
 800edda:	6818      	ldr	r0, [r3, #0]
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	20000034 	.word	0x20000034

0800ede4 <__libc_init_array>:
 800ede4:	b570      	push	{r4, r5, r6, lr}
 800ede6:	4d0d      	ldr	r5, [pc, #52]	@ (800ee1c <__libc_init_array+0x38>)
 800ede8:	2600      	movs	r6, #0
 800edea:	4c0d      	ldr	r4, [pc, #52]	@ (800ee20 <__libc_init_array+0x3c>)
 800edec:	1b64      	subs	r4, r4, r5
 800edee:	10a4      	asrs	r4, r4, #2
 800edf0:	42a6      	cmp	r6, r4
 800edf2:	d109      	bne.n	800ee08 <__libc_init_array+0x24>
 800edf4:	4d0b      	ldr	r5, [pc, #44]	@ (800ee24 <__libc_init_array+0x40>)
 800edf6:	2600      	movs	r6, #0
 800edf8:	4c0b      	ldr	r4, [pc, #44]	@ (800ee28 <__libc_init_array+0x44>)
 800edfa:	f002 f87b 	bl	8010ef4 <_init>
 800edfe:	1b64      	subs	r4, r4, r5
 800ee00:	10a4      	asrs	r4, r4, #2
 800ee02:	42a6      	cmp	r6, r4
 800ee04:	d105      	bne.n	800ee12 <__libc_init_array+0x2e>
 800ee06:	bd70      	pop	{r4, r5, r6, pc}
 800ee08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee0c:	3601      	adds	r6, #1
 800ee0e:	4798      	blx	r3
 800ee10:	e7ee      	b.n	800edf0 <__libc_init_array+0xc>
 800ee12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee16:	3601      	adds	r6, #1
 800ee18:	4798      	blx	r3
 800ee1a:	e7f2      	b.n	800ee02 <__libc_init_array+0x1e>
 800ee1c:	080114d0 	.word	0x080114d0
 800ee20:	080114d0 	.word	0x080114d0
 800ee24:	080114d0 	.word	0x080114d0
 800ee28:	080114d4 	.word	0x080114d4

0800ee2c <__retarget_lock_init_recursive>:
 800ee2c:	4770      	bx	lr

0800ee2e <__retarget_lock_acquire_recursive>:
 800ee2e:	4770      	bx	lr

0800ee30 <__retarget_lock_release_recursive>:
 800ee30:	4770      	bx	lr

0800ee32 <memchr>:
 800ee32:	b2c9      	uxtb	r1, r1
 800ee34:	4603      	mov	r3, r0
 800ee36:	4402      	add	r2, r0
 800ee38:	b510      	push	{r4, lr}
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	d101      	bne.n	800ee44 <memchr+0x12>
 800ee40:	2000      	movs	r0, #0
 800ee42:	e003      	b.n	800ee4c <memchr+0x1a>
 800ee44:	7804      	ldrb	r4, [r0, #0]
 800ee46:	3301      	adds	r3, #1
 800ee48:	428c      	cmp	r4, r1
 800ee4a:	d1f6      	bne.n	800ee3a <memchr+0x8>
 800ee4c:	bd10      	pop	{r4, pc}

0800ee4e <quorem>:
 800ee4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee52:	6903      	ldr	r3, [r0, #16]
 800ee54:	4607      	mov	r7, r0
 800ee56:	690c      	ldr	r4, [r1, #16]
 800ee58:	42a3      	cmp	r3, r4
 800ee5a:	f2c0 8083 	blt.w	800ef64 <quorem+0x116>
 800ee5e:	3c01      	subs	r4, #1
 800ee60:	f100 0514 	add.w	r5, r0, #20
 800ee64:	f101 0814 	add.w	r8, r1, #20
 800ee68:	00a3      	lsls	r3, r4, #2
 800ee6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee78:	9301      	str	r3, [sp, #4]
 800ee7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	429a      	cmp	r2, r3
 800ee82:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee86:	d331      	bcc.n	800eeec <quorem+0x9e>
 800ee88:	f04f 0a00 	mov.w	sl, #0
 800ee8c:	46c4      	mov	ip, r8
 800ee8e:	46ae      	mov	lr, r5
 800ee90:	46d3      	mov	fp, sl
 800ee92:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee96:	b298      	uxth	r0, r3
 800ee98:	45e1      	cmp	r9, ip
 800ee9a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ee9e:	fb06 a000 	mla	r0, r6, r0, sl
 800eea2:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800eea6:	b280      	uxth	r0, r0
 800eea8:	fb06 2303 	mla	r3, r6, r3, r2
 800eeac:	f8de 2000 	ldr.w	r2, [lr]
 800eeb0:	b292      	uxth	r2, r2
 800eeb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eeb6:	eba2 0200 	sub.w	r2, r2, r0
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	f8de 0000 	ldr.w	r0, [lr]
 800eec0:	445a      	add	r2, fp
 800eec2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eec6:	b292      	uxth	r2, r2
 800eec8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eecc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eed0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eed4:	f84e 2b04 	str.w	r2, [lr], #4
 800eed8:	d2db      	bcs.n	800ee92 <quorem+0x44>
 800eeda:	9b00      	ldr	r3, [sp, #0]
 800eedc:	58eb      	ldr	r3, [r5, r3]
 800eede:	b92b      	cbnz	r3, 800eeec <quorem+0x9e>
 800eee0:	9b01      	ldr	r3, [sp, #4]
 800eee2:	3b04      	subs	r3, #4
 800eee4:	429d      	cmp	r5, r3
 800eee6:	461a      	mov	r2, r3
 800eee8:	d330      	bcc.n	800ef4c <quorem+0xfe>
 800eeea:	613c      	str	r4, [r7, #16]
 800eeec:	4638      	mov	r0, r7
 800eeee:	f001 f97b 	bl	80101e8 <__mcmp>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	db26      	blt.n	800ef44 <quorem+0xf6>
 800eef6:	4629      	mov	r1, r5
 800eef8:	2000      	movs	r0, #0
 800eefa:	f858 2b04 	ldr.w	r2, [r8], #4
 800eefe:	f8d1 c000 	ldr.w	ip, [r1]
 800ef02:	fa1f fe82 	uxth.w	lr, r2
 800ef06:	45c1      	cmp	r9, r8
 800ef08:	fa1f f38c 	uxth.w	r3, ip
 800ef0c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ef10:	eba3 030e 	sub.w	r3, r3, lr
 800ef14:	4403      	add	r3, r0
 800ef16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ef20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef24:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef28:	f841 3b04 	str.w	r3, [r1], #4
 800ef2c:	d2e5      	bcs.n	800eefa <quorem+0xac>
 800ef2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef36:	b922      	cbnz	r2, 800ef42 <quorem+0xf4>
 800ef38:	3b04      	subs	r3, #4
 800ef3a:	429d      	cmp	r5, r3
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	d30b      	bcc.n	800ef58 <quorem+0x10a>
 800ef40:	613c      	str	r4, [r7, #16]
 800ef42:	3601      	adds	r6, #1
 800ef44:	4630      	mov	r0, r6
 800ef46:	b003      	add	sp, #12
 800ef48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4c:	6812      	ldr	r2, [r2, #0]
 800ef4e:	3b04      	subs	r3, #4
 800ef50:	2a00      	cmp	r2, #0
 800ef52:	d1ca      	bne.n	800eeea <quorem+0x9c>
 800ef54:	3c01      	subs	r4, #1
 800ef56:	e7c5      	b.n	800eee4 <quorem+0x96>
 800ef58:	6812      	ldr	r2, [r2, #0]
 800ef5a:	3b04      	subs	r3, #4
 800ef5c:	2a00      	cmp	r2, #0
 800ef5e:	d1ef      	bne.n	800ef40 <quorem+0xf2>
 800ef60:	3c01      	subs	r4, #1
 800ef62:	e7ea      	b.n	800ef3a <quorem+0xec>
 800ef64:	2000      	movs	r0, #0
 800ef66:	e7ee      	b.n	800ef46 <quorem+0xf8>

0800ef68 <_dtoa_r>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	69c7      	ldr	r7, [r0, #28]
 800ef6e:	b099      	sub	sp, #100	@ 0x64
 800ef70:	4683      	mov	fp, r0
 800ef72:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ef74:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef76:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef7a:	ec55 4b10 	vmov	r4, r5, d0
 800ef7e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ef82:	b97f      	cbnz	r7, 800efa4 <_dtoa_r+0x3c>
 800ef84:	2010      	movs	r0, #16
 800ef86:	f000 fdfd 	bl	800fb84 <malloc>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ef90:	b920      	cbnz	r0, 800ef9c <_dtoa_r+0x34>
 800ef92:	4ba7      	ldr	r3, [pc, #668]	@ (800f230 <_dtoa_r+0x2c8>)
 800ef94:	21ef      	movs	r1, #239	@ 0xef
 800ef96:	48a7      	ldr	r0, [pc, #668]	@ (800f234 <_dtoa_r+0x2cc>)
 800ef98:	f001 fc6e 	bl	8010878 <__assert_func>
 800ef9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800efa0:	6007      	str	r7, [r0, #0]
 800efa2:	60c7      	str	r7, [r0, #12]
 800efa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800efa8:	6819      	ldr	r1, [r3, #0]
 800efaa:	b159      	cbz	r1, 800efc4 <_dtoa_r+0x5c>
 800efac:	685a      	ldr	r2, [r3, #4]
 800efae:	2301      	movs	r3, #1
 800efb0:	4658      	mov	r0, fp
 800efb2:	4093      	lsls	r3, r2
 800efb4:	604a      	str	r2, [r1, #4]
 800efb6:	608b      	str	r3, [r1, #8]
 800efb8:	f000 feda 	bl	800fd70 <_Bfree>
 800efbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800efc0:	2200      	movs	r2, #0
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	1e2b      	subs	r3, r5, #0
 800efc6:	bfb7      	itett	lt
 800efc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800efcc:	2300      	movge	r3, #0
 800efce:	2201      	movlt	r2, #1
 800efd0:	9303      	strlt	r3, [sp, #12]
 800efd2:	bfa8      	it	ge
 800efd4:	6033      	strge	r3, [r6, #0]
 800efd6:	9f03      	ldr	r7, [sp, #12]
 800efd8:	4b97      	ldr	r3, [pc, #604]	@ (800f238 <_dtoa_r+0x2d0>)
 800efda:	bfb8      	it	lt
 800efdc:	6032      	strlt	r2, [r6, #0]
 800efde:	43bb      	bics	r3, r7
 800efe0:	d112      	bne.n	800f008 <_dtoa_r+0xa0>
 800efe2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800efe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800efe8:	6013      	str	r3, [r2, #0]
 800efea:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800efee:	4323      	orrs	r3, r4
 800eff0:	f000 854c 	beq.w	800fa8c <_dtoa_r+0xb24>
 800eff4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eff6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f24c <_dtoa_r+0x2e4>
 800effa:	2b00      	cmp	r3, #0
 800effc:	f000 854e 	beq.w	800fa9c <_dtoa_r+0xb34>
 800f000:	f10a 0303 	add.w	r3, sl, #3
 800f004:	f000 bd48 	b.w	800fa98 <_dtoa_r+0xb30>
 800f008:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f00c:	2200      	movs	r2, #0
 800f00e:	2300      	movs	r3, #0
 800f010:	ec51 0b17 	vmov	r0, r1, d7
 800f014:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f018:	f7f1 fd66 	bl	8000ae8 <__aeabi_dcmpeq>
 800f01c:	4680      	mov	r8, r0
 800f01e:	b158      	cbz	r0, 800f038 <_dtoa_r+0xd0>
 800f020:	2301      	movs	r3, #1
 800f022:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f024:	6013      	str	r3, [r2, #0]
 800f026:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f028:	b113      	cbz	r3, 800f030 <_dtoa_r+0xc8>
 800f02a:	4b84      	ldr	r3, [pc, #528]	@ (800f23c <_dtoa_r+0x2d4>)
 800f02c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f02e:	6013      	str	r3, [r2, #0]
 800f030:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800f250 <_dtoa_r+0x2e8>
 800f034:	f000 bd32 	b.w	800fa9c <_dtoa_r+0xb34>
 800f038:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f03c:	aa16      	add	r2, sp, #88	@ 0x58
 800f03e:	a917      	add	r1, sp, #92	@ 0x5c
 800f040:	4658      	mov	r0, fp
 800f042:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f046:	f001 f983 	bl	8010350 <__d2b>
 800f04a:	4681      	mov	r9, r0
 800f04c:	2e00      	cmp	r6, #0
 800f04e:	d075      	beq.n	800f13c <_dtoa_r+0x1d4>
 800f050:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f052:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f056:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f05a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f05e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f062:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f066:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f06a:	4619      	mov	r1, r3
 800f06c:	2200      	movs	r2, #0
 800f06e:	4b74      	ldr	r3, [pc, #464]	@ (800f240 <_dtoa_r+0x2d8>)
 800f070:	f7f1 f91a 	bl	80002a8 <__aeabi_dsub>
 800f074:	a368      	add	r3, pc, #416	@ (adr r3, 800f218 <_dtoa_r+0x2b0>)
 800f076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07a:	f7f1 facd 	bl	8000618 <__aeabi_dmul>
 800f07e:	a368      	add	r3, pc, #416	@ (adr r3, 800f220 <_dtoa_r+0x2b8>)
 800f080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f084:	f7f1 f912 	bl	80002ac <__adddf3>
 800f088:	4604      	mov	r4, r0
 800f08a:	460d      	mov	r5, r1
 800f08c:	4630      	mov	r0, r6
 800f08e:	f7f1 fa59 	bl	8000544 <__aeabi_i2d>
 800f092:	a365      	add	r3, pc, #404	@ (adr r3, 800f228 <_dtoa_r+0x2c0>)
 800f094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f098:	f7f1 fabe 	bl	8000618 <__aeabi_dmul>
 800f09c:	4602      	mov	r2, r0
 800f09e:	460b      	mov	r3, r1
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	f7f1 f902 	bl	80002ac <__adddf3>
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	460d      	mov	r5, r1
 800f0ac:	f7f1 fd64 	bl	8000b78 <__aeabi_d2iz>
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4607      	mov	r7, r0
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	f7f1 fd1f 	bl	8000afc <__aeabi_dcmplt>
 800f0be:	b140      	cbz	r0, 800f0d2 <_dtoa_r+0x16a>
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	f7f1 fa3f 	bl	8000544 <__aeabi_i2d>
 800f0c6:	4622      	mov	r2, r4
 800f0c8:	462b      	mov	r3, r5
 800f0ca:	f7f1 fd0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0ce:	b900      	cbnz	r0, 800f0d2 <_dtoa_r+0x16a>
 800f0d0:	3f01      	subs	r7, #1
 800f0d2:	2f16      	cmp	r7, #22
 800f0d4:	d851      	bhi.n	800f17a <_dtoa_r+0x212>
 800f0d6:	4b5b      	ldr	r3, [pc, #364]	@ (800f244 <_dtoa_r+0x2dc>)
 800f0d8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f0dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	f7f1 fd0a 	bl	8000afc <__aeabi_dcmplt>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d048      	beq.n	800f17e <_dtoa_r+0x216>
 800f0ec:	3f01      	subs	r7, #1
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	9312      	str	r3, [sp, #72]	@ 0x48
 800f0f2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f0f4:	1b9b      	subs	r3, r3, r6
 800f0f6:	1e5a      	subs	r2, r3, #1
 800f0f8:	bf46      	itte	mi
 800f0fa:	f1c3 0801 	rsbmi	r8, r3, #1
 800f0fe:	2300      	movmi	r3, #0
 800f100:	f04f 0800 	movpl.w	r8, #0
 800f104:	9208      	str	r2, [sp, #32]
 800f106:	bf48      	it	mi
 800f108:	9308      	strmi	r3, [sp, #32]
 800f10a:	2f00      	cmp	r7, #0
 800f10c:	db39      	blt.n	800f182 <_dtoa_r+0x21a>
 800f10e:	9b08      	ldr	r3, [sp, #32]
 800f110:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f112:	443b      	add	r3, r7
 800f114:	9308      	str	r3, [sp, #32]
 800f116:	2300      	movs	r3, #0
 800f118:	930a      	str	r3, [sp, #40]	@ 0x28
 800f11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f11c:	2b09      	cmp	r3, #9
 800f11e:	d864      	bhi.n	800f1ea <_dtoa_r+0x282>
 800f120:	2b05      	cmp	r3, #5
 800f122:	bfc5      	ittet	gt
 800f124:	3b04      	subgt	r3, #4
 800f126:	2400      	movgt	r4, #0
 800f128:	2401      	movle	r4, #1
 800f12a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f12c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f12e:	3b02      	subs	r3, #2
 800f130:	2b03      	cmp	r3, #3
 800f132:	d865      	bhi.n	800f200 <_dtoa_r+0x298>
 800f134:	e8df f003 	tbb	[pc, r3]
 800f138:	5737392c 	.word	0x5737392c
 800f13c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f140:	441e      	add	r6, r3
 800f142:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f146:	2b20      	cmp	r3, #32
 800f148:	bfc9      	itett	gt
 800f14a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f14e:	f1c3 0320 	rsble	r3, r3, #32
 800f152:	409f      	lslgt	r7, r3
 800f154:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f158:	bfd8      	it	le
 800f15a:	fa04 f003 	lslle.w	r0, r4, r3
 800f15e:	f106 36ff 	add.w	r6, r6, #4294967295
 800f162:	bfc4      	itt	gt
 800f164:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f168:	ea47 0003 	orrgt.w	r0, r7, r3
 800f16c:	f7f1 f9da 	bl	8000524 <__aeabi_ui2d>
 800f170:	2201      	movs	r2, #1
 800f172:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f176:	9214      	str	r2, [sp, #80]	@ 0x50
 800f178:	e777      	b.n	800f06a <_dtoa_r+0x102>
 800f17a:	2301      	movs	r3, #1
 800f17c:	e7b8      	b.n	800f0f0 <_dtoa_r+0x188>
 800f17e:	9012      	str	r0, [sp, #72]	@ 0x48
 800f180:	e7b7      	b.n	800f0f2 <_dtoa_r+0x18a>
 800f182:	427b      	negs	r3, r7
 800f184:	eba8 0807 	sub.w	r8, r8, r7
 800f188:	930a      	str	r3, [sp, #40]	@ 0x28
 800f18a:	2300      	movs	r3, #0
 800f18c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f18e:	e7c4      	b.n	800f11a <_dtoa_r+0x1b2>
 800f190:	2300      	movs	r3, #0
 800f192:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f196:	2b00      	cmp	r3, #0
 800f198:	dc35      	bgt.n	800f206 <_dtoa_r+0x29e>
 800f19a:	2301      	movs	r3, #1
 800f19c:	461a      	mov	r2, r3
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	9307      	str	r3, [sp, #28]
 800f1a2:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1a4:	e00b      	b.n	800f1be <_dtoa_r+0x256>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e7f3      	b.n	800f192 <_dtoa_r+0x22a>
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1b0:	18fb      	adds	r3, r7, r3
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	9307      	str	r3, [sp, #28]
 800f1ba:	bfb8      	it	lt
 800f1bc:	2301      	movlt	r3, #1
 800f1be:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	2204      	movs	r2, #4
 800f1c6:	f102 0514 	add.w	r5, r2, #20
 800f1ca:	429d      	cmp	r5, r3
 800f1cc:	d91f      	bls.n	800f20e <_dtoa_r+0x2a6>
 800f1ce:	6041      	str	r1, [r0, #4]
 800f1d0:	4658      	mov	r0, fp
 800f1d2:	f000 fd8d 	bl	800fcf0 <_Balloc>
 800f1d6:	4682      	mov	sl, r0
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d13b      	bne.n	800f254 <_dtoa_r+0x2ec>
 800f1dc:	4b1a      	ldr	r3, [pc, #104]	@ (800f248 <_dtoa_r+0x2e0>)
 800f1de:	4602      	mov	r2, r0
 800f1e0:	f240 11af 	movw	r1, #431	@ 0x1af
 800f1e4:	e6d7      	b.n	800ef96 <_dtoa_r+0x2e>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e7e0      	b.n	800f1ac <_dtoa_r+0x244>
 800f1ea:	2401      	movs	r4, #1
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f1f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	9300      	str	r3, [sp, #0]
 800f1fa:	9307      	str	r3, [sp, #28]
 800f1fc:	2312      	movs	r3, #18
 800f1fe:	e7d0      	b.n	800f1a2 <_dtoa_r+0x23a>
 800f200:	2301      	movs	r3, #1
 800f202:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f204:	e7f5      	b.n	800f1f2 <_dtoa_r+0x28a>
 800f206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	9307      	str	r3, [sp, #28]
 800f20c:	e7d7      	b.n	800f1be <_dtoa_r+0x256>
 800f20e:	3101      	adds	r1, #1
 800f210:	0052      	lsls	r2, r2, #1
 800f212:	e7d8      	b.n	800f1c6 <_dtoa_r+0x25e>
 800f214:	f3af 8000 	nop.w
 800f218:	636f4361 	.word	0x636f4361
 800f21c:	3fd287a7 	.word	0x3fd287a7
 800f220:	8b60c8b3 	.word	0x8b60c8b3
 800f224:	3fc68a28 	.word	0x3fc68a28
 800f228:	509f79fb 	.word	0x509f79fb
 800f22c:	3fd34413 	.word	0x3fd34413
 800f230:	08011195 	.word	0x08011195
 800f234:	080111ac 	.word	0x080111ac
 800f238:	7ff00000 	.word	0x7ff00000
 800f23c:	08011165 	.word	0x08011165
 800f240:	3ff80000 	.word	0x3ff80000
 800f244:	080112a8 	.word	0x080112a8
 800f248:	08011204 	.word	0x08011204
 800f24c:	08011191 	.word	0x08011191
 800f250:	08011164 	.word	0x08011164
 800f254:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f258:	6018      	str	r0, [r3, #0]
 800f25a:	9b07      	ldr	r3, [sp, #28]
 800f25c:	2b0e      	cmp	r3, #14
 800f25e:	f200 80a4 	bhi.w	800f3aa <_dtoa_r+0x442>
 800f262:	2c00      	cmp	r4, #0
 800f264:	f000 80a1 	beq.w	800f3aa <_dtoa_r+0x442>
 800f268:	2f00      	cmp	r7, #0
 800f26a:	dd33      	ble.n	800f2d4 <_dtoa_r+0x36c>
 800f26c:	f007 020f 	and.w	r2, r7, #15
 800f270:	4bac      	ldr	r3, [pc, #688]	@ (800f524 <_dtoa_r+0x5bc>)
 800f272:	05f8      	lsls	r0, r7, #23
 800f274:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f27c:	ed93 7b00 	vldr	d7, [r3]
 800f280:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f284:	d516      	bpl.n	800f2b4 <_dtoa_r+0x34c>
 800f286:	4ba8      	ldr	r3, [pc, #672]	@ (800f528 <_dtoa_r+0x5c0>)
 800f288:	f004 040f 	and.w	r4, r4, #15
 800f28c:	2603      	movs	r6, #3
 800f28e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f292:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f296:	f7f1 fae9 	bl	800086c <__aeabi_ddiv>
 800f29a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f29e:	4da2      	ldr	r5, [pc, #648]	@ (800f528 <_dtoa_r+0x5c0>)
 800f2a0:	b954      	cbnz	r4, 800f2b8 <_dtoa_r+0x350>
 800f2a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2aa:	f7f1 fadf 	bl	800086c <__aeabi_ddiv>
 800f2ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2b2:	e028      	b.n	800f306 <_dtoa_r+0x39e>
 800f2b4:	2602      	movs	r6, #2
 800f2b6:	e7f2      	b.n	800f29e <_dtoa_r+0x336>
 800f2b8:	07e1      	lsls	r1, r4, #31
 800f2ba:	d508      	bpl.n	800f2ce <_dtoa_r+0x366>
 800f2bc:	3601      	adds	r6, #1
 800f2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f2c6:	f7f1 f9a7 	bl	8000618 <__aeabi_dmul>
 800f2ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f2ce:	1064      	asrs	r4, r4, #1
 800f2d0:	3508      	adds	r5, #8
 800f2d2:	e7e5      	b.n	800f2a0 <_dtoa_r+0x338>
 800f2d4:	f000 80d2 	beq.w	800f47c <_dtoa_r+0x514>
 800f2d8:	427c      	negs	r4, r7
 800f2da:	4b92      	ldr	r3, [pc, #584]	@ (800f524 <_dtoa_r+0x5bc>)
 800f2dc:	4d92      	ldr	r5, [pc, #584]	@ (800f528 <_dtoa_r+0x5c0>)
 800f2de:	2602      	movs	r6, #2
 800f2e0:	f004 020f 	and.w	r2, r4, #15
 800f2e4:	1124      	asrs	r4, r4, #4
 800f2e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f2:	f7f1 f991 	bl	8000618 <__aeabi_dmul>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2fc:	2c00      	cmp	r4, #0
 800f2fe:	f040 80b2 	bne.w	800f466 <_dtoa_r+0x4fe>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d1d3      	bne.n	800f2ae <_dtoa_r+0x346>
 800f306:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f308:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f000 80b7 	beq.w	800f480 <_dtoa_r+0x518>
 800f312:	2200      	movs	r2, #0
 800f314:	4b85      	ldr	r3, [pc, #532]	@ (800f52c <_dtoa_r+0x5c4>)
 800f316:	4620      	mov	r0, r4
 800f318:	4629      	mov	r1, r5
 800f31a:	f7f1 fbef 	bl	8000afc <__aeabi_dcmplt>
 800f31e:	2800      	cmp	r0, #0
 800f320:	f000 80ae 	beq.w	800f480 <_dtoa_r+0x518>
 800f324:	9b07      	ldr	r3, [sp, #28]
 800f326:	2b00      	cmp	r3, #0
 800f328:	f000 80aa 	beq.w	800f480 <_dtoa_r+0x518>
 800f32c:	9b00      	ldr	r3, [sp, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	dd37      	ble.n	800f3a2 <_dtoa_r+0x43a>
 800f332:	1e7b      	subs	r3, r7, #1
 800f334:	4620      	mov	r0, r4
 800f336:	2200      	movs	r2, #0
 800f338:	4629      	mov	r1, r5
 800f33a:	9304      	str	r3, [sp, #16]
 800f33c:	3601      	adds	r6, #1
 800f33e:	4b7c      	ldr	r3, [pc, #496]	@ (800f530 <_dtoa_r+0x5c8>)
 800f340:	f7f1 f96a 	bl	8000618 <__aeabi_dmul>
 800f344:	9c00      	ldr	r4, [sp, #0]
 800f346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f34a:	4630      	mov	r0, r6
 800f34c:	f7f1 f8fa 	bl	8000544 <__aeabi_i2d>
 800f350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f354:	f7f1 f960 	bl	8000618 <__aeabi_dmul>
 800f358:	2200      	movs	r2, #0
 800f35a:	4b76      	ldr	r3, [pc, #472]	@ (800f534 <_dtoa_r+0x5cc>)
 800f35c:	f7f0 ffa6 	bl	80002ac <__adddf3>
 800f360:	4605      	mov	r5, r0
 800f362:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f366:	2c00      	cmp	r4, #0
 800f368:	f040 808d 	bne.w	800f486 <_dtoa_r+0x51e>
 800f36c:	2200      	movs	r2, #0
 800f36e:	4b72      	ldr	r3, [pc, #456]	@ (800f538 <_dtoa_r+0x5d0>)
 800f370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f374:	f7f0 ff98 	bl	80002a8 <__aeabi_dsub>
 800f378:	4602      	mov	r2, r0
 800f37a:	460b      	mov	r3, r1
 800f37c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f380:	462a      	mov	r2, r5
 800f382:	4633      	mov	r3, r6
 800f384:	f7f1 fbd8 	bl	8000b38 <__aeabi_dcmpgt>
 800f388:	2800      	cmp	r0, #0
 800f38a:	f040 828b 	bne.w	800f8a4 <_dtoa_r+0x93c>
 800f38e:	462a      	mov	r2, r5
 800f390:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f398:	f7f1 fbb0 	bl	8000afc <__aeabi_dcmplt>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f040 8128 	bne.w	800f5f2 <_dtoa_r+0x68a>
 800f3a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f3a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f3aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f2c0 815a 	blt.w	800f666 <_dtoa_r+0x6fe>
 800f3b2:	2f0e      	cmp	r7, #14
 800f3b4:	f300 8157 	bgt.w	800f666 <_dtoa_r+0x6fe>
 800f3b8:	4b5a      	ldr	r3, [pc, #360]	@ (800f524 <_dtoa_r+0x5bc>)
 800f3ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f3be:	ed93 7b00 	vldr	d7, [r3]
 800f3c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	ed8d 7b00 	vstr	d7, [sp]
 800f3ca:	da03      	bge.n	800f3d4 <_dtoa_r+0x46c>
 800f3cc:	9b07      	ldr	r3, [sp, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f340 8101 	ble.w	800f5d6 <_dtoa_r+0x66e>
 800f3d4:	4656      	mov	r6, sl
 800f3d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f3da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3de:	4620      	mov	r0, r4
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	f7f1 fa43 	bl	800086c <__aeabi_ddiv>
 800f3e6:	f7f1 fbc7 	bl	8000b78 <__aeabi_d2iz>
 800f3ea:	4680      	mov	r8, r0
 800f3ec:	f7f1 f8aa 	bl	8000544 <__aeabi_i2d>
 800f3f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3f4:	f7f1 f910 	bl	8000618 <__aeabi_dmul>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f400:	460b      	mov	r3, r1
 800f402:	4629      	mov	r1, r5
 800f404:	f7f0 ff50 	bl	80002a8 <__aeabi_dsub>
 800f408:	9d07      	ldr	r5, [sp, #28]
 800f40a:	f806 4b01 	strb.w	r4, [r6], #1
 800f40e:	eba6 040a 	sub.w	r4, r6, sl
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	42a5      	cmp	r5, r4
 800f418:	f040 8117 	bne.w	800f64a <_dtoa_r+0x6e2>
 800f41c:	f7f0 ff46 	bl	80002ac <__adddf3>
 800f420:	4604      	mov	r4, r0
 800f422:	460d      	mov	r5, r1
 800f424:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f428:	f7f1 fb86 	bl	8000b38 <__aeabi_dcmpgt>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	f040 80f9 	bne.w	800f624 <_dtoa_r+0x6bc>
 800f432:	4620      	mov	r0, r4
 800f434:	4629      	mov	r1, r5
 800f436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f43a:	f7f1 fb55 	bl	8000ae8 <__aeabi_dcmpeq>
 800f43e:	b118      	cbz	r0, 800f448 <_dtoa_r+0x4e0>
 800f440:	f018 0f01 	tst.w	r8, #1
 800f444:	f040 80ee 	bne.w	800f624 <_dtoa_r+0x6bc>
 800f448:	4649      	mov	r1, r9
 800f44a:	4658      	mov	r0, fp
 800f44c:	f000 fc90 	bl	800fd70 <_Bfree>
 800f450:	2300      	movs	r3, #0
 800f452:	3701      	adds	r7, #1
 800f454:	7033      	strb	r3, [r6, #0]
 800f456:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f458:	601f      	str	r7, [r3, #0]
 800f45a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 831d 	beq.w	800fa9c <_dtoa_r+0xb34>
 800f462:	601e      	str	r6, [r3, #0]
 800f464:	e31a      	b.n	800fa9c <_dtoa_r+0xb34>
 800f466:	07e2      	lsls	r2, r4, #31
 800f468:	d505      	bpl.n	800f476 <_dtoa_r+0x50e>
 800f46a:	3601      	adds	r6, #1
 800f46c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f470:	f7f1 f8d2 	bl	8000618 <__aeabi_dmul>
 800f474:	2301      	movs	r3, #1
 800f476:	1064      	asrs	r4, r4, #1
 800f478:	3508      	adds	r5, #8
 800f47a:	e73f      	b.n	800f2fc <_dtoa_r+0x394>
 800f47c:	2602      	movs	r6, #2
 800f47e:	e742      	b.n	800f306 <_dtoa_r+0x39e>
 800f480:	9c07      	ldr	r4, [sp, #28]
 800f482:	9704      	str	r7, [sp, #16]
 800f484:	e761      	b.n	800f34a <_dtoa_r+0x3e2>
 800f486:	4b27      	ldr	r3, [pc, #156]	@ (800f524 <_dtoa_r+0x5bc>)
 800f488:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f48a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f48e:	4454      	add	r4, sl
 800f490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f494:	2900      	cmp	r1, #0
 800f496:	d053      	beq.n	800f540 <_dtoa_r+0x5d8>
 800f498:	2000      	movs	r0, #0
 800f49a:	4928      	ldr	r1, [pc, #160]	@ (800f53c <_dtoa_r+0x5d4>)
 800f49c:	f7f1 f9e6 	bl	800086c <__aeabi_ddiv>
 800f4a0:	4633      	mov	r3, r6
 800f4a2:	4656      	mov	r6, sl
 800f4a4:	462a      	mov	r2, r5
 800f4a6:	f7f0 feff 	bl	80002a8 <__aeabi_dsub>
 800f4aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4b2:	f7f1 fb61 	bl	8000b78 <__aeabi_d2iz>
 800f4b6:	4605      	mov	r5, r0
 800f4b8:	f7f1 f844 	bl	8000544 <__aeabi_i2d>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	3530      	adds	r5, #48	@ 0x30
 800f4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4c6:	f7f0 feef 	bl	80002a8 <__aeabi_dsub>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	f806 5b01 	strb.w	r5, [r6], #1
 800f4d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f4da:	f7f1 fb0f 	bl	8000afc <__aeabi_dcmplt>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d171      	bne.n	800f5c6 <_dtoa_r+0x65e>
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	4911      	ldr	r1, [pc, #68]	@ (800f52c <_dtoa_r+0x5c4>)
 800f4e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4ea:	f7f0 fedd 	bl	80002a8 <__aeabi_dsub>
 800f4ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f4f2:	f7f1 fb03 	bl	8000afc <__aeabi_dcmplt>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	f040 8095 	bne.w	800f626 <_dtoa_r+0x6be>
 800f4fc:	42a6      	cmp	r6, r4
 800f4fe:	f43f af50 	beq.w	800f3a2 <_dtoa_r+0x43a>
 800f502:	2200      	movs	r2, #0
 800f504:	4b0a      	ldr	r3, [pc, #40]	@ (800f530 <_dtoa_r+0x5c8>)
 800f506:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f50a:	f7f1 f885 	bl	8000618 <__aeabi_dmul>
 800f50e:	2200      	movs	r2, #0
 800f510:	4b07      	ldr	r3, [pc, #28]	@ (800f530 <_dtoa_r+0x5c8>)
 800f512:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f51a:	f7f1 f87d 	bl	8000618 <__aeabi_dmul>
 800f51e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f522:	e7c4      	b.n	800f4ae <_dtoa_r+0x546>
 800f524:	080112a8 	.word	0x080112a8
 800f528:	08011280 	.word	0x08011280
 800f52c:	3ff00000 	.word	0x3ff00000
 800f530:	40240000 	.word	0x40240000
 800f534:	401c0000 	.word	0x401c0000
 800f538:	40140000 	.word	0x40140000
 800f53c:	3fe00000 	.word	0x3fe00000
 800f540:	4631      	mov	r1, r6
 800f542:	4656      	mov	r6, sl
 800f544:	4628      	mov	r0, r5
 800f546:	f7f1 f867 	bl	8000618 <__aeabi_dmul>
 800f54a:	9415      	str	r4, [sp, #84]	@ 0x54
 800f54c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f554:	f7f1 fb10 	bl	8000b78 <__aeabi_d2iz>
 800f558:	4605      	mov	r5, r0
 800f55a:	f7f0 fff3 	bl	8000544 <__aeabi_i2d>
 800f55e:	4602      	mov	r2, r0
 800f560:	3530      	adds	r5, #48	@ 0x30
 800f562:	460b      	mov	r3, r1
 800f564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f568:	f7f0 fe9e 	bl	80002a8 <__aeabi_dsub>
 800f56c:	f806 5b01 	strb.w	r5, [r6], #1
 800f570:	4602      	mov	r2, r0
 800f572:	460b      	mov	r3, r1
 800f574:	42a6      	cmp	r6, r4
 800f576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f57a:	f04f 0200 	mov.w	r2, #0
 800f57e:	d124      	bne.n	800f5ca <_dtoa_r+0x662>
 800f580:	4bac      	ldr	r3, [pc, #688]	@ (800f834 <_dtoa_r+0x8cc>)
 800f582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f586:	f7f0 fe91 	bl	80002ac <__adddf3>
 800f58a:	4602      	mov	r2, r0
 800f58c:	460b      	mov	r3, r1
 800f58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f592:	f7f1 fad1 	bl	8000b38 <__aeabi_dcmpgt>
 800f596:	2800      	cmp	r0, #0
 800f598:	d145      	bne.n	800f626 <_dtoa_r+0x6be>
 800f59a:	2000      	movs	r0, #0
 800f59c:	49a5      	ldr	r1, [pc, #660]	@ (800f834 <_dtoa_r+0x8cc>)
 800f59e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5a2:	f7f0 fe81 	bl	80002a8 <__aeabi_dsub>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ae:	f7f1 faa5 	bl	8000afc <__aeabi_dcmplt>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	f43f aef5 	beq.w	800f3a2 <_dtoa_r+0x43a>
 800f5b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f5ba:	1e73      	subs	r3, r6, #1
 800f5bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800f5be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f5c2:	2b30      	cmp	r3, #48	@ 0x30
 800f5c4:	d0f8      	beq.n	800f5b8 <_dtoa_r+0x650>
 800f5c6:	9f04      	ldr	r7, [sp, #16]
 800f5c8:	e73e      	b.n	800f448 <_dtoa_r+0x4e0>
 800f5ca:	4b9b      	ldr	r3, [pc, #620]	@ (800f838 <_dtoa_r+0x8d0>)
 800f5cc:	f7f1 f824 	bl	8000618 <__aeabi_dmul>
 800f5d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5d4:	e7bc      	b.n	800f550 <_dtoa_r+0x5e8>
 800f5d6:	d10c      	bne.n	800f5f2 <_dtoa_r+0x68a>
 800f5d8:	2200      	movs	r2, #0
 800f5da:	4b98      	ldr	r3, [pc, #608]	@ (800f83c <_dtoa_r+0x8d4>)
 800f5dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5e0:	f7f1 f81a 	bl	8000618 <__aeabi_dmul>
 800f5e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5e8:	f7f1 fa9c 	bl	8000b24 <__aeabi_dcmpge>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f000 8157 	beq.w	800f8a0 <_dtoa_r+0x938>
 800f5f2:	2400      	movs	r4, #0
 800f5f4:	4625      	mov	r5, r4
 800f5f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5f8:	4656      	mov	r6, sl
 800f5fa:	43db      	mvns	r3, r3
 800f5fc:	9304      	str	r3, [sp, #16]
 800f5fe:	2700      	movs	r7, #0
 800f600:	4621      	mov	r1, r4
 800f602:	4658      	mov	r0, fp
 800f604:	f000 fbb4 	bl	800fd70 <_Bfree>
 800f608:	2d00      	cmp	r5, #0
 800f60a:	d0dc      	beq.n	800f5c6 <_dtoa_r+0x65e>
 800f60c:	b12f      	cbz	r7, 800f61a <_dtoa_r+0x6b2>
 800f60e:	42af      	cmp	r7, r5
 800f610:	d003      	beq.n	800f61a <_dtoa_r+0x6b2>
 800f612:	4639      	mov	r1, r7
 800f614:	4658      	mov	r0, fp
 800f616:	f000 fbab 	bl	800fd70 <_Bfree>
 800f61a:	4629      	mov	r1, r5
 800f61c:	4658      	mov	r0, fp
 800f61e:	f000 fba7 	bl	800fd70 <_Bfree>
 800f622:	e7d0      	b.n	800f5c6 <_dtoa_r+0x65e>
 800f624:	9704      	str	r7, [sp, #16]
 800f626:	4633      	mov	r3, r6
 800f628:	461e      	mov	r6, r3
 800f62a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f62e:	2a39      	cmp	r2, #57	@ 0x39
 800f630:	d107      	bne.n	800f642 <_dtoa_r+0x6da>
 800f632:	459a      	cmp	sl, r3
 800f634:	d1f8      	bne.n	800f628 <_dtoa_r+0x6c0>
 800f636:	9a04      	ldr	r2, [sp, #16]
 800f638:	3201      	adds	r2, #1
 800f63a:	9204      	str	r2, [sp, #16]
 800f63c:	2230      	movs	r2, #48	@ 0x30
 800f63e:	f88a 2000 	strb.w	r2, [sl]
 800f642:	781a      	ldrb	r2, [r3, #0]
 800f644:	3201      	adds	r2, #1
 800f646:	701a      	strb	r2, [r3, #0]
 800f648:	e7bd      	b.n	800f5c6 <_dtoa_r+0x65e>
 800f64a:	2200      	movs	r2, #0
 800f64c:	4b7a      	ldr	r3, [pc, #488]	@ (800f838 <_dtoa_r+0x8d0>)
 800f64e:	f7f0 ffe3 	bl	8000618 <__aeabi_dmul>
 800f652:	2200      	movs	r2, #0
 800f654:	2300      	movs	r3, #0
 800f656:	4604      	mov	r4, r0
 800f658:	460d      	mov	r5, r1
 800f65a:	f7f1 fa45 	bl	8000ae8 <__aeabi_dcmpeq>
 800f65e:	2800      	cmp	r0, #0
 800f660:	f43f aebb 	beq.w	800f3da <_dtoa_r+0x472>
 800f664:	e6f0      	b.n	800f448 <_dtoa_r+0x4e0>
 800f666:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f668:	2a00      	cmp	r2, #0
 800f66a:	f000 80db 	beq.w	800f824 <_dtoa_r+0x8bc>
 800f66e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f670:	2a01      	cmp	r2, #1
 800f672:	f300 80bf 	bgt.w	800f7f4 <_dtoa_r+0x88c>
 800f676:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f678:	2a00      	cmp	r2, #0
 800f67a:	f000 80b7 	beq.w	800f7ec <_dtoa_r+0x884>
 800f67e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f682:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f684:	4646      	mov	r6, r8
 800f686:	9a08      	ldr	r2, [sp, #32]
 800f688:	2101      	movs	r1, #1
 800f68a:	4658      	mov	r0, fp
 800f68c:	4498      	add	r8, r3
 800f68e:	441a      	add	r2, r3
 800f690:	9208      	str	r2, [sp, #32]
 800f692:	f000 fc23 	bl	800fedc <__i2b>
 800f696:	4605      	mov	r5, r0
 800f698:	b15e      	cbz	r6, 800f6b2 <_dtoa_r+0x74a>
 800f69a:	9b08      	ldr	r3, [sp, #32]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	dd08      	ble.n	800f6b2 <_dtoa_r+0x74a>
 800f6a0:	42b3      	cmp	r3, r6
 800f6a2:	9a08      	ldr	r2, [sp, #32]
 800f6a4:	bfa8      	it	ge
 800f6a6:	4633      	movge	r3, r6
 800f6a8:	eba8 0803 	sub.w	r8, r8, r3
 800f6ac:	1af6      	subs	r6, r6, r3
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	9308      	str	r3, [sp, #32]
 800f6b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6b4:	b1f3      	cbz	r3, 800f6f4 <_dtoa_r+0x78c>
 800f6b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 80b7 	beq.w	800f82c <_dtoa_r+0x8c4>
 800f6be:	b18c      	cbz	r4, 800f6e4 <_dtoa_r+0x77c>
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	4658      	mov	r0, fp
 800f6c6:	f000 fcc9 	bl	801005c <__pow5mult>
 800f6ca:	464a      	mov	r2, r9
 800f6cc:	4601      	mov	r1, r0
 800f6ce:	4605      	mov	r5, r0
 800f6d0:	4658      	mov	r0, fp
 800f6d2:	f000 fc19 	bl	800ff08 <__multiply>
 800f6d6:	4649      	mov	r1, r9
 800f6d8:	9004      	str	r0, [sp, #16]
 800f6da:	4658      	mov	r0, fp
 800f6dc:	f000 fb48 	bl	800fd70 <_Bfree>
 800f6e0:	9b04      	ldr	r3, [sp, #16]
 800f6e2:	4699      	mov	r9, r3
 800f6e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6e6:	1b1a      	subs	r2, r3, r4
 800f6e8:	d004      	beq.n	800f6f4 <_dtoa_r+0x78c>
 800f6ea:	4649      	mov	r1, r9
 800f6ec:	4658      	mov	r0, fp
 800f6ee:	f000 fcb5 	bl	801005c <__pow5mult>
 800f6f2:	4681      	mov	r9, r0
 800f6f4:	2101      	movs	r1, #1
 800f6f6:	4658      	mov	r0, fp
 800f6f8:	f000 fbf0 	bl	800fedc <__i2b>
 800f6fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6fe:	4604      	mov	r4, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	f000 81cf 	beq.w	800faa4 <_dtoa_r+0xb3c>
 800f706:	461a      	mov	r2, r3
 800f708:	4601      	mov	r1, r0
 800f70a:	4658      	mov	r0, fp
 800f70c:	f000 fca6 	bl	801005c <__pow5mult>
 800f710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f712:	4604      	mov	r4, r0
 800f714:	2b01      	cmp	r3, #1
 800f716:	f300 8095 	bgt.w	800f844 <_dtoa_r+0x8dc>
 800f71a:	9b02      	ldr	r3, [sp, #8]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f040 8087 	bne.w	800f830 <_dtoa_r+0x8c8>
 800f722:	9b03      	ldr	r3, [sp, #12]
 800f724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f040 8089 	bne.w	800f840 <_dtoa_r+0x8d8>
 800f72e:	9b03      	ldr	r3, [sp, #12]
 800f730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f734:	0d1b      	lsrs	r3, r3, #20
 800f736:	051b      	lsls	r3, r3, #20
 800f738:	b12b      	cbz	r3, 800f746 <_dtoa_r+0x7de>
 800f73a:	9b08      	ldr	r3, [sp, #32]
 800f73c:	f108 0801 	add.w	r8, r8, #1
 800f740:	3301      	adds	r3, #1
 800f742:	9308      	str	r3, [sp, #32]
 800f744:	2301      	movs	r3, #1
 800f746:	930a      	str	r3, [sp, #40]	@ 0x28
 800f748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	f000 81b0 	beq.w	800fab0 <_dtoa_r+0xb48>
 800f750:	6923      	ldr	r3, [r4, #16]
 800f752:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f756:	6918      	ldr	r0, [r3, #16]
 800f758:	f000 fb74 	bl	800fe44 <__hi0bits>
 800f75c:	f1c0 0020 	rsb	r0, r0, #32
 800f760:	9b08      	ldr	r3, [sp, #32]
 800f762:	4418      	add	r0, r3
 800f764:	f010 001f 	ands.w	r0, r0, #31
 800f768:	d077      	beq.n	800f85a <_dtoa_r+0x8f2>
 800f76a:	f1c0 0320 	rsb	r3, r0, #32
 800f76e:	2b04      	cmp	r3, #4
 800f770:	dd6b      	ble.n	800f84a <_dtoa_r+0x8e2>
 800f772:	f1c0 001c 	rsb	r0, r0, #28
 800f776:	9b08      	ldr	r3, [sp, #32]
 800f778:	4480      	add	r8, r0
 800f77a:	4403      	add	r3, r0
 800f77c:	4406      	add	r6, r0
 800f77e:	9308      	str	r3, [sp, #32]
 800f780:	f1b8 0f00 	cmp.w	r8, #0
 800f784:	dd05      	ble.n	800f792 <_dtoa_r+0x82a>
 800f786:	4649      	mov	r1, r9
 800f788:	4642      	mov	r2, r8
 800f78a:	4658      	mov	r0, fp
 800f78c:	f000 fcc0 	bl	8010110 <__lshift>
 800f790:	4681      	mov	r9, r0
 800f792:	9b08      	ldr	r3, [sp, #32]
 800f794:	2b00      	cmp	r3, #0
 800f796:	dd05      	ble.n	800f7a4 <_dtoa_r+0x83c>
 800f798:	4621      	mov	r1, r4
 800f79a:	461a      	mov	r2, r3
 800f79c:	4658      	mov	r0, fp
 800f79e:	f000 fcb7 	bl	8010110 <__lshift>
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d059      	beq.n	800f85e <_dtoa_r+0x8f6>
 800f7aa:	4621      	mov	r1, r4
 800f7ac:	4648      	mov	r0, r9
 800f7ae:	f000 fd1b 	bl	80101e8 <__mcmp>
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	da53      	bge.n	800f85e <_dtoa_r+0x8f6>
 800f7b6:	1e7b      	subs	r3, r7, #1
 800f7b8:	4649      	mov	r1, r9
 800f7ba:	220a      	movs	r2, #10
 800f7bc:	4658      	mov	r0, fp
 800f7be:	9304      	str	r3, [sp, #16]
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	f000 faf7 	bl	800fdb4 <__multadd>
 800f7c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7c8:	4681      	mov	r9, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	f000 8172 	beq.w	800fab4 <_dtoa_r+0xb4c>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	220a      	movs	r2, #10
 800f7d6:	4658      	mov	r0, fp
 800f7d8:	f000 faec 	bl	800fdb4 <__multadd>
 800f7dc:	9b00      	ldr	r3, [sp, #0]
 800f7de:	4605      	mov	r5, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	dc67      	bgt.n	800f8b4 <_dtoa_r+0x94c>
 800f7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	dc41      	bgt.n	800f86e <_dtoa_r+0x906>
 800f7ea:	e063      	b.n	800f8b4 <_dtoa_r+0x94c>
 800f7ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f7ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f7f2:	e746      	b.n	800f682 <_dtoa_r+0x71a>
 800f7f4:	9b07      	ldr	r3, [sp, #28]
 800f7f6:	1e5c      	subs	r4, r3, #1
 800f7f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7fa:	42a3      	cmp	r3, r4
 800f7fc:	bfb7      	itett	lt
 800f7fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f800:	1b1c      	subge	r4, r3, r4
 800f802:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f804:	1ae3      	sublt	r3, r4, r3
 800f806:	bfbe      	ittt	lt
 800f808:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f80a:	2400      	movlt	r4, #0
 800f80c:	18d2      	addlt	r2, r2, r3
 800f80e:	9b07      	ldr	r3, [sp, #28]
 800f810:	bfb8      	it	lt
 800f812:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f814:	2b00      	cmp	r3, #0
 800f816:	bfb5      	itete	lt
 800f818:	eba8 0603 	sublt.w	r6, r8, r3
 800f81c:	4646      	movge	r6, r8
 800f81e:	2300      	movlt	r3, #0
 800f820:	9b07      	ldrge	r3, [sp, #28]
 800f822:	e730      	b.n	800f686 <_dtoa_r+0x71e>
 800f824:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f826:	4646      	mov	r6, r8
 800f828:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f82a:	e735      	b.n	800f698 <_dtoa_r+0x730>
 800f82c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f82e:	e75c      	b.n	800f6ea <_dtoa_r+0x782>
 800f830:	2300      	movs	r3, #0
 800f832:	e788      	b.n	800f746 <_dtoa_r+0x7de>
 800f834:	3fe00000 	.word	0x3fe00000
 800f838:	40240000 	.word	0x40240000
 800f83c:	40140000 	.word	0x40140000
 800f840:	9b02      	ldr	r3, [sp, #8]
 800f842:	e780      	b.n	800f746 <_dtoa_r+0x7de>
 800f844:	2300      	movs	r3, #0
 800f846:	930a      	str	r3, [sp, #40]	@ 0x28
 800f848:	e782      	b.n	800f750 <_dtoa_r+0x7e8>
 800f84a:	d099      	beq.n	800f780 <_dtoa_r+0x818>
 800f84c:	331c      	adds	r3, #28
 800f84e:	9a08      	ldr	r2, [sp, #32]
 800f850:	441a      	add	r2, r3
 800f852:	4498      	add	r8, r3
 800f854:	441e      	add	r6, r3
 800f856:	9208      	str	r2, [sp, #32]
 800f858:	e792      	b.n	800f780 <_dtoa_r+0x818>
 800f85a:	4603      	mov	r3, r0
 800f85c:	e7f6      	b.n	800f84c <_dtoa_r+0x8e4>
 800f85e:	9b07      	ldr	r3, [sp, #28]
 800f860:	9704      	str	r7, [sp, #16]
 800f862:	2b00      	cmp	r3, #0
 800f864:	dc20      	bgt.n	800f8a8 <_dtoa_r+0x940>
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f86a:	2b02      	cmp	r3, #2
 800f86c:	dd1e      	ble.n	800f8ac <_dtoa_r+0x944>
 800f86e:	9b00      	ldr	r3, [sp, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	f47f aec0 	bne.w	800f5f6 <_dtoa_r+0x68e>
 800f876:	4621      	mov	r1, r4
 800f878:	2205      	movs	r2, #5
 800f87a:	4658      	mov	r0, fp
 800f87c:	f000 fa9a 	bl	800fdb4 <__multadd>
 800f880:	4601      	mov	r1, r0
 800f882:	4604      	mov	r4, r0
 800f884:	4648      	mov	r0, r9
 800f886:	f000 fcaf 	bl	80101e8 <__mcmp>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	f77f aeb3 	ble.w	800f5f6 <_dtoa_r+0x68e>
 800f890:	2331      	movs	r3, #49	@ 0x31
 800f892:	4656      	mov	r6, sl
 800f894:	f806 3b01 	strb.w	r3, [r6], #1
 800f898:	9b04      	ldr	r3, [sp, #16]
 800f89a:	3301      	adds	r3, #1
 800f89c:	9304      	str	r3, [sp, #16]
 800f89e:	e6ae      	b.n	800f5fe <_dtoa_r+0x696>
 800f8a0:	9c07      	ldr	r4, [sp, #28]
 800f8a2:	9704      	str	r7, [sp, #16]
 800f8a4:	4625      	mov	r5, r4
 800f8a6:	e7f3      	b.n	800f890 <_dtoa_r+0x928>
 800f8a8:	9b07      	ldr	r3, [sp, #28]
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f000 8104 	beq.w	800fabc <_dtoa_r+0xb54>
 800f8b4:	2e00      	cmp	r6, #0
 800f8b6:	dd05      	ble.n	800f8c4 <_dtoa_r+0x95c>
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	4632      	mov	r2, r6
 800f8bc:	4658      	mov	r0, fp
 800f8be:	f000 fc27 	bl	8010110 <__lshift>
 800f8c2:	4605      	mov	r5, r0
 800f8c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d05a      	beq.n	800f980 <_dtoa_r+0xa18>
 800f8ca:	6869      	ldr	r1, [r5, #4]
 800f8cc:	4658      	mov	r0, fp
 800f8ce:	f000 fa0f 	bl	800fcf0 <_Balloc>
 800f8d2:	4606      	mov	r6, r0
 800f8d4:	b928      	cbnz	r0, 800f8e2 <_dtoa_r+0x97a>
 800f8d6:	4b84      	ldr	r3, [pc, #528]	@ (800fae8 <_dtoa_r+0xb80>)
 800f8d8:	4602      	mov	r2, r0
 800f8da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f8de:	f7ff bb5a 	b.w	800ef96 <_dtoa_r+0x2e>
 800f8e2:	692a      	ldr	r2, [r5, #16]
 800f8e4:	f105 010c 	add.w	r1, r5, #12
 800f8e8:	300c      	adds	r0, #12
 800f8ea:	3202      	adds	r2, #2
 800f8ec:	0092      	lsls	r2, r2, #2
 800f8ee:	f000 ffb5 	bl	801085c <memcpy>
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	4631      	mov	r1, r6
 800f8f6:	4658      	mov	r0, fp
 800f8f8:	f000 fc0a 	bl	8010110 <__lshift>
 800f8fc:	f10a 0301 	add.w	r3, sl, #1
 800f900:	462f      	mov	r7, r5
 800f902:	4605      	mov	r5, r0
 800f904:	9307      	str	r3, [sp, #28]
 800f906:	9b00      	ldr	r3, [sp, #0]
 800f908:	4453      	add	r3, sl
 800f90a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f90c:	9b02      	ldr	r3, [sp, #8]
 800f90e:	f003 0301 	and.w	r3, r3, #1
 800f912:	930a      	str	r3, [sp, #40]	@ 0x28
 800f914:	9b07      	ldr	r3, [sp, #28]
 800f916:	4621      	mov	r1, r4
 800f918:	4648      	mov	r0, r9
 800f91a:	3b01      	subs	r3, #1
 800f91c:	9300      	str	r3, [sp, #0]
 800f91e:	f7ff fa96 	bl	800ee4e <quorem>
 800f922:	4639      	mov	r1, r7
 800f924:	9002      	str	r0, [sp, #8]
 800f926:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f92a:	4648      	mov	r0, r9
 800f92c:	f000 fc5c 	bl	80101e8 <__mcmp>
 800f930:	462a      	mov	r2, r5
 800f932:	9008      	str	r0, [sp, #32]
 800f934:	4621      	mov	r1, r4
 800f936:	4658      	mov	r0, fp
 800f938:	f000 fc72 	bl	8010220 <__mdiff>
 800f93c:	68c2      	ldr	r2, [r0, #12]
 800f93e:	4606      	mov	r6, r0
 800f940:	bb02      	cbnz	r2, 800f984 <_dtoa_r+0xa1c>
 800f942:	4601      	mov	r1, r0
 800f944:	4648      	mov	r0, r9
 800f946:	f000 fc4f 	bl	80101e8 <__mcmp>
 800f94a:	4602      	mov	r2, r0
 800f94c:	4631      	mov	r1, r6
 800f94e:	4658      	mov	r0, fp
 800f950:	920e      	str	r2, [sp, #56]	@ 0x38
 800f952:	f000 fa0d 	bl	800fd70 <_Bfree>
 800f956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f958:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f95a:	9e07      	ldr	r6, [sp, #28]
 800f95c:	ea43 0102 	orr.w	r1, r3, r2
 800f960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f962:	4319      	orrs	r1, r3
 800f964:	d110      	bne.n	800f988 <_dtoa_r+0xa20>
 800f966:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f96a:	d029      	beq.n	800f9c0 <_dtoa_r+0xa58>
 800f96c:	9b08      	ldr	r3, [sp, #32]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	dd02      	ble.n	800f978 <_dtoa_r+0xa10>
 800f972:	9b02      	ldr	r3, [sp, #8]
 800f974:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f978:	9b00      	ldr	r3, [sp, #0]
 800f97a:	f883 8000 	strb.w	r8, [r3]
 800f97e:	e63f      	b.n	800f600 <_dtoa_r+0x698>
 800f980:	4628      	mov	r0, r5
 800f982:	e7bb      	b.n	800f8fc <_dtoa_r+0x994>
 800f984:	2201      	movs	r2, #1
 800f986:	e7e1      	b.n	800f94c <_dtoa_r+0x9e4>
 800f988:	9b08      	ldr	r3, [sp, #32]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	db04      	blt.n	800f998 <_dtoa_r+0xa30>
 800f98e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f990:	430b      	orrs	r3, r1
 800f992:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f994:	430b      	orrs	r3, r1
 800f996:	d120      	bne.n	800f9da <_dtoa_r+0xa72>
 800f998:	2a00      	cmp	r2, #0
 800f99a:	dded      	ble.n	800f978 <_dtoa_r+0xa10>
 800f99c:	4649      	mov	r1, r9
 800f99e:	2201      	movs	r2, #1
 800f9a0:	4658      	mov	r0, fp
 800f9a2:	f000 fbb5 	bl	8010110 <__lshift>
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	4681      	mov	r9, r0
 800f9aa:	f000 fc1d 	bl	80101e8 <__mcmp>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	dc03      	bgt.n	800f9ba <_dtoa_r+0xa52>
 800f9b2:	d1e1      	bne.n	800f978 <_dtoa_r+0xa10>
 800f9b4:	f018 0f01 	tst.w	r8, #1
 800f9b8:	d0de      	beq.n	800f978 <_dtoa_r+0xa10>
 800f9ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f9be:	d1d8      	bne.n	800f972 <_dtoa_r+0xa0a>
 800f9c0:	2339      	movs	r3, #57	@ 0x39
 800f9c2:	9a00      	ldr	r2, [sp, #0]
 800f9c4:	7013      	strb	r3, [r2, #0]
 800f9c6:	4633      	mov	r3, r6
 800f9c8:	461e      	mov	r6, r3
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f9d0:	2a39      	cmp	r2, #57	@ 0x39
 800f9d2:	d052      	beq.n	800fa7a <_dtoa_r+0xb12>
 800f9d4:	3201      	adds	r2, #1
 800f9d6:	701a      	strb	r2, [r3, #0]
 800f9d8:	e612      	b.n	800f600 <_dtoa_r+0x698>
 800f9da:	2a00      	cmp	r2, #0
 800f9dc:	dd07      	ble.n	800f9ee <_dtoa_r+0xa86>
 800f9de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f9e2:	d0ed      	beq.n	800f9c0 <_dtoa_r+0xa58>
 800f9e4:	f108 0301 	add.w	r3, r8, #1
 800f9e8:	9a00      	ldr	r2, [sp, #0]
 800f9ea:	7013      	strb	r3, [r2, #0]
 800f9ec:	e608      	b.n	800f600 <_dtoa_r+0x698>
 800f9ee:	9b07      	ldr	r3, [sp, #28]
 800f9f0:	9a07      	ldr	r2, [sp, #28]
 800f9f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f9f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d028      	beq.n	800fa4e <_dtoa_r+0xae6>
 800f9fc:	4649      	mov	r1, r9
 800f9fe:	2300      	movs	r3, #0
 800fa00:	220a      	movs	r2, #10
 800fa02:	4658      	mov	r0, fp
 800fa04:	f000 f9d6 	bl	800fdb4 <__multadd>
 800fa08:	42af      	cmp	r7, r5
 800fa0a:	4681      	mov	r9, r0
 800fa0c:	f04f 0300 	mov.w	r3, #0
 800fa10:	f04f 020a 	mov.w	r2, #10
 800fa14:	4639      	mov	r1, r7
 800fa16:	4658      	mov	r0, fp
 800fa18:	d107      	bne.n	800fa2a <_dtoa_r+0xac2>
 800fa1a:	f000 f9cb 	bl	800fdb4 <__multadd>
 800fa1e:	4607      	mov	r7, r0
 800fa20:	4605      	mov	r5, r0
 800fa22:	9b07      	ldr	r3, [sp, #28]
 800fa24:	3301      	adds	r3, #1
 800fa26:	9307      	str	r3, [sp, #28]
 800fa28:	e774      	b.n	800f914 <_dtoa_r+0x9ac>
 800fa2a:	f000 f9c3 	bl	800fdb4 <__multadd>
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4607      	mov	r7, r0
 800fa32:	2300      	movs	r3, #0
 800fa34:	220a      	movs	r2, #10
 800fa36:	4658      	mov	r0, fp
 800fa38:	f000 f9bc 	bl	800fdb4 <__multadd>
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	e7f0      	b.n	800fa22 <_dtoa_r+0xaba>
 800fa40:	9b00      	ldr	r3, [sp, #0]
 800fa42:	2700      	movs	r7, #0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	bfcc      	ite	gt
 800fa48:	461e      	movgt	r6, r3
 800fa4a:	2601      	movle	r6, #1
 800fa4c:	4456      	add	r6, sl
 800fa4e:	4649      	mov	r1, r9
 800fa50:	2201      	movs	r2, #1
 800fa52:	4658      	mov	r0, fp
 800fa54:	f000 fb5c 	bl	8010110 <__lshift>
 800fa58:	4621      	mov	r1, r4
 800fa5a:	4681      	mov	r9, r0
 800fa5c:	f000 fbc4 	bl	80101e8 <__mcmp>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	dcb0      	bgt.n	800f9c6 <_dtoa_r+0xa5e>
 800fa64:	d102      	bne.n	800fa6c <_dtoa_r+0xb04>
 800fa66:	f018 0f01 	tst.w	r8, #1
 800fa6a:	d1ac      	bne.n	800f9c6 <_dtoa_r+0xa5e>
 800fa6c:	4633      	mov	r3, r6
 800fa6e:	461e      	mov	r6, r3
 800fa70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa74:	2a30      	cmp	r2, #48	@ 0x30
 800fa76:	d0fa      	beq.n	800fa6e <_dtoa_r+0xb06>
 800fa78:	e5c2      	b.n	800f600 <_dtoa_r+0x698>
 800fa7a:	459a      	cmp	sl, r3
 800fa7c:	d1a4      	bne.n	800f9c8 <_dtoa_r+0xa60>
 800fa7e:	9b04      	ldr	r3, [sp, #16]
 800fa80:	3301      	adds	r3, #1
 800fa82:	9304      	str	r3, [sp, #16]
 800fa84:	2331      	movs	r3, #49	@ 0x31
 800fa86:	f88a 3000 	strb.w	r3, [sl]
 800fa8a:	e5b9      	b.n	800f600 <_dtoa_r+0x698>
 800fa8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800faec <_dtoa_r+0xb84>
 800fa92:	b11b      	cbz	r3, 800fa9c <_dtoa_r+0xb34>
 800fa94:	f10a 0308 	add.w	r3, sl, #8
 800fa98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa9a:	6013      	str	r3, [r2, #0]
 800fa9c:	4650      	mov	r0, sl
 800fa9e:	b019      	add	sp, #100	@ 0x64
 800faa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	f77f ae37 	ble.w	800f71a <_dtoa_r+0x7b2>
 800faac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800faae:	930a      	str	r3, [sp, #40]	@ 0x28
 800fab0:	2001      	movs	r0, #1
 800fab2:	e655      	b.n	800f760 <_dtoa_r+0x7f8>
 800fab4:	9b00      	ldr	r3, [sp, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f77f aed6 	ble.w	800f868 <_dtoa_r+0x900>
 800fabc:	4656      	mov	r6, sl
 800fabe:	4621      	mov	r1, r4
 800fac0:	4648      	mov	r0, r9
 800fac2:	f7ff f9c4 	bl	800ee4e <quorem>
 800fac6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800faca:	9b00      	ldr	r3, [sp, #0]
 800facc:	f806 8b01 	strb.w	r8, [r6], #1
 800fad0:	eba6 020a 	sub.w	r2, r6, sl
 800fad4:	4293      	cmp	r3, r2
 800fad6:	ddb3      	ble.n	800fa40 <_dtoa_r+0xad8>
 800fad8:	4649      	mov	r1, r9
 800fada:	2300      	movs	r3, #0
 800fadc:	220a      	movs	r2, #10
 800fade:	4658      	mov	r0, fp
 800fae0:	f000 f968 	bl	800fdb4 <__multadd>
 800fae4:	4681      	mov	r9, r0
 800fae6:	e7ea      	b.n	800fabe <_dtoa_r+0xb56>
 800fae8:	08011204 	.word	0x08011204
 800faec:	08011188 	.word	0x08011188

0800faf0 <_free_r>:
 800faf0:	b538      	push	{r3, r4, r5, lr}
 800faf2:	4605      	mov	r5, r0
 800faf4:	2900      	cmp	r1, #0
 800faf6:	d041      	beq.n	800fb7c <_free_r+0x8c>
 800faf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fafc:	1f0c      	subs	r4, r1, #4
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	bfb8      	it	lt
 800fb02:	18e4      	addlt	r4, r4, r3
 800fb04:	f000 f8e8 	bl	800fcd8 <__malloc_lock>
 800fb08:	4a1d      	ldr	r2, [pc, #116]	@ (800fb80 <_free_r+0x90>)
 800fb0a:	6813      	ldr	r3, [r2, #0]
 800fb0c:	b933      	cbnz	r3, 800fb1c <_free_r+0x2c>
 800fb0e:	6063      	str	r3, [r4, #4]
 800fb10:	6014      	str	r4, [r2, #0]
 800fb12:	4628      	mov	r0, r5
 800fb14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb18:	f000 b8e4 	b.w	800fce4 <__malloc_unlock>
 800fb1c:	42a3      	cmp	r3, r4
 800fb1e:	d908      	bls.n	800fb32 <_free_r+0x42>
 800fb20:	6820      	ldr	r0, [r4, #0]
 800fb22:	1821      	adds	r1, r4, r0
 800fb24:	428b      	cmp	r3, r1
 800fb26:	bf01      	itttt	eq
 800fb28:	6819      	ldreq	r1, [r3, #0]
 800fb2a:	685b      	ldreq	r3, [r3, #4]
 800fb2c:	1809      	addeq	r1, r1, r0
 800fb2e:	6021      	streq	r1, [r4, #0]
 800fb30:	e7ed      	b.n	800fb0e <_free_r+0x1e>
 800fb32:	461a      	mov	r2, r3
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	b10b      	cbz	r3, 800fb3c <_free_r+0x4c>
 800fb38:	42a3      	cmp	r3, r4
 800fb3a:	d9fa      	bls.n	800fb32 <_free_r+0x42>
 800fb3c:	6811      	ldr	r1, [r2, #0]
 800fb3e:	1850      	adds	r0, r2, r1
 800fb40:	42a0      	cmp	r0, r4
 800fb42:	d10b      	bne.n	800fb5c <_free_r+0x6c>
 800fb44:	6820      	ldr	r0, [r4, #0]
 800fb46:	4401      	add	r1, r0
 800fb48:	1850      	adds	r0, r2, r1
 800fb4a:	6011      	str	r1, [r2, #0]
 800fb4c:	4283      	cmp	r3, r0
 800fb4e:	d1e0      	bne.n	800fb12 <_free_r+0x22>
 800fb50:	6818      	ldr	r0, [r3, #0]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	4408      	add	r0, r1
 800fb56:	6053      	str	r3, [r2, #4]
 800fb58:	6010      	str	r0, [r2, #0]
 800fb5a:	e7da      	b.n	800fb12 <_free_r+0x22>
 800fb5c:	d902      	bls.n	800fb64 <_free_r+0x74>
 800fb5e:	230c      	movs	r3, #12
 800fb60:	602b      	str	r3, [r5, #0]
 800fb62:	e7d6      	b.n	800fb12 <_free_r+0x22>
 800fb64:	6820      	ldr	r0, [r4, #0]
 800fb66:	1821      	adds	r1, r4, r0
 800fb68:	428b      	cmp	r3, r1
 800fb6a:	bf02      	ittt	eq
 800fb6c:	6819      	ldreq	r1, [r3, #0]
 800fb6e:	685b      	ldreq	r3, [r3, #4]
 800fb70:	1809      	addeq	r1, r1, r0
 800fb72:	6063      	str	r3, [r4, #4]
 800fb74:	bf08      	it	eq
 800fb76:	6021      	streq	r1, [r4, #0]
 800fb78:	6054      	str	r4, [r2, #4]
 800fb7a:	e7ca      	b.n	800fb12 <_free_r+0x22>
 800fb7c:	bd38      	pop	{r3, r4, r5, pc}
 800fb7e:	bf00      	nop
 800fb80:	20004c14 	.word	0x20004c14

0800fb84 <malloc>:
 800fb84:	4b02      	ldr	r3, [pc, #8]	@ (800fb90 <malloc+0xc>)
 800fb86:	4601      	mov	r1, r0
 800fb88:	6818      	ldr	r0, [r3, #0]
 800fb8a:	f000 b825 	b.w	800fbd8 <_malloc_r>
 800fb8e:	bf00      	nop
 800fb90:	20000034 	.word	0x20000034

0800fb94 <sbrk_aligned>:
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	4e0f      	ldr	r6, [pc, #60]	@ (800fbd4 <sbrk_aligned+0x40>)
 800fb98:	460c      	mov	r4, r1
 800fb9a:	4605      	mov	r5, r0
 800fb9c:	6831      	ldr	r1, [r6, #0]
 800fb9e:	b911      	cbnz	r1, 800fba6 <sbrk_aligned+0x12>
 800fba0:	f000 fe4c 	bl	801083c <_sbrk_r>
 800fba4:	6030      	str	r0, [r6, #0]
 800fba6:	4621      	mov	r1, r4
 800fba8:	4628      	mov	r0, r5
 800fbaa:	f000 fe47 	bl	801083c <_sbrk_r>
 800fbae:	1c43      	adds	r3, r0, #1
 800fbb0:	d103      	bne.n	800fbba <sbrk_aligned+0x26>
 800fbb2:	f04f 34ff 	mov.w	r4, #4294967295
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	bd70      	pop	{r4, r5, r6, pc}
 800fbba:	1cc4      	adds	r4, r0, #3
 800fbbc:	f024 0403 	bic.w	r4, r4, #3
 800fbc0:	42a0      	cmp	r0, r4
 800fbc2:	d0f8      	beq.n	800fbb6 <sbrk_aligned+0x22>
 800fbc4:	1a21      	subs	r1, r4, r0
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	f000 fe38 	bl	801083c <_sbrk_r>
 800fbcc:	3001      	adds	r0, #1
 800fbce:	d1f2      	bne.n	800fbb6 <sbrk_aligned+0x22>
 800fbd0:	e7ef      	b.n	800fbb2 <sbrk_aligned+0x1e>
 800fbd2:	bf00      	nop
 800fbd4:	20004c10 	.word	0x20004c10

0800fbd8 <_malloc_r>:
 800fbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbdc:	1ccd      	adds	r5, r1, #3
 800fbde:	4606      	mov	r6, r0
 800fbe0:	f025 0503 	bic.w	r5, r5, #3
 800fbe4:	3508      	adds	r5, #8
 800fbe6:	2d0c      	cmp	r5, #12
 800fbe8:	bf38      	it	cc
 800fbea:	250c      	movcc	r5, #12
 800fbec:	2d00      	cmp	r5, #0
 800fbee:	db01      	blt.n	800fbf4 <_malloc_r+0x1c>
 800fbf0:	42a9      	cmp	r1, r5
 800fbf2:	d904      	bls.n	800fbfe <_malloc_r+0x26>
 800fbf4:	230c      	movs	r3, #12
 800fbf6:	6033      	str	r3, [r6, #0]
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fcd4 <_malloc_r+0xfc>
 800fc02:	f000 f869 	bl	800fcd8 <__malloc_lock>
 800fc06:	f8d8 3000 	ldr.w	r3, [r8]
 800fc0a:	461c      	mov	r4, r3
 800fc0c:	bb44      	cbnz	r4, 800fc60 <_malloc_r+0x88>
 800fc0e:	4629      	mov	r1, r5
 800fc10:	4630      	mov	r0, r6
 800fc12:	f7ff ffbf 	bl	800fb94 <sbrk_aligned>
 800fc16:	1c43      	adds	r3, r0, #1
 800fc18:	4604      	mov	r4, r0
 800fc1a:	d158      	bne.n	800fcce <_malloc_r+0xf6>
 800fc1c:	f8d8 4000 	ldr.w	r4, [r8]
 800fc20:	4627      	mov	r7, r4
 800fc22:	2f00      	cmp	r7, #0
 800fc24:	d143      	bne.n	800fcae <_malloc_r+0xd6>
 800fc26:	2c00      	cmp	r4, #0
 800fc28:	d04b      	beq.n	800fcc2 <_malloc_r+0xea>
 800fc2a:	6823      	ldr	r3, [r4, #0]
 800fc2c:	4639      	mov	r1, r7
 800fc2e:	4630      	mov	r0, r6
 800fc30:	eb04 0903 	add.w	r9, r4, r3
 800fc34:	f000 fe02 	bl	801083c <_sbrk_r>
 800fc38:	4581      	cmp	r9, r0
 800fc3a:	d142      	bne.n	800fcc2 <_malloc_r+0xea>
 800fc3c:	6821      	ldr	r1, [r4, #0]
 800fc3e:	4630      	mov	r0, r6
 800fc40:	1a6d      	subs	r5, r5, r1
 800fc42:	4629      	mov	r1, r5
 800fc44:	f7ff ffa6 	bl	800fb94 <sbrk_aligned>
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d03a      	beq.n	800fcc2 <_malloc_r+0xea>
 800fc4c:	6823      	ldr	r3, [r4, #0]
 800fc4e:	442b      	add	r3, r5
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	f8d8 3000 	ldr.w	r3, [r8]
 800fc56:	685a      	ldr	r2, [r3, #4]
 800fc58:	bb62      	cbnz	r2, 800fcb4 <_malloc_r+0xdc>
 800fc5a:	f8c8 7000 	str.w	r7, [r8]
 800fc5e:	e00f      	b.n	800fc80 <_malloc_r+0xa8>
 800fc60:	6822      	ldr	r2, [r4, #0]
 800fc62:	1b52      	subs	r2, r2, r5
 800fc64:	d420      	bmi.n	800fca8 <_malloc_r+0xd0>
 800fc66:	2a0b      	cmp	r2, #11
 800fc68:	d917      	bls.n	800fc9a <_malloc_r+0xc2>
 800fc6a:	1961      	adds	r1, r4, r5
 800fc6c:	42a3      	cmp	r3, r4
 800fc6e:	6025      	str	r5, [r4, #0]
 800fc70:	bf18      	it	ne
 800fc72:	6059      	strne	r1, [r3, #4]
 800fc74:	6863      	ldr	r3, [r4, #4]
 800fc76:	bf08      	it	eq
 800fc78:	f8c8 1000 	streq.w	r1, [r8]
 800fc7c:	5162      	str	r2, [r4, r5]
 800fc7e:	604b      	str	r3, [r1, #4]
 800fc80:	4630      	mov	r0, r6
 800fc82:	f000 f82f 	bl	800fce4 <__malloc_unlock>
 800fc86:	f104 000b 	add.w	r0, r4, #11
 800fc8a:	1d23      	adds	r3, r4, #4
 800fc8c:	f020 0007 	bic.w	r0, r0, #7
 800fc90:	1ac2      	subs	r2, r0, r3
 800fc92:	bf1c      	itt	ne
 800fc94:	1a1b      	subne	r3, r3, r0
 800fc96:	50a3      	strne	r3, [r4, r2]
 800fc98:	e7af      	b.n	800fbfa <_malloc_r+0x22>
 800fc9a:	6862      	ldr	r2, [r4, #4]
 800fc9c:	42a3      	cmp	r3, r4
 800fc9e:	bf0c      	ite	eq
 800fca0:	f8c8 2000 	streq.w	r2, [r8]
 800fca4:	605a      	strne	r2, [r3, #4]
 800fca6:	e7eb      	b.n	800fc80 <_malloc_r+0xa8>
 800fca8:	4623      	mov	r3, r4
 800fcaa:	6864      	ldr	r4, [r4, #4]
 800fcac:	e7ae      	b.n	800fc0c <_malloc_r+0x34>
 800fcae:	463c      	mov	r4, r7
 800fcb0:	687f      	ldr	r7, [r7, #4]
 800fcb2:	e7b6      	b.n	800fc22 <_malloc_r+0x4a>
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	42a3      	cmp	r3, r4
 800fcba:	d1fb      	bne.n	800fcb4 <_malloc_r+0xdc>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	6053      	str	r3, [r2, #4]
 800fcc0:	e7de      	b.n	800fc80 <_malloc_r+0xa8>
 800fcc2:	230c      	movs	r3, #12
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	6033      	str	r3, [r6, #0]
 800fcc8:	f000 f80c 	bl	800fce4 <__malloc_unlock>
 800fccc:	e794      	b.n	800fbf8 <_malloc_r+0x20>
 800fcce:	6005      	str	r5, [r0, #0]
 800fcd0:	e7d6      	b.n	800fc80 <_malloc_r+0xa8>
 800fcd2:	bf00      	nop
 800fcd4:	20004c14 	.word	0x20004c14

0800fcd8 <__malloc_lock>:
 800fcd8:	4801      	ldr	r0, [pc, #4]	@ (800fce0 <__malloc_lock+0x8>)
 800fcda:	f7ff b8a8 	b.w	800ee2e <__retarget_lock_acquire_recursive>
 800fcde:	bf00      	nop
 800fce0:	20004c0c 	.word	0x20004c0c

0800fce4 <__malloc_unlock>:
 800fce4:	4801      	ldr	r0, [pc, #4]	@ (800fcec <__malloc_unlock+0x8>)
 800fce6:	f7ff b8a3 	b.w	800ee30 <__retarget_lock_release_recursive>
 800fcea:	bf00      	nop
 800fcec:	20004c0c 	.word	0x20004c0c

0800fcf0 <_Balloc>:
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	69c6      	ldr	r6, [r0, #28]
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	460d      	mov	r5, r1
 800fcf8:	b976      	cbnz	r6, 800fd18 <_Balloc+0x28>
 800fcfa:	2010      	movs	r0, #16
 800fcfc:	f7ff ff42 	bl	800fb84 <malloc>
 800fd00:	4602      	mov	r2, r0
 800fd02:	61e0      	str	r0, [r4, #28]
 800fd04:	b920      	cbnz	r0, 800fd10 <_Balloc+0x20>
 800fd06:	4b18      	ldr	r3, [pc, #96]	@ (800fd68 <_Balloc+0x78>)
 800fd08:	216b      	movs	r1, #107	@ 0x6b
 800fd0a:	4818      	ldr	r0, [pc, #96]	@ (800fd6c <_Balloc+0x7c>)
 800fd0c:	f000 fdb4 	bl	8010878 <__assert_func>
 800fd10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd14:	6006      	str	r6, [r0, #0]
 800fd16:	60c6      	str	r6, [r0, #12]
 800fd18:	69e6      	ldr	r6, [r4, #28]
 800fd1a:	68f3      	ldr	r3, [r6, #12]
 800fd1c:	b183      	cbz	r3, 800fd40 <_Balloc+0x50>
 800fd1e:	69e3      	ldr	r3, [r4, #28]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd26:	b9b8      	cbnz	r0, 800fd58 <_Balloc+0x68>
 800fd28:	2101      	movs	r1, #1
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	fa01 f605 	lsl.w	r6, r1, r5
 800fd30:	1d72      	adds	r2, r6, #5
 800fd32:	0092      	lsls	r2, r2, #2
 800fd34:	f000 fdbe 	bl	80108b4 <_calloc_r>
 800fd38:	b160      	cbz	r0, 800fd54 <_Balloc+0x64>
 800fd3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd3e:	e00e      	b.n	800fd5e <_Balloc+0x6e>
 800fd40:	2221      	movs	r2, #33	@ 0x21
 800fd42:	2104      	movs	r1, #4
 800fd44:	4620      	mov	r0, r4
 800fd46:	f000 fdb5 	bl	80108b4 <_calloc_r>
 800fd4a:	69e3      	ldr	r3, [r4, #28]
 800fd4c:	60f0      	str	r0, [r6, #12]
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1e4      	bne.n	800fd1e <_Balloc+0x2e>
 800fd54:	2000      	movs	r0, #0
 800fd56:	bd70      	pop	{r4, r5, r6, pc}
 800fd58:	6802      	ldr	r2, [r0, #0]
 800fd5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd64:	e7f7      	b.n	800fd56 <_Balloc+0x66>
 800fd66:	bf00      	nop
 800fd68:	08011195 	.word	0x08011195
 800fd6c:	08011215 	.word	0x08011215

0800fd70 <_Bfree>:
 800fd70:	b570      	push	{r4, r5, r6, lr}
 800fd72:	69c6      	ldr	r6, [r0, #28]
 800fd74:	4605      	mov	r5, r0
 800fd76:	460c      	mov	r4, r1
 800fd78:	b976      	cbnz	r6, 800fd98 <_Bfree+0x28>
 800fd7a:	2010      	movs	r0, #16
 800fd7c:	f7ff ff02 	bl	800fb84 <malloc>
 800fd80:	4602      	mov	r2, r0
 800fd82:	61e8      	str	r0, [r5, #28]
 800fd84:	b920      	cbnz	r0, 800fd90 <_Bfree+0x20>
 800fd86:	4b09      	ldr	r3, [pc, #36]	@ (800fdac <_Bfree+0x3c>)
 800fd88:	218f      	movs	r1, #143	@ 0x8f
 800fd8a:	4809      	ldr	r0, [pc, #36]	@ (800fdb0 <_Bfree+0x40>)
 800fd8c:	f000 fd74 	bl	8010878 <__assert_func>
 800fd90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd94:	6006      	str	r6, [r0, #0]
 800fd96:	60c6      	str	r6, [r0, #12]
 800fd98:	b13c      	cbz	r4, 800fdaa <_Bfree+0x3a>
 800fd9a:	69eb      	ldr	r3, [r5, #28]
 800fd9c:	6862      	ldr	r2, [r4, #4]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fda4:	6021      	str	r1, [r4, #0]
 800fda6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdaa:	bd70      	pop	{r4, r5, r6, pc}
 800fdac:	08011195 	.word	0x08011195
 800fdb0:	08011215 	.word	0x08011215

0800fdb4 <__multadd>:
 800fdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb8:	f101 0c14 	add.w	ip, r1, #20
 800fdbc:	4607      	mov	r7, r0
 800fdbe:	460c      	mov	r4, r1
 800fdc0:	461e      	mov	r6, r3
 800fdc2:	690d      	ldr	r5, [r1, #16]
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	f8dc 3000 	ldr.w	r3, [ip]
 800fdca:	3001      	adds	r0, #1
 800fdcc:	b299      	uxth	r1, r3
 800fdce:	4285      	cmp	r5, r0
 800fdd0:	fb02 6101 	mla	r1, r2, r1, r6
 800fdd4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fdd8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800fddc:	b289      	uxth	r1, r1
 800fdde:	fb02 3306 	mla	r3, r2, r6, r3
 800fde2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fde6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fdea:	f84c 1b04 	str.w	r1, [ip], #4
 800fdee:	dcea      	bgt.n	800fdc6 <__multadd+0x12>
 800fdf0:	b30e      	cbz	r6, 800fe36 <__multadd+0x82>
 800fdf2:	68a3      	ldr	r3, [r4, #8]
 800fdf4:	42ab      	cmp	r3, r5
 800fdf6:	dc19      	bgt.n	800fe2c <__multadd+0x78>
 800fdf8:	6861      	ldr	r1, [r4, #4]
 800fdfa:	4638      	mov	r0, r7
 800fdfc:	3101      	adds	r1, #1
 800fdfe:	f7ff ff77 	bl	800fcf0 <_Balloc>
 800fe02:	4680      	mov	r8, r0
 800fe04:	b928      	cbnz	r0, 800fe12 <__multadd+0x5e>
 800fe06:	4602      	mov	r2, r0
 800fe08:	4b0c      	ldr	r3, [pc, #48]	@ (800fe3c <__multadd+0x88>)
 800fe0a:	21ba      	movs	r1, #186	@ 0xba
 800fe0c:	480c      	ldr	r0, [pc, #48]	@ (800fe40 <__multadd+0x8c>)
 800fe0e:	f000 fd33 	bl	8010878 <__assert_func>
 800fe12:	6922      	ldr	r2, [r4, #16]
 800fe14:	f104 010c 	add.w	r1, r4, #12
 800fe18:	300c      	adds	r0, #12
 800fe1a:	3202      	adds	r2, #2
 800fe1c:	0092      	lsls	r2, r2, #2
 800fe1e:	f000 fd1d 	bl	801085c <memcpy>
 800fe22:	4621      	mov	r1, r4
 800fe24:	4644      	mov	r4, r8
 800fe26:	4638      	mov	r0, r7
 800fe28:	f7ff ffa2 	bl	800fd70 <_Bfree>
 800fe2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe30:	3501      	adds	r5, #1
 800fe32:	615e      	str	r6, [r3, #20]
 800fe34:	6125      	str	r5, [r4, #16]
 800fe36:	4620      	mov	r0, r4
 800fe38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe3c:	08011204 	.word	0x08011204
 800fe40:	08011215 	.word	0x08011215

0800fe44 <__hi0bits>:
 800fe44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fe48:	4603      	mov	r3, r0
 800fe4a:	bf36      	itet	cc
 800fe4c:	0403      	lslcc	r3, r0, #16
 800fe4e:	2000      	movcs	r0, #0
 800fe50:	2010      	movcc	r0, #16
 800fe52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe56:	bf3c      	itt	cc
 800fe58:	021b      	lslcc	r3, r3, #8
 800fe5a:	3008      	addcc	r0, #8
 800fe5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe60:	bf3c      	itt	cc
 800fe62:	011b      	lslcc	r3, r3, #4
 800fe64:	3004      	addcc	r0, #4
 800fe66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe6a:	bf3c      	itt	cc
 800fe6c:	009b      	lslcc	r3, r3, #2
 800fe6e:	3002      	addcc	r0, #2
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	db05      	blt.n	800fe80 <__hi0bits+0x3c>
 800fe74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fe78:	f100 0001 	add.w	r0, r0, #1
 800fe7c:	bf08      	it	eq
 800fe7e:	2020      	moveq	r0, #32
 800fe80:	4770      	bx	lr

0800fe82 <__lo0bits>:
 800fe82:	6803      	ldr	r3, [r0, #0]
 800fe84:	4602      	mov	r2, r0
 800fe86:	f013 0007 	ands.w	r0, r3, #7
 800fe8a:	d00b      	beq.n	800fea4 <__lo0bits+0x22>
 800fe8c:	07d9      	lsls	r1, r3, #31
 800fe8e:	d421      	bmi.n	800fed4 <__lo0bits+0x52>
 800fe90:	0798      	lsls	r0, r3, #30
 800fe92:	bf47      	ittee	mi
 800fe94:	085b      	lsrmi	r3, r3, #1
 800fe96:	2001      	movmi	r0, #1
 800fe98:	089b      	lsrpl	r3, r3, #2
 800fe9a:	2002      	movpl	r0, #2
 800fe9c:	bf4c      	ite	mi
 800fe9e:	6013      	strmi	r3, [r2, #0]
 800fea0:	6013      	strpl	r3, [r2, #0]
 800fea2:	4770      	bx	lr
 800fea4:	b299      	uxth	r1, r3
 800fea6:	b909      	cbnz	r1, 800feac <__lo0bits+0x2a>
 800fea8:	0c1b      	lsrs	r3, r3, #16
 800feaa:	2010      	movs	r0, #16
 800feac:	b2d9      	uxtb	r1, r3
 800feae:	b909      	cbnz	r1, 800feb4 <__lo0bits+0x32>
 800feb0:	3008      	adds	r0, #8
 800feb2:	0a1b      	lsrs	r3, r3, #8
 800feb4:	0719      	lsls	r1, r3, #28
 800feb6:	bf04      	itt	eq
 800feb8:	091b      	lsreq	r3, r3, #4
 800feba:	3004      	addeq	r0, #4
 800febc:	0799      	lsls	r1, r3, #30
 800febe:	bf04      	itt	eq
 800fec0:	089b      	lsreq	r3, r3, #2
 800fec2:	3002      	addeq	r0, #2
 800fec4:	07d9      	lsls	r1, r3, #31
 800fec6:	d403      	bmi.n	800fed0 <__lo0bits+0x4e>
 800fec8:	085b      	lsrs	r3, r3, #1
 800feca:	f100 0001 	add.w	r0, r0, #1
 800fece:	d003      	beq.n	800fed8 <__lo0bits+0x56>
 800fed0:	6013      	str	r3, [r2, #0]
 800fed2:	4770      	bx	lr
 800fed4:	2000      	movs	r0, #0
 800fed6:	4770      	bx	lr
 800fed8:	2020      	movs	r0, #32
 800feda:	4770      	bx	lr

0800fedc <__i2b>:
 800fedc:	b510      	push	{r4, lr}
 800fede:	460c      	mov	r4, r1
 800fee0:	2101      	movs	r1, #1
 800fee2:	f7ff ff05 	bl	800fcf0 <_Balloc>
 800fee6:	4602      	mov	r2, r0
 800fee8:	b928      	cbnz	r0, 800fef6 <__i2b+0x1a>
 800feea:	4b05      	ldr	r3, [pc, #20]	@ (800ff00 <__i2b+0x24>)
 800feec:	f240 1145 	movw	r1, #325	@ 0x145
 800fef0:	4804      	ldr	r0, [pc, #16]	@ (800ff04 <__i2b+0x28>)
 800fef2:	f000 fcc1 	bl	8010878 <__assert_func>
 800fef6:	2301      	movs	r3, #1
 800fef8:	6144      	str	r4, [r0, #20]
 800fefa:	6103      	str	r3, [r0, #16]
 800fefc:	bd10      	pop	{r4, pc}
 800fefe:	bf00      	nop
 800ff00:	08011204 	.word	0x08011204
 800ff04:	08011215 	.word	0x08011215

0800ff08 <__multiply>:
 800ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0c:	4614      	mov	r4, r2
 800ff0e:	690a      	ldr	r2, [r1, #16]
 800ff10:	460f      	mov	r7, r1
 800ff12:	b085      	sub	sp, #20
 800ff14:	6923      	ldr	r3, [r4, #16]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	bfa2      	ittt	ge
 800ff1a:	4623      	movge	r3, r4
 800ff1c:	460c      	movge	r4, r1
 800ff1e:	461f      	movge	r7, r3
 800ff20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ff24:	68a3      	ldr	r3, [r4, #8]
 800ff26:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ff2a:	6861      	ldr	r1, [r4, #4]
 800ff2c:	eb0a 0609 	add.w	r6, sl, r9
 800ff30:	42b3      	cmp	r3, r6
 800ff32:	bfb8      	it	lt
 800ff34:	3101      	addlt	r1, #1
 800ff36:	f7ff fedb 	bl	800fcf0 <_Balloc>
 800ff3a:	b930      	cbnz	r0, 800ff4a <__multiply+0x42>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	4b45      	ldr	r3, [pc, #276]	@ (8010054 <__multiply+0x14c>)
 800ff40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ff44:	4844      	ldr	r0, [pc, #272]	@ (8010058 <__multiply+0x150>)
 800ff46:	f000 fc97 	bl	8010878 <__assert_func>
 800ff4a:	f100 0514 	add.w	r5, r0, #20
 800ff4e:	2200      	movs	r2, #0
 800ff50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff54:	462b      	mov	r3, r5
 800ff56:	4543      	cmp	r3, r8
 800ff58:	d321      	bcc.n	800ff9e <__multiply+0x96>
 800ff5a:	f107 0114 	add.w	r1, r7, #20
 800ff5e:	f104 0214 	add.w	r2, r4, #20
 800ff62:	f104 0715 	add.w	r7, r4, #21
 800ff66:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ff6a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ff6e:	9302      	str	r3, [sp, #8]
 800ff70:	1b13      	subs	r3, r2, r4
 800ff72:	3b15      	subs	r3, #21
 800ff74:	f023 0303 	bic.w	r3, r3, #3
 800ff78:	3304      	adds	r3, #4
 800ff7a:	42ba      	cmp	r2, r7
 800ff7c:	bf38      	it	cc
 800ff7e:	2304      	movcc	r3, #4
 800ff80:	9301      	str	r3, [sp, #4]
 800ff82:	9b02      	ldr	r3, [sp, #8]
 800ff84:	9103      	str	r1, [sp, #12]
 800ff86:	428b      	cmp	r3, r1
 800ff88:	d80c      	bhi.n	800ffa4 <__multiply+0x9c>
 800ff8a:	2e00      	cmp	r6, #0
 800ff8c:	dd03      	ble.n	800ff96 <__multiply+0x8e>
 800ff8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d05b      	beq.n	801004e <__multiply+0x146>
 800ff96:	6106      	str	r6, [r0, #16]
 800ff98:	b005      	add	sp, #20
 800ff9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff9e:	f843 2b04 	str.w	r2, [r3], #4
 800ffa2:	e7d8      	b.n	800ff56 <__multiply+0x4e>
 800ffa4:	f8b1 a000 	ldrh.w	sl, [r1]
 800ffa8:	f1ba 0f00 	cmp.w	sl, #0
 800ffac:	d024      	beq.n	800fff8 <__multiply+0xf0>
 800ffae:	f104 0e14 	add.w	lr, r4, #20
 800ffb2:	46a9      	mov	r9, r5
 800ffb4:	f04f 0c00 	mov.w	ip, #0
 800ffb8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ffbc:	f8d9 3000 	ldr.w	r3, [r9]
 800ffc0:	fa1f fb87 	uxth.w	fp, r7
 800ffc4:	4572      	cmp	r2, lr
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ffcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ffd0:	f8d9 7000 	ldr.w	r7, [r9]
 800ffd4:	4463      	add	r3, ip
 800ffd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ffda:	fb0a c70b 	mla	r7, sl, fp, ip
 800ffde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ffe8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ffec:	f849 3b04 	str.w	r3, [r9], #4
 800fff0:	d8e2      	bhi.n	800ffb8 <__multiply+0xb0>
 800fff2:	9b01      	ldr	r3, [sp, #4]
 800fff4:	f845 c003 	str.w	ip, [r5, r3]
 800fff8:	9b03      	ldr	r3, [sp, #12]
 800fffa:	3104      	adds	r1, #4
 800fffc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010000:	f1b9 0f00 	cmp.w	r9, #0
 8010004:	d021      	beq.n	801004a <__multiply+0x142>
 8010006:	682b      	ldr	r3, [r5, #0]
 8010008:	f104 0c14 	add.w	ip, r4, #20
 801000c:	46ae      	mov	lr, r5
 801000e:	f04f 0a00 	mov.w	sl, #0
 8010012:	f8bc b000 	ldrh.w	fp, [ip]
 8010016:	b29b      	uxth	r3, r3
 8010018:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801001c:	fb09 770b 	mla	r7, r9, fp, r7
 8010020:	4457      	add	r7, sl
 8010022:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010026:	f84e 3b04 	str.w	r3, [lr], #4
 801002a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801002e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010032:	f8be 3000 	ldrh.w	r3, [lr]
 8010036:	4562      	cmp	r2, ip
 8010038:	fb09 330a 	mla	r3, r9, sl, r3
 801003c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010040:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010044:	d8e5      	bhi.n	8010012 <__multiply+0x10a>
 8010046:	9f01      	ldr	r7, [sp, #4]
 8010048:	51eb      	str	r3, [r5, r7]
 801004a:	3504      	adds	r5, #4
 801004c:	e799      	b.n	800ff82 <__multiply+0x7a>
 801004e:	3e01      	subs	r6, #1
 8010050:	e79b      	b.n	800ff8a <__multiply+0x82>
 8010052:	bf00      	nop
 8010054:	08011204 	.word	0x08011204
 8010058:	08011215 	.word	0x08011215

0801005c <__pow5mult>:
 801005c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010060:	4615      	mov	r5, r2
 8010062:	f012 0203 	ands.w	r2, r2, #3
 8010066:	4607      	mov	r7, r0
 8010068:	460e      	mov	r6, r1
 801006a:	d007      	beq.n	801007c <__pow5mult+0x20>
 801006c:	3a01      	subs	r2, #1
 801006e:	4c25      	ldr	r4, [pc, #148]	@ (8010104 <__pow5mult+0xa8>)
 8010070:	2300      	movs	r3, #0
 8010072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010076:	f7ff fe9d 	bl	800fdb4 <__multadd>
 801007a:	4606      	mov	r6, r0
 801007c:	10ad      	asrs	r5, r5, #2
 801007e:	d03d      	beq.n	80100fc <__pow5mult+0xa0>
 8010080:	69fc      	ldr	r4, [r7, #28]
 8010082:	b97c      	cbnz	r4, 80100a4 <__pow5mult+0x48>
 8010084:	2010      	movs	r0, #16
 8010086:	f7ff fd7d 	bl	800fb84 <malloc>
 801008a:	4602      	mov	r2, r0
 801008c:	61f8      	str	r0, [r7, #28]
 801008e:	b928      	cbnz	r0, 801009c <__pow5mult+0x40>
 8010090:	4b1d      	ldr	r3, [pc, #116]	@ (8010108 <__pow5mult+0xac>)
 8010092:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010096:	481d      	ldr	r0, [pc, #116]	@ (801010c <__pow5mult+0xb0>)
 8010098:	f000 fbee 	bl	8010878 <__assert_func>
 801009c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100a0:	6004      	str	r4, [r0, #0]
 80100a2:	60c4      	str	r4, [r0, #12]
 80100a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80100a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100ac:	b94c      	cbnz	r4, 80100c2 <__pow5mult+0x66>
 80100ae:	f240 2171 	movw	r1, #625	@ 0x271
 80100b2:	4638      	mov	r0, r7
 80100b4:	f7ff ff12 	bl	800fedc <__i2b>
 80100b8:	2300      	movs	r3, #0
 80100ba:	4604      	mov	r4, r0
 80100bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80100c0:	6003      	str	r3, [r0, #0]
 80100c2:	f04f 0900 	mov.w	r9, #0
 80100c6:	07eb      	lsls	r3, r5, #31
 80100c8:	d50a      	bpl.n	80100e0 <__pow5mult+0x84>
 80100ca:	4631      	mov	r1, r6
 80100cc:	4622      	mov	r2, r4
 80100ce:	4638      	mov	r0, r7
 80100d0:	f7ff ff1a 	bl	800ff08 <__multiply>
 80100d4:	4680      	mov	r8, r0
 80100d6:	4631      	mov	r1, r6
 80100d8:	4638      	mov	r0, r7
 80100da:	4646      	mov	r6, r8
 80100dc:	f7ff fe48 	bl	800fd70 <_Bfree>
 80100e0:	106d      	asrs	r5, r5, #1
 80100e2:	d00b      	beq.n	80100fc <__pow5mult+0xa0>
 80100e4:	6820      	ldr	r0, [r4, #0]
 80100e6:	b938      	cbnz	r0, 80100f8 <__pow5mult+0x9c>
 80100e8:	4622      	mov	r2, r4
 80100ea:	4621      	mov	r1, r4
 80100ec:	4638      	mov	r0, r7
 80100ee:	f7ff ff0b 	bl	800ff08 <__multiply>
 80100f2:	6020      	str	r0, [r4, #0]
 80100f4:	f8c0 9000 	str.w	r9, [r0]
 80100f8:	4604      	mov	r4, r0
 80100fa:	e7e4      	b.n	80100c6 <__pow5mult+0x6a>
 80100fc:	4630      	mov	r0, r6
 80100fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010102:	bf00      	nop
 8010104:	08011270 	.word	0x08011270
 8010108:	08011195 	.word	0x08011195
 801010c:	08011215 	.word	0x08011215

08010110 <__lshift>:
 8010110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010114:	460c      	mov	r4, r1
 8010116:	4607      	mov	r7, r0
 8010118:	4691      	mov	r9, r2
 801011a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	6849      	ldr	r1, [r1, #4]
 8010122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010126:	68a3      	ldr	r3, [r4, #8]
 8010128:	f108 0601 	add.w	r6, r8, #1
 801012c:	42b3      	cmp	r3, r6
 801012e:	db0b      	blt.n	8010148 <__lshift+0x38>
 8010130:	4638      	mov	r0, r7
 8010132:	f7ff fddd 	bl	800fcf0 <_Balloc>
 8010136:	4605      	mov	r5, r0
 8010138:	b948      	cbnz	r0, 801014e <__lshift+0x3e>
 801013a:	4602      	mov	r2, r0
 801013c:	4b28      	ldr	r3, [pc, #160]	@ (80101e0 <__lshift+0xd0>)
 801013e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010142:	4828      	ldr	r0, [pc, #160]	@ (80101e4 <__lshift+0xd4>)
 8010144:	f000 fb98 	bl	8010878 <__assert_func>
 8010148:	3101      	adds	r1, #1
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	e7ee      	b.n	801012c <__lshift+0x1c>
 801014e:	2300      	movs	r3, #0
 8010150:	f100 0114 	add.w	r1, r0, #20
 8010154:	f100 0210 	add.w	r2, r0, #16
 8010158:	4618      	mov	r0, r3
 801015a:	4553      	cmp	r3, sl
 801015c:	db33      	blt.n	80101c6 <__lshift+0xb6>
 801015e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010162:	f104 0314 	add.w	r3, r4, #20
 8010166:	6920      	ldr	r0, [r4, #16]
 8010168:	f019 091f 	ands.w	r9, r9, #31
 801016c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010170:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010174:	d02b      	beq.n	80101ce <__lshift+0xbe>
 8010176:	f1c9 0e20 	rsb	lr, r9, #32
 801017a:	468a      	mov	sl, r1
 801017c:	2200      	movs	r2, #0
 801017e:	6818      	ldr	r0, [r3, #0]
 8010180:	fa00 f009 	lsl.w	r0, r0, r9
 8010184:	4310      	orrs	r0, r2
 8010186:	f84a 0b04 	str.w	r0, [sl], #4
 801018a:	f853 2b04 	ldr.w	r2, [r3], #4
 801018e:	459c      	cmp	ip, r3
 8010190:	fa22 f20e 	lsr.w	r2, r2, lr
 8010194:	d8f3      	bhi.n	801017e <__lshift+0x6e>
 8010196:	ebac 0304 	sub.w	r3, ip, r4
 801019a:	f104 0015 	add.w	r0, r4, #21
 801019e:	3b15      	subs	r3, #21
 80101a0:	f023 0303 	bic.w	r3, r3, #3
 80101a4:	3304      	adds	r3, #4
 80101a6:	4584      	cmp	ip, r0
 80101a8:	bf38      	it	cc
 80101aa:	2304      	movcc	r3, #4
 80101ac:	50ca      	str	r2, [r1, r3]
 80101ae:	b10a      	cbz	r2, 80101b4 <__lshift+0xa4>
 80101b0:	f108 0602 	add.w	r6, r8, #2
 80101b4:	3e01      	subs	r6, #1
 80101b6:	4638      	mov	r0, r7
 80101b8:	4621      	mov	r1, r4
 80101ba:	612e      	str	r6, [r5, #16]
 80101bc:	f7ff fdd8 	bl	800fd70 <_Bfree>
 80101c0:	4628      	mov	r0, r5
 80101c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101c6:	3301      	adds	r3, #1
 80101c8:	f842 0f04 	str.w	r0, [r2, #4]!
 80101cc:	e7c5      	b.n	801015a <__lshift+0x4a>
 80101ce:	3904      	subs	r1, #4
 80101d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80101d4:	459c      	cmp	ip, r3
 80101d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80101da:	d8f9      	bhi.n	80101d0 <__lshift+0xc0>
 80101dc:	e7ea      	b.n	80101b4 <__lshift+0xa4>
 80101de:	bf00      	nop
 80101e0:	08011204 	.word	0x08011204
 80101e4:	08011215 	.word	0x08011215

080101e8 <__mcmp>:
 80101e8:	4603      	mov	r3, r0
 80101ea:	690a      	ldr	r2, [r1, #16]
 80101ec:	6900      	ldr	r0, [r0, #16]
 80101ee:	1a80      	subs	r0, r0, r2
 80101f0:	b530      	push	{r4, r5, lr}
 80101f2:	d10e      	bne.n	8010212 <__mcmp+0x2a>
 80101f4:	3314      	adds	r3, #20
 80101f6:	3114      	adds	r1, #20
 80101f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80101fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010200:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010204:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010208:	4295      	cmp	r5, r2
 801020a:	d003      	beq.n	8010214 <__mcmp+0x2c>
 801020c:	d205      	bcs.n	801021a <__mcmp+0x32>
 801020e:	f04f 30ff 	mov.w	r0, #4294967295
 8010212:	bd30      	pop	{r4, r5, pc}
 8010214:	42a3      	cmp	r3, r4
 8010216:	d3f3      	bcc.n	8010200 <__mcmp+0x18>
 8010218:	e7fb      	b.n	8010212 <__mcmp+0x2a>
 801021a:	2001      	movs	r0, #1
 801021c:	e7f9      	b.n	8010212 <__mcmp+0x2a>
	...

08010220 <__mdiff>:
 8010220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010224:	4689      	mov	r9, r1
 8010226:	4606      	mov	r6, r0
 8010228:	4611      	mov	r1, r2
 801022a:	4614      	mov	r4, r2
 801022c:	4648      	mov	r0, r9
 801022e:	f7ff ffdb 	bl	80101e8 <__mcmp>
 8010232:	1e05      	subs	r5, r0, #0
 8010234:	d112      	bne.n	801025c <__mdiff+0x3c>
 8010236:	4629      	mov	r1, r5
 8010238:	4630      	mov	r0, r6
 801023a:	f7ff fd59 	bl	800fcf0 <_Balloc>
 801023e:	4602      	mov	r2, r0
 8010240:	b928      	cbnz	r0, 801024e <__mdiff+0x2e>
 8010242:	4b41      	ldr	r3, [pc, #260]	@ (8010348 <__mdiff+0x128>)
 8010244:	f240 2137 	movw	r1, #567	@ 0x237
 8010248:	4840      	ldr	r0, [pc, #256]	@ (801034c <__mdiff+0x12c>)
 801024a:	f000 fb15 	bl	8010878 <__assert_func>
 801024e:	2301      	movs	r3, #1
 8010250:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010254:	4610      	mov	r0, r2
 8010256:	b003      	add	sp, #12
 8010258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025c:	bfbc      	itt	lt
 801025e:	464b      	movlt	r3, r9
 8010260:	46a1      	movlt	r9, r4
 8010262:	4630      	mov	r0, r6
 8010264:	bfb8      	it	lt
 8010266:	2501      	movlt	r5, #1
 8010268:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801026c:	bfb4      	ite	lt
 801026e:	461c      	movlt	r4, r3
 8010270:	2500      	movge	r5, #0
 8010272:	f7ff fd3d 	bl	800fcf0 <_Balloc>
 8010276:	4602      	mov	r2, r0
 8010278:	b918      	cbnz	r0, 8010282 <__mdiff+0x62>
 801027a:	4b33      	ldr	r3, [pc, #204]	@ (8010348 <__mdiff+0x128>)
 801027c:	f240 2145 	movw	r1, #581	@ 0x245
 8010280:	e7e2      	b.n	8010248 <__mdiff+0x28>
 8010282:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010286:	f104 0e14 	add.w	lr, r4, #20
 801028a:	6926      	ldr	r6, [r4, #16]
 801028c:	f100 0b14 	add.w	fp, r0, #20
 8010290:	60c5      	str	r5, [r0, #12]
 8010292:	f109 0514 	add.w	r5, r9, #20
 8010296:	f109 0310 	add.w	r3, r9, #16
 801029a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801029e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80102a2:	46d9      	mov	r9, fp
 80102a4:	f04f 0c00 	mov.w	ip, #0
 80102a8:	9301      	str	r3, [sp, #4]
 80102aa:	9b01      	ldr	r3, [sp, #4]
 80102ac:	f85e 0b04 	ldr.w	r0, [lr], #4
 80102b0:	f853 af04 	ldr.w	sl, [r3, #4]!
 80102b4:	4576      	cmp	r6, lr
 80102b6:	9301      	str	r3, [sp, #4]
 80102b8:	fa1f f38a 	uxth.w	r3, sl
 80102bc:	4619      	mov	r1, r3
 80102be:	b283      	uxth	r3, r0
 80102c0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80102c4:	eba1 0303 	sub.w	r3, r1, r3
 80102c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80102cc:	4463      	add	r3, ip
 80102ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80102d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80102dc:	f849 3b04 	str.w	r3, [r9], #4
 80102e0:	d8e3      	bhi.n	80102aa <__mdiff+0x8a>
 80102e2:	1b33      	subs	r3, r6, r4
 80102e4:	3415      	adds	r4, #21
 80102e6:	3b15      	subs	r3, #21
 80102e8:	f023 0303 	bic.w	r3, r3, #3
 80102ec:	3304      	adds	r3, #4
 80102ee:	42a6      	cmp	r6, r4
 80102f0:	bf38      	it	cc
 80102f2:	2304      	movcc	r3, #4
 80102f4:	441d      	add	r5, r3
 80102f6:	445b      	add	r3, fp
 80102f8:	462c      	mov	r4, r5
 80102fa:	461e      	mov	r6, r3
 80102fc:	4544      	cmp	r4, r8
 80102fe:	d30e      	bcc.n	801031e <__mdiff+0xfe>
 8010300:	f108 0103 	add.w	r1, r8, #3
 8010304:	1b49      	subs	r1, r1, r5
 8010306:	3d03      	subs	r5, #3
 8010308:	f021 0103 	bic.w	r1, r1, #3
 801030c:	45a8      	cmp	r8, r5
 801030e:	bf38      	it	cc
 8010310:	2100      	movcc	r1, #0
 8010312:	440b      	add	r3, r1
 8010314:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010318:	b199      	cbz	r1, 8010342 <__mdiff+0x122>
 801031a:	6117      	str	r7, [r2, #16]
 801031c:	e79a      	b.n	8010254 <__mdiff+0x34>
 801031e:	f854 1b04 	ldr.w	r1, [r4], #4
 8010322:	46e6      	mov	lr, ip
 8010324:	fa1f fc81 	uxth.w	ip, r1
 8010328:	0c08      	lsrs	r0, r1, #16
 801032a:	4471      	add	r1, lr
 801032c:	44f4      	add	ip, lr
 801032e:	b289      	uxth	r1, r1
 8010330:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010334:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010338:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801033c:	f846 1b04 	str.w	r1, [r6], #4
 8010340:	e7dc      	b.n	80102fc <__mdiff+0xdc>
 8010342:	3f01      	subs	r7, #1
 8010344:	e7e6      	b.n	8010314 <__mdiff+0xf4>
 8010346:	bf00      	nop
 8010348:	08011204 	.word	0x08011204
 801034c:	08011215 	.word	0x08011215

08010350 <__d2b>:
 8010350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010354:	460f      	mov	r7, r1
 8010356:	2101      	movs	r1, #1
 8010358:	4616      	mov	r6, r2
 801035a:	ec59 8b10 	vmov	r8, r9, d0
 801035e:	f7ff fcc7 	bl	800fcf0 <_Balloc>
 8010362:	4604      	mov	r4, r0
 8010364:	b930      	cbnz	r0, 8010374 <__d2b+0x24>
 8010366:	4602      	mov	r2, r0
 8010368:	4b23      	ldr	r3, [pc, #140]	@ (80103f8 <__d2b+0xa8>)
 801036a:	f240 310f 	movw	r1, #783	@ 0x30f
 801036e:	4823      	ldr	r0, [pc, #140]	@ (80103fc <__d2b+0xac>)
 8010370:	f000 fa82 	bl	8010878 <__assert_func>
 8010374:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801037c:	b10d      	cbz	r5, 8010382 <__d2b+0x32>
 801037e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010382:	9301      	str	r3, [sp, #4]
 8010384:	f1b8 0300 	subs.w	r3, r8, #0
 8010388:	d023      	beq.n	80103d2 <__d2b+0x82>
 801038a:	4668      	mov	r0, sp
 801038c:	9300      	str	r3, [sp, #0]
 801038e:	f7ff fd78 	bl	800fe82 <__lo0bits>
 8010392:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010396:	b1d0      	cbz	r0, 80103ce <__d2b+0x7e>
 8010398:	f1c0 0320 	rsb	r3, r0, #32
 801039c:	fa02 f303 	lsl.w	r3, r2, r3
 80103a0:	40c2      	lsrs	r2, r0
 80103a2:	430b      	orrs	r3, r1
 80103a4:	9201      	str	r2, [sp, #4]
 80103a6:	6163      	str	r3, [r4, #20]
 80103a8:	9b01      	ldr	r3, [sp, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	61a3      	str	r3, [r4, #24]
 80103ae:	bf0c      	ite	eq
 80103b0:	2201      	moveq	r2, #1
 80103b2:	2202      	movne	r2, #2
 80103b4:	6122      	str	r2, [r4, #16]
 80103b6:	b1a5      	cbz	r5, 80103e2 <__d2b+0x92>
 80103b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80103bc:	4405      	add	r5, r0
 80103be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80103c2:	603d      	str	r5, [r7, #0]
 80103c4:	6030      	str	r0, [r6, #0]
 80103c6:	4620      	mov	r0, r4
 80103c8:	b003      	add	sp, #12
 80103ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103ce:	6161      	str	r1, [r4, #20]
 80103d0:	e7ea      	b.n	80103a8 <__d2b+0x58>
 80103d2:	a801      	add	r0, sp, #4
 80103d4:	f7ff fd55 	bl	800fe82 <__lo0bits>
 80103d8:	9b01      	ldr	r3, [sp, #4]
 80103da:	3020      	adds	r0, #32
 80103dc:	2201      	movs	r2, #1
 80103de:	6163      	str	r3, [r4, #20]
 80103e0:	e7e8      	b.n	80103b4 <__d2b+0x64>
 80103e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80103e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103ea:	6038      	str	r0, [r7, #0]
 80103ec:	6918      	ldr	r0, [r3, #16]
 80103ee:	f7ff fd29 	bl	800fe44 <__hi0bits>
 80103f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103f6:	e7e5      	b.n	80103c4 <__d2b+0x74>
 80103f8:	08011204 	.word	0x08011204
 80103fc:	08011215 	.word	0x08011215

08010400 <__ssputs_r>:
 8010400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010404:	461f      	mov	r7, r3
 8010406:	688e      	ldr	r6, [r1, #8]
 8010408:	4682      	mov	sl, r0
 801040a:	460c      	mov	r4, r1
 801040c:	42be      	cmp	r6, r7
 801040e:	4690      	mov	r8, r2
 8010410:	680b      	ldr	r3, [r1, #0]
 8010412:	d82d      	bhi.n	8010470 <__ssputs_r+0x70>
 8010414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010418:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801041c:	d026      	beq.n	801046c <__ssputs_r+0x6c>
 801041e:	6965      	ldr	r5, [r4, #20]
 8010420:	6909      	ldr	r1, [r1, #16]
 8010422:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010426:	eba3 0901 	sub.w	r9, r3, r1
 801042a:	1c7b      	adds	r3, r7, #1
 801042c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010430:	444b      	add	r3, r9
 8010432:	106d      	asrs	r5, r5, #1
 8010434:	429d      	cmp	r5, r3
 8010436:	bf38      	it	cc
 8010438:	461d      	movcc	r5, r3
 801043a:	0553      	lsls	r3, r2, #21
 801043c:	d527      	bpl.n	801048e <__ssputs_r+0x8e>
 801043e:	4629      	mov	r1, r5
 8010440:	f7ff fbca 	bl	800fbd8 <_malloc_r>
 8010444:	4606      	mov	r6, r0
 8010446:	b360      	cbz	r0, 80104a2 <__ssputs_r+0xa2>
 8010448:	464a      	mov	r2, r9
 801044a:	6921      	ldr	r1, [r4, #16]
 801044c:	f000 fa06 	bl	801085c <memcpy>
 8010450:	89a3      	ldrh	r3, [r4, #12]
 8010452:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801045a:	81a3      	strh	r3, [r4, #12]
 801045c:	6126      	str	r6, [r4, #16]
 801045e:	444e      	add	r6, r9
 8010460:	6165      	str	r5, [r4, #20]
 8010462:	eba5 0509 	sub.w	r5, r5, r9
 8010466:	6026      	str	r6, [r4, #0]
 8010468:	463e      	mov	r6, r7
 801046a:	60a5      	str	r5, [r4, #8]
 801046c:	42be      	cmp	r6, r7
 801046e:	d900      	bls.n	8010472 <__ssputs_r+0x72>
 8010470:	463e      	mov	r6, r7
 8010472:	4632      	mov	r2, r6
 8010474:	4641      	mov	r1, r8
 8010476:	6820      	ldr	r0, [r4, #0]
 8010478:	f000 f9c6 	bl	8010808 <memmove>
 801047c:	68a3      	ldr	r3, [r4, #8]
 801047e:	2000      	movs	r0, #0
 8010480:	1b9b      	subs	r3, r3, r6
 8010482:	60a3      	str	r3, [r4, #8]
 8010484:	6823      	ldr	r3, [r4, #0]
 8010486:	4433      	add	r3, r6
 8010488:	6023      	str	r3, [r4, #0]
 801048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801048e:	462a      	mov	r2, r5
 8010490:	f000 fa36 	bl	8010900 <_realloc_r>
 8010494:	4606      	mov	r6, r0
 8010496:	2800      	cmp	r0, #0
 8010498:	d1e0      	bne.n	801045c <__ssputs_r+0x5c>
 801049a:	6921      	ldr	r1, [r4, #16]
 801049c:	4650      	mov	r0, sl
 801049e:	f7ff fb27 	bl	800faf0 <_free_r>
 80104a2:	230c      	movs	r3, #12
 80104a4:	f04f 30ff 	mov.w	r0, #4294967295
 80104a8:	f8ca 3000 	str.w	r3, [sl]
 80104ac:	89a3      	ldrh	r3, [r4, #12]
 80104ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104b2:	81a3      	strh	r3, [r4, #12]
 80104b4:	e7e9      	b.n	801048a <__ssputs_r+0x8a>
	...

080104b8 <_svfiprintf_r>:
 80104b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104bc:	4698      	mov	r8, r3
 80104be:	898b      	ldrh	r3, [r1, #12]
 80104c0:	b09d      	sub	sp, #116	@ 0x74
 80104c2:	4607      	mov	r7, r0
 80104c4:	061b      	lsls	r3, r3, #24
 80104c6:	460d      	mov	r5, r1
 80104c8:	4614      	mov	r4, r2
 80104ca:	d510      	bpl.n	80104ee <_svfiprintf_r+0x36>
 80104cc:	690b      	ldr	r3, [r1, #16]
 80104ce:	b973      	cbnz	r3, 80104ee <_svfiprintf_r+0x36>
 80104d0:	2140      	movs	r1, #64	@ 0x40
 80104d2:	f7ff fb81 	bl	800fbd8 <_malloc_r>
 80104d6:	6028      	str	r0, [r5, #0]
 80104d8:	6128      	str	r0, [r5, #16]
 80104da:	b930      	cbnz	r0, 80104ea <_svfiprintf_r+0x32>
 80104dc:	230c      	movs	r3, #12
 80104de:	603b      	str	r3, [r7, #0]
 80104e0:	f04f 30ff 	mov.w	r0, #4294967295
 80104e4:	b01d      	add	sp, #116	@ 0x74
 80104e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ea:	2340      	movs	r3, #64	@ 0x40
 80104ec:	616b      	str	r3, [r5, #20]
 80104ee:	2300      	movs	r3, #0
 80104f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80104f4:	f04f 0901 	mov.w	r9, #1
 80104f8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 801069c <_svfiprintf_r+0x1e4>
 80104fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80104fe:	2320      	movs	r3, #32
 8010500:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010504:	2330      	movs	r3, #48	@ 0x30
 8010506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801050a:	4623      	mov	r3, r4
 801050c:	469a      	mov	sl, r3
 801050e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010512:	b10a      	cbz	r2, 8010518 <_svfiprintf_r+0x60>
 8010514:	2a25      	cmp	r2, #37	@ 0x25
 8010516:	d1f9      	bne.n	801050c <_svfiprintf_r+0x54>
 8010518:	ebba 0b04 	subs.w	fp, sl, r4
 801051c:	d00b      	beq.n	8010536 <_svfiprintf_r+0x7e>
 801051e:	465b      	mov	r3, fp
 8010520:	4622      	mov	r2, r4
 8010522:	4629      	mov	r1, r5
 8010524:	4638      	mov	r0, r7
 8010526:	f7ff ff6b 	bl	8010400 <__ssputs_r>
 801052a:	3001      	adds	r0, #1
 801052c:	f000 80a7 	beq.w	801067e <_svfiprintf_r+0x1c6>
 8010530:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010532:	445a      	add	r2, fp
 8010534:	9209      	str	r2, [sp, #36]	@ 0x24
 8010536:	f89a 3000 	ldrb.w	r3, [sl]
 801053a:	2b00      	cmp	r3, #0
 801053c:	f000 809f 	beq.w	801067e <_svfiprintf_r+0x1c6>
 8010540:	2300      	movs	r3, #0
 8010542:	f04f 32ff 	mov.w	r2, #4294967295
 8010546:	f10a 0a01 	add.w	sl, sl, #1
 801054a:	9304      	str	r3, [sp, #16]
 801054c:	9307      	str	r3, [sp, #28]
 801054e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010552:	931a      	str	r3, [sp, #104]	@ 0x68
 8010554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010558:	4654      	mov	r4, sl
 801055a:	2205      	movs	r2, #5
 801055c:	484f      	ldr	r0, [pc, #316]	@ (801069c <_svfiprintf_r+0x1e4>)
 801055e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010562:	f7fe fc66 	bl	800ee32 <memchr>
 8010566:	9a04      	ldr	r2, [sp, #16]
 8010568:	b9d8      	cbnz	r0, 80105a2 <_svfiprintf_r+0xea>
 801056a:	06d0      	lsls	r0, r2, #27
 801056c:	bf44      	itt	mi
 801056e:	2320      	movmi	r3, #32
 8010570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010574:	0711      	lsls	r1, r2, #28
 8010576:	bf44      	itt	mi
 8010578:	232b      	movmi	r3, #43	@ 0x2b
 801057a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801057e:	f89a 3000 	ldrb.w	r3, [sl]
 8010582:	2b2a      	cmp	r3, #42	@ 0x2a
 8010584:	d015      	beq.n	80105b2 <_svfiprintf_r+0xfa>
 8010586:	9a07      	ldr	r2, [sp, #28]
 8010588:	4654      	mov	r4, sl
 801058a:	2000      	movs	r0, #0
 801058c:	f04f 0c0a 	mov.w	ip, #10
 8010590:	4621      	mov	r1, r4
 8010592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010596:	3b30      	subs	r3, #48	@ 0x30
 8010598:	2b09      	cmp	r3, #9
 801059a:	d94b      	bls.n	8010634 <_svfiprintf_r+0x17c>
 801059c:	b1b0      	cbz	r0, 80105cc <_svfiprintf_r+0x114>
 801059e:	9207      	str	r2, [sp, #28]
 80105a0:	e014      	b.n	80105cc <_svfiprintf_r+0x114>
 80105a2:	eba0 0308 	sub.w	r3, r0, r8
 80105a6:	46a2      	mov	sl, r4
 80105a8:	fa09 f303 	lsl.w	r3, r9, r3
 80105ac:	4313      	orrs	r3, r2
 80105ae:	9304      	str	r3, [sp, #16]
 80105b0:	e7d2      	b.n	8010558 <_svfiprintf_r+0xa0>
 80105b2:	9b03      	ldr	r3, [sp, #12]
 80105b4:	1d19      	adds	r1, r3, #4
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	9103      	str	r1, [sp, #12]
 80105bc:	bfbb      	ittet	lt
 80105be:	425b      	neglt	r3, r3
 80105c0:	f042 0202 	orrlt.w	r2, r2, #2
 80105c4:	9307      	strge	r3, [sp, #28]
 80105c6:	9307      	strlt	r3, [sp, #28]
 80105c8:	bfb8      	it	lt
 80105ca:	9204      	strlt	r2, [sp, #16]
 80105cc:	7823      	ldrb	r3, [r4, #0]
 80105ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80105d0:	d10a      	bne.n	80105e8 <_svfiprintf_r+0x130>
 80105d2:	7863      	ldrb	r3, [r4, #1]
 80105d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80105d6:	d132      	bne.n	801063e <_svfiprintf_r+0x186>
 80105d8:	9b03      	ldr	r3, [sp, #12]
 80105da:	3402      	adds	r4, #2
 80105dc:	1d1a      	adds	r2, r3, #4
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105e4:	9203      	str	r2, [sp, #12]
 80105e6:	9305      	str	r3, [sp, #20]
 80105e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80106ac <_svfiprintf_r+0x1f4>
 80105ec:	2203      	movs	r2, #3
 80105ee:	7821      	ldrb	r1, [r4, #0]
 80105f0:	4650      	mov	r0, sl
 80105f2:	f7fe fc1e 	bl	800ee32 <memchr>
 80105f6:	b138      	cbz	r0, 8010608 <_svfiprintf_r+0x150>
 80105f8:	eba0 000a 	sub.w	r0, r0, sl
 80105fc:	2240      	movs	r2, #64	@ 0x40
 80105fe:	9b04      	ldr	r3, [sp, #16]
 8010600:	3401      	adds	r4, #1
 8010602:	4082      	lsls	r2, r0
 8010604:	4313      	orrs	r3, r2
 8010606:	9304      	str	r3, [sp, #16]
 8010608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060c:	2206      	movs	r2, #6
 801060e:	4824      	ldr	r0, [pc, #144]	@ (80106a0 <_svfiprintf_r+0x1e8>)
 8010610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010614:	f7fe fc0d 	bl	800ee32 <memchr>
 8010618:	2800      	cmp	r0, #0
 801061a:	d036      	beq.n	801068a <_svfiprintf_r+0x1d2>
 801061c:	4b21      	ldr	r3, [pc, #132]	@ (80106a4 <_svfiprintf_r+0x1ec>)
 801061e:	bb1b      	cbnz	r3, 8010668 <_svfiprintf_r+0x1b0>
 8010620:	9b03      	ldr	r3, [sp, #12]
 8010622:	3307      	adds	r3, #7
 8010624:	f023 0307 	bic.w	r3, r3, #7
 8010628:	3308      	adds	r3, #8
 801062a:	9303      	str	r3, [sp, #12]
 801062c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801062e:	4433      	add	r3, r6
 8010630:	9309      	str	r3, [sp, #36]	@ 0x24
 8010632:	e76a      	b.n	801050a <_svfiprintf_r+0x52>
 8010634:	fb0c 3202 	mla	r2, ip, r2, r3
 8010638:	460c      	mov	r4, r1
 801063a:	2001      	movs	r0, #1
 801063c:	e7a8      	b.n	8010590 <_svfiprintf_r+0xd8>
 801063e:	2300      	movs	r3, #0
 8010640:	3401      	adds	r4, #1
 8010642:	f04f 0c0a 	mov.w	ip, #10
 8010646:	4619      	mov	r1, r3
 8010648:	9305      	str	r3, [sp, #20]
 801064a:	4620      	mov	r0, r4
 801064c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010650:	3a30      	subs	r2, #48	@ 0x30
 8010652:	2a09      	cmp	r2, #9
 8010654:	d903      	bls.n	801065e <_svfiprintf_r+0x1a6>
 8010656:	2b00      	cmp	r3, #0
 8010658:	d0c6      	beq.n	80105e8 <_svfiprintf_r+0x130>
 801065a:	9105      	str	r1, [sp, #20]
 801065c:	e7c4      	b.n	80105e8 <_svfiprintf_r+0x130>
 801065e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010662:	4604      	mov	r4, r0
 8010664:	2301      	movs	r3, #1
 8010666:	e7f0      	b.n	801064a <_svfiprintf_r+0x192>
 8010668:	ab03      	add	r3, sp, #12
 801066a:	462a      	mov	r2, r5
 801066c:	a904      	add	r1, sp, #16
 801066e:	4638      	mov	r0, r7
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	4b0d      	ldr	r3, [pc, #52]	@ (80106a8 <_svfiprintf_r+0x1f0>)
 8010674:	f7fd fe7c 	bl	800e370 <_printf_float>
 8010678:	1c42      	adds	r2, r0, #1
 801067a:	4606      	mov	r6, r0
 801067c:	d1d6      	bne.n	801062c <_svfiprintf_r+0x174>
 801067e:	89ab      	ldrh	r3, [r5, #12]
 8010680:	065b      	lsls	r3, r3, #25
 8010682:	f53f af2d 	bmi.w	80104e0 <_svfiprintf_r+0x28>
 8010686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010688:	e72c      	b.n	80104e4 <_svfiprintf_r+0x2c>
 801068a:	ab03      	add	r3, sp, #12
 801068c:	462a      	mov	r2, r5
 801068e:	a904      	add	r1, sp, #16
 8010690:	4638      	mov	r0, r7
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	4b04      	ldr	r3, [pc, #16]	@ (80106a8 <_svfiprintf_r+0x1f0>)
 8010696:	f7fe f907 	bl	800e8a8 <_printf_i>
 801069a:	e7ed      	b.n	8010678 <_svfiprintf_r+0x1c0>
 801069c:	08011370 	.word	0x08011370
 80106a0:	0801137a 	.word	0x0801137a
 80106a4:	0800e371 	.word	0x0800e371
 80106a8:	08010401 	.word	0x08010401
 80106ac:	08011376 	.word	0x08011376

080106b0 <__sflush_r>:
 80106b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80106b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b8:	0716      	lsls	r6, r2, #28
 80106ba:	4605      	mov	r5, r0
 80106bc:	460c      	mov	r4, r1
 80106be:	d454      	bmi.n	801076a <__sflush_r+0xba>
 80106c0:	684b      	ldr	r3, [r1, #4]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	dc02      	bgt.n	80106cc <__sflush_r+0x1c>
 80106c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	dd48      	ble.n	801075e <__sflush_r+0xae>
 80106cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106ce:	2e00      	cmp	r6, #0
 80106d0:	d045      	beq.n	801075e <__sflush_r+0xae>
 80106d2:	2300      	movs	r3, #0
 80106d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80106d8:	682f      	ldr	r7, [r5, #0]
 80106da:	6a21      	ldr	r1, [r4, #32]
 80106dc:	602b      	str	r3, [r5, #0]
 80106de:	d030      	beq.n	8010742 <__sflush_r+0x92>
 80106e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80106e2:	89a3      	ldrh	r3, [r4, #12]
 80106e4:	0759      	lsls	r1, r3, #29
 80106e6:	d505      	bpl.n	80106f4 <__sflush_r+0x44>
 80106e8:	6863      	ldr	r3, [r4, #4]
 80106ea:	1ad2      	subs	r2, r2, r3
 80106ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80106ee:	b10b      	cbz	r3, 80106f4 <__sflush_r+0x44>
 80106f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80106f2:	1ad2      	subs	r2, r2, r3
 80106f4:	2300      	movs	r3, #0
 80106f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106f8:	6a21      	ldr	r1, [r4, #32]
 80106fa:	4628      	mov	r0, r5
 80106fc:	47b0      	blx	r6
 80106fe:	1c43      	adds	r3, r0, #1
 8010700:	89a3      	ldrh	r3, [r4, #12]
 8010702:	d106      	bne.n	8010712 <__sflush_r+0x62>
 8010704:	6829      	ldr	r1, [r5, #0]
 8010706:	291d      	cmp	r1, #29
 8010708:	d82b      	bhi.n	8010762 <__sflush_r+0xb2>
 801070a:	4a2a      	ldr	r2, [pc, #168]	@ (80107b4 <__sflush_r+0x104>)
 801070c:	410a      	asrs	r2, r1
 801070e:	07d6      	lsls	r6, r2, #31
 8010710:	d427      	bmi.n	8010762 <__sflush_r+0xb2>
 8010712:	2200      	movs	r2, #0
 8010714:	04d9      	lsls	r1, r3, #19
 8010716:	6062      	str	r2, [r4, #4]
 8010718:	6922      	ldr	r2, [r4, #16]
 801071a:	6022      	str	r2, [r4, #0]
 801071c:	d504      	bpl.n	8010728 <__sflush_r+0x78>
 801071e:	1c42      	adds	r2, r0, #1
 8010720:	d101      	bne.n	8010726 <__sflush_r+0x76>
 8010722:	682b      	ldr	r3, [r5, #0]
 8010724:	b903      	cbnz	r3, 8010728 <__sflush_r+0x78>
 8010726:	6560      	str	r0, [r4, #84]	@ 0x54
 8010728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801072a:	602f      	str	r7, [r5, #0]
 801072c:	b1b9      	cbz	r1, 801075e <__sflush_r+0xae>
 801072e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010732:	4299      	cmp	r1, r3
 8010734:	d002      	beq.n	801073c <__sflush_r+0x8c>
 8010736:	4628      	mov	r0, r5
 8010738:	f7ff f9da 	bl	800faf0 <_free_r>
 801073c:	2300      	movs	r3, #0
 801073e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010740:	e00d      	b.n	801075e <__sflush_r+0xae>
 8010742:	2301      	movs	r3, #1
 8010744:	4628      	mov	r0, r5
 8010746:	47b0      	blx	r6
 8010748:	4602      	mov	r2, r0
 801074a:	1c50      	adds	r0, r2, #1
 801074c:	d1c9      	bne.n	80106e2 <__sflush_r+0x32>
 801074e:	682b      	ldr	r3, [r5, #0]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d0c6      	beq.n	80106e2 <__sflush_r+0x32>
 8010754:	2b1d      	cmp	r3, #29
 8010756:	d001      	beq.n	801075c <__sflush_r+0xac>
 8010758:	2b16      	cmp	r3, #22
 801075a:	d11d      	bne.n	8010798 <__sflush_r+0xe8>
 801075c:	602f      	str	r7, [r5, #0]
 801075e:	2000      	movs	r0, #0
 8010760:	e021      	b.n	80107a6 <__sflush_r+0xf6>
 8010762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010766:	b21b      	sxth	r3, r3
 8010768:	e01a      	b.n	80107a0 <__sflush_r+0xf0>
 801076a:	690f      	ldr	r7, [r1, #16]
 801076c:	2f00      	cmp	r7, #0
 801076e:	d0f6      	beq.n	801075e <__sflush_r+0xae>
 8010770:	0793      	lsls	r3, r2, #30
 8010772:	680e      	ldr	r6, [r1, #0]
 8010774:	600f      	str	r7, [r1, #0]
 8010776:	bf0c      	ite	eq
 8010778:	694b      	ldreq	r3, [r1, #20]
 801077a:	2300      	movne	r3, #0
 801077c:	eba6 0807 	sub.w	r8, r6, r7
 8010780:	608b      	str	r3, [r1, #8]
 8010782:	f1b8 0f00 	cmp.w	r8, #0
 8010786:	ddea      	ble.n	801075e <__sflush_r+0xae>
 8010788:	4643      	mov	r3, r8
 801078a:	463a      	mov	r2, r7
 801078c:	6a21      	ldr	r1, [r4, #32]
 801078e:	4628      	mov	r0, r5
 8010790:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010792:	47b0      	blx	r6
 8010794:	2800      	cmp	r0, #0
 8010796:	dc08      	bgt.n	80107aa <__sflush_r+0xfa>
 8010798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801079c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107a0:	f04f 30ff 	mov.w	r0, #4294967295
 80107a4:	81a3      	strh	r3, [r4, #12]
 80107a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107aa:	4407      	add	r7, r0
 80107ac:	eba8 0800 	sub.w	r8, r8, r0
 80107b0:	e7e7      	b.n	8010782 <__sflush_r+0xd2>
 80107b2:	bf00      	nop
 80107b4:	dfbffffe 	.word	0xdfbffffe

080107b8 <_fflush_r>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	690b      	ldr	r3, [r1, #16]
 80107bc:	4605      	mov	r5, r0
 80107be:	460c      	mov	r4, r1
 80107c0:	b913      	cbnz	r3, 80107c8 <_fflush_r+0x10>
 80107c2:	2500      	movs	r5, #0
 80107c4:	4628      	mov	r0, r5
 80107c6:	bd38      	pop	{r3, r4, r5, pc}
 80107c8:	b118      	cbz	r0, 80107d2 <_fflush_r+0x1a>
 80107ca:	6a03      	ldr	r3, [r0, #32]
 80107cc:	b90b      	cbnz	r3, 80107d2 <_fflush_r+0x1a>
 80107ce:	f7fe fa17 	bl	800ec00 <__sinit>
 80107d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d0f3      	beq.n	80107c2 <_fflush_r+0xa>
 80107da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80107dc:	07d0      	lsls	r0, r2, #31
 80107de:	d404      	bmi.n	80107ea <_fflush_r+0x32>
 80107e0:	0599      	lsls	r1, r3, #22
 80107e2:	d402      	bmi.n	80107ea <_fflush_r+0x32>
 80107e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107e6:	f7fe fb22 	bl	800ee2e <__retarget_lock_acquire_recursive>
 80107ea:	4628      	mov	r0, r5
 80107ec:	4621      	mov	r1, r4
 80107ee:	f7ff ff5f 	bl	80106b0 <__sflush_r>
 80107f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80107f4:	4605      	mov	r5, r0
 80107f6:	07da      	lsls	r2, r3, #31
 80107f8:	d4e4      	bmi.n	80107c4 <_fflush_r+0xc>
 80107fa:	89a3      	ldrh	r3, [r4, #12]
 80107fc:	059b      	lsls	r3, r3, #22
 80107fe:	d4e1      	bmi.n	80107c4 <_fflush_r+0xc>
 8010800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010802:	f7fe fb15 	bl	800ee30 <__retarget_lock_release_recursive>
 8010806:	e7dd      	b.n	80107c4 <_fflush_r+0xc>

08010808 <memmove>:
 8010808:	4288      	cmp	r0, r1
 801080a:	b510      	push	{r4, lr}
 801080c:	eb01 0402 	add.w	r4, r1, r2
 8010810:	d902      	bls.n	8010818 <memmove+0x10>
 8010812:	4284      	cmp	r4, r0
 8010814:	4623      	mov	r3, r4
 8010816:	d807      	bhi.n	8010828 <memmove+0x20>
 8010818:	1e43      	subs	r3, r0, #1
 801081a:	42a1      	cmp	r1, r4
 801081c:	d008      	beq.n	8010830 <memmove+0x28>
 801081e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010826:	e7f8      	b.n	801081a <memmove+0x12>
 8010828:	4402      	add	r2, r0
 801082a:	4601      	mov	r1, r0
 801082c:	428a      	cmp	r2, r1
 801082e:	d100      	bne.n	8010832 <memmove+0x2a>
 8010830:	bd10      	pop	{r4, pc}
 8010832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801083a:	e7f7      	b.n	801082c <memmove+0x24>

0801083c <_sbrk_r>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	2300      	movs	r3, #0
 8010840:	4d05      	ldr	r5, [pc, #20]	@ (8010858 <_sbrk_r+0x1c>)
 8010842:	4604      	mov	r4, r0
 8010844:	4608      	mov	r0, r1
 8010846:	602b      	str	r3, [r5, #0]
 8010848:	f7f3 f884 	bl	8003954 <_sbrk>
 801084c:	1c43      	adds	r3, r0, #1
 801084e:	d102      	bne.n	8010856 <_sbrk_r+0x1a>
 8010850:	682b      	ldr	r3, [r5, #0]
 8010852:	b103      	cbz	r3, 8010856 <_sbrk_r+0x1a>
 8010854:	6023      	str	r3, [r4, #0]
 8010856:	bd38      	pop	{r3, r4, r5, pc}
 8010858:	20004c08 	.word	0x20004c08

0801085c <memcpy>:
 801085c:	440a      	add	r2, r1
 801085e:	1e43      	subs	r3, r0, #1
 8010860:	4291      	cmp	r1, r2
 8010862:	d100      	bne.n	8010866 <memcpy+0xa>
 8010864:	4770      	bx	lr
 8010866:	b510      	push	{r4, lr}
 8010868:	f811 4b01 	ldrb.w	r4, [r1], #1
 801086c:	4291      	cmp	r1, r2
 801086e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010872:	d1f9      	bne.n	8010868 <memcpy+0xc>
 8010874:	bd10      	pop	{r4, pc}
	...

08010878 <__assert_func>:
 8010878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801087a:	4614      	mov	r4, r2
 801087c:	461a      	mov	r2, r3
 801087e:	4b09      	ldr	r3, [pc, #36]	@ (80108a4 <__assert_func+0x2c>)
 8010880:	4605      	mov	r5, r0
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	68d8      	ldr	r0, [r3, #12]
 8010886:	b954      	cbnz	r4, 801089e <__assert_func+0x26>
 8010888:	4b07      	ldr	r3, [pc, #28]	@ (80108a8 <__assert_func+0x30>)
 801088a:	461c      	mov	r4, r3
 801088c:	9100      	str	r1, [sp, #0]
 801088e:	4907      	ldr	r1, [pc, #28]	@ (80108ac <__assert_func+0x34>)
 8010890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010894:	462b      	mov	r3, r5
 8010896:	f000 f86f 	bl	8010978 <fiprintf>
 801089a:	f000 f87f 	bl	801099c <abort>
 801089e:	4b04      	ldr	r3, [pc, #16]	@ (80108b0 <__assert_func+0x38>)
 80108a0:	e7f4      	b.n	801088c <__assert_func+0x14>
 80108a2:	bf00      	nop
 80108a4:	20000034 	.word	0x20000034
 80108a8:	080113c6 	.word	0x080113c6
 80108ac:	08011398 	.word	0x08011398
 80108b0:	0801138b 	.word	0x0801138b

080108b4 <_calloc_r>:
 80108b4:	b570      	push	{r4, r5, r6, lr}
 80108b6:	fba1 5402 	umull	r5, r4, r1, r2
 80108ba:	b93c      	cbnz	r4, 80108cc <_calloc_r+0x18>
 80108bc:	4629      	mov	r1, r5
 80108be:	f7ff f98b 	bl	800fbd8 <_malloc_r>
 80108c2:	4606      	mov	r6, r0
 80108c4:	b928      	cbnz	r0, 80108d2 <_calloc_r+0x1e>
 80108c6:	2600      	movs	r6, #0
 80108c8:	4630      	mov	r0, r6
 80108ca:	bd70      	pop	{r4, r5, r6, pc}
 80108cc:	220c      	movs	r2, #12
 80108ce:	6002      	str	r2, [r0, #0]
 80108d0:	e7f9      	b.n	80108c6 <_calloc_r+0x12>
 80108d2:	462a      	mov	r2, r5
 80108d4:	4621      	mov	r1, r4
 80108d6:	f7fe fa2c 	bl	800ed32 <memset>
 80108da:	e7f5      	b.n	80108c8 <_calloc_r+0x14>

080108dc <__ascii_mbtowc>:
 80108dc:	b082      	sub	sp, #8
 80108de:	b901      	cbnz	r1, 80108e2 <__ascii_mbtowc+0x6>
 80108e0:	a901      	add	r1, sp, #4
 80108e2:	b142      	cbz	r2, 80108f6 <__ascii_mbtowc+0x1a>
 80108e4:	b14b      	cbz	r3, 80108fa <__ascii_mbtowc+0x1e>
 80108e6:	7813      	ldrb	r3, [r2, #0]
 80108e8:	600b      	str	r3, [r1, #0]
 80108ea:	7812      	ldrb	r2, [r2, #0]
 80108ec:	1e10      	subs	r0, r2, #0
 80108ee:	bf18      	it	ne
 80108f0:	2001      	movne	r0, #1
 80108f2:	b002      	add	sp, #8
 80108f4:	4770      	bx	lr
 80108f6:	4610      	mov	r0, r2
 80108f8:	e7fb      	b.n	80108f2 <__ascii_mbtowc+0x16>
 80108fa:	f06f 0001 	mvn.w	r0, #1
 80108fe:	e7f8      	b.n	80108f2 <__ascii_mbtowc+0x16>

08010900 <_realloc_r>:
 8010900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010904:	4680      	mov	r8, r0
 8010906:	4615      	mov	r5, r2
 8010908:	460c      	mov	r4, r1
 801090a:	b921      	cbnz	r1, 8010916 <_realloc_r+0x16>
 801090c:	4611      	mov	r1, r2
 801090e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010912:	f7ff b961 	b.w	800fbd8 <_malloc_r>
 8010916:	b92a      	cbnz	r2, 8010924 <_realloc_r+0x24>
 8010918:	f7ff f8ea 	bl	800faf0 <_free_r>
 801091c:	2400      	movs	r4, #0
 801091e:	4620      	mov	r0, r4
 8010920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010924:	f000 f841 	bl	80109aa <_malloc_usable_size_r>
 8010928:	4285      	cmp	r5, r0
 801092a:	4606      	mov	r6, r0
 801092c:	d802      	bhi.n	8010934 <_realloc_r+0x34>
 801092e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010932:	d8f4      	bhi.n	801091e <_realloc_r+0x1e>
 8010934:	4629      	mov	r1, r5
 8010936:	4640      	mov	r0, r8
 8010938:	f7ff f94e 	bl	800fbd8 <_malloc_r>
 801093c:	4607      	mov	r7, r0
 801093e:	2800      	cmp	r0, #0
 8010940:	d0ec      	beq.n	801091c <_realloc_r+0x1c>
 8010942:	42b5      	cmp	r5, r6
 8010944:	462a      	mov	r2, r5
 8010946:	4621      	mov	r1, r4
 8010948:	bf28      	it	cs
 801094a:	4632      	movcs	r2, r6
 801094c:	f7ff ff86 	bl	801085c <memcpy>
 8010950:	4621      	mov	r1, r4
 8010952:	4640      	mov	r0, r8
 8010954:	463c      	mov	r4, r7
 8010956:	f7ff f8cb 	bl	800faf0 <_free_r>
 801095a:	e7e0      	b.n	801091e <_realloc_r+0x1e>

0801095c <__ascii_wctomb>:
 801095c:	4603      	mov	r3, r0
 801095e:	4608      	mov	r0, r1
 8010960:	b141      	cbz	r1, 8010974 <__ascii_wctomb+0x18>
 8010962:	2aff      	cmp	r2, #255	@ 0xff
 8010964:	d904      	bls.n	8010970 <__ascii_wctomb+0x14>
 8010966:	228a      	movs	r2, #138	@ 0x8a
 8010968:	f04f 30ff 	mov.w	r0, #4294967295
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	4770      	bx	lr
 8010970:	2001      	movs	r0, #1
 8010972:	700a      	strb	r2, [r1, #0]
 8010974:	4770      	bx	lr
	...

08010978 <fiprintf>:
 8010978:	b40e      	push	{r1, r2, r3}
 801097a:	b503      	push	{r0, r1, lr}
 801097c:	ab03      	add	r3, sp, #12
 801097e:	4601      	mov	r1, r0
 8010980:	4805      	ldr	r0, [pc, #20]	@ (8010998 <fiprintf+0x20>)
 8010982:	f853 2b04 	ldr.w	r2, [r3], #4
 8010986:	6800      	ldr	r0, [r0, #0]
 8010988:	9301      	str	r3, [sp, #4]
 801098a:	f000 f83f 	bl	8010a0c <_vfiprintf_r>
 801098e:	b002      	add	sp, #8
 8010990:	f85d eb04 	ldr.w	lr, [sp], #4
 8010994:	b003      	add	sp, #12
 8010996:	4770      	bx	lr
 8010998:	20000034 	.word	0x20000034

0801099c <abort>:
 801099c:	2006      	movs	r0, #6
 801099e:	b508      	push	{r3, lr}
 80109a0:	f000 fa08 	bl	8010db4 <raise>
 80109a4:	2001      	movs	r0, #1
 80109a6:	f7f2 ff5d 	bl	8003864 <_exit>

080109aa <_malloc_usable_size_r>:
 80109aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109ae:	1f18      	subs	r0, r3, #4
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	bfbc      	itt	lt
 80109b4:	580b      	ldrlt	r3, [r1, r0]
 80109b6:	18c0      	addlt	r0, r0, r3
 80109b8:	4770      	bx	lr

080109ba <__sfputc_r>:
 80109ba:	6893      	ldr	r3, [r2, #8]
 80109bc:	3b01      	subs	r3, #1
 80109be:	2b00      	cmp	r3, #0
 80109c0:	6093      	str	r3, [r2, #8]
 80109c2:	b410      	push	{r4}
 80109c4:	da08      	bge.n	80109d8 <__sfputc_r+0x1e>
 80109c6:	6994      	ldr	r4, [r2, #24]
 80109c8:	42a3      	cmp	r3, r4
 80109ca:	db01      	blt.n	80109d0 <__sfputc_r+0x16>
 80109cc:	290a      	cmp	r1, #10
 80109ce:	d103      	bne.n	80109d8 <__sfputc_r+0x1e>
 80109d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109d4:	f000 b932 	b.w	8010c3c <__swbuf_r>
 80109d8:	6813      	ldr	r3, [r2, #0]
 80109da:	1c58      	adds	r0, r3, #1
 80109dc:	6010      	str	r0, [r2, #0]
 80109de:	4608      	mov	r0, r1
 80109e0:	7019      	strb	r1, [r3, #0]
 80109e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109e6:	4770      	bx	lr

080109e8 <__sfputs_r>:
 80109e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ea:	4606      	mov	r6, r0
 80109ec:	460f      	mov	r7, r1
 80109ee:	4614      	mov	r4, r2
 80109f0:	18d5      	adds	r5, r2, r3
 80109f2:	42ac      	cmp	r4, r5
 80109f4:	d101      	bne.n	80109fa <__sfputs_r+0x12>
 80109f6:	2000      	movs	r0, #0
 80109f8:	e007      	b.n	8010a0a <__sfputs_r+0x22>
 80109fa:	463a      	mov	r2, r7
 80109fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a00:	4630      	mov	r0, r6
 8010a02:	f7ff ffda 	bl	80109ba <__sfputc_r>
 8010a06:	1c43      	adds	r3, r0, #1
 8010a08:	d1f3      	bne.n	80109f2 <__sfputs_r+0xa>
 8010a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010a0c <_vfiprintf_r>:
 8010a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a10:	460d      	mov	r5, r1
 8010a12:	b09d      	sub	sp, #116	@ 0x74
 8010a14:	4614      	mov	r4, r2
 8010a16:	4698      	mov	r8, r3
 8010a18:	4606      	mov	r6, r0
 8010a1a:	b118      	cbz	r0, 8010a24 <_vfiprintf_r+0x18>
 8010a1c:	6a03      	ldr	r3, [r0, #32]
 8010a1e:	b90b      	cbnz	r3, 8010a24 <_vfiprintf_r+0x18>
 8010a20:	f7fe f8ee 	bl	800ec00 <__sinit>
 8010a24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a26:	07d9      	lsls	r1, r3, #31
 8010a28:	d405      	bmi.n	8010a36 <_vfiprintf_r+0x2a>
 8010a2a:	89ab      	ldrh	r3, [r5, #12]
 8010a2c:	059a      	lsls	r2, r3, #22
 8010a2e:	d402      	bmi.n	8010a36 <_vfiprintf_r+0x2a>
 8010a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a32:	f7fe f9fc 	bl	800ee2e <__retarget_lock_acquire_recursive>
 8010a36:	89ab      	ldrh	r3, [r5, #12]
 8010a38:	071b      	lsls	r3, r3, #28
 8010a3a:	d501      	bpl.n	8010a40 <_vfiprintf_r+0x34>
 8010a3c:	692b      	ldr	r3, [r5, #16]
 8010a3e:	b99b      	cbnz	r3, 8010a68 <_vfiprintf_r+0x5c>
 8010a40:	4629      	mov	r1, r5
 8010a42:	4630      	mov	r0, r6
 8010a44:	f000 f938 	bl	8010cb8 <__swsetup_r>
 8010a48:	b170      	cbz	r0, 8010a68 <_vfiprintf_r+0x5c>
 8010a4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a4c:	07dc      	lsls	r4, r3, #31
 8010a4e:	d504      	bpl.n	8010a5a <_vfiprintf_r+0x4e>
 8010a50:	f04f 30ff 	mov.w	r0, #4294967295
 8010a54:	b01d      	add	sp, #116	@ 0x74
 8010a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a5a:	89ab      	ldrh	r3, [r5, #12]
 8010a5c:	0598      	lsls	r0, r3, #22
 8010a5e:	d4f7      	bmi.n	8010a50 <_vfiprintf_r+0x44>
 8010a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a62:	f7fe f9e5 	bl	800ee30 <__retarget_lock_release_recursive>
 8010a66:	e7f3      	b.n	8010a50 <_vfiprintf_r+0x44>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a6e:	f04f 0901 	mov.w	r9, #1
 8010a72:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010c28 <_vfiprintf_r+0x21c>
 8010a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a78:	2320      	movs	r3, #32
 8010a7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a7e:	2330      	movs	r3, #48	@ 0x30
 8010a80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a84:	4623      	mov	r3, r4
 8010a86:	469a      	mov	sl, r3
 8010a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a8c:	b10a      	cbz	r2, 8010a92 <_vfiprintf_r+0x86>
 8010a8e:	2a25      	cmp	r2, #37	@ 0x25
 8010a90:	d1f9      	bne.n	8010a86 <_vfiprintf_r+0x7a>
 8010a92:	ebba 0b04 	subs.w	fp, sl, r4
 8010a96:	d00b      	beq.n	8010ab0 <_vfiprintf_r+0xa4>
 8010a98:	465b      	mov	r3, fp
 8010a9a:	4622      	mov	r2, r4
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	f7ff ffa2 	bl	80109e8 <__sfputs_r>
 8010aa4:	3001      	adds	r0, #1
 8010aa6:	f000 80a7 	beq.w	8010bf8 <_vfiprintf_r+0x1ec>
 8010aaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010aac:	445a      	add	r2, fp
 8010aae:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	f000 809f 	beq.w	8010bf8 <_vfiprintf_r+0x1ec>
 8010aba:	2300      	movs	r3, #0
 8010abc:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac0:	f10a 0a01 	add.w	sl, sl, #1
 8010ac4:	9304      	str	r3, [sp, #16]
 8010ac6:	9307      	str	r3, [sp, #28]
 8010ac8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010acc:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ad2:	4654      	mov	r4, sl
 8010ad4:	2205      	movs	r2, #5
 8010ad6:	4854      	ldr	r0, [pc, #336]	@ (8010c28 <_vfiprintf_r+0x21c>)
 8010ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010adc:	f7fe f9a9 	bl	800ee32 <memchr>
 8010ae0:	9a04      	ldr	r2, [sp, #16]
 8010ae2:	b9d8      	cbnz	r0, 8010b1c <_vfiprintf_r+0x110>
 8010ae4:	06d1      	lsls	r1, r2, #27
 8010ae6:	bf44      	itt	mi
 8010ae8:	2320      	movmi	r3, #32
 8010aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010aee:	0713      	lsls	r3, r2, #28
 8010af0:	bf44      	itt	mi
 8010af2:	232b      	movmi	r3, #43	@ 0x2b
 8010af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010af8:	f89a 3000 	ldrb.w	r3, [sl]
 8010afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8010afe:	d015      	beq.n	8010b2c <_vfiprintf_r+0x120>
 8010b00:	9a07      	ldr	r2, [sp, #28]
 8010b02:	4654      	mov	r4, sl
 8010b04:	2000      	movs	r0, #0
 8010b06:	f04f 0c0a 	mov.w	ip, #10
 8010b0a:	4621      	mov	r1, r4
 8010b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b10:	3b30      	subs	r3, #48	@ 0x30
 8010b12:	2b09      	cmp	r3, #9
 8010b14:	d94b      	bls.n	8010bae <_vfiprintf_r+0x1a2>
 8010b16:	b1b0      	cbz	r0, 8010b46 <_vfiprintf_r+0x13a>
 8010b18:	9207      	str	r2, [sp, #28]
 8010b1a:	e014      	b.n	8010b46 <_vfiprintf_r+0x13a>
 8010b1c:	eba0 0308 	sub.w	r3, r0, r8
 8010b20:	46a2      	mov	sl, r4
 8010b22:	fa09 f303 	lsl.w	r3, r9, r3
 8010b26:	4313      	orrs	r3, r2
 8010b28:	9304      	str	r3, [sp, #16]
 8010b2a:	e7d2      	b.n	8010ad2 <_vfiprintf_r+0xc6>
 8010b2c:	9b03      	ldr	r3, [sp, #12]
 8010b2e:	1d19      	adds	r1, r3, #4
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	9103      	str	r1, [sp, #12]
 8010b36:	bfbb      	ittet	lt
 8010b38:	425b      	neglt	r3, r3
 8010b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8010b3e:	9307      	strge	r3, [sp, #28]
 8010b40:	9307      	strlt	r3, [sp, #28]
 8010b42:	bfb8      	it	lt
 8010b44:	9204      	strlt	r2, [sp, #16]
 8010b46:	7823      	ldrb	r3, [r4, #0]
 8010b48:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b4a:	d10a      	bne.n	8010b62 <_vfiprintf_r+0x156>
 8010b4c:	7863      	ldrb	r3, [r4, #1]
 8010b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b50:	d132      	bne.n	8010bb8 <_vfiprintf_r+0x1ac>
 8010b52:	9b03      	ldr	r3, [sp, #12]
 8010b54:	3402      	adds	r4, #2
 8010b56:	1d1a      	adds	r2, r3, #4
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b5e:	9203      	str	r2, [sp, #12]
 8010b60:	9305      	str	r3, [sp, #20]
 8010b62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c38 <_vfiprintf_r+0x22c>
 8010b66:	2203      	movs	r2, #3
 8010b68:	7821      	ldrb	r1, [r4, #0]
 8010b6a:	4650      	mov	r0, sl
 8010b6c:	f7fe f961 	bl	800ee32 <memchr>
 8010b70:	b138      	cbz	r0, 8010b82 <_vfiprintf_r+0x176>
 8010b72:	eba0 000a 	sub.w	r0, r0, sl
 8010b76:	2240      	movs	r2, #64	@ 0x40
 8010b78:	9b04      	ldr	r3, [sp, #16]
 8010b7a:	3401      	adds	r4, #1
 8010b7c:	4082      	lsls	r2, r0
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	9304      	str	r3, [sp, #16]
 8010b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b86:	2206      	movs	r2, #6
 8010b88:	4828      	ldr	r0, [pc, #160]	@ (8010c2c <_vfiprintf_r+0x220>)
 8010b8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b8e:	f7fe f950 	bl	800ee32 <memchr>
 8010b92:	2800      	cmp	r0, #0
 8010b94:	d03f      	beq.n	8010c16 <_vfiprintf_r+0x20a>
 8010b96:	4b26      	ldr	r3, [pc, #152]	@ (8010c30 <_vfiprintf_r+0x224>)
 8010b98:	bb1b      	cbnz	r3, 8010be2 <_vfiprintf_r+0x1d6>
 8010b9a:	9b03      	ldr	r3, [sp, #12]
 8010b9c:	3307      	adds	r3, #7
 8010b9e:	f023 0307 	bic.w	r3, r3, #7
 8010ba2:	3308      	adds	r3, #8
 8010ba4:	9303      	str	r3, [sp, #12]
 8010ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ba8:	443b      	add	r3, r7
 8010baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bac:	e76a      	b.n	8010a84 <_vfiprintf_r+0x78>
 8010bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	2001      	movs	r0, #1
 8010bb6:	e7a8      	b.n	8010b0a <_vfiprintf_r+0xfe>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	3401      	adds	r4, #1
 8010bbc:	f04f 0c0a 	mov.w	ip, #10
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	9305      	str	r3, [sp, #20]
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bca:	3a30      	subs	r2, #48	@ 0x30
 8010bcc:	2a09      	cmp	r2, #9
 8010bce:	d903      	bls.n	8010bd8 <_vfiprintf_r+0x1cc>
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d0c6      	beq.n	8010b62 <_vfiprintf_r+0x156>
 8010bd4:	9105      	str	r1, [sp, #20]
 8010bd6:	e7c4      	b.n	8010b62 <_vfiprintf_r+0x156>
 8010bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bdc:	4604      	mov	r4, r0
 8010bde:	2301      	movs	r3, #1
 8010be0:	e7f0      	b.n	8010bc4 <_vfiprintf_r+0x1b8>
 8010be2:	ab03      	add	r3, sp, #12
 8010be4:	462a      	mov	r2, r5
 8010be6:	a904      	add	r1, sp, #16
 8010be8:	4630      	mov	r0, r6
 8010bea:	9300      	str	r3, [sp, #0]
 8010bec:	4b11      	ldr	r3, [pc, #68]	@ (8010c34 <_vfiprintf_r+0x228>)
 8010bee:	f7fd fbbf 	bl	800e370 <_printf_float>
 8010bf2:	4607      	mov	r7, r0
 8010bf4:	1c78      	adds	r0, r7, #1
 8010bf6:	d1d6      	bne.n	8010ba6 <_vfiprintf_r+0x19a>
 8010bf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010bfa:	07d9      	lsls	r1, r3, #31
 8010bfc:	d405      	bmi.n	8010c0a <_vfiprintf_r+0x1fe>
 8010bfe:	89ab      	ldrh	r3, [r5, #12]
 8010c00:	059a      	lsls	r2, r3, #22
 8010c02:	d402      	bmi.n	8010c0a <_vfiprintf_r+0x1fe>
 8010c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c06:	f7fe f913 	bl	800ee30 <__retarget_lock_release_recursive>
 8010c0a:	89ab      	ldrh	r3, [r5, #12]
 8010c0c:	065b      	lsls	r3, r3, #25
 8010c0e:	f53f af1f 	bmi.w	8010a50 <_vfiprintf_r+0x44>
 8010c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c14:	e71e      	b.n	8010a54 <_vfiprintf_r+0x48>
 8010c16:	ab03      	add	r3, sp, #12
 8010c18:	462a      	mov	r2, r5
 8010c1a:	a904      	add	r1, sp, #16
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	4b04      	ldr	r3, [pc, #16]	@ (8010c34 <_vfiprintf_r+0x228>)
 8010c22:	f7fd fe41 	bl	800e8a8 <_printf_i>
 8010c26:	e7e4      	b.n	8010bf2 <_vfiprintf_r+0x1e6>
 8010c28:	08011370 	.word	0x08011370
 8010c2c:	0801137a 	.word	0x0801137a
 8010c30:	0800e371 	.word	0x0800e371
 8010c34:	080109e9 	.word	0x080109e9
 8010c38:	08011376 	.word	0x08011376

08010c3c <__swbuf_r>:
 8010c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c3e:	460e      	mov	r6, r1
 8010c40:	4614      	mov	r4, r2
 8010c42:	4605      	mov	r5, r0
 8010c44:	b118      	cbz	r0, 8010c4e <__swbuf_r+0x12>
 8010c46:	6a03      	ldr	r3, [r0, #32]
 8010c48:	b90b      	cbnz	r3, 8010c4e <__swbuf_r+0x12>
 8010c4a:	f7fd ffd9 	bl	800ec00 <__sinit>
 8010c4e:	69a3      	ldr	r3, [r4, #24]
 8010c50:	60a3      	str	r3, [r4, #8]
 8010c52:	89a3      	ldrh	r3, [r4, #12]
 8010c54:	071a      	lsls	r2, r3, #28
 8010c56:	d501      	bpl.n	8010c5c <__swbuf_r+0x20>
 8010c58:	6923      	ldr	r3, [r4, #16]
 8010c5a:	b943      	cbnz	r3, 8010c6e <__swbuf_r+0x32>
 8010c5c:	4621      	mov	r1, r4
 8010c5e:	4628      	mov	r0, r5
 8010c60:	f000 f82a 	bl	8010cb8 <__swsetup_r>
 8010c64:	b118      	cbz	r0, 8010c6e <__swbuf_r+0x32>
 8010c66:	f04f 37ff 	mov.w	r7, #4294967295
 8010c6a:	4638      	mov	r0, r7
 8010c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c6e:	6823      	ldr	r3, [r4, #0]
 8010c70:	b2f6      	uxtb	r6, r6
 8010c72:	6922      	ldr	r2, [r4, #16]
 8010c74:	4637      	mov	r7, r6
 8010c76:	1a98      	subs	r0, r3, r2
 8010c78:	6963      	ldr	r3, [r4, #20]
 8010c7a:	4283      	cmp	r3, r0
 8010c7c:	dc05      	bgt.n	8010c8a <__swbuf_r+0x4e>
 8010c7e:	4621      	mov	r1, r4
 8010c80:	4628      	mov	r0, r5
 8010c82:	f7ff fd99 	bl	80107b8 <_fflush_r>
 8010c86:	2800      	cmp	r0, #0
 8010c88:	d1ed      	bne.n	8010c66 <__swbuf_r+0x2a>
 8010c8a:	68a3      	ldr	r3, [r4, #8]
 8010c8c:	3b01      	subs	r3, #1
 8010c8e:	60a3      	str	r3, [r4, #8]
 8010c90:	6823      	ldr	r3, [r4, #0]
 8010c92:	1c5a      	adds	r2, r3, #1
 8010c94:	6022      	str	r2, [r4, #0]
 8010c96:	701e      	strb	r6, [r3, #0]
 8010c98:	1c43      	adds	r3, r0, #1
 8010c9a:	6962      	ldr	r2, [r4, #20]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d004      	beq.n	8010caa <__swbuf_r+0x6e>
 8010ca0:	89a3      	ldrh	r3, [r4, #12]
 8010ca2:	07db      	lsls	r3, r3, #31
 8010ca4:	d5e1      	bpl.n	8010c6a <__swbuf_r+0x2e>
 8010ca6:	2e0a      	cmp	r6, #10
 8010ca8:	d1df      	bne.n	8010c6a <__swbuf_r+0x2e>
 8010caa:	4621      	mov	r1, r4
 8010cac:	4628      	mov	r0, r5
 8010cae:	f7ff fd83 	bl	80107b8 <_fflush_r>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d0d9      	beq.n	8010c6a <__swbuf_r+0x2e>
 8010cb6:	e7d6      	b.n	8010c66 <__swbuf_r+0x2a>

08010cb8 <__swsetup_r>:
 8010cb8:	b538      	push	{r3, r4, r5, lr}
 8010cba:	4b29      	ldr	r3, [pc, #164]	@ (8010d60 <__swsetup_r+0xa8>)
 8010cbc:	4605      	mov	r5, r0
 8010cbe:	460c      	mov	r4, r1
 8010cc0:	6818      	ldr	r0, [r3, #0]
 8010cc2:	b118      	cbz	r0, 8010ccc <__swsetup_r+0x14>
 8010cc4:	6a03      	ldr	r3, [r0, #32]
 8010cc6:	b90b      	cbnz	r3, 8010ccc <__swsetup_r+0x14>
 8010cc8:	f7fd ff9a 	bl	800ec00 <__sinit>
 8010ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cd0:	0719      	lsls	r1, r3, #28
 8010cd2:	d422      	bmi.n	8010d1a <__swsetup_r+0x62>
 8010cd4:	06da      	lsls	r2, r3, #27
 8010cd6:	d407      	bmi.n	8010ce8 <__swsetup_r+0x30>
 8010cd8:	2209      	movs	r2, #9
 8010cda:	602a      	str	r2, [r5, #0]
 8010cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce4:	81a3      	strh	r3, [r4, #12]
 8010ce6:	e033      	b.n	8010d50 <__swsetup_r+0x98>
 8010ce8:	0758      	lsls	r0, r3, #29
 8010cea:	d512      	bpl.n	8010d12 <__swsetup_r+0x5a>
 8010cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010cee:	b141      	cbz	r1, 8010d02 <__swsetup_r+0x4a>
 8010cf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cf4:	4299      	cmp	r1, r3
 8010cf6:	d002      	beq.n	8010cfe <__swsetup_r+0x46>
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	f7fe fef9 	bl	800faf0 <_free_r>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d02:	89a3      	ldrh	r3, [r4, #12]
 8010d04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010d08:	81a3      	strh	r3, [r4, #12]
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	6063      	str	r3, [r4, #4]
 8010d0e:	6923      	ldr	r3, [r4, #16]
 8010d10:	6023      	str	r3, [r4, #0]
 8010d12:	89a3      	ldrh	r3, [r4, #12]
 8010d14:	f043 0308 	orr.w	r3, r3, #8
 8010d18:	81a3      	strh	r3, [r4, #12]
 8010d1a:	6923      	ldr	r3, [r4, #16]
 8010d1c:	b94b      	cbnz	r3, 8010d32 <__swsetup_r+0x7a>
 8010d1e:	89a3      	ldrh	r3, [r4, #12]
 8010d20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d28:	d003      	beq.n	8010d32 <__swsetup_r+0x7a>
 8010d2a:	4621      	mov	r1, r4
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	f000 f882 	bl	8010e36 <__smakebuf_r>
 8010d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d36:	f013 0201 	ands.w	r2, r3, #1
 8010d3a:	d00a      	beq.n	8010d52 <__swsetup_r+0x9a>
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	60a2      	str	r2, [r4, #8]
 8010d40:	6962      	ldr	r2, [r4, #20]
 8010d42:	4252      	negs	r2, r2
 8010d44:	61a2      	str	r2, [r4, #24]
 8010d46:	6922      	ldr	r2, [r4, #16]
 8010d48:	b942      	cbnz	r2, 8010d5c <__swsetup_r+0xa4>
 8010d4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010d4e:	d1c5      	bne.n	8010cdc <__swsetup_r+0x24>
 8010d50:	bd38      	pop	{r3, r4, r5, pc}
 8010d52:	0799      	lsls	r1, r3, #30
 8010d54:	bf58      	it	pl
 8010d56:	6962      	ldrpl	r2, [r4, #20]
 8010d58:	60a2      	str	r2, [r4, #8]
 8010d5a:	e7f4      	b.n	8010d46 <__swsetup_r+0x8e>
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	e7f7      	b.n	8010d50 <__swsetup_r+0x98>
 8010d60:	20000034 	.word	0x20000034

08010d64 <_raise_r>:
 8010d64:	291f      	cmp	r1, #31
 8010d66:	b538      	push	{r3, r4, r5, lr}
 8010d68:	4605      	mov	r5, r0
 8010d6a:	460c      	mov	r4, r1
 8010d6c:	d904      	bls.n	8010d78 <_raise_r+0x14>
 8010d6e:	2316      	movs	r3, #22
 8010d70:	6003      	str	r3, [r0, #0]
 8010d72:	f04f 30ff 	mov.w	r0, #4294967295
 8010d76:	bd38      	pop	{r3, r4, r5, pc}
 8010d78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d7a:	b112      	cbz	r2, 8010d82 <_raise_r+0x1e>
 8010d7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d80:	b94b      	cbnz	r3, 8010d96 <_raise_r+0x32>
 8010d82:	4628      	mov	r0, r5
 8010d84:	f000 f830 	bl	8010de8 <_getpid_r>
 8010d88:	4622      	mov	r2, r4
 8010d8a:	4601      	mov	r1, r0
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d92:	f000 b817 	b.w	8010dc4 <_kill_r>
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d00a      	beq.n	8010db0 <_raise_r+0x4c>
 8010d9a:	1c59      	adds	r1, r3, #1
 8010d9c:	d103      	bne.n	8010da6 <_raise_r+0x42>
 8010d9e:	2316      	movs	r3, #22
 8010da0:	6003      	str	r3, [r0, #0]
 8010da2:	2001      	movs	r0, #1
 8010da4:	e7e7      	b.n	8010d76 <_raise_r+0x12>
 8010da6:	2100      	movs	r1, #0
 8010da8:	4620      	mov	r0, r4
 8010daa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010dae:	4798      	blx	r3
 8010db0:	2000      	movs	r0, #0
 8010db2:	e7e0      	b.n	8010d76 <_raise_r+0x12>

08010db4 <raise>:
 8010db4:	4b02      	ldr	r3, [pc, #8]	@ (8010dc0 <raise+0xc>)
 8010db6:	4601      	mov	r1, r0
 8010db8:	6818      	ldr	r0, [r3, #0]
 8010dba:	f7ff bfd3 	b.w	8010d64 <_raise_r>
 8010dbe:	bf00      	nop
 8010dc0:	20000034 	.word	0x20000034

08010dc4 <_kill_r>:
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	4d06      	ldr	r5, [pc, #24]	@ (8010de4 <_kill_r+0x20>)
 8010dca:	4604      	mov	r4, r0
 8010dcc:	4608      	mov	r0, r1
 8010dce:	4611      	mov	r1, r2
 8010dd0:	602b      	str	r3, [r5, #0]
 8010dd2:	f7f2 fd37 	bl	8003844 <_kill>
 8010dd6:	1c43      	adds	r3, r0, #1
 8010dd8:	d102      	bne.n	8010de0 <_kill_r+0x1c>
 8010dda:	682b      	ldr	r3, [r5, #0]
 8010ddc:	b103      	cbz	r3, 8010de0 <_kill_r+0x1c>
 8010dde:	6023      	str	r3, [r4, #0]
 8010de0:	bd38      	pop	{r3, r4, r5, pc}
 8010de2:	bf00      	nop
 8010de4:	20004c08 	.word	0x20004c08

08010de8 <_getpid_r>:
 8010de8:	f7f2 bd24 	b.w	8003834 <_getpid>

08010dec <__swhatbuf_r>:
 8010dec:	b570      	push	{r4, r5, r6, lr}
 8010dee:	460c      	mov	r4, r1
 8010df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010df4:	b096      	sub	sp, #88	@ 0x58
 8010df6:	4615      	mov	r5, r2
 8010df8:	2900      	cmp	r1, #0
 8010dfa:	461e      	mov	r6, r3
 8010dfc:	da0c      	bge.n	8010e18 <__swhatbuf_r+0x2c>
 8010dfe:	89a3      	ldrh	r3, [r4, #12]
 8010e00:	2100      	movs	r1, #0
 8010e02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e06:	bf14      	ite	ne
 8010e08:	2340      	movne	r3, #64	@ 0x40
 8010e0a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010e0e:	2000      	movs	r0, #0
 8010e10:	6031      	str	r1, [r6, #0]
 8010e12:	602b      	str	r3, [r5, #0]
 8010e14:	b016      	add	sp, #88	@ 0x58
 8010e16:	bd70      	pop	{r4, r5, r6, pc}
 8010e18:	466a      	mov	r2, sp
 8010e1a:	f000 f849 	bl	8010eb0 <_fstat_r>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	dbed      	blt.n	8010dfe <__swhatbuf_r+0x12>
 8010e22:	9901      	ldr	r1, [sp, #4]
 8010e24:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010e28:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e2c:	4259      	negs	r1, r3
 8010e2e:	4159      	adcs	r1, r3
 8010e30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e34:	e7eb      	b.n	8010e0e <__swhatbuf_r+0x22>

08010e36 <__smakebuf_r>:
 8010e36:	898b      	ldrh	r3, [r1, #12]
 8010e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e3a:	079d      	lsls	r5, r3, #30
 8010e3c:	4606      	mov	r6, r0
 8010e3e:	460c      	mov	r4, r1
 8010e40:	d507      	bpl.n	8010e52 <__smakebuf_r+0x1c>
 8010e42:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e46:	6023      	str	r3, [r4, #0]
 8010e48:	6123      	str	r3, [r4, #16]
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	6163      	str	r3, [r4, #20]
 8010e4e:	b003      	add	sp, #12
 8010e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e52:	ab01      	add	r3, sp, #4
 8010e54:	466a      	mov	r2, sp
 8010e56:	f7ff ffc9 	bl	8010dec <__swhatbuf_r>
 8010e5a:	9f00      	ldr	r7, [sp, #0]
 8010e5c:	4605      	mov	r5, r0
 8010e5e:	4630      	mov	r0, r6
 8010e60:	4639      	mov	r1, r7
 8010e62:	f7fe feb9 	bl	800fbd8 <_malloc_r>
 8010e66:	b948      	cbnz	r0, 8010e7c <__smakebuf_r+0x46>
 8010e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e6c:	059a      	lsls	r2, r3, #22
 8010e6e:	d4ee      	bmi.n	8010e4e <__smakebuf_r+0x18>
 8010e70:	f023 0303 	bic.w	r3, r3, #3
 8010e74:	f043 0302 	orr.w	r3, r3, #2
 8010e78:	81a3      	strh	r3, [r4, #12]
 8010e7a:	e7e2      	b.n	8010e42 <__smakebuf_r+0xc>
 8010e7c:	89a3      	ldrh	r3, [r4, #12]
 8010e7e:	6020      	str	r0, [r4, #0]
 8010e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e84:	81a3      	strh	r3, [r4, #12]
 8010e86:	9b01      	ldr	r3, [sp, #4]
 8010e88:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e8c:	b15b      	cbz	r3, 8010ea6 <__smakebuf_r+0x70>
 8010e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e92:	4630      	mov	r0, r6
 8010e94:	f000 f81e 	bl	8010ed4 <_isatty_r>
 8010e98:	b128      	cbz	r0, 8010ea6 <__smakebuf_r+0x70>
 8010e9a:	89a3      	ldrh	r3, [r4, #12]
 8010e9c:	f023 0303 	bic.w	r3, r3, #3
 8010ea0:	f043 0301 	orr.w	r3, r3, #1
 8010ea4:	81a3      	strh	r3, [r4, #12]
 8010ea6:	89a3      	ldrh	r3, [r4, #12]
 8010ea8:	431d      	orrs	r5, r3
 8010eaa:	81a5      	strh	r5, [r4, #12]
 8010eac:	e7cf      	b.n	8010e4e <__smakebuf_r+0x18>
	...

08010eb0 <_fstat_r>:
 8010eb0:	b538      	push	{r3, r4, r5, lr}
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	4d06      	ldr	r5, [pc, #24]	@ (8010ed0 <_fstat_r+0x20>)
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	4608      	mov	r0, r1
 8010eba:	4611      	mov	r1, r2
 8010ebc:	602b      	str	r3, [r5, #0]
 8010ebe:	f7f2 fd21 	bl	8003904 <_fstat>
 8010ec2:	1c43      	adds	r3, r0, #1
 8010ec4:	d102      	bne.n	8010ecc <_fstat_r+0x1c>
 8010ec6:	682b      	ldr	r3, [r5, #0]
 8010ec8:	b103      	cbz	r3, 8010ecc <_fstat_r+0x1c>
 8010eca:	6023      	str	r3, [r4, #0]
 8010ecc:	bd38      	pop	{r3, r4, r5, pc}
 8010ece:	bf00      	nop
 8010ed0:	20004c08 	.word	0x20004c08

08010ed4 <_isatty_r>:
 8010ed4:	b538      	push	{r3, r4, r5, lr}
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	4d05      	ldr	r5, [pc, #20]	@ (8010ef0 <_isatty_r+0x1c>)
 8010eda:	4604      	mov	r4, r0
 8010edc:	4608      	mov	r0, r1
 8010ede:	602b      	str	r3, [r5, #0]
 8010ee0:	f7f2 fd20 	bl	8003924 <_isatty>
 8010ee4:	1c43      	adds	r3, r0, #1
 8010ee6:	d102      	bne.n	8010eee <_isatty_r+0x1a>
 8010ee8:	682b      	ldr	r3, [r5, #0]
 8010eea:	b103      	cbz	r3, 8010eee <_isatty_r+0x1a>
 8010eec:	6023      	str	r3, [r4, #0]
 8010eee:	bd38      	pop	{r3, r4, r5, pc}
 8010ef0:	20004c08 	.word	0x20004c08

08010ef4 <_init>:
 8010ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ef6:	bf00      	nop
 8010ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010efa:	bc08      	pop	{r3}
 8010efc:	469e      	mov	lr, r3
 8010efe:	4770      	bx	lr

08010f00 <_fini>:
 8010f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f02:	bf00      	nop
 8010f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f06:	bc08      	pop	{r3}
 8010f08:	469e      	mov	lr, r3
 8010f0a:	4770      	bx	lr
