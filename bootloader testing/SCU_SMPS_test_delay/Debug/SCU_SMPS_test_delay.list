
SCU_SMPS_test_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  0800c000  0800c000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e8c  0800c250  0800c250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0801f0e0  0801f0e0  000140e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f730  0801f730  00015290  2**0
                  CONTENTS
  4 .ARM          00000008  0801f730  0801f730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f738  0801f738  00015290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f738  0801f738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f73c  0801f73c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0801f740  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ab0  20000290  0801f9d0  00015290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d40  0801f9d0  00015d40  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00015290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b704  00000000  00000000  000152c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c5  00000000  00000000  000309ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00033e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d64  00000000  00000000  00035000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034b76  00000000  00000000  00035d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b44f  00000000  00000000  0006a8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141b1d  00000000  00000000  00085d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c7846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a00  00000000  00000000  001c788c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001cd28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c250 <__do_global_dtors_aux>:
 800c250:	b510      	push	{r4, lr}
 800c252:	4c05      	ldr	r4, [pc, #20]	@ (800c268 <__do_global_dtors_aux+0x18>)
 800c254:	7823      	ldrb	r3, [r4, #0]
 800c256:	b933      	cbnz	r3, 800c266 <__do_global_dtors_aux+0x16>
 800c258:	4b04      	ldr	r3, [pc, #16]	@ (800c26c <__do_global_dtors_aux+0x1c>)
 800c25a:	b113      	cbz	r3, 800c262 <__do_global_dtors_aux+0x12>
 800c25c:	4804      	ldr	r0, [pc, #16]	@ (800c270 <__do_global_dtors_aux+0x20>)
 800c25e:	f3af 8000 	nop.w
 800c262:	2301      	movs	r3, #1
 800c264:	7023      	strb	r3, [r4, #0]
 800c266:	bd10      	pop	{r4, pc}
 800c268:	20000290 	.word	0x20000290
 800c26c:	00000000 	.word	0x00000000
 800c270:	0801f0c4 	.word	0x0801f0c4

0800c274 <frame_dummy>:
 800c274:	b508      	push	{r3, lr}
 800c276:	4b03      	ldr	r3, [pc, #12]	@ (800c284 <frame_dummy+0x10>)
 800c278:	b11b      	cbz	r3, 800c282 <frame_dummy+0xe>
 800c27a:	4903      	ldr	r1, [pc, #12]	@ (800c288 <frame_dummy+0x14>)
 800c27c:	4803      	ldr	r0, [pc, #12]	@ (800c28c <frame_dummy+0x18>)
 800c27e:	f3af 8000 	nop.w
 800c282:	bd08      	pop	{r3, pc}
 800c284:	00000000 	.word	0x00000000
 800c288:	20000294 	.word	0x20000294
 800c28c:	0801f0c4 	.word	0x0801f0c4

0800c290 <strlen>:
 800c290:	4603      	mov	r3, r0
 800c292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c296:	2a00      	cmp	r2, #0
 800c298:	d1fb      	bne.n	800c292 <strlen+0x2>
 800c29a:	1a18      	subs	r0, r3, r0
 800c29c:	3801      	subs	r0, #1
 800c29e:	4770      	bx	lr

0800c2a0 <__aeabi_drsub>:
 800c2a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800c2a4:	e002      	b.n	800c2ac <__adddf3>
 800c2a6:	bf00      	nop

0800c2a8 <__aeabi_dsub>:
 800c2a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800c2ac <__adddf3>:
 800c2ac:	b530      	push	{r4, r5, lr}
 800c2ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c2b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c2b6:	ea94 0f05 	teq	r4, r5
 800c2ba:	bf08      	it	eq
 800c2bc:	ea90 0f02 	teqeq	r0, r2
 800c2c0:	bf1f      	itttt	ne
 800c2c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c2c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c2ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c2ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c2d2:	f000 80e2 	beq.w	800c49a <__adddf3+0x1ee>
 800c2d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c2da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c2de:	bfb8      	it	lt
 800c2e0:	426d      	neglt	r5, r5
 800c2e2:	dd0c      	ble.n	800c2fe <__adddf3+0x52>
 800c2e4:	442c      	add	r4, r5
 800c2e6:	ea80 0202 	eor.w	r2, r0, r2
 800c2ea:	ea81 0303 	eor.w	r3, r1, r3
 800c2ee:	ea82 0000 	eor.w	r0, r2, r0
 800c2f2:	ea83 0101 	eor.w	r1, r3, r1
 800c2f6:	ea80 0202 	eor.w	r2, r0, r2
 800c2fa:	ea81 0303 	eor.w	r3, r1, r3
 800c2fe:	2d36      	cmp	r5, #54	@ 0x36
 800c300:	bf88      	it	hi
 800c302:	bd30      	pophi	{r4, r5, pc}
 800c304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800c308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c30c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800c310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c314:	d002      	beq.n	800c31c <__adddf3+0x70>
 800c316:	4240      	negs	r0, r0
 800c318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c31c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800c320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c328:	d002      	beq.n	800c330 <__adddf3+0x84>
 800c32a:	4252      	negs	r2, r2
 800c32c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c330:	ea94 0f05 	teq	r4, r5
 800c334:	f000 80a7 	beq.w	800c486 <__adddf3+0x1da>
 800c338:	f1a4 0401 	sub.w	r4, r4, #1
 800c33c:	f1d5 0e20 	rsbs	lr, r5, #32
 800c340:	db0d      	blt.n	800c35e <__adddf3+0xb2>
 800c342:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c346:	fa22 f205 	lsr.w	r2, r2, r5
 800c34a:	1880      	adds	r0, r0, r2
 800c34c:	f141 0100 	adc.w	r1, r1, #0
 800c350:	fa03 f20e 	lsl.w	r2, r3, lr
 800c354:	1880      	adds	r0, r0, r2
 800c356:	fa43 f305 	asr.w	r3, r3, r5
 800c35a:	4159      	adcs	r1, r3
 800c35c:	e00e      	b.n	800c37c <__adddf3+0xd0>
 800c35e:	f1a5 0520 	sub.w	r5, r5, #32
 800c362:	f10e 0e20 	add.w	lr, lr, #32
 800c366:	2a01      	cmp	r2, #1
 800c368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c36c:	bf28      	it	cs
 800c36e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c372:	fa43 f305 	asr.w	r3, r3, r5
 800c376:	18c0      	adds	r0, r0, r3
 800c378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c37c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c380:	d507      	bpl.n	800c392 <__adddf3+0xe6>
 800c382:	f04f 0e00 	mov.w	lr, #0
 800c386:	f1dc 0c00 	rsbs	ip, ip, #0
 800c38a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c38e:	eb6e 0101 	sbc.w	r1, lr, r1
 800c392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800c396:	d31b      	bcc.n	800c3d0 <__adddf3+0x124>
 800c398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800c39c:	d30c      	bcc.n	800c3b8 <__adddf3+0x10c>
 800c39e:	0849      	lsrs	r1, r1, #1
 800c3a0:	ea5f 0030 	movs.w	r0, r0, rrx
 800c3a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c3a8:	f104 0401 	add.w	r4, r4, #1
 800c3ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c3b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800c3b4:	f080 809a 	bcs.w	800c4ec <__adddf3+0x240>
 800c3b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800c3bc:	bf08      	it	eq
 800c3be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c3c2:	f150 0000 	adcs.w	r0, r0, #0
 800c3c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c3ca:	ea41 0105 	orr.w	r1, r1, r5
 800c3ce:	bd30      	pop	{r4, r5, pc}
 800c3d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c3d4:	4140      	adcs	r0, r0
 800c3d6:	eb41 0101 	adc.w	r1, r1, r1
 800c3da:	3c01      	subs	r4, #1
 800c3dc:	bf28      	it	cs
 800c3de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800c3e2:	d2e9      	bcs.n	800c3b8 <__adddf3+0x10c>
 800c3e4:	f091 0f00 	teq	r1, #0
 800c3e8:	bf04      	itt	eq
 800c3ea:	4601      	moveq	r1, r0
 800c3ec:	2000      	moveq	r0, #0
 800c3ee:	fab1 f381 	clz	r3, r1
 800c3f2:	bf08      	it	eq
 800c3f4:	3320      	addeq	r3, #32
 800c3f6:	f1a3 030b 	sub.w	r3, r3, #11
 800c3fa:	f1b3 0220 	subs.w	r2, r3, #32
 800c3fe:	da0c      	bge.n	800c41a <__adddf3+0x16e>
 800c400:	320c      	adds	r2, #12
 800c402:	dd08      	ble.n	800c416 <__adddf3+0x16a>
 800c404:	f102 0c14 	add.w	ip, r2, #20
 800c408:	f1c2 020c 	rsb	r2, r2, #12
 800c40c:	fa01 f00c 	lsl.w	r0, r1, ip
 800c410:	fa21 f102 	lsr.w	r1, r1, r2
 800c414:	e00c      	b.n	800c430 <__adddf3+0x184>
 800c416:	f102 0214 	add.w	r2, r2, #20
 800c41a:	bfd8      	it	le
 800c41c:	f1c2 0c20 	rsble	ip, r2, #32
 800c420:	fa01 f102 	lsl.w	r1, r1, r2
 800c424:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c428:	bfdc      	itt	le
 800c42a:	ea41 010c 	orrle.w	r1, r1, ip
 800c42e:	4090      	lslle	r0, r2
 800c430:	1ae4      	subs	r4, r4, r3
 800c432:	bfa2      	ittt	ge
 800c434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c438:	4329      	orrge	r1, r5
 800c43a:	bd30      	popge	{r4, r5, pc}
 800c43c:	ea6f 0404 	mvn.w	r4, r4
 800c440:	3c1f      	subs	r4, #31
 800c442:	da1c      	bge.n	800c47e <__adddf3+0x1d2>
 800c444:	340c      	adds	r4, #12
 800c446:	dc0e      	bgt.n	800c466 <__adddf3+0x1ba>
 800c448:	f104 0414 	add.w	r4, r4, #20
 800c44c:	f1c4 0220 	rsb	r2, r4, #32
 800c450:	fa20 f004 	lsr.w	r0, r0, r4
 800c454:	fa01 f302 	lsl.w	r3, r1, r2
 800c458:	ea40 0003 	orr.w	r0, r0, r3
 800c45c:	fa21 f304 	lsr.w	r3, r1, r4
 800c460:	ea45 0103 	orr.w	r1, r5, r3
 800c464:	bd30      	pop	{r4, r5, pc}
 800c466:	f1c4 040c 	rsb	r4, r4, #12
 800c46a:	f1c4 0220 	rsb	r2, r4, #32
 800c46e:	fa20 f002 	lsr.w	r0, r0, r2
 800c472:	fa01 f304 	lsl.w	r3, r1, r4
 800c476:	ea40 0003 	orr.w	r0, r0, r3
 800c47a:	4629      	mov	r1, r5
 800c47c:	bd30      	pop	{r4, r5, pc}
 800c47e:	fa21 f004 	lsr.w	r0, r1, r4
 800c482:	4629      	mov	r1, r5
 800c484:	bd30      	pop	{r4, r5, pc}
 800c486:	f094 0f00 	teq	r4, #0
 800c48a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800c48e:	bf06      	itte	eq
 800c490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800c494:	3401      	addeq	r4, #1
 800c496:	3d01      	subne	r5, #1
 800c498:	e74e      	b.n	800c338 <__adddf3+0x8c>
 800c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c49e:	bf18      	it	ne
 800c4a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c4a4:	d029      	beq.n	800c4fa <__adddf3+0x24e>
 800c4a6:	ea94 0f05 	teq	r4, r5
 800c4aa:	bf08      	it	eq
 800c4ac:	ea90 0f02 	teqeq	r0, r2
 800c4b0:	d005      	beq.n	800c4be <__adddf3+0x212>
 800c4b2:	ea54 0c00 	orrs.w	ip, r4, r0
 800c4b6:	bf04      	itt	eq
 800c4b8:	4619      	moveq	r1, r3
 800c4ba:	4610      	moveq	r0, r2
 800c4bc:	bd30      	pop	{r4, r5, pc}
 800c4be:	ea91 0f03 	teq	r1, r3
 800c4c2:	bf1e      	ittt	ne
 800c4c4:	2100      	movne	r1, #0
 800c4c6:	2000      	movne	r0, #0
 800c4c8:	bd30      	popne	{r4, r5, pc}
 800c4ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c4ce:	d105      	bne.n	800c4dc <__adddf3+0x230>
 800c4d0:	0040      	lsls	r0, r0, #1
 800c4d2:	4149      	adcs	r1, r1
 800c4d4:	bf28      	it	cs
 800c4d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800c4da:	bd30      	pop	{r4, r5, pc}
 800c4dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800c4e0:	bf3c      	itt	cc
 800c4e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800c4e6:	bd30      	popcc	{r4, r5, pc}
 800c4e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c4ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800c4f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4f4:	f04f 0000 	mov.w	r0, #0
 800c4f8:	bd30      	pop	{r4, r5, pc}
 800c4fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c4fe:	bf1a      	itte	ne
 800c500:	4619      	movne	r1, r3
 800c502:	4610      	movne	r0, r2
 800c504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c508:	bf1c      	itt	ne
 800c50a:	460b      	movne	r3, r1
 800c50c:	4602      	movne	r2, r0
 800c50e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c512:	bf06      	itte	eq
 800c514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c518:	ea91 0f03 	teqeq	r1, r3
 800c51c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800c520:	bd30      	pop	{r4, r5, pc}
 800c522:	bf00      	nop

0800c524 <__aeabi_ui2d>:
 800c524:	f090 0f00 	teq	r0, #0
 800c528:	bf04      	itt	eq
 800c52a:	2100      	moveq	r1, #0
 800c52c:	4770      	bxeq	lr
 800c52e:	b530      	push	{r4, r5, lr}
 800c530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c538:	f04f 0500 	mov.w	r5, #0
 800c53c:	f04f 0100 	mov.w	r1, #0
 800c540:	e750      	b.n	800c3e4 <__adddf3+0x138>
 800c542:	bf00      	nop

0800c544 <__aeabi_i2d>:
 800c544:	f090 0f00 	teq	r0, #0
 800c548:	bf04      	itt	eq
 800c54a:	2100      	moveq	r1, #0
 800c54c:	4770      	bxeq	lr
 800c54e:	b530      	push	{r4, r5, lr}
 800c550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800c55c:	bf48      	it	mi
 800c55e:	4240      	negmi	r0, r0
 800c560:	f04f 0100 	mov.w	r1, #0
 800c564:	e73e      	b.n	800c3e4 <__adddf3+0x138>
 800c566:	bf00      	nop

0800c568 <__aeabi_f2d>:
 800c568:	0042      	lsls	r2, r0, #1
 800c56a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c56e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c576:	bf1f      	itttt	ne
 800c578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800c57c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800c580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800c584:	4770      	bxne	lr
 800c586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c58a:	bf08      	it	eq
 800c58c:	4770      	bxeq	lr
 800c58e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800c592:	bf04      	itt	eq
 800c594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800c598:	4770      	bxeq	lr
 800c59a:	b530      	push	{r4, r5, lr}
 800c59c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800c5a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c5a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c5a8:	e71c      	b.n	800c3e4 <__adddf3+0x138>
 800c5aa:	bf00      	nop

0800c5ac <__aeabi_ul2d>:
 800c5ac:	ea50 0201 	orrs.w	r2, r0, r1
 800c5b0:	bf08      	it	eq
 800c5b2:	4770      	bxeq	lr
 800c5b4:	b530      	push	{r4, r5, lr}
 800c5b6:	f04f 0500 	mov.w	r5, #0
 800c5ba:	e00a      	b.n	800c5d2 <__aeabi_l2d+0x16>

0800c5bc <__aeabi_l2d>:
 800c5bc:	ea50 0201 	orrs.w	r2, r0, r1
 800c5c0:	bf08      	it	eq
 800c5c2:	4770      	bxeq	lr
 800c5c4:	b530      	push	{r4, r5, lr}
 800c5c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800c5ca:	d502      	bpl.n	800c5d2 <__aeabi_l2d+0x16>
 800c5cc:	4240      	negs	r0, r0
 800c5ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c5d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c5d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c5da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c5de:	f43f aed8 	beq.w	800c392 <__adddf3+0xe6>
 800c5e2:	f04f 0203 	mov.w	r2, #3
 800c5e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c5ea:	bf18      	it	ne
 800c5ec:	3203      	addne	r2, #3
 800c5ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c5f2:	bf18      	it	ne
 800c5f4:	3203      	addne	r2, #3
 800c5f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c5fa:	f1c2 0320 	rsb	r3, r2, #32
 800c5fe:	fa00 fc03 	lsl.w	ip, r0, r3
 800c602:	fa20 f002 	lsr.w	r0, r0, r2
 800c606:	fa01 fe03 	lsl.w	lr, r1, r3
 800c60a:	ea40 000e 	orr.w	r0, r0, lr
 800c60e:	fa21 f102 	lsr.w	r1, r1, r2
 800c612:	4414      	add	r4, r2
 800c614:	e6bd      	b.n	800c392 <__adddf3+0xe6>
 800c616:	bf00      	nop

0800c618 <__aeabi_dmul>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800c61e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800c622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c626:	bf1d      	ittte	ne
 800c628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c62c:	ea94 0f0c 	teqne	r4, ip
 800c630:	ea95 0f0c 	teqne	r5, ip
 800c634:	f000 f8de 	bleq	800c7f4 <__aeabi_dmul+0x1dc>
 800c638:	442c      	add	r4, r5
 800c63a:	ea81 0603 	eor.w	r6, r1, r3
 800c63e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c64a:	bf18      	it	ne
 800c64c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c658:	d038      	beq.n	800c6cc <__aeabi_dmul+0xb4>
 800c65a:	fba0 ce02 	umull	ip, lr, r0, r2
 800c65e:	f04f 0500 	mov.w	r5, #0
 800c662:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800c66a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c66e:	f04f 0600 	mov.w	r6, #0
 800c672:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c676:	f09c 0f00 	teq	ip, #0
 800c67a:	bf18      	it	ne
 800c67c:	f04e 0e01 	orrne.w	lr, lr, #1
 800c680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800c684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800c688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800c68c:	d204      	bcs.n	800c698 <__aeabi_dmul+0x80>
 800c68e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c692:	416d      	adcs	r5, r5
 800c694:	eb46 0606 	adc.w	r6, r6, r6
 800c698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c69c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c6a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c6a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c6a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c6ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800c6b0:	bf88      	it	hi
 800c6b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800c6b6:	d81e      	bhi.n	800c6f6 <__aeabi_dmul+0xde>
 800c6b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800c6bc:	bf08      	it	eq
 800c6be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c6c2:	f150 0000 	adcs.w	r0, r0, #0
 800c6c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800c6d0:	ea46 0101 	orr.w	r1, r6, r1
 800c6d4:	ea40 0002 	orr.w	r0, r0, r2
 800c6d8:	ea81 0103 	eor.w	r1, r1, r3
 800c6dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c6e0:	bfc2      	ittt	gt
 800c6e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c6e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c6ea:	bd70      	popgt	{r4, r5, r6, pc}
 800c6ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c6f0:	f04f 0e00 	mov.w	lr, #0
 800c6f4:	3c01      	subs	r4, #1
 800c6f6:	f300 80ab 	bgt.w	800c850 <__aeabi_dmul+0x238>
 800c6fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800c6fe:	bfde      	ittt	le
 800c700:	2000      	movle	r0, #0
 800c702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800c706:	bd70      	pople	{r4, r5, r6, pc}
 800c708:	f1c4 0400 	rsb	r4, r4, #0
 800c70c:	3c20      	subs	r4, #32
 800c70e:	da35      	bge.n	800c77c <__aeabi_dmul+0x164>
 800c710:	340c      	adds	r4, #12
 800c712:	dc1b      	bgt.n	800c74c <__aeabi_dmul+0x134>
 800c714:	f104 0414 	add.w	r4, r4, #20
 800c718:	f1c4 0520 	rsb	r5, r4, #32
 800c71c:	fa00 f305 	lsl.w	r3, r0, r5
 800c720:	fa20 f004 	lsr.w	r0, r0, r4
 800c724:	fa01 f205 	lsl.w	r2, r1, r5
 800c728:	ea40 0002 	orr.w	r0, r0, r2
 800c72c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800c730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c738:	fa21 f604 	lsr.w	r6, r1, r4
 800c73c:	eb42 0106 	adc.w	r1, r2, r6
 800c740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c744:	bf08      	it	eq
 800c746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c74a:	bd70      	pop	{r4, r5, r6, pc}
 800c74c:	f1c4 040c 	rsb	r4, r4, #12
 800c750:	f1c4 0520 	rsb	r5, r4, #32
 800c754:	fa00 f304 	lsl.w	r3, r0, r4
 800c758:	fa20 f005 	lsr.w	r0, r0, r5
 800c75c:	fa01 f204 	lsl.w	r2, r1, r4
 800c760:	ea40 0002 	orr.w	r0, r0, r2
 800c764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c76c:	f141 0100 	adc.w	r1, r1, #0
 800c770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c774:	bf08      	it	eq
 800c776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c77a:	bd70      	pop	{r4, r5, r6, pc}
 800c77c:	f1c4 0520 	rsb	r5, r4, #32
 800c780:	fa00 f205 	lsl.w	r2, r0, r5
 800c784:	ea4e 0e02 	orr.w	lr, lr, r2
 800c788:	fa20 f304 	lsr.w	r3, r0, r4
 800c78c:	fa01 f205 	lsl.w	r2, r1, r5
 800c790:	ea43 0302 	orr.w	r3, r3, r2
 800c794:	fa21 f004 	lsr.w	r0, r1, r4
 800c798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c79c:	fa21 f204 	lsr.w	r2, r1, r4
 800c7a0:	ea20 0002 	bic.w	r0, r0, r2
 800c7a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c7a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c7ac:	bf08      	it	eq
 800c7ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c7b2:	bd70      	pop	{r4, r5, r6, pc}
 800c7b4:	f094 0f00 	teq	r4, #0
 800c7b8:	d10f      	bne.n	800c7da <__aeabi_dmul+0x1c2>
 800c7ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800c7be:	0040      	lsls	r0, r0, #1
 800c7c0:	eb41 0101 	adc.w	r1, r1, r1
 800c7c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800c7c8:	bf08      	it	eq
 800c7ca:	3c01      	subeq	r4, #1
 800c7cc:	d0f7      	beq.n	800c7be <__aeabi_dmul+0x1a6>
 800c7ce:	ea41 0106 	orr.w	r1, r1, r6
 800c7d2:	f095 0f00 	teq	r5, #0
 800c7d6:	bf18      	it	ne
 800c7d8:	4770      	bxne	lr
 800c7da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800c7de:	0052      	lsls	r2, r2, #1
 800c7e0:	eb43 0303 	adc.w	r3, r3, r3
 800c7e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800c7e8:	bf08      	it	eq
 800c7ea:	3d01      	subeq	r5, #1
 800c7ec:	d0f7      	beq.n	800c7de <__aeabi_dmul+0x1c6>
 800c7ee:	ea43 0306 	orr.w	r3, r3, r6
 800c7f2:	4770      	bx	lr
 800c7f4:	ea94 0f0c 	teq	r4, ip
 800c7f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c7fc:	bf18      	it	ne
 800c7fe:	ea95 0f0c 	teqne	r5, ip
 800c802:	d00c      	beq.n	800c81e <__aeabi_dmul+0x206>
 800c804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c808:	bf18      	it	ne
 800c80a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c80e:	d1d1      	bne.n	800c7b4 <__aeabi_dmul+0x19c>
 800c810:	ea81 0103 	eor.w	r1, r1, r3
 800c814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c818:	f04f 0000 	mov.w	r0, #0
 800c81c:	bd70      	pop	{r4, r5, r6, pc}
 800c81e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c822:	bf06      	itte	eq
 800c824:	4610      	moveq	r0, r2
 800c826:	4619      	moveq	r1, r3
 800c828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c82c:	d019      	beq.n	800c862 <__aeabi_dmul+0x24a>
 800c82e:	ea94 0f0c 	teq	r4, ip
 800c832:	d102      	bne.n	800c83a <__aeabi_dmul+0x222>
 800c834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c838:	d113      	bne.n	800c862 <__aeabi_dmul+0x24a>
 800c83a:	ea95 0f0c 	teq	r5, ip
 800c83e:	d105      	bne.n	800c84c <__aeabi_dmul+0x234>
 800c840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c844:	bf1c      	itt	ne
 800c846:	4610      	movne	r0, r2
 800c848:	4619      	movne	r1, r3
 800c84a:	d10a      	bne.n	800c862 <__aeabi_dmul+0x24a>
 800c84c:	ea81 0103 	eor.w	r1, r1, r3
 800c850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800c858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c85c:	f04f 0000 	mov.w	r0, #0
 800c860:	bd70      	pop	{r4, r5, r6, pc}
 800c862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800c866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800c86a:	bd70      	pop	{r4, r5, r6, pc}

0800c86c <__aeabi_ddiv>:
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800c872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800c876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c87a:	bf1d      	ittte	ne
 800c87c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c880:	ea94 0f0c 	teqne	r4, ip
 800c884:	ea95 0f0c 	teqne	r5, ip
 800c888:	f000 f8a7 	bleq	800c9da <__aeabi_ddiv+0x16e>
 800c88c:	eba4 0405 	sub.w	r4, r4, r5
 800c890:	ea81 0e03 	eor.w	lr, r1, r3
 800c894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c89c:	f000 8088 	beq.w	800c9b0 <__aeabi_ddiv+0x144>
 800c8a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c8a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800c8a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c8ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c8b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c8b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c8b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c8bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c8c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800c8c4:	429d      	cmp	r5, r3
 800c8c6:	bf08      	it	eq
 800c8c8:	4296      	cmpeq	r6, r2
 800c8ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800c8ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800c8d2:	d202      	bcs.n	800c8da <__aeabi_ddiv+0x6e>
 800c8d4:	085b      	lsrs	r3, r3, #1
 800c8d6:	ea4f 0232 	mov.w	r2, r2, rrx
 800c8da:	1ab6      	subs	r6, r6, r2
 800c8dc:	eb65 0503 	sbc.w	r5, r5, r3
 800c8e0:	085b      	lsrs	r3, r3, #1
 800c8e2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c8e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c8ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800c8ee:	ebb6 0e02 	subs.w	lr, r6, r2
 800c8f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c8f6:	bf22      	ittt	cs
 800c8f8:	1ab6      	subcs	r6, r6, r2
 800c8fa:	4675      	movcs	r5, lr
 800c8fc:	ea40 000c 	orrcs.w	r0, r0, ip
 800c900:	085b      	lsrs	r3, r3, #1
 800c902:	ea4f 0232 	mov.w	r2, r2, rrx
 800c906:	ebb6 0e02 	subs.w	lr, r6, r2
 800c90a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c90e:	bf22      	ittt	cs
 800c910:	1ab6      	subcs	r6, r6, r2
 800c912:	4675      	movcs	r5, lr
 800c914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c918:	085b      	lsrs	r3, r3, #1
 800c91a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c91e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c922:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c926:	bf22      	ittt	cs
 800c928:	1ab6      	subcs	r6, r6, r2
 800c92a:	4675      	movcs	r5, lr
 800c92c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c930:	085b      	lsrs	r3, r3, #1
 800c932:	ea4f 0232 	mov.w	r2, r2, rrx
 800c936:	ebb6 0e02 	subs.w	lr, r6, r2
 800c93a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c93e:	bf22      	ittt	cs
 800c940:	1ab6      	subcs	r6, r6, r2
 800c942:	4675      	movcs	r5, lr
 800c944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c948:	ea55 0e06 	orrs.w	lr, r5, r6
 800c94c:	d018      	beq.n	800c980 <__aeabi_ddiv+0x114>
 800c94e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c95a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c95e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c96a:	d1c0      	bne.n	800c8ee <__aeabi_ddiv+0x82>
 800c96c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800c970:	d10b      	bne.n	800c98a <__aeabi_ddiv+0x11e>
 800c972:	ea41 0100 	orr.w	r1, r1, r0
 800c976:	f04f 0000 	mov.w	r0, #0
 800c97a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c97e:	e7b6      	b.n	800c8ee <__aeabi_ddiv+0x82>
 800c980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800c984:	bf04      	itt	eq
 800c986:	4301      	orreq	r1, r0
 800c988:	2000      	moveq	r0, #0
 800c98a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800c98e:	bf88      	it	hi
 800c990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800c994:	f63f aeaf 	bhi.w	800c6f6 <__aeabi_dmul+0xde>
 800c998:	ebb5 0c03 	subs.w	ip, r5, r3
 800c99c:	bf04      	itt	eq
 800c99e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c9a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c9a6:	f150 0000 	adcs.w	r0, r0, #0
 800c9aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800c9b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c9b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c9bc:	bfc2      	ittt	gt
 800c9be:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c9c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c9c6:	bd70      	popgt	{r4, r5, r6, pc}
 800c9c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c9cc:	f04f 0e00 	mov.w	lr, #0
 800c9d0:	3c01      	subs	r4, #1
 800c9d2:	e690      	b.n	800c6f6 <__aeabi_dmul+0xde>
 800c9d4:	ea45 0e06 	orr.w	lr, r5, r6
 800c9d8:	e68d      	b.n	800c6f6 <__aeabi_dmul+0xde>
 800c9da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c9de:	ea94 0f0c 	teq	r4, ip
 800c9e2:	bf08      	it	eq
 800c9e4:	ea95 0f0c 	teqeq	r5, ip
 800c9e8:	f43f af3b 	beq.w	800c862 <__aeabi_dmul+0x24a>
 800c9ec:	ea94 0f0c 	teq	r4, ip
 800c9f0:	d10a      	bne.n	800ca08 <__aeabi_ddiv+0x19c>
 800c9f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c9f6:	f47f af34 	bne.w	800c862 <__aeabi_dmul+0x24a>
 800c9fa:	ea95 0f0c 	teq	r5, ip
 800c9fe:	f47f af25 	bne.w	800c84c <__aeabi_dmul+0x234>
 800ca02:	4610      	mov	r0, r2
 800ca04:	4619      	mov	r1, r3
 800ca06:	e72c      	b.n	800c862 <__aeabi_dmul+0x24a>
 800ca08:	ea95 0f0c 	teq	r5, ip
 800ca0c:	d106      	bne.n	800ca1c <__aeabi_ddiv+0x1b0>
 800ca0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ca12:	f43f aefd 	beq.w	800c810 <__aeabi_dmul+0x1f8>
 800ca16:	4610      	mov	r0, r2
 800ca18:	4619      	mov	r1, r3
 800ca1a:	e722      	b.n	800c862 <__aeabi_dmul+0x24a>
 800ca1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ca20:	bf18      	it	ne
 800ca22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ca26:	f47f aec5 	bne.w	800c7b4 <__aeabi_dmul+0x19c>
 800ca2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800ca2e:	f47f af0d 	bne.w	800c84c <__aeabi_dmul+0x234>
 800ca32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800ca36:	f47f aeeb 	bne.w	800c810 <__aeabi_dmul+0x1f8>
 800ca3a:	e712      	b.n	800c862 <__aeabi_dmul+0x24a>

0800ca3c <__gedf2>:
 800ca3c:	f04f 3cff 	mov.w	ip, #4294967295
 800ca40:	e006      	b.n	800ca50 <__cmpdf2+0x4>
 800ca42:	bf00      	nop

0800ca44 <__ledf2>:
 800ca44:	f04f 0c01 	mov.w	ip, #1
 800ca48:	e002      	b.n	800ca50 <__cmpdf2+0x4>
 800ca4a:	bf00      	nop

0800ca4c <__cmpdf2>:
 800ca4c:	f04f 0c01 	mov.w	ip, #1
 800ca50:	f84d cd04 	str.w	ip, [sp, #-4]!
 800ca54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ca58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ca5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ca60:	bf18      	it	ne
 800ca62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800ca66:	d01b      	beq.n	800caa0 <__cmpdf2+0x54>
 800ca68:	b001      	add	sp, #4
 800ca6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800ca6e:	bf0c      	ite	eq
 800ca70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800ca74:	ea91 0f03 	teqne	r1, r3
 800ca78:	bf02      	ittt	eq
 800ca7a:	ea90 0f02 	teqeq	r0, r2
 800ca7e:	2000      	moveq	r0, #0
 800ca80:	4770      	bxeq	lr
 800ca82:	f110 0f00 	cmn.w	r0, #0
 800ca86:	ea91 0f03 	teq	r1, r3
 800ca8a:	bf58      	it	pl
 800ca8c:	4299      	cmppl	r1, r3
 800ca8e:	bf08      	it	eq
 800ca90:	4290      	cmpeq	r0, r2
 800ca92:	bf2c      	ite	cs
 800ca94:	17d8      	asrcs	r0, r3, #31
 800ca96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800ca9a:	f040 0001 	orr.w	r0, r0, #1
 800ca9e:	4770      	bx	lr
 800caa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800caa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800caa8:	d102      	bne.n	800cab0 <__cmpdf2+0x64>
 800caaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800caae:	d107      	bne.n	800cac0 <__cmpdf2+0x74>
 800cab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cab8:	d1d6      	bne.n	800ca68 <__cmpdf2+0x1c>
 800caba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800cabe:	d0d3      	beq.n	800ca68 <__cmpdf2+0x1c>
 800cac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop

0800cac8 <__aeabi_cdrcmple>:
 800cac8:	4684      	mov	ip, r0
 800caca:	4610      	mov	r0, r2
 800cacc:	4662      	mov	r2, ip
 800cace:	468c      	mov	ip, r1
 800cad0:	4619      	mov	r1, r3
 800cad2:	4663      	mov	r3, ip
 800cad4:	e000      	b.n	800cad8 <__aeabi_cdcmpeq>
 800cad6:	bf00      	nop

0800cad8 <__aeabi_cdcmpeq>:
 800cad8:	b501      	push	{r0, lr}
 800cada:	f7ff ffb7 	bl	800ca4c <__cmpdf2>
 800cade:	2800      	cmp	r0, #0
 800cae0:	bf48      	it	mi
 800cae2:	f110 0f00 	cmnmi.w	r0, #0
 800cae6:	bd01      	pop	{r0, pc}

0800cae8 <__aeabi_dcmpeq>:
 800cae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800caec:	f7ff fff4 	bl	800cad8 <__aeabi_cdcmpeq>
 800caf0:	bf0c      	ite	eq
 800caf2:	2001      	moveq	r0, #1
 800caf4:	2000      	movne	r0, #0
 800caf6:	f85d fb08 	ldr.w	pc, [sp], #8
 800cafa:	bf00      	nop

0800cafc <__aeabi_dcmplt>:
 800cafc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cb00:	f7ff ffea 	bl	800cad8 <__aeabi_cdcmpeq>
 800cb04:	bf34      	ite	cc
 800cb06:	2001      	movcc	r0, #1
 800cb08:	2000      	movcs	r0, #0
 800cb0a:	f85d fb08 	ldr.w	pc, [sp], #8
 800cb0e:	bf00      	nop

0800cb10 <__aeabi_dcmple>:
 800cb10:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cb14:	f7ff ffe0 	bl	800cad8 <__aeabi_cdcmpeq>
 800cb18:	bf94      	ite	ls
 800cb1a:	2001      	movls	r0, #1
 800cb1c:	2000      	movhi	r0, #0
 800cb1e:	f85d fb08 	ldr.w	pc, [sp], #8
 800cb22:	bf00      	nop

0800cb24 <__aeabi_dcmpge>:
 800cb24:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cb28:	f7ff ffce 	bl	800cac8 <__aeabi_cdrcmple>
 800cb2c:	bf94      	ite	ls
 800cb2e:	2001      	movls	r0, #1
 800cb30:	2000      	movhi	r0, #0
 800cb32:	f85d fb08 	ldr.w	pc, [sp], #8
 800cb36:	bf00      	nop

0800cb38 <__aeabi_dcmpgt>:
 800cb38:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cb3c:	f7ff ffc4 	bl	800cac8 <__aeabi_cdrcmple>
 800cb40:	bf34      	ite	cc
 800cb42:	2001      	movcc	r0, #1
 800cb44:	2000      	movcs	r0, #0
 800cb46:	f85d fb08 	ldr.w	pc, [sp], #8
 800cb4a:	bf00      	nop

0800cb4c <__aeabi_dcmpun>:
 800cb4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800cb50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cb54:	d102      	bne.n	800cb5c <__aeabi_dcmpun+0x10>
 800cb56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800cb5a:	d10a      	bne.n	800cb72 <__aeabi_dcmpun+0x26>
 800cb5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cb60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cb64:	d102      	bne.n	800cb6c <__aeabi_dcmpun+0x20>
 800cb66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800cb6a:	d102      	bne.n	800cb72 <__aeabi_dcmpun+0x26>
 800cb6c:	f04f 0000 	mov.w	r0, #0
 800cb70:	4770      	bx	lr
 800cb72:	f04f 0001 	mov.w	r0, #1
 800cb76:	4770      	bx	lr

0800cb78 <__aeabi_d2iz>:
 800cb78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800cb7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800cb80:	d215      	bcs.n	800cbae <__aeabi_d2iz+0x36>
 800cb82:	d511      	bpl.n	800cba8 <__aeabi_d2iz+0x30>
 800cb84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800cb88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800cb8c:	d912      	bls.n	800cbb4 <__aeabi_d2iz+0x3c>
 800cb8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800cb92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cb96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800cb9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800cb9e:	fa23 f002 	lsr.w	r0, r3, r2
 800cba2:	bf18      	it	ne
 800cba4:	4240      	negne	r0, r0
 800cba6:	4770      	bx	lr
 800cba8:	f04f 0000 	mov.w	r0, #0
 800cbac:	4770      	bx	lr
 800cbae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800cbb2:	d105      	bne.n	800cbc0 <__aeabi_d2iz+0x48>
 800cbb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800cbb8:	bf08      	it	eq
 800cbba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800cbbe:	4770      	bx	lr
 800cbc0:	f04f 0000 	mov.w	r0, #0
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop

0800cbc8 <__aeabi_d2f>:
 800cbc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800cbcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800cbd0:	bf24      	itt	cs
 800cbd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800cbd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800cbda:	d90d      	bls.n	800cbf8 <__aeabi_d2f+0x30>
 800cbdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800cbe0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800cbe4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800cbe8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800cbec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800cbf0:	bf08      	it	eq
 800cbf2:	f020 0001 	biceq.w	r0, r0, #1
 800cbf6:	4770      	bx	lr
 800cbf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800cbfc:	d121      	bne.n	800cc42 <__aeabi_d2f+0x7a>
 800cbfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800cc02:	bfbc      	itt	lt
 800cc04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800cc08:	4770      	bxlt	lr
 800cc0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800cc0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800cc12:	f1c2 0218 	rsb	r2, r2, #24
 800cc16:	f1c2 0c20 	rsb	ip, r2, #32
 800cc1a:	fa10 f30c 	lsls.w	r3, r0, ip
 800cc1e:	fa20 f002 	lsr.w	r0, r0, r2
 800cc22:	bf18      	it	ne
 800cc24:	f040 0001 	orrne.w	r0, r0, #1
 800cc28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800cc2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800cc30:	fa03 fc0c 	lsl.w	ip, r3, ip
 800cc34:	ea40 000c 	orr.w	r0, r0, ip
 800cc38:	fa23 f302 	lsr.w	r3, r3, r2
 800cc3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc40:	e7cc      	b.n	800cbdc <__aeabi_d2f+0x14>
 800cc42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800cc46:	d107      	bne.n	800cc58 <__aeabi_d2f+0x90>
 800cc48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800cc4c:	bf1e      	ittt	ne
 800cc4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800cc52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800cc56:	4770      	bxne	lr
 800cc58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800cc5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800cc60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop

0800cc68 <__aeabi_uldivmod>:
 800cc68:	b953      	cbnz	r3, 800cc80 <__aeabi_uldivmod+0x18>
 800cc6a:	b94a      	cbnz	r2, 800cc80 <__aeabi_uldivmod+0x18>
 800cc6c:	2900      	cmp	r1, #0
 800cc6e:	bf08      	it	eq
 800cc70:	2800      	cmpeq	r0, #0
 800cc72:	bf1c      	itt	ne
 800cc74:	f04f 31ff 	movne.w	r1, #4294967295
 800cc78:	f04f 30ff 	movne.w	r0, #4294967295
 800cc7c:	f000 b97e 	b.w	800cf7c <__aeabi_idiv0>
 800cc80:	f1ad 0c08 	sub.w	ip, sp, #8
 800cc84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800cc88:	f000 f806 	bl	800cc98 <__udivmoddi4>
 800cc8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cc90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc94:	b004      	add	sp, #16
 800cc96:	4770      	bx	lr

0800cc98 <__udivmoddi4>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cc9e:	460c      	mov	r4, r1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d14d      	bne.n	800cd40 <__udivmoddi4+0xa8>
 800cca4:	428a      	cmp	r2, r1
 800cca6:	460f      	mov	r7, r1
 800cca8:	4684      	mov	ip, r0
 800ccaa:	4696      	mov	lr, r2
 800ccac:	fab2 f382 	clz	r3, r2
 800ccb0:	d960      	bls.n	800cd74 <__udivmoddi4+0xdc>
 800ccb2:	b14b      	cbz	r3, 800ccc8 <__udivmoddi4+0x30>
 800ccb4:	fa02 fe03 	lsl.w	lr, r2, r3
 800ccb8:	f1c3 0220 	rsb	r2, r3, #32
 800ccbc:	409f      	lsls	r7, r3
 800ccbe:	fa00 fc03 	lsl.w	ip, r0, r3
 800ccc2:	fa20 f202 	lsr.w	r2, r0, r2
 800ccc6:	4317      	orrs	r7, r2
 800ccc8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 800cccc:	fa1f f48e 	uxth.w	r4, lr
 800ccd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800ccd4:	fbb7 f1f6 	udiv	r1, r7, r6
 800ccd8:	fb06 7711 	mls	r7, r6, r1, r7
 800ccdc:	fb01 f004 	mul.w	r0, r1, r4
 800cce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800cce4:	4290      	cmp	r0, r2
 800cce6:	d908      	bls.n	800ccfa <__udivmoddi4+0x62>
 800cce8:	eb1e 0202 	adds.w	r2, lr, r2
 800ccec:	f101 37ff 	add.w	r7, r1, #4294967295
 800ccf0:	d202      	bcs.n	800ccf8 <__udivmoddi4+0x60>
 800ccf2:	4290      	cmp	r0, r2
 800ccf4:	f200 812d 	bhi.w	800cf52 <__udivmoddi4+0x2ba>
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	1a12      	subs	r2, r2, r0
 800ccfc:	fa1f fc8c 	uxth.w	ip, ip
 800cd00:	fbb2 f0f6 	udiv	r0, r2, r6
 800cd04:	fb06 2210 	mls	r2, r6, r0, r2
 800cd08:	fb00 f404 	mul.w	r4, r0, r4
 800cd0c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800cd10:	4564      	cmp	r4, ip
 800cd12:	d908      	bls.n	800cd26 <__udivmoddi4+0x8e>
 800cd14:	eb1e 0c0c 	adds.w	ip, lr, ip
 800cd18:	f100 32ff 	add.w	r2, r0, #4294967295
 800cd1c:	d202      	bcs.n	800cd24 <__udivmoddi4+0x8c>
 800cd1e:	4564      	cmp	r4, ip
 800cd20:	f200 811a 	bhi.w	800cf58 <__udivmoddi4+0x2c0>
 800cd24:	4610      	mov	r0, r2
 800cd26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800cd2a:	ebac 0c04 	sub.w	ip, ip, r4
 800cd2e:	2100      	movs	r1, #0
 800cd30:	b125      	cbz	r5, 800cd3c <__udivmoddi4+0xa4>
 800cd32:	fa2c f303 	lsr.w	r3, ip, r3
 800cd36:	2200      	movs	r2, #0
 800cd38:	e9c5 3200 	strd	r3, r2, [r5]
 800cd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd40:	428b      	cmp	r3, r1
 800cd42:	d905      	bls.n	800cd50 <__udivmoddi4+0xb8>
 800cd44:	b10d      	cbz	r5, 800cd4a <__udivmoddi4+0xb2>
 800cd46:	e9c5 0100 	strd	r0, r1, [r5]
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	e7f5      	b.n	800cd3c <__udivmoddi4+0xa4>
 800cd50:	fab3 f183 	clz	r1, r3
 800cd54:	2900      	cmp	r1, #0
 800cd56:	d14d      	bne.n	800cdf4 <__udivmoddi4+0x15c>
 800cd58:	42a3      	cmp	r3, r4
 800cd5a:	f0c0 80f2 	bcc.w	800cf42 <__udivmoddi4+0x2aa>
 800cd5e:	4290      	cmp	r0, r2
 800cd60:	f080 80ef 	bcs.w	800cf42 <__udivmoddi4+0x2aa>
 800cd64:	4606      	mov	r6, r0
 800cd66:	4623      	mov	r3, r4
 800cd68:	4608      	mov	r0, r1
 800cd6a:	2d00      	cmp	r5, #0
 800cd6c:	d0e6      	beq.n	800cd3c <__udivmoddi4+0xa4>
 800cd6e:	e9c5 6300 	strd	r6, r3, [r5]
 800cd72:	e7e3      	b.n	800cd3c <__udivmoddi4+0xa4>
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f040 80a2 	bne.w	800cebe <__udivmoddi4+0x226>
 800cd7a:	1a8a      	subs	r2, r1, r2
 800cd7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800cd80:	fa1f f68e 	uxth.w	r6, lr
 800cd84:	2101      	movs	r1, #1
 800cd86:	fbb2 f4f7 	udiv	r4, r2, r7
 800cd8a:	fb07 2014 	mls	r0, r7, r4, r2
 800cd8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800cd92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cd96:	fb06 f004 	mul.w	r0, r6, r4
 800cd9a:	4290      	cmp	r0, r2
 800cd9c:	d90f      	bls.n	800cdbe <__udivmoddi4+0x126>
 800cd9e:	eb1e 0202 	adds.w	r2, lr, r2
 800cda2:	f104 38ff 	add.w	r8, r4, #4294967295
 800cda6:	bf2c      	ite	cs
 800cda8:	f04f 0901 	movcs.w	r9, #1
 800cdac:	f04f 0900 	movcc.w	r9, #0
 800cdb0:	4290      	cmp	r0, r2
 800cdb2:	d903      	bls.n	800cdbc <__udivmoddi4+0x124>
 800cdb4:	f1b9 0f00 	cmp.w	r9, #0
 800cdb8:	f000 80c8 	beq.w	800cf4c <__udivmoddi4+0x2b4>
 800cdbc:	4644      	mov	r4, r8
 800cdbe:	1a12      	subs	r2, r2, r0
 800cdc0:	fa1f fc8c 	uxth.w	ip, ip
 800cdc4:	fbb2 f0f7 	udiv	r0, r2, r7
 800cdc8:	fb07 2210 	mls	r2, r7, r0, r2
 800cdcc:	fb00 f606 	mul.w	r6, r0, r6
 800cdd0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800cdd4:	4566      	cmp	r6, ip
 800cdd6:	d908      	bls.n	800cdea <__udivmoddi4+0x152>
 800cdd8:	eb1e 0c0c 	adds.w	ip, lr, ip
 800cddc:	f100 32ff 	add.w	r2, r0, #4294967295
 800cde0:	d202      	bcs.n	800cde8 <__udivmoddi4+0x150>
 800cde2:	4566      	cmp	r6, ip
 800cde4:	f200 80bb 	bhi.w	800cf5e <__udivmoddi4+0x2c6>
 800cde8:	4610      	mov	r0, r2
 800cdea:	ebac 0c06 	sub.w	ip, ip, r6
 800cdee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800cdf2:	e79d      	b.n	800cd30 <__udivmoddi4+0x98>
 800cdf4:	f1c1 0620 	rsb	r6, r1, #32
 800cdf8:	408b      	lsls	r3, r1
 800cdfa:	fa04 fe01 	lsl.w	lr, r4, r1
 800cdfe:	fa22 f706 	lsr.w	r7, r2, r6
 800ce02:	fa20 fc06 	lsr.w	ip, r0, r6
 800ce06:	40f4      	lsrs	r4, r6
 800ce08:	408a      	lsls	r2, r1
 800ce0a:	431f      	orrs	r7, r3
 800ce0c:	ea4e 030c 	orr.w	r3, lr, ip
 800ce10:	fa00 fe01 	lsl.w	lr, r0, r1
 800ce14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800ce18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800ce1c:	fa1f fc87 	uxth.w	ip, r7
 800ce20:	fbb4 f0f8 	udiv	r0, r4, r8
 800ce24:	fb08 4410 	mls	r4, r8, r0, r4
 800ce28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800ce2c:	fb00 f90c 	mul.w	r9, r0, ip
 800ce30:	45a1      	cmp	r9, r4
 800ce32:	d90e      	bls.n	800ce52 <__udivmoddi4+0x1ba>
 800ce34:	193c      	adds	r4, r7, r4
 800ce36:	f100 3aff 	add.w	sl, r0, #4294967295
 800ce3a:	bf2c      	ite	cs
 800ce3c:	f04f 0b01 	movcs.w	fp, #1
 800ce40:	f04f 0b00 	movcc.w	fp, #0
 800ce44:	45a1      	cmp	r9, r4
 800ce46:	d903      	bls.n	800ce50 <__udivmoddi4+0x1b8>
 800ce48:	f1bb 0f00 	cmp.w	fp, #0
 800ce4c:	f000 8093 	beq.w	800cf76 <__udivmoddi4+0x2de>
 800ce50:	4650      	mov	r0, sl
 800ce52:	eba4 0409 	sub.w	r4, r4, r9
 800ce56:	fa1f f983 	uxth.w	r9, r3
 800ce5a:	fbb4 f3f8 	udiv	r3, r4, r8
 800ce5e:	fb08 4413 	mls	r4, r8, r3, r4
 800ce62:	fb03 fc0c 	mul.w	ip, r3, ip
 800ce66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800ce6a:	45a4      	cmp	ip, r4
 800ce6c:	d906      	bls.n	800ce7c <__udivmoddi4+0x1e4>
 800ce6e:	193c      	adds	r4, r7, r4
 800ce70:	f103 38ff 	add.w	r8, r3, #4294967295
 800ce74:	d201      	bcs.n	800ce7a <__udivmoddi4+0x1e2>
 800ce76:	45a4      	cmp	ip, r4
 800ce78:	d87a      	bhi.n	800cf70 <__udivmoddi4+0x2d8>
 800ce7a:	4643      	mov	r3, r8
 800ce7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800ce80:	eba4 040c 	sub.w	r4, r4, ip
 800ce84:	fba0 9802 	umull	r9, r8, r0, r2
 800ce88:	4544      	cmp	r4, r8
 800ce8a:	46cc      	mov	ip, r9
 800ce8c:	4643      	mov	r3, r8
 800ce8e:	d302      	bcc.n	800ce96 <__udivmoddi4+0x1fe>
 800ce90:	d106      	bne.n	800cea0 <__udivmoddi4+0x208>
 800ce92:	45ce      	cmp	lr, r9
 800ce94:	d204      	bcs.n	800cea0 <__udivmoddi4+0x208>
 800ce96:	3801      	subs	r0, #1
 800ce98:	ebb9 0c02 	subs.w	ip, r9, r2
 800ce9c:	eb68 0307 	sbc.w	r3, r8, r7
 800cea0:	b15d      	cbz	r5, 800ceba <__udivmoddi4+0x222>
 800cea2:	ebbe 020c 	subs.w	r2, lr, ip
 800cea6:	eb64 0403 	sbc.w	r4, r4, r3
 800ceaa:	fa04 f606 	lsl.w	r6, r4, r6
 800ceae:	fa22 f301 	lsr.w	r3, r2, r1
 800ceb2:	40cc      	lsrs	r4, r1
 800ceb4:	431e      	orrs	r6, r3
 800ceb6:	e9c5 6400 	strd	r6, r4, [r5]
 800ceba:	2100      	movs	r1, #0
 800cebc:	e73e      	b.n	800cd3c <__udivmoddi4+0xa4>
 800cebe:	fa02 fe03 	lsl.w	lr, r2, r3
 800cec2:	f1c3 0120 	rsb	r1, r3, #32
 800cec6:	fa04 f203 	lsl.w	r2, r4, r3
 800ceca:	fa00 fc03 	lsl.w	ip, r0, r3
 800cece:	40cc      	lsrs	r4, r1
 800ced0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800ced4:	fa20 f101 	lsr.w	r1, r0, r1
 800ced8:	fa1f f68e 	uxth.w	r6, lr
 800cedc:	fbb4 f0f7 	udiv	r0, r4, r7
 800cee0:	430a      	orrs	r2, r1
 800cee2:	fb07 4410 	mls	r4, r7, r0, r4
 800cee6:	0c11      	lsrs	r1, r2, #16
 800cee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ceec:	fb00 f406 	mul.w	r4, r0, r6
 800cef0:	428c      	cmp	r4, r1
 800cef2:	d90e      	bls.n	800cf12 <__udivmoddi4+0x27a>
 800cef4:	eb1e 0101 	adds.w	r1, lr, r1
 800cef8:	f100 38ff 	add.w	r8, r0, #4294967295
 800cefc:	bf2c      	ite	cs
 800cefe:	f04f 0901 	movcs.w	r9, #1
 800cf02:	f04f 0900 	movcc.w	r9, #0
 800cf06:	428c      	cmp	r4, r1
 800cf08:	d902      	bls.n	800cf10 <__udivmoddi4+0x278>
 800cf0a:	f1b9 0f00 	cmp.w	r9, #0
 800cf0e:	d02c      	beq.n	800cf6a <__udivmoddi4+0x2d2>
 800cf10:	4640      	mov	r0, r8
 800cf12:	1b09      	subs	r1, r1, r4
 800cf14:	b292      	uxth	r2, r2
 800cf16:	fbb1 f4f7 	udiv	r4, r1, r7
 800cf1a:	fb07 1114 	mls	r1, r7, r4, r1
 800cf1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cf22:	fb04 f106 	mul.w	r1, r4, r6
 800cf26:	4291      	cmp	r1, r2
 800cf28:	d907      	bls.n	800cf3a <__udivmoddi4+0x2a2>
 800cf2a:	eb1e 0202 	adds.w	r2, lr, r2
 800cf2e:	f104 38ff 	add.w	r8, r4, #4294967295
 800cf32:	d201      	bcs.n	800cf38 <__udivmoddi4+0x2a0>
 800cf34:	4291      	cmp	r1, r2
 800cf36:	d815      	bhi.n	800cf64 <__udivmoddi4+0x2cc>
 800cf38:	4644      	mov	r4, r8
 800cf3a:	1a52      	subs	r2, r2, r1
 800cf3c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800cf40:	e721      	b.n	800cd86 <__udivmoddi4+0xee>
 800cf42:	1a86      	subs	r6, r0, r2
 800cf44:	eb64 0303 	sbc.w	r3, r4, r3
 800cf48:	2001      	movs	r0, #1
 800cf4a:	e70e      	b.n	800cd6a <__udivmoddi4+0xd2>
 800cf4c:	3c02      	subs	r4, #2
 800cf4e:	4472      	add	r2, lr
 800cf50:	e735      	b.n	800cdbe <__udivmoddi4+0x126>
 800cf52:	3902      	subs	r1, #2
 800cf54:	4472      	add	r2, lr
 800cf56:	e6d0      	b.n	800ccfa <__udivmoddi4+0x62>
 800cf58:	44f4      	add	ip, lr
 800cf5a:	3802      	subs	r0, #2
 800cf5c:	e6e3      	b.n	800cd26 <__udivmoddi4+0x8e>
 800cf5e:	44f4      	add	ip, lr
 800cf60:	3802      	subs	r0, #2
 800cf62:	e742      	b.n	800cdea <__udivmoddi4+0x152>
 800cf64:	3c02      	subs	r4, #2
 800cf66:	4472      	add	r2, lr
 800cf68:	e7e7      	b.n	800cf3a <__udivmoddi4+0x2a2>
 800cf6a:	3802      	subs	r0, #2
 800cf6c:	4471      	add	r1, lr
 800cf6e:	e7d0      	b.n	800cf12 <__udivmoddi4+0x27a>
 800cf70:	3b02      	subs	r3, #2
 800cf72:	443c      	add	r4, r7
 800cf74:	e782      	b.n	800ce7c <__udivmoddi4+0x1e4>
 800cf76:	3802      	subs	r0, #2
 800cf78:	443c      	add	r4, r7
 800cf7a:	e76a      	b.n	800ce52 <__udivmoddi4+0x1ba>

0800cf7c <__aeabi_idiv0>:
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop

0800cf80 <ADC_operation>:
const float A = 3.9083e-3;
const float B = -5.775e-7;
float temperature;

// Function to handle ADC operations
uint8_t ADC_operation() {
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
#if 1
	// Loop through each ADC and channel
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 800cf86:	2300      	movs	r3, #0
 800cf88:	71fb      	strb	r3, [r7, #7]
 800cf8a:	e017      	b.n	800cfbc <ADC_operation+0x3c>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	71bb      	strb	r3, [r7, #6]
 800cf90:	e008      	b.n	800cfa4 <ADC_operation+0x24>
		{
			ADC_READ(ADC_idx, Chn_idx);  // Read ADC value
 800cf92:	79ba      	ldrb	r2, [r7, #6]
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 f81d 	bl	800cfd8 <ADC_READ>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 800cf9e:	79bb      	ldrb	r3, [r7, #6]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	71bb      	strb	r3, [r7, #6]
 800cfa4:	79bb      	ldrb	r3, [r7, #6]
 800cfa6:	2b03      	cmp	r3, #3
 800cfa8:	d9f3      	bls.n	800cf92 <ADC_operation+0x12>
		}

		if(SRAM_check)
 800cfaa:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd4 <ADC_operation+0x54>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <ADC_operation+0x36>
			SRAM_operation();
 800cfb2:	f001 ffe9 	bl	800ef88 <SRAM_operation>
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	71fb      	strb	r3, [r7, #7]
 800cfbc:	79fb      	ldrb	r3, [r7, #7]
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d9e4      	bls.n	800cf8c <ADC_operation+0xc>
	}
	SRAM_check  = 1;
 800cfc2:	4b04      	ldr	r3, [pc, #16]	@ (800cfd4 <ADC_operation+0x54>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	701a      	strb	r2, [r3, #0]
		}
		if(ADC_idx == 2)
			SRAM_operation();
	}
#endif
	return 0;
 800cfc8:	2300      	movs	r3, #0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	2000030c 	.word	0x2000030c

0800cfd8 <ADC_READ>:
#endif

#if 1

uint16_t ADC_READ(uint8_t adc_num,uint8_t channel)
{
 800cfd8:	b5b0      	push	{r4, r5, r7, lr}
 800cfda:	b092      	sub	sp, #72	@ 0x48
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	460a      	mov	r2, r1
 800cfe2:	71fb      	strb	r3, [r7, #7]
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	71bb      	strb	r3, [r7, #6]
	//	uint8_t txd_buf[30]={0};
	//	uint8_t status;
	//	uint16_t sensor_value = 0x7FFF;

	uint8_t rxd_buf[30]={0};
 800cfe8:	2300      	movs	r3, #0
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	f107 0310 	add.w	r3, r7, #16
 800cff0:	2200      	movs	r2, #0
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	605a      	str	r2, [r3, #4]
 800cff6:	609a      	str	r2, [r3, #8]
 800cff8:	60da      	str	r2, [r3, #12]
 800cffa:	611a      	str	r2, [r3, #16]
 800cffc:	615a      	str	r2, [r3, #20]
 800cffe:	831a      	strh	r2, [r3, #24]
	uint8_t wirestatus=0;
 800d000:	2300      	movs	r3, #0
 800d002:	72fb      	strb	r3, [r7, #11]
	float resistance = 0;
 800d004:	f04f 0300 	mov.w	r3, #0
 800d008:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t sum = 0;           // Sum for averaging
 800d00a:	2300      	movs	r3, #0
 800d00c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint16_t adchex=0;
 800d00e:	2300      	movs	r3, #0
 800d010:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	float average = 0.0;        // Average value
 800d014:	f04f 0300 	mov.w	r3, #0
 800d018:	62fb      	str	r3, [r7, #44]	@ 0x2c


	txd_buf[0] = 0x40; // To write data from 0 register
 800d01a:	4b94      	ldr	r3, [pc, #592]	@ (800d26c <ADC_READ+0x294>)
 800d01c:	2240      	movs	r2, #64	@ 0x40
 800d01e:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x11;	//	Number of register to write
 800d020:	4b92      	ldr	r3, [pc, #584]	@ (800d26c <ADC_READ+0x294>)
 800d022:	2211      	movs	r2, #17
 800d024:	705a      	strb	r2, [r3, #1]
	// Register 0x00: Device ID (read-only, value is reserved or device-specific)
	txd_buf[2] = 0x0C; // Device ID
 800d026:	4b91      	ldr	r3, [pc, #580]	@ (800d26c <ADC_READ+0x294>)
 800d028:	220c      	movs	r2, #12
 800d02a:	709a      	strb	r2, [r3, #2]

	// Register 0x01: STATUS (status flags and ready indicator, typically read-only)
	txd_buf[3] = 0x00; // Placeholder, this is usually not written as it’s read-only
 800d02c:	4b8f      	ldr	r3, [pc, #572]	@ (800d26c <ADC_READ+0x294>)
 800d02e:	2200      	movs	r2, #0
 800d030:	70da      	strb	r2, [r3, #3]

	// Register 0x02: INPMUX (input multiplexer configuration for RTD leg selection)
	txd_buf[4] = 0x76; // Configures the input multiplexer (MUXP and MUXN) for specific RTD connections
 800d032:	4b8e      	ldr	r3, [pc, #568]	@ (800d26c <ADC_READ+0x294>)
 800d034:	2276      	movs	r2, #118	@ 0x76
 800d036:	711a      	strb	r2, [r3, #4]

	// Register 0x03: PGA (programmable gain amplifier configuration)
	txd_buf[5] = 0xEA; // Sets PGA gain = 1, enabling precise low-signal measurement
 800d038:	4b8c      	ldr	r3, [pc, #560]	@ (800d26c <ADC_READ+0x294>)
 800d03a:	22ea      	movs	r2, #234	@ 0xea
 800d03c:	715a      	strb	r2, [r3, #5]

	// Register 0x04: DATARATE (data rate and conversion settings)
	txd_buf[6] = 0x1E; // Sets data rate to 4000 SPS and other configurations
 800d03e:	4b8b      	ldr	r3, [pc, #556]	@ (800d26c <ADC_READ+0x294>)
 800d040:	221e      	movs	r2, #30
 800d042:	719a      	strb	r2, [r3, #6]

	// Register 0x05: REF (reference voltage configuration)
	txd_buf[7] = 0x82; // Reference configuration (enable internal/external reference, etc.)
 800d044:	4b89      	ldr	r3, [pc, #548]	@ (800d26c <ADC_READ+0x294>)
 800d046:	2282      	movs	r2, #130	@ 0x82
 800d048:	71da      	strb	r2, [r3, #7]

	// Register 0x06: IDACMAG (IDAC magnitude configuration)
	txd_buf[8] = 0x87; // Configures excitation current for RTD measurement
 800d04a:	4b88      	ldr	r3, [pc, #544]	@ (800d26c <ADC_READ+0x294>)
 800d04c:	2287      	movs	r2, #135	@ 0x87
 800d04e:	721a      	strb	r2, [r3, #8]

	// Register 0x07: IDACMUX (routes IDAC currents to specific pins)
	txd_buf[9] = 0xFB; // Routes IDAC currents to appropriate RTD pins
 800d050:	4b86      	ldr	r3, [pc, #536]	@ (800d26c <ADC_READ+0x294>)
 800d052:	22fb      	movs	r2, #251	@ 0xfb
 800d054:	725a      	strb	r2, [r3, #9]

	// Register 0x08: VBIAS (voltage bias configuration)
	txd_buf[10] = 0x00; // Disables voltage bias
 800d056:	4b85      	ldr	r3, [pc, #532]	@ (800d26c <ADC_READ+0x294>)
 800d058:	2200      	movs	r2, #0
 800d05a:	729a      	strb	r2, [r3, #10]

	// Register 0x09: SYS (system configuration, including timeout and calibration settings)
	txd_buf[11] = 0x10; // Configures timeout and calibration sample averaging
 800d05c:	4b83      	ldr	r3, [pc, #524]	@ (800d26c <ADC_READ+0x294>)
 800d05e:	2210      	movs	r2, #16
 800d060:	72da      	strb	r2, [r3, #11]

	// Registers 0x0A to 0x0F: Reserved or calibration-related (placeholders in this code)
	txd_buf[12] = 0x00; // Placeholder
 800d062:	4b82      	ldr	r3, [pc, #520]	@ (800d26c <ADC_READ+0x294>)
 800d064:	2200      	movs	r2, #0
 800d066:	731a      	strb	r2, [r3, #12]
	txd_buf[13] = 0x00; // Placeholder
 800d068:	4b80      	ldr	r3, [pc, #512]	@ (800d26c <ADC_READ+0x294>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	735a      	strb	r2, [r3, #13]
	txd_buf[14] = 0x00; // Placeholder
 800d06e:	4b7f      	ldr	r3, [pc, #508]	@ (800d26c <ADC_READ+0x294>)
 800d070:	2200      	movs	r2, #0
 800d072:	739a      	strb	r2, [r3, #14]
	txd_buf[15] = 0x00; // Placeholder
 800d074:	4b7d      	ldr	r3, [pc, #500]	@ (800d26c <ADC_READ+0x294>)
 800d076:	2200      	movs	r2, #0
 800d078:	73da      	strb	r2, [r3, #15]
	txd_buf[16] = 0x00; // Placeholder
 800d07a:	4b7c      	ldr	r3, [pc, #496]	@ (800d26c <ADC_READ+0x294>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	741a      	strb	r2, [r3, #16]

	// Register 0x10: GPIODAT (GPIO data configuration)
	txd_buf[17] = 0x40; // Configures GPIO pin states
 800d080:	4b7a      	ldr	r3, [pc, #488]	@ (800d26c <ADC_READ+0x294>)
 800d082:	2240      	movs	r2, #64	@ 0x40
 800d084:	745a      	strb	r2, [r3, #17]

	// Registers 0x11 to 0x14: Placeholder or unused
	txd_buf[18] = 0x00; // Placeholder
 800d086:	4b79      	ldr	r3, [pc, #484]	@ (800d26c <ADC_READ+0x294>)
 800d088:	2200      	movs	r2, #0
 800d08a:	749a      	strb	r2, [r3, #18]
	txd_buf[19] = 0x00; // Placeholder
 800d08c:	4b77      	ldr	r3, [pc, #476]	@ (800d26c <ADC_READ+0x294>)
 800d08e:	2200      	movs	r2, #0
 800d090:	74da      	strb	r2, [r3, #19]
	txd_buf[20] = 0x00; // Placeholder
 800d092:	4b76      	ldr	r3, [pc, #472]	@ (800d26c <ADC_READ+0x294>)
 800d094:	2200      	movs	r2, #0
 800d096:	751a      	strb	r2, [r3, #20]

	// Note: txd_buf[18] is redundantly assigned. The last assignment will overwrite earlier ones.
	txd_buf[18] = 0x00; // Redundant; ensure this matches intended use.
 800d098:	4b74      	ldr	r3, [pc, #464]	@ (800d26c <ADC_READ+0x294>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	749a      	strb	r2, [r3, #18]

	switch(channel)
 800d09e:	79bb      	ldrb	r3, [r7, #6]
 800d0a0:	2b03      	cmp	r3, #3
 800d0a2:	d827      	bhi.n	800d0f4 <ADC_READ+0x11c>
 800d0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d0ac <ADC_READ+0xd4>)
 800d0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0aa:	bf00      	nop
 800d0ac:	0800d0bd 	.word	0x0800d0bd
 800d0b0:	0800d0cb 	.word	0x0800d0cb
 800d0b4:	0800d0d9 	.word	0x0800d0d9
 800d0b8:	0800d0e7 	.word	0x0800d0e7
	{
	case CHANNEL_1:
		txd_buf[4] = 0x43;// Input MUX for RTD legs selection (MUX configuration)
 800d0bc:	4b6b      	ldr	r3, [pc, #428]	@ (800d26c <ADC_READ+0x294>)
 800d0be:	2243      	movs	r2, #67	@ 0x43
 800d0c0:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf5; // IDAC MUX
 800d0c2:	4b6a      	ldr	r3, [pc, #424]	@ (800d26c <ADC_READ+0x294>)
 800d0c4:	22f5      	movs	r2, #245	@ 0xf5
 800d0c6:	725a      	strb	r2, [r3, #9]
		break;
 800d0c8:	e014      	b.n	800d0f4 <ADC_READ+0x11c>

	case CHANNEL_2:
		txd_buf[4] = 0x10; // Input MUX for RTD legs selection (MUX configuration)
 800d0ca:	4b68      	ldr	r3, [pc, #416]	@ (800d26c <ADC_READ+0x294>)
 800d0cc:	2210      	movs	r2, #16
 800d0ce:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf2; // IDAC MUX
 800d0d0:	4b66      	ldr	r3, [pc, #408]	@ (800d26c <ADC_READ+0x294>)
 800d0d2:	22f2      	movs	r2, #242	@ 0xf2
 800d0d4:	725a      	strb	r2, [r3, #9]
		break;
 800d0d6:	e00d      	b.n	800d0f4 <ADC_READ+0x11c>

	case CHANNEL_3:
		txd_buf[4] = 0x9A; // Input MUX for RTD legs selection (MUX configuration)
 800d0d8:	4b64      	ldr	r3, [pc, #400]	@ (800d26c <ADC_READ+0x294>)
 800d0da:	229a      	movs	r2, #154	@ 0x9a
 800d0dc:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf8; // IDAC MUX
 800d0de:	4b63      	ldr	r3, [pc, #396]	@ (800d26c <ADC_READ+0x294>)
 800d0e0:	22f8      	movs	r2, #248	@ 0xf8
 800d0e2:	725a      	strb	r2, [r3, #9]
		break;
 800d0e4:	e006      	b.n	800d0f4 <ADC_READ+0x11c>
	case CHANNEL_4:
		txd_buf[4] = 0x76; // Input MUX for RTD legs selection (MUX configuration)
 800d0e6:	4b61      	ldr	r3, [pc, #388]	@ (800d26c <ADC_READ+0x294>)
 800d0e8:	2276      	movs	r2, #118	@ 0x76
 800d0ea:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xfb;// IDAC MUX
 800d0ec:	4b5f      	ldr	r3, [pc, #380]	@ (800d26c <ADC_READ+0x294>)
 800d0ee:	22fb      	movs	r2, #251	@ 0xfb
 800d0f0:	725a      	strb	r2, [r3, #9]
		break;
 800d0f2:	bf00      	nop
	}

	switch(adc_num)
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	f000 83ec 	beq.w	800d8d4 <ADC_READ+0x8fc>
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	f300 85b1 	bgt.w	800dc64 <ADC_READ+0xc8c>
 800d102:	2b00      	cmp	r3, #0
 800d104:	d004      	beq.n	800d110 <ADC_READ+0x138>
 800d106:	2b01      	cmp	r3, #1
 800d108:	f000 81e8 	beq.w	800d4dc <ADC_READ+0x504>
 800d10c:	f000 bdaa 	b.w	800dc64 <ADC_READ+0xc8c>
	{
	case ADC_1:

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d110:	2200      	movs	r2, #0
 800d112:	2140      	movs	r1, #64	@ 0x40
 800d114:	4856      	ldr	r0, [pc, #344]	@ (800d270 <ADC_READ+0x298>)
 800d116:	f004 fded 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 800d11a:	2200      	movs	r2, #0
 800d11c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d120:	4853      	ldr	r0, [pc, #332]	@ (800d270 <ADC_READ+0x298>)
 800d122:	f004 fde7 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 800d126:	2200      	movs	r2, #0
 800d128:	2104      	movs	r1, #4
 800d12a:	4852      	ldr	r0, [pc, #328]	@ (800d274 <ADC_READ+0x29c>)
 800d12c:	f004 fde2 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 800d130:	2201      	movs	r2, #1
 800d132:	2104      	movs	r1, #4
 800d134:	484f      	ldr	r0, [pc, #316]	@ (800d274 <ADC_READ+0x29c>)
 800d136:	f004 fddd 	bl	8011cf4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d13a:	2200      	movs	r2, #0
 800d13c:	2140      	movs	r1, #64	@ 0x40
 800d13e:	484c      	ldr	r0, [pc, #304]	@ (800d270 <ADC_READ+0x298>)
 800d140:	f004 fdd8 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 800d144:	f04f 33ff 	mov.w	r3, #4294967295
 800d148:	2213      	movs	r2, #19
 800d14a:	4948      	ldr	r1, [pc, #288]	@ (800d26c <ADC_READ+0x294>)
 800d14c:	484a      	ldr	r0, [pc, #296]	@ (800d278 <ADC_READ+0x2a0>)
 800d14e:	f00b fe75 	bl	8018e3c <HAL_SPI_Transmit>
		HAL_Delay(1); // don't touch
 800d152:	2001      	movs	r0, #1
 800d154:	f004 fa0a 	bl	801156c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800d158:	2201      	movs	r2, #1
 800d15a:	2140      	movs	r1, #64	@ 0x40
 800d15c:	4844      	ldr	r0, [pc, #272]	@ (800d270 <ADC_READ+0x298>)
 800d15e:	f004 fdc9 	bl	8011cf4 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 1);
 800d162:	2201      	movs	r2, #1
 800d164:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d168:	4841      	ldr	r0, [pc, #260]	@ (800d270 <ADC_READ+0x298>)
 800d16a:	f004 fdc3 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_Delay(1); // don't touch
 800d16e:	2001      	movs	r0, #1
 800d170:	f004 f9fc 	bl	801156c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d174:	2200      	movs	r2, #0
 800d176:	2140      	movs	r1, #64	@ 0x40
 800d178:	483d      	ldr	r0, [pc, #244]	@ (800d270 <ADC_READ+0x298>)
 800d17a:	f004 fdbb 	bl	8011cf4 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19; // self offset calibration
 800d17e:	4b3b      	ldr	r3, [pc, #236]	@ (800d26c <ADC_READ+0x294>)
 800d180:	2219      	movs	r2, #25
 800d182:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 800d184:	f04f 33ff 	mov.w	r3, #4294967295
 800d188:	2201      	movs	r2, #1
 800d18a:	4938      	ldr	r1, [pc, #224]	@ (800d26c <ADC_READ+0x294>)
 800d18c:	483a      	ldr	r0, [pc, #232]	@ (800d278 <ADC_READ+0x2a0>)
 800d18e:	f00b fe55 	bl	8018e3c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800d192:	2201      	movs	r2, #1
 800d194:	2140      	movs	r1, #64	@ 0x40
 800d196:	4836      	ldr	r0, [pc, #216]	@ (800d270 <ADC_READ+0x298>)
 800d198:	f004 fdac 	bl	8011cf4 <HAL_GPIO_WritePin>

		HAL_Delay(wait_time);
 800d19c:	4b37      	ldr	r3, [pc, #220]	@ (800d27c <ADC_READ+0x2a4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f004 f9e3 	bl	801156c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2140      	movs	r1, #64	@ 0x40
 800d1aa:	4831      	ldr	r0, [pc, #196]	@ (800d270 <ADC_READ+0x298>)
 800d1ac:	f004 fda2 	bl	8011cf4 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 800d1b0:	4b2e      	ldr	r3, [pc, #184]	@ (800d26c <ADC_READ+0x294>)
 800d1b2:	2213      	movs	r2, #19
 800d1b4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++)
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1ba:	e070      	b.n	800d29e <ADC_READ+0x2c6>
		{
			HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFFFF);
 800d1bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	492a      	ldr	r1, [pc, #168]	@ (800d26c <ADC_READ+0x294>)
 800d1c4:	482c      	ldr	r0, [pc, #176]	@ (800d278 <ADC_READ+0x2a0>)
 800d1c6:	f00b fe39 	bl	8018e3c <HAL_SPI_Transmit>
			HAL_Delay(1);
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	f004 f9ce 	bl	801156c <HAL_Delay>
			HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1[i], 0x2, 0xFFFF);
 800d1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1d2:	005b      	lsls	r3, r3, #1
 800d1d4:	4a2a      	ldr	r2, [pc, #168]	@ (800d280 <ADC_READ+0x2a8>)
 800d1d6:	1899      	adds	r1, r3, r2
 800d1d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d1dc:	2202      	movs	r2, #2
 800d1de:	4826      	ldr	r0, [pc, #152]	@ (800d278 <ADC_READ+0x2a0>)
 800d1e0:	f00c f842 	bl	8019268 <HAL_SPI_Receive>
			HAL_Delay(1);
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	f004 f9c1 	bl	801156c <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_1[i] = (reg_data_ADC_1[i] >> 8) | (reg_data_ADC_1[i] << 8);
 800d1ea:	4a25      	ldr	r2, [pc, #148]	@ (800d280 <ADC_READ+0x2a8>)
 800d1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1f2:	0a1b      	lsrs	r3, r3, #8
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	b21a      	sxth	r2, r3
 800d1f8:	4921      	ldr	r1, [pc, #132]	@ (800d280 <ADC_READ+0x2a8>)
 800d1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d200:	021b      	lsls	r3, r3, #8
 800d202:	b21b      	sxth	r3, r3
 800d204:	4313      	orrs	r3, r2
 800d206:	b21b      	sxth	r3, r3
 800d208:	b299      	uxth	r1, r3
 800d20a:	4a1d      	ldr	r2, [pc, #116]	@ (800d280 <ADC_READ+0x2a8>)
 800d20c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d20e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

#ifdef RAND_VAL_CHK
			if(i > 0)
 800d212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d214:	2b00      	cmp	r3, #0
 800d216:	dd37      	ble.n	800d288 <ADC_READ+0x2b0>
			{
				if(((reg_data_ADC_1[i]-reg_data_ADC_1[i-1])<2)||((reg_data_ADC_1[i-1]-reg_data_ADC_1[i])<2))
 800d218:	4a19      	ldr	r2, [pc, #100]	@ (800d280 <ADC_READ+0x2a8>)
 800d21a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d21c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d220:	4619      	mov	r1, r3
 800d222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d224:	3b01      	subs	r3, #1
 800d226:	4a16      	ldr	r2, [pc, #88]	@ (800d280 <ADC_READ+0x2a8>)
 800d228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d22c:	1acb      	subs	r3, r1, r3
 800d22e:	2b01      	cmp	r3, #1
 800d230:	dd0c      	ble.n	800d24c <ADC_READ+0x274>
 800d232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d234:	3b01      	subs	r3, #1
 800d236:	4a12      	ldr	r2, [pc, #72]	@ (800d280 <ADC_READ+0x2a8>)
 800d238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d23c:	4619      	mov	r1, r3
 800d23e:	4a10      	ldr	r2, [pc, #64]	@ (800d280 <ADC_READ+0x2a8>)
 800d240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d246:	1acb      	subs	r3, r1, r3
 800d248:	2b01      	cmp	r3, #1
 800d24a:	dc08      	bgt.n	800d25e <ADC_READ+0x286>
				{
					sum += reg_data_ADC_1[i];
 800d24c:	4a0c      	ldr	r2, [pc, #48]	@ (800d280 <ADC_READ+0x2a8>)
 800d24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d254:	461a      	mov	r2, r3
 800d256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d258:	4413      	add	r3, r2
 800d25a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d25c:	e01c      	b.n	800d298 <ADC_READ+0x2c0>
				}
				else
				{
					diff_count++;
 800d25e:	4b09      	ldr	r3, [pc, #36]	@ (800d284 <ADC_READ+0x2ac>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	3301      	adds	r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	4b07      	ldr	r3, [pc, #28]	@ (800d284 <ADC_READ+0x2ac>)
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	e015      	b.n	800d298 <ADC_READ+0x2c0>
 800d26c:	200002ac 	.word	0x200002ac
 800d270:	42021400 	.word	0x42021400
 800d274:	42020800 	.word	0x42020800
 800d278:	20005840 	.word	0x20005840
 800d27c:	20000000 	.word	0x20000000
 800d280:	200002d0 	.word	0x200002d0
 800d284:	2000030d 	.word	0x2000030d
				}
			}
			else
			{
				sum += reg_data_ADC_1[i];
 800d288:	4ac5      	ldr	r2, [pc, #788]	@ (800d5a0 <ADC_READ+0x5c8>)
 800d28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d290:	461a      	mov	r2, r3
 800d292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d294:	4413      	add	r3, r2
 800d296:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 800d298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d29a:	3301      	adds	r3, #1
 800d29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a0:	2b09      	cmp	r3, #9
 800d2a2:	dd8b      	ble.n	800d1bc <ADC_READ+0x1e4>
			}

		}

		if(diff_count > 5) sum =0;
 800d2a4:	4bbf      	ldr	r3, [pc, #764]	@ (800d5a4 <ADC_READ+0x5cc>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2b05      	cmp	r3, #5
 800d2aa:	d901      	bls.n	800d2b0 <ADC_READ+0x2d8>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	647b      	str	r3, [r7, #68]	@ 0x44
		diff_count=0;
 800d2b0:	4bbc      	ldr	r3, [pc, #752]	@ (800d5a4 <ADC_READ+0x5cc>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	701a      	strb	r2, [r3, #0]

		sum += reg_data_ADC_1[i];  // Add to sum for averaging
	}
#endif

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	2140      	movs	r1, #64	@ 0x40
 800d2ba:	48bb      	ldr	r0, [pc, #748]	@ (800d5a8 <ADC_READ+0x5d0>)
 800d2bc:	f004 fd1a 	bl	8011cf4 <HAL_GPIO_WritePin>

	average = sum / 10.0;
 800d2c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d2c2:	f7ff f92f 	bl	800c524 <__aeabi_ui2d>
 800d2c6:	f04f 0200 	mov.w	r2, #0
 800d2ca:	4bb8      	ldr	r3, [pc, #736]	@ (800d5ac <ADC_READ+0x5d4>)
 800d2cc:	f7ff face 	bl	800c86c <__aeabi_ddiv>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	f7ff fc76 	bl	800cbc8 <__aeabi_d2f>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	adchex  = sum / 10;
 800d2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e2:	4ab3      	ldr	r2, [pc, #716]	@ (800d5b0 <ADC_READ+0x5d8>)
 800d2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e8:	08db      	lsrs	r3, r3, #3
 800d2ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 800d2ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d2f2:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800d5b4 <ADC_READ+0x5dc>
 800d2f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2fa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800d2fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d302:	eddf 6aad 	vldr	s13, [pc, #692]	@ 800d5b8 <ADC_READ+0x5e0>
 800d306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d30a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	//Callendar-Van Dusen Equation
	if (resistance >= R0) {  // Above 0°C
 800d30e:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 800d5bc <ADC_READ+0x5e4>
 800d312:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d31e:	db50      	blt.n	800d3c2 <ADC_READ+0x3ea>
		temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 800d320:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 800d5c0 <ADC_READ+0x5e8>
 800d324:	eef1 7a67 	vneg.f32	s15, s15
 800d328:	ee17 3a90 	vmov	r3, s15
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff f91b 	bl	800c568 <__aeabi_f2d>
 800d332:	4604      	mov	r4, r0
 800d334:	460d      	mov	r5, r1
 800d336:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800d5c0 <ADC_READ+0x5e8>
 800d33a:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 800d5c0 <ADC_READ+0x5e8>
 800d33e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d342:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 800d5c4 <ADC_READ+0x5ec>
 800d346:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800d34a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d34e:	eddf 5a9b 	vldr	s11, [pc, #620]	@ 800d5bc <ADC_READ+0x5e4>
 800d352:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 800d356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d35a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800d35e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d36a:	ee17 0a90 	vmov	r0, s15
 800d36e:	f7ff f8fb 	bl	800c568 <__aeabi_f2d>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	ec43 2b10 	vmov	d0, r2, r3
 800d37a:	f011 fd99 	bl	801eeb0 <sqrt>
 800d37e:	ec53 2b10 	vmov	r2, r3, d0
 800d382:	4620      	mov	r0, r4
 800d384:	4629      	mov	r1, r5
 800d386:	f7fe ff91 	bl	800c2ac <__adddf3>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4614      	mov	r4, r2
 800d390:	461d      	mov	r5, r3
 800d392:	eddf 7a8c 	vldr	s15, [pc, #560]	@ 800d5c4 <ADC_READ+0x5ec>
 800d396:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d39a:	ee17 0a90 	vmov	r0, s15
 800d39e:	f7ff f8e3 	bl	800c568 <__aeabi_f2d>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	f7ff fa5f 	bl	800c86c <__aeabi_ddiv>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	f7ff fc07 	bl	800cbc8 <__aeabi_d2f>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	4a82      	ldr	r2, [pc, #520]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	e017      	b.n	800d3f2 <ADC_READ+0x41a>
	}
	else
	{  // Below 0°C, use simpler approximation
		temperature = (resistance - R0) / 0.385;
 800d3c2:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 800d5bc <ADC_READ+0x5e4>
 800d3c6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d3ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3ce:	ee17 0a90 	vmov	r0, s15
 800d3d2:	f7ff f8c9 	bl	800c568 <__aeabi_f2d>
 800d3d6:	a370      	add	r3, pc, #448	@ (adr r3, 800d598 <ADC_READ+0x5c0>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f7ff fa46 	bl	800c86c <__aeabi_ddiv>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	f7ff fbee 	bl	800cbc8 <__aeabi_d2f>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	4a76      	ldr	r2, [pc, #472]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d3f0:	6013      	str	r3, [r2, #0]
	}

	if(rxd_buf[7]==txd_buf[9])
 800d3f2:	7cfa      	ldrb	r2, [r7, #19]
 800d3f4:	4b75      	ldr	r3, [pc, #468]	@ (800d5cc <ADC_READ+0x5f4>)
 800d3f6:	7a5b      	ldrb	r3, [r3, #9]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d10e      	bne.n	800d41a <ADC_READ+0x442>
	{
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 1); // Toggle LED for visual feedback
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d402:	4873      	ldr	r0, [pc, #460]	@ (800d5d0 <ADC_READ+0x5f8>)
 800d404:	f004 fc76 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800d408:	2001      	movs	r0, #1
 800d40a:	f004 f8af 	bl	801156c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 0);
 800d40e:	2200      	movs	r2, #0
 800d410:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d414:	486e      	ldr	r0, [pc, #440]	@ (800d5d0 <ADC_READ+0x5f8>)
 800d416:	f004 fc6d 	bl	8011cf4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
#endif

#ifdef WIREBREAK

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800d41a:	2200      	movs	r2, #0
 800d41c:	2140      	movs	r1, #64	@ 0x40
 800d41e:	4862      	ldr	r0, [pc, #392]	@ (800d5a8 <ADC_READ+0x5d0>)
 800d420:	f004 fc68 	bl	8011cf4 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x21;
 800d424:	4b69      	ldr	r3, [pc, #420]	@ (800d5cc <ADC_READ+0x5f4>)
 800d426:	2221      	movs	r2, #33	@ 0x21
 800d428:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x00;
 800d42a:	4b68      	ldr	r3, [pc, #416]	@ (800d5cc <ADC_READ+0x5f4>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 2, 0xFFFF);
 800d430:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d434:	2202      	movs	r2, #2
 800d436:	4965      	ldr	r1, [pc, #404]	@ (800d5cc <ADC_READ+0x5f4>)
 800d438:	4866      	ldr	r0, [pc, #408]	@ (800d5d4 <ADC_READ+0x5fc>)
 800d43a:	f00b fcff 	bl	8018e3c <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_SPI_Receive(&hspi5, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800d43e:	f107 010b 	add.w	r1, r7, #11
 800d442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d446:	2201      	movs	r2, #1
 800d448:	4862      	ldr	r0, [pc, #392]	@ (800d5d4 <ADC_READ+0x5fc>)
 800d44a:	f00b ff0d 	bl	8019268 <HAL_SPI_Receive>
//	HAL_Delay(1);

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800d44e:	2201      	movs	r2, #1
 800d450:	2140      	movs	r1, #64	@ 0x40
 800d452:	4855      	ldr	r0, [pc, #340]	@ (800d5a8 <ADC_READ+0x5d0>)
 800d454:	f004 fc4e 	bl	8011cf4 <HAL_GPIO_WritePin>

	if (wire_break(wirestatus))
 800d458:	7afb      	ldrb	r3, [r7, #11]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 fc28 	bl	800dcb0 <wire_break>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00e      	beq.n	800d484 <ADC_READ+0x4ac>
	{
		wirestatus=0;
 800d466:	2300      	movs	r3, #0
 800d468:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 800d46a:	4b57      	ldr	r3, [pc, #348]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d46c:	f04f 0200 	mov.w	r2, #0
 800d470:	601a      	str	r2, [r3, #0]
		adchex =0;
 800d472:	2300      	movs	r3, #0
 800d474:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 800d478:	2214      	movs	r2, #20
 800d47a:	2100      	movs	r1, #0
 800d47c:	4848      	ldr	r0, [pc, #288]	@ (800d5a0 <ADC_READ+0x5c8>)
 800d47e:	f00f fc1e 	bl	801ccbe <memset>
 800d482:	e015      	b.n	800d4b0 <ADC_READ+0x4d8>
	}
	else if(check_sensor_validity(adchex))
 800d484:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d488:	4618      	mov	r0, r3
 800d48a:	f000 fbf9 	bl	800dc80 <check_sensor_validity>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d00d      	beq.n	800d4b0 <ADC_READ+0x4d8>
	{
		wirestatus=0;
 800d494:	2300      	movs	r3, #0
 800d496:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 800d498:	4b4b      	ldr	r3, [pc, #300]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d49a:	f04f 0200 	mov.w	r2, #0
 800d49e:	601a      	str	r2, [r3, #0]
		adchex =0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 800d4a6:	2214      	movs	r2, #20
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	483d      	ldr	r0, [pc, #244]	@ (800d5a0 <ADC_READ+0x5c8>)
 800d4ac:	f00f fc07 	bl	801ccbe <memset>
	}
	wirestatus=0;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	72fb      	strb	r3, [r7, #11]

#endif
	temp_sensor[adc_num][channel] = temperature ;
 800d4b4:	79f9      	ldrb	r1, [r7, #7]
 800d4b6:	79bb      	ldrb	r3, [r7, #6]
 800d4b8:	4a43      	ldr	r2, [pc, #268]	@ (800d5c8 <ADC_READ+0x5f0>)
 800d4ba:	6812      	ldr	r2, [r2, #0]
 800d4bc:	4846      	ldr	r0, [pc, #280]	@ (800d5d8 <ADC_READ+0x600>)
 800d4be:	0089      	lsls	r1, r1, #2
 800d4c0:	440b      	add	r3, r1
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	4403      	add	r3, r0
 800d4c6:	601a      	str	r2, [r3, #0]
	sensor_hex[adc_num][channel] = 	adchex ;
 800d4c8:	79fa      	ldrb	r2, [r7, #7]
 800d4ca:	79bb      	ldrb	r3, [r7, #6]
 800d4cc:	4943      	ldr	r1, [pc, #268]	@ (800d5dc <ADC_READ+0x604>)
 800d4ce:	0092      	lsls	r2, r2, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d4d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	//		sensor_value =	sum / 10;
	break;
 800d4da:	e3c3      	b.n	800dc64 <ADC_READ+0xc8c>

	case ADC_2:

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d4e2:	483f      	ldr	r0, [pc, #252]	@ (800d5e0 <ADC_READ+0x608>)
 800d4e4:	f004 fc06 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	2140      	movs	r1, #64	@ 0x40
 800d4ec:	483d      	ldr	r0, [pc, #244]	@ (800d5e4 <ADC_READ+0x60c>)
 800d4ee:	f004 fc01 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d4f8:	483a      	ldr	r0, [pc, #232]	@ (800d5e4 <ADC_READ+0x60c>)
 800d4fa:	f004 fbfb 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 800d4fe:	2201      	movs	r2, #1
 800d500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d504:	4837      	ldr	r0, [pc, #220]	@ (800d5e4 <ADC_READ+0x60c>)
 800d506:	f004 fbf5 	bl	8011cf4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d50a:	2200      	movs	r2, #0
 800d50c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d510:	4833      	ldr	r0, [pc, #204]	@ (800d5e0 <ADC_READ+0x608>)
 800d512:	f004 fbef 	bl	8011cf4 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 800d516:	f04f 33ff 	mov.w	r3, #4294967295
 800d51a:	2213      	movs	r2, #19
 800d51c:	492b      	ldr	r1, [pc, #172]	@ (800d5cc <ADC_READ+0x5f4>)
 800d51e:	4832      	ldr	r0, [pc, #200]	@ (800d5e8 <ADC_READ+0x610>)
 800d520:	f00b fc8c 	bl	8018e3c <HAL_SPI_Transmit>
		HAL_Delay(1);
 800d524:	2001      	movs	r0, #1
 800d526:	f004 f821 	bl	801156c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800d52a:	2201      	movs	r2, #1
 800d52c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d530:	482b      	ldr	r0, [pc, #172]	@ (800d5e0 <ADC_READ+0x608>)
 800d532:	f004 fbdf 	bl	8011cf4 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 800d536:	2201      	movs	r2, #1
 800d538:	2140      	movs	r1, #64	@ 0x40
 800d53a:	482a      	ldr	r0, [pc, #168]	@ (800d5e4 <ADC_READ+0x60c>)
 800d53c:	f004 fbda 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800d540:	2001      	movs	r0, #1
 800d542:	f004 f813 	bl	801156c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d546:	2200      	movs	r2, #0
 800d548:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d54c:	4824      	ldr	r0, [pc, #144]	@ (800d5e0 <ADC_READ+0x608>)
 800d54e:	f004 fbd1 	bl	8011cf4 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 800d552:	4b1e      	ldr	r3, [pc, #120]	@ (800d5cc <ADC_READ+0x5f4>)
 800d554:	2219      	movs	r2, #25
 800d556:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 800d558:	f04f 33ff 	mov.w	r3, #4294967295
 800d55c:	2201      	movs	r2, #1
 800d55e:	491b      	ldr	r1, [pc, #108]	@ (800d5cc <ADC_READ+0x5f4>)
 800d560:	4821      	ldr	r0, [pc, #132]	@ (800d5e8 <ADC_READ+0x610>)
 800d562:	f00b fc6b 	bl	8018e3c <HAL_SPI_Transmit>
//		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800d566:	2201      	movs	r2, #1
 800d568:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d56c:	481c      	ldr	r0, [pc, #112]	@ (800d5e0 <ADC_READ+0x608>)
 800d56e:	f004 fbc1 	bl	8011cf4 <HAL_GPIO_WritePin>


		HAL_Delay(wait_time);
 800d572:	4b1e      	ldr	r3, [pc, #120]	@ (800d5ec <ADC_READ+0x614>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4618      	mov	r0, r3
 800d578:	f003 fff8 	bl	801156c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d57c:	2200      	movs	r2, #0
 800d57e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d582:	4817      	ldr	r0, [pc, #92]	@ (800d5e0 <ADC_READ+0x608>)
 800d584:	f004 fbb6 	bl	8011cf4 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 800d588:	4b10      	ldr	r3, [pc, #64]	@ (800d5cc <ADC_READ+0x5f4>)
 800d58a:	2213      	movs	r2, #19
 800d58c:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < 10; i++)
 800d58e:	2300      	movs	r3, #0
 800d590:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d592:	e063      	b.n	800d65c <ADC_READ+0x684>
 800d594:	f3af 8000 	nop.w
 800d598:	0a3d70a4 	.word	0x0a3d70a4
 800d59c:	3fd8a3d7 	.word	0x3fd8a3d7
 800d5a0:	200002d0 	.word	0x200002d0
 800d5a4:	2000030d 	.word	0x2000030d
 800d5a8:	42021400 	.word	0x42021400
 800d5ac:	40240000 	.word	0x40240000
 800d5b0:	cccccccd 	.word	0xcccccccd
 800d5b4:	44fa0000 	.word	0x44fa0000
 800d5b8:	477fff00 	.word	0x477fff00
 800d5bc:	42c80000 	.word	0x42c80000
 800d5c0:	3b801132 	.word	0x3b801132
 800d5c4:	b51b057f 	.word	0xb51b057f
 800d5c8:	200002cc 	.word	0x200002cc
 800d5cc:	200002ac 	.word	0x200002ac
 800d5d0:	42021000 	.word	0x42021000
 800d5d4:	20005840 	.word	0x20005840
 800d5d8:	20000310 	.word	0x20000310
 800d5dc:	20000340 	.word	0x20000340
 800d5e0:	42020400 	.word	0x42020400
 800d5e4:	42021800 	.word	0x42021800
 800d5e8:	20005720 	.word	0x20005720
 800d5ec:	20000000 	.word	0x20000000
		{
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFFFF);
 800d5f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	49a8      	ldr	r1, [pc, #672]	@ (800d898 <ADC_READ+0x8c0>)
 800d5f8:	48a8      	ldr	r0, [pc, #672]	@ (800d89c <ADC_READ+0x8c4>)
 800d5fa:	f00b fc1f 	bl	8018e3c <HAL_SPI_Transmit>
			HAL_Delay(1);
 800d5fe:	2001      	movs	r0, #1
 800d600:	f003 ffb4 	bl	801156c <HAL_Delay>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2[i], 0x2, 0xFFFF);
 800d604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d606:	005b      	lsls	r3, r3, #1
 800d608:	4aa5      	ldr	r2, [pc, #660]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d60a:	1899      	adds	r1, r3, r2
 800d60c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d610:	2202      	movs	r2, #2
 800d612:	48a2      	ldr	r0, [pc, #648]	@ (800d89c <ADC_READ+0x8c4>)
 800d614:	f00b fe28 	bl	8019268 <HAL_SPI_Receive>
			HAL_Delay(1);
 800d618:	2001      	movs	r0, #1
 800d61a:	f003 ffa7 	bl	801156c <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_2[i] = (reg_data_ADC_2[i] >> 8) | (reg_data_ADC_2[i] << 8);
 800d61e:	4aa0      	ldr	r2, [pc, #640]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d626:	0a1b      	lsrs	r3, r3, #8
 800d628:	b29b      	uxth	r3, r3
 800d62a:	b21a      	sxth	r2, r3
 800d62c:	499c      	ldr	r1, [pc, #624]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d630:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d634:	021b      	lsls	r3, r3, #8
 800d636:	b21b      	sxth	r3, r3
 800d638:	4313      	orrs	r3, r2
 800d63a:	b21b      	sxth	r3, r3
 800d63c:	b299      	uxth	r1, r3
 800d63e:	4a98      	ldr	r2, [pc, #608]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if(diff_count > 5) sum =0;
		diff_count=0;
#else

		sum += reg_data_ADC_2[i];  // Add to sum for averaging
 800d646:	4a96      	ldr	r2, [pc, #600]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d64e:	461a      	mov	r2, r3
 800d650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d652:	4413      	add	r3, r2
 800d654:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	3301      	adds	r3, #1
 800d65a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65e:	2b09      	cmp	r3, #9
 800d660:	ddc6      	ble.n	800d5f0 <ADC_READ+0x618>
}
#endif

adchex =  sum / 10;
 800d662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d664:	4a8f      	ldr	r2, [pc, #572]	@ (800d8a4 <ADC_READ+0x8cc>)
 800d666:	fba2 2303 	umull	r2, r3, r2, r3
 800d66a:	08db      	lsrs	r3, r3, #3
 800d66c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 800d670:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d672:	f7fe ff57 	bl	800c524 <__aeabi_ui2d>
 800d676:	f04f 0200 	mov.w	r2, #0
 800d67a:	4b8b      	ldr	r3, [pc, #556]	@ (800d8a8 <ADC_READ+0x8d0>)
 800d67c:	f7ff f8f6 	bl	800c86c <__aeabi_ddiv>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	4610      	mov	r0, r2
 800d686:	4619      	mov	r1, r3
 800d688:	f7ff fa9e 	bl	800cbc8 <__aeabi_d2f>
 800d68c:	4603      	mov	r3, r0
 800d68e:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800d690:	2201      	movs	r2, #1
 800d692:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d696:	4885      	ldr	r0, [pc, #532]	@ (800d8ac <ADC_READ+0x8d4>)
 800d698:	f004 fb2c 	bl	8011cf4 <HAL_GPIO_WritePin>

resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 800d69c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d6a0:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800d8b0 <ADC_READ+0x8d8>
 800d6a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6a8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800d6ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d6b0:	eddf 6a80 	vldr	s13, [pc, #512]	@ 800d8b4 <ADC_READ+0x8dc>
 800d6b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d6b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 800d6bc:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 800d8b8 <ADC_READ+0x8e0>
 800d6c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d6c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6cc:	db50      	blt.n	800d770 <ADC_READ+0x798>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 800d6ce:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 800d8bc <ADC_READ+0x8e4>
 800d6d2:	eef1 7a67 	vneg.f32	s15, s15
 800d6d6:	ee17 3a90 	vmov	r3, s15
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fe ff44 	bl	800c568 <__aeabi_f2d>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	460d      	mov	r5, r1
 800d6e4:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800d8bc <ADC_READ+0x8e4>
 800d6e8:	eddf 7a74 	vldr	s15, [pc, #464]	@ 800d8bc <ADC_READ+0x8e4>
 800d6ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6f0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 800d8c0 <ADC_READ+0x8e8>
 800d6f4:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800d6f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d6fc:	eddf 5a6e 	vldr	s11, [pc, #440]	@ 800d8b8 <ADC_READ+0x8e0>
 800d700:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 800d704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d708:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800d70c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d714:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d718:	ee17 0a90 	vmov	r0, s15
 800d71c:	f7fe ff24 	bl	800c568 <__aeabi_f2d>
 800d720:	4602      	mov	r2, r0
 800d722:	460b      	mov	r3, r1
 800d724:	ec43 2b10 	vmov	d0, r2, r3
 800d728:	f011 fbc2 	bl	801eeb0 <sqrt>
 800d72c:	ec53 2b10 	vmov	r2, r3, d0
 800d730:	4620      	mov	r0, r4
 800d732:	4629      	mov	r1, r5
 800d734:	f7fe fdba 	bl	800c2ac <__adddf3>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4614      	mov	r4, r2
 800d73e:	461d      	mov	r5, r3
 800d740:	eddf 7a5f 	vldr	s15, [pc, #380]	@ 800d8c0 <ADC_READ+0x8e8>
 800d744:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d748:	ee17 0a90 	vmov	r0, s15
 800d74c:	f7fe ff0c 	bl	800c568 <__aeabi_f2d>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4620      	mov	r0, r4
 800d756:	4629      	mov	r1, r5
 800d758:	f7ff f888 	bl	800c86c <__aeabi_ddiv>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	4610      	mov	r0, r2
 800d762:	4619      	mov	r1, r3
 800d764:	f7ff fa30 	bl	800cbc8 <__aeabi_d2f>
 800d768:	4603      	mov	r3, r0
 800d76a:	4a56      	ldr	r2, [pc, #344]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d76c:	6013      	str	r3, [r2, #0]
 800d76e:	e017      	b.n	800d7a0 <ADC_READ+0x7c8>
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 800d770:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800d8b8 <ADC_READ+0x8e0>
 800d774:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d77c:	ee17 0a90 	vmov	r0, s15
 800d780:	f7fe fef2 	bl	800c568 <__aeabi_f2d>
 800d784:	a342      	add	r3, pc, #264	@ (adr r3, 800d890 <ADC_READ+0x8b8>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f7ff f86f 	bl	800c86c <__aeabi_ddiv>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	4610      	mov	r0, r2
 800d794:	4619      	mov	r1, r3
 800d796:	f7ff fa17 	bl	800cbc8 <__aeabi_d2f>
 800d79a:	4603      	mov	r3, r0
 800d79c:	4a49      	ldr	r2, [pc, #292]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d79e:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9] )
 800d7a0:	7cfa      	ldrb	r2, [r7, #19]
 800d7a2:	4b3d      	ldr	r3, [pc, #244]	@ (800d898 <ADC_READ+0x8c0>)
 800d7a4:	7a5b      	ldrb	r3, [r3, #9]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d10e      	bne.n	800d7c8 <ADC_READ+0x7f0>
{
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 1); // Toggle LED for visual feedback
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d7b0:	4845      	ldr	r0, [pc, #276]	@ (800d8c8 <ADC_READ+0x8f0>)
 800d7b2:	f004 fa9f 	bl	8011cf4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800d7b6:	2001      	movs	r0, #1
 800d7b8:	f003 fed8 	bl	801156c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 0);
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d7c2:	4841      	ldr	r0, [pc, #260]	@ (800d8c8 <ADC_READ+0x8f0>)
 800d7c4:	f004 fa96 	bl	8011cf4 <HAL_GPIO_WritePin>
HAL_Delay(20);
#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d7ce:	4837      	ldr	r0, [pc, #220]	@ (800d8ac <ADC_READ+0x8d4>)
 800d7d0:	f004 fa90 	bl	8011cf4 <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 800d7d4:	4b30      	ldr	r3, [pc, #192]	@ (800d898 <ADC_READ+0x8c0>)
 800d7d6:	2221      	movs	r2, #33	@ 0x21
 800d7d8:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 800d7da:	4b2f      	ldr	r3, [pc, #188]	@ (800d898 <ADC_READ+0x8c0>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	705a      	strb	r2, [r3, #1]

HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 2, 0xFFFF);
 800d7e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7e4:	2202      	movs	r2, #2
 800d7e6:	492c      	ldr	r1, [pc, #176]	@ (800d898 <ADC_READ+0x8c0>)
 800d7e8:	482c      	ldr	r0, [pc, #176]	@ (800d89c <ADC_READ+0x8c4>)
 800d7ea:	f00b fb27 	bl	8018e3c <HAL_SPI_Transmit>
//HAL_Delay(1);
HAL_SPI_Receive(&hspi2, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800d7ee:	f107 010b 	add.w	r1, r7, #11
 800d7f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4828      	ldr	r0, [pc, #160]	@ (800d89c <ADC_READ+0x8c4>)
 800d7fa:	f00b fd35 	bl	8019268 <HAL_SPI_Receive>
//HAL_Delay(1);

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800d7fe:	2201      	movs	r2, #1
 800d800:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d804:	4829      	ldr	r0, [pc, #164]	@ (800d8ac <ADC_READ+0x8d4>)
 800d806:	f004 fa75 	bl	8011cf4 <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 800d80a:	7afb      	ldrb	r3, [r7, #11]
 800d80c:	4618      	mov	r0, r3
 800d80e:	f000 fa4f 	bl	800dcb0 <wire_break>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00e      	beq.n	800d836 <ADC_READ+0x85e>
{
	wirestatus=0;
 800d818:	2300      	movs	r3, #0
 800d81a:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800d81c:	4b29      	ldr	r3, [pc, #164]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d81e:	f04f 0200 	mov.w	r2, #0
 800d822:	601a      	str	r2, [r3, #0]
	adchex=0;
 800d824:	2300      	movs	r3, #0
 800d826:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 800d82a:	2214      	movs	r2, #20
 800d82c:	2100      	movs	r1, #0
 800d82e:	481c      	ldr	r0, [pc, #112]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d830:	f00f fa45 	bl	801ccbe <memset>
 800d834:	e015      	b.n	800d862 <ADC_READ+0x88a>
}
else if(check_sensor_validity(adchex))
 800d836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 fa20 	bl	800dc80 <check_sensor_validity>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00d      	beq.n	800d862 <ADC_READ+0x88a>
{
	wirestatus=0;
 800d846:	2300      	movs	r3, #0
 800d848:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800d84a:	4b1e      	ldr	r3, [pc, #120]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d84c:	f04f 0200 	mov.w	r2, #0
 800d850:	601a      	str	r2, [r3, #0]
	adchex =0;
 800d852:	2300      	movs	r3, #0
 800d854:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 800d858:	2214      	movs	r2, #20
 800d85a:	2100      	movs	r1, #0
 800d85c:	4810      	ldr	r0, [pc, #64]	@ (800d8a0 <ADC_READ+0x8c8>)
 800d85e:	f00f fa2e 	bl	801ccbe <memset>
}
wirestatus=0;
 800d862:	2300      	movs	r3, #0
 800d864:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 800d866:	79f9      	ldrb	r1, [r7, #7]
 800d868:	79bb      	ldrb	r3, [r7, #6]
 800d86a:	4a16      	ldr	r2, [pc, #88]	@ (800d8c4 <ADC_READ+0x8ec>)
 800d86c:	6812      	ldr	r2, [r2, #0]
 800d86e:	4817      	ldr	r0, [pc, #92]	@ (800d8cc <ADC_READ+0x8f4>)
 800d870:	0089      	lsls	r1, r1, #2
 800d872:	440b      	add	r3, r1
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	4403      	add	r3, r0
 800d878:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 800d87a:	79fa      	ldrb	r2, [r7, #7]
 800d87c:	79bb      	ldrb	r3, [r7, #6]
 800d87e:	4914      	ldr	r1, [pc, #80]	@ (800d8d0 <ADC_READ+0x8f8>)
 800d880:	0092      	lsls	r2, r2, #2
 800d882:	4413      	add	r3, r2
 800d884:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d888:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 800d88c:	e1ea      	b.n	800dc64 <ADC_READ+0xc8c>
 800d88e:	bf00      	nop
 800d890:	0a3d70a4 	.word	0x0a3d70a4
 800d894:	3fd8a3d7 	.word	0x3fd8a3d7
 800d898:	200002ac 	.word	0x200002ac
 800d89c:	20005720 	.word	0x20005720
 800d8a0:	200002e4 	.word	0x200002e4
 800d8a4:	cccccccd 	.word	0xcccccccd
 800d8a8:	40240000 	.word	0x40240000
 800d8ac:	42020400 	.word	0x42020400
 800d8b0:	44fa0000 	.word	0x44fa0000
 800d8b4:	477fff00 	.word	0x477fff00
 800d8b8:	42c80000 	.word	0x42c80000
 800d8bc:	3b801132 	.word	0x3b801132
 800d8c0:	b51b057f 	.word	0xb51b057f
 800d8c4:	200002cc 	.word	0x200002cc
 800d8c8:	42021000 	.word	0x42021000
 800d8cc:	20000310 	.word	0x20000310
 800d8d0:	20000340 	.word	0x20000340

case ADC_3:

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	2110      	movs	r1, #16
 800d8d8:	48bd      	ldr	r0, [pc, #756]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d8da:	f004 fa0b 	bl	8011cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d8e4:	48bb      	ldr	r0, [pc, #748]	@ (800dbd4 <ADC_READ+0xbfc>)
 800d8e6:	f004 fa05 	bl	8011cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d8f0:	48b8      	ldr	r0, [pc, #736]	@ (800dbd4 <ADC_READ+0xbfc>)
 800d8f2:	f004 f9ff 	bl	8011cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d8fc:	48b5      	ldr	r0, [pc, #724]	@ (800dbd4 <ADC_READ+0xbfc>)
 800d8fe:	f004 f9f9 	bl	8011cf4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800d902:	2200      	movs	r2, #0
 800d904:	2110      	movs	r1, #16
 800d906:	48b2      	ldr	r0, [pc, #712]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d908:	f004 f9f4 	bl	8011cf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 800d90c:	f04f 33ff 	mov.w	r3, #4294967295
 800d910:	2213      	movs	r2, #19
 800d912:	49b1      	ldr	r1, [pc, #708]	@ (800dbd8 <ADC_READ+0xc00>)
 800d914:	48b1      	ldr	r0, [pc, #708]	@ (800dbdc <ADC_READ+0xc04>)
 800d916:	f00b fa91 	bl	8018e3c <HAL_SPI_Transmit>
	HAL_Delay(1);
 800d91a:	2001      	movs	r0, #1
 800d91c:	f003 fe26 	bl	801156c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800d920:	2201      	movs	r2, #1
 800d922:	2110      	movs	r1, #16
 800d924:	48aa      	ldr	r0, [pc, #680]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d926:	f004 f9e5 	bl	8011cf4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 800d92a:	2201      	movs	r2, #1
 800d92c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d930:	48a8      	ldr	r0, [pc, #672]	@ (800dbd4 <ADC_READ+0xbfc>)
 800d932:	f004 f9df 	bl	8011cf4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800d936:	2001      	movs	r0, #1
 800d938:	f003 fe18 	bl	801156c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800d93c:	2200      	movs	r2, #0
 800d93e:	2110      	movs	r1, #16
 800d940:	48a3      	ldr	r0, [pc, #652]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d942:	f004 f9d7 	bl	8011cf4 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x19;
 800d946:	4ba4      	ldr	r3, [pc, #656]	@ (800dbd8 <ADC_READ+0xc00>)
 800d948:	2219      	movs	r2, #25
 800d94a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 800d94c:	f04f 33ff 	mov.w	r3, #4294967295
 800d950:	2201      	movs	r2, #1
 800d952:	49a1      	ldr	r1, [pc, #644]	@ (800dbd8 <ADC_READ+0xc00>)
 800d954:	48a1      	ldr	r0, [pc, #644]	@ (800dbdc <ADC_READ+0xc04>)
 800d956:	f00b fa71 	bl	8018e3c <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800d95a:	2201      	movs	r2, #1
 800d95c:	2110      	movs	r1, #16
 800d95e:	489c      	ldr	r0, [pc, #624]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d960:	f004 f9c8 	bl	8011cf4 <HAL_GPIO_WritePin>

	HAL_Delay(wait_time);
 800d964:	4b9e      	ldr	r3, [pc, #632]	@ (800dbe0 <ADC_READ+0xc08>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4618      	mov	r0, r3
 800d96a:	f003 fdff 	bl	801156c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800d96e:	2200      	movs	r2, #0
 800d970:	2110      	movs	r1, #16
 800d972:	4897      	ldr	r0, [pc, #604]	@ (800dbd0 <ADC_READ+0xbf8>)
 800d974:	f004 f9be 	bl	8011cf4 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x13;
 800d978:	4b97      	ldr	r3, [pc, #604]	@ (800dbd8 <ADC_READ+0xc00>)
 800d97a:	2213      	movs	r2, #19
 800d97c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 800d97e:	2300      	movs	r3, #0
 800d980:	637b      	str	r3, [r7, #52]	@ 0x34
 800d982:	e035      	b.n	800d9f0 <ADC_READ+0xa18>
	{
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFFFF);
 800d984:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d988:	2201      	movs	r2, #1
 800d98a:	4993      	ldr	r1, [pc, #588]	@ (800dbd8 <ADC_READ+0xc00>)
 800d98c:	4893      	ldr	r0, [pc, #588]	@ (800dbdc <ADC_READ+0xc04>)
 800d98e:	f00b fa55 	bl	8018e3c <HAL_SPI_Transmit>
		HAL_Delay(1);
 800d992:	2001      	movs	r0, #1
 800d994:	f003 fdea 	bl	801156c <HAL_Delay>
		HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3[i], 0x2, 0xFFFF);
 800d998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	4a91      	ldr	r2, [pc, #580]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d99e:	1899      	adds	r1, r3, r2
 800d9a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	488d      	ldr	r0, [pc, #564]	@ (800dbdc <ADC_READ+0xc04>)
 800d9a8:	f00b fc5e 	bl	8019268 <HAL_SPI_Receive>
		HAL_Delay(1);
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	f003 fddd 	bl	801156c <HAL_Delay>
		// Byte-wise flip
		reg_data_ADC_3[i] = (reg_data_ADC_3[i] >> 8) | (reg_data_ADC_3[i] << 8);
 800d9b2:	4a8c      	ldr	r2, [pc, #560]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9ba:	0a1b      	lsrs	r3, r3, #8
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	b21a      	sxth	r2, r3
 800d9c0:	4988      	ldr	r1, [pc, #544]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d9c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d9c8:	021b      	lsls	r3, r3, #8
 800d9ca:	b21b      	sxth	r3, r3
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	b21b      	sxth	r3, r3
 800d9d0:	b299      	uxth	r1, r3
 800d9d2:	4a84      	ldr	r2, [pc, #528]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if(diff_count > 5) sum =0;
	diff_count=0;
#else

	sum += reg_data_ADC_3[i];  // Add to sum for averaging
 800d9da:	4a82      	ldr	r2, [pc, #520]	@ (800dbe4 <ADC_READ+0xc0c>)
 800d9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9e6:	4413      	add	r3, r2
 800d9e8:	647b      	str	r3, [r7, #68]	@ 0x44
	for (int i = 0; i < 10; i++)
 800d9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9f2:	2b09      	cmp	r3, #9
 800d9f4:	ddc6      	ble.n	800d984 <ADC_READ+0x9ac>
}
#endif
adchex = sum / 10;
 800d9f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9f8:	4a7b      	ldr	r2, [pc, #492]	@ (800dbe8 <ADC_READ+0xc10>)
 800d9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d9fe:	08db      	lsrs	r3, r3, #3
 800da00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 800da04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800da06:	f7fe fd8d 	bl	800c524 <__aeabi_ui2d>
 800da0a:	f04f 0200 	mov.w	r2, #0
 800da0e:	4b77      	ldr	r3, [pc, #476]	@ (800dbec <ADC_READ+0xc14>)
 800da10:	f7fe ff2c 	bl	800c86c <__aeabi_ddiv>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4610      	mov	r0, r2
 800da1a:	4619      	mov	r1, r3
 800da1c:	f7ff f8d4 	bl	800cbc8 <__aeabi_d2f>
 800da20:	4603      	mov	r3, r0
 800da22:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800da24:	2201      	movs	r2, #1
 800da26:	2110      	movs	r1, #16
 800da28:	4869      	ldr	r0, [pc, #420]	@ (800dbd0 <ADC_READ+0xbf8>)
 800da2a:	f004 f963 	bl	8011cf4 <HAL_GPIO_WritePin>
resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 800da2e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800da32:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800dbf0 <ADC_READ+0xc18>
 800da36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da3a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800da3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800da42:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 800dbf4 <ADC_READ+0xc1c>
 800da46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da4a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 800da4e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800dbf8 <ADC_READ+0xc20>
 800da52:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800da56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5e:	db50      	blt.n	800db02 <ADC_READ+0xb2a>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 800da60:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800dbfc <ADC_READ+0xc24>
 800da64:	eef1 7a67 	vneg.f32	s15, s15
 800da68:	ee17 3a90 	vmov	r3, s15
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fe fd7b 	bl	800c568 <__aeabi_f2d>
 800da72:	4604      	mov	r4, r0
 800da74:	460d      	mov	r5, r1
 800da76:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 800dbfc <ADC_READ+0xc24>
 800da7a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 800dbfc <ADC_READ+0xc24>
 800da7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dc00 <ADC_READ+0xc28>
 800da86:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800da8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800da8e:	eddf 5a5a 	vldr	s11, [pc, #360]	@ 800dbf8 <ADC_READ+0xc20>
 800da92:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 800da96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da9a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800da9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800daa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800daa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daaa:	ee17 0a90 	vmov	r0, s15
 800daae:	f7fe fd5b 	bl	800c568 <__aeabi_f2d>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	ec43 2b10 	vmov	d0, r2, r3
 800daba:	f011 f9f9 	bl	801eeb0 <sqrt>
 800dabe:	ec53 2b10 	vmov	r2, r3, d0
 800dac2:	4620      	mov	r0, r4
 800dac4:	4629      	mov	r1, r5
 800dac6:	f7fe fbf1 	bl	800c2ac <__adddf3>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4614      	mov	r4, r2
 800dad0:	461d      	mov	r5, r3
 800dad2:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800dc00 <ADC_READ+0xc28>
 800dad6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dada:	ee17 0a90 	vmov	r0, s15
 800dade:	f7fe fd43 	bl	800c568 <__aeabi_f2d>
 800dae2:	4602      	mov	r2, r0
 800dae4:	460b      	mov	r3, r1
 800dae6:	4620      	mov	r0, r4
 800dae8:	4629      	mov	r1, r5
 800daea:	f7fe febf 	bl	800c86c <__aeabi_ddiv>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	4610      	mov	r0, r2
 800daf4:	4619      	mov	r1, r3
 800daf6:	f7ff f867 	bl	800cbc8 <__aeabi_d2f>
 800dafa:	4603      	mov	r3, r0
 800dafc:	4a41      	ldr	r2, [pc, #260]	@ (800dc04 <ADC_READ+0xc2c>)
 800dafe:	6013      	str	r3, [r2, #0]
 800db00:	e017      	b.n	800db32 <ADC_READ+0xb5a>
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 800db02:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800dbf8 <ADC_READ+0xc20>
 800db06:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800db0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db0e:	ee17 0a90 	vmov	r0, s15
 800db12:	f7fe fd29 	bl	800c568 <__aeabi_f2d>
 800db16:	a32c      	add	r3, pc, #176	@ (adr r3, 800dbc8 <ADC_READ+0xbf0>)
 800db18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1c:	f7fe fea6 	bl	800c86c <__aeabi_ddiv>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4610      	mov	r0, r2
 800db26:	4619      	mov	r1, r3
 800db28:	f7ff f84e 	bl	800cbc8 <__aeabi_d2f>
 800db2c:	4603      	mov	r3, r0
 800db2e:	4a35      	ldr	r2, [pc, #212]	@ (800dc04 <ADC_READ+0xc2c>)
 800db30:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9])
 800db32:	7cfa      	ldrb	r2, [r7, #19]
 800db34:	4b28      	ldr	r3, [pc, #160]	@ (800dbd8 <ADC_READ+0xc00>)
 800db36:	7a5b      	ldrb	r3, [r3, #9]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d10e      	bne.n	800db5a <ADC_READ+0xb82>
{
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 1); // Toggle LED for visual feedback
 800db3c:	2201      	movs	r2, #1
 800db3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800db42:	4831      	ldr	r0, [pc, #196]	@ (800dc08 <ADC_READ+0xc30>)
 800db44:	f004 f8d6 	bl	8011cf4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800db48:	2001      	movs	r0, #1
 800db4a:	f003 fd0f 	bl	801156c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 0);
 800db4e:	2200      	movs	r2, #0
 800db50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800db54:	482c      	ldr	r0, [pc, #176]	@ (800dc08 <ADC_READ+0xc30>)
 800db56:	f004 f8cd 	bl	8011cf4 <HAL_GPIO_WritePin>

#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800db5a:	2200      	movs	r2, #0
 800db5c:	2110      	movs	r1, #16
 800db5e:	481c      	ldr	r0, [pc, #112]	@ (800dbd0 <ADC_READ+0xbf8>)
 800db60:	f004 f8c8 	bl	8011cf4 <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 800db64:	4b1c      	ldr	r3, [pc, #112]	@ (800dbd8 <ADC_READ+0xc00>)
 800db66:	2221      	movs	r2, #33	@ 0x21
 800db68:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 800db6a:	4b1b      	ldr	r3, [pc, #108]	@ (800dbd8 <ADC_READ+0xc00>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	705a      	strb	r2, [r3, #1]
HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 2, 0xFFFF);
 800db70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db74:	2202      	movs	r2, #2
 800db76:	4918      	ldr	r1, [pc, #96]	@ (800dbd8 <ADC_READ+0xc00>)
 800db78:	4818      	ldr	r0, [pc, #96]	@ (800dbdc <ADC_READ+0xc04>)
 800db7a:	f00b f95f 	bl	8018e3c <HAL_SPI_Transmit>

HAL_SPI_Receive(&hspi3, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800db7e:	f107 010b 	add.w	r1, r7, #11
 800db82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db86:	2201      	movs	r2, #1
 800db88:	4814      	ldr	r0, [pc, #80]	@ (800dbdc <ADC_READ+0xc04>)
 800db8a:	f00b fb6d 	bl	8019268 <HAL_SPI_Receive>
HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800db8e:	2201      	movs	r2, #1
 800db90:	2110      	movs	r1, #16
 800db92:	480f      	ldr	r0, [pc, #60]	@ (800dbd0 <ADC_READ+0xbf8>)
 800db94:	f004 f8ae 	bl	8011cf4 <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 800db98:	7afb      	ldrb	r3, [r7, #11]
 800db9a:	4618      	mov	r0, r3
 800db9c:	f000 f888 	bl	800dcb0 <wire_break>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d032      	beq.n	800dc0c <ADC_READ+0xc34>
{
	wirestatus=0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800dbaa:	4b16      	ldr	r3, [pc, #88]	@ (800dc04 <ADC_READ+0xc2c>)
 800dbac:	f04f 0200 	mov.w	r2, #0
 800dbb0:	601a      	str	r2, [r3, #0]
	adchex=0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 800dbb8:	2214      	movs	r2, #20
 800dbba:	2100      	movs	r1, #0
 800dbbc:	4809      	ldr	r0, [pc, #36]	@ (800dbe4 <ADC_READ+0xc0c>)
 800dbbe:	f00f f87e 	bl	801ccbe <memset>
 800dbc2:	e039      	b.n	800dc38 <ADC_READ+0xc60>
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	0a3d70a4 	.word	0x0a3d70a4
 800dbcc:	3fd8a3d7 	.word	0x3fd8a3d7
 800dbd0:	42020c00 	.word	0x42020c00
 800dbd4:	42020000 	.word	0x42020000
 800dbd8:	200002ac 	.word	0x200002ac
 800dbdc:	200057b0 	.word	0x200057b0
 800dbe0:	20000000 	.word	0x20000000
 800dbe4:	200002f8 	.word	0x200002f8
 800dbe8:	cccccccd 	.word	0xcccccccd
 800dbec:	40240000 	.word	0x40240000
 800dbf0:	44fa0000 	.word	0x44fa0000
 800dbf4:	477fff00 	.word	0x477fff00
 800dbf8:	42c80000 	.word	0x42c80000
 800dbfc:	3b801132 	.word	0x3b801132
 800dc00:	b51b057f 	.word	0xb51b057f
 800dc04:	200002cc 	.word	0x200002cc
 800dc08:	42021000 	.word	0x42021000
}
else if(check_sensor_validity(adchex))
 800dc0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 f835 	bl	800dc80 <check_sensor_validity>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00d      	beq.n	800dc38 <ADC_READ+0xc60>
{
	wirestatus=0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800dc20:	4b13      	ldr	r3, [pc, #76]	@ (800dc70 <ADC_READ+0xc98>)
 800dc22:	f04f 0200 	mov.w	r2, #0
 800dc26:	601a      	str	r2, [r3, #0]
	adchex =0;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 800dc2e:	2214      	movs	r2, #20
 800dc30:	2100      	movs	r1, #0
 800dc32:	4810      	ldr	r0, [pc, #64]	@ (800dc74 <ADC_READ+0xc9c>)
 800dc34:	f00f f843 	bl	801ccbe <memset>
}
wirestatus=0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 800dc3c:	79f9      	ldrb	r1, [r7, #7]
 800dc3e:	79bb      	ldrb	r3, [r7, #6]
 800dc40:	4a0b      	ldr	r2, [pc, #44]	@ (800dc70 <ADC_READ+0xc98>)
 800dc42:	6812      	ldr	r2, [r2, #0]
 800dc44:	480c      	ldr	r0, [pc, #48]	@ (800dc78 <ADC_READ+0xca0>)
 800dc46:	0089      	lsls	r1, r1, #2
 800dc48:	440b      	add	r3, r1
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4403      	add	r3, r0
 800dc4e:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 800dc50:	79fa      	ldrb	r2, [r7, #7]
 800dc52:	79bb      	ldrb	r3, [r7, #6]
 800dc54:	4909      	ldr	r1, [pc, #36]	@ (800dc7c <ADC_READ+0xca4>)
 800dc56:	0092      	lsls	r2, r2, #2
 800dc58:	4413      	add	r3, r2
 800dc5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dc5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 800dc62:	bf00      	nop
}
//	return sensor_value;
return 0;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3748      	adds	r7, #72	@ 0x48
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	200002cc 	.word	0x200002cc
 800dc74:	200002f8 	.word	0x200002f8
 800dc78:	20000310 	.word	0x20000310
 800dc7c:	20000340 	.word	0x20000340

0800dc80 <check_sensor_validity>:
	check_channel = 0 ;
}
#endif

uint8_t check_sensor_validity(uint16_t data)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	4603      	mov	r3, r0
 800dc88:	80fb      	strh	r3, [r7, #6]

	if(data<ADC_MIN_VAL || data>ADC_MAX_VAL)
 800dc8a:	88fb      	ldrh	r3, [r7, #6]
 800dc8c:	f242 32d6 	movw	r2, #9174	@ 0x23d6
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d904      	bls.n	800dc9e <check_sensor_validity+0x1e>
 800dc94:	88fb      	ldrh	r3, [r7, #6]
 800dc96:	f246 6266 	movw	r2, #26214	@ 0x6666
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d901      	bls.n	800dca2 <check_sensor_validity+0x22>
		return 1 ;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e000      	b.n	800dca4 <check_sensor_validity+0x24>

	else
		return 0 ;
 800dca2:	2300      	movs	r3, #0
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <wire_break>:

uint8_t wire_break(uint8_t flag)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	71fb      	strb	r3, [r7, #7]
	uint8_t FL_REF =0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	73fb      	strb	r3, [r7, #15]

	if(txd_buf[7] == 0xC2)//0xC2
 800dcbe:	4b1b      	ldr	r3, [pc, #108]	@ (800dd2c <wire_break+0x7c>)
 800dcc0:	79db      	ldrb	r3, [r3, #7]
 800dcc2:	2bc2      	cmp	r3, #194	@ 0xc2
 800dcc4:	d102      	bne.n	800dccc <wire_break+0x1c>
	{
		FL_REF= 1;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	73fb      	strb	r3, [r7, #15]
 800dcca:	e008      	b.n	800dcde <wire_break+0x2e>
	}
	else if(txd_buf[7] == 0x82)//0x82
 800dccc:	4b17      	ldr	r3, [pc, #92]	@ (800dd2c <wire_break+0x7c>)
 800dcce:	79db      	ldrb	r3, [r3, #7]
 800dcd0:	2b82      	cmp	r3, #130	@ 0x82
 800dcd2:	d102      	bne.n	800dcda <wire_break+0x2a>
	{
		FL_REF= 2;
 800dcd4:	2302      	movs	r3, #2
 800dcd6:	73fb      	strb	r3, [r7, #15]
 800dcd8:	e001      	b.n	800dcde <wire_break+0x2e>
	}
	else
	{
		FL_REF=0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	73fb      	strb	r3, [r7, #15]
	}

	switch(FL_REF)
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d002      	beq.n	800dcea <wire_break+0x3a>
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	d00a      	beq.n	800dcfe <wire_break+0x4e>
 800dce8:	e013      	b.n	800dd12 <wire_break+0x62>
	{
	case 1:
		if(0x01 == flag)  //0x29 w/o interface card :  0x01  with interface card
 800dcea:	79fb      	ldrb	r3, [r7, #7]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d101      	bne.n	800dcf4 <wire_break+0x44>
			return 1;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e014      	b.n	800dd1e <wire_break+0x6e>

		else if(0x00 == flag) //0x00 w/o interface card :  0x00  with interface card
 800dcf4:	79fb      	ldrb	r3, [r7, #7]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10d      	bne.n	800dd16 <wire_break+0x66>
			return 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e00f      	b.n	800dd1e <wire_break+0x6e>

		break;
	case 2:
		if(0x3 == flag) //0x2b w/o interface card :  0x03  with interface card
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
 800dd00:	2b03      	cmp	r3, #3
 800dd02:	d101      	bne.n	800dd08 <wire_break+0x58>
			return 1;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e00a      	b.n	800dd1e <wire_break+0x6e>

		else if(0x2 == flag) //0x2 w/o interface card :  0x02  with interface card
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	2b02      	cmp	r3, #2
 800dd0c:	d105      	bne.n	800dd1a <wire_break+0x6a>
			return 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e005      	b.n	800dd1e <wire_break+0x6e>

		break;
	default:
		return 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	e003      	b.n	800dd1e <wire_break+0x6e>
		break;
 800dd16:	bf00      	nop
 800dd18:	e000      	b.n	800dd1c <wire_break+0x6c>
		break;
 800dd1a:	bf00      	nop
		break;
	}
	return 0;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	200002ac 	.word	0x200002ac

0800dd30 <ATP_operation>:

void ATP_operation();


void ATP_operation()
{
 800dd30:	b5b0      	push	{r4, r5, r7, lr}
 800dd32:	b088      	sub	sp, #32
 800dd34:	af04      	add	r7, sp, #16
	HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 800dd36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800dd3a:	48a3      	ldr	r0, [pc, #652]	@ (800dfc8 <ATP_operation+0x298>)
 800dd3c:	f003 fff2 	bl	8011d24 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 800dd40:	20c8      	movs	r0, #200	@ 0xc8
 800dd42:	f003 fc13 	bl	801156c <HAL_Delay>
	//ATP_test = 1;
	if(ATP_test)
 800dd46:	4ba1      	ldr	r3, [pc, #644]	@ (800dfcc <ATP_operation+0x29c>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f000 8686 	beq.w	800ea5c <ATP_operation+0xd2c>
	{
		ATP_test = 0 ;
 800dd50:	4b9e      	ldr	r3, [pc, #632]	@ (800dfcc <ATP_operation+0x29c>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	701a      	strb	r2, [r3, #0]

		if (strstr(command_str, test_nbr_1))
 800dd56:	4b9e      	ldr	r3, [pc, #632]	@ (800dfd0 <ATP_operation+0x2a0>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	489d      	ldr	r0, [pc, #628]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dd5e:	f00e ffb6 	bl	801ccce <strstr>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d003      	beq.n	800dd70 <ATP_operation+0x40>
		{
			ATP_test_number = POWER_CTRL_1;
 800dd68:	4b9b      	ldr	r3, [pc, #620]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	701a      	strb	r2, [r3, #0]
 800dd6e:	e1e6      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_2))
 800dd70:	4b9a      	ldr	r3, [pc, #616]	@ (800dfdc <ATP_operation+0x2ac>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4619      	mov	r1, r3
 800dd76:	4897      	ldr	r0, [pc, #604]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dd78:	f00e ffa9 	bl	801ccce <strstr>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d003      	beq.n	800dd8a <ATP_operation+0x5a>
		{
			ATP_test_number = POWER_CTRL_2;
 800dd82:	4b95      	ldr	r3, [pc, #596]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dd84:	2202      	movs	r2, #2
 800dd86:	701a      	strb	r2, [r3, #0]
 800dd88:	e1d9      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_3))
 800dd8a:	4b95      	ldr	r3, [pc, #596]	@ (800dfe0 <ATP_operation+0x2b0>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	4890      	ldr	r0, [pc, #576]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dd92:	f00e ff9c 	bl	801ccce <strstr>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d003      	beq.n	800dda4 <ATP_operation+0x74>
		{
			ATP_test_number = INPUT_GPIO_1;
 800dd9c:	4b8e      	ldr	r3, [pc, #568]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dd9e:	2203      	movs	r2, #3
 800dda0:	701a      	strb	r2, [r3, #0]
 800dda2:	e1cc      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_4))
 800dda4:	4b8f      	ldr	r3, [pc, #572]	@ (800dfe4 <ATP_operation+0x2b4>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4619      	mov	r1, r3
 800ddaa:	488a      	ldr	r0, [pc, #552]	@ (800dfd4 <ATP_operation+0x2a4>)
 800ddac:	f00e ff8f 	bl	801ccce <strstr>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d003      	beq.n	800ddbe <ATP_operation+0x8e>
		{
			ATP_test_number = INPUT_GPIO_2;
 800ddb6:	4b88      	ldr	r3, [pc, #544]	@ (800dfd8 <ATP_operation+0x2a8>)
 800ddb8:	2204      	movs	r2, #4
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e1bf      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_5))
 800ddbe:	4b8a      	ldr	r3, [pc, #552]	@ (800dfe8 <ATP_operation+0x2b8>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	4883      	ldr	r0, [pc, #524]	@ (800dfd4 <ATP_operation+0x2a4>)
 800ddc6:	f00e ff82 	bl	801ccce <strstr>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d003      	beq.n	800ddd8 <ATP_operation+0xa8>
		{
			ATP_test_number = INPUT_GPIO_3;
 800ddd0:	4b81      	ldr	r3, [pc, #516]	@ (800dfd8 <ATP_operation+0x2a8>)
 800ddd2:	2205      	movs	r2, #5
 800ddd4:	701a      	strb	r2, [r3, #0]
 800ddd6:	e1b2      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_6))
 800ddd8:	4b84      	ldr	r3, [pc, #528]	@ (800dfec <ATP_operation+0x2bc>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4619      	mov	r1, r3
 800ddde:	487d      	ldr	r0, [pc, #500]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dde0:	f00e ff75 	bl	801ccce <strstr>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d003      	beq.n	800ddf2 <ATP_operation+0xc2>
		{
			ATP_test_number = INPUT_GPIO_4;
 800ddea:	4b7b      	ldr	r3, [pc, #492]	@ (800dfd8 <ATP_operation+0x2a8>)
 800ddec:	2206      	movs	r2, #6
 800ddee:	701a      	strb	r2, [r3, #0]
 800ddf0:	e1a5      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_7))
 800ddf2:	4b7f      	ldr	r3, [pc, #508]	@ (800dff0 <ATP_operation+0x2c0>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4876      	ldr	r0, [pc, #472]	@ (800dfd4 <ATP_operation+0x2a4>)
 800ddfa:	f00e ff68 	bl	801ccce <strstr>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d003      	beq.n	800de0c <ATP_operation+0xdc>
		{
			ATP_test_number = INPUT_GPIO_5;
 800de04:	4b74      	ldr	r3, [pc, #464]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de06:	2207      	movs	r2, #7
 800de08:	701a      	strb	r2, [r3, #0]
 800de0a:	e198      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_8))
 800de0c:	4b79      	ldr	r3, [pc, #484]	@ (800dff4 <ATP_operation+0x2c4>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4619      	mov	r1, r3
 800de12:	4870      	ldr	r0, [pc, #448]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de14:	f00e ff5b 	bl	801ccce <strstr>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d003      	beq.n	800de26 <ATP_operation+0xf6>
		{
			ATP_test_number = OUTPUT_GPIO_1;
 800de1e:	4b6e      	ldr	r3, [pc, #440]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de20:	2208      	movs	r2, #8
 800de22:	701a      	strb	r2, [r3, #0]
 800de24:	e18b      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_9))
 800de26:	4b74      	ldr	r3, [pc, #464]	@ (800dff8 <ATP_operation+0x2c8>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4619      	mov	r1, r3
 800de2c:	4869      	ldr	r0, [pc, #420]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de2e:	f00e ff4e 	bl	801ccce <strstr>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d003      	beq.n	800de40 <ATP_operation+0x110>
		{
			ATP_test_number = OUTPUT_GPIO_2;
 800de38:	4b67      	ldr	r3, [pc, #412]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de3a:	2209      	movs	r2, #9
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	e17e      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_10))
 800de40:	4b6e      	ldr	r3, [pc, #440]	@ (800dffc <ATP_operation+0x2cc>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4619      	mov	r1, r3
 800de46:	4863      	ldr	r0, [pc, #396]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de48:	f00e ff41 	bl	801ccce <strstr>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d003      	beq.n	800de5a <ATP_operation+0x12a>
		{
			ATP_test_number = TS_1;
 800de52:	4b61      	ldr	r3, [pc, #388]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de54:	220a      	movs	r2, #10
 800de56:	701a      	strb	r2, [r3, #0]
 800de58:	e171      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_11))
 800de5a:	4b69      	ldr	r3, [pc, #420]	@ (800e000 <ATP_operation+0x2d0>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4619      	mov	r1, r3
 800de60:	485c      	ldr	r0, [pc, #368]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de62:	f00e ff34 	bl	801ccce <strstr>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d003      	beq.n	800de74 <ATP_operation+0x144>
		{
			ATP_test_number = TS_2;
 800de6c:	4b5a      	ldr	r3, [pc, #360]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de6e:	220b      	movs	r2, #11
 800de70:	701a      	strb	r2, [r3, #0]
 800de72:	e164      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_12))
 800de74:	4b63      	ldr	r3, [pc, #396]	@ (800e004 <ATP_operation+0x2d4>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4619      	mov	r1, r3
 800de7a:	4856      	ldr	r0, [pc, #344]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de7c:	f00e ff27 	bl	801ccce <strstr>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d003      	beq.n	800de8e <ATP_operation+0x15e>
		{
			ATP_test_number = TS_3;
 800de86:	4b54      	ldr	r3, [pc, #336]	@ (800dfd8 <ATP_operation+0x2a8>)
 800de88:	220c      	movs	r2, #12
 800de8a:	701a      	strb	r2, [r3, #0]
 800de8c:	e157      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_13))
 800de8e:	4b5e      	ldr	r3, [pc, #376]	@ (800e008 <ATP_operation+0x2d8>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4619      	mov	r1, r3
 800de94:	484f      	ldr	r0, [pc, #316]	@ (800dfd4 <ATP_operation+0x2a4>)
 800de96:	f00e ff1a 	bl	801ccce <strstr>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d003      	beq.n	800dea8 <ATP_operation+0x178>
		{
			ATP_test_number = TS_4;
 800dea0:	4b4d      	ldr	r3, [pc, #308]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dea2:	220d      	movs	r2, #13
 800dea4:	701a      	strb	r2, [r3, #0]
 800dea6:	e14a      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_14))
 800dea8:	4b58      	ldr	r3, [pc, #352]	@ (800e00c <ATP_operation+0x2dc>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4619      	mov	r1, r3
 800deae:	4849      	ldr	r0, [pc, #292]	@ (800dfd4 <ATP_operation+0x2a4>)
 800deb0:	f00e ff0d 	bl	801ccce <strstr>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <ATP_operation+0x192>
		{
			ATP_test_number = TS_5;
 800deba:	4b47      	ldr	r3, [pc, #284]	@ (800dfd8 <ATP_operation+0x2a8>)
 800debc:	220e      	movs	r2, #14
 800debe:	701a      	strb	r2, [r3, #0]
 800dec0:	e13d      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_15))
 800dec2:	4b53      	ldr	r3, [pc, #332]	@ (800e010 <ATP_operation+0x2e0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4619      	mov	r1, r3
 800dec8:	4842      	ldr	r0, [pc, #264]	@ (800dfd4 <ATP_operation+0x2a4>)
 800deca:	f00e ff00 	bl	801ccce <strstr>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d003      	beq.n	800dedc <ATP_operation+0x1ac>
		{
			ATP_test_number = TS_6;
 800ded4:	4b40      	ldr	r3, [pc, #256]	@ (800dfd8 <ATP_operation+0x2a8>)
 800ded6:	220f      	movs	r2, #15
 800ded8:	701a      	strb	r2, [r3, #0]
 800deda:	e130      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_16))
 800dedc:	4b4d      	ldr	r3, [pc, #308]	@ (800e014 <ATP_operation+0x2e4>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4619      	mov	r1, r3
 800dee2:	483c      	ldr	r0, [pc, #240]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dee4:	f00e fef3 	bl	801ccce <strstr>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d003      	beq.n	800def6 <ATP_operation+0x1c6>
		{
			ATP_test_number = TS_7;
 800deee:	4b3a      	ldr	r3, [pc, #232]	@ (800dfd8 <ATP_operation+0x2a8>)
 800def0:	2210      	movs	r2, #16
 800def2:	701a      	strb	r2, [r3, #0]
 800def4:	e123      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_17))
 800def6:	4b48      	ldr	r3, [pc, #288]	@ (800e018 <ATP_operation+0x2e8>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4619      	mov	r1, r3
 800defc:	4835      	ldr	r0, [pc, #212]	@ (800dfd4 <ATP_operation+0x2a4>)
 800defe:	f00e fee6 	bl	801ccce <strstr>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d003      	beq.n	800df10 <ATP_operation+0x1e0>
		{
			ATP_test_number = TS_8;
 800df08:	4b33      	ldr	r3, [pc, #204]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df0a:	2211      	movs	r2, #17
 800df0c:	701a      	strb	r2, [r3, #0]
 800df0e:	e116      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_18))
 800df10:	4b42      	ldr	r3, [pc, #264]	@ (800e01c <ATP_operation+0x2ec>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4619      	mov	r1, r3
 800df16:	482f      	ldr	r0, [pc, #188]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df18:	f00e fed9 	bl	801ccce <strstr>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <ATP_operation+0x1fa>
		{
			ATP_test_number = TS_9;
 800df22:	4b2d      	ldr	r3, [pc, #180]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df24:	2212      	movs	r2, #18
 800df26:	701a      	strb	r2, [r3, #0]
 800df28:	e109      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_19))
 800df2a:	4b3d      	ldr	r3, [pc, #244]	@ (800e020 <ATP_operation+0x2f0>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4619      	mov	r1, r3
 800df30:	4828      	ldr	r0, [pc, #160]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df32:	f00e fecc 	bl	801ccce <strstr>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d003      	beq.n	800df44 <ATP_operation+0x214>
		{
			ATP_test_number = TS_10;
 800df3c:	4b26      	ldr	r3, [pc, #152]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df3e:	2213      	movs	r2, #19
 800df40:	701a      	strb	r2, [r3, #0]
 800df42:	e0fc      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_20))
 800df44:	4b37      	ldr	r3, [pc, #220]	@ (800e024 <ATP_operation+0x2f4>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4619      	mov	r1, r3
 800df4a:	4822      	ldr	r0, [pc, #136]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df4c:	f00e febf 	bl	801ccce <strstr>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d003      	beq.n	800df5e <ATP_operation+0x22e>
		{
			ATP_test_number = TS_11;
 800df56:	4b20      	ldr	r3, [pc, #128]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df58:	2214      	movs	r2, #20
 800df5a:	701a      	strb	r2, [r3, #0]
 800df5c:	e0ef      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_21))
 800df5e:	4b32      	ldr	r3, [pc, #200]	@ (800e028 <ATP_operation+0x2f8>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4619      	mov	r1, r3
 800df64:	481b      	ldr	r0, [pc, #108]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df66:	f00e feb2 	bl	801ccce <strstr>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d003      	beq.n	800df78 <ATP_operation+0x248>
		{
			ATP_test_number = TS_12;
 800df70:	4b19      	ldr	r3, [pc, #100]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df72:	2215      	movs	r2, #21
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	e0e2      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_22))
 800df78:	4b2c      	ldr	r3, [pc, #176]	@ (800e02c <ATP_operation+0x2fc>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4619      	mov	r1, r3
 800df7e:	4815      	ldr	r0, [pc, #84]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df80:	f00e fea5 	bl	801ccce <strstr>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d003      	beq.n	800df92 <ATP_operation+0x262>
		{
			ATP_test_number = RTC_CHECK;
 800df8a:	4b13      	ldr	r3, [pc, #76]	@ (800dfd8 <ATP_operation+0x2a8>)
 800df8c:	2216      	movs	r2, #22
 800df8e:	701a      	strb	r2, [r3, #0]
 800df90:	e0d5      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_23))
 800df92:	4b27      	ldr	r3, [pc, #156]	@ (800e030 <ATP_operation+0x300>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4619      	mov	r1, r3
 800df98:	480e      	ldr	r0, [pc, #56]	@ (800dfd4 <ATP_operation+0x2a4>)
 800df9a:	f00e fe98 	bl	801ccce <strstr>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d003      	beq.n	800dfac <ATP_operation+0x27c>
		{
			ATP_test_number = NAND_FLASH_WRITE;
 800dfa4:	4b0c      	ldr	r3, [pc, #48]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dfa6:	2217      	movs	r2, #23
 800dfa8:	701a      	strb	r2, [r3, #0]
 800dfaa:	e0c8      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_24))
 800dfac:	4b21      	ldr	r3, [pc, #132]	@ (800e034 <ATP_operation+0x304>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4808      	ldr	r0, [pc, #32]	@ (800dfd4 <ATP_operation+0x2a4>)
 800dfb4:	f00e fe8b 	bl	801ccce <strstr>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d03c      	beq.n	800e038 <ATP_operation+0x308>
		{
			ATP_test_number = NAND_FLASH_READ;
 800dfbe:	4b06      	ldr	r3, [pc, #24]	@ (800dfd8 <ATP_operation+0x2a8>)
 800dfc0:	2218      	movs	r2, #24
 800dfc2:	701a      	strb	r2, [r3, #0]
 800dfc4:	e0bb      	b.n	800e13e <ATP_operation+0x40e>
 800dfc6:	bf00      	nop
 800dfc8:	42021000 	.word	0x42021000
 800dfcc:	2000036d 	.word	0x2000036d
 800dfd0:	20000004 	.word	0x20000004
 800dfd4:	20000358 	.word	0x20000358
 800dfd8:	2000036e 	.word	0x2000036e
 800dfdc:	20000008 	.word	0x20000008
 800dfe0:	2000000c 	.word	0x2000000c
 800dfe4:	20000010 	.word	0x20000010
 800dfe8:	20000014 	.word	0x20000014
 800dfec:	20000018 	.word	0x20000018
 800dff0:	2000001c 	.word	0x2000001c
 800dff4:	20000020 	.word	0x20000020
 800dff8:	20000024 	.word	0x20000024
 800dffc:	20000028 	.word	0x20000028
 800e000:	2000002c 	.word	0x2000002c
 800e004:	20000030 	.word	0x20000030
 800e008:	20000034 	.word	0x20000034
 800e00c:	20000038 	.word	0x20000038
 800e010:	2000003c 	.word	0x2000003c
 800e014:	20000040 	.word	0x20000040
 800e018:	20000044 	.word	0x20000044
 800e01c:	20000048 	.word	0x20000048
 800e020:	2000004c 	.word	0x2000004c
 800e024:	20000050 	.word	0x20000050
 800e028:	20000054 	.word	0x20000054
 800e02c:	20000058 	.word	0x20000058
 800e030:	2000005c 	.word	0x2000005c
 800e034:	20000060 	.word	0x20000060
		}
		else if (strstr(command_str, test_nbr_25))
 800e038:	4bb5      	ldr	r3, [pc, #724]	@ (800e310 <ATP_operation+0x5e0>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4619      	mov	r1, r3
 800e03e:	48b5      	ldr	r0, [pc, #724]	@ (800e314 <ATP_operation+0x5e4>)
 800e040:	f00e fe45 	bl	801ccce <strstr>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d01a      	beq.n	800e080 <ATP_operation+0x350>
		{
			if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)== 1)
 800e04a:	2104      	movs	r1, #4
 800e04c:	48b2      	ldr	r0, [pc, #712]	@ (800e318 <ATP_operation+0x5e8>)
 800e04e:	f003 fe39 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e052:	4603      	mov	r3, r0
 800e054:	2b01      	cmp	r3, #1
 800e056:	d103      	bne.n	800e060 <ATP_operation+0x330>
				ATP_test_number = NAND_FLASH_ERASE;
 800e058:	4bb0      	ldr	r3, [pc, #704]	@ (800e31c <ATP_operation+0x5ec>)
 800e05a:	2219      	movs	r2, #25
 800e05c:	701a      	strb	r2, [r3, #0]
 800e05e:	e06e      	b.n	800e13e <ATP_operation+0x40e>
			else{
				HAL_UART_Transmit_IT(&huart5,(uint8_t *)GpStatus, strlen("Is GPIO HIGH..?"));
 800e060:	4baf      	ldr	r3, [pc, #700]	@ (800e320 <ATP_operation+0x5f0>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	220f      	movs	r2, #15
 800e066:	4619      	mov	r1, r3
 800e068:	48ae      	ldr	r0, [pc, #696]	@ (800e324 <ATP_operation+0x5f4>)
 800e06a:	f00b fd6d 	bl	8019b48 <HAL_UART_Transmit_IT>
				memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e06e:	2264      	movs	r2, #100	@ 0x64
 800e070:	2100      	movs	r1, #0
 800e072:	48ad      	ldr	r0, [pc, #692]	@ (800e328 <ATP_operation+0x5f8>)
 800e074:	f00e fe23 	bl	801ccbe <memset>
				HAL_Delay(100);
 800e078:	2064      	movs	r0, #100	@ 0x64
 800e07a:	f003 fa77 	bl	801156c <HAL_Delay>
 800e07e:	e05e      	b.n	800e13e <ATP_operation+0x40e>
			}
		}
		else if (strstr((char *)command_str, test_nbr_26))
 800e080:	4baa      	ldr	r3, [pc, #680]	@ (800e32c <ATP_operation+0x5fc>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4619      	mov	r1, r3
 800e086:	48a3      	ldr	r0, [pc, #652]	@ (800e314 <ATP_operation+0x5e4>)
 800e088:	f00e fe21 	bl	801ccce <strstr>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00d      	beq.n	800e0ae <ATP_operation+0x37e>
		{
			//			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 800e092:	48a0      	ldr	r0, [pc, #640]	@ (800e314 <ATP_operation+0x5e4>)
 800e094:	f7fe f8fc 	bl	800c290 <strlen>
 800e098:	4603      	mov	r3, r0
 800e09a:	3b04      	subs	r3, #4
 800e09c:	461a      	mov	r2, r3
 800e09e:	49a4      	ldr	r1, [pc, #656]	@ (800e330 <ATP_operation+0x600>)
 800e0a0:	48a4      	ldr	r0, [pc, #656]	@ (800e334 <ATP_operation+0x604>)
 800e0a2:	f00e feb0 	bl	801ce06 <memcpy>
			ATP_test_number = LoopBack_RS232;
 800e0a6:	4b9d      	ldr	r3, [pc, #628]	@ (800e31c <ATP_operation+0x5ec>)
 800e0a8:	221a      	movs	r2, #26
 800e0aa:	701a      	strb	r2, [r3, #0]
 800e0ac:	e047      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr((char *)command_str, test_nbr_27))
 800e0ae:	4ba2      	ldr	r3, [pc, #648]	@ (800e338 <ATP_operation+0x608>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4897      	ldr	r0, [pc, #604]	@ (800e314 <ATP_operation+0x5e4>)
 800e0b6:	f00e fe0a 	bl	801ccce <strstr>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00d      	beq.n	800e0dc <ATP_operation+0x3ac>
		{
			//			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 800e0c0:	4894      	ldr	r0, [pc, #592]	@ (800e314 <ATP_operation+0x5e4>)
 800e0c2:	f7fe f8e5 	bl	800c290 <strlen>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	3b04      	subs	r3, #4
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	4998      	ldr	r1, [pc, #608]	@ (800e330 <ATP_operation+0x600>)
 800e0ce:	4899      	ldr	r0, [pc, #612]	@ (800e334 <ATP_operation+0x604>)
 800e0d0:	f00e fe99 	bl	801ce06 <memcpy>
			ATP_test_number = LoopBack_RS422;
 800e0d4:	4b91      	ldr	r3, [pc, #580]	@ (800e31c <ATP_operation+0x5ec>)
 800e0d6:	221b      	movs	r2, #27
 800e0d8:	701a      	strb	r2, [r3, #0]
 800e0da:	e030      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr((char *)command_str, test_nbr_28))
 800e0dc:	4b97      	ldr	r3, [pc, #604]	@ (800e33c <ATP_operation+0x60c>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	488c      	ldr	r0, [pc, #560]	@ (800e314 <ATP_operation+0x5e4>)
 800e0e4:	f00e fdf3 	bl	801ccce <strstr>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00d      	beq.n	800e10a <ATP_operation+0x3da>
		{
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 800e0ee:	4889      	ldr	r0, [pc, #548]	@ (800e314 <ATP_operation+0x5e4>)
 800e0f0:	f7fe f8ce 	bl	800c290 <strlen>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	3b04      	subs	r3, #4
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	498d      	ldr	r1, [pc, #564]	@ (800e330 <ATP_operation+0x600>)
 800e0fc:	488d      	ldr	r0, [pc, #564]	@ (800e334 <ATP_operation+0x604>)
 800e0fe:	f00e fe82 	bl	801ce06 <memcpy>
			ATP_test_number = LoopBack1_RS485;
 800e102:	4b86      	ldr	r3, [pc, #536]	@ (800e31c <ATP_operation+0x5ec>)
 800e104:	221c      	movs	r2, #28
 800e106:	701a      	strb	r2, [r3, #0]
 800e108:	e019      	b.n	800e13e <ATP_operation+0x40e>
		}
		else if (strstr((char *)command_str, test_nbr_29))
 800e10a:	4b8d      	ldr	r3, [pc, #564]	@ (800e340 <ATP_operation+0x610>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4619      	mov	r1, r3
 800e110:	4880      	ldr	r0, [pc, #512]	@ (800e314 <ATP_operation+0x5e4>)
 800e112:	f00e fddc 	bl	801ccce <strstr>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00d      	beq.n	800e138 <ATP_operation+0x408>
		{
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 800e11c:	487d      	ldr	r0, [pc, #500]	@ (800e314 <ATP_operation+0x5e4>)
 800e11e:	f7fe f8b7 	bl	800c290 <strlen>
 800e122:	4603      	mov	r3, r0
 800e124:	3b04      	subs	r3, #4
 800e126:	461a      	mov	r2, r3
 800e128:	4981      	ldr	r1, [pc, #516]	@ (800e330 <ATP_operation+0x600>)
 800e12a:	4882      	ldr	r0, [pc, #520]	@ (800e334 <ATP_operation+0x604>)
 800e12c:	f00e fe6b 	bl	801ce06 <memcpy>
			ATP_test_number = LoopBack2_RS485;
 800e130:	4b7a      	ldr	r3, [pc, #488]	@ (800e31c <ATP_operation+0x5ec>)
 800e132:	221d      	movs	r2, #29
 800e134:	701a      	strb	r2, [r3, #0]
 800e136:	e002      	b.n	800e13e <ATP_operation+0x40e>
		}
		else
		{
			ATP_test_number = 0 ;
 800e138:	4b78      	ldr	r3, [pc, #480]	@ (800e31c <ATP_operation+0x5ec>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	701a      	strb	r2, [r3, #0]
		}

		memset(command_str,0,sizeof(command_str));
 800e13e:	2214      	movs	r2, #20
 800e140:	2100      	movs	r1, #0
 800e142:	4874      	ldr	r0, [pc, #464]	@ (800e314 <ATP_operation+0x5e4>)
 800e144:	f00e fdbb 	bl	801ccbe <memset>

		switch(ATP_test_number)
 800e148:	4b74      	ldr	r3, [pc, #464]	@ (800e31c <ATP_operation+0x5ec>)
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	3b01      	subs	r3, #1
 800e14e:	2b1c      	cmp	r3, #28
 800e150:	f200 8480 	bhi.w	800ea54 <ATP_operation+0xd24>
 800e154:	a201      	add	r2, pc, #4	@ (adr r2, 800e15c <ATP_operation+0x42c>)
 800e156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15a:	bf00      	nop
 800e15c:	0800e1d1 	.word	0x0800e1d1
 800e160:	0800e21b 	.word	0x0800e21b
 800e164:	0800e263 	.word	0x0800e263
 800e168:	0800e29d 	.word	0x0800e29d
 800e16c:	0800e2d7 	.word	0x0800e2d7
 800e170:	0800e351 	.word	0x0800e351
 800e174:	0800e38b 	.word	0x0800e38b
 800e178:	0800e3c5 	.word	0x0800e3c5
 800e17c:	0800e40d 	.word	0x0800e40d
 800e180:	0800e455 	.word	0x0800e455
 800e184:	0800e4a1 	.word	0x0800e4a1
 800e188:	0800e4ed 	.word	0x0800e4ed
 800e18c:	0800e539 	.word	0x0800e539
 800e190:	0800e585 	.word	0x0800e585
 800e194:	0800e5d1 	.word	0x0800e5d1
 800e198:	0800e649 	.word	0x0800e649
 800e19c:	0800e695 	.word	0x0800e695
 800e1a0:	0800e6e1 	.word	0x0800e6e1
 800e1a4:	0800e721 	.word	0x0800e721
 800e1a8:	0800e76d 	.word	0x0800e76d
 800e1ac:	0800e7b9 	.word	0x0800e7b9
 800e1b0:	0800e805 	.word	0x0800e805
 800e1b4:	0800e88f 	.word	0x0800e88f
 800e1b8:	0800e897 	.word	0x0800e897
 800e1bc:	0800e8a3 	.word	0x0800e8a3
 800e1c0:	0800e963 	.word	0x0800e963
 800e1c4:	0800e98f 	.word	0x0800e98f
 800e1c8:	0800e9d5 	.word	0x0800e9d5
 800e1cc:	0800ea15 	.word	0x0800ea15
		{
		case  POWER_CTRL_1 		:
			ATP_test_number=0;
 800e1d0:	4b52      	ldr	r3, [pc, #328]	@ (800e31c <ATP_operation+0x5ec>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e1d6:	2264      	movs	r2, #100	@ 0x64
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4853      	ldr	r0, [pc, #332]	@ (800e328 <ATP_operation+0x5f8>)
 800e1dc:	f00e fd6f 	bl	801ccbe <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl1_Pin));
 800e1e0:	2120      	movs	r1, #32
 800e1e2:	4858      	ldr	r0, [pc, #352]	@ (800e344 <ATP_operation+0x614>)
 800e1e4:	f003 fd6e 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	4956      	ldr	r1, [pc, #344]	@ (800e348 <ATP_operation+0x618>)
 800e1ee:	484e      	ldr	r0, [pc, #312]	@ (800e328 <ATP_operation+0x5f8>)
 800e1f0:	f00e fd02 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5,ATP_buffer, strlen((char *)(ATP_buffer)));
 800e1f4:	484c      	ldr	r0, [pc, #304]	@ (800e328 <ATP_operation+0x5f8>)
 800e1f6:	f7fe f84b 	bl	800c290 <strlen>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	461a      	mov	r2, r3
 800e200:	4949      	ldr	r1, [pc, #292]	@ (800e328 <ATP_operation+0x5f8>)
 800e202:	4848      	ldr	r0, [pc, #288]	@ (800e324 <ATP_operation+0x5f4>)
 800e204:	f00b fca0 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOA,Pwr_Ctrl1_Pin);
 800e208:	2120      	movs	r1, #32
 800e20a:	484e      	ldr	r0, [pc, #312]	@ (800e344 <ATP_operation+0x614>)
 800e20c:	f003 fd8a 	bl	8011d24 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800e210:	2005      	movs	r0, #5
 800e212:	f003 f9ab 	bl	801156c <HAL_Delay>
//			memset(ATP_buffer,0,sizeof(ATP_buffer));
//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl1_Pin));
//			HAL_UART_Transmit_IT(&huart5,ATP_buffer, strlen((char *)(ATP_buffer)));
			break;
 800e216:	f000 bc21 	b.w	800ea5c <ATP_operation+0xd2c>
		case  POWER_CTRL_2 		:
			ATP_test_number=0;
 800e21a:	4b40      	ldr	r3, [pc, #256]	@ (800e31c <ATP_operation+0x5ec>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e220:	2264      	movs	r2, #100	@ 0x64
 800e222:	2100      	movs	r1, #0
 800e224:	4840      	ldr	r0, [pc, #256]	@ (800e328 <ATP_operation+0x5f8>)
 800e226:	f00e fd4a 	bl	801ccbe <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl2_Pin));
 800e22a:	2140      	movs	r1, #64	@ 0x40
 800e22c:	4845      	ldr	r0, [pc, #276]	@ (800e344 <ATP_operation+0x614>)
 800e22e:	f003 fd49 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e232:	4603      	mov	r3, r0
 800e234:	461a      	mov	r2, r3
 800e236:	4944      	ldr	r1, [pc, #272]	@ (800e348 <ATP_operation+0x618>)
 800e238:	483b      	ldr	r0, [pc, #236]	@ (800e328 <ATP_operation+0x5f8>)
 800e23a:	f00e fcdd 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e23e:	483a      	ldr	r0, [pc, #232]	@ (800e328 <ATP_operation+0x5f8>)
 800e240:	f7fe f826 	bl	800c290 <strlen>
 800e244:	4603      	mov	r3, r0
 800e246:	b29b      	uxth	r3, r3
 800e248:	461a      	mov	r2, r3
 800e24a:	4937      	ldr	r1, [pc, #220]	@ (800e328 <ATP_operation+0x5f8>)
 800e24c:	4835      	ldr	r0, [pc, #212]	@ (800e324 <ATP_operation+0x5f4>)
 800e24e:	f00b fc7b 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOA,Pwr_Ctrl2_Pin);
 800e252:	2140      	movs	r1, #64	@ 0x40
 800e254:	483b      	ldr	r0, [pc, #236]	@ (800e344 <ATP_operation+0x614>)
 800e256:	f003 fd65 	bl	8011d24 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800e25a:	2005      	movs	r0, #5
 800e25c:	f003 f986 	bl	801156c <HAL_Delay>
//			memset(ATP_buffer,0,sizeof(ATP_buffer));
//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl2_Pin));
//			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
			break;
 800e260:	e3fc      	b.n	800ea5c <ATP_operation+0xd2c>
		case  INPUT_GPIO_1 		:
			ATP_test_number=0;
 800e262:	4b2e      	ldr	r3, [pc, #184]	@ (800e31c <ATP_operation+0x5ec>)
 800e264:	2200      	movs	r2, #0
 800e266:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e268:	2264      	movs	r2, #100	@ 0x64
 800e26a:	2100      	movs	r1, #0
 800e26c:	482e      	ldr	r0, [pc, #184]	@ (800e328 <ATP_operation+0x5f8>)
 800e26e:	f00e fd26 	bl	801ccbe <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOD,GPI_1_Pin));
 800e272:	2104      	movs	r1, #4
 800e274:	4828      	ldr	r0, [pc, #160]	@ (800e318 <ATP_operation+0x5e8>)
 800e276:	f003 fd25 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e27a:	4603      	mov	r3, r0
 800e27c:	461a      	mov	r2, r3
 800e27e:	4932      	ldr	r1, [pc, #200]	@ (800e348 <ATP_operation+0x618>)
 800e280:	4829      	ldr	r0, [pc, #164]	@ (800e328 <ATP_operation+0x5f8>)
 800e282:	f00e fcb9 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e286:	4828      	ldr	r0, [pc, #160]	@ (800e328 <ATP_operation+0x5f8>)
 800e288:	f7fe f802 	bl	800c290 <strlen>
 800e28c:	4603      	mov	r3, r0
 800e28e:	b29b      	uxth	r3, r3
 800e290:	461a      	mov	r2, r3
 800e292:	4925      	ldr	r1, [pc, #148]	@ (800e328 <ATP_operation+0x5f8>)
 800e294:	4823      	ldr	r0, [pc, #140]	@ (800e324 <ATP_operation+0x5f4>)
 800e296:	f00b fc57 	bl	8019b48 <HAL_UART_Transmit_IT>
			break;
 800e29a:	e3df      	b.n	800ea5c <ATP_operation+0xd2c>
		case  INPUT_GPIO_2 		:
			ATP_test_number=0;
 800e29c:	4b1f      	ldr	r3, [pc, #124]	@ (800e31c <ATP_operation+0x5ec>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e2a2:	2264      	movs	r2, #100	@ 0x64
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	4820      	ldr	r0, [pc, #128]	@ (800e328 <ATP_operation+0x5f8>)
 800e2a8:	f00e fd09 	bl	801ccbe <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOD,GPI_2_Pin));
 800e2ac:	2108      	movs	r1, #8
 800e2ae:	481a      	ldr	r0, [pc, #104]	@ (800e318 <ATP_operation+0x5e8>)
 800e2b0:	f003 fd08 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	4923      	ldr	r1, [pc, #140]	@ (800e348 <ATP_operation+0x618>)
 800e2ba:	481b      	ldr	r0, [pc, #108]	@ (800e328 <ATP_operation+0x5f8>)
 800e2bc:	f00e fc9c 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e2c0:	4819      	ldr	r0, [pc, #100]	@ (800e328 <ATP_operation+0x5f8>)
 800e2c2:	f7fd ffe5 	bl	800c290 <strlen>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	4916      	ldr	r1, [pc, #88]	@ (800e328 <ATP_operation+0x5f8>)
 800e2ce:	4815      	ldr	r0, [pc, #84]	@ (800e324 <ATP_operation+0x5f4>)
 800e2d0:	f00b fc3a 	bl	8019b48 <HAL_UART_Transmit_IT>
			break;
 800e2d4:	e3c2      	b.n	800ea5c <ATP_operation+0xd2c>
		case  INPUT_GPIO_3 		:
			ATP_test_number=0;
 800e2d6:	4b11      	ldr	r3, [pc, #68]	@ (800e31c <ATP_operation+0x5ec>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e2dc:	2264      	movs	r2, #100	@ 0x64
 800e2de:	2100      	movs	r1, #0
 800e2e0:	4811      	ldr	r0, [pc, #68]	@ (800e328 <ATP_operation+0x5f8>)
 800e2e2:	f00e fcec 	bl	801ccbe <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin));
 800e2e6:	2110      	movs	r1, #16
 800e2e8:	4818      	ldr	r0, [pc, #96]	@ (800e34c <ATP_operation+0x61c>)
 800e2ea:	f003 fceb 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	4915      	ldr	r1, [pc, #84]	@ (800e348 <ATP_operation+0x618>)
 800e2f4:	480c      	ldr	r0, [pc, #48]	@ (800e328 <ATP_operation+0x5f8>)
 800e2f6:	f00e fc7f 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e2fa:	480b      	ldr	r0, [pc, #44]	@ (800e328 <ATP_operation+0x5f8>)
 800e2fc:	f7fd ffc8 	bl	800c290 <strlen>
 800e300:	4603      	mov	r3, r0
 800e302:	b29b      	uxth	r3, r3
 800e304:	461a      	mov	r2, r3
 800e306:	4908      	ldr	r1, [pc, #32]	@ (800e328 <ATP_operation+0x5f8>)
 800e308:	4806      	ldr	r0, [pc, #24]	@ (800e324 <ATP_operation+0x5f4>)
 800e30a:	f00b fc1d 	bl	8019b48 <HAL_UART_Transmit_IT>
			break;
 800e30e:	e3a5      	b.n	800ea5c <ATP_operation+0xd2c>
 800e310:	20000064 	.word	0x20000064
 800e314:	20000358 	.word	0x20000358
 800e318:	42020c00 	.word	0x42020c00
 800e31c:	2000036e 	.word	0x2000036e
 800e320:	20000078 	.word	0x20000078
 800e324:	20005964 	.word	0x20005964
 800e328:	20000384 	.word	0x20000384
 800e32c:	20000068 	.word	0x20000068
 800e330:	2000035b 	.word	0x2000035b
 800e334:	20000370 	.word	0x20000370
 800e338:	2000006c 	.word	0x2000006c
 800e33c:	20000070 	.word	0x20000070
 800e340:	20000074 	.word	0x20000074
 800e344:	42020000 	.word	0x42020000
 800e348:	0801f198 	.word	0x0801f198
 800e34c:	42021000 	.word	0x42021000
		case  INPUT_GPIO_4 		:
			ATP_test_number=0;
 800e350:	4bb2      	ldr	r3, [pc, #712]	@ (800e61c <ATP_operation+0x8ec>)
 800e352:	2200      	movs	r2, #0
 800e354:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e356:	2264      	movs	r2, #100	@ 0x64
 800e358:	2100      	movs	r1, #0
 800e35a:	48b1      	ldr	r0, [pc, #708]	@ (800e620 <ATP_operation+0x8f0>)
 800e35c:	f00e fcaf 	bl	801ccbe <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOE,GPI_4_Pin));
 800e360:	2120      	movs	r1, #32
 800e362:	48b0      	ldr	r0, [pc, #704]	@ (800e624 <ATP_operation+0x8f4>)
 800e364:	f003 fcae 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e368:	4603      	mov	r3, r0
 800e36a:	461a      	mov	r2, r3
 800e36c:	49ae      	ldr	r1, [pc, #696]	@ (800e628 <ATP_operation+0x8f8>)
 800e36e:	48ac      	ldr	r0, [pc, #688]	@ (800e620 <ATP_operation+0x8f0>)
 800e370:	f00e fc42 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e374:	48aa      	ldr	r0, [pc, #680]	@ (800e620 <ATP_operation+0x8f0>)
 800e376:	f7fd ff8b 	bl	800c290 <strlen>
 800e37a:	4603      	mov	r3, r0
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	461a      	mov	r2, r3
 800e380:	49a7      	ldr	r1, [pc, #668]	@ (800e620 <ATP_operation+0x8f0>)
 800e382:	48aa      	ldr	r0, [pc, #680]	@ (800e62c <ATP_operation+0x8fc>)
 800e384:	f00b fbe0 	bl	8019b48 <HAL_UART_Transmit_IT>
			break;
 800e388:	e368      	b.n	800ea5c <ATP_operation+0xd2c>
		case  INPUT_GPIO_5 		:
			ATP_test_number=0;
 800e38a:	4ba4      	ldr	r3, [pc, #656]	@ (800e61c <ATP_operation+0x8ec>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e390:	2264      	movs	r2, #100	@ 0x64
 800e392:	2100      	movs	r1, #0
 800e394:	48a2      	ldr	r0, [pc, #648]	@ (800e620 <ATP_operation+0x8f0>)
 800e396:	f00e fc92 	bl	801ccbe <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOE,GPI_5_Pin));
 800e39a:	2140      	movs	r1, #64	@ 0x40
 800e39c:	48a1      	ldr	r0, [pc, #644]	@ (800e624 <ATP_operation+0x8f4>)
 800e39e:	f003 fc91 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	49a0      	ldr	r1, [pc, #640]	@ (800e628 <ATP_operation+0x8f8>)
 800e3a8:	489d      	ldr	r0, [pc, #628]	@ (800e620 <ATP_operation+0x8f0>)
 800e3aa:	f00e fc25 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e3ae:	489c      	ldr	r0, [pc, #624]	@ (800e620 <ATP_operation+0x8f0>)
 800e3b0:	f7fd ff6e 	bl	800c290 <strlen>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	4999      	ldr	r1, [pc, #612]	@ (800e620 <ATP_operation+0x8f0>)
 800e3bc:	489b      	ldr	r0, [pc, #620]	@ (800e62c <ATP_operation+0x8fc>)
 800e3be:	f00b fbc3 	bl	8019b48 <HAL_UART_Transmit_IT>
			break;
 800e3c2:	e34b      	b.n	800ea5c <ATP_operation+0xd2c>
		case  OUTPUT_GPIO_1 	:
			ATP_test_number=0;
 800e3c4:	4b95      	ldr	r3, [pc, #596]	@ (800e61c <ATP_operation+0x8ec>)
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e3ca:	2264      	movs	r2, #100	@ 0x64
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	4894      	ldr	r0, [pc, #592]	@ (800e620 <ATP_operation+0x8f0>)
 800e3d0:	f00e fc75 	bl	801ccbe <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_1_Pin));
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	4896      	ldr	r0, [pc, #600]	@ (800e630 <ATP_operation+0x900>)
 800e3d8:	f003 fc74 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	461a      	mov	r2, r3
 800e3e0:	4991      	ldr	r1, [pc, #580]	@ (800e628 <ATP_operation+0x8f8>)
 800e3e2:	488f      	ldr	r0, [pc, #572]	@ (800e620 <ATP_operation+0x8f0>)
 800e3e4:	f00e fc08 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e3e8:	488d      	ldr	r0, [pc, #564]	@ (800e620 <ATP_operation+0x8f0>)
 800e3ea:	f7fd ff51 	bl	800c290 <strlen>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	498a      	ldr	r1, [pc, #552]	@ (800e620 <ATP_operation+0x8f0>)
 800e3f6:	488d      	ldr	r0, [pc, #564]	@ (800e62c <ATP_operation+0x8fc>)
 800e3f8:	f00b fba6 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOB,GPO_1_Pin);
 800e3fc:	2101      	movs	r1, #1
 800e3fe:	488c      	ldr	r0, [pc, #560]	@ (800e630 <ATP_operation+0x900>)
 800e400:	f003 fc90 	bl	8011d24 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800e404:	2005      	movs	r0, #5
 800e406:	f003 f8b1 	bl	801156c <HAL_Delay>
//			memset(ATP_buffer,0,sizeof(ATP_buffer));
//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_1_Pin));
//			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
			break;
 800e40a:	e327      	b.n	800ea5c <ATP_operation+0xd2c>
		case  OUTPUT_GPIO_2 	:
			ATP_test_number=0;
 800e40c:	4b83      	ldr	r3, [pc, #524]	@ (800e61c <ATP_operation+0x8ec>)
 800e40e:	2200      	movs	r2, #0
 800e410:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e412:	2264      	movs	r2, #100	@ 0x64
 800e414:	2100      	movs	r1, #0
 800e416:	4882      	ldr	r0, [pc, #520]	@ (800e620 <ATP_operation+0x8f0>)
 800e418:	f00e fc51 	bl	801ccbe <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_2_Pin));
 800e41c:	2102      	movs	r1, #2
 800e41e:	4884      	ldr	r0, [pc, #528]	@ (800e630 <ATP_operation+0x900>)
 800e420:	f003 fc50 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800e424:	4603      	mov	r3, r0
 800e426:	461a      	mov	r2, r3
 800e428:	497f      	ldr	r1, [pc, #508]	@ (800e628 <ATP_operation+0x8f8>)
 800e42a:	487d      	ldr	r0, [pc, #500]	@ (800e620 <ATP_operation+0x8f0>)
 800e42c:	f00e fbe4 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800e430:	487b      	ldr	r0, [pc, #492]	@ (800e620 <ATP_operation+0x8f0>)
 800e432:	f7fd ff2d 	bl	800c290 <strlen>
 800e436:	4603      	mov	r3, r0
 800e438:	b29b      	uxth	r3, r3
 800e43a:	461a      	mov	r2, r3
 800e43c:	4978      	ldr	r1, [pc, #480]	@ (800e620 <ATP_operation+0x8f0>)
 800e43e:	487b      	ldr	r0, [pc, #492]	@ (800e62c <ATP_operation+0x8fc>)
 800e440:	f00b fb82 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOB,GPO_2_Pin);
 800e444:	2102      	movs	r1, #2
 800e446:	487a      	ldr	r0, [pc, #488]	@ (800e630 <ATP_operation+0x900>)
 800e448:	f003 fc6c 	bl	8011d24 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800e44c:	2005      	movs	r0, #5
 800e44e:	f003 f88d 	bl	801156c <HAL_Delay>
//			memset(ATP_buffer,0,sizeof(ATP_buffer));
//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_2_Pin));
//			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
			break;
 800e452:	e303      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_1		 		:
			ATP_test_number=0;
 800e454:	4b71      	ldr	r3, [pc, #452]	@ (800e61c <ATP_operation+0x8ec>)
 800e456:	2200      	movs	r2, #0
 800e458:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_1);
 800e45a:	2100      	movs	r1, #0
 800e45c:	2000      	movs	r0, #0
 800e45e:	f7fe fdbb 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e462:	2032      	movs	r0, #50	@ 0x32
 800e464:	f003 f882 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",1,1,sensor_hex[0][0],temp_sensor[0][0]);
 800e468:	4b72      	ldr	r3, [pc, #456]	@ (800e634 <ATP_operation+0x904>)
 800e46a:	881b      	ldrh	r3, [r3, #0]
 800e46c:	461c      	mov	r4, r3
 800e46e:	4b72      	ldr	r3, [pc, #456]	@ (800e638 <ATP_operation+0x908>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4618      	mov	r0, r3
 800e474:	f7fe f878 	bl	800c568 <__aeabi_f2d>
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e480:	9400      	str	r4, [sp, #0]
 800e482:	2301      	movs	r3, #1
 800e484:	2201      	movs	r2, #1
 800e486:	496d      	ldr	r1, [pc, #436]	@ (800e63c <ATP_operation+0x90c>)
 800e488:	4865      	ldr	r0, [pc, #404]	@ (800e620 <ATP_operation+0x8f0>)
 800e48a:	f00e fbb5 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e48e:	2264      	movs	r2, #100	@ 0x64
 800e490:	4963      	ldr	r1, [pc, #396]	@ (800e620 <ATP_operation+0x8f0>)
 800e492:	4866      	ldr	r0, [pc, #408]	@ (800e62c <ATP_operation+0x8fc>)
 800e494:	f00b fb58 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e498:	2032      	movs	r0, #50	@ 0x32
 800e49a:	f003 f867 	bl	801156c <HAL_Delay>
			break;
 800e49e:	e2dd      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_2		 		:
			ATP_test_number=0;
 800e4a0:	4b5e      	ldr	r3, [pc, #376]	@ (800e61c <ATP_operation+0x8ec>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_2);
 800e4a6:	2101      	movs	r1, #1
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	f7fe fd95 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e4ae:	2032      	movs	r0, #50	@ 0x32
 800e4b0:	f003 f85c 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",1,2,sensor_hex[0][1],temp_sensor[0][1]);
 800e4b4:	4b5f      	ldr	r3, [pc, #380]	@ (800e634 <ATP_operation+0x904>)
 800e4b6:	885b      	ldrh	r3, [r3, #2]
 800e4b8:	461c      	mov	r4, r3
 800e4ba:	4b5f      	ldr	r3, [pc, #380]	@ (800e638 <ATP_operation+0x908>)
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fe f852 	bl	800c568 <__aeabi_f2d>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4cc:	9400      	str	r4, [sp, #0]
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	495a      	ldr	r1, [pc, #360]	@ (800e63c <ATP_operation+0x90c>)
 800e4d4:	4852      	ldr	r0, [pc, #328]	@ (800e620 <ATP_operation+0x8f0>)
 800e4d6:	f00e fb8f 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e4da:	2264      	movs	r2, #100	@ 0x64
 800e4dc:	4950      	ldr	r1, [pc, #320]	@ (800e620 <ATP_operation+0x8f0>)
 800e4de:	4853      	ldr	r0, [pc, #332]	@ (800e62c <ATP_operation+0x8fc>)
 800e4e0:	f00b fb32 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e4e4:	2032      	movs	r0, #50	@ 0x32
 800e4e6:	f003 f841 	bl	801156c <HAL_Delay>
			break;
 800e4ea:	e2b7      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_3		 		:
			ATP_test_number=0;
 800e4ec:	4b4b      	ldr	r3, [pc, #300]	@ (800e61c <ATP_operation+0x8ec>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_3);
 800e4f2:	2102      	movs	r1, #2
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	f7fe fd6f 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e4fa:	2032      	movs	r0, #50	@ 0x32
 800e4fc:	f003 f836 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",1,3,sensor_hex[0][2],temp_sensor[0][2]);
 800e500:	4b4c      	ldr	r3, [pc, #304]	@ (800e634 <ATP_operation+0x904>)
 800e502:	889b      	ldrh	r3, [r3, #4]
 800e504:	461c      	mov	r4, r3
 800e506:	4b4c      	ldr	r3, [pc, #304]	@ (800e638 <ATP_operation+0x908>)
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fe f82c 	bl	800c568 <__aeabi_f2d>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e518:	9400      	str	r4, [sp, #0]
 800e51a:	2303      	movs	r3, #3
 800e51c:	2201      	movs	r2, #1
 800e51e:	4947      	ldr	r1, [pc, #284]	@ (800e63c <ATP_operation+0x90c>)
 800e520:	483f      	ldr	r0, [pc, #252]	@ (800e620 <ATP_operation+0x8f0>)
 800e522:	f00e fb69 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e526:	2264      	movs	r2, #100	@ 0x64
 800e528:	493d      	ldr	r1, [pc, #244]	@ (800e620 <ATP_operation+0x8f0>)
 800e52a:	4840      	ldr	r0, [pc, #256]	@ (800e62c <ATP_operation+0x8fc>)
 800e52c:	f00b fb0c 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e530:	2032      	movs	r0, #50	@ 0x32
 800e532:	f003 f81b 	bl	801156c <HAL_Delay>
			break;
 800e536:	e291      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_4		 		:
			ATP_test_number=0;
 800e538:	4b38      	ldr	r3, [pc, #224]	@ (800e61c <ATP_operation+0x8ec>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_4);
 800e53e:	2103      	movs	r1, #3
 800e540:	2000      	movs	r0, #0
 800e542:	f7fe fd49 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e546:	2032      	movs	r0, #50	@ 0x32
 800e548:	f003 f810 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d  0x%X  temp = %f\n\r",1,4,sensor_hex[0][3],temp_sensor[0][3]);
 800e54c:	4b39      	ldr	r3, [pc, #228]	@ (800e634 <ATP_operation+0x904>)
 800e54e:	88db      	ldrh	r3, [r3, #6]
 800e550:	461c      	mov	r4, r3
 800e552:	4b39      	ldr	r3, [pc, #228]	@ (800e638 <ATP_operation+0x908>)
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe f806 	bl	800c568 <__aeabi_f2d>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e564:	9400      	str	r4, [sp, #0]
 800e566:	2304      	movs	r3, #4
 800e568:	2201      	movs	r2, #1
 800e56a:	4935      	ldr	r1, [pc, #212]	@ (800e640 <ATP_operation+0x910>)
 800e56c:	482c      	ldr	r0, [pc, #176]	@ (800e620 <ATP_operation+0x8f0>)
 800e56e:	f00e fb43 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e572:	2264      	movs	r2, #100	@ 0x64
 800e574:	492a      	ldr	r1, [pc, #168]	@ (800e620 <ATP_operation+0x8f0>)
 800e576:	482d      	ldr	r0, [pc, #180]	@ (800e62c <ATP_operation+0x8fc>)
 800e578:	f00b fae6 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e57c:	2032      	movs	r0, #50	@ 0x32
 800e57e:	f002 fff5 	bl	801156c <HAL_Delay>
			break;
 800e582:	e26b      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_5		 		:
			ATP_test_number=0;
 800e584:	4b25      	ldr	r3, [pc, #148]	@ (800e61c <ATP_operation+0x8ec>)
 800e586:	2200      	movs	r2, #0
 800e588:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_1);
 800e58a:	2100      	movs	r1, #0
 800e58c:	2001      	movs	r0, #1
 800e58e:	f7fe fd23 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e592:	2032      	movs	r0, #50	@ 0x32
 800e594:	f002 ffea 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0X%X    temp = %f\n\r",2,1,sensor_hex[1][0],temp_sensor[1][0]);
 800e598:	4b26      	ldr	r3, [pc, #152]	@ (800e634 <ATP_operation+0x904>)
 800e59a:	891b      	ldrh	r3, [r3, #8]
 800e59c:	461c      	mov	r4, r3
 800e59e:	4b26      	ldr	r3, [pc, #152]	@ (800e638 <ATP_operation+0x908>)
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7fd ffe0 	bl	800c568 <__aeabi_f2d>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5b0:	9400      	str	r4, [sp, #0]
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	2202      	movs	r2, #2
 800e5b6:	4923      	ldr	r1, [pc, #140]	@ (800e644 <ATP_operation+0x914>)
 800e5b8:	4819      	ldr	r0, [pc, #100]	@ (800e620 <ATP_operation+0x8f0>)
 800e5ba:	f00e fb1d 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e5be:	2264      	movs	r2, #100	@ 0x64
 800e5c0:	4917      	ldr	r1, [pc, #92]	@ (800e620 <ATP_operation+0x8f0>)
 800e5c2:	481a      	ldr	r0, [pc, #104]	@ (800e62c <ATP_operation+0x8fc>)
 800e5c4:	f00b fac0 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e5c8:	2032      	movs	r0, #50	@ 0x32
 800e5ca:	f002 ffcf 	bl	801156c <HAL_Delay>
			break;
 800e5ce:	e245      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_6		 		:
			ATP_test_number=0;
 800e5d0:	4b12      	ldr	r3, [pc, #72]	@ (800e61c <ATP_operation+0x8ec>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_2);
 800e5d6:	2101      	movs	r1, #1
 800e5d8:	2001      	movs	r0, #1
 800e5da:	f7fe fcfd 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e5de:	2032      	movs	r0, #50	@ 0x32
 800e5e0:	f002 ffc4 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",2,2,sensor_hex[1][1],temp_sensor[1][1]);
 800e5e4:	4b13      	ldr	r3, [pc, #76]	@ (800e634 <ATP_operation+0x904>)
 800e5e6:	895b      	ldrh	r3, [r3, #10]
 800e5e8:	461c      	mov	r4, r3
 800e5ea:	4b13      	ldr	r3, [pc, #76]	@ (800e638 <ATP_operation+0x908>)
 800e5ec:	695b      	ldr	r3, [r3, #20]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fd ffba 	bl	800c568 <__aeabi_f2d>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5fc:	9400      	str	r4, [sp, #0]
 800e5fe:	2302      	movs	r3, #2
 800e600:	2202      	movs	r2, #2
 800e602:	490e      	ldr	r1, [pc, #56]	@ (800e63c <ATP_operation+0x90c>)
 800e604:	4806      	ldr	r0, [pc, #24]	@ (800e620 <ATP_operation+0x8f0>)
 800e606:	f00e faf7 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e60a:	2264      	movs	r2, #100	@ 0x64
 800e60c:	4904      	ldr	r1, [pc, #16]	@ (800e620 <ATP_operation+0x8f0>)
 800e60e:	4807      	ldr	r0, [pc, #28]	@ (800e62c <ATP_operation+0x8fc>)
 800e610:	f00b fa9a 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e614:	2032      	movs	r0, #50	@ 0x32
 800e616:	f002 ffa9 	bl	801156c <HAL_Delay>
			break;
 800e61a:	e21f      	b.n	800ea5c <ATP_operation+0xd2c>
 800e61c:	2000036e 	.word	0x2000036e
 800e620:	20000384 	.word	0x20000384
 800e624:	42021000 	.word	0x42021000
 800e628:	0801f198 	.word	0x0801f198
 800e62c:	20005964 	.word	0x20005964
 800e630:	42020400 	.word	0x42020400
 800e634:	20000340 	.word	0x20000340
 800e638:	20000310 	.word	0x20000310
 800e63c:	0801f1a8 	.word	0x0801f1a8
 800e640:	0801f1d0 	.word	0x0801f1d0
 800e644:	0801f1f8 	.word	0x0801f1f8
		case  TS_7		 		:
			ATP_test_number=0;
 800e648:	4b9e      	ldr	r3, [pc, #632]	@ (800e8c4 <ATP_operation+0xb94>)
 800e64a:	2200      	movs	r2, #0
 800e64c:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_3);
 800e64e:	2102      	movs	r1, #2
 800e650:	2001      	movs	r0, #1
 800e652:	f7fe fcc1 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e656:	2032      	movs	r0, #50	@ 0x32
 800e658:	f002 ff88 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",2,3,sensor_hex[1][2],temp_sensor[1][2]);
 800e65c:	4b9a      	ldr	r3, [pc, #616]	@ (800e8c8 <ATP_operation+0xb98>)
 800e65e:	899b      	ldrh	r3, [r3, #12]
 800e660:	461c      	mov	r4, r3
 800e662:	4b9a      	ldr	r3, [pc, #616]	@ (800e8cc <ATP_operation+0xb9c>)
 800e664:	699b      	ldr	r3, [r3, #24]
 800e666:	4618      	mov	r0, r3
 800e668:	f7fd ff7e 	bl	800c568 <__aeabi_f2d>
 800e66c:	4602      	mov	r2, r0
 800e66e:	460b      	mov	r3, r1
 800e670:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e674:	9400      	str	r4, [sp, #0]
 800e676:	2303      	movs	r3, #3
 800e678:	2202      	movs	r2, #2
 800e67a:	4995      	ldr	r1, [pc, #596]	@ (800e8d0 <ATP_operation+0xba0>)
 800e67c:	4895      	ldr	r0, [pc, #596]	@ (800e8d4 <ATP_operation+0xba4>)
 800e67e:	f00e fabb 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e682:	2264      	movs	r2, #100	@ 0x64
 800e684:	4993      	ldr	r1, [pc, #588]	@ (800e8d4 <ATP_operation+0xba4>)
 800e686:	4894      	ldr	r0, [pc, #592]	@ (800e8d8 <ATP_operation+0xba8>)
 800e688:	f00b fa5e 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e68c:	2032      	movs	r0, #50	@ 0x32
 800e68e:	f002 ff6d 	bl	801156c <HAL_Delay>
			break;
 800e692:	e1e3      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_8		 		:
			ATP_test_number=0;
 800e694:	4b8b      	ldr	r3, [pc, #556]	@ (800e8c4 <ATP_operation+0xb94>)
 800e696:	2200      	movs	r2, #0
 800e698:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_4);
 800e69a:	2103      	movs	r1, #3
 800e69c:	2001      	movs	r0, #1
 800e69e:	f7fe fc9b 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e6a2:	2032      	movs	r0, #50	@ 0x32
 800e6a4:	f002 ff62 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d  0x%X  temp = %f\n\r",2,4,sensor_hex[1][3],temp_sensor[1][3]);
 800e6a8:	4b87      	ldr	r3, [pc, #540]	@ (800e8c8 <ATP_operation+0xb98>)
 800e6aa:	89db      	ldrh	r3, [r3, #14]
 800e6ac:	461c      	mov	r4, r3
 800e6ae:	4b87      	ldr	r3, [pc, #540]	@ (800e8cc <ATP_operation+0xb9c>)
 800e6b0:	69db      	ldr	r3, [r3, #28]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fd ff58 	bl	800c568 <__aeabi_f2d>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e6c0:	9400      	str	r4, [sp, #0]
 800e6c2:	2304      	movs	r3, #4
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	4985      	ldr	r1, [pc, #532]	@ (800e8dc <ATP_operation+0xbac>)
 800e6c8:	4882      	ldr	r0, [pc, #520]	@ (800e8d4 <ATP_operation+0xba4>)
 800e6ca:	f00e fa95 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e6ce:	2264      	movs	r2, #100	@ 0x64
 800e6d0:	4980      	ldr	r1, [pc, #512]	@ (800e8d4 <ATP_operation+0xba4>)
 800e6d2:	4881      	ldr	r0, [pc, #516]	@ (800e8d8 <ATP_operation+0xba8>)
 800e6d4:	f00b fa38 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e6d8:	2032      	movs	r0, #50	@ 0x32
 800e6da:	f002 ff47 	bl	801156c <HAL_Delay>
			break;
 800e6de:	e1bd      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_9		 		:
			ATP_test_number=0;
 800e6e0:	4b78      	ldr	r3, [pc, #480]	@ (800e8c4 <ATP_operation+0xb94>)
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_1);
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	2002      	movs	r0, #2
 800e6ea:	f7fe fc75 	bl	800cfd8 <ADC_READ>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X   temp = %f\n\r",3,1,sensor_hex[2][0],temp_sensor[2][0]);
 800e6ee:	4b76      	ldr	r3, [pc, #472]	@ (800e8c8 <ATP_operation+0xb98>)
 800e6f0:	8a1b      	ldrh	r3, [r3, #16]
 800e6f2:	461c      	mov	r4, r3
 800e6f4:	4b75      	ldr	r3, [pc, #468]	@ (800e8cc <ATP_operation+0xb9c>)
 800e6f6:	6a1b      	ldr	r3, [r3, #32]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fd ff35 	bl	800c568 <__aeabi_f2d>
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e706:	9400      	str	r4, [sp, #0]
 800e708:	2301      	movs	r3, #1
 800e70a:	2203      	movs	r2, #3
 800e70c:	4974      	ldr	r1, [pc, #464]	@ (800e8e0 <ATP_operation+0xbb0>)
 800e70e:	4871      	ldr	r0, [pc, #452]	@ (800e8d4 <ATP_operation+0xba4>)
 800e710:	f00e fa72 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e714:	2264      	movs	r2, #100	@ 0x64
 800e716:	496f      	ldr	r1, [pc, #444]	@ (800e8d4 <ATP_operation+0xba4>)
 800e718:	486f      	ldr	r0, [pc, #444]	@ (800e8d8 <ATP_operation+0xba8>)
 800e71a:	f00b fa15 	bl	8019b48 <HAL_UART_Transmit_IT>
			break;
 800e71e:	e19d      	b.n	800ea5c <ATP_operation+0xd2c>

		case  TS_10		 		:
			ATP_test_number=0;
 800e720:	4b68      	ldr	r3, [pc, #416]	@ (800e8c4 <ATP_operation+0xb94>)
 800e722:	2200      	movs	r2, #0
 800e724:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_2);
 800e726:	2101      	movs	r1, #1
 800e728:	2002      	movs	r0, #2
 800e72a:	f7fe fc55 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e72e:	2032      	movs	r0, #50	@ 0x32
 800e730:	f002 ff1c 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d  0x%X  temp = %f\n\r",3,2,sensor_hex[2][1],temp_sensor[2][1]);
 800e734:	4b64      	ldr	r3, [pc, #400]	@ (800e8c8 <ATP_operation+0xb98>)
 800e736:	8a5b      	ldrh	r3, [r3, #18]
 800e738:	461c      	mov	r4, r3
 800e73a:	4b64      	ldr	r3, [pc, #400]	@ (800e8cc <ATP_operation+0xb9c>)
 800e73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fd ff12 	bl	800c568 <__aeabi_f2d>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e74c:	9400      	str	r4, [sp, #0]
 800e74e:	2302      	movs	r3, #2
 800e750:	2203      	movs	r2, #3
 800e752:	4962      	ldr	r1, [pc, #392]	@ (800e8dc <ATP_operation+0xbac>)
 800e754:	485f      	ldr	r0, [pc, #380]	@ (800e8d4 <ATP_operation+0xba4>)
 800e756:	f00e fa4f 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e75a:	2264      	movs	r2, #100	@ 0x64
 800e75c:	495d      	ldr	r1, [pc, #372]	@ (800e8d4 <ATP_operation+0xba4>)
 800e75e:	485e      	ldr	r0, [pc, #376]	@ (800e8d8 <ATP_operation+0xba8>)
 800e760:	f00b f9f2 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e764:	2032      	movs	r0, #50	@ 0x32
 800e766:	f002 ff01 	bl	801156c <HAL_Delay>
			break;
 800e76a:	e177      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_11		 		:
			ATP_test_number=0;
 800e76c:	4b55      	ldr	r3, [pc, #340]	@ (800e8c4 <ATP_operation+0xb94>)
 800e76e:	2200      	movs	r2, #0
 800e770:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_3);
 800e772:	2102      	movs	r1, #2
 800e774:	2002      	movs	r0, #2
 800e776:	f7fe fc2f 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e77a:	2032      	movs	r0, #50	@ 0x32
 800e77c:	f002 fef6 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",3,3,sensor_hex[2][2],temp_sensor[2][2]);
 800e780:	4b51      	ldr	r3, [pc, #324]	@ (800e8c8 <ATP_operation+0xb98>)
 800e782:	8a9b      	ldrh	r3, [r3, #20]
 800e784:	461c      	mov	r4, r3
 800e786:	4b51      	ldr	r3, [pc, #324]	@ (800e8cc <ATP_operation+0xb9c>)
 800e788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fd feec 	bl	800c568 <__aeabi_f2d>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e798:	9400      	str	r4, [sp, #0]
 800e79a:	2303      	movs	r3, #3
 800e79c:	2203      	movs	r2, #3
 800e79e:	494c      	ldr	r1, [pc, #304]	@ (800e8d0 <ATP_operation+0xba0>)
 800e7a0:	484c      	ldr	r0, [pc, #304]	@ (800e8d4 <ATP_operation+0xba4>)
 800e7a2:	f00e fa29 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e7a6:	2264      	movs	r2, #100	@ 0x64
 800e7a8:	494a      	ldr	r1, [pc, #296]	@ (800e8d4 <ATP_operation+0xba4>)
 800e7aa:	484b      	ldr	r0, [pc, #300]	@ (800e8d8 <ATP_operation+0xba8>)
 800e7ac:	f00b f9cc 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e7b0:	2032      	movs	r0, #50	@ 0x32
 800e7b2:	f002 fedb 	bl	801156c <HAL_Delay>
			break;
 800e7b6:	e151      	b.n	800ea5c <ATP_operation+0xd2c>
		case  TS_12		 		:
			ATP_test_number=0;
 800e7b8:	4b42      	ldr	r3, [pc, #264]	@ (800e8c4 <ATP_operation+0xb94>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_4);
 800e7be:	2103      	movs	r1, #3
 800e7c0:	2002      	movs	r0, #2
 800e7c2:	f7fe fc09 	bl	800cfd8 <ADC_READ>
			HAL_Delay(50);
 800e7c6:	2032      	movs	r0, #50	@ 0x32
 800e7c8:	f002 fed0 	bl	801156c <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",3,4,sensor_hex[2][3],temp_sensor[2][3]);
 800e7cc:	4b3e      	ldr	r3, [pc, #248]	@ (800e8c8 <ATP_operation+0xb98>)
 800e7ce:	8adb      	ldrh	r3, [r3, #22]
 800e7d0:	461c      	mov	r4, r3
 800e7d2:	4b3e      	ldr	r3, [pc, #248]	@ (800e8cc <ATP_operation+0xb9c>)
 800e7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fd fec6 	bl	800c568 <__aeabi_f2d>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	460b      	mov	r3, r1
 800e7e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7e4:	9400      	str	r4, [sp, #0]
 800e7e6:	2304      	movs	r3, #4
 800e7e8:	2203      	movs	r2, #3
 800e7ea:	4939      	ldr	r1, [pc, #228]	@ (800e8d0 <ATP_operation+0xba0>)
 800e7ec:	4839      	ldr	r0, [pc, #228]	@ (800e8d4 <ATP_operation+0xba4>)
 800e7ee:	f00e fa03 	bl	801cbf8 <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e7f2:	2264      	movs	r2, #100	@ 0x64
 800e7f4:	4937      	ldr	r1, [pc, #220]	@ (800e8d4 <ATP_operation+0xba4>)
 800e7f6:	4838      	ldr	r0, [pc, #224]	@ (800e8d8 <ATP_operation+0xba8>)
 800e7f8:	f00b f9a6 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800e7fc:	2032      	movs	r0, #50	@ 0x32
 800e7fe:	f002 feb5 	bl	801156c <HAL_Delay>
			break;
 800e802:	e12b      	b.n	800ea5c <ATP_operation+0xd2c>
		case  RTC_CHECK	 		:
			ATP_test_number=0;
 800e804:	4b2f      	ldr	r3, [pc, #188]	@ (800e8c4 <ATP_operation+0xb94>)
 800e806:	2200      	movs	r2, #0
 800e808:	701a      	strb	r2, [r3, #0]
			uint8_t time_data_1[8]={0};
 800e80a:	2300      	movs	r3, #0
 800e80c:	603b      	str	r3, [r7, #0]
 800e80e:	2300      	movs	r3, #0
 800e810:	607b      	str	r3, [r7, #4]
			uint32_t sec_addr = 0x60000000 | 0x7FFF9;
 800e812:	4b34      	ldr	r3, [pc, #208]	@ (800e8e4 <ATP_operation+0xbb4>)
 800e814:	60bb      	str	r3, [r7, #8]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 800e816:	2264      	movs	r2, #100	@ 0x64
 800e818:	2100      	movs	r1, #0
 800e81a:	482e      	ldr	r0, [pc, #184]	@ (800e8d4 <ATP_operation+0xba4>)
 800e81c:	f00e fa4f 	bl	801ccbe <memset>
			HAL_Delay(100);
 800e820:	2064      	movs	r0, #100	@ 0x64
 800e822:	f002 fea3 	bl	801156c <HAL_Delay>
			HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data_1,7);
 800e826:	68b9      	ldr	r1, [r7, #8]
 800e828:	463a      	mov	r2, r7
 800e82a:	2307      	movs	r3, #7
 800e82c:	482e      	ldr	r0, [pc, #184]	@ (800e8e8 <ATP_operation+0xbb8>)
 800e82e:	f00a ffff 	bl	8019830 <HAL_SRAM_Read_8b>

			if(time_data_1[6]!= 0)
 800e832:	79bb      	ldrb	r3, [r7, #6]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d01a      	beq.n	800e86e <ATP_operation+0xb3e>
			{
				sprintf((char *)ATP_buffer, "{\"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x}\"\n\r",time_data_1[2],time_data_1[1],time_data_1[0],time_data_1[4],time_data_1[5],time_data_1[6]);
 800e838:	78bb      	ldrb	r3, [r7, #2]
 800e83a:	461c      	mov	r4, r3
 800e83c:	787b      	ldrb	r3, [r7, #1]
 800e83e:	461d      	mov	r5, r3
 800e840:	783b      	ldrb	r3, [r7, #0]
 800e842:	793a      	ldrb	r2, [r7, #4]
 800e844:	7979      	ldrb	r1, [r7, #5]
 800e846:	79b8      	ldrb	r0, [r7, #6]
 800e848:	9003      	str	r0, [sp, #12]
 800e84a:	9102      	str	r1, [sp, #8]
 800e84c:	9201      	str	r2, [sp, #4]
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	462b      	mov	r3, r5
 800e852:	4622      	mov	r2, r4
 800e854:	4925      	ldr	r1, [pc, #148]	@ (800e8ec <ATP_operation+0xbbc>)
 800e856:	481f      	ldr	r0, [pc, #124]	@ (800e8d4 <ATP_operation+0xba4>)
 800e858:	f00e f9ce 	bl	801cbf8 <siprintf>
				HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800e85c:	2264      	movs	r2, #100	@ 0x64
 800e85e:	491d      	ldr	r1, [pc, #116]	@ (800e8d4 <ATP_operation+0xba4>)
 800e860:	481d      	ldr	r0, [pc, #116]	@ (800e8d8 <ATP_operation+0xba8>)
 800e862:	f00b f971 	bl	8019b48 <HAL_UART_Transmit_IT>
				HAL_Delay(100);
 800e866:	2064      	movs	r0, #100	@ 0x64
 800e868:	f002 fe80 	bl	801156c <HAL_Delay>
				command_str[0]='T';
				command_str[1] = '2';
				command_str[2] = '2';
				command_str[3]= 'E';
			}
			break;
 800e86c:	e0f6      	b.n	800ea5c <ATP_operation+0xd2c>
				ATP_test = 1;
 800e86e:	4b20      	ldr	r3, [pc, #128]	@ (800e8f0 <ATP_operation+0xbc0>)
 800e870:	2201      	movs	r2, #1
 800e872:	701a      	strb	r2, [r3, #0]
				command_str[0]='T';
 800e874:	4b1f      	ldr	r3, [pc, #124]	@ (800e8f4 <ATP_operation+0xbc4>)
 800e876:	2254      	movs	r2, #84	@ 0x54
 800e878:	701a      	strb	r2, [r3, #0]
				command_str[1] = '2';
 800e87a:	4b1e      	ldr	r3, [pc, #120]	@ (800e8f4 <ATP_operation+0xbc4>)
 800e87c:	2232      	movs	r2, #50	@ 0x32
 800e87e:	705a      	strb	r2, [r3, #1]
				command_str[2] = '2';
 800e880:	4b1c      	ldr	r3, [pc, #112]	@ (800e8f4 <ATP_operation+0xbc4>)
 800e882:	2232      	movs	r2, #50	@ 0x32
 800e884:	709a      	strb	r2, [r3, #2]
				command_str[3]= 'E';
 800e886:	4b1b      	ldr	r3, [pc, #108]	@ (800e8f4 <ATP_operation+0xbc4>)
 800e888:	2245      	movs	r2, #69	@ 0x45
 800e88a:	70da      	strb	r2, [r3, #3]
			break;
 800e88c:	e0e6      	b.n	800ea5c <ATP_operation+0xd2c>
		case  NAND_FLASH_WRITE	:
			ATP_test_number= 0;
 800e88e:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c4 <ATP_operation+0xb94>)
 800e890:	2200      	movs	r2, #0
 800e892:	701a      	strb	r2, [r3, #0]
			break;
 800e894:	e0e2      	b.n	800ea5c <ATP_operation+0xd2c>

		case  NAND_FLASH_READ	:
			ATP_test_number=0;
 800e896:	4b0b      	ldr	r3, [pc, #44]	@ (800e8c4 <ATP_operation+0xb94>)
 800e898:	2200      	movs	r2, #0
 800e89a:	701a      	strb	r2, [r3, #0]
			get_NAND_stored_data();
 800e89c:	f000 fb22 	bl	800eee4 <get_NAND_stored_data>
			break;
 800e8a0:	e0dc      	b.n	800ea5c <ATP_operation+0xd2c>

		case  NAND_FLASH_ERASE	:
			ATP_test_number=0;
 800e8a2:	4b08      	ldr	r3, [pc, #32]	@ (800e8c4 <ATP_operation+0xb94>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	701a      	strb	r2, [r3, #0]
			uint16_t NandBlock=0;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	81fb      	strh	r3, [r7, #14]
//			uint8_t read_buffer[8192];
			nand_address.Page=0;
 800e8ac:	4b12      	ldr	r3, [pc, #72]	@ (800e8f8 <ATP_operation+0xbc8>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	801a      	strh	r2, [r3, #0]
			nand_address.Block=0;
 800e8b2:	4b11      	ldr	r3, [pc, #68]	@ (800e8f8 <ATP_operation+0xbc8>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	809a      	strh	r2, [r3, #4]
			nand_address.Plane=0;
 800e8b8:	4b0f      	ldr	r3, [pc, #60]	@ (800e8f8 <ATP_operation+0xbc8>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	805a      	strh	r2, [r3, #2]

			for(NandBlock = 0; NandBlock < MAX_BLOCK; NandBlock++)
 800e8be:	2300      	movs	r3, #0
 800e8c0:	81fb      	strh	r3, [r7, #14]
 800e8c2:	e032      	b.n	800e92a <ATP_operation+0xbfa>
 800e8c4:	2000036e 	.word	0x2000036e
 800e8c8:	20000340 	.word	0x20000340
 800e8cc:	20000310 	.word	0x20000310
 800e8d0:	0801f1a8 	.word	0x0801f1a8
 800e8d4:	20000384 	.word	0x20000384
 800e8d8:	20005964 	.word	0x20005964
 800e8dc:	0801f1d0 	.word	0x0801f1d0
 800e8e0:	0801f224 	.word	0x0801f224
 800e8e4:	6007fff9 	.word	0x6007fff9
 800e8e8:	20005b20 	.word	0x20005b20
 800e8ec:	0801f24c 	.word	0x0801f24c
 800e8f0:	2000036d 	.word	0x2000036d
 800e8f4:	20000358 	.word	0x20000358
 800e8f8:	200003e8 	.word	0x200003e8
			{
				nand_address.Block=NandBlock;
 800e8fc:	4a59      	ldr	r2, [pc, #356]	@ (800ea64 <ATP_operation+0xd34>)
 800e8fe:	89fb      	ldrh	r3, [r7, #14]
 800e900:	8093      	strh	r3, [r2, #4]
				if (HAL_NAND_Erase_Block(&hnand1, &nand_address) != HAL_OK)
 800e902:	4958      	ldr	r1, [pc, #352]	@ (800ea64 <ATP_operation+0xd34>)
 800e904:	4858      	ldr	r0, [pc, #352]	@ (800ea68 <ATP_operation+0xd38>)
 800e906:	f004 f89b 	bl	8012a40 <HAL_NAND_Erase_Block>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d009      	beq.n	800e924 <ATP_operation+0xbf4>
				{
					HAL_UART_Transmit_IT(&huart5, (uint8_t *)NdErStatus, strlen("Error erasing NAND.\n"));
 800e910:	4b56      	ldr	r3, [pc, #344]	@ (800ea6c <ATP_operation+0xd3c>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2214      	movs	r2, #20
 800e916:	4619      	mov	r1, r3
 800e918:	4855      	ldr	r0, [pc, #340]	@ (800ea70 <ATP_operation+0xd40>)
 800e91a:	f00b f915 	bl	8019b48 <HAL_UART_Transmit_IT>
					HAL_Delay(100);
 800e91e:	2064      	movs	r0, #100	@ 0x64
 800e920:	f002 fe24 	bl	801156c <HAL_Delay>
			for(NandBlock = 0; NandBlock < MAX_BLOCK; NandBlock++)
 800e924:	89fb      	ldrh	r3, [r7, #14]
 800e926:	3301      	adds	r3, #1
 800e928:	81fb      	strh	r3, [r7, #14]
 800e92a:	89fb      	ldrh	r3, [r7, #14]
 800e92c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800e930:	4293      	cmp	r3, r2
 800e932:	d9e3      	bls.n	800e8fc <ATP_operation+0xbcc>
////						HAL_Delay(100);
//					}
//				}
//				memset(&read_buffer[0],0,sizeof(read_buffer));
			}
			HAL_UART_Transmit_IT(&huart5, (uint8_t *)NdStatus, strlen("NAND erased successfully!\n"));
 800e934:	4b4f      	ldr	r3, [pc, #316]	@ (800ea74 <ATP_operation+0xd44>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	221a      	movs	r2, #26
 800e93a:	4619      	mov	r1, r3
 800e93c:	484c      	ldr	r0, [pc, #304]	@ (800ea70 <ATP_operation+0xd40>)
 800e93e:	f00b f903 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800e942:	2064      	movs	r0, #100	@ 0x64
 800e944:	f002 fe12 	bl	801156c <HAL_Delay>
			nand_cyclic_run = 0;
 800e948:	4b4b      	ldr	r3, [pc, #300]	@ (800ea78 <ATP_operation+0xd48>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	701a      	strb	r2, [r3, #0]
			size_counter = 0;
 800e94e:	4b4b      	ldr	r3, [pc, #300]	@ (800ea7c <ATP_operation+0xd4c>)
 800e950:	2200      	movs	r2, #0
 800e952:	801a      	strh	r2, [r3, #0]
			update_NAND_CyclicAddr();
 800e954:	f000 fd84 	bl	800f460 <update_NAND_CyclicAddr>
			update_SRAM_Addr();
 800e958:	f000 fda8 	bl	800f4ac <update_SRAM_Addr>
			Init_NAND_addr();
 800e95c:	f000 fdfc 	bl	800f558 <Init_NAND_addr>

			break;
 800e960:	e07c      	b.n	800ea5c <ATP_operation+0xd2c>

		case LoopBack_RS232: //RS-232
			ATP_test_number=0;
 800e962:	4b47      	ldr	r3, [pc, #284]	@ (800ea80 <ATP_operation+0xd50>)
 800e964:	2200      	movs	r2, #0
 800e966:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart5, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 800e968:	4846      	ldr	r0, [pc, #280]	@ (800ea84 <ATP_operation+0xd54>)
 800e96a:	f7fd fc91 	bl	800c290 <strlen>
 800e96e:	4603      	mov	r3, r0
 800e970:	b29b      	uxth	r3, r3
 800e972:	461a      	mov	r2, r3
 800e974:	4943      	ldr	r1, [pc, #268]	@ (800ea84 <ATP_operation+0xd54>)
 800e976:	483e      	ldr	r0, [pc, #248]	@ (800ea70 <ATP_operation+0xd40>)
 800e978:	f00b f8e6 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800e97c:	2064      	movs	r0, #100	@ 0x64
 800e97e:	f002 fdf5 	bl	801156c <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 800e982:	2214      	movs	r2, #20
 800e984:	2100      	movs	r1, #0
 800e986:	483f      	ldr	r0, [pc, #252]	@ (800ea84 <ATP_operation+0xd54>)
 800e988:	f00e f999 	bl	801ccbe <memset>

			break;
 800e98c:	e066      	b.n	800ea5c <ATP_operation+0xd2c>
		case LoopBack_RS422: //RS-422
			ATP_test_number=0;
 800e98e:	4b3c      	ldr	r3, [pc, #240]	@ (800ea80 <ATP_operation+0xd50>)
 800e990:	2200      	movs	r2, #0
 800e992:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 800e994:	2201      	movs	r2, #1
 800e996:	2101      	movs	r1, #1
 800e998:	483b      	ldr	r0, [pc, #236]	@ (800ea88 <ATP_operation+0xd58>)
 800e99a:	f003 f9ab 	bl	8011cf4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800e99e:	2001      	movs	r0, #1
 800e9a0:	f002 fde4 	bl	801156c <HAL_Delay>
			HAL_UART_Transmit_IT(&huart8, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 800e9a4:	4837      	ldr	r0, [pc, #220]	@ (800ea84 <ATP_operation+0xd54>)
 800e9a6:	f7fd fc73 	bl	800c290 <strlen>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	4934      	ldr	r1, [pc, #208]	@ (800ea84 <ATP_operation+0xd54>)
 800e9b2:	4836      	ldr	r0, [pc, #216]	@ (800ea8c <ATP_operation+0xd5c>)
 800e9b4:	f00b f8c8 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800e9b8:	2064      	movs	r0, #100	@ 0x64
 800e9ba:	f002 fdd7 	bl	801156c <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 800e9be:	2214      	movs	r2, #20
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	4830      	ldr	r0, [pc, #192]	@ (800ea84 <ATP_operation+0xd54>)
 800e9c4:	f00e f97b 	bl	801ccbe <memset>
			HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	2101      	movs	r1, #1
 800e9cc:	482e      	ldr	r0, [pc, #184]	@ (800ea88 <ATP_operation+0xd58>)
 800e9ce:	f003 f991 	bl	8011cf4 <HAL_GPIO_WritePin>

			break;
 800e9d2:	e043      	b.n	800ea5c <ATP_operation+0xd2c>
		case LoopBack1_RS485: //RS-485
			ATP_test_number=0;
 800e9d4:	4b2a      	ldr	r3, [pc, #168]	@ (800ea80 <ATP_operation+0xd50>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, 1);
 800e9da:	2201      	movs	r2, #1
 800e9dc:	2102      	movs	r1, #2
 800e9de:	482a      	ldr	r0, [pc, #168]	@ (800ea88 <ATP_operation+0xd58>)
 800e9e0:	f003 f988 	bl	8011cf4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_IT(&huart10, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 800e9e4:	4827      	ldr	r0, [pc, #156]	@ (800ea84 <ATP_operation+0xd54>)
 800e9e6:	f7fd fc53 	bl	800c290 <strlen>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	4924      	ldr	r1, [pc, #144]	@ (800ea84 <ATP_operation+0xd54>)
 800e9f2:	4827      	ldr	r0, [pc, #156]	@ (800ea90 <ATP_operation+0xd60>)
 800e9f4:	f00b f8a8 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800e9f8:	2064      	movs	r0, #100	@ 0x64
 800e9fa:	f002 fdb7 	bl	801156c <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 800e9fe:	2214      	movs	r2, #20
 800ea00:	2100      	movs	r1, #0
 800ea02:	4820      	ldr	r0, [pc, #128]	@ (800ea84 <ATP_operation+0xd54>)
 800ea04:	f00e f95b 	bl	801ccbe <memset>
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, 0);
 800ea08:	2200      	movs	r2, #0
 800ea0a:	2102      	movs	r1, #2
 800ea0c:	481e      	ldr	r0, [pc, #120]	@ (800ea88 <ATP_operation+0xd58>)
 800ea0e:	f003 f971 	bl	8011cf4 <HAL_GPIO_WritePin>

			break;
 800ea12:	e023      	b.n	800ea5c <ATP_operation+0xd2c>
		case LoopBack2_RS485: //RS-485
			ATP_test_number=0;
 800ea14:	4b1a      	ldr	r3, [pc, #104]	@ (800ea80 <ATP_operation+0xd50>)
 800ea16:	2200      	movs	r2, #0
 800ea18:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, 1);
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	2104      	movs	r1, #4
 800ea1e:	481a      	ldr	r0, [pc, #104]	@ (800ea88 <ATP_operation+0xd58>)
 800ea20:	f003 f968 	bl	8011cf4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_IT(&huart4, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 800ea24:	4817      	ldr	r0, [pc, #92]	@ (800ea84 <ATP_operation+0xd54>)
 800ea26:	f7fd fc33 	bl	800c290 <strlen>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	461a      	mov	r2, r3
 800ea30:	4914      	ldr	r1, [pc, #80]	@ (800ea84 <ATP_operation+0xd54>)
 800ea32:	4818      	ldr	r0, [pc, #96]	@ (800ea94 <ATP_operation+0xd64>)
 800ea34:	f00b f888 	bl	8019b48 <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800ea38:	2064      	movs	r0, #100	@ 0x64
 800ea3a:	f002 fd97 	bl	801156c <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 800ea3e:	2214      	movs	r2, #20
 800ea40:	2100      	movs	r1, #0
 800ea42:	4810      	ldr	r0, [pc, #64]	@ (800ea84 <ATP_operation+0xd54>)
 800ea44:	f00e f93b 	bl	801ccbe <memset>
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, 0);
 800ea48:	2200      	movs	r2, #0
 800ea4a:	2104      	movs	r1, #4
 800ea4c:	480e      	ldr	r0, [pc, #56]	@ (800ea88 <ATP_operation+0xd58>)
 800ea4e:	f003 f951 	bl	8011cf4 <HAL_GPIO_WritePin>

			break;
 800ea52:	e003      	b.n	800ea5c <ATP_operation+0xd2c>
		default:
			ATP_test_number=0;
 800ea54:	4b0a      	ldr	r3, [pc, #40]	@ (800ea80 <ATP_operation+0xd50>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	701a      	strb	r2, [r3, #0]
			break;
 800ea5a:	bf00      	nop
		}

	}

}
 800ea5c:	bf00      	nop
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bdb0      	pop	{r4, r5, r7, pc}
 800ea64:	200003e8 	.word	0x200003e8
 800ea68:	20005b78 	.word	0x20005b78
 800ea6c:	20000080 	.word	0x20000080
 800ea70:	20005964 	.word	0x20005964
 800ea74:	2000007c 	.word	0x2000007c
 800ea78:	200055b5 	.word	0x200055b5
 800ea7c:	200055b8 	.word	0x200055b8
 800ea80:	2000036e 	.word	0x2000036e
 800ea84:	20000370 	.word	0x20000370
 800ea88:	42020000 	.word	0x42020000
 800ea8c:	200059f8 	.word	0x200059f8
 800ea90:	20005a8c 	.word	0x20005a8c
 800ea94:	200058d0 	.word	0x200058d0

0800ea98 <NAND_operation>:
 * @brief Performs NAND operations like writing, reading, and checking block status.
 * This function writes data to NAND, reads it back to verify, checks and updates
 * block status based on the comparison result.
 */
void NAND_operation(void)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0


	HAL_GPIO_TogglePin(GPIOE, LED5_Pin);  // Toggle status LED
 800eaa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800eaa6:	4845      	ldr	r0, [pc, #276]	@ (800ebbc <NAND_operation+0x124>)
 800eaa8:	f003 f93c 	bl	8011d24 <HAL_GPIO_TogglePin>
	// Move to the next block if all pages in the current block have been written
	if (nand_address.Page > 127)
 800eaac:	4b44      	ldr	r3, [pc, #272]	@ (800ebc0 <NAND_operation+0x128>)
 800eaae:	881b      	ldrh	r3, [r3, #0]
 800eab0:	2b7f      	cmp	r3, #127	@ 0x7f
 800eab2:	d90b      	bls.n	800eacc <NAND_operation+0x34>
	{
		get_Good_NAND_block();
 800eab4:	f000 f982 	bl	800edbc <get_Good_NAND_block>
		nand_address.Page = 0;
 800eab8:	4b41      	ldr	r3, [pc, #260]	@ (800ebc0 <NAND_operation+0x128>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	801a      	strh	r2, [r3, #0]
		HAL_NAND_Erase_Block(&hnand1, &nand_address);
 800eabe:	4940      	ldr	r1, [pc, #256]	@ (800ebc0 <NAND_operation+0x128>)
 800eac0:	4840      	ldr	r0, [pc, #256]	@ (800ebc4 <NAND_operation+0x12c>)
 800eac2:	f003 ffbd 	bl	8012a40 <HAL_NAND_Erase_Block>
		HAL_Delay(100);
 800eac6:	2064      	movs	r0, #100	@ 0x64
 800eac8:	f002 fd50 	bl	801156c <HAL_Delay>
	}

	memset(read_data, 0, 8192);
 800eacc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ead0:	2100      	movs	r1, #0
 800ead2:	483d      	ldr	r0, [pc, #244]	@ (800ebc8 <NAND_operation+0x130>)
 800ead4:	f00e f8f3 	bl	801ccbe <memset>
	memset(NAND_data, 0, 8192);
 800ead8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800eadc:	2100      	movs	r1, #0
 800eade:	483b      	ldr	r0, [pc, #236]	@ (800ebcc <NAND_operation+0x134>)
 800eae0:	f00e f8ed 	bl	801ccbe <memset>
	uint8_t CLEAN_DATA[8192] = {0};
 800eae4:	f107 0308 	add.w	r3, r7, #8
 800eae8:	461a      	mov	r2, r3
 800eaea:	2300      	movs	r3, #0
 800eaec:	f842 3c04 	str.w	r3, [r2, #-4]
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	f641 73fc 	movw	r3, #8188	@ 0x1ffc
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	2100      	movs	r1, #0
 800eafa:	f00e f8e0 	bl	801ccbe <memset>
	// Prepare data for NAND write
	get_NAND_data(NAND_data);
 800eafe:	4833      	ldr	r0, [pc, #204]	@ (800ebcc <NAND_operation+0x134>)
 800eb00:	f000 fc2e 	bl	800f360 <get_NAND_data>

/*******************************this is for testing purpose ***********************************************/
	memset(NAND_data, 0, 8192);
 800eb04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800eb08:	2100      	movs	r1, #0
 800eb0a:	4830      	ldr	r0, [pc, #192]	@ (800ebcc <NAND_operation+0x134>)
 800eb0c:	f00e f8d7 	bl	801ccbe <memset>
	get_NAND_data(NAND_data);
 800eb10:	482e      	ldr	r0, [pc, #184]	@ (800ebcc <NAND_operation+0x134>)
 800eb12:	f000 fc25 	bl	800f360 <get_NAND_data>
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 800eb16:	4b2e      	ldr	r3, [pc, #184]	@ (800ebd0 <NAND_operation+0x138>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	f107 0208 	add.w	r2, r7, #8
 800eb20:	3a04      	subs	r2, #4
 800eb22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eb26:	482b      	ldr	r0, [pc, #172]	@ (800ebd4 <NAND_operation+0x13c>)
 800eb28:	f00a fedc 	bl	80198e4 <HAL_SRAM_Write_8b>

//	HAL_UART_Transmit(&huart5, (uint8_t *)&NAND_data, 8192,0xFFFFFF);
//	HAL_Delay(100);
	// Write data to NAND flash
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	4a27      	ldr	r2, [pc, #156]	@ (800ebcc <NAND_operation+0x134>)
 800eb30:	4923      	ldr	r1, [pc, #140]	@ (800ebc0 <NAND_operation+0x128>)
 800eb32:	4824      	ldr	r0, [pc, #144]	@ (800ebc4 <NAND_operation+0x12c>)
 800eb34:	f003 fb50 	bl	80121d8 <HAL_NAND_Write_Page_8b>

	// Read data back from NAND flash for verification
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *) &nand_address, read_data, 1);
 800eb38:	2301      	movs	r3, #1
 800eb3a:	4a23      	ldr	r2, [pc, #140]	@ (800ebc8 <NAND_operation+0x130>)
 800eb3c:	4920      	ldr	r1, [pc, #128]	@ (800ebc0 <NAND_operation+0x128>)
 800eb3e:	4821      	ldr	r0, [pc, #132]	@ (800ebc4 <NAND_operation+0x12c>)
 800eb40:	f003 f9f0 	bl	8011f24 <HAL_NAND_Read_Page_8b>
	//	HAL_UART_Transmit_IT(&huart4, read_data, sizeof(read_data));
	//	HAL_Delay(20);
	// Calculate bit difference between written and read data
	uint16_t bit_difference = calculate_hamming_distance(NAND_data, read_data, 8192);
 800eb44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800eb48:	491f      	ldr	r1, [pc, #124]	@ (800ebc8 <NAND_operation+0x130>)
 800eb4a:	4820      	ldr	r0, [pc, #128]	@ (800ebcc <NAND_operation+0x134>)
 800eb4c:	f000 f8cb 	bl	800ece6 <calculate_hamming_distance>
 800eb50:	4603      	mov	r3, r0
 800eb52:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800eb56:	f102 0206 	add.w	r2, r2, #6
 800eb5a:	8013      	strh	r3, [r2, #0]

	// Check if data read matches data written
	if (bit_difference <50) // Data matches
 800eb5c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800eb60:	f103 0306 	add.w	r3, r3, #6
 800eb64:	881b      	ldrh	r3, [r3, #0]
 800eb66:	2b31      	cmp	r3, #49	@ 0x31
 800eb68:	d813      	bhi.n	800eb92 <NAND_operation+0xfa>
	{
		if (nand_address.Page == 0)
 800eb6a:	4b15      	ldr	r3, [pc, #84]	@ (800ebc0 <NAND_operation+0x128>)
 800eb6c:	881b      	ldrh	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d108      	bne.n	800eb84 <NAND_operation+0xec>
		{
			set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1); // Mark block as good
 800eb72:	4b13      	ldr	r3, [pc, #76]	@ (800ebc0 <NAND_operation+0x128>)
 800eb74:	8818      	ldrh	r0, [r3, #0]
 800eb76:	4b12      	ldr	r3, [pc, #72]	@ (800ebc0 <NAND_operation+0x128>)
 800eb78:	8899      	ldrh	r1, [r3, #4]
 800eb7a:	4b11      	ldr	r3, [pc, #68]	@ (800ebc0 <NAND_operation+0x128>)
 800eb7c:	885a      	ldrh	r2, [r3, #2]
 800eb7e:	2301      	movs	r3, #1
 800eb80:	f000 f85c 	bl	800ec3c <set_NAND_block_status>
		}
		nand_address.Page++;
 800eb84:	4b0e      	ldr	r3, [pc, #56]	@ (800ebc0 <NAND_operation+0x128>)
 800eb86:	881b      	ldrh	r3, [r3, #0]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	4b0c      	ldr	r3, [pc, #48]	@ (800ebc0 <NAND_operation+0x128>)
 800eb8e:	801a      	strh	r2, [r3, #0]
 800eb90:	e007      	b.n	800eba2 <NAND_operation+0x10a>

	}
	else // Data mismatch - possible bad block
	{
		bad_block_check_counter = 0 ;
 800eb92:	4b11      	ldr	r3, [pc, #68]	@ (800ebd8 <NAND_operation+0x140>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	801a      	strh	r2, [r3, #0]
		handle_bad_block(); // Call function to handle the bad block scenario
 800eb98:	f000 f8ce 	bl	800ed38 <handle_bad_block>
		bad_block_check_counter = 0;
 800eb9c:	4b0e      	ldr	r3, [pc, #56]	@ (800ebd8 <NAND_operation+0x140>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	801a      	strh	r2, [r3, #0]
	}

	nand_update = 1;
 800eba2:	4b0e      	ldr	r3, [pc, #56]	@ (800ebdc <NAND_operation+0x144>)
 800eba4:	2201      	movs	r2, #1
 800eba6:	701a      	strb	r2, [r3, #0]
	update_NAND_addr();
 800eba8:	f000 fc46 	bl	800f438 <update_NAND_addr>
	update_NAND_CyclicAddr();
 800ebac:	f000 fc58 	bl	800f460 <update_NAND_CyclicAddr>

}
 800ebb0:	bf00      	nop
 800ebb2:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	42021000 	.word	0x42021000
 800ebc0:	200003e8 	.word	0x200003e8
 800ebc4:	20005b78 	.word	0x20005b78
 800ebc8:	200003f4 	.word	0x200003f4
 800ebcc:	200023f4 	.word	0x200023f4
 800ebd0:	20000088 	.word	0x20000088
 800ebd4:	20005b20 	.word	0x20005b20
 800ebd8:	200055b6 	.word	0x200055b6
 800ebdc:	200055b4 	.word	0x200055b4

0800ebe0 <get_NAND_block_status>:
/**
 * @brief Reads and updates the status of each block in NAND.
 * Sets the block status array based on whether the block is good (0xFF) or bad (0x00).
 */
void get_NAND_block_status()
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 4096; i++)
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	80fb      	strh	r3, [r7, #6]
 800ebea:	e016      	b.n	800ec1a <get_NAND_block_status+0x3a>
	{
		nand_address.Block = i;
 800ebec:	4a0f      	ldr	r2, [pc, #60]	@ (800ec2c <get_NAND_block_status+0x4c>)
 800ebee:	88fb      	ldrh	r3, [r7, #6]
 800ebf0:	8093      	strh	r3, [r2, #4]
		HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address, spare_buffer, 1);
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	4a0e      	ldr	r2, [pc, #56]	@ (800ec30 <get_NAND_block_status+0x50>)
 800ebf6:	490d      	ldr	r1, [pc, #52]	@ (800ec2c <get_NAND_block_status+0x4c>)
 800ebf8:	480e      	ldr	r0, [pc, #56]	@ (800ec34 <get_NAND_block_status+0x54>)
 800ebfa:	f003 fc45 	bl	8012488 <HAL_NAND_Read_SpareArea_8b>
		nand_block_status[i] = (spare_buffer[0] == 0xFF) ? 1 : 0;
 800ebfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ec30 <get_NAND_block_status+0x50>)
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	2bff      	cmp	r3, #255	@ 0xff
 800ec04:	bf0c      	ite	eq
 800ec06:	2301      	moveq	r3, #1
 800ec08:	2300      	movne	r3, #0
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	88fb      	ldrh	r3, [r7, #6]
 800ec0e:	4611      	mov	r1, r2
 800ec10:	4a09      	ldr	r2, [pc, #36]	@ (800ec38 <get_NAND_block_status+0x58>)
 800ec12:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < 4096; i++)
 800ec14:	88fb      	ldrh	r3, [r7, #6]
 800ec16:	3301      	adds	r3, #1
 800ec18:	80fb      	strh	r3, [r7, #6]
 800ec1a:	88fb      	ldrh	r3, [r7, #6]
 800ec1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec20:	d3e4      	bcc.n	800ebec <get_NAND_block_status+0xc>
	}
}
 800ec22:	bf00      	nop
 800ec24:	bf00      	nop
 800ec26:	3708      	adds	r7, #8
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	200003e8 	.word	0x200003e8
 800ec30:	200043f4 	.word	0x200043f4
 800ec34:	20005b78 	.word	0x20005b78
 800ec38:	200045b4 	.word	0x200045b4

0800ec3c <set_NAND_block_status>:
 * @param block The block number to update.
 * @param plane The NAND plane number.
 * @param block_state 1 for good block, 0 for bad block.
 */
void set_NAND_block_status(uint16_t page, uint16_t block, uint16_t plane, uint8_t block_state)
{
 800ec3c:	b590      	push	{r4, r7, lr}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	4604      	mov	r4, r0
 800ec44:	4608      	mov	r0, r1
 800ec46:	4611      	mov	r1, r2
 800ec48:	461a      	mov	r2, r3
 800ec4a:	4623      	mov	r3, r4
 800ec4c:	80fb      	strh	r3, [r7, #6]
 800ec4e:	4603      	mov	r3, r0
 800ec50:	80bb      	strh	r3, [r7, #4]
 800ec52:	460b      	mov	r3, r1
 800ec54:	807b      	strh	r3, [r7, #2]
 800ec56:	4613      	mov	r3, r2
 800ec58:	707b      	strb	r3, [r7, #1]
	NAND_AddressTypeDef nand_address_block = {0, block, plane};
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	813b      	strh	r3, [r7, #8]
 800ec5e:	88bb      	ldrh	r3, [r7, #4]
 800ec60:	817b      	strh	r3, [r7, #10]
 800ec62:	887b      	ldrh	r3, [r7, #2]
 800ec64:	81bb      	strh	r3, [r7, #12]
	HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 800ec66:	f107 0108 	add.w	r1, r7, #8
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	4a0d      	ldr	r2, [pc, #52]	@ (800eca4 <set_NAND_block_status+0x68>)
 800ec6e:	480e      	ldr	r0, [pc, #56]	@ (800eca8 <set_NAND_block_status+0x6c>)
 800ec70:	f003 fc0a 	bl	8012488 <HAL_NAND_Read_SpareArea_8b>

	spare_buffer[0] = (block_state) ? 0xFF : 0x00;  // Set good (0xFF) or bad (0x00)
 800ec74:	787b      	ldrb	r3, [r7, #1]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d001      	beq.n	800ec7e <set_NAND_block_status+0x42>
 800ec7a:	22ff      	movs	r2, #255	@ 0xff
 800ec7c:	e000      	b.n	800ec80 <set_NAND_block_status+0x44>
 800ec7e:	2200      	movs	r2, #0
 800ec80:	4b08      	ldr	r3, [pc, #32]	@ (800eca4 <set_NAND_block_status+0x68>)
 800ec82:	701a      	strb	r2, [r3, #0]
	nand_block_status[block] = block_state;          // Update block status array
 800ec84:	88bb      	ldrh	r3, [r7, #4]
 800ec86:	4909      	ldr	r1, [pc, #36]	@ (800ecac <set_NAND_block_status+0x70>)
 800ec88:	787a      	ldrb	r2, [r7, #1]
 800ec8a:	54ca      	strb	r2, [r1, r3]
	HAL_NAND_Write_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 800ec8c:	f107 0108 	add.w	r1, r7, #8
 800ec90:	2301      	movs	r3, #1
 800ec92:	4a04      	ldr	r2, [pc, #16]	@ (800eca4 <set_NAND_block_status+0x68>)
 800ec94:	4804      	ldr	r0, [pc, #16]	@ (800eca8 <set_NAND_block_status+0x6c>)
 800ec96:	f003 fd62 	bl	801275e <HAL_NAND_Write_SpareArea_8b>
}
 800ec9a:	bf00      	nop
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd90      	pop	{r4, r7, pc}
 800eca2:	bf00      	nop
 800eca4:	200043f4 	.word	0x200043f4
 800eca8:	20005b78 	.word	0x20005b78
 800ecac:	200045b4 	.word	0x200045b4

0800ecb0 <count_set_bits>:
 * @brief Counts the number of set bits (1s) in a byte.
 * @param byte The byte to analyze.
 * @return The number of set bits in the byte.
 */
int count_set_bits(uint8_t byte)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b085      	sub	sp, #20
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	60fb      	str	r3, [r7, #12]
	while (byte)
 800ecbe:	e008      	b.n	800ecd2 <count_set_bits+0x22>
	{
		count += byte & 1;
 800ecc0:	79fb      	ldrb	r3, [r7, #7]
 800ecc2:	f003 0301 	and.w	r3, r3, #1
 800ecc6:	68fa      	ldr	r2, [r7, #12]
 800ecc8:	4413      	add	r3, r2
 800ecca:	60fb      	str	r3, [r7, #12]
		byte >>= 1;
 800eccc:	79fb      	ldrb	r3, [r7, #7]
 800ecce:	085b      	lsrs	r3, r3, #1
 800ecd0:	71fb      	strb	r3, [r7, #7]
	while (byte)
 800ecd2:	79fb      	ldrb	r3, [r7, #7]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1f3      	bne.n	800ecc0 <count_set_bits+0x10>
	}
	return count;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3714      	adds	r7, #20
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr

0800ece6 <calculate_hamming_distance>:
 * @param str2 Pointer to the second 8192-byte string.
 * @param length Length of the strings to compare (8192 bytes).
 * @return The number of differing bits between the two strings.
 */
int calculate_hamming_distance(const uint8_t *str1, const uint8_t *str2, size_t length)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b086      	sub	sp, #24
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	60f8      	str	r0, [r7, #12]
 800ecee:	60b9      	str	r1, [r7, #8]
 800ecf0:	607a      	str	r2, [r7, #4]
	int differing_bits = 0;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	613b      	str	r3, [r7, #16]
 800ecfa:	e013      	b.n	800ed24 <calculate_hamming_distance+0x3e>
	{
		differing_bits += count_set_bits(str1[i] ^ str2[i]);  // XOR and count set bits in result
 800ecfc:	68fa      	ldr	r2, [r7, #12]
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	4413      	add	r3, r2
 800ed02:	781a      	ldrb	r2, [r3, #0]
 800ed04:	68b9      	ldr	r1, [r7, #8]
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	440b      	add	r3, r1
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	4053      	eors	r3, r2
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7ff ffcd 	bl	800ecb0 <count_set_bits>
 800ed16:	4602      	mov	r2, r0
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	3301      	adds	r3, #1
 800ed22:	613b      	str	r3, [r7, #16]
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d3e7      	bcc.n	800ecfc <calculate_hamming_distance+0x16>
	}
	return differing_bits;
 800ed2c:	697b      	ldr	r3, [r7, #20]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3718      	adds	r7, #24
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
	...

0800ed38 <handle_bad_block>:
 * @brief Handles bad block processing in NAND by erasing and relocating data.
 * If data verification fails, the function marks the block as bad, and attempts to write data
 * to the next available block.
 */
void handle_bad_block(void)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	af00      	add	r7, sp, #0
	nand_address.Page = 0;
 800ed3c:	4b1a      	ldr	r3, [pc, #104]	@ (800eda8 <handle_bad_block+0x70>)
 800ed3e:	2200      	movs	r2, #0
 800ed40:	801a      	strh	r2, [r3, #0]
	HAL_NAND_Erase_Block(&hnand1, &nand_address);
 800ed42:	4919      	ldr	r1, [pc, #100]	@ (800eda8 <handle_bad_block+0x70>)
 800ed44:	4819      	ldr	r0, [pc, #100]	@ (800edac <handle_bad_block+0x74>)
 800ed46:	f003 fe7b 	bl	8012a40 <HAL_NAND_Erase_Block>
	HAL_Delay(100);
 800ed4a:	2064      	movs	r0, #100	@ 0x64
 800ed4c:	f002 fc0e 	bl	801156c <HAL_Delay>
	if(bad_block_check_counter++ > 4094 )
 800ed50:	4b17      	ldr	r3, [pc, #92]	@ (800edb0 <handle_bad_block+0x78>)
 800ed52:	881b      	ldrh	r3, [r3, #0]
 800ed54:	1c5a      	adds	r2, r3, #1
 800ed56:	b291      	uxth	r1, r2
 800ed58:	4a15      	ldr	r2, [pc, #84]	@ (800edb0 <handle_bad_block+0x78>)
 800ed5a:	8011      	strh	r1, [r2, #0]
 800ed5c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d81f      	bhi.n	800eda4 <handle_bad_block+0x6c>
	{
		return ;
	}
	// Attempt to rewrite data after erasing the block
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 800ed64:	2301      	movs	r3, #1
 800ed66:	4a13      	ldr	r2, [pc, #76]	@ (800edb4 <handle_bad_block+0x7c>)
 800ed68:	490f      	ldr	r1, [pc, #60]	@ (800eda8 <handle_bad_block+0x70>)
 800ed6a:	4810      	ldr	r0, [pc, #64]	@ (800edac <handle_bad_block+0x74>)
 800ed6c:	f003 fa34 	bl	80121d8 <HAL_NAND_Write_Page_8b>
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *)&nand_address, read_data, 1);
 800ed70:	2301      	movs	r3, #1
 800ed72:	4a11      	ldr	r2, [pc, #68]	@ (800edb8 <handle_bad_block+0x80>)
 800ed74:	490c      	ldr	r1, [pc, #48]	@ (800eda8 <handle_bad_block+0x70>)
 800ed76:	480d      	ldr	r0, [pc, #52]	@ (800edac <handle_bad_block+0x74>)
 800ed78:	f003 f8d4 	bl	8011f24 <HAL_NAND_Read_Page_8b>

		nand_address.Page++;
	}
	else // Mark block as bad and attempt to move data
	{
		set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 0); // Mark as bad
 800ed7c:	4b0a      	ldr	r3, [pc, #40]	@ (800eda8 <handle_bad_block+0x70>)
 800ed7e:	8818      	ldrh	r0, [r3, #0]
 800ed80:	4b09      	ldr	r3, [pc, #36]	@ (800eda8 <handle_bad_block+0x70>)
 800ed82:	8899      	ldrh	r1, [r3, #4]
 800ed84:	4b08      	ldr	r3, [pc, #32]	@ (800eda8 <handle_bad_block+0x70>)
 800ed86:	885a      	ldrh	r2, [r3, #2]
 800ed88:	2300      	movs	r3, #0
 800ed8a:	f7ff ff57 	bl	800ec3c <set_NAND_block_status>
		nand_address.Page = 0;
 800ed8e:	4b06      	ldr	r3, [pc, #24]	@ (800eda8 <handle_bad_block+0x70>)
 800ed90:	2200      	movs	r2, #0
 800ed92:	801a      	strh	r2, [r3, #0]
		get_Good_NAND_block();
 800ed94:	f000 f812 	bl	800edbc <get_Good_NAND_block>
		handle_bad_block();
 800ed98:	f7ff ffce 	bl	800ed38 <handle_bad_block>
		HAL_Delay(10);
 800ed9c:	200a      	movs	r0, #10
 800ed9e:	f002 fbe5 	bl	801156c <HAL_Delay>
 800eda2:	e000      	b.n	800eda6 <handle_bad_block+0x6e>
		return ;
 800eda4:	bf00      	nop
	}
}
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	200003e8 	.word	0x200003e8
 800edac:	20005b78 	.word	0x20005b78
 800edb0:	200055b6 	.word	0x200055b6
 800edb4:	200023f4 	.word	0x200023f4
 800edb8:	200003f4 	.word	0x200003f4

0800edbc <get_Good_NAND_block>:

void get_Good_NAND_block()
{
 800edbc:	b480      	push	{r7}
 800edbe:	af00      	add	r7, sp, #0
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 800edc0:	e010      	b.n	800ede4 <get_Good_NAND_block+0x28>
	{
		nand_address.Block++;
 800edc2:	4b1a      	ldr	r3, [pc, #104]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800edc4:	889b      	ldrh	r3, [r3, #4]
 800edc6:	3301      	adds	r3, #1
 800edc8:	b29a      	uxth	r2, r3
 800edca:	4b18      	ldr	r3, [pc, #96]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800edcc:	809a      	strh	r2, [r3, #4]
		// Handle block wrapping around in case of overflow
		if (nand_address.Block > 4095)
 800edce:	4b17      	ldr	r3, [pc, #92]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800edd0:	889b      	ldrh	r3, [r3, #4]
 800edd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edd6:	d305      	bcc.n	800ede4 <get_Good_NAND_block+0x28>
		{
			nand_address.Block = 0;
 800edd8:	4b14      	ldr	r3, [pc, #80]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800edda:	2200      	movs	r2, #0
 800eddc:	809a      	strh	r2, [r3, #4]
			nand_cyclic_run = 1;
 800edde:	4b14      	ldr	r3, [pc, #80]	@ (800ee30 <get_Good_NAND_block+0x74>)
 800ede0:	2201      	movs	r2, #1
 800ede2:	701a      	strb	r2, [r3, #0]
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 800ede4:	4b11      	ldr	r3, [pc, #68]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800ede6:	889b      	ldrh	r3, [r3, #4]
 800ede8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800edec:	4293      	cmp	r3, r2
 800edee:	d806      	bhi.n	800edfe <get_Good_NAND_block+0x42>
 800edf0:	4b0e      	ldr	r3, [pc, #56]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800edf2:	889b      	ldrh	r3, [r3, #4]
 800edf4:	3301      	adds	r3, #1
 800edf6:	4a0f      	ldr	r2, [pc, #60]	@ (800ee34 <get_Good_NAND_block+0x78>)
 800edf8:	5cd3      	ldrb	r3, [r2, r3]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d0e1      	beq.n	800edc2 <get_Good_NAND_block+0x6>
		}
	}
	nand_address.Block++;
 800edfe:	4b0b      	ldr	r3, [pc, #44]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800ee00:	889b      	ldrh	r3, [r3, #4]
 800ee02:	3301      	adds	r3, #1
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	4b09      	ldr	r3, [pc, #36]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800ee08:	809a      	strh	r2, [r3, #4]
	if (nand_address.Block > 4095)
 800ee0a:	4b08      	ldr	r3, [pc, #32]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800ee0c:	889b      	ldrh	r3, [r3, #4]
 800ee0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee12:	d305      	bcc.n	800ee20 <get_Good_NAND_block+0x64>
	{
		nand_address.Block = 0;
 800ee14:	4b05      	ldr	r3, [pc, #20]	@ (800ee2c <get_Good_NAND_block+0x70>)
 800ee16:	2200      	movs	r2, #0
 800ee18:	809a      	strh	r2, [r3, #4]
		nand_cyclic_run = 1;
 800ee1a:	4b05      	ldr	r3, [pc, #20]	@ (800ee30 <get_Good_NAND_block+0x74>)
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	701a      	strb	r2, [r3, #0]
	}
}
 800ee20:	bf00      	nop
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	200003e8 	.word	0x200003e8
 800ee30:	200055b5 	.word	0x200055b5
 800ee34:	200045b4 	.word	0x200045b4

0800ee38 <data_fetch>:


void data_fetch(uint16_t start_block,uint16_t end_block)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b086      	sub	sp, #24
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	4603      	mov	r3, r0
 800ee40:	460a      	mov	r2, r1
 800ee42:	80fb      	strh	r3, [r7, #6]
 800ee44:	4613      	mov	r3, r2
 800ee46:	80bb      	strh	r3, [r7, #4]
	NAND_AddressTypeDef nand_read_address;
	for (int block = start_block; block <= end_block; block++) {
 800ee48:	88fb      	ldrh	r3, [r7, #6]
 800ee4a:	617b      	str	r3, [r7, #20]
 800ee4c:	e035      	b.n	800eeba <data_fetch+0x82>
		for (int page = 0; page <= MAX_PAGE; page++) {
 800ee4e:	2300      	movs	r3, #0
 800ee50:	613b      	str	r3, [r7, #16]
 800ee52:	e02c      	b.n	800eeae <data_fetch+0x76>
			nand_read_address.Block = block;
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	81bb      	strh	r3, [r7, #12]
			nand_read_address.Page = page;
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	813b      	strh	r3, [r7, #8]
			nand_read_address.Plane = 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	817b      	strh	r3, [r7, #10]

			if (block == nand_address.Block && page >= nand_address.Page) {
 800ee64:	4b1a      	ldr	r3, [pc, #104]	@ (800eed0 <data_fetch+0x98>)
 800ee66:	889b      	ldrh	r3, [r3, #4]
 800ee68:	461a      	mov	r2, r3
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d105      	bne.n	800ee7c <data_fetch+0x44>
 800ee70:	4b17      	ldr	r3, [pc, #92]	@ (800eed0 <data_fetch+0x98>)
 800ee72:	881b      	ldrh	r3, [r3, #0]
 800ee74:	461a      	mov	r2, r3
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	da23      	bge.n	800eec4 <data_fetch+0x8c>
				return;
			}

			if(nand_stop_read_CMD[1]=='*')
 800ee7c:	4b15      	ldr	r3, [pc, #84]	@ (800eed4 <data_fetch+0x9c>)
 800ee7e:	785b      	ldrb	r3, [r3, #1]
 800ee80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee82:	d021      	beq.n	800eec8 <data_fetch+0x90>
				return ;

			HAL_NAND_Read_Page_8b(&hnand1, &nand_read_address, read_data, 1);
 800ee84:	f107 0108 	add.w	r1, r7, #8
 800ee88:	2301      	movs	r3, #1
 800ee8a:	4a13      	ldr	r2, [pc, #76]	@ (800eed8 <data_fetch+0xa0>)
 800ee8c:	4813      	ldr	r0, [pc, #76]	@ (800eedc <data_fetch+0xa4>)
 800ee8e:	f003 f849 	bl	8011f24 <HAL_NAND_Read_Page_8b>

//			if(read_data[page]!=0xFF)
			{
				HAL_UART_Transmit(&huart5, read_data, sizeof(read_data),HAL_MAX_DELAY);
 800ee92:	f04f 33ff 	mov.w	r3, #4294967295
 800ee96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ee9a:	490f      	ldr	r1, [pc, #60]	@ (800eed8 <data_fetch+0xa0>)
 800ee9c:	4810      	ldr	r0, [pc, #64]	@ (800eee0 <data_fetch+0xa8>)
 800ee9e:	f00a fdb5 	bl	8019a0c <HAL_UART_Transmit>
				HAL_Delay(1);
 800eea2:	2001      	movs	r0, #1
 800eea4:	f002 fb62 	bl	801156c <HAL_Delay>
		for (int page = 0; page <= MAX_PAGE; page++) {
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	613b      	str	r3, [r7, #16]
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	2b7f      	cmp	r3, #127	@ 0x7f
 800eeb2:	ddcf      	ble.n	800ee54 <data_fetch+0x1c>
	for (int block = start_block; block <= end_block; block++) {
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	617b      	str	r3, [r7, #20]
 800eeba:	88bb      	ldrh	r3, [r7, #4]
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	ddc5      	ble.n	800ee4e <data_fetch+0x16>
 800eec2:	e002      	b.n	800eeca <data_fetch+0x92>
				return;
 800eec4:	bf00      	nop
 800eec6:	e000      	b.n	800eeca <data_fetch+0x92>
				return ;
 800eec8:	bf00      	nop
//			else
//				continue ;

		}
	}
}
 800eeca:	3718      	adds	r7, #24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	200003e8 	.word	0x200003e8
 800eed4:	200003f0 	.word	0x200003f0
 800eed8:	200003f4 	.word	0x200003f4
 800eedc:	20005b78 	.word	0x20005b78
 800eee0:	20005964 	.word	0x20005964

0800eee4 <get_NAND_stored_data>:


uint8_t get_NAND_stored_data() {
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0

	int start_block, end_block;

	if(nand_stop_read_CMD[1]=='*'){
 800eeea:	4b24      	ldr	r3, [pc, #144]	@ (800ef7c <get_NAND_stored_data+0x98>)
 800eeec:	785b      	ldrb	r3, [r3, #1]
 800eeee:	2b2a      	cmp	r3, #42	@ 0x2a
 800eef0:	d106      	bne.n	800ef00 <get_NAND_stored_data+0x1c>
		memset(nand_stop_read_CMD,0,3);
 800eef2:	2203      	movs	r2, #3
 800eef4:	2100      	movs	r1, #0
 800eef6:	4821      	ldr	r0, [pc, #132]	@ (800ef7c <get_NAND_stored_data+0x98>)
 800eef8:	f00d fee1 	bl	801ccbe <memset>
		return 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	e038      	b.n	800ef72 <get_NAND_stored_data+0x8e>
	}

	if (nand_cyclic_run) {
 800ef00:	4b1f      	ldr	r3, [pc, #124]	@ (800ef80 <get_NAND_stored_data+0x9c>)
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d02d      	beq.n	800ef64 <get_NAND_stored_data+0x80>
		if (nand_address.Block > BLOCK_OFFSET) {
 800ef08:	4b1e      	ldr	r3, [pc, #120]	@ (800ef84 <get_NAND_stored_data+0xa0>)
 800ef0a:	889b      	ldrh	r3, [r3, #4]
 800ef0c:	f240 2276 	movw	r2, #630	@ 0x276
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d910      	bls.n	800ef36 <get_NAND_stored_data+0x52>
			start_block = nand_address.Block - BLOCK_OFFSET;
 800ef14:	4b1b      	ldr	r3, [pc, #108]	@ (800ef84 <get_NAND_stored_data+0xa0>)
 800ef16:	889b      	ldrh	r3, [r3, #4]
 800ef18:	f2a3 2376 	subw	r3, r3, #630	@ 0x276
 800ef1c:	607b      	str	r3, [r7, #4]
			end_block = nand_address.Block;
 800ef1e:	4b19      	ldr	r3, [pc, #100]	@ (800ef84 <get_NAND_stored_data+0xa0>)
 800ef20:	889b      	ldrh	r3, [r3, #4]
 800ef22:	603b      	str	r3, [r7, #0]
			data_fetch(start_block,end_block);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	b292      	uxth	r2, r2
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7ff ff82 	bl	800ee38 <data_fetch>
 800ef34:	e01c      	b.n	800ef70 <get_NAND_stored_data+0x8c>

		} else {
			start_block = MAX_BLOCK - (BLOCK_OFFSET - nand_address.Block);
 800ef36:	4b13      	ldr	r3, [pc, #76]	@ (800ef84 <get_NAND_stored_data+0xa0>)
 800ef38:	889b      	ldrh	r3, [r3, #4]
 800ef3a:	f603 5389 	addw	r3, r3, #3465	@ 0xd89
 800ef3e:	607b      	str	r3, [r7, #4]
			end_block = MAX_BLOCK;
 800ef40:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800ef44:	603b      	str	r3, [r7, #0]


			data_fetch(start_block,end_block);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	b292      	uxth	r2, r2
 800ef4e:	4611      	mov	r1, r2
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7ff ff71 	bl	800ee38 <data_fetch>
			data_fetch(0,nand_address.Block);
 800ef56:	4b0b      	ldr	r3, [pc, #44]	@ (800ef84 <get_NAND_stored_data+0xa0>)
 800ef58:	889b      	ldrh	r3, [r3, #4]
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	2000      	movs	r0, #0
 800ef5e:	f7ff ff6b 	bl	800ee38 <data_fetch>
 800ef62:	e005      	b.n	800ef70 <get_NAND_stored_data+0x8c>
		}

	}
	else {

		data_fetch(0,nand_address.Block);
 800ef64:	4b07      	ldr	r3, [pc, #28]	@ (800ef84 <get_NAND_stored_data+0xa0>)
 800ef66:	889b      	ldrh	r3, [r3, #4]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	f7ff ff64 	bl	800ee38 <data_fetch>

	}
	return 0;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3708      	adds	r7, #8
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	200003f0 	.word	0x200003f0
 800ef80:	200055b5 	.word	0x200055b5
 800ef84:	200003e8 	.word	0x200003e8

0800ef88 <SRAM_operation>:
/*
 * SRAM_operation
 * Reads time data from SRAM, updates temperature readings, and writes formatted
 * data back to SRAM. Checks for time changes and triggers NAND update if necessary.
 */
uint8_t SRAM_operation() {
 800ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef8c:	b0d7      	sub	sp, #348	@ 0x15c
 800ef8e:	af34      	add	r7, sp, #208	@ 0xd0

	uint8_t time_data[8] = {0};
 800ef90:	2300      	movs	r3, #0
 800ef92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ef96:	2300      	movs	r3, #0
 800ef98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	// Read current second from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data, 7);
 800ef9c:	4ba6      	ldr	r3, [pc, #664]	@ (800f238 <SRAM_operation+0x2b0>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4619      	mov	r1, r3
 800efa2:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800efa6:	2307      	movs	r3, #7
 800efa8:	48a4      	ldr	r0, [pc, #656]	@ (800f23c <SRAM_operation+0x2b4>)
 800efaa:	f00a fc41 	bl	8019830 <HAL_SRAM_Read_8b>
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)unused_sramAddr, (uint8_t *)&unused, 1);
 800efae:	4ba4      	ldr	r3, [pc, #656]	@ (800f240 <SRAM_operation+0x2b8>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4619      	mov	r1, r3
 800efb4:	2301      	movs	r3, #1
 800efb6:	4aa3      	ldr	r2, [pc, #652]	@ (800f244 <SRAM_operation+0x2bc>)
 800efb8:	48a0      	ldr	r0, [pc, #640]	@ (800f23c <SRAM_operation+0x2b4>)
 800efba:	f00a fc93 	bl	80198e4 <HAL_SRAM_Write_8b>
	// Check if the second has changed
	if (time_data[0] != old_sec) {
 800efbe:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800efc2:	4ba1      	ldr	r3, [pc, #644]	@ (800f248 <SRAM_operation+0x2c0>)
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	f000 81a5 	beq.w	800f316 <SRAM_operation+0x38e>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 1); // Toggle LED for visual feedback
 800efcc:	2201      	movs	r2, #1
 800efce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800efd2:	489e      	ldr	r0, [pc, #632]	@ (800f24c <SRAM_operation+0x2c4>)
 800efd4:	f002 fe8e 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800efd8:	2001      	movs	r0, #1
 800efda:	f002 fac7 	bl	801156c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 0);
 800efde:	2200      	movs	r2, #0
 800efe0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800efe4:	4899      	ldr	r0, [pc, #612]	@ (800f24c <SRAM_operation+0x2c4>)
 800efe6:	f002 fe85 	bl	8011cf4 <HAL_GPIO_WritePin>

		// Format temperature and time data into the buffer
		memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 800efea:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800efee:	2100      	movs	r1, #0
 800eff0:	4897      	ldr	r0, [pc, #604]	@ (800f250 <SRAM_operation+0x2c8>)
 800eff2:	f00d fe64 	bl	801ccbe <memset>
		SRAMopt.Startbyte=SoF;
 800eff6:	4b97      	ldr	r3, [pc, #604]	@ (800f254 <SRAM_operation+0x2cc>)
 800eff8:	2240      	movs	r2, #64	@ 0x40
 800effa:	701a      	strb	r2, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
				"{\"TS1\": \"%.2f#%X\", \"TS2\": \"%.2f#%X\", \"TS3\": \"%.2f#%X\", \"TS4\": \"%.2f#%X\", \"TS5\": \"%.2f#%X\", "
				"\"TS6\": \"%.2f#%X\", \"TS7\": \"%.2f#%X\", \"TS8\": \"%.2f#%X\", \"TS9\": \"%.2f#%X\", \"TS10\": \"%.2f#%X\", "
				"\"TS11\": \"%.2f#%X\", \"TS12\": \"%.2f#%X\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x\"} \n\r",
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800effc:	4b96      	ldr	r3, [pc, #600]	@ (800f258 <SRAM_operation+0x2d0>)
 800effe:	681b      	ldr	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f000:	4618      	mov	r0, r3
 800f002:	f7fd fab1 	bl	800c568 <__aeabi_f2d>
 800f006:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f00a:	4b94      	ldr	r3, [pc, #592]	@ (800f25c <SRAM_operation+0x2d4>)
 800f00c:	881b      	ldrh	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f00e:	677b      	str	r3, [r7, #116]	@ 0x74
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f010:	4b91      	ldr	r3, [pc, #580]	@ (800f258 <SRAM_operation+0x2d0>)
 800f012:	685b      	ldr	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f014:	4618      	mov	r0, r3
 800f016:	f7fd faa7 	bl	800c568 <__aeabi_f2d>
 800f01a:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f01e:	4b8f      	ldr	r3, [pc, #572]	@ (800f25c <SRAM_operation+0x2d4>)
 800f020:	885b      	ldrh	r3, [r3, #2]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f022:	673b      	str	r3, [r7, #112]	@ 0x70
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f024:	4b8c      	ldr	r3, [pc, #560]	@ (800f258 <SRAM_operation+0x2d0>)
 800f026:	689b      	ldr	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fd fa9d 	bl	800c568 <__aeabi_f2d>
 800f02e:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f032:	4b8a      	ldr	r3, [pc, #552]	@ (800f25c <SRAM_operation+0x2d4>)
 800f034:	889b      	ldrh	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f036:	65fb      	str	r3, [r7, #92]	@ 0x5c
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f038:	4b87      	ldr	r3, [pc, #540]	@ (800f258 <SRAM_operation+0x2d0>)
 800f03a:	68db      	ldr	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fd fa93 	bl	800c568 <__aeabi_f2d>
 800f042:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 800f046:	4b85      	ldr	r3, [pc, #532]	@ (800f25c <SRAM_operation+0x2d4>)
 800f048:	88db      	ldrh	r3, [r3, #6]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f04a:	65bb      	str	r3, [r7, #88]	@ 0x58
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f04c:	4b82      	ldr	r3, [pc, #520]	@ (800f258 <SRAM_operation+0x2d0>)
 800f04e:	691b      	ldr	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f050:	4618      	mov	r0, r3
 800f052:	f7fd fa89 	bl	800c568 <__aeabi_f2d>
 800f056:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f05a:	4b80      	ldr	r3, [pc, #512]	@ (800f25c <SRAM_operation+0x2d4>)
 800f05c:	891b      	ldrh	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f05e:	647b      	str	r3, [r7, #68]	@ 0x44
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f060:	4b7d      	ldr	r3, [pc, #500]	@ (800f258 <SRAM_operation+0x2d0>)
 800f062:	695b      	ldr	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f064:	4618      	mov	r0, r3
 800f066:	f7fd fa7f 	bl	800c568 <__aeabi_f2d>
 800f06a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f06e:	4b7b      	ldr	r3, [pc, #492]	@ (800f25c <SRAM_operation+0x2d4>)
 800f070:	895b      	ldrh	r3, [r3, #10]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f072:	643b      	str	r3, [r7, #64]	@ 0x40
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f074:	4b78      	ldr	r3, [pc, #480]	@ (800f258 <SRAM_operation+0x2d0>)
 800f076:	699b      	ldr	r3, [r3, #24]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f078:	4618      	mov	r0, r3
 800f07a:	f7fd fa75 	bl	800c568 <__aeabi_f2d>
 800f07e:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f082:	4b76      	ldr	r3, [pc, #472]	@ (800f25c <SRAM_operation+0x2d4>)
 800f084:	899b      	ldrh	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f086:	62fb      	str	r3, [r7, #44]	@ 0x2c
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f088:	4b73      	ldr	r3, [pc, #460]	@ (800f258 <SRAM_operation+0x2d0>)
 800f08a:	69db      	ldr	r3, [r3, #28]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7fd fa6b 	bl	800c568 <__aeabi_f2d>
 800f092:	e9c7 0108 	strd	r0, r1, [r7, #32]
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800f096:	4b71      	ldr	r3, [pc, #452]	@ (800f25c <SRAM_operation+0x2d4>)
 800f098:	89db      	ldrh	r3, [r3, #14]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f09a:	62bb      	str	r3, [r7, #40]	@ 0x28
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f09c:	4b6e      	ldr	r3, [pc, #440]	@ (800f258 <SRAM_operation+0x2d0>)
 800f09e:	6a1b      	ldr	r3, [r3, #32]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fd fa61 	bl	800c568 <__aeabi_f2d>
 800f0a6:	e9c7 0106 	strd	r0, r1, [r7, #24]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0aa:	4b6c      	ldr	r3, [pc, #432]	@ (800f25c <SRAM_operation+0x2d4>)
 800f0ac:	8a1b      	ldrh	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0ae:	617b      	str	r3, [r7, #20]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0b0:	4b69      	ldr	r3, [pc, #420]	@ (800f258 <SRAM_operation+0x2d0>)
 800f0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7fd fa57 	bl	800c568 <__aeabi_f2d>
 800f0ba:	4682      	mov	sl, r0
 800f0bc:	468b      	mov	fp, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0be:	4b67      	ldr	r3, [pc, #412]	@ (800f25c <SRAM_operation+0x2d4>)
 800f0c0:	8a5b      	ldrh	r3, [r3, #18]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0c2:	613b      	str	r3, [r7, #16]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0c4:	4b64      	ldr	r3, [pc, #400]	@ (800f258 <SRAM_operation+0x2d0>)
 800f0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fd fa4d 	bl	800c568 <__aeabi_f2d>
 800f0ce:	4680      	mov	r8, r0
 800f0d0:	4689      	mov	r9, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0d2:	4b62      	ldr	r3, [pc, #392]	@ (800f25c <SRAM_operation+0x2d4>)
 800f0d4:	8a9b      	ldrh	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0d6:	60fb      	str	r3, [r7, #12]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0d8:	4b5f      	ldr	r3, [pc, #380]	@ (800f258 <SRAM_operation+0x2d0>)
 800f0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7fd fa43 	bl	800c568 <__aeabi_f2d>
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	460d      	mov	r5, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800f0e6:	4b5d      	ldr	r3, [pc, #372]	@ (800f25c <SRAM_operation+0x2d4>)
 800f0e8:	8adb      	ldrh	r3, [r3, #22]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0ea:	60bb      	str	r3, [r7, #8]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0ec:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0f0:	607b      	str	r3, [r7, #4]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0f2:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0f6:	461e      	mov	r6, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0f8:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f0fc:	4618      	mov	r0, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f0fe:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f102:	4619      	mov	r1, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f104:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f108:	461a      	mov	r2, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800f10a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800f10e:	9332      	str	r3, [sp, #200]	@ 0xc8
 800f110:	9231      	str	r2, [sp, #196]	@ 0xc4
 800f112:	9130      	str	r1, [sp, #192]	@ 0xc0
 800f114:	902f      	str	r0, [sp, #188]	@ 0xbc
 800f116:	962e      	str	r6, [sp, #184]	@ 0xb8
 800f118:	6879      	ldr	r1, [r7, #4]
 800f11a:	912d      	str	r1, [sp, #180]	@ 0xb4
 800f11c:	68b9      	ldr	r1, [r7, #8]
 800f11e:	912c      	str	r1, [sp, #176]	@ 0xb0
 800f120:	e9cd 452a 	strd	r4, r5, [sp, #168]	@ 0xa8
 800f124:	68f9      	ldr	r1, [r7, #12]
 800f126:	9128      	str	r1, [sp, #160]	@ 0xa0
 800f128:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 800f12c:	6939      	ldr	r1, [r7, #16]
 800f12e:	9124      	str	r1, [sp, #144]	@ 0x90
 800f130:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
 800f134:	6979      	ldr	r1, [r7, #20]
 800f136:	9120      	str	r1, [sp, #128]	@ 0x80
 800f138:	ed97 7b06 	vldr	d7, [r7, #24]
 800f13c:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 800f140:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f142:	911c      	str	r1, [sp, #112]	@ 0x70
 800f144:	ed97 7b08 	vldr	d7, [r7, #32]
 800f148:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 800f14c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f14e:	9118      	str	r1, [sp, #96]	@ 0x60
 800f150:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800f154:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 800f158:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f15a:	9114      	str	r1, [sp, #80]	@ 0x50
 800f15c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800f160:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 800f164:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f166:	9110      	str	r1, [sp, #64]	@ 0x40
 800f168:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800f16c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f170:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f172:	910c      	str	r1, [sp, #48]	@ 0x30
 800f174:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800f178:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f17c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f17e:	9108      	str	r1, [sp, #32]
 800f180:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800f184:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f188:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800f18a:	9104      	str	r1, [sp, #16]
 800f18c:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 800f190:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800f19c:	4930      	ldr	r1, [pc, #192]	@ (800f260 <SRAM_operation+0x2d8>)
 800f19e:	482c      	ldr	r0, [pc, #176]	@ (800f250 <SRAM_operation+0x2c8>)
 800f1a0:	f00d fd2a 	bl	801cbf8 <siprintf>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	4b2a      	ldr	r3, [pc, #168]	@ (800f254 <SRAM_operation+0x2cc>)
 800f1aa:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		SRAMopt.SRAM_buffer[(SRAMopt.Idxcount)-3]=EoF;
 800f1ae:	4b29      	ldr	r3, [pc, #164]	@ (800f254 <SRAM_operation+0x2cc>)
 800f1b0:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f1b4:	3b03      	subs	r3, #3
 800f1b6:	4a27      	ldr	r2, [pc, #156]	@ (800f254 <SRAM_operation+0x2cc>)
 800f1b8:	4413      	add	r3, r2
 800f1ba:	2224      	movs	r2, #36	@ 0x24
 800f1bc:	705a      	strb	r2, [r3, #1]

		// Write the buffer to SRAM
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAMopt,((SRAMopt.Idxcount)+1));
 800f1be:	4b29      	ldr	r3, [pc, #164]	@ (800f264 <SRAM_operation+0x2dc>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	4b23      	ldr	r3, [pc, #140]	@ (800f254 <SRAM_operation+0x2cc>)
 800f1c6:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	4a21      	ldr	r2, [pc, #132]	@ (800f254 <SRAM_operation+0x2cc>)
 800f1ce:	481b      	ldr	r0, [pc, #108]	@ (800f23c <SRAM_operation+0x2b4>)
 800f1d0:	f00a fb88 	bl	80198e4 <HAL_SRAM_Write_8b>


		// Update SRAM location and size counter
		sram_location += ((SRAMopt.Idxcount)+1);
 800f1d4:	4b1f      	ldr	r3, [pc, #124]	@ (800f254 <SRAM_operation+0x2cc>)
 800f1d6:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f1da:	461a      	mov	r2, r3
 800f1dc:	4b21      	ldr	r3, [pc, #132]	@ (800f264 <SRAM_operation+0x2dc>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	4a1f      	ldr	r2, [pc, #124]	@ (800f264 <SRAM_operation+0x2dc>)
 800f1e6:	6013      	str	r3, [r2, #0]
		size_counter  += ((SRAMopt.Idxcount)+1);
 800f1e8:	4b1a      	ldr	r3, [pc, #104]	@ (800f254 <SRAM_operation+0x2cc>)
 800f1ea:	f8b3 2162 	ldrh.w	r2, [r3, #354]	@ 0x162
 800f1ee:	4b1e      	ldr	r3, [pc, #120]	@ (800f268 <SRAM_operation+0x2e0>)
 800f1f0:	881b      	ldrh	r3, [r3, #0]
 800f1f2:	4413      	add	r3, r2
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	b29a      	uxth	r2, r3
 800f1fa:	4b1b      	ldr	r3, [pc, #108]	@ (800f268 <SRAM_operation+0x2e0>)
 800f1fc:	801a      	strh	r2, [r3, #0]

#if 1
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_SET);
 800f1fe:	2201      	movs	r2, #1
 800f200:	2102      	movs	r1, #2
 800f202:	481a      	ldr	r0, [pc, #104]	@ (800f26c <SRAM_operation+0x2e4>)
 800f204:	f002 fd76 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_SET);
 800f208:	2201      	movs	r2, #1
 800f20a:	2104      	movs	r1, #4
 800f20c:	4817      	ldr	r0, [pc, #92]	@ (800f26c <SRAM_operation+0x2e4>)
 800f20e:	f002 fd71 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 800f212:	2201      	movs	r2, #1
 800f214:	2101      	movs	r1, #1
 800f216:	4815      	ldr	r0, [pc, #84]	@ (800f26c <SRAM_operation+0x2e4>)
 800f218:	f002 fd6c 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800f21c:	2002      	movs	r0, #2
 800f21e:	f002 f9a5 	bl	801156c <HAL_Delay>
		HAL_UART_Transmit_IT(&huart8, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800f222:	4b0c      	ldr	r3, [pc, #48]	@ (800f254 <SRAM_operation+0x2cc>)
 800f224:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f228:	3301      	adds	r3, #1
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	461a      	mov	r2, r3
 800f22e:	4909      	ldr	r1, [pc, #36]	@ (800f254 <SRAM_operation+0x2cc>)
 800f230:	480f      	ldr	r0, [pc, #60]	@ (800f270 <SRAM_operation+0x2e8>)
 800f232:	f00a fc89 	bl	8019b48 <HAL_UART_Transmit_IT>
 800f236:	e01d      	b.n	800f274 <SRAM_operation+0x2ec>
 800f238:	20000098 	.word	0x20000098
 800f23c:	20005b20 	.word	0x20005b20
 800f240:	2000009c 	.word	0x2000009c
 800f244:	200000a0 	.word	0x200000a0
 800f248:	200055ba 	.word	0x200055ba
 800f24c:	42021000 	.word	0x42021000
 800f250:	200055bd 	.word	0x200055bd
 800f254:	200055bc 	.word	0x200055bc
 800f258:	20000310 	.word	0x20000310
 800f25c:	20000340 	.word	0x20000340
 800f260:	0801f278 	.word	0x0801f278
 800f264:	20000084 	.word	0x20000084
 800f268:	200055b8 	.word	0x200055b8
 800f26c:	42020000 	.word	0x42020000
 800f270:	200059f8 	.word	0x200059f8
		HAL_UART_Transmit_IT(&huart10,(uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800f274:	4b2f      	ldr	r3, [pc, #188]	@ (800f334 <SRAM_operation+0x3ac>)
 800f276:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f27a:	3301      	adds	r3, #1
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	461a      	mov	r2, r3
 800f280:	492c      	ldr	r1, [pc, #176]	@ (800f334 <SRAM_operation+0x3ac>)
 800f282:	482d      	ldr	r0, [pc, #180]	@ (800f338 <SRAM_operation+0x3b0>)
 800f284:	f00a fc60 	bl	8019b48 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart4, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800f288:	4b2a      	ldr	r3, [pc, #168]	@ (800f334 <SRAM_operation+0x3ac>)
 800f28a:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f28e:	3301      	adds	r3, #1
 800f290:	b29b      	uxth	r3, r3
 800f292:	461a      	mov	r2, r3
 800f294:	4927      	ldr	r1, [pc, #156]	@ (800f334 <SRAM_operation+0x3ac>)
 800f296:	4829      	ldr	r0, [pc, #164]	@ (800f33c <SRAM_operation+0x3b4>)
 800f298:	f00a fc56 	bl	8019b48 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart5, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800f29c:	4b25      	ldr	r3, [pc, #148]	@ (800f334 <SRAM_operation+0x3ac>)
 800f29e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	4922      	ldr	r1, [pc, #136]	@ (800f334 <SRAM_operation+0x3ac>)
 800f2aa:	4825      	ldr	r0, [pc, #148]	@ (800f340 <SRAM_operation+0x3b8>)
 800f2ac:	f00a fc4c 	bl	8019b48 <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 800f2b0:	2064      	movs	r0, #100	@ 0x64
 800f2b2:	f002 f95b 	bl	801156c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	2101      	movs	r1, #1
 800f2ba:	4822      	ldr	r0, [pc, #136]	@ (800f344 <SRAM_operation+0x3bc>)
 800f2bc:	f002 fd1a 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_RESET);
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	2102      	movs	r1, #2
 800f2c4:	481f      	ldr	r0, [pc, #124]	@ (800f344 <SRAM_operation+0x3bc>)
 800f2c6:	f002 fd15 	bl	8011cf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2104      	movs	r1, #4
 800f2ce:	481d      	ldr	r0, [pc, #116]	@ (800f344 <SRAM_operation+0x3bc>)
 800f2d0:	f002 fd10 	bl	8011cf4 <HAL_GPIO_WritePin>
#endif

//		HAL_Delay(200); // remove after testing

		// Check if the buffer exceeds the NAND page size
		if (size_counter + ((SRAMopt.Idxcount)+1) > NAND_PAGE_SIZE) {
 800f2d4:	4b1c      	ldr	r3, [pc, #112]	@ (800f348 <SRAM_operation+0x3c0>)
 800f2d6:	881b      	ldrh	r3, [r3, #0]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	4b16      	ldr	r3, [pc, #88]	@ (800f334 <SRAM_operation+0x3ac>)
 800f2dc:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2e8:	dd0f      	ble.n	800f30a <SRAM_operation+0x382>
			sram_location = sram_base_location;
 800f2ea:	4b18      	ldr	r3, [pc, #96]	@ (800f34c <SRAM_operation+0x3c4>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a18      	ldr	r2, [pc, #96]	@ (800f350 <SRAM_operation+0x3c8>)
 800f2f0:	6013      	str	r3, [r2, #0]
			memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 800f2f2:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	4816      	ldr	r0, [pc, #88]	@ (800f354 <SRAM_operation+0x3cc>)
 800f2fa:	f00d fce0 	bl	801ccbe <memset>
			SRAMopt.Idxcount=0;
 800f2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800f334 <SRAM_operation+0x3ac>)
 800f300:	2200      	movs	r2, #0
 800f302:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
			NAND_operation();
 800f306:	f7ff fbc7 	bl	800ea98 <NAND_operation>
		}

		update_SRAM_Addr();   /*********** update the sram last address at location 0x6000000e ************/
 800f30a:	f000 f8cf 	bl	800f4ac <update_SRAM_Addr>

		// Update old_sec to current second
		old_sec = time_data[0];
 800f30e:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800f312:	4b11      	ldr	r3, [pc, #68]	@ (800f358 <SRAM_operation+0x3d0>)
 800f314:	701a      	strb	r2, [r3, #0]
	}

	// If time setting flag is set, call time_setter
	if (time_set) {
 800f316:	4b11      	ldr	r3, [pc, #68]	@ (800f35c <SRAM_operation+0x3d4>)
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d004      	beq.n	800f328 <SRAM_operation+0x3a0>
		time_set = 0;
 800f31e:	4b0f      	ldr	r3, [pc, #60]	@ (800f35c <SRAM_operation+0x3d4>)
 800f320:	2200      	movs	r2, #0
 800f322:	701a      	strb	r2, [r3, #0]
		time_setter();
 800f324:	f000 f92a 	bl	800f57c <time_setter>
	}
	return 0;
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	378c      	adds	r7, #140	@ 0x8c
 800f32e:	46bd      	mov	sp, r7
 800f330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f334:	200055bc 	.word	0x200055bc
 800f338:	20005a8c 	.word	0x20005a8c
 800f33c:	200058d0 	.word	0x200058d0
 800f340:	20005964 	.word	0x20005964
 800f344:	42020000 	.word	0x42020000
 800f348:	200055b8 	.word	0x200055b8
 800f34c:	20000088 	.word	0x20000088
 800f350:	20000084 	.word	0x20000084
 800f354:	200055bd 	.word	0x200055bd
 800f358:	200055ba 	.word	0x200055ba
 800f35c:	20005bde 	.word	0x20005bde

0800f360 <get_NAND_data>:

/*
 * get_NAND_data
 * Reads a full page of data from SRAM into sram_data buffer and clears SRAM.
 */
void get_NAND_data(uint8_t *sram_data) {
 800f360:	b580      	push	{r7, lr}
 800f362:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	f107 0308 	add.w	r3, r7, #8
 800f36e:	f843 0c04 	str.w	r0, [r3, #-4]
	uint8_t CLEAN_DATA[8192] = {0};
 800f372:	f107 0308 	add.w	r3, r7, #8
 800f376:	2200      	movs	r2, #0
 800f378:	601a      	str	r2, [r3, #0]
 800f37a:	3304      	adds	r3, #4
 800f37c:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 800f380:	2100      	movs	r1, #0
 800f382:	4618      	mov	r0, r3
 800f384:	f00d fc9b 	bl	801ccbe <memset>
	// Read NAND page from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 800f388:	4b14      	ldr	r3, [pc, #80]	@ (800f3dc <get_NAND_data+0x7c>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4619      	mov	r1, r3
 800f38e:	f107 0308 	add.w	r3, r7, #8
 800f392:	461a      	mov	r2, r3
 800f394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f398:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f39c:	4810      	ldr	r0, [pc, #64]	@ (800f3e0 <get_NAND_data+0x80>)
 800f39e:	f00a fa47 	bl	8019830 <HAL_SRAM_Read_8b>
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 800f3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800f3dc <get_NAND_data+0x7c>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	f107 0308 	add.w	r3, r7, #8
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f3b2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f3b6:	480a      	ldr	r0, [pc, #40]	@ (800f3e0 <get_NAND_data+0x80>)
 800f3b8:	f00a fa3a 	bl	8019830 <HAL_SRAM_Read_8b>
	// Clear the SRAM location
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 800f3bc:	4b07      	ldr	r3, [pc, #28]	@ (800f3dc <get_NAND_data+0x7c>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	f107 0208 	add.w	r2, r7, #8
 800f3c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f3ca:	4805      	ldr	r0, [pc, #20]	@ (800f3e0 <get_NAND_data+0x80>)
 800f3cc:	f00a fa8a 	bl	80198e4 <HAL_SRAM_Write_8b>
}
 800f3d0:	bf00      	nop
 800f3d2:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	20000088 	.word	0x20000088
 800f3e0:	20005b20 	.word	0x20005b20

0800f3e4 <get_NAND_address>:

/*
 * get_NAND_address
 * Reads the current NAND address from SRAM.
 */
uint8_t get_NAND_address(void) {
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
 800f3e8:	4b10      	ldr	r3, [pc, #64]	@ (800f42c <get_NAND_address+0x48>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	2306      	movs	r3, #6
 800f3f2:	4a0f      	ldr	r2, [pc, #60]	@ (800f430 <get_NAND_address+0x4c>)
 800f3f4:	480f      	ldr	r0, [pc, #60]	@ (800f434 <get_NAND_address+0x50>)
 800f3f6:	f00a fa1b 	bl	8019830 <HAL_SRAM_Read_8b>
	if(nand_address.Page >= 128)
 800f3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f430 <get_NAND_address+0x4c>)
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800f400:	d902      	bls.n	800f408 <get_NAND_address+0x24>
		nand_address.Page=0;
 800f402:	4b0b      	ldr	r3, [pc, #44]	@ (800f430 <get_NAND_address+0x4c>)
 800f404:	2200      	movs	r2, #0
 800f406:	801a      	strh	r2, [r3, #0]
	if(nand_address.Block >= 4096)
 800f408:	4b09      	ldr	r3, [pc, #36]	@ (800f430 <get_NAND_address+0x4c>)
 800f40a:	889b      	ldrh	r3, [r3, #4]
 800f40c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f410:	d302      	bcc.n	800f418 <get_NAND_address+0x34>
		nand_address.Block=0;
 800f412:	4b07      	ldr	r3, [pc, #28]	@ (800f430 <get_NAND_address+0x4c>)
 800f414:	2200      	movs	r2, #0
 800f416:	809a      	strh	r2, [r3, #4]
	if(nand_address.Plane > 2)
 800f418:	4b05      	ldr	r3, [pc, #20]	@ (800f430 <get_NAND_address+0x4c>)
 800f41a:	885b      	ldrh	r3, [r3, #2]
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d902      	bls.n	800f426 <get_NAND_address+0x42>
		nand_address.Plane=0;
 800f420:	4b03      	ldr	r3, [pc, #12]	@ (800f430 <get_NAND_address+0x4c>)
 800f422:	2200      	movs	r2, #0
 800f424:	805a      	strh	r2, [r3, #2]

	return 0;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	2000008c 	.word	0x2000008c
 800f430:	200003e8 	.word	0x200003e8
 800f434:	20005b20 	.word	0x20005b20

0800f438 <update_NAND_addr>:

/*
 * update_NAND_addr
 * Writes the current NAND address to SRAM.
 */
void update_NAND_addr() {
 800f438:	b580      	push	{r7, lr}
 800f43a:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
 800f43c:	4b05      	ldr	r3, [pc, #20]	@ (800f454 <update_NAND_addr+0x1c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	3308      	adds	r3, #8
 800f442:	4619      	mov	r1, r3
 800f444:	2306      	movs	r3, #6
 800f446:	4a04      	ldr	r2, [pc, #16]	@ (800f458 <update_NAND_addr+0x20>)
 800f448:	4804      	ldr	r0, [pc, #16]	@ (800f45c <update_NAND_addr+0x24>)
 800f44a:	f00a fa4b 	bl	80198e4 <HAL_SRAM_Write_8b>
}
 800f44e:	bf00      	nop
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	2000008c 	.word	0x2000008c
 800f458:	200003e8 	.word	0x200003e8
 800f45c:	20005b20 	.word	0x20005b20

0800f460 <update_NAND_CyclicAddr>:

/*
 * update_NAND_CyclicAddr
 * Writes the current nand_cyclic_run to SRAM.
 */
void update_NAND_CyclicAddr() {
 800f460:	b580      	push	{r7, lr}
 800f462:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 800f464:	4b04      	ldr	r3, [pc, #16]	@ (800f478 <update_NAND_CyclicAddr+0x18>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4619      	mov	r1, r3
 800f46a:	2301      	movs	r3, #1
 800f46c:	4a03      	ldr	r2, [pc, #12]	@ (800f47c <update_NAND_CyclicAddr+0x1c>)
 800f46e:	4804      	ldr	r0, [pc, #16]	@ (800f480 <update_NAND_CyclicAddr+0x20>)
 800f470:	f00a fa38 	bl	80198e4 <HAL_SRAM_Write_8b>
}
 800f474:	bf00      	nop
 800f476:	bd80      	pop	{r7, pc}
 800f478:	20000090 	.word	0x20000090
 800f47c:	200055b5 	.word	0x200055b5
 800f480:	20005b20 	.word	0x20005b20

0800f484 <get_NAND_CyclicAddr>:

/*
 * get_NAND_CyclicAddr
 * Reads the last nand_cyclic_run from SRAM.
 */
uint8_t get_NAND_CyclicAddr(void) {
 800f484:	b580      	push	{r7, lr}
 800f486:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 800f488:	4b05      	ldr	r3, [pc, #20]	@ (800f4a0 <get_NAND_CyclicAddr+0x1c>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4619      	mov	r1, r3
 800f48e:	2301      	movs	r3, #1
 800f490:	4a04      	ldr	r2, [pc, #16]	@ (800f4a4 <get_NAND_CyclicAddr+0x20>)
 800f492:	4805      	ldr	r0, [pc, #20]	@ (800f4a8 <get_NAND_CyclicAddr+0x24>)
 800f494:	f00a f9cc 	bl	8019830 <HAL_SRAM_Read_8b>
	return nand_cyclic_run;
 800f498:	4b02      	ldr	r3, [pc, #8]	@ (800f4a4 <get_NAND_CyclicAddr+0x20>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	20000090 	.word	0x20000090
 800f4a4:	200055b5 	.word	0x200055b5
 800f4a8:	20005b20 	.word	0x20005b20

0800f4ac <update_SRAM_Addr>:

/*
 * update_SRAM_Addr
 * Writes the current size_counter to SRAM.
 */
void update_SRAM_Addr() {
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 800f4b0:	4b09      	ldr	r3, [pc, #36]	@ (800f4d8 <update_SRAM_Addr+0x2c>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	2302      	movs	r3, #2
 800f4b8:	4a08      	ldr	r2, [pc, #32]	@ (800f4dc <update_SRAM_Addr+0x30>)
 800f4ba:	4809      	ldr	r0, [pc, #36]	@ (800f4e0 <update_SRAM_Addr+0x34>)
 800f4bc:	f00a fa12 	bl	80198e4 <HAL_SRAM_Write_8b>
	if (nand_update==1)
 800f4c0:	4b08      	ldr	r3, [pc, #32]	@ (800f4e4 <update_SRAM_Addr+0x38>)
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d105      	bne.n	800f4d4 <update_SRAM_Addr+0x28>
	{
		nand_update=0;
 800f4c8:	4b06      	ldr	r3, [pc, #24]	@ (800f4e4 <update_SRAM_Addr+0x38>)
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	701a      	strb	r2, [r3, #0]
		size_counter=0;
 800f4ce:	4b03      	ldr	r3, [pc, #12]	@ (800f4dc <update_SRAM_Addr+0x30>)
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	801a      	strh	r2, [r3, #0]
	}
}
 800f4d4:	bf00      	nop
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	20000094 	.word	0x20000094
 800f4dc:	200055b8 	.word	0x200055b8
 800f4e0:	20005b20 	.word	0x20005b20
 800f4e4:	200055b4 	.word	0x200055b4

0800f4e8 <get_SRAM_Addr>:

/*
 * get_SRAM_Addr
 * Reads the last size_counter from SRAM.
 */
uint32_t get_SRAM_Addr(void) {
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
	//	_sSRAM_LastAddr SRAM_LastAddr;
	uint32_t last_update_location = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	607b      	str	r3, [r7, #4]
	//	memset(&SRAM_LastAddr,0,sizeof(SRAM_LastAddr));
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 800f4f2:	4b15      	ldr	r3, [pc, #84]	@ (800f548 <get_SRAM_Addr+0x60>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	4a14      	ldr	r2, [pc, #80]	@ (800f54c <get_SRAM_Addr+0x64>)
 800f4fc:	4814      	ldr	r0, [pc, #80]	@ (800f550 <get_SRAM_Addr+0x68>)
 800f4fe:	f00a f997 	bl	8019830 <HAL_SRAM_Read_8b>

	if(size_counter==0){
 800f502:	4b12      	ldr	r3, [pc, #72]	@ (800f54c <get_SRAM_Addr+0x64>)
 800f504:	881b      	ldrh	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d104      	bne.n	800f514 <get_SRAM_Addr+0x2c>
		update_SRAM_Addr();
 800f50a:	f7ff ffcf 	bl	800f4ac <update_SRAM_Addr>
		return sram_base_location;
 800f50e:	4b11      	ldr	r3, [pc, #68]	@ (800f554 <get_SRAM_Addr+0x6c>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	e015      	b.n	800f540 <get_SRAM_Addr+0x58>
	}
	else if((size_counter+251) > NAND_PAGE_SIZE){
 800f514:	4b0d      	ldr	r3, [pc, #52]	@ (800f54c <get_SRAM_Addr+0x64>)
 800f516:	881b      	ldrh	r3, [r3, #0]
 800f518:	f641 7205 	movw	r2, #7941	@ 0x1f05
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d907      	bls.n	800f530 <get_SRAM_Addr+0x48>
		size_counter=0;
 800f520:	4b0a      	ldr	r3, [pc, #40]	@ (800f54c <get_SRAM_Addr+0x64>)
 800f522:	2200      	movs	r2, #0
 800f524:	801a      	strh	r2, [r3, #0]
		update_SRAM_Addr();
 800f526:	f7ff ffc1 	bl	800f4ac <update_SRAM_Addr>
		return sram_base_location;
 800f52a:	4b0a      	ldr	r3, [pc, #40]	@ (800f554 <get_SRAM_Addr+0x6c>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	e007      	b.n	800f540 <get_SRAM_Addr+0x58>
	}
	else{
		last_update_location = (sram_base_location + size_counter);
 800f530:	4b06      	ldr	r3, [pc, #24]	@ (800f54c <get_SRAM_Addr+0x64>)
 800f532:	881b      	ldrh	r3, [r3, #0]
 800f534:	461a      	mov	r2, r3
 800f536:	4b07      	ldr	r3, [pc, #28]	@ (800f554 <get_SRAM_Addr+0x6c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4413      	add	r3, r2
 800f53c:	607b      	str	r3, [r7, #4]
	}
	//	SRAM_LastAddr.sram_count= size_counter;
	//	SRAM_LastAddr.last_update_location = (sram_base_location + size_counter);

	return last_update_location;
 800f53e:	687b      	ldr	r3, [r7, #4]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3708      	adds	r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	20000094 	.word	0x20000094
 800f54c:	200055b8 	.word	0x200055b8
 800f550:	20005b20 	.word	0x20005b20
 800f554:	20000088 	.word	0x20000088

0800f558 <Init_NAND_addr>:

uint8_t Init_NAND_addr()
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	af00      	add	r7, sp, #0
	nand_address.Page=0;
 800f55c:	4b06      	ldr	r3, [pc, #24]	@ (800f578 <Init_NAND_addr+0x20>)
 800f55e:	2200      	movs	r2, #0
 800f560:	801a      	strh	r2, [r3, #0]
	nand_address.Block=0;
 800f562:	4b05      	ldr	r3, [pc, #20]	@ (800f578 <Init_NAND_addr+0x20>)
 800f564:	2200      	movs	r2, #0
 800f566:	809a      	strh	r2, [r3, #4]
	nand_address.Plane=0;
 800f568:	4b03      	ldr	r3, [pc, #12]	@ (800f578 <Init_NAND_addr+0x20>)
 800f56a:	2200      	movs	r2, #0
 800f56c:	805a      	strh	r2, [r3, #2]
	update_NAND_addr();
 800f56e:	f7ff ff63 	bl	800f438 <update_NAND_addr>
	return 0;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	bd80      	pop	{r7, pc}
 800f578:	200003e8 	.word	0x200003e8

0800f57c <time_setter>:

/*
 * time_setter
 * Sets the time in SRAM using the format "SDD-MM-YYYY HH:MM:SS E".
 */
void time_setter() {
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
	uint8_t day, month, year, hours, minutes, seconds;
	//	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	//	@ D D - M M - Y Y Y  Y     H  H  :  M  M  :  S  S  $
	// Parse the time string if it follows the expected format
	if (time_str[0] == '@' && time_str[20] == '$' &&
 800f582:	4b7b      	ldr	r3, [pc, #492]	@ (800f770 <time_setter+0x1f4>)
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	2b40      	cmp	r3, #64	@ 0x40
 800f588:	f040 80ed 	bne.w	800f766 <time_setter+0x1ea>
 800f58c:	4b78      	ldr	r3, [pc, #480]	@ (800f770 <time_setter+0x1f4>)
 800f58e:	7d1b      	ldrb	r3, [r3, #20]
 800f590:	2b24      	cmp	r3, #36	@ 0x24
 800f592:	f040 80e8 	bne.w	800f766 <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 800f596:	4b76      	ldr	r3, [pc, #472]	@ (800f770 <time_setter+0x1f4>)
 800f598:	795b      	ldrb	r3, [r3, #5]
	if (time_str[0] == '@' && time_str[20] == '$' &&
 800f59a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f59c:	f040 80e3 	bne.w	800f766 <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 800f5a0:	4b73      	ldr	r3, [pc, #460]	@ (800f770 <time_setter+0x1f4>)
 800f5a2:	7a1b      	ldrb	r3, [r3, #8]
 800f5a4:	2b2d      	cmp	r3, #45	@ 0x2d
 800f5a6:	f040 80de 	bne.w	800f766 <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 800f5aa:	4b71      	ldr	r3, [pc, #452]	@ (800f770 <time_setter+0x1f4>)
 800f5ac:	7adb      	ldrb	r3, [r3, #11]
			time_str[5] == '-' && time_str[8] == '-' &&
 800f5ae:	2b20      	cmp	r3, #32
 800f5b0:	f040 80d9 	bne.w	800f766 <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 800f5b4:	4b6e      	ldr	r3, [pc, #440]	@ (800f770 <time_setter+0x1f4>)
 800f5b6:	7b9b      	ldrb	r3, [r3, #14]
 800f5b8:	2b3a      	cmp	r3, #58	@ 0x3a
 800f5ba:	f040 80d4 	bne.w	800f766 <time_setter+0x1ea>
 800f5be:	4b6c      	ldr	r3, [pc, #432]	@ (800f770 <time_setter+0x1f4>)
 800f5c0:	7c5b      	ldrb	r3, [r3, #17]
 800f5c2:	2b3a      	cmp	r3, #58	@ 0x3a
 800f5c4:	f040 80cf 	bne.w	800f766 <time_setter+0x1ea>

		// Extract date and time components from time_str
		month = (time_str[6] - '0') * 16 + (time_str[7] - '0');
 800f5c8:	4b69      	ldr	r3, [pc, #420]	@ (800f770 <time_setter+0x1f4>)
 800f5ca:	799b      	ldrb	r3, [r3, #6]
 800f5cc:	3b30      	subs	r3, #48	@ 0x30
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	011b      	lsls	r3, r3, #4
 800f5d2:	b2da      	uxtb	r2, r3
 800f5d4:	4b66      	ldr	r3, [pc, #408]	@ (800f770 <time_setter+0x1f4>)
 800f5d6:	79db      	ldrb	r3, [r3, #7]
 800f5d8:	4413      	add	r3, r2
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	3b30      	subs	r3, #48	@ 0x30
 800f5de:	71fb      	strb	r3, [r7, #7]
		year = (time_str[3] - '0') * 16 + (time_str[4] - '0');
 800f5e0:	4b63      	ldr	r3, [pc, #396]	@ (800f770 <time_setter+0x1f4>)
 800f5e2:	78db      	ldrb	r3, [r3, #3]
 800f5e4:	3b30      	subs	r3, #48	@ 0x30
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	011b      	lsls	r3, r3, #4
 800f5ea:	b2da      	uxtb	r2, r3
 800f5ec:	4b60      	ldr	r3, [pc, #384]	@ (800f770 <time_setter+0x1f4>)
 800f5ee:	791b      	ldrb	r3, [r3, #4]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	3b30      	subs	r3, #48	@ 0x30
 800f5f6:	71bb      	strb	r3, [r7, #6]
		day = (time_str[9] - '0') * 16 + (time_str[10] - '0');
 800f5f8:	4b5d      	ldr	r3, [pc, #372]	@ (800f770 <time_setter+0x1f4>)
 800f5fa:	7a5b      	ldrb	r3, [r3, #9]
 800f5fc:	3b30      	subs	r3, #48	@ 0x30
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	011b      	lsls	r3, r3, #4
 800f602:	b2da      	uxtb	r2, r3
 800f604:	4b5a      	ldr	r3, [pc, #360]	@ (800f770 <time_setter+0x1f4>)
 800f606:	7a9b      	ldrb	r3, [r3, #10]
 800f608:	4413      	add	r3, r2
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	3b30      	subs	r3, #48	@ 0x30
 800f60e:	717b      	strb	r3, [r7, #5]
		minutes = (time_str[15] - '0') * 16 + (time_str[16] - '0');
 800f610:	4b57      	ldr	r3, [pc, #348]	@ (800f770 <time_setter+0x1f4>)
 800f612:	7bdb      	ldrb	r3, [r3, #15]
 800f614:	3b30      	subs	r3, #48	@ 0x30
 800f616:	b2db      	uxtb	r3, r3
 800f618:	011b      	lsls	r3, r3, #4
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	4b54      	ldr	r3, [pc, #336]	@ (800f770 <time_setter+0x1f4>)
 800f61e:	7c1b      	ldrb	r3, [r3, #16]
 800f620:	4413      	add	r3, r2
 800f622:	b2db      	uxtb	r3, r3
 800f624:	3b30      	subs	r3, #48	@ 0x30
 800f626:	713b      	strb	r3, [r7, #4]
		hours = (time_str[12] - '0') * 16 + (time_str[13] - '0');
 800f628:	4b51      	ldr	r3, [pc, #324]	@ (800f770 <time_setter+0x1f4>)
 800f62a:	7b1b      	ldrb	r3, [r3, #12]
 800f62c:	3b30      	subs	r3, #48	@ 0x30
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	011b      	lsls	r3, r3, #4
 800f632:	b2da      	uxtb	r2, r3
 800f634:	4b4e      	ldr	r3, [pc, #312]	@ (800f770 <time_setter+0x1f4>)
 800f636:	7b5b      	ldrb	r3, [r3, #13]
 800f638:	4413      	add	r3, r2
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	3b30      	subs	r3, #48	@ 0x30
 800f63e:	70fb      	strb	r3, [r7, #3]
		seconds = (time_str[18] - '0') * 16 + (time_str[19] - '0');
 800f640:	4b4b      	ldr	r3, [pc, #300]	@ (800f770 <time_setter+0x1f4>)
 800f642:	7c9b      	ldrb	r3, [r3, #18]
 800f644:	3b30      	subs	r3, #48	@ 0x30
 800f646:	b2db      	uxtb	r3, r3
 800f648:	011b      	lsls	r3, r3, #4
 800f64a:	b2da      	uxtb	r2, r3
 800f64c:	4b48      	ldr	r3, [pc, #288]	@ (800f770 <time_setter+0x1f4>)
 800f64e:	7cdb      	ldrb	r3, [r3, #19]
 800f650:	4413      	add	r3, r2
 800f652:	b2db      	uxtb	r3, r3
 800f654:	3b30      	subs	r3, #48	@ 0x30
 800f656:	70bb      	strb	r3, [r7, #2]

		// Write time components to SRAM
		sramAddr = 0x60000000 | 0x7FFF8;
 800f658:	4b46      	ldr	r3, [pc, #280]	@ (800f774 <time_setter+0x1f8>)
 800f65a:	4a47      	ldr	r2, [pc, #284]	@ (800f778 <time_setter+0x1fc>)
 800f65c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x80;
 800f65e:	4b47      	ldr	r3, [pc, #284]	@ (800f77c <time_setter+0x200>)
 800f660:	2280      	movs	r2, #128	@ 0x80
 800f662:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f664:	4b43      	ldr	r3, [pc, #268]	@ (800f774 <time_setter+0x1f8>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4619      	mov	r1, r3
 800f66a:	4b45      	ldr	r3, [pc, #276]	@ (800f780 <time_setter+0x204>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	4a43      	ldr	r2, [pc, #268]	@ (800f77c <time_setter+0x200>)
 800f670:	4844      	ldr	r0, [pc, #272]	@ (800f784 <time_setter+0x208>)
 800f672:	f00a f937 	bl	80198e4 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF9;
 800f676:	4b3f      	ldr	r3, [pc, #252]	@ (800f774 <time_setter+0x1f8>)
 800f678:	4a43      	ldr	r2, [pc, #268]	@ (800f788 <time_setter+0x20c>)
 800f67a:	601a      	str	r2, [r3, #0]
		pSrcBuffer = seconds;
 800f67c:	4a3f      	ldr	r2, [pc, #252]	@ (800f77c <time_setter+0x200>)
 800f67e:	78bb      	ldrb	r3, [r7, #2]
 800f680:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f682:	4b3c      	ldr	r3, [pc, #240]	@ (800f774 <time_setter+0x1f8>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4619      	mov	r1, r3
 800f688:	4b3d      	ldr	r3, [pc, #244]	@ (800f780 <time_setter+0x204>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a3b      	ldr	r2, [pc, #236]	@ (800f77c <time_setter+0x200>)
 800f68e:	483d      	ldr	r0, [pc, #244]	@ (800f784 <time_setter+0x208>)
 800f690:	f00a f928 	bl	80198e4 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFa;
 800f694:	4b37      	ldr	r3, [pc, #220]	@ (800f774 <time_setter+0x1f8>)
 800f696:	4a3d      	ldr	r2, [pc, #244]	@ (800f78c <time_setter+0x210>)
 800f698:	601a      	str	r2, [r3, #0]
		pSrcBuffer = minutes;
 800f69a:	4a38      	ldr	r2, [pc, #224]	@ (800f77c <time_setter+0x200>)
 800f69c:	793b      	ldrb	r3, [r7, #4]
 800f69e:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f6a0:	4b34      	ldr	r3, [pc, #208]	@ (800f774 <time_setter+0x1f8>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	4b36      	ldr	r3, [pc, #216]	@ (800f780 <time_setter+0x204>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a34      	ldr	r2, [pc, #208]	@ (800f77c <time_setter+0x200>)
 800f6ac:	4835      	ldr	r0, [pc, #212]	@ (800f784 <time_setter+0x208>)
 800f6ae:	f00a f919 	bl	80198e4 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFb;
 800f6b2:	4b30      	ldr	r3, [pc, #192]	@ (800f774 <time_setter+0x1f8>)
 800f6b4:	4a36      	ldr	r2, [pc, #216]	@ (800f790 <time_setter+0x214>)
 800f6b6:	601a      	str	r2, [r3, #0]
		pSrcBuffer = hours;
 800f6b8:	4a30      	ldr	r2, [pc, #192]	@ (800f77c <time_setter+0x200>)
 800f6ba:	78fb      	ldrb	r3, [r7, #3]
 800f6bc:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f6be:	4b2d      	ldr	r3, [pc, #180]	@ (800f774 <time_setter+0x1f8>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	4b2e      	ldr	r3, [pc, #184]	@ (800f780 <time_setter+0x204>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a2c      	ldr	r2, [pc, #176]	@ (800f77c <time_setter+0x200>)
 800f6ca:	482e      	ldr	r0, [pc, #184]	@ (800f784 <time_setter+0x208>)
 800f6cc:	f00a f90a 	bl	80198e4 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFc;
 800f6d0:	4b28      	ldr	r3, [pc, #160]	@ (800f774 <time_setter+0x1f8>)
 800f6d2:	4a30      	ldr	r2, [pc, #192]	@ (800f794 <time_setter+0x218>)
 800f6d4:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x02;
 800f6d6:	4b29      	ldr	r3, [pc, #164]	@ (800f77c <time_setter+0x200>)
 800f6d8:	2202      	movs	r2, #2
 800f6da:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f6dc:	4b25      	ldr	r3, [pc, #148]	@ (800f774 <time_setter+0x1f8>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4b27      	ldr	r3, [pc, #156]	@ (800f780 <time_setter+0x204>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a25      	ldr	r2, [pc, #148]	@ (800f77c <time_setter+0x200>)
 800f6e8:	4826      	ldr	r0, [pc, #152]	@ (800f784 <time_setter+0x208>)
 800f6ea:	f00a f8fb 	bl	80198e4 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFd;
 800f6ee:	4b21      	ldr	r3, [pc, #132]	@ (800f774 <time_setter+0x1f8>)
 800f6f0:	4a29      	ldr	r2, [pc, #164]	@ (800f798 <time_setter+0x21c>)
 800f6f2:	601a      	str	r2, [r3, #0]
		pSrcBuffer = day;
 800f6f4:	4a21      	ldr	r2, [pc, #132]	@ (800f77c <time_setter+0x200>)
 800f6f6:	797b      	ldrb	r3, [r7, #5]
 800f6f8:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f6fa:	4b1e      	ldr	r3, [pc, #120]	@ (800f774 <time_setter+0x1f8>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4619      	mov	r1, r3
 800f700:	4b1f      	ldr	r3, [pc, #124]	@ (800f780 <time_setter+0x204>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a1d      	ldr	r2, [pc, #116]	@ (800f77c <time_setter+0x200>)
 800f706:	481f      	ldr	r0, [pc, #124]	@ (800f784 <time_setter+0x208>)
 800f708:	f00a f8ec 	bl	80198e4 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFe;
 800f70c:	4b19      	ldr	r3, [pc, #100]	@ (800f774 <time_setter+0x1f8>)
 800f70e:	4a23      	ldr	r2, [pc, #140]	@ (800f79c <time_setter+0x220>)
 800f710:	601a      	str	r2, [r3, #0]
		pSrcBuffer = month;
 800f712:	4a1a      	ldr	r2, [pc, #104]	@ (800f77c <time_setter+0x200>)
 800f714:	79fb      	ldrb	r3, [r7, #7]
 800f716:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f718:	4b16      	ldr	r3, [pc, #88]	@ (800f774 <time_setter+0x1f8>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4619      	mov	r1, r3
 800f71e:	4b18      	ldr	r3, [pc, #96]	@ (800f780 <time_setter+0x204>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a16      	ldr	r2, [pc, #88]	@ (800f77c <time_setter+0x200>)
 800f724:	4817      	ldr	r0, [pc, #92]	@ (800f784 <time_setter+0x208>)
 800f726:	f00a f8dd 	bl	80198e4 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFf;
 800f72a:	4b12      	ldr	r3, [pc, #72]	@ (800f774 <time_setter+0x1f8>)
 800f72c:	4a1c      	ldr	r2, [pc, #112]	@ (800f7a0 <time_setter+0x224>)
 800f72e:	601a      	str	r2, [r3, #0]
		pSrcBuffer = year;
 800f730:	4a12      	ldr	r2, [pc, #72]	@ (800f77c <time_setter+0x200>)
 800f732:	79bb      	ldrb	r3, [r7, #6]
 800f734:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f736:	4b0f      	ldr	r3, [pc, #60]	@ (800f774 <time_setter+0x1f8>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4619      	mov	r1, r3
 800f73c:	4b10      	ldr	r3, [pc, #64]	@ (800f780 <time_setter+0x204>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4a0e      	ldr	r2, [pc, #56]	@ (800f77c <time_setter+0x200>)
 800f742:	4810      	ldr	r0, [pc, #64]	@ (800f784 <time_setter+0x208>)
 800f744:	f00a f8ce 	bl	80198e4 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF8;
 800f748:	4b0a      	ldr	r3, [pc, #40]	@ (800f774 <time_setter+0x1f8>)
 800f74a:	4a0b      	ldr	r2, [pc, #44]	@ (800f778 <time_setter+0x1fc>)
 800f74c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x00;
 800f74e:	4b0b      	ldr	r3, [pc, #44]	@ (800f77c <time_setter+0x200>)
 800f750:	2200      	movs	r2, #0
 800f752:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800f754:	4b07      	ldr	r3, [pc, #28]	@ (800f774 <time_setter+0x1f8>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	4619      	mov	r1, r3
 800f75a:	4b09      	ldr	r3, [pc, #36]	@ (800f780 <time_setter+0x204>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4a07      	ldr	r2, [pc, #28]	@ (800f77c <time_setter+0x200>)
 800f760:	4808      	ldr	r0, [pc, #32]	@ (800f784 <time_setter+0x208>)
 800f762:	f00a f8bf 	bl	80198e4 <HAL_SRAM_Write_8b>
	}
}
 800f766:	bf00      	nop
 800f768:	3708      	adds	r7, #8
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	20005bbc 	.word	0x20005bbc
 800f774:	20005bb8 	.word	0x20005bb8
 800f778:	6007fff8 	.word	0x6007fff8
 800f77c:	200000a1 	.word	0x200000a1
 800f780:	200000a4 	.word	0x200000a4
 800f784:	20005b20 	.word	0x20005b20
 800f788:	6007fff9 	.word	0x6007fff9
 800f78c:	6007fffa 	.word	0x6007fffa
 800f790:	6007fffb 	.word	0x6007fffb
 800f794:	6007fffc 	.word	0x6007fffc
 800f798:	6007fffd 	.word	0x6007fffd
 800f79c:	6007fffe 	.word	0x6007fffe
 800f7a0:	6007ffff 	.word	0x6007ffff

0800f7a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800f7aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800f7ac:	f001 fe20 	bl	80113f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800f7b0:	f000 f882 	bl	800f8b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800f7b4:	f000 fc04 	bl	800ffc0 <MX_GPIO_Init>
	MX_FMC_Init();
 800f7b8:	f000 fb36 	bl	800fe28 <MX_FMC_Init>
	MX_SPI2_Init();
 800f7bc:	f000 f900 	bl	800f9c0 <MX_SPI2_Init>
	MX_SPI3_Init();
 800f7c0:	f000 f954 	bl	800fa6c <MX_SPI3_Init>
	MX_SPI5_Init();
 800f7c4:	f000 f9a8 	bl	800fb18 <MX_SPI5_Init>
	MX_UART4_Init();
 800f7c8:	f000 f9fc 	bl	800fbc4 <MX_UART4_Init>
	MX_UART5_Init();
 800f7cc:	f000 fa46 	bl	800fc5c <MX_UART5_Init>
	MX_UART8_Init();
 800f7d0:	f000 fa90 	bl	800fcf4 <MX_UART8_Init>
	MX_USART10_UART_Init();
 800f7d4:	f000 fadc 	bl	800fd90 <MX_USART10_UART_Init>
	MX_ICACHE_Init();
 800f7d8:	f000 f8de 	bl	800f998 <MX_ICACHE_Init>
	/* USER CODE BEGIN 2 */

	UART_InitAllHandlers();
 800f7dc:	f000 fda0 	bl	8010320 <UART_InitAllHandlers>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	sramAddr = 0x60000000 | 0x7FFF8;
 800f7e0:	4b2b      	ldr	r3, [pc, #172]	@ (800f890 <main+0xec>)
 800f7e2:	4a2c      	ldr	r2, [pc, #176]	@ (800f894 <main+0xf0>)
 800f7e4:	601a      	str	r2, [r3, #0]
	pSrcBuffer = 0x00;
 800f7e6:	4b2c      	ldr	r3, [pc, #176]	@ (800f898 <main+0xf4>)
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	701a      	strb	r2, [r3, #0]
	HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 800f7ec:	4b28      	ldr	r3, [pc, #160]	@ (800f890 <main+0xec>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	4a28      	ldr	r2, [pc, #160]	@ (800f898 <main+0xf4>)
 800f7f6:	4829      	ldr	r0, [pc, #164]	@ (800f89c <main+0xf8>)
 800f7f8:	f00a f874 	bl	80198e4 <HAL_SRAM_Write_8b>
	HAL_NAND_Reset(&hnand1);
 800f7fc:	4828      	ldr	r0, [pc, #160]	@ (800f8a0 <main+0xfc>)
 800f7fe:	f002 fb57 	bl	8011eb0 <HAL_NAND_Reset>
	get_NAND_block_status();
 800f802:	f7ff f9ed 	bl	800ebe0 <get_NAND_block_status>
	get_NAND_address();
 800f806:	f7ff fded 	bl	800f3e4 <get_NAND_address>
	get_NAND_CyclicAddr();
 800f80a:	f7ff fe3b 	bl	800f484 <get_NAND_CyclicAddr>
	sram_location = get_SRAM_Addr();
 800f80e:	f7ff fe6b 	bl	800f4e8 <get_SRAM_Addr>
 800f812:	4603      	mov	r3, r0
 800f814:	4a23      	ldr	r2, [pc, #140]	@ (800f8a4 <main+0x100>)
 800f816:	6013      	str	r3, [r2, #0]

	uint8_t SRAM_clean[8192] = {0};
 800f818:	463b      	mov	r3, r7
 800f81a:	2200      	movs	r2, #0
 800f81c:	601a      	str	r2, [r3, #0]
 800f81e:	3304      	adds	r3, #4
 800f820:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 800f824:	2100      	movs	r1, #0
 800f826:	4618      	mov	r0, r3
 800f828:	f00d fa49 	bl	801ccbe <memset>
	HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 800f82c:	2200      	movs	r2, #0
 800f82e:	2104      	movs	r1, #4
 800f830:	481d      	ldr	r0, [pc, #116]	@ (800f8a8 <main+0x104>)
 800f832:	f002 fa5f 	bl	8011cf4 <HAL_GPIO_WritePin>

		}
#endif

#if 1
		while((HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin) == 0 && HAL_GPIO_ReadPin(GPIOD,GPI_2_Pin) == 0)) // change condition when GPIOs input add
 800f836:	e001      	b.n	800f83c <main+0x98>
		{
			ADC_operation();
 800f838:	f7fd fba2 	bl	800cf80 <ADC_operation>
		while((HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin) == 0 && HAL_GPIO_ReadPin(GPIOD,GPI_2_Pin) == 0)) // change condition when GPIOs input add
 800f83c:	2110      	movs	r1, #16
 800f83e:	481b      	ldr	r0, [pc, #108]	@ (800f8ac <main+0x108>)
 800f840:	f002 fa40 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d112      	bne.n	800f870 <main+0xcc>
 800f84a:	2108      	movs	r1, #8
 800f84c:	4818      	ldr	r0, [pc, #96]	@ (800f8b0 <main+0x10c>)
 800f84e:	f002 fa39 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d0ef      	beq.n	800f838 <main+0x94>
		}

//#else
		while((HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin) == 0 && HAL_GPIO_ReadPin(GPIOD,GPI_2_Pin) == 1)) // change condition when GPIOs input add
 800f858:	e00a      	b.n	800f870 <main+0xcc>
		{
			ATP_operation();
 800f85a:	f7fe fa69 	bl	800dd30 <ATP_operation>

			if(time_set)
 800f85e:	4b15      	ldr	r3, [pc, #84]	@ (800f8b4 <main+0x110>)
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d004      	beq.n	800f870 <main+0xcc>
			{
				time_set = 0 ;
 800f866:	4b13      	ldr	r3, [pc, #76]	@ (800f8b4 <main+0x110>)
 800f868:	2200      	movs	r2, #0
 800f86a:	701a      	strb	r2, [r3, #0]
				time_setter();
 800f86c:	f7ff fe86 	bl	800f57c <time_setter>
		while((HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin) == 0 && HAL_GPIO_ReadPin(GPIOD,GPI_2_Pin) == 1)) // change condition when GPIOs input add
 800f870:	2110      	movs	r1, #16
 800f872:	480e      	ldr	r0, [pc, #56]	@ (800f8ac <main+0x108>)
 800f874:	f002 fa26 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1de      	bne.n	800f83c <main+0x98>
 800f87e:	2108      	movs	r1, #8
 800f880:	480b      	ldr	r0, [pc, #44]	@ (800f8b0 <main+0x10c>)
 800f882:	f002 fa1f 	bl	8011cc4 <HAL_GPIO_ReadPin>
 800f886:	4603      	mov	r3, r0
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d0e6      	beq.n	800f85a <main+0xb6>
		while((HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin) == 0 && HAL_GPIO_ReadPin(GPIOD,GPI_2_Pin) == 0)) // change condition when GPIOs input add
 800f88c:	e7d6      	b.n	800f83c <main+0x98>
 800f88e:	bf00      	nop
 800f890:	20005bb8 	.word	0x20005bb8
 800f894:	6007fff8 	.word	0x6007fff8
 800f898:	200000a1 	.word	0x200000a1
 800f89c:	20005b20 	.word	0x20005b20
 800f8a0:	20005b78 	.word	0x20005b78
 800f8a4:	20000084 	.word	0x20000084
 800f8a8:	42020000 	.word	0x42020000
 800f8ac:	42021000 	.word	0x42021000
 800f8b0:	42020c00 	.word	0x42020c00
 800f8b4:	20005bde 	.word	0x20005bde

0800f8b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b09c      	sub	sp, #112	@ 0x70
 800f8bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f8be:	f107 0320 	add.w	r3, r7, #32
 800f8c2:	2250      	movs	r2, #80	@ 0x50
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f00d f9f9 	bl	801ccbe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f8cc:	f107 0308 	add.w	r3, r7, #8
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	601a      	str	r2, [r3, #0]
 800f8d4:	605a      	str	r2, [r3, #4]
 800f8d6:	609a      	str	r2, [r3, #8]
 800f8d8:	60da      	str	r2, [r3, #12]
 800f8da:	611a      	str	r2, [r3, #16]
 800f8dc:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800f8de:	4b2c      	ldr	r3, [pc, #176]	@ (800f990 <SystemClock_Config+0xd8>)
 800f8e0:	691b      	ldr	r3, [r3, #16]
 800f8e2:	4a2b      	ldr	r2, [pc, #172]	@ (800f990 <SystemClock_Config+0xd8>)
 800f8e4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800f8e8:	6113      	str	r3, [r2, #16]
 800f8ea:	4b29      	ldr	r3, [pc, #164]	@ (800f990 <SystemClock_Config+0xd8>)
 800f8ec:	691b      	ldr	r3, [r3, #16]
 800f8ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f8f2:	607b      	str	r3, [r7, #4]
 800f8f4:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800f8f6:	bf00      	nop
 800f8f8:	4b25      	ldr	r3, [pc, #148]	@ (800f990 <SystemClock_Config+0xd8>)
 800f8fa:	695b      	ldr	r3, [r3, #20]
 800f8fc:	f003 0308 	and.w	r3, r3, #8
 800f900:	2b08      	cmp	r3, #8
 800f902:	d1f9      	bne.n	800f8f8 <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f904:	2301      	movs	r3, #1
 800f906:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f908:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800f90c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f90e:	2302      	movs	r3, #2
 800f910:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800f912:	2303      	movs	r3, #3
 800f914:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800f916:	2304      	movs	r3, #4
 800f918:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 80;
 800f91a:	2350      	movs	r3, #80	@ 0x50
 800f91c:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800f91e:	2302      	movs	r3, #2
 800f920:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800f922:	2302      	movs	r3, #2
 800f924:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800f926:	2302      	movs	r3, #2
 800f928:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800f92a:	2308      	movs	r3, #8
 800f92c:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800f92e:	2300      	movs	r3, #0
 800f930:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f936:	f107 0320 	add.w	r3, r7, #32
 800f93a:	4618      	mov	r0, r3
 800f93c:	f003 f942 	bl	8012bc4 <HAL_RCC_OscConfig>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d001      	beq.n	800f94a <SystemClock_Config+0x92>
	{
		Error_Handler();
 800f946:	f000 ff5e 	bl	8010806 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f94a:	231f      	movs	r3, #31
 800f94c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f94e:	2303      	movs	r3, #3
 800f950:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f952:	2300      	movs	r3, #0
 800f954:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800f956:	2300      	movs	r3, #0
 800f958:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f95a:	2300      	movs	r3, #0
 800f95c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800f95e:	2300      	movs	r3, #0
 800f960:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f962:	f107 0308 	add.w	r3, r7, #8
 800f966:	2105      	movs	r1, #5
 800f968:	4618      	mov	r0, r3
 800f96a:	f003 fd63 	bl	8013434 <HAL_RCC_ClockConfig>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d001      	beq.n	800f978 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800f974:	f000 ff47 	bl	8010806 <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800f978:	4b06      	ldr	r3, [pc, #24]	@ (800f994 <SystemClock_Config+0xdc>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800f980:	4a04      	ldr	r2, [pc, #16]	@ (800f994 <SystemClock_Config+0xdc>)
 800f982:	f043 0320 	orr.w	r3, r3, #32
 800f986:	6013      	str	r3, [r2, #0]
}
 800f988:	bf00      	nop
 800f98a:	3770      	adds	r7, #112	@ 0x70
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	44020800 	.word	0x44020800
 800f994:	40022000 	.word	0x40022000

0800f998 <MX_ICACHE_Init>:
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800f99c:	2000      	movs	r0, #0
 800f99e:	f002 fa0d 	bl	8011dbc <HAL_ICACHE_ConfigAssociativityMode>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d001      	beq.n	800f9ac <MX_ICACHE_Init+0x14>
	{
		Error_Handler();
 800f9a8:	f000 ff2d 	bl	8010806 <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK)
 800f9ac:	f002 fa26 	bl	8011dfc <HAL_ICACHE_Enable>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d001      	beq.n	800f9ba <MX_ICACHE_Init+0x22>
	{
		Error_Handler();
 800f9b6:	f000 ff26 	bl	8010806 <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 800f9ba:	bf00      	nop
 800f9bc:	bd80      	pop	{r7, pc}
	...

0800f9c0 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800f9c4:	4b27      	ldr	r3, [pc, #156]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800f9c6:	4a28      	ldr	r2, [pc, #160]	@ (800fa68 <MX_SPI2_Init+0xa8>)
 800f9c8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800f9ca:	4b26      	ldr	r3, [pc, #152]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800f9cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800f9d0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800f9d2:	4b24      	ldr	r3, [pc, #144]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800f9d8:	4b22      	ldr	r3, [pc, #136]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800f9da:	2207      	movs	r2, #7
 800f9dc:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f9de:	4b21      	ldr	r3, [pc, #132]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f9e4:	4b1f      	ldr	r3, [pc, #124]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800f9e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f9ea:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800f9ec:	4b1d      	ldr	r3, [pc, #116]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800f9ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800f9f2:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800f9f4:	4b1b      	ldr	r3, [pc, #108]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800f9f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f9fa:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f9fc:	4b19      	ldr	r3, [pc, #100]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800f9fe:	2200      	movs	r2, #0
 800fa00:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800fa02:	4b18      	ldr	r3, [pc, #96]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa04:	2200      	movs	r2, #0
 800fa06:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fa08:	4b16      	ldr	r3, [pc, #88]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 0x7;
 800fa0e:	4b15      	ldr	r3, [pc, #84]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa10:	2207      	movs	r2, #7
 800fa12:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800fa14:	4b13      	ldr	r3, [pc, #76]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa16:	2200      	movs	r2, #0
 800fa18:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800fa1a:	4b12      	ldr	r3, [pc, #72]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800fa20:	4b10      	ldr	r3, [pc, #64]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800fa26:	4b0f      	ldr	r3, [pc, #60]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa28:	2200      	movs	r2, #0
 800fa2a:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800fa2c:	4b0d      	ldr	r3, [pc, #52]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800fa32:	4b0c      	ldr	r3, [pc, #48]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800fa38:	4b0a      	ldr	r3, [pc, #40]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800fa3e:	4b09      	ldr	r3, [pc, #36]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa40:	2200      	movs	r2, #0
 800fa42:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800fa44:	4b07      	ldr	r3, [pc, #28]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa46:	2200      	movs	r2, #0
 800fa48:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800fa4a:	4b06      	ldr	r3, [pc, #24]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800fa50:	4804      	ldr	r0, [pc, #16]	@ (800fa64 <MX_SPI2_Init+0xa4>)
 800fa52:	f009 f883 	bl	8018b5c <HAL_SPI_Init>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d001      	beq.n	800fa60 <MX_SPI2_Init+0xa0>
	{
		Error_Handler();
 800fa5c:	f000 fed3 	bl	8010806 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800fa60:	bf00      	nop
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	20005720 	.word	0x20005720
 800fa68:	40003800 	.word	0x40003800

0800fa6c <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800fa70:	4b27      	ldr	r3, [pc, #156]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fa72:	4a28      	ldr	r2, [pc, #160]	@ (800fb14 <MX_SPI3_Init+0xa8>)
 800fa74:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800fa76:	4b26      	ldr	r3, [pc, #152]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fa78:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800fa7c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800fa7e:	4b24      	ldr	r3, [pc, #144]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fa80:	2200      	movs	r2, #0
 800fa82:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800fa84:	4b22      	ldr	r3, [pc, #136]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fa86:	2207      	movs	r2, #7
 800fa88:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fa8a:	4b21      	ldr	r3, [pc, #132]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800fa90:	4b1f      	ldr	r3, [pc, #124]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fa92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fa96:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800fa98:	4b1d      	ldr	r3, [pc, #116]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fa9a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800fa9e:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800faa0:	4b1b      	ldr	r3, [pc, #108]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800faa2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800faa6:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800faa8:	4b19      	ldr	r3, [pc, #100]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800faaa:	2200      	movs	r2, #0
 800faac:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800faae:	4b18      	ldr	r3, [pc, #96]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fab4:	4b16      	ldr	r3, [pc, #88]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fab6:	2200      	movs	r2, #0
 800fab8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 0x7;
 800faba:	4b15      	ldr	r3, [pc, #84]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fabc:	2207      	movs	r2, #7
 800fabe:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800fac0:	4b13      	ldr	r3, [pc, #76]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800fac6:	4b12      	ldr	r3, [pc, #72]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fac8:	2200      	movs	r2, #0
 800faca:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800facc:	4b10      	ldr	r3, [pc, #64]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800face:	2200      	movs	r2, #0
 800fad0:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800fad2:	4b0f      	ldr	r3, [pc, #60]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800fad8:	4b0d      	ldr	r3, [pc, #52]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fada:	2200      	movs	r2, #0
 800fadc:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800fade:	4b0c      	ldr	r3, [pc, #48]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fae0:	2200      	movs	r2, #0
 800fae2:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800fae4:	4b0a      	ldr	r3, [pc, #40]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fae6:	2200      	movs	r2, #0
 800fae8:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800faea:	4b09      	ldr	r3, [pc, #36]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800faec:	2200      	movs	r2, #0
 800faee:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800faf0:	4b07      	ldr	r3, [pc, #28]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800faf2:	2200      	movs	r2, #0
 800faf4:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800faf6:	4b06      	ldr	r3, [pc, #24]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800fafc:	4804      	ldr	r0, [pc, #16]	@ (800fb10 <MX_SPI3_Init+0xa4>)
 800fafe:	f009 f82d 	bl	8018b5c <HAL_SPI_Init>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d001      	beq.n	800fb0c <MX_SPI3_Init+0xa0>
	{
		Error_Handler();
 800fb08:	f000 fe7d 	bl	8010806 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 800fb0c:	bf00      	nop
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	200057b0 	.word	0x200057b0
 800fb14:	40003c00 	.word	0x40003c00

0800fb18 <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 800fb1c:	4b27      	ldr	r3, [pc, #156]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb1e:	4a28      	ldr	r2, [pc, #160]	@ (800fbc0 <MX_SPI5_Init+0xa8>)
 800fb20:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 800fb22:	4b26      	ldr	r3, [pc, #152]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800fb28:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800fb2a:	4b24      	ldr	r3, [pc, #144]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800fb30:	4b22      	ldr	r3, [pc, #136]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb32:	2207      	movs	r2, #7
 800fb34:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fb36:	4b21      	ldr	r3, [pc, #132]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 800fb3c:	4b1f      	ldr	r3, [pc, #124]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fb42:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 800fb44:	4b1d      	ldr	r3, [pc, #116]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800fb4a:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800fb4c:	4b1b      	ldr	r3, [pc, #108]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fb52:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fb54:	4b19      	ldr	r3, [pc, #100]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb56:	2200      	movs	r2, #0
 800fb58:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800fb5a:	4b18      	ldr	r3, [pc, #96]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fb60:	4b16      	ldr	r3, [pc, #88]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 0x7;
 800fb66:	4b15      	ldr	r3, [pc, #84]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb68:	2207      	movs	r2, #7
 800fb6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800fb6c:	4b13      	ldr	r3, [pc, #76]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800fb72:	4b12      	ldr	r3, [pc, #72]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800fb78:	4b10      	ldr	r3, [pc, #64]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800fb7e:	4b0f      	ldr	r3, [pc, #60]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800fb84:	4b0d      	ldr	r3, [pc, #52]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800fb8a:	4b0c      	ldr	r3, [pc, #48]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800fb90:	4b0a      	ldr	r3, [pc, #40]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800fb96:	4b09      	ldr	r3, [pc, #36]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi5.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800fb9c:	4b07      	ldr	r3, [pc, #28]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi5.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800fba2:	4b06      	ldr	r3, [pc, #24]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800fba8:	4804      	ldr	r0, [pc, #16]	@ (800fbbc <MX_SPI5_Init+0xa4>)
 800fbaa:	f008 ffd7 	bl	8018b5c <HAL_SPI_Init>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d001      	beq.n	800fbb8 <MX_SPI5_Init+0xa0>
	{
		Error_Handler();
 800fbb4:	f000 fe27 	bl	8010806 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 800fbb8:	bf00      	nop
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	20005840 	.word	0x20005840
 800fbc0:	44002000 	.word	0x44002000

0800fbc4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800fbc8:	4b22      	ldr	r3, [pc, #136]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fbca:	4a23      	ldr	r2, [pc, #140]	@ (800fc58 <MX_UART4_Init+0x94>)
 800fbcc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800fbce:	4b21      	ldr	r3, [pc, #132]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fbd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fbd4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800fbd6:	4b1f      	ldr	r3, [pc, #124]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800fbdc:	4b1d      	ldr	r3, [pc, #116]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800fbe2:	4b1c      	ldr	r3, [pc, #112]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800fbe8:	4b1a      	ldr	r3, [pc, #104]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fbea:	220c      	movs	r2, #12
 800fbec:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fbee:	4b19      	ldr	r3, [pc, #100]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800fbf4:	4b17      	ldr	r3, [pc, #92]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fbfa:	4b16      	ldr	r3, [pc, #88]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fc00:	4b14      	ldr	r3, [pc, #80]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fc06:	4b13      	ldr	r3, [pc, #76]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fc08:	2200      	movs	r2, #0
 800fc0a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800fc0c:	4811      	ldr	r0, [pc, #68]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fc0e:	f009 fead 	bl	801996c <HAL_UART_Init>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d001      	beq.n	800fc1c <MX_UART4_Init+0x58>
	{
		Error_Handler();
 800fc18:	f000 fdf5 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	480d      	ldr	r0, [pc, #52]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fc20:	f00c f849 	bl	801bcb6 <HAL_UARTEx_SetTxFifoThreshold>
 800fc24:	4603      	mov	r3, r0
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d001      	beq.n	800fc2e <MX_UART4_Init+0x6a>
	{
		Error_Handler();
 800fc2a:	f000 fdec 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fc2e:	2100      	movs	r1, #0
 800fc30:	4808      	ldr	r0, [pc, #32]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fc32:	f00c f87e 	bl	801bd32 <HAL_UARTEx_SetRxFifoThreshold>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d001      	beq.n	800fc40 <MX_UART4_Init+0x7c>
	{
		Error_Handler();
 800fc3c:	f000 fde3 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800fc40:	4804      	ldr	r0, [pc, #16]	@ (800fc54 <MX_UART4_Init+0x90>)
 800fc42:	f00b ffff 	bl	801bc44 <HAL_UARTEx_DisableFifoMode>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d001      	beq.n	800fc50 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 800fc4c:	f000 fddb 	bl	8010806 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800fc50:	bf00      	nop
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	200058d0 	.word	0x200058d0
 800fc58:	40004c00 	.word	0x40004c00

0800fc5c <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 800fc60:	4b22      	ldr	r3, [pc, #136]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc62:	4a23      	ldr	r2, [pc, #140]	@ (800fcf0 <MX_UART5_Init+0x94>)
 800fc64:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 800fc66:	4b21      	ldr	r3, [pc, #132]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fc6c:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800fc6e:	4b1f      	ldr	r3, [pc, #124]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc70:	2200      	movs	r2, #0
 800fc72:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 800fc74:	4b1d      	ldr	r3, [pc, #116]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc76:	2200      	movs	r2, #0
 800fc78:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800fc7a:	4b1c      	ldr	r3, [pc, #112]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800fc80:	4b1a      	ldr	r3, [pc, #104]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc82:	220c      	movs	r2, #12
 800fc84:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fc86:	4b19      	ldr	r3, [pc, #100]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc88:	2200      	movs	r2, #0
 800fc8a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800fc8c:	4b17      	ldr	r3, [pc, #92]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fc92:	4b16      	ldr	r3, [pc, #88]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc94:	2200      	movs	r2, #0
 800fc96:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fc98:	4b14      	ldr	r3, [pc, #80]	@ (800fcec <MX_UART5_Init+0x90>)
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fc9e:	4b13      	ldr	r3, [pc, #76]	@ (800fcec <MX_UART5_Init+0x90>)
 800fca0:	2200      	movs	r2, #0
 800fca2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 800fca4:	4811      	ldr	r0, [pc, #68]	@ (800fcec <MX_UART5_Init+0x90>)
 800fca6:	f009 fe61 	bl	801996c <HAL_UART_Init>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d001      	beq.n	800fcb4 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 800fcb0:	f000 fda9 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	480d      	ldr	r0, [pc, #52]	@ (800fcec <MX_UART5_Init+0x90>)
 800fcb8:	f00b fffd 	bl	801bcb6 <HAL_UARTEx_SetTxFifoThreshold>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d001      	beq.n	800fcc6 <MX_UART5_Init+0x6a>
	{
		Error_Handler();
 800fcc2:	f000 fda0 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	4808      	ldr	r0, [pc, #32]	@ (800fcec <MX_UART5_Init+0x90>)
 800fcca:	f00c f832 	bl	801bd32 <HAL_UARTEx_SetRxFifoThreshold>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d001      	beq.n	800fcd8 <MX_UART5_Init+0x7c>
	{
		Error_Handler();
 800fcd4:	f000 fd97 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800fcd8:	4804      	ldr	r0, [pc, #16]	@ (800fcec <MX_UART5_Init+0x90>)
 800fcda:	f00b ffb3 	bl	801bc44 <HAL_UARTEx_DisableFifoMode>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d001      	beq.n	800fce8 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 800fce4:	f000 fd8f 	bl	8010806 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800fce8:	bf00      	nop
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	20005964 	.word	0x20005964
 800fcf0:	40005000 	.word	0x40005000

0800fcf4 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 800fcf8:	4b23      	ldr	r3, [pc, #140]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fcfa:	4a24      	ldr	r2, [pc, #144]	@ (800fd8c <MX_UART8_Init+0x98>)
 800fcfc:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 800fcfe:	4b22      	ldr	r3, [pc, #136]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fd04:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800fd06:	4b20      	ldr	r3, [pc, #128]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 800fd0c:	4b1e      	ldr	r3, [pc, #120]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd0e:	2200      	movs	r2, #0
 800fd10:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 800fd12:	4b1d      	ldr	r3, [pc, #116]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 800fd18:	4b1b      	ldr	r3, [pc, #108]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd1a:	220c      	movs	r2, #12
 800fd1c:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fd1e:	4b1a      	ldr	r3, [pc, #104]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd20:	2200      	movs	r2, #0
 800fd22:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800fd24:	4b18      	ldr	r3, [pc, #96]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd26:	2200      	movs	r2, #0
 800fd28:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fd2a:	4b17      	ldr	r3, [pc, #92]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fd30:	4b15      	ldr	r3, [pc, #84]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd32:	2200      	movs	r2, #0
 800fd34:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fd36:	4b14      	ldr	r3, [pc, #80]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 800fd3c:	4812      	ldr	r0, [pc, #72]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd3e:	f009 fe15 	bl	801996c <HAL_UART_Init>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d001      	beq.n	800fd4c <MX_UART8_Init+0x58>
	{
		Error_Handler();
 800fd48:	f000 fd5d 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800fd4c:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 800fd50:	480d      	ldr	r0, [pc, #52]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd52:	f00b ffb0 	bl	801bcb6 <HAL_UARTEx_SetTxFifoThreshold>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d001      	beq.n	800fd60 <MX_UART8_Init+0x6c>
	{
		Error_Handler();
 800fd5c:	f000 fd53 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fd60:	2100      	movs	r1, #0
 800fd62:	4809      	ldr	r0, [pc, #36]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd64:	f00b ffe5 	bl	801bd32 <HAL_UARTEx_SetRxFifoThreshold>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d001      	beq.n	800fd72 <MX_UART8_Init+0x7e>
	{
		Error_Handler();
 800fd6e:	f000 fd4a 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800fd72:	4805      	ldr	r0, [pc, #20]	@ (800fd88 <MX_UART8_Init+0x94>)
 800fd74:	f00b ff66 	bl	801bc44 <HAL_UARTEx_DisableFifoMode>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <MX_UART8_Init+0x8e>
	{
		Error_Handler();
 800fd7e:	f000 fd42 	bl	8010806 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 800fd82:	bf00      	nop
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	200059f8 	.word	0x200059f8
 800fd8c:	40007c00 	.word	0x40007c00

0800fd90 <MX_USART10_UART_Init>:
 * @brief USART10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART10_UART_Init(void)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	af00      	add	r7, sp, #0
	/* USER CODE END USART10_Init 0 */

	/* USER CODE BEGIN USART10_Init 1 */

	/* USER CODE END USART10_Init 1 */
	huart10.Instance = USART10;
 800fd94:	4b22      	ldr	r3, [pc, #136]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fd96:	4a23      	ldr	r2, [pc, #140]	@ (800fe24 <MX_USART10_UART_Init+0x94>)
 800fd98:	601a      	str	r2, [r3, #0]
	huart10.Init.BaudRate = 115200;
 800fd9a:	4b21      	ldr	r3, [pc, #132]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fd9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fda0:	605a      	str	r2, [r3, #4]
	huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800fda2:	4b1f      	ldr	r3, [pc, #124]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fda4:	2200      	movs	r2, #0
 800fda6:	609a      	str	r2, [r3, #8]
	huart10.Init.StopBits = UART_STOPBITS_1;
 800fda8:	4b1d      	ldr	r3, [pc, #116]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	60da      	str	r2, [r3, #12]
	huart10.Init.Parity = UART_PARITY_NONE;
 800fdae:	4b1c      	ldr	r3, [pc, #112]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	611a      	str	r2, [r3, #16]
	huart10.Init.Mode = UART_MODE_TX_RX;
 800fdb4:	4b1a      	ldr	r3, [pc, #104]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdb6:	220c      	movs	r2, #12
 800fdb8:	615a      	str	r2, [r3, #20]
	huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fdba:	4b19      	ldr	r3, [pc, #100]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	619a      	str	r2, [r3, #24]
	huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800fdc0:	4b17      	ldr	r3, [pc, #92]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	61da      	str	r2, [r3, #28]
	huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fdc6:	4b16      	ldr	r3, [pc, #88]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdc8:	2200      	movs	r2, #0
 800fdca:	621a      	str	r2, [r3, #32]
	huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fdcc:	4b14      	ldr	r3, [pc, #80]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdce:	2200      	movs	r2, #0
 800fdd0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fdd2:	4b13      	ldr	r3, [pc, #76]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart10) != HAL_OK)
 800fdd8:	4811      	ldr	r0, [pc, #68]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdda:	f009 fdc7 	bl	801996c <HAL_UART_Init>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d001      	beq.n	800fde8 <MX_USART10_UART_Init+0x58>
	{
		Error_Handler();
 800fde4:	f000 fd0f 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fde8:	2100      	movs	r1, #0
 800fdea:	480d      	ldr	r0, [pc, #52]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdec:	f00b ff63 	bl	801bcb6 <HAL_UARTEx_SetTxFifoThreshold>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d001      	beq.n	800fdfa <MX_USART10_UART_Init+0x6a>
	{
		Error_Handler();
 800fdf6:	f000 fd06 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	4808      	ldr	r0, [pc, #32]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fdfe:	f00b ff98 	bl	801bd32 <HAL_UARTEx_SetRxFifoThreshold>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <MX_USART10_UART_Init+0x7c>
	{
		Error_Handler();
 800fe08:	f000 fcfd 	bl	8010806 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 800fe0c:	4804      	ldr	r0, [pc, #16]	@ (800fe20 <MX_USART10_UART_Init+0x90>)
 800fe0e:	f00b ff19 	bl	801bc44 <HAL_UARTEx_DisableFifoMode>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d001      	beq.n	800fe1c <MX_USART10_UART_Init+0x8c>
	{
		Error_Handler();
 800fe18:	f000 fcf5 	bl	8010806 <Error_Handler>
	}
	/* USER CODE BEGIN USART10_Init 2 */

	/* USER CODE END USART10_Init 2 */

}
 800fe1c:	bf00      	nop
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	20005a8c 	.word	0x20005a8c
 800fe24:	40006800 	.word	0x40006800

0800fe28 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b090      	sub	sp, #64	@ 0x40
 800fe2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 800fe2e:	f107 0320 	add.w	r3, r7, #32
 800fe32:	2220      	movs	r2, #32
 800fe34:	2100      	movs	r1, #0
 800fe36:	4618      	mov	r0, r3
 800fe38:	f00c ff41 	bl	801ccbe <memset>
	FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 800fe3c:	f107 0310 	add.w	r3, r7, #16
 800fe40:	2200      	movs	r2, #0
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	605a      	str	r2, [r3, #4]
 800fe46:	609a      	str	r2, [r3, #8]
 800fe48:	60da      	str	r2, [r3, #12]
	FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800fe4a:	463b      	mov	r3, r7
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	601a      	str	r2, [r3, #0]
 800fe50:	605a      	str	r2, [r3, #4]
 800fe52:	609a      	str	r2, [r3, #8]
 800fe54:	60da      	str	r2, [r3, #12]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 800fe56:	4b55      	ldr	r3, [pc, #340]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe58:	4a55      	ldr	r2, [pc, #340]	@ (800ffb0 <MX_FMC_Init+0x188>)
 800fe5a:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800fe5c:	4b53      	ldr	r3, [pc, #332]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe5e:	4a55      	ldr	r2, [pc, #340]	@ (800ffb4 <MX_FMC_Init+0x18c>)
 800fe60:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800fe62:	4b52      	ldr	r3, [pc, #328]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe64:	2200      	movs	r2, #0
 800fe66:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800fe68:	4b50      	ldr	r3, [pc, #320]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800fe6e:	4b4f      	ldr	r3, [pc, #316]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe70:	2200      	movs	r2, #0
 800fe72:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800fe74:	4b4d      	ldr	r3, [pc, #308]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe76:	2200      	movs	r2, #0
 800fe78:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800fe7a:	4b4c      	ldr	r3, [pc, #304]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800fe80:	4b4a      	ldr	r3, [pc, #296]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800fe86:	4b49      	ldr	r3, [pc, #292]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800fe8c:	4b47      	ldr	r3, [pc, #284]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe8e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fe92:	625a      	str	r2, [r3, #36]	@ 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800fe94:	4b45      	ldr	r3, [pc, #276]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe96:	2200      	movs	r2, #0
 800fe98:	629a      	str	r2, [r3, #40]	@ 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800fe9a:	4b44      	ldr	r3, [pc, #272]	@ (800ffac <MX_FMC_Init+0x184>)
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800fea0:	4b42      	ldr	r3, [pc, #264]	@ (800ffac <MX_FMC_Init+0x184>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	631a      	str	r2, [r3, #48]	@ 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800fea6:	4b41      	ldr	r3, [pc, #260]	@ (800ffac <MX_FMC_Init+0x184>)
 800fea8:	2200      	movs	r2, #0
 800feaa:	635a      	str	r2, [r3, #52]	@ 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800feac:	4b3f      	ldr	r3, [pc, #252]	@ (800ffac <MX_FMC_Init+0x184>)
 800feae:	2200      	movs	r2, #0
 800feb0:	639a      	str	r2, [r3, #56]	@ 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800feb2:	4b3e      	ldr	r3, [pc, #248]	@ (800ffac <MX_FMC_Init+0x184>)
 800feb4:	2200      	movs	r2, #0
 800feb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsram1.Init.NBLSetupTime = 0;
 800feb8:	4b3c      	ldr	r3, [pc, #240]	@ (800ffac <MX_FMC_Init+0x184>)
 800feba:	2200      	movs	r2, #0
 800febc:	645a      	str	r2, [r3, #68]	@ 0x44
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800febe:	4b3b      	ldr	r3, [pc, #236]	@ (800ffac <MX_FMC_Init+0x184>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	641a      	str	r2, [r3, #64]	@ 0x40
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 800fec4:	4b39      	ldr	r3, [pc, #228]	@ (800ffac <MX_FMC_Init+0x184>)
 800fec6:	2200      	movs	r2, #0
 800fec8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	/* Timing */
	Timing.AddressSetupTime = 15;
 800fecc:	230f      	movs	r3, #15
 800fece:	623b      	str	r3, [r7, #32]
	Timing.AddressHoldTime = 15;
 800fed0:	230f      	movs	r3, #15
 800fed2:	627b      	str	r3, [r7, #36]	@ 0x24
	Timing.DataSetupTime = 255;
 800fed4:	23ff      	movs	r3, #255	@ 0xff
 800fed6:	62bb      	str	r3, [r7, #40]	@ 0x28
	Timing.DataHoldTime = 3;
 800fed8:	2303      	movs	r3, #3
 800feda:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Timing.BusTurnAroundDuration = 15;
 800fedc:	230f      	movs	r3, #15
 800fede:	633b      	str	r3, [r7, #48]	@ 0x30
	Timing.CLKDivision = 16;
 800fee0:	2310      	movs	r3, #16
 800fee2:	637b      	str	r3, [r7, #52]	@ 0x34
	Timing.DataLatency = 17;
 800fee4:	2311      	movs	r3, #17
 800fee6:	63bb      	str	r3, [r7, #56]	@ 0x38
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 800fee8:	2300      	movs	r3, #0
 800feea:	63fb      	str	r3, [r7, #60]	@ 0x3c
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800feec:	f107 0320 	add.w	r3, r7, #32
 800fef0:	2200      	movs	r2, #0
 800fef2:	4619      	mov	r1, r3
 800fef4:	482d      	ldr	r0, [pc, #180]	@ (800ffac <MX_FMC_Init+0x184>)
 800fef6:	f009 fc4b 	bl	8019790 <HAL_SRAM_Init>
 800fefa:	4603      	mov	r3, r0
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d001      	beq.n	800ff04 <MX_FMC_Init+0xdc>
	{
		Error_Handler( );
 800ff00:	f000 fc81 	bl	8010806 <Error_Handler>
	}

	/** Perform the NAND1 memory initialization sequence
	 */
	hnand1.Instance = FMC_NAND_DEVICE;
 800ff04:	4b2c      	ldr	r3, [pc, #176]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff06:	4a2d      	ldr	r2, [pc, #180]	@ (800ffbc <MX_FMC_Init+0x194>)
 800ff08:	601a      	str	r2, [r3, #0]
	/* hnand1.Init */
	hnand1.Init.NandBank = FMC_NAND_BANK3;
 800ff0a:	4b2b      	ldr	r3, [pc, #172]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ff10:	605a      	str	r2, [r3, #4]
	hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 800ff12:	4b29      	ldr	r3, [pc, #164]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff14:	2202      	movs	r2, #2
 800ff16:	609a      	str	r2, [r3, #8]
	hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 800ff18:	4b27      	ldr	r3, [pc, #156]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	60da      	str	r2, [r3, #12]
	hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 800ff1e:	4b26      	ldr	r3, [pc, #152]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff20:	2240      	movs	r2, #64	@ 0x40
 800ff22:	611a      	str	r2, [r3, #16]
	hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_8192BYTE;
 800ff24:	4b24      	ldr	r3, [pc, #144]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff26:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800ff2a:	615a      	str	r2, [r3, #20]
	hnand1.Init.TCLRSetupTime = 15;
 800ff2c:	4b22      	ldr	r3, [pc, #136]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff2e:	220f      	movs	r2, #15
 800ff30:	619a      	str	r2, [r3, #24]
	hnand1.Init.TARSetupTime = 15;
 800ff32:	4b21      	ldr	r3, [pc, #132]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff34:	220f      	movs	r2, #15
 800ff36:	61da      	str	r2, [r3, #28]
	/* hnand1.Config */
	hnand1.Config.PageSize = 8192;
 800ff38:	4b1f      	ldr	r3, [pc, #124]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ff3e:	625a      	str	r2, [r3, #36]	@ 0x24
	hnand1.Config.SpareAreaSize = 448;
 800ff40:	4b1d      	ldr	r3, [pc, #116]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff42:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 800ff46:	629a      	str	r2, [r3, #40]	@ 0x28
	hnand1.Config.BlockSize = 128;
 800ff48:	4b1b      	ldr	r3, [pc, #108]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff4a:	2280      	movs	r2, #128	@ 0x80
 800ff4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hnand1.Config.BlockNbr = 4096;
 800ff4e:	4b1a      	ldr	r3, [pc, #104]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ff54:	631a      	str	r2, [r3, #48]	@ 0x30
	hnand1.Config.PlaneNbr = 2;
 800ff56:	4b18      	ldr	r3, [pc, #96]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff58:	2202      	movs	r2, #2
 800ff5a:	635a      	str	r2, [r3, #52]	@ 0x34
	hnand1.Config.PlaneSize = 2048;
 800ff5c:	4b16      	ldr	r3, [pc, #88]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ff62:	639a      	str	r2, [r3, #56]	@ 0x38
	hnand1.Config.ExtraCommandEnable = ENABLE;
 800ff64:	4b14      	ldr	r3, [pc, #80]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff66:	2201      	movs	r2, #1
 800ff68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	/* ComSpaceTiming */
	ComSpaceTiming.SetupTime = 19;
 800ff6c:	2313      	movs	r3, #19
 800ff6e:	613b      	str	r3, [r7, #16]
	ComSpaceTiming.WaitSetupTime = 19;
 800ff70:	2313      	movs	r3, #19
 800ff72:	617b      	str	r3, [r7, #20]
	ComSpaceTiming.HoldSetupTime = 6;
 800ff74:	2306      	movs	r3, #6
 800ff76:	61bb      	str	r3, [r7, #24]
	ComSpaceTiming.HiZSetupTime = 3;
 800ff78:	2303      	movs	r3, #3
 800ff7a:	61fb      	str	r3, [r7, #28]
	/* AttSpaceTiming */
	AttSpaceTiming.SetupTime = 19;
 800ff7c:	2313      	movs	r3, #19
 800ff7e:	603b      	str	r3, [r7, #0]
	AttSpaceTiming.WaitSetupTime = 19;
 800ff80:	2313      	movs	r3, #19
 800ff82:	607b      	str	r3, [r7, #4]
	AttSpaceTiming.HoldSetupTime = 10;
 800ff84:	230a      	movs	r3, #10
 800ff86:	60bb      	str	r3, [r7, #8]
	AttSpaceTiming.HiZSetupTime = 9;
 800ff88:	2309      	movs	r3, #9
 800ff8a:	60fb      	str	r3, [r7, #12]

	if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800ff8c:	463a      	mov	r2, r7
 800ff8e:	f107 0310 	add.w	r3, r7, #16
 800ff92:	4619      	mov	r1, r3
 800ff94:	4808      	ldr	r0, [pc, #32]	@ (800ffb8 <MX_FMC_Init+0x190>)
 800ff96:	f001 ff41 	bl	8011e1c <HAL_NAND_Init>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d001      	beq.n	800ffa4 <MX_FMC_Init+0x17c>
	{
		Error_Handler( );
 800ffa0:	f000 fc31 	bl	8010806 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 800ffa4:	bf00      	nop
 800ffa6:	3740      	adds	r7, #64	@ 0x40
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	20005b20 	.word	0x20005b20
 800ffb0:	47000400 	.word	0x47000400
 800ffb4:	47000504 	.word	0x47000504
 800ffb8:	20005b78 	.word	0x20005b78
 800ffbc:	47000480 	.word	0x47000480

0800ffc0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b08e      	sub	sp, #56	@ 0x38
 800ffc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ffc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ffca:	2200      	movs	r2, #0
 800ffcc:	601a      	str	r2, [r3, #0]
 800ffce:	605a      	str	r2, [r3, #4]
 800ffd0:	609a      	str	r2, [r3, #8]
 800ffd2:	60da      	str	r2, [r3, #12]
 800ffd4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800ffd6:	4bc2      	ldr	r3, [pc, #776]	@ (80102e0 <MX_GPIO_Init+0x320>)
 800ffd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ffdc:	4ac0      	ldr	r2, [pc, #768]	@ (80102e0 <MX_GPIO_Init+0x320>)
 800ffde:	f043 0310 	orr.w	r3, r3, #16
 800ffe2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ffe6:	4bbe      	ldr	r3, [pc, #760]	@ (80102e0 <MX_GPIO_Init+0x320>)
 800ffe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ffec:	f003 0310 	and.w	r3, r3, #16
 800fff0:	623b      	str	r3, [r7, #32]
 800fff2:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800fff4:	4bba      	ldr	r3, [pc, #744]	@ (80102e0 <MX_GPIO_Init+0x320>)
 800fff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fffa:	4ab9      	ldr	r2, [pc, #740]	@ (80102e0 <MX_GPIO_Init+0x320>)
 800fffc:	f043 0304 	orr.w	r3, r3, #4
 8010000:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010004:	4bb6      	ldr	r3, [pc, #728]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801000a:	f003 0304 	and.w	r3, r3, #4
 801000e:	61fb      	str	r3, [r7, #28]
 8010010:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8010012:	4bb3      	ldr	r3, [pc, #716]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010018:	4ab1      	ldr	r2, [pc, #708]	@ (80102e0 <MX_GPIO_Init+0x320>)
 801001a:	f043 0320 	orr.w	r3, r3, #32
 801001e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010022:	4baf      	ldr	r3, [pc, #700]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010028:	f003 0320 	and.w	r3, r3, #32
 801002c:	61bb      	str	r3, [r7, #24]
 801002e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8010030:	4bab      	ldr	r3, [pc, #684]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010036:	4aaa      	ldr	r2, [pc, #680]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801003c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010040:	4ba7      	ldr	r3, [pc, #668]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010042:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801004a:	617b      	str	r3, [r7, #20]
 801004c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801004e:	4ba4      	ldr	r3, [pc, #656]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010054:	4aa2      	ldr	r2, [pc, #648]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010056:	f043 0301 	orr.w	r3, r3, #1
 801005a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801005e:	4ba0      	ldr	r3, [pc, #640]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010064:	f003 0301 	and.w	r3, r3, #1
 8010068:	613b      	str	r3, [r7, #16]
 801006a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801006c:	4b9c      	ldr	r3, [pc, #624]	@ (80102e0 <MX_GPIO_Init+0x320>)
 801006e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010072:	4a9b      	ldr	r2, [pc, #620]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010074:	f043 0302 	orr.w	r3, r3, #2
 8010078:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801007c:	4b98      	ldr	r3, [pc, #608]	@ (80102e0 <MX_GPIO_Init+0x320>)
 801007e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010082:	f003 0302 	and.w	r3, r3, #2
 8010086:	60fb      	str	r3, [r7, #12]
 8010088:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801008a:	4b95      	ldr	r3, [pc, #596]	@ (80102e0 <MX_GPIO_Init+0x320>)
 801008c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010090:	4a93      	ldr	r2, [pc, #588]	@ (80102e0 <MX_GPIO_Init+0x320>)
 8010092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010096:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801009a:	4b91      	ldr	r3, [pc, #580]	@ (80102e0 <MX_GPIO_Init+0x320>)
 801009c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100a4:	60bb      	str	r3, [r7, #8]
 80100a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80100a8:	4b8d      	ldr	r3, [pc, #564]	@ (80102e0 <MX_GPIO_Init+0x320>)
 80100aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100ae:	4a8c      	ldr	r2, [pc, #560]	@ (80102e0 <MX_GPIO_Init+0x320>)
 80100b0:	f043 0308 	orr.w	r3, r3, #8
 80100b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80100b8:	4b89      	ldr	r3, [pc, #548]	@ (80102e0 <MX_GPIO_Init+0x320>)
 80100ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100be:	f003 0308 	and.w	r3, r3, #8
 80100c2:	607b      	str	r3, [r7, #4]
 80100c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, CS_1_Pin|START_1_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 80100c6:	2200      	movs	r2, #0
 80100c8:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 80100cc:	4885      	ldr	r0, [pc, #532]	@ (80102e4 <MX_GPIO_Init+0x324>)
 80100ce:	f001 fe11 	bl	8011cf4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 80100d2:	2200      	movs	r2, #0
 80100d4:	2104      	movs	r1, #4
 80100d6:	4884      	ldr	r0, [pc, #528]	@ (80102e8 <MX_GPIO_Init+0x328>)
 80100d8:	f001 fe0c 	bl	8011cf4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 80100dc:	2200      	movs	r2, #0
 80100de:	f241 4167 	movw	r1, #5223	@ 0x1467
 80100e2:	4882      	ldr	r0, [pc, #520]	@ (80102ec <MX_GPIO_Init+0x32c>)
 80100e4:	f001 fe06 	bl	8011cf4 <HAL_GPIO_WritePin>
			|Pwr_Ctrl2_Pin|START_3_Pin|RESET_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPO_1_Pin|GPO_2_Pin|CS_2_Pin, GPIO_PIN_RESET);
 80100e8:	2200      	movs	r2, #0
 80100ea:	f640 0103 	movw	r1, #2051	@ 0x803
 80100ee:	4880      	ldr	r0, [pc, #512]	@ (80102f0 <MX_GPIO_Init+0x330>)
 80100f0:	f001 fe00 	bl	8011cf4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80100f4:	2200      	movs	r2, #0
 80100f6:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80100fa:	487e      	ldr	r0, [pc, #504]	@ (80102f4 <MX_GPIO_Init+0x334>)
 80100fc:	f001 fdfa 	bl	8011cf4 <HAL_GPIO_WritePin>
			|LED5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8010100:	2201      	movs	r2, #1
 8010102:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010106:	487a      	ldr	r0, [pc, #488]	@ (80102f0 <MX_GPIO_Init+0x330>)
 8010108:	f001 fdf4 	bl	8011cf4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, START_2_Pin|RESET_2_Pin, GPIO_PIN_RESET);
 801010c:	2200      	movs	r2, #0
 801010e:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8010112:	4879      	ldr	r0, [pc, #484]	@ (80102f8 <MX_GPIO_Init+0x338>)
 8010114:	f001 fdee 	bl	8011cf4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 8010118:	2200      	movs	r2, #0
 801011a:	2110      	movs	r1, #16
 801011c:	4877      	ldr	r0, [pc, #476]	@ (80102fc <MX_GPIO_Init+0x33c>)
 801011e:	f001 fde9 	bl	8011cf4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPI_3_Pin GPI_4_Pin GPI_5_Pin */
	GPIO_InitStruct.Pin = GPI_3_Pin|GPI_4_Pin|GPI_5_Pin;
 8010122:	2370      	movs	r3, #112	@ 0x70
 8010124:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010126:	2300      	movs	r3, #0
 8010128:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801012a:	2300      	movs	r3, #0
 801012c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801012e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010132:	4619      	mov	r1, r3
 8010134:	486f      	ldr	r0, [pc, #444]	@ (80102f4 <MX_GPIO_Init+0x334>)
 8010136:	f001 fc73 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_1_Pin START_1_Pin */
	GPIO_InitStruct.Pin = CS_1_Pin|START_1_Pin;
 801013a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 801013e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010140:	2301      	movs	r3, #1
 8010142:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010144:	2300      	movs	r3, #0
 8010146:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010148:	2303      	movs	r3, #3
 801014a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801014c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010150:	4619      	mov	r1, r3
 8010152:	4864      	ldr	r0, [pc, #400]	@ (80102e4 <MX_GPIO_Init+0x324>)
 8010154:	f001 fc64 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_1_Pin */
	GPIO_InitStruct.Pin = DRDY_1_Pin;
 8010158:	2302      	movs	r3, #2
 801015a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801015c:	4b68      	ldr	r3, [pc, #416]	@ (8010300 <MX_GPIO_Init+0x340>)
 801015e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010160:	2300      	movs	r3, #0
 8010162:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_1_GPIO_Port, &GPIO_InitStruct);
 8010164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010168:	4619      	mov	r1, r3
 801016a:	485f      	ldr	r0, [pc, #380]	@ (80102e8 <MX_GPIO_Init+0x328>)
 801016c:	f001 fc58 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pin : RESET_1_Pin */
	GPIO_InitStruct.Pin = RESET_1_Pin;
 8010170:	2304      	movs	r3, #4
 8010172:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010174:	2301      	movs	r3, #1
 8010176:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010178:	2300      	movs	r3, #0
 801017a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801017c:	2303      	movs	r3, #3
 801017e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 8010180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010184:	4619      	mov	r1, r3
 8010186:	4858      	ldr	r0, [pc, #352]	@ (80102e8 <MX_GPIO_Init+0x328>)
 8010188:	f001 fc4a 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pins : RS422_CTRL_Pin RS485_CTRL1_Pin RS485_CTRL2_Pin Pwr_Ctrl1_Pin
                           Pwr_Ctrl2_Pin */
	GPIO_InitStruct.Pin = RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 801018c:	2367      	movs	r3, #103	@ 0x67
 801018e:	627b      	str	r3, [r7, #36]	@ 0x24
			|Pwr_Ctrl2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010190:	2301      	movs	r3, #1
 8010192:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010194:	2300      	movs	r3, #0
 8010196:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010198:	2300      	movs	r3, #0
 801019a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801019c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101a0:	4619      	mov	r1, r3
 80101a2:	4852      	ldr	r0, [pc, #328]	@ (80102ec <MX_GPIO_Init+0x32c>)
 80101a4:	f001 fc3c 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPO_1_Pin GPO_2_Pin */
	GPIO_InitStruct.Pin = GPO_1_Pin|GPO_2_Pin;
 80101a8:	2303      	movs	r3, #3
 80101aa:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101ac:	2301      	movs	r3, #1
 80101ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b0:	2300      	movs	r3, #0
 80101b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101b4:	2300      	movs	r3, #0
 80101b6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80101b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101bc:	4619      	mov	r1, r3
 80101be:	484c      	ldr	r0, [pc, #304]	@ (80102f0 <MX_GPIO_Init+0x330>)
 80101c0:	f001 fc2e 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pin : RTC_RST_Pin */
	GPIO_InitStruct.Pin = RTC_RST_Pin;
 80101c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80101c8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101ca:	2301      	movs	r3, #1
 80101cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101d2:	2300      	movs	r3, #0
 80101d4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 80101d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101da:	4619      	mov	r1, r3
 80101dc:	4841      	ldr	r0, [pc, #260]	@ (80102e4 <MX_GPIO_Init+0x324>)
 80101de:	f001 fc1f 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80101e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80101e6:	627b      	str	r3, [r7, #36]	@ 0x24
			|LED5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101e8:	2301      	movs	r3, #1
 80101ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101ec:	2300      	movs	r3, #0
 80101ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101f0:	2300      	movs	r3, #0
 80101f2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80101f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101f8:	4619      	mov	r1, r3
 80101fa:	483e      	ldr	r0, [pc, #248]	@ (80102f4 <MX_GPIO_Init+0x334>)
 80101fc:	f001 fc10 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 CS_2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10|CS_2_Pin;
 8010200:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8010204:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010206:	2301      	movs	r3, #1
 8010208:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801020a:	2300      	movs	r3, #0
 801020c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801020e:	2303      	movs	r3, #3
 8010210:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010216:	4619      	mov	r1, r3
 8010218:	4835      	ldr	r0, [pc, #212]	@ (80102f0 <MX_GPIO_Init+0x330>)
 801021a:	f001 fc01 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_2_Pin RESET_2_Pin */
	GPIO_InitStruct.Pin = START_2_Pin|RESET_2_Pin;
 801021e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8010222:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010224:	2301      	movs	r3, #1
 8010226:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010228:	2300      	movs	r3, #0
 801022a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801022c:	2303      	movs	r3, #3
 801022e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010234:	4619      	mov	r1, r3
 8010236:	4830      	ldr	r0, [pc, #192]	@ (80102f8 <MX_GPIO_Init+0x338>)
 8010238:	f001 fbf2 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_2_Pin */
	GPIO_InitStruct.Pin = DRDY_2_Pin;
 801023c:	2380      	movs	r3, #128	@ 0x80
 801023e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010240:	4b2f      	ldr	r3, [pc, #188]	@ (8010300 <MX_GPIO_Init+0x340>)
 8010242:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010244:	2300      	movs	r3, #0
 8010246:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_2_GPIO_Port, &GPIO_InitStruct);
 8010248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801024c:	4619      	mov	r1, r3
 801024e:	482a      	ldr	r0, [pc, #168]	@ (80102f8 <MX_GPIO_Init+0x338>)
 8010250:	f001 fbe6 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_3_Pin RESET_3_Pin */
	GPIO_InitStruct.Pin = START_3_Pin|RESET_3_Pin;
 8010254:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8010258:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801025a:	2301      	movs	r3, #1
 801025c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801025e:	2300      	movs	r3, #0
 8010260:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010262:	2303      	movs	r3, #3
 8010264:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801026a:	4619      	mov	r1, r3
 801026c:	481f      	ldr	r0, [pc, #124]	@ (80102ec <MX_GPIO_Init+0x32c>)
 801026e:	f001 fbd7 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_3_Pin */
	GPIO_InitStruct.Pin = DRDY_3_Pin;
 8010272:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010276:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010278:	4b21      	ldr	r3, [pc, #132]	@ (8010300 <MX_GPIO_Init+0x340>)
 801027a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801027c:	2300      	movs	r3, #0
 801027e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_3_GPIO_Port, &GPIO_InitStruct);
 8010280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010284:	4619      	mov	r1, r3
 8010286:	4819      	ldr	r0, [pc, #100]	@ (80102ec <MX_GPIO_Init+0x32c>)
 8010288:	f001 fbca 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPI_1_Pin GPI_2_Pin */
	GPIO_InitStruct.Pin = GPI_1_Pin|GPI_2_Pin;
 801028c:	230c      	movs	r3, #12
 801028e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010290:	2300      	movs	r3, #0
 8010292:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010294:	2300      	movs	r3, #0
 8010296:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801029c:	4619      	mov	r1, r3
 801029e:	4817      	ldr	r0, [pc, #92]	@ (80102fc <MX_GPIO_Init+0x33c>)
 80102a0:	f001 fbbe 	bl	8011a20 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_3_Pin */
	GPIO_InitStruct.Pin = CS_3_Pin;
 80102a4:	2310      	movs	r3, #16
 80102a6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80102a8:	2301      	movs	r3, #1
 80102aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102ac:	2300      	movs	r3, #0
 80102ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80102b0:	2303      	movs	r3, #3
 80102b2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 80102b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80102b8:	4619      	mov	r1, r3
 80102ba:	4810      	ldr	r0, [pc, #64]	@ (80102fc <MX_GPIO_Init+0x33c>)
 80102bc:	f001 fbb0 	bl	8011a20 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80102c0:	2200      	movs	r2, #0
 80102c2:	2100      	movs	r1, #0
 80102c4:	200c      	movs	r0, #12
 80102c6:	f001 fa2d 	bl	8011724 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80102ca:	200c      	movs	r0, #12
 80102cc:	f001 fa44 	bl	8011758 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 80102d0:	2200      	movs	r2, #0
 80102d2:	2100      	movs	r1, #0
 80102d4:	2012      	movs	r0, #18
 80102d6:	f001 fa25 	bl	8011724 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80102da:	2012      	movs	r0, #18
 80102dc:	e012      	b.n	8010304 <MX_GPIO_Init+0x344>
 80102de:	bf00      	nop
 80102e0:	44020c00 	.word	0x44020c00
 80102e4:	42021400 	.word	0x42021400
 80102e8:	42020800 	.word	0x42020800
 80102ec:	42020000 	.word	0x42020000
 80102f0:	42020400 	.word	0x42020400
 80102f4:	42021000 	.word	0x42021000
 80102f8:	42021800 	.word	0x42021800
 80102fc:	42020c00 	.word	0x42020c00
 8010300:	10210000 	.word	0x10210000
 8010304:	f001 fa28 	bl	8011758 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8010308:	2200      	movs	r2, #0
 801030a:	2100      	movs	r1, #0
 801030c:	2016      	movs	r0, #22
 801030e:	f001 fa09 	bl	8011724 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8010312:	2016      	movs	r0, #22
 8010314:	f001 fa20 	bl	8011758 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8010318:	bf00      	nop
 801031a:	3738      	adds	r7, #56	@ 0x38
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */


void UART_InitAllHandlers(void) {
 8010320:	b580      	push	{r7, lr}
 8010322:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 8010324:	2201      	movs	r2, #1
 8010326:	490a      	ldr	r1, [pc, #40]	@ (8010350 <UART_InitAllHandlers+0x30>)
 8010328:	480a      	ldr	r0, [pc, #40]	@ (8010354 <UART_InitAllHandlers+0x34>)
 801032a:	f009 fcb1 	bl	8019c90 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 801032e:	2201      	movs	r2, #1
 8010330:	4909      	ldr	r1, [pc, #36]	@ (8010358 <UART_InitAllHandlers+0x38>)
 8010332:	480a      	ldr	r0, [pc, #40]	@ (801035c <UART_InitAllHandlers+0x3c>)
 8010334:	f009 fcac 	bl	8019c90 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], sizeof(uart3_rx_buffer));
 8010338:	2201      	movs	r2, #1
 801033a:	4909      	ldr	r1, [pc, #36]	@ (8010360 <UART_InitAllHandlers+0x40>)
 801033c:	4809      	ldr	r0, [pc, #36]	@ (8010364 <UART_InitAllHandlers+0x44>)
 801033e:	f009 fca7 	bl	8019c90 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 8010342:	2201      	movs	r2, #1
 8010344:	4908      	ldr	r1, [pc, #32]	@ (8010368 <UART_InitAllHandlers+0x48>)
 8010346:	4809      	ldr	r0, [pc, #36]	@ (801036c <UART_InitAllHandlers+0x4c>)
 8010348:	f009 fca2 	bl	8019c90 <HAL_UART_Receive_IT>
}
 801034c:	bf00      	nop
 801034e:	bd80      	pop	{r7, pc}
 8010350:	20005bd8 	.word	0x20005bd8
 8010354:	200058d0 	.word	0x200058d0
 8010358:	20005bdc 	.word	0x20005bdc
 801035c:	200059f8 	.word	0x200059f8
 8010360:	20005be0 	.word	0x20005be0
 8010364:	20005964 	.word	0x20005964
 8010368:	20005be4 	.word	0x20005be4
 801036c:	20005a8c 	.word	0x20005a8c

08010370 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART4) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	4a9b      	ldr	r2, [pc, #620]	@ (80105ec <HAL_UART_RxCpltCallback+0x27c>)
 801037e:	4293      	cmp	r3, r2
 8010380:	d169      	bne.n	8010456 <HAL_UART_RxCpltCallback+0xe6>
		HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 8010382:	2201      	movs	r2, #1
 8010384:	499a      	ldr	r1, [pc, #616]	@ (80105f0 <HAL_UART_RxCpltCallback+0x280>)
 8010386:	489b      	ldr	r0, [pc, #620]	@ (80105f4 <HAL_UART_RxCpltCallback+0x284>)
 8010388:	f009 fc82 	bl	8019c90 <HAL_UART_Receive_IT>

		if(uart1_rx_buffer[0] == '#')//T
 801038c:	4b98      	ldr	r3, [pc, #608]	@ (80105f0 <HAL_UART_RxCpltCallback+0x280>)
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b23      	cmp	r3, #35	@ 0x23
 8010392:	d10e      	bne.n	80103b2 <HAL_UART_RxCpltCallback+0x42>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 8010394:	4b98      	ldr	r3, [pc, #608]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	b2d1      	uxtb	r1, r2
 801039c:	4a96      	ldr	r2, [pc, #600]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 801039e:	7011      	strb	r1, [r2, #0]
 80103a0:	461a      	mov	r2, r3
 80103a2:	4b93      	ldr	r3, [pc, #588]	@ (80105f0 <HAL_UART_RxCpltCallback+0x280>)
 80103a4:	7819      	ldrb	r1, [r3, #0]
 80103a6:	4b95      	ldr	r3, [pc, #596]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 80103a8:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80103aa:	4b95      	ldr	r3, [pc, #596]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 80103ac:	2201      	movs	r2, #1
 80103ae:	701a      	strb	r2, [r3, #0]
 80103b0:	e018      	b.n	80103e4 <HAL_UART_RxCpltCallback+0x74>

		}
		else if(command_rcv==1)
 80103b2:	4b93      	ldr	r3, [pc, #588]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	d114      	bne.n	80103e4 <HAL_UART_RxCpltCallback+0x74>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 80103ba:	4b8f      	ldr	r3, [pc, #572]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	1c5a      	adds	r2, r3, #1
 80103c0:	b2d1      	uxtb	r1, r2
 80103c2:	4a8d      	ldr	r2, [pc, #564]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 80103c4:	7011      	strb	r1, [r2, #0]
 80103c6:	461a      	mov	r2, r3
 80103c8:	4b89      	ldr	r3, [pc, #548]	@ (80105f0 <HAL_UART_RxCpltCallback+0x280>)
 80103ca:	7819      	ldrb	r1, [r3, #0]
 80103cc:	4b8b      	ldr	r3, [pc, #556]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 80103ce:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80103d0:	4b89      	ldr	r3, [pc, #548]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	2b0f      	cmp	r3, #15
 80103d6:	d905      	bls.n	80103e4 <HAL_UART_RxCpltCallback+0x74>
			{
				command_str_index = 0 ;
 80103d8:	4b87      	ldr	r3, [pc, #540]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 80103da:	2200      	movs	r2, #0
 80103dc:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80103de:	4b88      	ldr	r3, [pc, #544]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	701a      	strb	r2, [r3, #0]
			}
		}
		if(command_rcv == 1 && uart1_rx_buffer[0] == '$')
 80103e4:	4b86      	ldr	r3, [pc, #536]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	f040 81e8 	bne.w	80107be <HAL_UART_RxCpltCallback+0x44e>
 80103ee:	4b80      	ldr	r3, [pc, #512]	@ (80105f0 <HAL_UART_RxCpltCallback+0x280>)
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	2b24      	cmp	r3, #36	@ 0x24
 80103f4:	f040 81e3 	bne.w	80107be <HAL_UART_RxCpltCallback+0x44e>
		{
			if(command_str[command_str_index-1] == '$')
 80103f8:	4b7f      	ldr	r3, [pc, #508]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	3b01      	subs	r3, #1
 80103fe:	4a7f      	ldr	r2, [pc, #508]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 8010400:	5cd3      	ldrb	r3, [r2, r3]
 8010402:	2b24      	cmp	r3, #36	@ 0x24
 8010404:	d109      	bne.n	801041a <HAL_UART_RxCpltCallback+0xaa>
			{
				ATP_test  = 1;
 8010406:	4b7f      	ldr	r3, [pc, #508]	@ (8010604 <HAL_UART_RxCpltCallback+0x294>)
 8010408:	2201      	movs	r2, #1
 801040a:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 801040c:	4b7a      	ldr	r3, [pc, #488]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 801040e:	2200      	movs	r2, #0
 8010410:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8010412:	4b7b      	ldr	r3, [pc, #492]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 8010414:	2200      	movs	r2, #0
 8010416:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
			}
		}
	}

}
 8010418:	e1d1      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='9'))
 801041a:	4b78      	ldr	r3, [pc, #480]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 801041c:	785b      	ldrb	r3, [r3, #1]
 801041e:	2b32      	cmp	r3, #50	@ 0x32
 8010420:	d10d      	bne.n	801043e <HAL_UART_RxCpltCallback+0xce>
 8010422:	4b76      	ldr	r3, [pc, #472]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 8010424:	789b      	ldrb	r3, [r3, #2]
 8010426:	2b39      	cmp	r3, #57	@ 0x39
 8010428:	d109      	bne.n	801043e <HAL_UART_RxCpltCallback+0xce>
				ATP_test  = 1;
 801042a:	4b76      	ldr	r3, [pc, #472]	@ (8010604 <HAL_UART_RxCpltCallback+0x294>)
 801042c:	2201      	movs	r2, #1
 801042e:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8010430:	4b71      	ldr	r3, [pc, #452]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010432:	2200      	movs	r2, #0
 8010434:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8010436:	4b72      	ldr	r3, [pc, #456]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 8010438:	2200      	movs	r2, #0
 801043a:	701a      	strb	r2, [r3, #0]
 801043c:	e1bf      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 801043e:	4b6e      	ldr	r3, [pc, #440]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010440:	2200      	movs	r2, #0
 8010442:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8010444:	4b6e      	ldr	r3, [pc, #440]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 8010446:	2200      	movs	r2, #0
 8010448:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 801044a:	220f      	movs	r2, #15
 801044c:	2100      	movs	r1, #0
 801044e:	486b      	ldr	r0, [pc, #428]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 8010450:	f00c fc35 	bl	801ccbe <memset>
}
 8010454:	e1b3      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == UART5) {
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4a6b      	ldr	r2, [pc, #428]	@ (8010608 <HAL_UART_RxCpltCallback+0x298>)
 801045c:	4293      	cmp	r3, r2
 801045e:	f040 80e3 	bne.w	8010628 <HAL_UART_RxCpltCallback+0x2b8>
		HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], 1);
 8010462:	2201      	movs	r2, #1
 8010464:	4969      	ldr	r1, [pc, #420]	@ (801060c <HAL_UART_RxCpltCallback+0x29c>)
 8010466:	486a      	ldr	r0, [pc, #424]	@ (8010610 <HAL_UART_RxCpltCallback+0x2a0>)
 8010468:	f009 fc12 	bl	8019c90 <HAL_UART_Receive_IT>
		if(uart3_rx_buffer[0] == '@' )//S
 801046c:	4b67      	ldr	r3, [pc, #412]	@ (801060c <HAL_UART_RxCpltCallback+0x29c>)
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	2b40      	cmp	r3, #64	@ 0x40
 8010472:	d111      	bne.n	8010498 <HAL_UART_RxCpltCallback+0x128>
			time_str_length=0;
 8010474:	4b67      	ldr	r3, [pc, #412]	@ (8010614 <HAL_UART_RxCpltCallback+0x2a4>)
 8010476:	2200      	movs	r2, #0
 8010478:	701a      	strb	r2, [r3, #0]
			time_str[time_str_length++] = uart3_rx_buffer[0];
 801047a:	4b66      	ldr	r3, [pc, #408]	@ (8010614 <HAL_UART_RxCpltCallback+0x2a4>)
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	1c5a      	adds	r2, r3, #1
 8010480:	b2d1      	uxtb	r1, r2
 8010482:	4a64      	ldr	r2, [pc, #400]	@ (8010614 <HAL_UART_RxCpltCallback+0x2a4>)
 8010484:	7011      	strb	r1, [r2, #0]
 8010486:	461a      	mov	r2, r3
 8010488:	4b60      	ldr	r3, [pc, #384]	@ (801060c <HAL_UART_RxCpltCallback+0x29c>)
 801048a:	7819      	ldrb	r1, [r3, #0]
 801048c:	4b62      	ldr	r3, [pc, #392]	@ (8010618 <HAL_UART_RxCpltCallback+0x2a8>)
 801048e:	5499      	strb	r1, [r3, r2]
			time_rcv =1;
 8010490:	4b62      	ldr	r3, [pc, #392]	@ (801061c <HAL_UART_RxCpltCallback+0x2ac>)
 8010492:	2201      	movs	r2, #1
 8010494:	701a      	strb	r2, [r3, #0]
 8010496:	e018      	b.n	80104ca <HAL_UART_RxCpltCallback+0x15a>
		else if(time_rcv==1)
 8010498:	4b60      	ldr	r3, [pc, #384]	@ (801061c <HAL_UART_RxCpltCallback+0x2ac>)
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d114      	bne.n	80104ca <HAL_UART_RxCpltCallback+0x15a>
			time_str[time_str_length++] = uart3_rx_buffer[0];
 80104a0:	4b5c      	ldr	r3, [pc, #368]	@ (8010614 <HAL_UART_RxCpltCallback+0x2a4>)
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	1c5a      	adds	r2, r3, #1
 80104a6:	b2d1      	uxtb	r1, r2
 80104a8:	4a5a      	ldr	r2, [pc, #360]	@ (8010614 <HAL_UART_RxCpltCallback+0x2a4>)
 80104aa:	7011      	strb	r1, [r2, #0]
 80104ac:	461a      	mov	r2, r3
 80104ae:	4b57      	ldr	r3, [pc, #348]	@ (801060c <HAL_UART_RxCpltCallback+0x29c>)
 80104b0:	7819      	ldrb	r1, [r3, #0]
 80104b2:	4b59      	ldr	r3, [pc, #356]	@ (8010618 <HAL_UART_RxCpltCallback+0x2a8>)
 80104b4:	5499      	strb	r1, [r3, r2]
			if(time_str_length > 22)
 80104b6:	4b57      	ldr	r3, [pc, #348]	@ (8010614 <HAL_UART_RxCpltCallback+0x2a4>)
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	2b16      	cmp	r3, #22
 80104bc:	d905      	bls.n	80104ca <HAL_UART_RxCpltCallback+0x15a>
				time_str_length = 0 ;
 80104be:	4b55      	ldr	r3, [pc, #340]	@ (8010614 <HAL_UART_RxCpltCallback+0x2a4>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	701a      	strb	r2, [r3, #0]
				time_rcv = 0 ;
 80104c4:	4b55      	ldr	r3, [pc, #340]	@ (801061c <HAL_UART_RxCpltCallback+0x2ac>)
 80104c6:	2200      	movs	r2, #0
 80104c8:	701a      	strb	r2, [r3, #0]
		if(uart3_rx_buffer[0] == '$' )//E
 80104ca:	4b50      	ldr	r3, [pc, #320]	@ (801060c <HAL_UART_RxCpltCallback+0x29c>)
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	2b24      	cmp	r3, #36	@ 0x24
 80104d0:	d112      	bne.n	80104f8 <HAL_UART_RxCpltCallback+0x188>
			if(time_str_length == 21)
 80104d2:	4b50      	ldr	r3, [pc, #320]	@ (8010614 <HAL_UART_RxCpltCallback+0x2a4>)
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	2b15      	cmp	r3, #21
 80104d8:	d103      	bne.n	80104e2 <HAL_UART_RxCpltCallback+0x172>
				time_set = 1;
 80104da:	4b51      	ldr	r3, [pc, #324]	@ (8010620 <HAL_UART_RxCpltCallback+0x2b0>)
 80104dc:	2201      	movs	r2, #1
 80104de:	701a      	strb	r2, [r3, #0]
 80104e0:	e00a      	b.n	80104f8 <HAL_UART_RxCpltCallback+0x188>
				time_rcv = 0 ;
 80104e2:	4b4e      	ldr	r3, [pc, #312]	@ (801061c <HAL_UART_RxCpltCallback+0x2ac>)
 80104e4:	2200      	movs	r2, #0
 80104e6:	701a      	strb	r2, [r3, #0]
				time_str_length = 0 ;
 80104e8:	4b4a      	ldr	r3, [pc, #296]	@ (8010614 <HAL_UART_RxCpltCallback+0x2a4>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	701a      	strb	r2, [r3, #0]
				memset(time_str,0,sizeof(time_str));
 80104ee:	2219      	movs	r2, #25
 80104f0:	2100      	movs	r1, #0
 80104f2:	4849      	ldr	r0, [pc, #292]	@ (8010618 <HAL_UART_RxCpltCallback+0x2a8>)
 80104f4:	f00c fbe3 	bl	801ccbe <memset>
		if(uart3_rx_buffer[0] == '#')//T
 80104f8:	4b44      	ldr	r3, [pc, #272]	@ (801060c <HAL_UART_RxCpltCallback+0x29c>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	2b23      	cmp	r3, #35	@ 0x23
 80104fe:	d10e      	bne.n	801051e <HAL_UART_RxCpltCallback+0x1ae>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 8010500:	4b3d      	ldr	r3, [pc, #244]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	1c5a      	adds	r2, r3, #1
 8010506:	b2d1      	uxtb	r1, r2
 8010508:	4a3b      	ldr	r2, [pc, #236]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 801050a:	7011      	strb	r1, [r2, #0]
 801050c:	461a      	mov	r2, r3
 801050e:	4b3f      	ldr	r3, [pc, #252]	@ (801060c <HAL_UART_RxCpltCallback+0x29c>)
 8010510:	7819      	ldrb	r1, [r3, #0]
 8010512:	4b3a      	ldr	r3, [pc, #232]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 8010514:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8010516:	4b3a      	ldr	r3, [pc, #232]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 8010518:	2201      	movs	r2, #1
 801051a:	701a      	strb	r2, [r3, #0]
 801051c:	e018      	b.n	8010550 <HAL_UART_RxCpltCallback+0x1e0>
		else if(command_rcv==1)
 801051e:	4b38      	ldr	r3, [pc, #224]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	2b01      	cmp	r3, #1
 8010524:	d114      	bne.n	8010550 <HAL_UART_RxCpltCallback+0x1e0>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 8010526:	4b34      	ldr	r3, [pc, #208]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	1c5a      	adds	r2, r3, #1
 801052c:	b2d1      	uxtb	r1, r2
 801052e:	4a32      	ldr	r2, [pc, #200]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010530:	7011      	strb	r1, [r2, #0]
 8010532:	461a      	mov	r2, r3
 8010534:	4b35      	ldr	r3, [pc, #212]	@ (801060c <HAL_UART_RxCpltCallback+0x29c>)
 8010536:	7819      	ldrb	r1, [r3, #0]
 8010538:	4b30      	ldr	r3, [pc, #192]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 801053a:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 801053c:	4b2e      	ldr	r3, [pc, #184]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	2b0f      	cmp	r3, #15
 8010542:	d905      	bls.n	8010550 <HAL_UART_RxCpltCallback+0x1e0>
				command_str_index = 0 ;
 8010544:	4b2c      	ldr	r3, [pc, #176]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010546:	2200      	movs	r2, #0
 8010548:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801054a:	4b2d      	ldr	r3, [pc, #180]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 801054c:	2200      	movs	r2, #0
 801054e:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart3_rx_buffer[0] == '$')
 8010550:	4b2b      	ldr	r3, [pc, #172]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	2b01      	cmp	r3, #1
 8010556:	f040 8132 	bne.w	80107be <HAL_UART_RxCpltCallback+0x44e>
 801055a:	4b2c      	ldr	r3, [pc, #176]	@ (801060c <HAL_UART_RxCpltCallback+0x29c>)
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	2b24      	cmp	r3, #36	@ 0x24
 8010560:	f040 812d 	bne.w	80107be <HAL_UART_RxCpltCallback+0x44e>
			if(command_str_index < 4)
 8010564:	4b24      	ldr	r3, [pc, #144]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	2b03      	cmp	r3, #3
 801056a:	d812      	bhi.n	8010592 <HAL_UART_RxCpltCallback+0x222>
				memcpy(nand_stop_read_CMD,command_str,command_str_index); // #*$
 801056c:	4b22      	ldr	r3, [pc, #136]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	461a      	mov	r2, r3
 8010572:	4922      	ldr	r1, [pc, #136]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 8010574:	482b      	ldr	r0, [pc, #172]	@ (8010624 <HAL_UART_RxCpltCallback+0x2b4>)
 8010576:	f00c fc46 	bl	801ce06 <memcpy>
				memset(command_str,0,sizeof(command_str));
 801057a:	220f      	movs	r2, #15
 801057c:	2100      	movs	r1, #0
 801057e:	481f      	ldr	r0, [pc, #124]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 8010580:	f00c fb9d 	bl	801ccbe <memset>
				command_str_index = 0 ;
 8010584:	4b1c      	ldr	r3, [pc, #112]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010586:	2200      	movs	r2, #0
 8010588:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801058a:	4b1d      	ldr	r3, [pc, #116]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 801058c:	2200      	movs	r2, #0
 801058e:	701a      	strb	r2, [r3, #0]
}
 8010590:	e115      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
			else if(command_str_index == 4)
 8010592:	4b19      	ldr	r3, [pc, #100]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	2b04      	cmp	r3, #4
 8010598:	d109      	bne.n	80105ae <HAL_UART_RxCpltCallback+0x23e>
				ATP_test  = 1;
 801059a:	4b1a      	ldr	r3, [pc, #104]	@ (8010604 <HAL_UART_RxCpltCallback+0x294>)
 801059c:	2201      	movs	r2, #1
 801059e:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80105a0:	4b15      	ldr	r3, [pc, #84]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 80105a2:	2200      	movs	r2, #0
 80105a4:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80105a6:	4b16      	ldr	r3, [pc, #88]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	701a      	strb	r2, [r3, #0]
}
 80105ac:	e107      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='6'))
 80105ae:	4b13      	ldr	r3, [pc, #76]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 80105b0:	785b      	ldrb	r3, [r3, #1]
 80105b2:	2b32      	cmp	r3, #50	@ 0x32
 80105b4:	d10d      	bne.n	80105d2 <HAL_UART_RxCpltCallback+0x262>
 80105b6:	4b11      	ldr	r3, [pc, #68]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 80105b8:	789b      	ldrb	r3, [r3, #2]
 80105ba:	2b36      	cmp	r3, #54	@ 0x36
 80105bc:	d109      	bne.n	80105d2 <HAL_UART_RxCpltCallback+0x262>
				ATP_test  = 1;
 80105be:	4b11      	ldr	r3, [pc, #68]	@ (8010604 <HAL_UART_RxCpltCallback+0x294>)
 80105c0:	2201      	movs	r2, #1
 80105c2:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80105c4:	4b0c      	ldr	r3, [pc, #48]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 80105c6:	2200      	movs	r2, #0
 80105c8:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80105ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 80105cc:	2200      	movs	r2, #0
 80105ce:	701a      	strb	r2, [r3, #0]
 80105d0:	e0f5      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 80105d2:	4b09      	ldr	r3, [pc, #36]	@ (80105f8 <HAL_UART_RxCpltCallback+0x288>)
 80105d4:	2200      	movs	r2, #0
 80105d6:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80105d8:	4b09      	ldr	r3, [pc, #36]	@ (8010600 <HAL_UART_RxCpltCallback+0x290>)
 80105da:	2200      	movs	r2, #0
 80105dc:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80105de:	220f      	movs	r2, #15
 80105e0:	2100      	movs	r1, #0
 80105e2:	4806      	ldr	r0, [pc, #24]	@ (80105fc <HAL_UART_RxCpltCallback+0x28c>)
 80105e4:	f00c fb6b 	bl	801ccbe <memset>
}
 80105e8:	e0e9      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
 80105ea:	bf00      	nop
 80105ec:	40004c00 	.word	0x40004c00
 80105f0:	20005bd8 	.word	0x20005bd8
 80105f4:	200058d0 	.word	0x200058d0
 80105f8:	2000036c 	.word	0x2000036c
 80105fc:	20000358 	.word	0x20000358
 8010600:	20005bd6 	.word	0x20005bd6
 8010604:	2000036d 	.word	0x2000036d
 8010608:	40005000 	.word	0x40005000
 801060c:	20005be0 	.word	0x20005be0
 8010610:	20005964 	.word	0x20005964
 8010614:	20005bd5 	.word	0x20005bd5
 8010618:	20005bbc 	.word	0x20005bbc
 801061c:	20005bdd 	.word	0x20005bdd
 8010620:	20005bde 	.word	0x20005bde
 8010624:	200003f0 	.word	0x200003f0
	else if (huart->Instance == UART8) {
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a66      	ldr	r2, [pc, #408]	@ (80107c8 <HAL_UART_RxCpltCallback+0x458>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d158      	bne.n	80106e4 <HAL_UART_RxCpltCallback+0x374>
		HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 8010632:	2201      	movs	r2, #1
 8010634:	4965      	ldr	r1, [pc, #404]	@ (80107cc <HAL_UART_RxCpltCallback+0x45c>)
 8010636:	4866      	ldr	r0, [pc, #408]	@ (80107d0 <HAL_UART_RxCpltCallback+0x460>)
 8010638:	f009 fb2a 	bl	8019c90 <HAL_UART_Receive_IT>
		if(uart2_rx_buffer[0] == '#')//T
 801063c:	4b63      	ldr	r3, [pc, #396]	@ (80107cc <HAL_UART_RxCpltCallback+0x45c>)
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	2b23      	cmp	r3, #35	@ 0x23
 8010642:	d10e      	bne.n	8010662 <HAL_UART_RxCpltCallback+0x2f2>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 8010644:	4b63      	ldr	r3, [pc, #396]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	1c5a      	adds	r2, r3, #1
 801064a:	b2d1      	uxtb	r1, r2
 801064c:	4a61      	ldr	r2, [pc, #388]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 801064e:	7011      	strb	r1, [r2, #0]
 8010650:	461a      	mov	r2, r3
 8010652:	4b5e      	ldr	r3, [pc, #376]	@ (80107cc <HAL_UART_RxCpltCallback+0x45c>)
 8010654:	7819      	ldrb	r1, [r3, #0]
 8010656:	4b60      	ldr	r3, [pc, #384]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 8010658:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 801065a:	4b60      	ldr	r3, [pc, #384]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 801065c:	2201      	movs	r2, #1
 801065e:	701a      	strb	r2, [r3, #0]
 8010660:	e018      	b.n	8010694 <HAL_UART_RxCpltCallback+0x324>
		else if(command_rcv==1)
 8010662:	4b5e      	ldr	r3, [pc, #376]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	2b01      	cmp	r3, #1
 8010668:	d114      	bne.n	8010694 <HAL_UART_RxCpltCallback+0x324>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 801066a:	4b5a      	ldr	r3, [pc, #360]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	1c5a      	adds	r2, r3, #1
 8010670:	b2d1      	uxtb	r1, r2
 8010672:	4a58      	ldr	r2, [pc, #352]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 8010674:	7011      	strb	r1, [r2, #0]
 8010676:	461a      	mov	r2, r3
 8010678:	4b54      	ldr	r3, [pc, #336]	@ (80107cc <HAL_UART_RxCpltCallback+0x45c>)
 801067a:	7819      	ldrb	r1, [r3, #0]
 801067c:	4b56      	ldr	r3, [pc, #344]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 801067e:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8010680:	4b54      	ldr	r3, [pc, #336]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	2b0f      	cmp	r3, #15
 8010686:	d905      	bls.n	8010694 <HAL_UART_RxCpltCallback+0x324>
				command_str_index = 0 ;
 8010688:	4b52      	ldr	r3, [pc, #328]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 801068a:	2200      	movs	r2, #0
 801068c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801068e:	4b53      	ldr	r3, [pc, #332]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 8010690:	2200      	movs	r2, #0
 8010692:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart2_rx_buffer[0] == '$')
 8010694:	4b51      	ldr	r3, [pc, #324]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	2b01      	cmp	r3, #1
 801069a:	f040 8090 	bne.w	80107be <HAL_UART_RxCpltCallback+0x44e>
 801069e:	4b4b      	ldr	r3, [pc, #300]	@ (80107cc <HAL_UART_RxCpltCallback+0x45c>)
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	2b24      	cmp	r3, #36	@ 0x24
 80106a4:	f040 808b 	bne.w	80107be <HAL_UART_RxCpltCallback+0x44e>
			if((command_str[1]=='2')&&(command_str[2]=='7'))
 80106a8:	4b4b      	ldr	r3, [pc, #300]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 80106aa:	785b      	ldrb	r3, [r3, #1]
 80106ac:	2b32      	cmp	r3, #50	@ 0x32
 80106ae:	d10d      	bne.n	80106cc <HAL_UART_RxCpltCallback+0x35c>
 80106b0:	4b49      	ldr	r3, [pc, #292]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 80106b2:	789b      	ldrb	r3, [r3, #2]
 80106b4:	2b37      	cmp	r3, #55	@ 0x37
 80106b6:	d109      	bne.n	80106cc <HAL_UART_RxCpltCallback+0x35c>
				ATP_test  = 1;
 80106b8:	4b49      	ldr	r3, [pc, #292]	@ (80107e0 <HAL_UART_RxCpltCallback+0x470>)
 80106ba:	2201      	movs	r2, #1
 80106bc:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80106be:	4b45      	ldr	r3, [pc, #276]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80106c4:	4b45      	ldr	r3, [pc, #276]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 80106c6:	2200      	movs	r2, #0
 80106c8:	701a      	strb	r2, [r3, #0]
 80106ca:	e078      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 80106cc:	4b41      	ldr	r3, [pc, #260]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 80106ce:	2200      	movs	r2, #0
 80106d0:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80106d2:	4b42      	ldr	r3, [pc, #264]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 80106d4:	2200      	movs	r2, #0
 80106d6:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80106d8:	220f      	movs	r2, #15
 80106da:	2100      	movs	r1, #0
 80106dc:	483e      	ldr	r0, [pc, #248]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 80106de:	f00c faee 	bl	801ccbe <memset>
}
 80106e2:	e06c      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == USART10) {
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4a3e      	ldr	r2, [pc, #248]	@ (80107e4 <HAL_UART_RxCpltCallback+0x474>)
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d167      	bne.n	80107be <HAL_UART_RxCpltCallback+0x44e>
		HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 80106ee:	2201      	movs	r2, #1
 80106f0:	493d      	ldr	r1, [pc, #244]	@ (80107e8 <HAL_UART_RxCpltCallback+0x478>)
 80106f2:	483e      	ldr	r0, [pc, #248]	@ (80107ec <HAL_UART_RxCpltCallback+0x47c>)
 80106f4:	f009 facc 	bl	8019c90 <HAL_UART_Receive_IT>
		if(uart4_rx_buffer[0] == '#')//T
 80106f8:	4b3b      	ldr	r3, [pc, #236]	@ (80107e8 <HAL_UART_RxCpltCallback+0x478>)
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	2b23      	cmp	r3, #35	@ 0x23
 80106fe:	d10e      	bne.n	801071e <HAL_UART_RxCpltCallback+0x3ae>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 8010700:	4b34      	ldr	r3, [pc, #208]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	1c5a      	adds	r2, r3, #1
 8010706:	b2d1      	uxtb	r1, r2
 8010708:	4a32      	ldr	r2, [pc, #200]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 801070a:	7011      	strb	r1, [r2, #0]
 801070c:	461a      	mov	r2, r3
 801070e:	4b36      	ldr	r3, [pc, #216]	@ (80107e8 <HAL_UART_RxCpltCallback+0x478>)
 8010710:	7819      	ldrb	r1, [r3, #0]
 8010712:	4b31      	ldr	r3, [pc, #196]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 8010714:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 8010716:	4b31      	ldr	r3, [pc, #196]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 8010718:	2201      	movs	r2, #1
 801071a:	701a      	strb	r2, [r3, #0]
 801071c:	e018      	b.n	8010750 <HAL_UART_RxCpltCallback+0x3e0>
		else if(command_rcv==1)
 801071e:	4b2f      	ldr	r3, [pc, #188]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	2b01      	cmp	r3, #1
 8010724:	d114      	bne.n	8010750 <HAL_UART_RxCpltCallback+0x3e0>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 8010726:	4b2b      	ldr	r3, [pc, #172]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	1c5a      	adds	r2, r3, #1
 801072c:	b2d1      	uxtb	r1, r2
 801072e:	4a29      	ldr	r2, [pc, #164]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 8010730:	7011      	strb	r1, [r2, #0]
 8010732:	461a      	mov	r2, r3
 8010734:	4b2c      	ldr	r3, [pc, #176]	@ (80107e8 <HAL_UART_RxCpltCallback+0x478>)
 8010736:	7819      	ldrb	r1, [r3, #0]
 8010738:	4b27      	ldr	r3, [pc, #156]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 801073a:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 801073c:	4b25      	ldr	r3, [pc, #148]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	2b0f      	cmp	r3, #15
 8010742:	d905      	bls.n	8010750 <HAL_UART_RxCpltCallback+0x3e0>
				command_str_index = 0 ;
 8010744:	4b23      	ldr	r3, [pc, #140]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 8010746:	2200      	movs	r2, #0
 8010748:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801074a:	4b24      	ldr	r3, [pc, #144]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 801074c:	2200      	movs	r2, #0
 801074e:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart4_rx_buffer[0] == '$')
 8010750:	4b22      	ldr	r3, [pc, #136]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	2b01      	cmp	r3, #1
 8010756:	d132      	bne.n	80107be <HAL_UART_RxCpltCallback+0x44e>
 8010758:	4b23      	ldr	r3, [pc, #140]	@ (80107e8 <HAL_UART_RxCpltCallback+0x478>)
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	2b24      	cmp	r3, #36	@ 0x24
 801075e:	d12e      	bne.n	80107be <HAL_UART_RxCpltCallback+0x44e>
			if(command_str[command_str_index-1] == '$')
 8010760:	4b1c      	ldr	r3, [pc, #112]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	3b01      	subs	r3, #1
 8010766:	4a1c      	ldr	r2, [pc, #112]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 8010768:	5cd3      	ldrb	r3, [r2, r3]
 801076a:	2b24      	cmp	r3, #36	@ 0x24
 801076c:	d109      	bne.n	8010782 <HAL_UART_RxCpltCallback+0x412>
				ATP_test  = 1;
 801076e:	4b1c      	ldr	r3, [pc, #112]	@ (80107e0 <HAL_UART_RxCpltCallback+0x470>)
 8010770:	2201      	movs	r2, #1
 8010772:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8010774:	4b17      	ldr	r3, [pc, #92]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 8010776:	2200      	movs	r2, #0
 8010778:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801077a:	4b18      	ldr	r3, [pc, #96]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 801077c:	2200      	movs	r2, #0
 801077e:	701a      	strb	r2, [r3, #0]
}
 8010780:	e01d      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='8'))
 8010782:	4b15      	ldr	r3, [pc, #84]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 8010784:	785b      	ldrb	r3, [r3, #1]
 8010786:	2b32      	cmp	r3, #50	@ 0x32
 8010788:	d10d      	bne.n	80107a6 <HAL_UART_RxCpltCallback+0x436>
 801078a:	4b13      	ldr	r3, [pc, #76]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 801078c:	789b      	ldrb	r3, [r3, #2]
 801078e:	2b38      	cmp	r3, #56	@ 0x38
 8010790:	d109      	bne.n	80107a6 <HAL_UART_RxCpltCallback+0x436>
				ATP_test  = 1;
 8010792:	4b13      	ldr	r3, [pc, #76]	@ (80107e0 <HAL_UART_RxCpltCallback+0x470>)
 8010794:	2201      	movs	r2, #1
 8010796:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8010798:	4b0e      	ldr	r3, [pc, #56]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 801079a:	2200      	movs	r2, #0
 801079c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 801079e:	4b0f      	ldr	r3, [pc, #60]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 80107a0:	2200      	movs	r2, #0
 80107a2:	701a      	strb	r2, [r3, #0]
 80107a4:	e00b      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 80107a6:	4b0b      	ldr	r3, [pc, #44]	@ (80107d4 <HAL_UART_RxCpltCallback+0x464>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80107ac:	4b0b      	ldr	r3, [pc, #44]	@ (80107dc <HAL_UART_RxCpltCallback+0x46c>)
 80107ae:	2200      	movs	r2, #0
 80107b0:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80107b2:	220f      	movs	r2, #15
 80107b4:	2100      	movs	r1, #0
 80107b6:	4808      	ldr	r0, [pc, #32]	@ (80107d8 <HAL_UART_RxCpltCallback+0x468>)
 80107b8:	f00c fa81 	bl	801ccbe <memset>
}
 80107bc:	e7ff      	b.n	80107be <HAL_UART_RxCpltCallback+0x44e>
 80107be:	bf00      	nop
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	40007c00 	.word	0x40007c00
 80107cc:	20005bdc 	.word	0x20005bdc
 80107d0:	200059f8 	.word	0x200059f8
 80107d4:	2000036c 	.word	0x2000036c
 80107d8:	20000358 	.word	0x20000358
 80107dc:	20005bd6 	.word	0x20005bd6
 80107e0:	2000036d 	.word	0x2000036d
 80107e4:	40006800 	.word	0x40006800
 80107e8:	20005be4 	.word	0x20005be4
 80107ec:	20005a8c 	.word	0x20005a8c

080107f0 <HAL_GPIO_EXTI_Falling_Callback>:



// User-defined callback to handle the data-ready event
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	4603      	mov	r3, r0
 80107f8:	80fb      	strh	r3, [r7, #6]
		//HAL_UART_Transmit_IT(&huart8, "DR_3\n\r", strlen("DR_1\n\r"));
		//HAL_Delay(1);
		// Data ready logic
		// For example, read data from a sensor using SPI/I2C
	}
}
 80107fa:	bf00      	nop
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr

08010806 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8010806:	b480      	push	{r7}
 8010808:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801080a:	b672      	cpsid	i
}
 801080c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 801080e:	bf00      	nop
 8010810:	e7fd      	b.n	801080e <Error_Handler+0x8>

08010812 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010812:	b480      	push	{r7}
 8010814:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010816:	bf00      	nop
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b0d0      	sub	sp, #320	@ 0x140
 8010824:	af00      	add	r7, sp, #0
 8010826:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801082a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801082e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010830:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8010834:	2200      	movs	r2, #0
 8010836:	601a      	str	r2, [r3, #0]
 8010838:	605a      	str	r2, [r3, #4]
 801083a:	609a      	str	r2, [r3, #8]
 801083c:	60da      	str	r2, [r3, #12]
 801083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010840:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010844:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010848:	4618      	mov	r0, r3
 801084a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 801084e:	461a      	mov	r2, r3
 8010850:	2100      	movs	r1, #0
 8010852:	f00c fa34 	bl	801ccbe <memset>
  if(hspi->Instance==SPI2)
 8010856:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801085a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	4a9c      	ldr	r2, [pc, #624]	@ (8010ad4 <HAL_SPI_MspInit+0x2b4>)
 8010864:	4293      	cmp	r3, r2
 8010866:	d15f      	bne.n	8010928 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8010868:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801086c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010874:	f04f 0300 	mov.w	r3, #0
 8010878:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 801087c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010880:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010884:	2200      	movs	r2, #0
 8010886:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801088a:	f107 0320 	add.w	r3, r7, #32
 801088e:	4618      	mov	r0, r3
 8010890:	f003 f912 	bl	8013ab8 <HAL_RCCEx_PeriphCLKConfig>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d001      	beq.n	801089e <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 801089a:	f7ff ffb4 	bl	8010806 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 801089e:	4b8e      	ldr	r3, [pc, #568]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 80108a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80108a4:	4a8c      	ldr	r2, [pc, #560]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 80108a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80108aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80108ae:	4b8a      	ldr	r3, [pc, #552]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 80108b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80108b4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80108b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80108bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80108c0:	601a      	str	r2, [r3, #0]
 80108c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80108c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80108ca:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80108cc:	4b82      	ldr	r3, [pc, #520]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 80108ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80108d2:	4a81      	ldr	r2, [pc, #516]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 80108d4:	f043 0302 	orr.w	r3, r3, #2
 80108d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80108dc:	4b7e      	ldr	r3, [pc, #504]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 80108de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80108e2:	f003 0202 	and.w	r2, r3, #2
 80108e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80108ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80108ee:	601a      	str	r2, [r3, #0]
 80108f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80108f4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80108f8:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCKL_2_Pin|MISO_2_Pin|MOSI_2_Pin;
 80108fa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80108fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010902:	2302      	movs	r3, #2
 8010904:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010908:	2300      	movs	r3, #0
 801090a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801090e:	2300      	movs	r3, #0
 8010910:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010914:	2305      	movs	r3, #5
 8010916:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801091a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801091e:	4619      	mov	r1, r3
 8010920:	486e      	ldr	r0, [pc, #440]	@ (8010adc <HAL_SPI_MspInit+0x2bc>)
 8010922:	f001 f87d 	bl	8011a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8010926:	e0d0      	b.n	8010aca <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI3)
 8010928:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801092c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4a6a      	ldr	r2, [pc, #424]	@ (8010ae0 <HAL_SPI_MspInit+0x2c0>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d15f      	bne.n	80109fa <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 801093a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801093e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010942:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8010946:	f04f 0300 	mov.w	r3, #0
 801094a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 801094e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010952:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010956:	2200      	movs	r2, #0
 8010958:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801095c:	f107 0320 	add.w	r3, r7, #32
 8010960:	4618      	mov	r0, r3
 8010962:	f003 f8a9 	bl	8013ab8 <HAL_RCCEx_PeriphCLKConfig>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d001      	beq.n	8010970 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 801096c:	f7ff ff4b 	bl	8010806 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010970:	4b59      	ldr	r3, [pc, #356]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 8010972:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010976:	4a58      	ldr	r2, [pc, #352]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 8010978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801097c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010980:	4b55      	ldr	r3, [pc, #340]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 8010982:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010986:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 801098a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801098e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010992:	601a      	str	r2, [r3, #0]
 8010994:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010998:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801099c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801099e:	4b4e      	ldr	r3, [pc, #312]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 80109a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80109a4:	4a4c      	ldr	r2, [pc, #304]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 80109a6:	f043 0304 	orr.w	r3, r3, #4
 80109aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80109ae:	4b4a      	ldr	r3, [pc, #296]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 80109b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80109b4:	f003 0204 	and.w	r2, r3, #4
 80109b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80109bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80109c0:	601a      	str	r2, [r3, #0]
 80109c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80109c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80109ca:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 80109cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80109d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109d4:	2302      	movs	r3, #2
 80109d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109da:	2300      	movs	r3, #0
 80109dc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109e0:	2300      	movs	r3, #0
 80109e2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80109e6:	2306      	movs	r3, #6
 80109e8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80109ec:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80109f0:	4619      	mov	r1, r3
 80109f2:	483c      	ldr	r0, [pc, #240]	@ (8010ae4 <HAL_SPI_MspInit+0x2c4>)
 80109f4:	f001 f814 	bl	8011a20 <HAL_GPIO_Init>
}
 80109f8:	e067      	b.n	8010aca <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI5)
 80109fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80109fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	4a38      	ldr	r2, [pc, #224]	@ (8010ae8 <HAL_SPI_MspInit+0x2c8>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d15e      	bne.n	8010aca <HAL_SPI_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8010a0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a10:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010a14:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010a18:	f04f 0300 	mov.w	r3, #0
 8010a1c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi5ClockSelection = RCC_SPI5CLKSOURCE_PCLK3;
 8010a20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a24:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010a2e:	f107 0320 	add.w	r3, r7, #32
 8010a32:	4618      	mov	r0, r3
 8010a34:	f003 f840 	bl	8013ab8 <HAL_RCCEx_PeriphCLKConfig>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d001      	beq.n	8010a42 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8010a3e:	f7ff fee2 	bl	8010806 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8010a42:	4b25      	ldr	r3, [pc, #148]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 8010a44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010a48:	4a23      	ldr	r2, [pc, #140]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 8010a4a:	f043 0320 	orr.w	r3, r3, #32
 8010a4e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8010a52:	4b21      	ldr	r3, [pc, #132]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 8010a54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010a58:	f003 0220 	and.w	r2, r3, #32
 8010a5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010a64:	601a      	str	r2, [r3, #0]
 8010a66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a6a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010a6e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8010a70:	4b19      	ldr	r3, [pc, #100]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 8010a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a76:	4a18      	ldr	r2, [pc, #96]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 8010a78:	f043 0320 	orr.w	r3, r3, #32
 8010a7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010a80:	4b15      	ldr	r3, [pc, #84]	@ (8010ad8 <HAL_SPI_MspInit+0x2b8>)
 8010a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a86:	f003 0220 	and.w	r2, r3, #32
 8010a8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010a92:	601a      	str	r2, [r3, #0]
 8010a94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010a98:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010a9c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_1_Pin|MISO_1_Pin|MOSI_1_Pin;
 8010a9e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8010aa2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aa6:	2302      	movs	r3, #2
 8010aa8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aac:	2300      	movs	r3, #0
 8010aae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8010ab8:	2305      	movs	r3, #5
 8010aba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010abe:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	4809      	ldr	r0, [pc, #36]	@ (8010aec <HAL_SPI_MspInit+0x2cc>)
 8010ac6:	f000 ffab 	bl	8011a20 <HAL_GPIO_Init>
}
 8010aca:	bf00      	nop
 8010acc:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	40003800 	.word	0x40003800
 8010ad8:	44020c00 	.word	0x44020c00
 8010adc:	42020400 	.word	0x42020400
 8010ae0:	40003c00 	.word	0x40003c00
 8010ae4:	42020800 	.word	0x42020800
 8010ae8:	44002000 	.word	0x44002000
 8010aec:	42021400 	.word	0x42021400

08010af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b0d2      	sub	sp, #328	@ 0x148
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010afa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010afe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b00:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010b04:	2200      	movs	r2, #0
 8010b06:	601a      	str	r2, [r3, #0]
 8010b08:	605a      	str	r2, [r3, #4]
 8010b0a:	609a      	str	r2, [r3, #8]
 8010b0c:	60da      	str	r2, [r3, #12]
 8010b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010b10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b14:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8010b1e:	461a      	mov	r2, r3
 8010b20:	2100      	movs	r1, #0
 8010b22:	f00c f8cc 	bl	801ccbe <memset>
  if(huart->Instance==UART4)
 8010b26:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b2a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4aa4      	ldr	r2, [pc, #656]	@ (8010dc4 <HAL_UART_MspInit+0x2d4>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d166      	bne.n	8010c06 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8010b38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b3c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010b40:	f04f 0208 	mov.w	r2, #8
 8010b44:	f04f 0300 	mov.w	r3, #0
 8010b48:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8010b4c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b50:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010b54:	2200      	movs	r2, #0
 8010b56:	669a      	str	r2, [r3, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010b58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f002 ffab 	bl	8013ab8 <HAL_RCCEx_PeriphCLKConfig>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d001      	beq.n	8010b6c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8010b68:	f7ff fe4d 	bl	8010806 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8010b6c:	4b96      	ldr	r3, [pc, #600]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010b72:	4a95      	ldr	r2, [pc, #596]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010b74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010b78:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010b7c:	4b92      	ldr	r3, [pc, #584]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010b82:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8010b86:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b8a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010b8e:	601a      	str	r2, [r3, #0]
 8010b90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010b94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010b98:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010ba0:	4a89      	ldr	r2, [pc, #548]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010ba2:	f043 0302 	orr.w	r3, r3, #2
 8010ba6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010baa:	4b87      	ldr	r3, [pc, #540]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010bb0:	f003 0202 	and.w	r2, r3, #2
 8010bb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010bb8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010bbc:	601a      	str	r2, [r3, #0]
 8010bbe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010bc2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010bc6:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART_RX2_Pin|UART_TX2_Pin;
 8010bc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010bcc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bd0:	2302      	movs	r3, #2
 8010bd2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8010be2:	2308      	movs	r3, #8
 8010be4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010be8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010bec:	4619      	mov	r1, r3
 8010bee:	4877      	ldr	r0, [pc, #476]	@ (8010dcc <HAL_UART_MspInit+0x2dc>)
 8010bf0:	f000 ff16 	bl	8011a20 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	2100      	movs	r1, #0
 8010bf8:	203d      	movs	r0, #61	@ 0x3d
 8010bfa:	f000 fd93 	bl	8011724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8010bfe:	203d      	movs	r0, #61	@ 0x3d
 8010c00:	f000 fdaa 	bl	8011758 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE END USART10_MspInit 1 */
  }

}
 8010c04:	e159      	b.n	8010eba <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART5)
 8010c06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	4a6f      	ldr	r2, [pc, #444]	@ (8010dd0 <HAL_UART_MspInit+0x2e0>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d165      	bne.n	8010ce4 <HAL_UART_MspInit+0x1f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8010c18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c1c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010c20:	f04f 0210 	mov.w	r2, #16
 8010c24:	f04f 0300 	mov.w	r3, #0
 8010c28:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8010c2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c30:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010c34:	2200      	movs	r2, #0
 8010c36:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010c38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f002 ff3b 	bl	8013ab8 <HAL_RCCEx_PeriphCLKConfig>
 8010c42:	4603      	mov	r3, r0
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d001      	beq.n	8010c4c <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8010c48:	f7ff fddd 	bl	8010806 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8010c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c52:	4a5d      	ldr	r2, [pc, #372]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010c54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010c58:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010c5c:	4b5a      	ldr	r3, [pc, #360]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c62:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8010c66:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c6e:	601a      	str	r2, [r3, #0]
 8010c70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c78:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010c7a:	4b53      	ldr	r3, [pc, #332]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c80:	4a51      	ldr	r2, [pc, #324]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010c82:	f043 0302 	orr.w	r3, r3, #2
 8010c86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c90:	f003 0202 	and.w	r2, r3, #2
 8010c94:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010c98:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010c9c:	601a      	str	r2, [r3, #0]
 8010c9e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010ca2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010ca6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX3_Pin|UART_TX3_Pin;
 8010ca8:	2360      	movs	r3, #96	@ 0x60
 8010caa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010cae:	2302      	movs	r3, #2
 8010cb0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8010cc0:	230e      	movs	r3, #14
 8010cc2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010cc6:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010cca:	4619      	mov	r1, r3
 8010ccc:	483f      	ldr	r0, [pc, #252]	@ (8010dcc <HAL_UART_MspInit+0x2dc>)
 8010cce:	f000 fea7 	bl	8011a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	2100      	movs	r1, #0
 8010cd6:	203e      	movs	r0, #62	@ 0x3e
 8010cd8:	f000 fd24 	bl	8011724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8010cdc:	203e      	movs	r0, #62	@ 0x3e
 8010cde:	f000 fd3b 	bl	8011758 <HAL_NVIC_EnableIRQ>
}
 8010ce2:	e0ea      	b.n	8010eba <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART8)
 8010ce4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010ce8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	4a38      	ldr	r2, [pc, #224]	@ (8010dd4 <HAL_UART_MspInit+0x2e4>)
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d172      	bne.n	8010ddc <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8010cf6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010cfa:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010cfe:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8010d02:	f04f 0300 	mov.w	r3, #0
 8010d06:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8010d0a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010d0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010d12:	2200      	movs	r2, #0
 8010d14:	679a      	str	r2, [r3, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010d16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f002 fecc 	bl	8013ab8 <HAL_RCCEx_PeriphCLKConfig>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d001      	beq.n	8010d2a <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8010d26:	f7ff fd6e 	bl	8010806 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8010d2a:	4b27      	ldr	r3, [pc, #156]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010d30:	4a25      	ldr	r2, [pc, #148]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010d32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010d36:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010d3a:	4b23      	ldr	r3, [pc, #140]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010d3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010d40:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8010d44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010d48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010d4c:	601a      	str	r2, [r3, #0]
 8010d4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010d52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010d56:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8010d58:	4b1b      	ldr	r3, [pc, #108]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d5e:	4a1a      	ldr	r2, [pc, #104]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010d60:	f043 0310 	orr.w	r3, r3, #16
 8010d64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010d68:	4b17      	ldr	r3, [pc, #92]	@ (8010dc8 <HAL_UART_MspInit+0x2d8>)
 8010d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d6e:	f003 0210 	and.w	r2, r3, #16
 8010d72:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010d76:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010d7a:	601a      	str	r2, [r3, #0]
 8010d7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010d80:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010d84:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX1_Pin|UART_TX1_Pin;
 8010d86:	2303      	movs	r3, #3
 8010d88:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d8c:	2302      	movs	r3, #2
 8010d8e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d92:	2300      	movs	r3, #0
 8010d94:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8010d9e:	2308      	movs	r3, #8
 8010da0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010da4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010da8:	4619      	mov	r1, r3
 8010daa:	480b      	ldr	r0, [pc, #44]	@ (8010dd8 <HAL_UART_MspInit+0x2e8>)
 8010dac:	f000 fe38 	bl	8011a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8010db0:	2200      	movs	r2, #0
 8010db2:	2100      	movs	r1, #0
 8010db4:	2063      	movs	r0, #99	@ 0x63
 8010db6:	f000 fcb5 	bl	8011724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8010dba:	2063      	movs	r0, #99	@ 0x63
 8010dbc:	f000 fccc 	bl	8011758 <HAL_NVIC_EnableIRQ>
}
 8010dc0:	e07b      	b.n	8010eba <HAL_UART_MspInit+0x3ca>
 8010dc2:	bf00      	nop
 8010dc4:	40004c00 	.word	0x40004c00
 8010dc8:	44020c00 	.word	0x44020c00
 8010dcc:	42020400 	.word	0x42020400
 8010dd0:	40005000 	.word	0x40005000
 8010dd4:	40007c00 	.word	0x40007c00
 8010dd8:	42021000 	.word	0x42021000
  else if(huart->Instance==USART10)
 8010ddc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010de0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a36      	ldr	r2, [pc, #216]	@ (8010ec4 <HAL_UART_MspInit+0x3d4>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d165      	bne.n	8010eba <HAL_UART_MspInit+0x3ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8010dee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010df2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8010df6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010dfa:	f04f 0300 	mov.w	r3, #0
 8010dfe:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart10ClockSelection = RCC_USART10CLKSOURCE_PCLK1;
 8010e02:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010e06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010e10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010e14:	4618      	mov	r0, r3
 8010e16:	f002 fe4f 	bl	8013ab8 <HAL_RCCEx_PeriphCLKConfig>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d001      	beq.n	8010e24 <HAL_UART_MspInit+0x334>
      Error_Handler();
 8010e20:	f7ff fcf1 	bl	8010806 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8010e24:	4b28      	ldr	r3, [pc, #160]	@ (8010ec8 <HAL_UART_MspInit+0x3d8>)
 8010e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010e2a:	4a27      	ldr	r2, [pc, #156]	@ (8010ec8 <HAL_UART_MspInit+0x3d8>)
 8010e2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010e30:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8010e34:	4b24      	ldr	r3, [pc, #144]	@ (8010ec8 <HAL_UART_MspInit+0x3d8>)
 8010e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010e3a:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8010e3e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010e42:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010e46:	601a      	str	r2, [r3, #0]
 8010e48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010e4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010e50:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8010e52:	4b1d      	ldr	r3, [pc, #116]	@ (8010ec8 <HAL_UART_MspInit+0x3d8>)
 8010e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e58:	4a1b      	ldr	r2, [pc, #108]	@ (8010ec8 <HAL_UART_MspInit+0x3d8>)
 8010e5a:	f043 0310 	orr.w	r3, r3, #16
 8010e5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010e62:	4b19      	ldr	r3, [pc, #100]	@ (8010ec8 <HAL_UART_MspInit+0x3d8>)
 8010e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e68:	f003 0210 	and.w	r2, r3, #16
 8010e6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010e70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8010e74:	601a      	str	r2, [r3, #0]
 8010e76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8010e7a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8010e7e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX4_Pin|UART_TX4_Pin;
 8010e80:	230c      	movs	r3, #12
 8010e82:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e86:	2302      	movs	r3, #2
 8010e88:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e92:	2300      	movs	r3, #0
 8010e94:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART10;
 8010e98:	2307      	movs	r3, #7
 8010e9a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010e9e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8010ea2:	4619      	mov	r1, r3
 8010ea4:	4809      	ldr	r0, [pc, #36]	@ (8010ecc <HAL_UART_MspInit+0x3dc>)
 8010ea6:	f000 fdbb 	bl	8011a20 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8010eaa:	2200      	movs	r2, #0
 8010eac:	2100      	movs	r1, #0
 8010eae:	2056      	movs	r0, #86	@ 0x56
 8010eb0:	f000 fc38 	bl	8011724 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART10_IRQn);
 8010eb4:	2056      	movs	r0, #86	@ 0x56
 8010eb6:	f000 fc4f 	bl	8011758 <HAL_NVIC_EnableIRQ>
}
 8010eba:	bf00      	nop
 8010ebc:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	40006800 	.word	0x40006800
 8010ec8:	44020c00 	.word	0x44020c00
 8010ecc:	42021000 	.word	0x42021000

08010ed0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b086      	sub	sp, #24
 8010ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8010ed6:	1d3b      	adds	r3, r7, #4
 8010ed8:	2200      	movs	r2, #0
 8010eda:	601a      	str	r2, [r3, #0]
 8010edc:	605a      	str	r2, [r3, #4]
 8010ede:	609a      	str	r2, [r3, #8]
 8010ee0:	60da      	str	r2, [r3, #12]
 8010ee2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8010ee4:	4b43      	ldr	r3, [pc, #268]	@ (8010ff4 <HAL_FMC_MspInit+0x124>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d17f      	bne.n	8010fec <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8010eec:	4b41      	ldr	r3, [pc, #260]	@ (8010ff4 <HAL_FMC_MspInit+0x124>)
 8010eee:	2201      	movs	r2, #1
 8010ef0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010ef2:	4b41      	ldr	r3, [pc, #260]	@ (8010ff8 <HAL_FMC_MspInit+0x128>)
 8010ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010ef8:	4a3f      	ldr	r2, [pc, #252]	@ (8010ff8 <HAL_FMC_MspInit+0x128>)
 8010efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010efe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8010f02:	4b3d      	ldr	r3, [pc, #244]	@ (8010ff8 <HAL_FMC_MspInit+0x128>)
 8010f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010f0c:	603b      	str	r3, [r7, #0]
 8010f0e:	683b      	ldr	r3, [r7, #0]
  PA8   ------> FMC_NOE
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8010f10:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8010f14:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f16:	2302      	movs	r3, #2
 8010f18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010f22:	230c      	movs	r3, #12
 8010f24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010f26:	1d3b      	adds	r3, r7, #4
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4834      	ldr	r0, [pc, #208]	@ (8010ffc <HAL_FMC_MspInit+0x12c>)
 8010f2c:	f000 fd78 	bl	8011a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8010f30:	2380      	movs	r3, #128	@ 0x80
 8010f32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f34:	2302      	movs	r3, #2
 8010f36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f3c:	2303      	movs	r3, #3
 8010f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 8010f40:	230d      	movs	r3, #13
 8010f42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f44:	1d3b      	adds	r3, r7, #4
 8010f46:	4619      	mov	r1, r3
 8010f48:	482d      	ldr	r0, [pc, #180]	@ (8011000 <HAL_FMC_MspInit+0x130>)
 8010f4a:	f000 fd69 	bl	8011a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8010f4e:	233f      	movs	r3, #63	@ 0x3f
 8010f50:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f52:	2302      	movs	r3, #2
 8010f54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f56:	2300      	movs	r3, #0
 8010f58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f5a:	2303      	movs	r3, #3
 8010f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010f5e:	230c      	movs	r3, #12
 8010f60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010f62:	1d3b      	adds	r3, r7, #4
 8010f64:	4619      	mov	r1, r3
 8010f66:	4827      	ldr	r0, [pc, #156]	@ (8011004 <HAL_FMC_MspInit+0x134>)
 8010f68:	f000 fd5a 	bl	8011a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8010f6c:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8010f70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f72:	2302      	movs	r3, #2
 8010f74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f76:	2300      	movs	r3, #0
 8010f78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f7a:	2303      	movs	r3, #3
 8010f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010f7e:	230c      	movs	r3, #12
 8010f80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010f82:	1d3b      	adds	r3, r7, #4
 8010f84:	4619      	mov	r1, r3
 8010f86:	4820      	ldr	r0, [pc, #128]	@ (8011008 <HAL_FMC_MspInit+0x138>)
 8010f88:	f000 fd4a 	bl	8011a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8010f8c:	f64f 0383 	movw	r3, #63619	@ 0xf883
 8010f90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f92:	2302      	movs	r3, #2
 8010f94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f96:	2300      	movs	r3, #0
 8010f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f9a:	2303      	movs	r3, #3
 8010f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010f9e:	230c      	movs	r3, #12
 8010fa0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010fa2:	1d3b      	adds	r3, r7, #4
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	4819      	ldr	r0, [pc, #100]	@ (801100c <HAL_FMC_MspInit+0x13c>)
 8010fa8:	f000 fd3a 	bl	8011a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010fac:	23c0      	movs	r3, #192	@ 0xc0
 8010fae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010fb0:	2302      	movs	r3, #2
 8010fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010fb8:	2303      	movs	r3, #3
 8010fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8010fbc:	2309      	movs	r3, #9
 8010fbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010fc0:	1d3b      	adds	r3, r7, #4
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	4812      	ldr	r0, [pc, #72]	@ (8011010 <HAL_FMC_MspInit+0x140>)
 8010fc6:	f000 fd2b 	bl	8011a20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8010fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010fce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010fd0:	2302      	movs	r3, #2
 8010fd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010fd8:	2303      	movs	r3, #3
 8010fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010fdc:	230c      	movs	r3, #12
 8010fde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010fe0:	1d3b      	adds	r3, r7, #4
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	4806      	ldr	r0, [pc, #24]	@ (8011000 <HAL_FMC_MspInit+0x130>)
 8010fe6:	f000 fd1b 	bl	8011a20 <HAL_GPIO_Init>
 8010fea:	e000      	b.n	8010fee <HAL_FMC_MspInit+0x11e>
    return;
 8010fec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8010fee:	3718      	adds	r7, #24
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	20005be8 	.word	0x20005be8
 8010ff8:	44020c00 	.word	0x44020c00
 8010ffc:	42021400 	.word	0x42021400
 8011000:	42020000 	.word	0x42020000
 8011004:	42021800 	.word	0x42021800
 8011008:	42021000 	.word	0x42021000
 801100c:	42020c00 	.word	0x42020c00
 8011010:	42020800 	.word	0x42020800

08011014 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 801101c:	f7ff ff58 	bl	8010ed0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8011020:	bf00      	nop
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8011030:	f7ff ff4e 	bl	8010ed0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8011034:	bf00      	nop
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801103c:	b480      	push	{r7}
 801103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011040:	bf00      	nop
 8011042:	e7fd      	b.n	8011040 <NMI_Handler+0x4>

08011044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011044:	b480      	push	{r7}
 8011046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011048:	bf00      	nop
 801104a:	e7fd      	b.n	8011048 <HardFault_Handler+0x4>

0801104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801104c:	b480      	push	{r7}
 801104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011050:	bf00      	nop
 8011052:	e7fd      	b.n	8011050 <MemManage_Handler+0x4>

08011054 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011054:	b480      	push	{r7}
 8011056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011058:	bf00      	nop
 801105a:	e7fd      	b.n	8011058 <BusFault_Handler+0x4>

0801105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801105c:	b480      	push	{r7}
 801105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011060:	bf00      	nop
 8011062:	e7fd      	b.n	8011060 <UsageFault_Handler+0x4>

08011064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011064:	b480      	push	{r7}
 8011066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011068:	bf00      	nop
 801106a:	46bd      	mov	sp, r7
 801106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011070:	4770      	bx	lr

08011072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011072:	b480      	push	{r7}
 8011074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011076:	bf00      	nop
 8011078:	46bd      	mov	sp, r7
 801107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107e:	4770      	bx	lr

08011080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011080:	b480      	push	{r7}
 8011082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011084:	bf00      	nop
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr

0801108e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801108e:	b580      	push	{r7, lr}
 8011090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011092:	f000 fa4b 	bl	801152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011096:	bf00      	nop
 8011098:	bd80      	pop	{r7, pc}

0801109a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 801109a:	b580      	push	{r7, lr}
 801109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_1_Pin);
 801109e:	2002      	movs	r0, #2
 80110a0:	f000 fe5a 	bl	8011d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80110a4:	bf00      	nop
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_2_Pin);
 80110ac:	2080      	movs	r0, #128	@ 0x80
 80110ae:	f000 fe53 	bl	8011d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 80110b2:	bf00      	nop
 80110b4:	bd80      	pop	{r7, pc}

080110b6 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80110b6:	b580      	push	{r7, lr}
 80110b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_3_Pin);
 80110ba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80110be:	f000 fe4b 	bl	8011d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80110c2:	bf00      	nop
 80110c4:	bd80      	pop	{r7, pc}
	...

080110c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80110cc:	4802      	ldr	r0, [pc, #8]	@ (80110d8 <UART4_IRQHandler+0x10>)
 80110ce:	f008 fe41 	bl	8019d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80110d2:	bf00      	nop
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	200058d0 	.word	0x200058d0

080110dc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80110e0:	4802      	ldr	r0, [pc, #8]	@ (80110ec <UART5_IRQHandler+0x10>)
 80110e2:	f008 fe37 	bl	8019d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80110e6:	bf00      	nop
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	20005964 	.word	0x20005964

080110f0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80110f4:	4802      	ldr	r0, [pc, #8]	@ (8011100 <UART8_IRQHandler+0x10>)
 80110f6:	f008 fe2d 	bl	8019d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80110fa:	bf00      	nop
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	200059f8 	.word	0x200059f8

08011104 <USART10_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART10_IRQHandler(void) {
 8011104:	b580      	push	{r7, lr}
 8011106:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart10);
 8011108:	4802      	ldr	r0, [pc, #8]	@ (8011114 <USART10_IRQHandler+0x10>)
 801110a:	f008 fe23 	bl	8019d54 <HAL_UART_IRQHandler>
}
 801110e:	bf00      	nop
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	20005a8c 	.word	0x20005a8c

08011118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011118:	b480      	push	{r7}
 801111a:	af00      	add	r7, sp, #0
  return 1;
 801111c:	2301      	movs	r3, #1
}
 801111e:	4618      	mov	r0, r3
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <_kill>:

int _kill(int pid, int sig)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8011132:	f00b fe2d 	bl	801cd90 <__errno>
 8011136:	4603      	mov	r3, r0
 8011138:	2216      	movs	r2, #22
 801113a:	601a      	str	r2, [r3, #0]
  return -1;
 801113c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011140:	4618      	mov	r0, r3
 8011142:	3708      	adds	r7, #8
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <_exit>:

void _exit (int status)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8011150:	f04f 31ff 	mov.w	r1, #4294967295
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7ff ffe7 	bl	8011128 <_kill>
  while (1) {}    /* Make sure we hang here */
 801115a:	bf00      	nop
 801115c:	e7fd      	b.n	801115a <_exit+0x12>

0801115e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801115e:	b580      	push	{r7, lr}
 8011160:	b086      	sub	sp, #24
 8011162:	af00      	add	r7, sp, #0
 8011164:	60f8      	str	r0, [r7, #12]
 8011166:	60b9      	str	r1, [r7, #8]
 8011168:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801116a:	2300      	movs	r3, #0
 801116c:	617b      	str	r3, [r7, #20]
 801116e:	e00a      	b.n	8011186 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8011170:	f3af 8000 	nop.w
 8011174:	4601      	mov	r1, r0
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	1c5a      	adds	r2, r3, #1
 801117a:	60ba      	str	r2, [r7, #8]
 801117c:	b2ca      	uxtb	r2, r1
 801117e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	3301      	adds	r3, #1
 8011184:	617b      	str	r3, [r7, #20]
 8011186:	697a      	ldr	r2, [r7, #20]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	429a      	cmp	r2, r3
 801118c:	dbf0      	blt.n	8011170 <_read+0x12>
  }

  return len;
 801118e:	687b      	ldr	r3, [r7, #4]
}
 8011190:	4618      	mov	r0, r3
 8011192:	3718      	adds	r7, #24
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b086      	sub	sp, #24
 801119c:	af00      	add	r7, sp, #0
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80111a4:	2300      	movs	r3, #0
 80111a6:	617b      	str	r3, [r7, #20]
 80111a8:	e009      	b.n	80111be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	1c5a      	adds	r2, r3, #1
 80111ae:	60ba      	str	r2, [r7, #8]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	4618      	mov	r0, r3
 80111b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	3301      	adds	r3, #1
 80111bc:	617b      	str	r3, [r7, #20]
 80111be:	697a      	ldr	r2, [r7, #20]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	dbf1      	blt.n	80111aa <_write+0x12>
  }
  return len;
 80111c6:	687b      	ldr	r3, [r7, #4]
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3718      	adds	r7, #24
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <_close>:

int _close(int file)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80111d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80111dc:	4618      	mov	r0, r3
 80111de:	370c      	adds	r7, #12
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80111f8:	605a      	str	r2, [r3, #4]
  return 0;
 80111fa:	2300      	movs	r3, #0
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	370c      	adds	r7, #12
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr

08011208 <_isatty>:

int _isatty(int file)
{
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8011210:	2301      	movs	r3, #1
}
 8011212:	4618      	mov	r0, r3
 8011214:	370c      	adds	r7, #12
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr

0801121e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801121e:	b480      	push	{r7}
 8011220:	b085      	sub	sp, #20
 8011222:	af00      	add	r7, sp, #0
 8011224:	60f8      	str	r0, [r7, #12]
 8011226:	60b9      	str	r1, [r7, #8]
 8011228:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801122a:	2300      	movs	r3, #0
}
 801122c:	4618      	mov	r0, r3
 801122e:	3714      	adds	r7, #20
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr

08011238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b086      	sub	sp, #24
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011240:	4a14      	ldr	r2, [pc, #80]	@ (8011294 <_sbrk+0x5c>)
 8011242:	4b15      	ldr	r3, [pc, #84]	@ (8011298 <_sbrk+0x60>)
 8011244:	1ad3      	subs	r3, r2, r3
 8011246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801124c:	4b13      	ldr	r3, [pc, #76]	@ (801129c <_sbrk+0x64>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d102      	bne.n	801125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011254:	4b11      	ldr	r3, [pc, #68]	@ (801129c <_sbrk+0x64>)
 8011256:	4a12      	ldr	r2, [pc, #72]	@ (80112a0 <_sbrk+0x68>)
 8011258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801125a:	4b10      	ldr	r3, [pc, #64]	@ (801129c <_sbrk+0x64>)
 801125c:	681a      	ldr	r2, [r3, #0]
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	4413      	add	r3, r2
 8011262:	693a      	ldr	r2, [r7, #16]
 8011264:	429a      	cmp	r2, r3
 8011266:	d207      	bcs.n	8011278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011268:	f00b fd92 	bl	801cd90 <__errno>
 801126c:	4603      	mov	r3, r0
 801126e:	220c      	movs	r2, #12
 8011270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8011272:	f04f 33ff 	mov.w	r3, #4294967295
 8011276:	e009      	b.n	801128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011278:	4b08      	ldr	r3, [pc, #32]	@ (801129c <_sbrk+0x64>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801127e:	4b07      	ldr	r3, [pc, #28]	@ (801129c <_sbrk+0x64>)
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4413      	add	r3, r2
 8011286:	4a05      	ldr	r2, [pc, #20]	@ (801129c <_sbrk+0x64>)
 8011288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801128a:	68fb      	ldr	r3, [r7, #12]
}
 801128c:	4618      	mov	r0, r3
 801128e:	3718      	adds	r7, #24
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}
 8011294:	200a0000 	.word	0x200a0000
 8011298:	00000400 	.word	0x00000400
 801129c:	20005bec 	.word	0x20005bec
 80112a0:	20005d40 	.word	0x20005d40

080112a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80112a4:	b480      	push	{r7}
 80112a6:	b083      	sub	sp, #12
 80112a8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80112aa:	4b34      	ldr	r3, [pc, #208]	@ (801137c <SystemInit+0xd8>)
 80112ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112b0:	4a32      	ldr	r2, [pc, #200]	@ (801137c <SystemInit+0xd8>)
 80112b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80112b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80112ba:	4b31      	ldr	r3, [pc, #196]	@ (8011380 <SystemInit+0xdc>)
 80112bc:	2201      	movs	r2, #1
 80112be:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80112c0:	4b2f      	ldr	r3, [pc, #188]	@ (8011380 <SystemInit+0xdc>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80112c6:	4b2e      	ldr	r3, [pc, #184]	@ (8011380 <SystemInit+0xdc>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80112cc:	4b2c      	ldr	r3, [pc, #176]	@ (8011380 <SystemInit+0xdc>)
 80112ce:	681a      	ldr	r2, [r3, #0]
 80112d0:	492b      	ldr	r1, [pc, #172]	@ (8011380 <SystemInit+0xdc>)
 80112d2:	4b2c      	ldr	r3, [pc, #176]	@ (8011384 <SystemInit+0xe0>)
 80112d4:	4013      	ands	r3, r2
 80112d6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80112d8:	4b29      	ldr	r3, [pc, #164]	@ (8011380 <SystemInit+0xdc>)
 80112da:	2200      	movs	r2, #0
 80112dc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80112de:	4b28      	ldr	r3, [pc, #160]	@ (8011380 <SystemInit+0xdc>)
 80112e0:	2200      	movs	r2, #0
 80112e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80112e4:	4b26      	ldr	r3, [pc, #152]	@ (8011380 <SystemInit+0xdc>)
 80112e6:	2200      	movs	r2, #0
 80112e8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80112ea:	4b25      	ldr	r3, [pc, #148]	@ (8011380 <SystemInit+0xdc>)
 80112ec:	4a26      	ldr	r2, [pc, #152]	@ (8011388 <SystemInit+0xe4>)
 80112ee:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80112f0:	4b23      	ldr	r3, [pc, #140]	@ (8011380 <SystemInit+0xdc>)
 80112f2:	2200      	movs	r2, #0
 80112f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80112f6:	4b22      	ldr	r3, [pc, #136]	@ (8011380 <SystemInit+0xdc>)
 80112f8:	4a23      	ldr	r2, [pc, #140]	@ (8011388 <SystemInit+0xe4>)
 80112fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80112fc:	4b20      	ldr	r3, [pc, #128]	@ (8011380 <SystemInit+0xdc>)
 80112fe:	2200      	movs	r2, #0
 8011300:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8011302:	4b1f      	ldr	r3, [pc, #124]	@ (8011380 <SystemInit+0xdc>)
 8011304:	4a20      	ldr	r2, [pc, #128]	@ (8011388 <SystemInit+0xe4>)
 8011306:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8011308:	4b1d      	ldr	r3, [pc, #116]	@ (8011380 <SystemInit+0xdc>)
 801130a:	2200      	movs	r2, #0
 801130c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 801130e:	4b1c      	ldr	r3, [pc, #112]	@ (8011380 <SystemInit+0xdc>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	4a1b      	ldr	r2, [pc, #108]	@ (8011380 <SystemInit+0xdc>)
 8011314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011318:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 801131a:	4b19      	ldr	r3, [pc, #100]	@ (8011380 <SystemInit+0xdc>)
 801131c:	2200      	movs	r2, #0
 801131e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011320:	4b16      	ldr	r3, [pc, #88]	@ (801137c <SystemInit+0xd8>)
 8011322:	4a1a      	ldr	r2, [pc, #104]	@ (801138c <SystemInit+0xe8>)
 8011324:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8011326:	4b1a      	ldr	r3, [pc, #104]	@ (8011390 <SystemInit+0xec>)
 8011328:	699b      	ldr	r3, [r3, #24]
 801132a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 801132e:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8011336:	d003      	beq.n	8011340 <SystemInit+0x9c>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 801133e:	d117      	bne.n	8011370 <SystemInit+0xcc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8011340:	4b13      	ldr	r3, [pc, #76]	@ (8011390 <SystemInit+0xec>)
 8011342:	69db      	ldr	r3, [r3, #28]
 8011344:	f003 0301 	and.w	r3, r3, #1
 8011348:	2b00      	cmp	r3, #0
 801134a:	d005      	beq.n	8011358 <SystemInit+0xb4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 801134c:	4b10      	ldr	r3, [pc, #64]	@ (8011390 <SystemInit+0xec>)
 801134e:	4a11      	ldr	r2, [pc, #68]	@ (8011394 <SystemInit+0xf0>)
 8011350:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8011352:	4b0f      	ldr	r3, [pc, #60]	@ (8011390 <SystemInit+0xec>)
 8011354:	4a10      	ldr	r2, [pc, #64]	@ (8011398 <SystemInit+0xf4>)
 8011356:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8011358:	4b0d      	ldr	r3, [pc, #52]	@ (8011390 <SystemInit+0xec>)
 801135a:	69db      	ldr	r3, [r3, #28]
 801135c:	4a0c      	ldr	r2, [pc, #48]	@ (8011390 <SystemInit+0xec>)
 801135e:	f043 0302 	orr.w	r3, r3, #2
 8011362:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8011364:	4b0a      	ldr	r3, [pc, #40]	@ (8011390 <SystemInit+0xec>)
 8011366:	69db      	ldr	r3, [r3, #28]
 8011368:	4a09      	ldr	r2, [pc, #36]	@ (8011390 <SystemInit+0xec>)
 801136a:	f043 0301 	orr.w	r3, r3, #1
 801136e:	61d3      	str	r3, [r2, #28]
  }
}
 8011370:	bf00      	nop
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	e000ed00 	.word	0xe000ed00
 8011380:	44020c00 	.word	0x44020c00
 8011384:	eae2eae3 	.word	0xeae2eae3
 8011388:	01010280 	.word	0x01010280
 801138c:	0800c000 	.word	0x0800c000
 8011390:	40022000 	.word	0x40022000
 8011394:	08192a3b 	.word	0x08192a3b
 8011398:	4c5d6e7f 	.word	0x4c5d6e7f

0801139c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801139c:	480d      	ldr	r0, [pc, #52]	@ (80113d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801139e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80113a0:	f7ff ff80 	bl	80112a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80113a4:	480c      	ldr	r0, [pc, #48]	@ (80113d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80113a6:	490d      	ldr	r1, [pc, #52]	@ (80113dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80113a8:	4a0d      	ldr	r2, [pc, #52]	@ (80113e0 <LoopForever+0xe>)
  movs r3, #0
 80113aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80113ac:	e002      	b.n	80113b4 <LoopCopyDataInit>

080113ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80113ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80113b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80113b2:	3304      	adds	r3, #4

080113b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80113b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80113b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80113b8:	d3f9      	bcc.n	80113ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80113ba:	4a0a      	ldr	r2, [pc, #40]	@ (80113e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80113bc:	4c0a      	ldr	r4, [pc, #40]	@ (80113e8 <LoopForever+0x16>)
  movs r3, #0
 80113be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80113c0:	e001      	b.n	80113c6 <LoopFillZerobss>

080113c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80113c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80113c4:	3204      	adds	r2, #4

080113c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80113c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80113c8:	d3fb      	bcc.n	80113c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80113ca:	f00b fce7 	bl	801cd9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80113ce:	f7fe f9e9 	bl	800f7a4 <main>

080113d2 <LoopForever>:

LoopForever:
    b LoopForever
 80113d2:	e7fe      	b.n	80113d2 <LoopForever>
  ldr   r0, =_estack
 80113d4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80113d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80113dc:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80113e0:	0801f740 	.word	0x0801f740
  ldr r2, =_sbss
 80113e4:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80113e8:	20005d40 	.word	0x20005d40

080113ec <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80113ec:	e7fe      	b.n	80113ec <ADC1_IRQHandler>
	...

080113f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80113f4:	2003      	movs	r0, #3
 80113f6:	f000 f98a 	bl	801170e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80113fa:	f002 f9d3 	bl	80137a4 <HAL_RCC_GetSysClockFreq>
 80113fe:	4602      	mov	r2, r0
 8011400:	4b0c      	ldr	r3, [pc, #48]	@ (8011434 <HAL_Init+0x44>)
 8011402:	6a1b      	ldr	r3, [r3, #32]
 8011404:	f003 030f 	and.w	r3, r3, #15
 8011408:	490b      	ldr	r1, [pc, #44]	@ (8011438 <HAL_Init+0x48>)
 801140a:	5ccb      	ldrb	r3, [r1, r3]
 801140c:	fa22 f303 	lsr.w	r3, r2, r3
 8011410:	4a0a      	ldr	r2, [pc, #40]	@ (801143c <HAL_Init+0x4c>)
 8011412:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8011414:	2004      	movs	r0, #4
 8011416:	f000 f9cf 	bl	80117b8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801141a:	200f      	movs	r0, #15
 801141c:	f000 f810 	bl	8011440 <HAL_InitTick>
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d001      	beq.n	801142a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8011426:	2301      	movs	r3, #1
 8011428:	e002      	b.n	8011430 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801142a:	f7ff f9f2 	bl	8010812 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801142e:	2300      	movs	r3, #0
}
 8011430:	4618      	mov	r0, r3
 8011432:	bd80      	pop	{r7, pc}
 8011434:	44020c00 	.word	0x44020c00
 8011438:	0801f380 	.word	0x0801f380
 801143c:	200000a8 	.word	0x200000a8

08011440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8011448:	2300      	movs	r3, #0
 801144a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 801144c:	4b33      	ldr	r3, [pc, #204]	@ (801151c <HAL_InitTick+0xdc>)
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d101      	bne.n	8011458 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8011454:	2301      	movs	r3, #1
 8011456:	e05c      	b.n	8011512 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8011458:	4b31      	ldr	r3, [pc, #196]	@ (8011520 <HAL_InitTick+0xe0>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f003 0304 	and.w	r3, r3, #4
 8011460:	2b04      	cmp	r3, #4
 8011462:	d10c      	bne.n	801147e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8011464:	4b2f      	ldr	r3, [pc, #188]	@ (8011524 <HAL_InitTick+0xe4>)
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	4b2c      	ldr	r3, [pc, #176]	@ (801151c <HAL_InitTick+0xdc>)
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	4619      	mov	r1, r3
 801146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011472:	fbb3 f3f1 	udiv	r3, r3, r1
 8011476:	fbb2 f3f3 	udiv	r3, r2, r3
 801147a:	60fb      	str	r3, [r7, #12]
 801147c:	e037      	b.n	80114ee <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 801147e:	f000 f9f3 	bl	8011868 <HAL_SYSTICK_GetCLKSourceConfig>
 8011482:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	2b02      	cmp	r3, #2
 8011488:	d023      	beq.n	80114d2 <HAL_InitTick+0x92>
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	2b02      	cmp	r3, #2
 801148e:	d82d      	bhi.n	80114ec <HAL_InitTick+0xac>
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d003      	beq.n	801149e <HAL_InitTick+0x5e>
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d00d      	beq.n	80114b8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 801149c:	e026      	b.n	80114ec <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 801149e:	4b21      	ldr	r3, [pc, #132]	@ (8011524 <HAL_InitTick+0xe4>)
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	4b1e      	ldr	r3, [pc, #120]	@ (801151c <HAL_InitTick+0xdc>)
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	4619      	mov	r1, r3
 80114a8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80114ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80114b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80114b4:	60fb      	str	r3, [r7, #12]
        break;
 80114b6:	e01a      	b.n	80114ee <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80114b8:	4b18      	ldr	r3, [pc, #96]	@ (801151c <HAL_InitTick+0xdc>)
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	461a      	mov	r2, r3
 80114be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80114c6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80114ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80114ce:	60fb      	str	r3, [r7, #12]
        break;
 80114d0:	e00d      	b.n	80114ee <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80114d2:	4b12      	ldr	r3, [pc, #72]	@ (801151c <HAL_InitTick+0xdc>)
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	461a      	mov	r2, r3
 80114d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80114e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80114e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80114e8:	60fb      	str	r3, [r7, #12]
        break;
 80114ea:	e000      	b.n	80114ee <HAL_InitTick+0xae>
        break;
 80114ec:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f000 f940 	bl	8011774 <HAL_SYSTICK_Config>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d001      	beq.n	80114fe <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80114fa:	2301      	movs	r3, #1
 80114fc:	e009      	b.n	8011512 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80114fe:	2200      	movs	r2, #0
 8011500:	6879      	ldr	r1, [r7, #4]
 8011502:	f04f 30ff 	mov.w	r0, #4294967295
 8011506:	f000 f90d 	bl	8011724 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 801150a:	4a07      	ldr	r2, [pc, #28]	@ (8011528 <HAL_InitTick+0xe8>)
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
 801151a:	bf00      	nop
 801151c:	200000b0 	.word	0x200000b0
 8011520:	e000e010 	.word	0xe000e010
 8011524:	200000a8 	.word	0x200000a8
 8011528:	200000ac 	.word	0x200000ac

0801152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801152c:	b480      	push	{r7}
 801152e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8011530:	4b06      	ldr	r3, [pc, #24]	@ (801154c <HAL_IncTick+0x20>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	461a      	mov	r2, r3
 8011536:	4b06      	ldr	r3, [pc, #24]	@ (8011550 <HAL_IncTick+0x24>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	4413      	add	r3, r2
 801153c:	4a04      	ldr	r2, [pc, #16]	@ (8011550 <HAL_IncTick+0x24>)
 801153e:	6013      	str	r3, [r2, #0]
}
 8011540:	bf00      	nop
 8011542:	46bd      	mov	sp, r7
 8011544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop
 801154c:	200000b0 	.word	0x200000b0
 8011550:	20005bf0 	.word	0x20005bf0

08011554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011554:	b480      	push	{r7}
 8011556:	af00      	add	r7, sp, #0
  return uwTick;
 8011558:	4b03      	ldr	r3, [pc, #12]	@ (8011568 <HAL_GetTick+0x14>)
 801155a:	681b      	ldr	r3, [r3, #0]
}
 801155c:	4618      	mov	r0, r3
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop
 8011568:	20005bf0 	.word	0x20005bf0

0801156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011574:	f7ff ffee 	bl	8011554 <HAL_GetTick>
 8011578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011584:	d005      	beq.n	8011592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011586:	4b0a      	ldr	r3, [pc, #40]	@ (80115b0 <HAL_Delay+0x44>)
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	461a      	mov	r2, r3
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	4413      	add	r3, r2
 8011590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011592:	bf00      	nop
 8011594:	f7ff ffde 	bl	8011554 <HAL_GetTick>
 8011598:	4602      	mov	r2, r0
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	1ad3      	subs	r3, r2, r3
 801159e:	68fa      	ldr	r2, [r7, #12]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d8f7      	bhi.n	8011594 <HAL_Delay+0x28>
  {
  }
}
 80115a4:	bf00      	nop
 80115a6:	bf00      	nop
 80115a8:	3710      	adds	r7, #16
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	200000b0 	.word	0x200000b0

080115b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80115b4:	b480      	push	{r7}
 80115b6:	b085      	sub	sp, #20
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f003 0307 	and.w	r3, r3, #7
 80115c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80115c4:	4b0c      	ldr	r3, [pc, #48]	@ (80115f8 <__NVIC_SetPriorityGrouping+0x44>)
 80115c6:	68db      	ldr	r3, [r3, #12]
 80115c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80115ca:	68ba      	ldr	r2, [r7, #8]
 80115cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80115d0:	4013      	ands	r3, r2
 80115d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80115dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80115e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80115e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80115e6:	4a04      	ldr	r2, [pc, #16]	@ (80115f8 <__NVIC_SetPriorityGrouping+0x44>)
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	60d3      	str	r3, [r2, #12]
}
 80115ec:	bf00      	nop
 80115ee:	3714      	adds	r7, #20
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr
 80115f8:	e000ed00 	.word	0xe000ed00

080115fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80115fc:	b480      	push	{r7}
 80115fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011600:	4b04      	ldr	r3, [pc, #16]	@ (8011614 <__NVIC_GetPriorityGrouping+0x18>)
 8011602:	68db      	ldr	r3, [r3, #12]
 8011604:	0a1b      	lsrs	r3, r3, #8
 8011606:	f003 0307 	and.w	r3, r3, #7
}
 801160a:	4618      	mov	r0, r3
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr
 8011614:	e000ed00 	.word	0xe000ed00

08011618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	4603      	mov	r3, r0
 8011620:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011626:	2b00      	cmp	r3, #0
 8011628:	db0b      	blt.n	8011642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801162a:	88fb      	ldrh	r3, [r7, #6]
 801162c:	f003 021f 	and.w	r2, r3, #31
 8011630:	4907      	ldr	r1, [pc, #28]	@ (8011650 <__NVIC_EnableIRQ+0x38>)
 8011632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011636:	095b      	lsrs	r3, r3, #5
 8011638:	2001      	movs	r0, #1
 801163a:	fa00 f202 	lsl.w	r2, r0, r2
 801163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8011642:	bf00      	nop
 8011644:	370c      	adds	r7, #12
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr
 801164e:	bf00      	nop
 8011650:	e000e100 	.word	0xe000e100

08011654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	4603      	mov	r3, r0
 801165c:	6039      	str	r1, [r7, #0]
 801165e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011664:	2b00      	cmp	r3, #0
 8011666:	db0a      	blt.n	801167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	b2da      	uxtb	r2, r3
 801166c:	490c      	ldr	r1, [pc, #48]	@ (80116a0 <__NVIC_SetPriority+0x4c>)
 801166e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011672:	0112      	lsls	r2, r2, #4
 8011674:	b2d2      	uxtb	r2, r2
 8011676:	440b      	add	r3, r1
 8011678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801167c:	e00a      	b.n	8011694 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	b2da      	uxtb	r2, r3
 8011682:	4908      	ldr	r1, [pc, #32]	@ (80116a4 <__NVIC_SetPriority+0x50>)
 8011684:	88fb      	ldrh	r3, [r7, #6]
 8011686:	f003 030f 	and.w	r3, r3, #15
 801168a:	3b04      	subs	r3, #4
 801168c:	0112      	lsls	r2, r2, #4
 801168e:	b2d2      	uxtb	r2, r2
 8011690:	440b      	add	r3, r1
 8011692:	761a      	strb	r2, [r3, #24]
}
 8011694:	bf00      	nop
 8011696:	370c      	adds	r7, #12
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr
 80116a0:	e000e100 	.word	0xe000e100
 80116a4:	e000ed00 	.word	0xe000ed00

080116a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80116a8:	b480      	push	{r7}
 80116aa:	b089      	sub	sp, #36	@ 0x24
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f003 0307 	and.w	r3, r3, #7
 80116ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	f1c3 0307 	rsb	r3, r3, #7
 80116c2:	2b04      	cmp	r3, #4
 80116c4:	bf28      	it	cs
 80116c6:	2304      	movcs	r3, #4
 80116c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80116ca:	69fb      	ldr	r3, [r7, #28]
 80116cc:	3304      	adds	r3, #4
 80116ce:	2b06      	cmp	r3, #6
 80116d0:	d902      	bls.n	80116d8 <NVIC_EncodePriority+0x30>
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	3b03      	subs	r3, #3
 80116d6:	e000      	b.n	80116da <NVIC_EncodePriority+0x32>
 80116d8:	2300      	movs	r3, #0
 80116da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80116dc:	f04f 32ff 	mov.w	r2, #4294967295
 80116e0:	69bb      	ldr	r3, [r7, #24]
 80116e2:	fa02 f303 	lsl.w	r3, r2, r3
 80116e6:	43da      	mvns	r2, r3
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	401a      	ands	r2, r3
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80116f0:	f04f 31ff 	mov.w	r1, #4294967295
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	fa01 f303 	lsl.w	r3, r1, r3
 80116fa:	43d9      	mvns	r1, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011700:	4313      	orrs	r3, r2
         );
}
 8011702:	4618      	mov	r0, r3
 8011704:	3724      	adds	r7, #36	@ 0x24
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801170e:	b580      	push	{r7, lr}
 8011710:	b082      	sub	sp, #8
 8011712:	af00      	add	r7, sp, #0
 8011714:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff ff4c 	bl	80115b4 <__NVIC_SetPriorityGrouping>
}
 801171c:	bf00      	nop
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b086      	sub	sp, #24
 8011728:	af00      	add	r7, sp, #0
 801172a:	4603      	mov	r3, r0
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	607a      	str	r2, [r7, #4]
 8011730:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011732:	f7ff ff63 	bl	80115fc <__NVIC_GetPriorityGrouping>
 8011736:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011738:	687a      	ldr	r2, [r7, #4]
 801173a:	68b9      	ldr	r1, [r7, #8]
 801173c:	6978      	ldr	r0, [r7, #20]
 801173e:	f7ff ffb3 	bl	80116a8 <NVIC_EncodePriority>
 8011742:	4602      	mov	r2, r0
 8011744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011748:	4611      	mov	r1, r2
 801174a:	4618      	mov	r0, r3
 801174c:	f7ff ff82 	bl	8011654 <__NVIC_SetPriority>
}
 8011750:	bf00      	nop
 8011752:	3718      	adds	r7, #24
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}

08011758 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	4603      	mov	r3, r0
 8011760:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011766:	4618      	mov	r0, r3
 8011768:	f7ff ff56 	bl	8011618 <__NVIC_EnableIRQ>
}
 801176c:	bf00      	nop
 801176e:	3708      	adds	r7, #8
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	3b01      	subs	r3, #1
 8011780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011784:	d301      	bcc.n	801178a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8011786:	2301      	movs	r3, #1
 8011788:	e00d      	b.n	80117a6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 801178a:	4a0a      	ldr	r2, [pc, #40]	@ (80117b4 <HAL_SYSTICK_Config+0x40>)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	3b01      	subs	r3, #1
 8011790:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8011792:	4b08      	ldr	r3, [pc, #32]	@ (80117b4 <HAL_SYSTICK_Config+0x40>)
 8011794:	2200      	movs	r2, #0
 8011796:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8011798:	4b06      	ldr	r3, [pc, #24]	@ (80117b4 <HAL_SYSTICK_Config+0x40>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	4a05      	ldr	r2, [pc, #20]	@ (80117b4 <HAL_SYSTICK_Config+0x40>)
 801179e:	f043 0303 	orr.w	r3, r3, #3
 80117a2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80117a4:	2300      	movs	r3, #0
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	370c      	adds	r7, #12
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr
 80117b2:	bf00      	nop
 80117b4:	e000e010 	.word	0xe000e010

080117b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2b04      	cmp	r3, #4
 80117c4:	d844      	bhi.n	8011850 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80117c6:	a201      	add	r2, pc, #4	@ (adr r2, 80117cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80117c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117cc:	080117ef 	.word	0x080117ef
 80117d0:	0801180d 	.word	0x0801180d
 80117d4:	0801182f 	.word	0x0801182f
 80117d8:	08011851 	.word	0x08011851
 80117dc:	080117e1 	.word	0x080117e1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80117e0:	4b1f      	ldr	r3, [pc, #124]	@ (8011860 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4a1e      	ldr	r2, [pc, #120]	@ (8011860 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80117e6:	f043 0304 	orr.w	r3, r3, #4
 80117ea:	6013      	str	r3, [r2, #0]
      break;
 80117ec:	e031      	b.n	8011852 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80117ee:	4b1c      	ldr	r3, [pc, #112]	@ (8011860 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	4a1b      	ldr	r2, [pc, #108]	@ (8011860 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80117f4:	f023 0304 	bic.w	r3, r3, #4
 80117f8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80117fa:	4b1a      	ldr	r3, [pc, #104]	@ (8011864 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80117fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011800:	4a18      	ldr	r2, [pc, #96]	@ (8011864 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8011802:	f023 030c 	bic.w	r3, r3, #12
 8011806:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 801180a:	e022      	b.n	8011852 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 801180c:	4b14      	ldr	r3, [pc, #80]	@ (8011860 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4a13      	ldr	r2, [pc, #76]	@ (8011860 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8011812:	f023 0304 	bic.w	r3, r3, #4
 8011816:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8011818:	4b12      	ldr	r3, [pc, #72]	@ (8011864 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 801181a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801181e:	f023 030c 	bic.w	r3, r3, #12
 8011822:	4a10      	ldr	r2, [pc, #64]	@ (8011864 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8011824:	f043 0304 	orr.w	r3, r3, #4
 8011828:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 801182c:	e011      	b.n	8011852 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 801182e:	4b0c      	ldr	r3, [pc, #48]	@ (8011860 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4a0b      	ldr	r2, [pc, #44]	@ (8011860 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8011834:	f023 0304 	bic.w	r3, r3, #4
 8011838:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 801183a:	4b0a      	ldr	r3, [pc, #40]	@ (8011864 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 801183c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011840:	f023 030c 	bic.w	r3, r3, #12
 8011844:	4a07      	ldr	r2, [pc, #28]	@ (8011864 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8011846:	f043 0308 	orr.w	r3, r3, #8
 801184a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 801184e:	e000      	b.n	8011852 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8011850:	bf00      	nop
  }
}
 8011852:	bf00      	nop
 8011854:	370c      	adds	r7, #12
 8011856:	46bd      	mov	sp, r7
 8011858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185c:	4770      	bx	lr
 801185e:	bf00      	nop
 8011860:	e000e010 	.word	0xe000e010
 8011864:	44020c00 	.word	0x44020c00

08011868 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 801186e:	4b17      	ldr	r3, [pc, #92]	@ (80118cc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	f003 0304 	and.w	r3, r3, #4
 8011876:	2b00      	cmp	r3, #0
 8011878:	d002      	beq.n	8011880 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 801187a:	2304      	movs	r3, #4
 801187c:	607b      	str	r3, [r7, #4]
 801187e:	e01e      	b.n	80118be <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8011880:	4b13      	ldr	r3, [pc, #76]	@ (80118d0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8011882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011886:	f003 030c 	and.w	r3, r3, #12
 801188a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	2b08      	cmp	r3, #8
 8011890:	d00f      	beq.n	80118b2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	2b08      	cmp	r3, #8
 8011896:	d80f      	bhi.n	80118b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d003      	beq.n	80118a6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	2b04      	cmp	r3, #4
 80118a2:	d003      	beq.n	80118ac <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80118a4:	e008      	b.n	80118b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80118a6:	2300      	movs	r3, #0
 80118a8:	607b      	str	r3, [r7, #4]
        break;
 80118aa:	e008      	b.n	80118be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80118ac:	2301      	movs	r3, #1
 80118ae:	607b      	str	r3, [r7, #4]
        break;
 80118b0:	e005      	b.n	80118be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80118b2:	2302      	movs	r3, #2
 80118b4:	607b      	str	r3, [r7, #4]
        break;
 80118b6:	e002      	b.n	80118be <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80118b8:	2300      	movs	r3, #0
 80118ba:	607b      	str	r3, [r7, #4]
        break;
 80118bc:	bf00      	nop
    }
  }
  return systick_source;
 80118be:	687b      	ldr	r3, [r7, #4]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr
 80118cc:	e000e010 	.word	0xe000e010
 80118d0:	44020c00 	.word	0x44020c00

080118d4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80118dc:	f7ff fe3a 	bl	8011554 <HAL_GetTick>
 80118e0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d101      	bne.n	80118ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80118e8:	2301      	movs	r3, #1
 80118ea:	e06b      	b.n	80119c4 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80118f2:	b2db      	uxtb	r3, r3
 80118f4:	2b02      	cmp	r3, #2
 80118f6:	d008      	beq.n	801190a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2220      	movs	r2, #32
 80118fc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2200      	movs	r2, #0
 8011902:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8011906:	2301      	movs	r3, #1
 8011908:	e05c      	b.n	80119c4 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	695a      	ldr	r2, [r3, #20]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f042 0204 	orr.w	r2, r2, #4
 8011918:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2205      	movs	r2, #5
 801191e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8011922:	e020      	b.n	8011966 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8011924:	f7ff fe16 	bl	8011554 <HAL_GetTick>
 8011928:	4602      	mov	r2, r0
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	1ad3      	subs	r3, r2, r3
 801192e:	2b05      	cmp	r3, #5
 8011930:	d919      	bls.n	8011966 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011936:	f043 0210 	orr.w	r2, r3, #16
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2203      	movs	r2, #3
 8011942:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801194a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801194e:	2b00      	cmp	r3, #0
 8011950:	d003      	beq.n	801195a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011956:	2201      	movs	r2, #1
 8011958:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2200      	movs	r2, #0
 801195e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8011962:	2301      	movs	r3, #1
 8011964:	e02e      	b.n	80119c4 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	691b      	ldr	r3, [r3, #16]
 801196c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011970:	2b00      	cmp	r3, #0
 8011972:	d0d7      	beq.n	8011924 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	695a      	ldr	r2, [r3, #20]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	f042 0202 	orr.w	r2, r2, #2
 8011982:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2204      	movs	r2, #4
 8011988:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8011994:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2201      	movs	r2, #1
 801199a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d007      	beq.n	80119ba <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119ae:	2201      	movs	r2, #1
 80119b0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	2200      	movs	r2, #0
 80119b8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2200      	movs	r2, #0
 80119be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80119c2:	2300      	movs	r3, #0
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3710      	adds	r7, #16
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d101      	bne.n	80119de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80119da:	2301      	movs	r3, #1
 80119dc:	e019      	b.n	8011a12 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	2b02      	cmp	r3, #2
 80119e8:	d004      	beq.n	80119f4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2220      	movs	r2, #32
 80119ee:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80119f0:	2301      	movs	r3, #1
 80119f2:	e00e      	b.n	8011a12 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2204      	movs	r2, #4
 80119f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	695b      	ldr	r3, [r3, #20]
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	6812      	ldr	r2, [r2, #0]
 8011a06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011a0a:	f043 0304 	orr.w	r3, r3, #4
 8011a0e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8011a10:	2300      	movs	r3, #0
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	370c      	adds	r7, #12
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr
	...

08011a20 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b087      	sub	sp, #28
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8011a2e:	e136      	b.n	8011c9e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	2101      	movs	r1, #1
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	fa01 f303 	lsl.w	r3, r1, r3
 8011a3c:	4013      	ands	r3, r2
 8011a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	f000 8128 	beq.w	8011c98 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	2b02      	cmp	r3, #2
 8011a4e:	d003      	beq.n	8011a58 <HAL_GPIO_Init+0x38>
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	2b12      	cmp	r3, #18
 8011a56:	d125      	bne.n	8011aa4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	08da      	lsrs	r2, r3, #3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	3208      	adds	r2, #8
 8011a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a64:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	f003 0307 	and.w	r3, r3, #7
 8011a6c:	009b      	lsls	r3, r3, #2
 8011a6e:	220f      	movs	r2, #15
 8011a70:	fa02 f303 	lsl.w	r3, r2, r3
 8011a74:	43db      	mvns	r3, r3
 8011a76:	697a      	ldr	r2, [r7, #20]
 8011a78:	4013      	ands	r3, r2
 8011a7a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	691b      	ldr	r3, [r3, #16]
 8011a80:	f003 020f 	and.w	r2, r3, #15
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	f003 0307 	and.w	r3, r3, #7
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a90:	697a      	ldr	r2, [r7, #20]
 8011a92:	4313      	orrs	r3, r2
 8011a94:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	08da      	lsrs	r2, r3, #3
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	3208      	adds	r2, #8
 8011a9e:	6979      	ldr	r1, [r7, #20]
 8011aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	005b      	lsls	r3, r3, #1
 8011aae:	2203      	movs	r2, #3
 8011ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8011ab4:	43db      	mvns	r3, r3
 8011ab6:	697a      	ldr	r2, [r7, #20]
 8011ab8:	4013      	ands	r3, r2
 8011aba:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	f003 0203 	and.w	r2, r3, #3
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	005b      	lsls	r3, r3, #1
 8011ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8011acc:	697a      	ldr	r2, [r7, #20]
 8011ace:	4313      	orrs	r3, r2
 8011ad0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	697a      	ldr	r2, [r7, #20]
 8011ad6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d00b      	beq.n	8011af8 <HAL_GPIO_Init+0xd8>
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	2b02      	cmp	r3, #2
 8011ae6:	d007      	beq.n	8011af8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011aec:	2b11      	cmp	r3, #17
 8011aee:	d003      	beq.n	8011af8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	2b12      	cmp	r3, #18
 8011af6:	d130      	bne.n	8011b5a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	689b      	ldr	r3, [r3, #8]
 8011afc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	005b      	lsls	r3, r3, #1
 8011b02:	2203      	movs	r2, #3
 8011b04:	fa02 f303 	lsl.w	r3, r2, r3
 8011b08:	43db      	mvns	r3, r3
 8011b0a:	697a      	ldr	r2, [r7, #20]
 8011b0c:	4013      	ands	r3, r2
 8011b0e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	68da      	ldr	r2, [r3, #12]
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	005b      	lsls	r3, r3, #1
 8011b18:	fa02 f303 	lsl.w	r3, r2, r3
 8011b1c:	697a      	ldr	r2, [r7, #20]
 8011b1e:	4313      	orrs	r3, r2
 8011b20:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	697a      	ldr	r2, [r7, #20]
 8011b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8011b2e:	2201      	movs	r2, #1
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	fa02 f303 	lsl.w	r3, r2, r3
 8011b36:	43db      	mvns	r3, r3
 8011b38:	697a      	ldr	r2, [r7, #20]
 8011b3a:	4013      	ands	r3, r2
 8011b3c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	091b      	lsrs	r3, r3, #4
 8011b44:	f003 0201 	and.w	r2, r3, #1
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8011b4e:	697a      	ldr	r2, [r7, #20]
 8011b50:	4313      	orrs	r3, r2
 8011b52:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	697a      	ldr	r2, [r7, #20]
 8011b58:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	2b03      	cmp	r3, #3
 8011b60:	d017      	beq.n	8011b92 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	005b      	lsls	r3, r3, #1
 8011b6c:	2203      	movs	r2, #3
 8011b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b72:	43db      	mvns	r3, r3
 8011b74:	697a      	ldr	r2, [r7, #20]
 8011b76:	4013      	ands	r3, r2
 8011b78:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	689a      	ldr	r2, [r3, #8]
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	005b      	lsls	r3, r3, #1
 8011b82:	fa02 f303 	lsl.w	r3, r2, r3
 8011b86:	697a      	ldr	r2, [r7, #20]
 8011b88:	4313      	orrs	r3, r2
 8011b8a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	697a      	ldr	r2, [r7, #20]
 8011b90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d07c      	beq.n	8011c98 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8011b9e:	4a47      	ldr	r2, [pc, #284]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	089b      	lsrs	r3, r3, #2
 8011ba4:	3318      	adds	r3, #24
 8011ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011baa:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	f003 0303 	and.w	r3, r3, #3
 8011bb2:	00db      	lsls	r3, r3, #3
 8011bb4:	220f      	movs	r2, #15
 8011bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8011bba:	43db      	mvns	r3, r3
 8011bbc:	697a      	ldr	r2, [r7, #20]
 8011bbe:	4013      	ands	r3, r2
 8011bc0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	0a9a      	lsrs	r2, r3, #10
 8011bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8011cc0 <HAL_GPIO_Init+0x2a0>)
 8011bc8:	4013      	ands	r3, r2
 8011bca:	693a      	ldr	r2, [r7, #16]
 8011bcc:	f002 0203 	and.w	r2, r2, #3
 8011bd0:	00d2      	lsls	r2, r2, #3
 8011bd2:	4093      	lsls	r3, r2
 8011bd4:	697a      	ldr	r2, [r7, #20]
 8011bd6:	4313      	orrs	r3, r2
 8011bd8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8011bda:	4938      	ldr	r1, [pc, #224]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	089b      	lsrs	r3, r3, #2
 8011be0:	3318      	adds	r3, #24
 8011be2:	697a      	ldr	r2, [r7, #20]
 8011be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8011be8:	4b34      	ldr	r3, [pc, #208]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	43db      	mvns	r3, r3
 8011bf2:	697a      	ldr	r2, [r7, #20]
 8011bf4:	4013      	ands	r3, r2
 8011bf6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d003      	beq.n	8011c0c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8011c04:	697a      	ldr	r2, [r7, #20]
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	4313      	orrs	r3, r2
 8011c0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8011c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8011c12:	4b2a      	ldr	r3, [pc, #168]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	43db      	mvns	r3, r3
 8011c1c:	697a      	ldr	r2, [r7, #20]
 8011c1e:	4013      	ands	r3, r2
 8011c20:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8011c2e:	697a      	ldr	r2, [r7, #20]
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	4313      	orrs	r3, r2
 8011c34:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8011c36:	4a21      	ldr	r2, [pc, #132]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8011c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c42:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	43db      	mvns	r3, r3
 8011c48:	697a      	ldr	r2, [r7, #20]
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d003      	beq.n	8011c62 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8011c5a:	697a      	ldr	r2, [r7, #20]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8011c62:	4a16      	ldr	r2, [pc, #88]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8011c6a:	4b14      	ldr	r3, [pc, #80]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011c70:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	43db      	mvns	r3, r3
 8011c76:	697a      	ldr	r2, [r7, #20]
 8011c78:	4013      	ands	r3, r2
 8011c7a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d003      	beq.n	8011c90 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8011c88:	697a      	ldr	r2, [r7, #20]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	4313      	orrs	r3, r2
 8011c8e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8011c90:	4a0a      	ldr	r2, [pc, #40]	@ (8011cbc <HAL_GPIO_Init+0x29c>)
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	f47f aec1 	bne.w	8011a30 <HAL_GPIO_Init+0x10>
  }
}
 8011cae:	bf00      	nop
 8011cb0:	bf00      	nop
 8011cb2:	371c      	adds	r7, #28
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr
 8011cbc:	44022000 	.word	0x44022000
 8011cc0:	002f7f7f 	.word	0x002f7f7f

08011cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b085      	sub	sp, #20
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	460b      	mov	r3, r1
 8011cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	691a      	ldr	r2, [r3, #16]
 8011cd4:	887b      	ldrh	r3, [r7, #2]
 8011cd6:	4013      	ands	r3, r2
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d002      	beq.n	8011ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	73fb      	strb	r3, [r7, #15]
 8011ce0:	e001      	b.n	8011ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3714      	adds	r7, #20
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b083      	sub	sp, #12
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	460b      	mov	r3, r1
 8011cfe:	807b      	strh	r3, [r7, #2]
 8011d00:	4613      	mov	r3, r2
 8011d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011d04:	787b      	ldrb	r3, [r7, #1]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d003      	beq.n	8011d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011d0a:	887a      	ldrh	r2, [r7, #2]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011d10:	e002      	b.n	8011d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011d12:	887a      	ldrh	r2, [r7, #2]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011d18:	bf00      	nop
 8011d1a:	370c      	adds	r7, #12
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr

08011d24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	695b      	ldr	r3, [r3, #20]
 8011d34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011d36:	887a      	ldrh	r2, [r7, #2]
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	4013      	ands	r3, r2
 8011d3c:	041a      	lsls	r2, r3, #16
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	43d9      	mvns	r1, r3
 8011d42:	887b      	ldrh	r3, [r7, #2]
 8011d44:	400b      	ands	r3, r1
 8011d46:	431a      	orrs	r2, r3
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	619a      	str	r2, [r3, #24]
}
 8011d4c:	bf00      	nop
 8011d4e:	3714      	adds	r7, #20
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	4603      	mov	r3, r0
 8011d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8011d62:	4b0f      	ldr	r3, [pc, #60]	@ (8011da0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8011d64:	68da      	ldr	r2, [r3, #12]
 8011d66:	88fb      	ldrh	r3, [r7, #6]
 8011d68:	4013      	ands	r3, r2
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d006      	beq.n	8011d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8011d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8011da0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8011d70:	88fb      	ldrh	r3, [r7, #6]
 8011d72:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8011d74:	88fb      	ldrh	r3, [r7, #6]
 8011d76:	4618      	mov	r0, r3
 8011d78:	f000 f814 	bl	8011da4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8011d7c:	4b08      	ldr	r3, [pc, #32]	@ (8011da0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8011d7e:	691a      	ldr	r2, [r3, #16]
 8011d80:	88fb      	ldrh	r3, [r7, #6]
 8011d82:	4013      	ands	r3, r2
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d006      	beq.n	8011d96 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8011d88:	4a05      	ldr	r2, [pc, #20]	@ (8011da0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8011d8a:	88fb      	ldrh	r3, [r7, #6]
 8011d8c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8011d8e:	88fb      	ldrh	r3, [r7, #6]
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fe fd2d 	bl	80107f0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8011d96:	bf00      	nop
 8011d98:	3708      	adds	r7, #8
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	44022000 	.word	0x44022000

08011da4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	4603      	mov	r3, r0
 8011dac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8011dae:	bf00      	nop
 8011db0:	370c      	adds	r7, #12
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr
	...

08011dbc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b085      	sub	sp, #20
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8011dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8011df8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	f003 0301 	and.w	r3, r3, #1
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d002      	beq.n	8011dda <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	73fb      	strb	r3, [r7, #15]
 8011dd8:	e007      	b.n	8011dea <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8011dda:	4b07      	ldr	r3, [pc, #28]	@ (8011df8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f023 0204 	bic.w	r2, r3, #4
 8011de2:	4905      	ldr	r1, [pc, #20]	@ (8011df8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	4313      	orrs	r3, r2
 8011de8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8011dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3714      	adds	r7, #20
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr
 8011df8:	40030400 	.word	0x40030400

08011dfc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8011e00:	4b05      	ldr	r3, [pc, #20]	@ (8011e18 <HAL_ICACHE_Enable+0x1c>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	4a04      	ldr	r2, [pc, #16]	@ (8011e18 <HAL_ICACHE_Enable+0x1c>)
 8011e06:	f043 0301 	orr.w	r3, r3, #1
 8011e0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	46bd      	mov	sp, r7
 8011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e16:	4770      	bx	lr
 8011e18:	40030400 	.word	0x40030400

08011e1c <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d101      	bne.n	8011e32 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	e037      	b.n	8011ea2 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d106      	bne.n	8011e4c <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8011e46:	68f8      	ldr	r0, [r7, #12]
 8011e48:	f7ff f8ee 	bl	8011028 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	3304      	adds	r3, #4
 8011e54:	4619      	mov	r1, r3
 8011e56:	4610      	mov	r0, r2
 8011e58:	f00a f94e 	bl	801c0f8 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	6818      	ldr	r0, [r3, #0]
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	461a      	mov	r2, r3
 8011e66:	68b9      	ldr	r1, [r7, #8]
 8011e68:	f00a f970 	bl	801c14c <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	6818      	ldr	r0, [r3, #0]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	461a      	mov	r2, r3
 8011e76:	6879      	ldr	r1, [r7, #4]
 8011e78:	f00a f985 	bl	801c186 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	f042 0204 	orr.w	r2, r2, #4
 8011e8a:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8011e8c:	4b07      	ldr	r3, [pc, #28]	@ (8011eac <HAL_NAND_Init+0x90>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	4a06      	ldr	r2, [pc, #24]	@ (8011eac <HAL_NAND_Init+0x90>)
 8011e92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011e96:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8011ea0:	2300      	movs	r3, #0
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3710      	adds	r7, #16
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	47000400 	.word	0x47000400

08011eb0 <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	2b02      	cmp	r3, #2
 8011ec2:	d101      	bne.n	8011ec8 <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 8011ec4:	2302      	movs	r3, #2
 8011ec6:	e027      	b.n	8011f18 <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011ece:	b2db      	uxtb	r3, r3
 8011ed0:	2b01      	cmp	r3, #1
 8011ed2:	d120      	bne.n	8011f16 <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d101      	bne.n	8011ee2 <HAL_NAND_Reset+0x32>
 8011ede:	2302      	movs	r3, #2
 8011ee0:	e01a      	b.n	8011f18 <HAL_NAND_Reset+0x68>
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2201      	movs	r2, #1
 8011ee6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2202      	movs	r2, #2
 8011eee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8011ef2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011ef6:	60fb      	str	r3, [r7, #12]

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011efe:	22ff      	movs	r2, #255	@ 0xff
 8011f00:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2201      	movs	r2, #1
 8011f06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011f12:	2300      	movs	r3, #0
 8011f14:	e000      	b.n	8011f18 <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 8011f16:	2301      	movs	r3, #1

}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3714      	adds	r7, #20
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr

08011f24 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b08c      	sub	sp, #48	@ 0x30
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
 8011f30:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 8011f32:	2300      	movs	r3, #0
 8011f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011f44:	b2db      	uxtb	r3, r3
 8011f46:	2b02      	cmp	r3, #2
 8011f48:	d101      	bne.n	8011f4e <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8011f4a:	2302      	movs	r3, #2
 8011f4c:	e140      	b.n	80121d0 <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	2b01      	cmp	r3, #1
 8011f58:	f040 8139 	bne.w	80121ce <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d101      	bne.n	8011f6a <HAL_NAND_Read_Page_8b+0x46>
 8011f66:	2302      	movs	r3, #2
 8011f68:	e132      	b.n	80121d0 <HAL_NAND_Read_Page_8b+0x2ac>
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2202      	movs	r2, #2
 8011f76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8011f7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011f7e:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	881b      	ldrh	r3, [r3, #0]
 8011f84:	4619      	mov	r1, r3
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	889b      	ldrh	r3, [r3, #4]
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	885b      	ldrh	r3, [r3, #2]
 8011f90:	4618      	mov	r0, r3
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f96:	fb00 f303 	mul.w	r3, r0, r3
 8011f9a:	4413      	add	r3, r2
 8011f9c:	68fa      	ldr	r2, [r7, #12]
 8011f9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011fa0:	fb02 f303 	mul.w	r3, r2, r3
 8011fa4:	440b      	add	r3, r1
 8011fa6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8011fa8:	e0fa      	b.n	80121a0 <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8011faa:	69bb      	ldr	r3, [r7, #24]
 8011fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011fb4:	f3bf 8f4f 	dsb	sy
}
 8011fb8:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011fc2:	d848      	bhi.n	8012056 <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fc8:	68fa      	ldr	r2, [r7, #12]
 8011fca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011fcc:	fb02 f303 	mul.w	r3, r2, r3
 8011fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011fd4:	d21a      	bcs.n	801200c <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8011fd6:	69bb      	ldr	r3, [r7, #24]
 8011fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011fdc:	2200      	movs	r2, #0
 8011fde:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011fe0:	f3bf 8f4f 	dsb	sy
}
 8011fe4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fee:	b2d2      	uxtb	r2, r2
 8011ff0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8011ff2:	f3bf 8f4f 	dsb	sy
}
 8011ff6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8011ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ffa:	0a1a      	lsrs	r2, r3, #8
 8011ffc:	69bb      	ldr	r3, [r7, #24]
 8011ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012002:	b2d2      	uxtb	r2, r2
 8012004:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012006:	f3bf 8f4f 	dsb	sy
}
 801200a:	e07d      	b.n	8012108 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012012:	2200      	movs	r2, #0
 8012014:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012016:	f3bf 8f4f 	dsb	sy
}
 801201a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 801201c:	69bb      	ldr	r3, [r7, #24]
 801201e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012024:	b2d2      	uxtb	r2, r2
 8012026:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012028:	f3bf 8f4f 	dsb	sy
}
 801202c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 801202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012030:	0a1a      	lsrs	r2, r3, #8
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012038:	b2d2      	uxtb	r2, r2
 801203a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801203c:	f3bf 8f4f 	dsb	sy
}
 8012040:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8012042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012044:	0c1a      	lsrs	r2, r3, #16
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801204c:	b2d2      	uxtb	r2, r2
 801204e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012050:	f3bf 8f4f 	dsb	sy
}
 8012054:	e058      	b.n	8012108 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801205a:	68fa      	ldr	r2, [r7, #12]
 801205c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801205e:	fb02 f303 	mul.w	r3, r2, r3
 8012062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012066:	d222      	bcs.n	80120ae <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012068:	69bb      	ldr	r3, [r7, #24]
 801206a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801206e:	2200      	movs	r2, #0
 8012070:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012072:	f3bf 8f4f 	dsb	sy
}
 8012076:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801207e:	2200      	movs	r2, #0
 8012080:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012082:	f3bf 8f4f 	dsb	sy
}
 8012086:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012088:	69bb      	ldr	r3, [r7, #24]
 801208a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801208e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012090:	b2d2      	uxtb	r2, r2
 8012092:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012094:	f3bf 8f4f 	dsb	sy
}
 8012098:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 801209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801209c:	0a1a      	lsrs	r2, r3, #8
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120a4:	b2d2      	uxtb	r2, r2
 80120a6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80120a8:	f3bf 8f4f 	dsb	sy
}
 80120ac:	e02c      	b.n	8012108 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120b4:	2200      	movs	r2, #0
 80120b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80120b8:	f3bf 8f4f 	dsb	sy
}
 80120bc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120c4:	2200      	movs	r2, #0
 80120c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80120c8:	f3bf 8f4f 	dsb	sy
}
 80120cc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120d6:	b2d2      	uxtb	r2, r2
 80120d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80120da:	f3bf 8f4f 	dsb	sy
}
 80120de:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80120e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e2:	0a1a      	lsrs	r2, r3, #8
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120ea:	b2d2      	uxtb	r2, r2
 80120ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80120ee:	f3bf 8f4f 	dsb	sy
}
 80120f2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80120f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120f6:	0c1a      	lsrs	r2, r3, #16
 80120f8:	69bb      	ldr	r3, [r7, #24]
 80120fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120fe:	b2d2      	uxtb	r2, r2
 8012100:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012102:	f3bf 8f4f 	dsb	sy
}
 8012106:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8012108:	69bb      	ldr	r3, [r7, #24]
 801210a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801210e:	2230      	movs	r2, #48	@ 0x30
 8012110:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012112:	f3bf 8f4f 	dsb	sy
}
 8012116:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801211e:	2b01      	cmp	r3, #1
 8012120:	d123      	bne.n	801216a <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8012122:	f7ff fa17 	bl	8011554 <HAL_GetTick>
 8012126:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8012128:	e011      	b.n	801214e <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 801212a:	f7ff fa13 	bl	8011554 <HAL_GetTick>
 801212e:	4602      	mov	r2, r0
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	1ad3      	subs	r3, r2, r3
 8012134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012138:	d909      	bls.n	801214e <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2203      	movs	r2, #3
 801213e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2200      	movs	r2, #0
 8012146:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 801214a:	2303      	movs	r3, #3
 801214c:	e040      	b.n	80121d0 <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 801214e:	68f8      	ldr	r0, [r7, #12]
 8012150:	f000 fd13 	bl	8012b7a <HAL_NAND_Read_Status>
 8012154:	4603      	mov	r3, r0
 8012156:	2b40      	cmp	r3, #64	@ 0x40
 8012158:	d1e7      	bne.n	801212a <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 801215a:	69bb      	ldr	r3, [r7, #24]
 801215c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012160:	2200      	movs	r2, #0
 8012162:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012164:	f3bf 8f4f 	dsb	sy
}
 8012168:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 801216a:	2300      	movs	r3, #0
 801216c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801216e:	e009      	b.n	8012184 <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	781a      	ldrb	r2, [r3, #0]
 8012174:	69fb      	ldr	r3, [r7, #28]
 8012176:	701a      	strb	r2, [r3, #0]
        buff++;
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	3301      	adds	r3, #1
 801217c:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 801217e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012180:	3301      	adds	r3, #1
 8012182:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801218a:	429a      	cmp	r2, r3
 801218c:	d3f0      	bcc.n	8012170 <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 801218e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012190:	3301      	adds	r3, #1
 8012192:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 8012194:	6a3b      	ldr	r3, [r7, #32]
 8012196:	3b01      	subs	r3, #1
 8012198:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 801219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801219c:	3301      	adds	r3, #1
 801219e:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80121a0:	6a3b      	ldr	r3, [r7, #32]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d009      	beq.n	80121ba <HAL_NAND_Read_Page_8b+0x296>
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121aa:	68fa      	ldr	r2, [r7, #12]
 80121ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80121ae:	fb02 f303 	mul.w	r3, r2, r3
 80121b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121b4:	429a      	cmp	r2, r3
 80121b6:	f4ff aef8 	bcc.w	8011faa <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2201      	movs	r2, #1
 80121be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2200      	movs	r2, #0
 80121c6:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80121ca:	2300      	movs	r3, #0
 80121cc:	e000      	b.n	80121d0 <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 80121ce:	2301      	movs	r3, #1
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3730      	adds	r7, #48	@ 0x30
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b08c      	sub	sp, #48	@ 0x30
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
 80121e4:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 80121e6:	2300      	movs	r3, #0
 80121e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	2b02      	cmp	r3, #2
 80121fc:	d101      	bne.n	8012202 <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 80121fe:	2302      	movs	r3, #2
 8012200:	e13e      	b.n	8012480 <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012208:	b2db      	uxtb	r3, r3
 801220a:	2b01      	cmp	r3, #1
 801220c:	f040 8137 	bne.w	801247e <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012216:	2b01      	cmp	r3, #1
 8012218:	d101      	bne.n	801221e <HAL_NAND_Write_Page_8b+0x46>
 801221a:	2302      	movs	r3, #2
 801221c:	e130      	b.n	8012480 <HAL_NAND_Write_Page_8b+0x2a8>
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	2201      	movs	r2, #1
 8012222:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2202      	movs	r2, #2
 801222a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 801222e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012232:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	881b      	ldrh	r3, [r3, #0]
 8012238:	4619      	mov	r1, r3
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	889b      	ldrh	r3, [r3, #4]
 801223e:	461a      	mov	r2, r3
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	885b      	ldrh	r3, [r3, #2]
 8012244:	4618      	mov	r0, r3
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801224a:	fb00 f303 	mul.w	r3, r0, r3
 801224e:	4413      	add	r3, r2
 8012250:	68fa      	ldr	r2, [r7, #12]
 8012252:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012254:	fb02 f303 	mul.w	r3, r2, r3
 8012258:	440b      	add	r3, r1
 801225a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 801225c:	e0f8      	b.n	8012450 <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012264:	2200      	movs	r2, #0
 8012266:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012268:	f3bf 8f4f 	dsb	sy
}
 801226c:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 801226e:	69bb      	ldr	r3, [r7, #24]
 8012270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012274:	2280      	movs	r2, #128	@ 0x80
 8012276:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012278:	f3bf 8f4f 	dsb	sy
}
 801227c:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012286:	d848      	bhi.n	801231a <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801228c:	68fa      	ldr	r2, [r7, #12]
 801228e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012290:	fb02 f303 	mul.w	r3, r2, r3
 8012294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012298:	d21a      	bcs.n	80122d0 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 801229a:	69bb      	ldr	r3, [r7, #24]
 801229c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122a0:	2200      	movs	r2, #0
 80122a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122a4:	f3bf 8f4f 	dsb	sy
}
 80122a8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122b2:	b2d2      	uxtb	r2, r2
 80122b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122b6:	f3bf 8f4f 	dsb	sy
}
 80122ba:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80122bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122be:	0a1a      	lsrs	r2, r3, #8
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122c6:	b2d2      	uxtb	r2, r2
 80122c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122ca:	f3bf 8f4f 	dsb	sy
}
 80122ce:	e07d      	b.n	80123cc <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122d6:	2200      	movs	r2, #0
 80122d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122da:	f3bf 8f4f 	dsb	sy
}
 80122de:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80122e0:	69bb      	ldr	r3, [r7, #24]
 80122e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122e8:	b2d2      	uxtb	r2, r2
 80122ea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80122ec:	f3bf 8f4f 	dsb	sy
}
 80122f0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80122f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f4:	0a1a      	lsrs	r2, r3, #8
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122fc:	b2d2      	uxtb	r2, r2
 80122fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012300:	f3bf 8f4f 	dsb	sy
}
 8012304:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8012306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012308:	0c1a      	lsrs	r2, r3, #16
 801230a:	69bb      	ldr	r3, [r7, #24]
 801230c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012310:	b2d2      	uxtb	r2, r2
 8012312:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012314:	f3bf 8f4f 	dsb	sy
}
 8012318:	e058      	b.n	80123cc <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801231e:	68fa      	ldr	r2, [r7, #12]
 8012320:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012322:	fb02 f303 	mul.w	r3, r2, r3
 8012326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801232a:	d222      	bcs.n	8012372 <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 801232c:	69bb      	ldr	r3, [r7, #24]
 801232e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012332:	2200      	movs	r2, #0
 8012334:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012336:	f3bf 8f4f 	dsb	sy
}
 801233a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 801233c:	69bb      	ldr	r3, [r7, #24]
 801233e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012342:	2200      	movs	r2, #0
 8012344:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012346:	f3bf 8f4f 	dsb	sy
}
 801234a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012354:	b2d2      	uxtb	r2, r2
 8012356:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012358:	f3bf 8f4f 	dsb	sy
}
 801235c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 801235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012360:	0a1a      	lsrs	r2, r3, #8
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012368:	b2d2      	uxtb	r2, r2
 801236a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801236c:	f3bf 8f4f 	dsb	sy
}
 8012370:	e02c      	b.n	80123cc <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012378:	2200      	movs	r2, #0
 801237a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801237c:	f3bf 8f4f 	dsb	sy
}
 8012380:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012388:	2200      	movs	r2, #0
 801238a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801238c:	f3bf 8f4f 	dsb	sy
}
 8012390:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801239a:	b2d2      	uxtb	r2, r2
 801239c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801239e:	f3bf 8f4f 	dsb	sy
}
 80123a2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80123a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a6:	0a1a      	lsrs	r2, r3, #8
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123ae:	b2d2      	uxtb	r2, r2
 80123b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80123b2:	f3bf 8f4f 	dsb	sy
}
 80123b6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80123b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ba:	0c1a      	lsrs	r2, r3, #16
 80123bc:	69bb      	ldr	r3, [r7, #24]
 80123be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123c2:	b2d2      	uxtb	r2, r2
 80123c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80123c6:	f3bf 8f4f 	dsb	sy
}
 80123ca:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80123cc:	2300      	movs	r3, #0
 80123ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80123d0:	e00c      	b.n	80123ec <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 80123d2:	69bb      	ldr	r3, [r7, #24]
 80123d4:	69fa      	ldr	r2, [r7, #28]
 80123d6:	7812      	ldrb	r2, [r2, #0]
 80123d8:	701a      	strb	r2, [r3, #0]
        buff++;
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	3301      	adds	r3, #1
 80123de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 80123e0:	f3bf 8f4f 	dsb	sy
}
 80123e4:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80123e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123e8:	3301      	adds	r3, #1
 80123ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d3ed      	bcc.n	80123d2 <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80123fc:	2210      	movs	r2, #16
 80123fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012400:	f3bf 8f4f 	dsb	sy
}
 8012404:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8012406:	f7ff f8a5 	bl	8011554 <HAL_GetTick>
 801240a:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 801240c:	e011      	b.n	8012432 <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 801240e:	f7ff f8a1 	bl	8011554 <HAL_GetTick>
 8012412:	4602      	mov	r2, r0
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801241c:	d909      	bls.n	8012432 <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	2203      	movs	r2, #3
 8012422:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2200      	movs	r2, #0
 801242a:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 801242e:	2303      	movs	r3, #3
 8012430:	e026      	b.n	8012480 <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8012432:	68f8      	ldr	r0, [r7, #12]
 8012434:	f000 fba1 	bl	8012b7a <HAL_NAND_Read_Status>
 8012438:	4603      	mov	r3, r0
 801243a:	2b40      	cmp	r3, #64	@ 0x40
 801243c:	d1e7      	bne.n	801240e <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 801243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012440:	3301      	adds	r3, #1
 8012442:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 8012444:	6a3b      	ldr	r3, [r7, #32]
 8012446:	3b01      	subs	r3, #1
 8012448:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 801244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801244c:	3301      	adds	r3, #1
 801244e:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8012450:	6a3b      	ldr	r3, [r7, #32]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d009      	beq.n	801246a <HAL_NAND_Write_Page_8b+0x292>
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801245a:	68fa      	ldr	r2, [r7, #12]
 801245c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801245e:	fb02 f303 	mul.w	r3, r2, r3
 8012462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012464:	429a      	cmp	r2, r3
 8012466:	f4ff aefa 	bcc.w	801225e <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2201      	movs	r2, #1
 801246e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2200      	movs	r2, #0
 8012476:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801247a:	2300      	movs	r3, #0
 801247c:	e000      	b.n	8012480 <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 801247e:	2301      	movs	r3, #1
}
 8012480:	4618      	mov	r0, r3
 8012482:	3730      	adds	r7, #48	@ 0x30
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <HAL_NAND_Read_SpareArea_8b>:
  * @param  NumSpareAreaToRead Number of spare area to read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                             uint8_t *pBuffer, uint32_t NumSpareAreaToRead)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b08c      	sub	sp, #48	@ 0x30
 801248c:	af00      	add	r7, sp, #0
 801248e:	60f8      	str	r0, [r7, #12]
 8012490:	60b9      	str	r1, [r7, #8]
 8012492:	607a      	str	r2, [r7, #4]
 8012494:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numsparearearead = 0U;
 8012496:	2300      	movs	r3, #0
 8012498:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaToRead;
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	2b02      	cmp	r3, #2
 80124ac:	d101      	bne.n	80124b2 <HAL_NAND_Read_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 80124ae:	2302      	movs	r3, #2
 80124b0:	e151      	b.n	8012756 <HAL_NAND_Read_SpareArea_8b+0x2ce>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	f040 814a 	bne.w	8012754 <HAL_NAND_Read_SpareArea_8b+0x2cc>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d101      	bne.n	80124ce <HAL_NAND_Read_SpareArea_8b+0x46>
 80124ca:	2302      	movs	r3, #2
 80124cc:	e143      	b.n	8012756 <HAL_NAND_Read_SpareArea_8b+0x2ce>
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2201      	movs	r2, #1
 80124d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	2202      	movs	r2, #2
 80124da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80124de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80124e2:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	881b      	ldrh	r3, [r3, #0]
 80124e8:	4619      	mov	r1, r3
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	889b      	ldrh	r3, [r3, #4]
 80124ee:	461a      	mov	r2, r3
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	885b      	ldrh	r3, [r3, #2]
 80124f4:	4618      	mov	r0, r3
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124fa:	fb00 f303 	mul.w	r3, r0, r3
 80124fe:	4413      	add	r3, r2
 8012500:	68fa      	ldr	r2, [r7, #12]
 8012502:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012504:	fb02 f303 	mul.w	r3, r2, r3
 8012508:	440b      	add	r3, r1
 801250a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012510:	617b      	str	r3, [r7, #20]

    /* Spare area(s) read loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8012512:	e108      	b.n	8012726 <HAL_NAND_Read_SpareArea_8b+0x29e>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801251c:	d850      	bhi.n	80125c0 <HAL_NAND_Read_SpareArea_8b+0x138>
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 801251e:	69bb      	ldr	r3, [r7, #24]
 8012520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012524:	2250      	movs	r2, #80	@ 0x50
 8012526:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012528:	f3bf 8f4f 	dsb	sy
}
 801252c:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012532:	68fa      	ldr	r2, [r7, #12]
 8012534:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012536:	fb02 f303 	mul.w	r3, r2, r3
 801253a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801253e:	d21a      	bcs.n	8012576 <HAL_NAND_Read_SpareArea_8b+0xee>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012546:	2200      	movs	r2, #0
 8012548:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801254a:	f3bf 8f4f 	dsb	sy
}
 801254e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012558:	b2d2      	uxtb	r2, r2
 801255a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801255c:	f3bf 8f4f 	dsb	sy
}
 8012560:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012564:	0a1a      	lsrs	r2, r3, #8
 8012566:	69bb      	ldr	r3, [r7, #24]
 8012568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801256c:	b2d2      	uxtb	r2, r2
 801256e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012570:	f3bf 8f4f 	dsb	sy
}
 8012574:	e08b      	b.n	801268e <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801257c:	2200      	movs	r2, #0
 801257e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012580:	f3bf 8f4f 	dsb	sy
}
 8012584:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801258c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801258e:	b2d2      	uxtb	r2, r2
 8012590:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012592:	f3bf 8f4f 	dsb	sy
}
 8012596:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801259a:	0a1a      	lsrs	r2, r3, #8
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125a2:	b2d2      	uxtb	r2, r2
 80125a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80125a6:	f3bf 8f4f 	dsb	sy
}
 80125aa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80125ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ae:	0c1a      	lsrs	r2, r3, #16
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125b6:	b2d2      	uxtb	r2, r2
 80125b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80125ba:	f3bf 8f4f 	dsb	sy
}
 80125be:	e066      	b.n	801268e <HAL_NAND_Read_SpareArea_8b+0x206>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80125c6:	2200      	movs	r2, #0
 80125c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80125ca:	f3bf 8f4f 	dsb	sy
}
 80125ce:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125d4:	68fa      	ldr	r2, [r7, #12]
 80125d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80125d8:	fb02 f303 	mul.w	r3, r2, r3
 80125dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80125e0:	d225      	bcs.n	801262e <HAL_NAND_Read_SpareArea_8b+0x1a6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 80125e2:	69bb      	ldr	r3, [r7, #24]
 80125e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125e8:	697a      	ldr	r2, [r7, #20]
 80125ea:	b2d2      	uxtb	r2, r2
 80125ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80125ee:	f3bf 8f4f 	dsb	sy
}
 80125f2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	0a1a      	lsrs	r2, r3, #8
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125fe:	b2d2      	uxtb	r2, r2
 8012600:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012602:	f3bf 8f4f 	dsb	sy
}
 8012606:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012608:	69bb      	ldr	r3, [r7, #24]
 801260a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801260e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012610:	b2d2      	uxtb	r2, r2
 8012612:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012614:	f3bf 8f4f 	dsb	sy
}
 8012618:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 801261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801261c:	0a1a      	lsrs	r2, r3, #8
 801261e:	69bb      	ldr	r3, [r7, #24]
 8012620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012624:	b2d2      	uxtb	r2, r2
 8012626:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012628:	f3bf 8f4f 	dsb	sy
}
 801262c:	e02f      	b.n	801268e <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012634:	697a      	ldr	r2, [r7, #20]
 8012636:	b2d2      	uxtb	r2, r2
 8012638:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801263a:	f3bf 8f4f 	dsb	sy
}
 801263e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	0a1a      	lsrs	r2, r3, #8
 8012644:	69bb      	ldr	r3, [r7, #24]
 8012646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801264a:	b2d2      	uxtb	r2, r2
 801264c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801264e:	f3bf 8f4f 	dsb	sy
}
 8012652:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012654:	69bb      	ldr	r3, [r7, #24]
 8012656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801265a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801265c:	b2d2      	uxtb	r2, r2
 801265e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012660:	f3bf 8f4f 	dsb	sy
}
 8012664:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012668:	0a1a      	lsrs	r2, r3, #8
 801266a:	69bb      	ldr	r3, [r7, #24]
 801266c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012670:	b2d2      	uxtb	r2, r2
 8012672:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012674:	f3bf 8f4f 	dsb	sy
}
 8012678:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 801267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801267c:	0c1a      	lsrs	r2, r3, #16
 801267e:	69bb      	ldr	r3, [r7, #24]
 8012680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012684:	b2d2      	uxtb	r2, r2
 8012686:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012688:	f3bf 8f4f 	dsb	sy
}
 801268c:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012694:	2230      	movs	r2, #48	@ 0x30
 8012696:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012698:	f3bf 8f4f 	dsb	sy
}
 801269c:	bf00      	nop
      __DSB();

      if (hnand->Config.ExtraCommandEnable == ENABLE)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80126a4:	2b01      	cmp	r3, #1
 80126a6:	d123      	bne.n	80126f0 <HAL_NAND_Read_SpareArea_8b+0x268>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80126a8:	f7fe ff54 	bl	8011554 <HAL_GetTick>
 80126ac:	6138      	str	r0, [r7, #16]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80126ae:	e011      	b.n	80126d4 <HAL_NAND_Read_SpareArea_8b+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80126b0:	f7fe ff50 	bl	8011554 <HAL_GetTick>
 80126b4:	4602      	mov	r2, r0
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	1ad3      	subs	r3, r2, r3
 80126ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80126be:	d909      	bls.n	80126d4 <HAL_NAND_Read_SpareArea_8b+0x24c>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2203      	movs	r2, #3
 80126c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2200      	movs	r2, #0
 80126cc:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 80126d0:	2303      	movs	r3, #3
 80126d2:	e040      	b.n	8012756 <HAL_NAND_Read_SpareArea_8b+0x2ce>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80126d4:	68f8      	ldr	r0, [r7, #12]
 80126d6:	f000 fa50 	bl	8012b7a <HAL_NAND_Read_Status>
 80126da:	4603      	mov	r3, r0
 80126dc:	2b40      	cmp	r3, #64	@ 0x40
 80126de:	d1e7      	bne.n	80126b0 <HAL_NAND_Read_SpareArea_8b+0x228>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 80126e0:	69bb      	ldr	r3, [r7, #24]
 80126e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80126e6:	2200      	movs	r2, #0
 80126e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80126ea:	f3bf 8f4f 	dsb	sy
}
 80126ee:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 80126f0:	2300      	movs	r3, #0
 80126f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80126f4:	e009      	b.n	801270a <HAL_NAND_Read_SpareArea_8b+0x282>
      {
        *buff = *(uint8_t *)deviceaddress;
 80126f6:	69bb      	ldr	r3, [r7, #24]
 80126f8:	781a      	ldrb	r2, [r3, #0]
 80126fa:	69fb      	ldr	r3, [r7, #28]
 80126fc:	701a      	strb	r2, [r3, #0]
        buff++;
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	3301      	adds	r3, #1
 8012702:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8012704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012706:	3301      	adds	r3, #1
 8012708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801270e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012710:	429a      	cmp	r2, r3
 8012712:	d3f0      	bcc.n	80126f6 <HAL_NAND_Read_SpareArea_8b+0x26e>
      }

      /* Increment read spare areas number */
      numsparearearead++;
 8012714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012716:	3301      	adds	r3, #1
 8012718:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to read */
      nbspare--;
 801271a:	6a3b      	ldr	r3, [r7, #32]
 801271c:	3b01      	subs	r3, #1
 801271e:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8012720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012722:	3301      	adds	r3, #1
 8012724:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8012726:	6a3b      	ldr	r3, [r7, #32]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d009      	beq.n	8012740 <HAL_NAND_Read_SpareArea_8b+0x2b8>
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012730:	68fa      	ldr	r2, [r7, #12]
 8012732:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012734:	fb02 f303 	mul.w	r3, r2, r3
 8012738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801273a:	429a      	cmp	r2, r3
 801273c:	f4ff aeea 	bcc.w	8012514 <HAL_NAND_Read_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2201      	movs	r2, #1
 8012744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2200      	movs	r2, #0
 801274c:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8012750:	2300      	movs	r3, #0
 8012752:	e000      	b.n	8012756 <HAL_NAND_Read_SpareArea_8b+0x2ce>
    return HAL_ERROR;
 8012754:	2301      	movs	r3, #1
}
 8012756:	4618      	mov	r0, r3
 8012758:	3730      	adds	r7, #48	@ 0x30
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <HAL_NAND_Write_SpareArea_8b>:
  * @param  NumSpareAreaTowrite   number of spare areas to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                              const uint8_t *pBuffer, uint32_t NumSpareAreaTowrite)
{
 801275e:	b580      	push	{r7, lr}
 8012760:	b08c      	sub	sp, #48	@ 0x30
 8012762:	af00      	add	r7, sp, #0
 8012764:	60f8      	str	r0, [r7, #12]
 8012766:	60b9      	str	r1, [r7, #8]
 8012768:	607a      	str	r2, [r7, #4]
 801276a:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numspareareawritten = 0U;
 801276c:	2300      	movs	r3, #0
 801276e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaTowrite;
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801277e:	b2db      	uxtb	r3, r3
 8012780:	2b02      	cmp	r3, #2
 8012782:	d101      	bne.n	8012788 <HAL_NAND_Write_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 8012784:	2302      	movs	r3, #2
 8012786:	e157      	b.n	8012a38 <HAL_NAND_Write_SpareArea_8b+0x2da>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801278e:	b2db      	uxtb	r3, r3
 8012790:	2b01      	cmp	r3, #1
 8012792:	f040 8150 	bne.w	8012a36 <HAL_NAND_Write_SpareArea_8b+0x2d8>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	f893 3020 	ldrb.w	r3, [r3, #32]
 801279c:	2b01      	cmp	r3, #1
 801279e:	d101      	bne.n	80127a4 <HAL_NAND_Write_SpareArea_8b+0x46>
 80127a0:	2302      	movs	r3, #2
 80127a2:	e149      	b.n	8012a38 <HAL_NAND_Write_SpareArea_8b+0x2da>
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2201      	movs	r2, #1
 80127a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2202      	movs	r2, #2
 80127b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80127b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80127b8:	61bb      	str	r3, [r7, #24]

    /* Page address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	881b      	ldrh	r3, [r3, #0]
 80127be:	4619      	mov	r1, r3
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	889b      	ldrh	r3, [r3, #4]
 80127c4:	461a      	mov	r2, r3
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	885b      	ldrh	r3, [r3, #2]
 80127ca:	4618      	mov	r0, r3
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127d0:	fb00 f303 	mul.w	r3, r0, r3
 80127d4:	4413      	add	r3, r2
 80127d6:	68fa      	ldr	r2, [r7, #12]
 80127d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80127da:	fb02 f303 	mul.w	r3, r2, r3
 80127de:	440b      	add	r3, r1
 80127e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127e6:	617b      	str	r3, [r7, #20]

    /* Spare area(s) write loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80127e8:	e10e      	b.n	8012a08 <HAL_NAND_Write_SpareArea_8b+0x2aa>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127f2:	d858      	bhi.n	80128a6 <HAL_NAND_Write_SpareArea_8b+0x148>
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80127fa:	2250      	movs	r2, #80	@ 0x50
 80127fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80127fe:	f3bf 8f4f 	dsb	sy
}
 8012802:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8012804:	69bb      	ldr	r3, [r7, #24]
 8012806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801280a:	2280      	movs	r2, #128	@ 0x80
 801280c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801280e:	f3bf 8f4f 	dsb	sy
}
 8012812:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012818:	68fa      	ldr	r2, [r7, #12]
 801281a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801281c:	fb02 f303 	mul.w	r3, r2, r3
 8012820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012824:	d21a      	bcs.n	801285c <HAL_NAND_Write_SpareArea_8b+0xfe>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8012826:	69bb      	ldr	r3, [r7, #24]
 8012828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801282c:	2200      	movs	r2, #0
 801282e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012830:	f3bf 8f4f 	dsb	sy
}
 8012834:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801283c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801283e:	b2d2      	uxtb	r2, r2
 8012840:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012842:	f3bf 8f4f 	dsb	sy
}
 8012846:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801284a:	0a1a      	lsrs	r2, r3, #8
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012852:	b2d2      	uxtb	r2, r2
 8012854:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012856:	f3bf 8f4f 	dsb	sy
}
 801285a:	e093      	b.n	8012984 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 801285c:	69bb      	ldr	r3, [r7, #24]
 801285e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012862:	2200      	movs	r2, #0
 8012864:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012866:	f3bf 8f4f 	dsb	sy
}
 801286a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012874:	b2d2      	uxtb	r2, r2
 8012876:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012878:	f3bf 8f4f 	dsb	sy
}
 801287c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 801287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012880:	0a1a      	lsrs	r2, r3, #8
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012888:	b2d2      	uxtb	r2, r2
 801288a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801288c:	f3bf 8f4f 	dsb	sy
}
 8012890:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8012892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012894:	0c1a      	lsrs	r2, r3, #16
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801289c:	b2d2      	uxtb	r2, r2
 801289e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128a0:	f3bf 8f4f 	dsb	sy
}
 80128a4:	e06e      	b.n	8012984 <HAL_NAND_Write_SpareArea_8b+0x226>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80128a6:	69bb      	ldr	r3, [r7, #24]
 80128a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80128ac:	2200      	movs	r2, #0
 80128ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128b0:	f3bf 8f4f 	dsb	sy
}
 80128b4:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80128bc:	2280      	movs	r2, #128	@ 0x80
 80128be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128c0:	f3bf 8f4f 	dsb	sy
}
 80128c4:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80128ce:	fb02 f303 	mul.w	r3, r2, r3
 80128d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80128d6:	d225      	bcs.n	8012924 <HAL_NAND_Write_SpareArea_8b+0x1c6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128de:	697a      	ldr	r2, [r7, #20]
 80128e0:	b2d2      	uxtb	r2, r2
 80128e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128e4:	f3bf 8f4f 	dsb	sy
}
 80128e8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	0a1a      	lsrs	r2, r3, #8
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128f4:	b2d2      	uxtb	r2, r2
 80128f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80128f8:	f3bf 8f4f 	dsb	sy
}
 80128fc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012906:	b2d2      	uxtb	r2, r2
 8012908:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801290a:	f3bf 8f4f 	dsb	sy
}
 801290e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8012910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012912:	0a1a      	lsrs	r2, r3, #8
 8012914:	69bb      	ldr	r3, [r7, #24]
 8012916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801291a:	b2d2      	uxtb	r2, r2
 801291c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801291e:	f3bf 8f4f 	dsb	sy
}
 8012922:	e02f      	b.n	8012984 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801292a:	697a      	ldr	r2, [r7, #20]
 801292c:	b2d2      	uxtb	r2, r2
 801292e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012930:	f3bf 8f4f 	dsb	sy
}
 8012934:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	0a1a      	lsrs	r2, r3, #8
 801293a:	69bb      	ldr	r3, [r7, #24]
 801293c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012940:	b2d2      	uxtb	r2, r2
 8012942:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012944:	f3bf 8f4f 	dsb	sy
}
 8012948:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 801294a:	69bb      	ldr	r3, [r7, #24]
 801294c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012952:	b2d2      	uxtb	r2, r2
 8012954:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012956:	f3bf 8f4f 	dsb	sy
}
 801295a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 801295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801295e:	0a1a      	lsrs	r2, r3, #8
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012966:	b2d2      	uxtb	r2, r2
 8012968:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801296a:	f3bf 8f4f 	dsb	sy
}
 801296e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8012970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012972:	0c1a      	lsrs	r2, r3, #16
 8012974:	69bb      	ldr	r3, [r7, #24]
 8012976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801297a:	b2d2      	uxtb	r2, r2
 801297c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 801297e:	f3bf 8f4f 	dsb	sy
}
 8012982:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8012984:	2300      	movs	r3, #0
 8012986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012988:	e00c      	b.n	80129a4 <HAL_NAND_Write_SpareArea_8b+0x246>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 801298a:	69bb      	ldr	r3, [r7, #24]
 801298c:	69fa      	ldr	r2, [r7, #28]
 801298e:	7812      	ldrb	r2, [r2, #0]
 8012990:	701a      	strb	r2, [r3, #0]
        buff++;
 8012992:	69fb      	ldr	r3, [r7, #28]
 8012994:	3301      	adds	r3, #1
 8012996:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8012998:	f3bf 8f4f 	dsb	sy
}
 801299c:	bf00      	nop
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 801299e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129a0:	3301      	adds	r3, #1
 80129a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d3ed      	bcc.n	801298a <HAL_NAND_Write_SpareArea_8b+0x22c>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80129b4:	2210      	movs	r2, #16
 80129b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80129b8:	f3bf 8f4f 	dsb	sy
}
 80129bc:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 80129be:	f7fe fdc9 	bl	8011554 <HAL_GetTick>
 80129c2:	6138      	str	r0, [r7, #16]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80129c4:	e011      	b.n	80129ea <HAL_NAND_Write_SpareArea_8b+0x28c>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 80129c6:	f7fe fdc5 	bl	8011554 <HAL_GetTick>
 80129ca:	4602      	mov	r2, r0
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	1ad3      	subs	r3, r2, r3
 80129d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80129d4:	d909      	bls.n	80129ea <HAL_NAND_Write_SpareArea_8b+0x28c>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	2203      	movs	r2, #3
 80129da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	2200      	movs	r2, #0
 80129e2:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 80129e6:	2303      	movs	r3, #3
 80129e8:	e026      	b.n	8012a38 <HAL_NAND_Write_SpareArea_8b+0x2da>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80129ea:	68f8      	ldr	r0, [r7, #12]
 80129ec:	f000 f8c5 	bl	8012b7a <HAL_NAND_Read_Status>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b40      	cmp	r3, #64	@ 0x40
 80129f4:	d1e7      	bne.n	80129c6 <HAL_NAND_Write_SpareArea_8b+0x268>
        }
      }

      /* Increment written spare areas number */
      numspareareawritten++;
 80129f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129f8:	3301      	adds	r3, #1
 80129fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to write */
      nbspare--;
 80129fc:	6a3b      	ldr	r3, [r7, #32]
 80129fe:	3b01      	subs	r3, #1
 8012a00:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8012a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a04:	3301      	adds	r3, #1
 8012a06:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8012a08:	6a3b      	ldr	r3, [r7, #32]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d009      	beq.n	8012a22 <HAL_NAND_Write_SpareArea_8b+0x2c4>
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a12:	68fa      	ldr	r2, [r7, #12]
 8012a14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012a16:	fb02 f303 	mul.w	r3, r2, r3
 8012a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	f4ff aee4 	bcc.w	80127ea <HAL_NAND_Write_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	2201      	movs	r2, #1
 8012a26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8012a32:	2300      	movs	r3, #0
 8012a34:	e000      	b.n	8012a38 <HAL_NAND_Write_SpareArea_8b+0x2da>
    return HAL_ERROR;
 8012a36:	2301      	movs	r3, #1
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3730      	adds	r7, #48	@ 0x30
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 8012a40:	b480      	push	{r7}
 8012a42:	b085      	sub	sp, #20
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	2b02      	cmp	r3, #2
 8012a54:	d101      	bne.n	8012a5a <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8012a56:	2302      	movs	r3, #2
 8012a58:	e089      	b.n	8012b6e <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	2b01      	cmp	r3, #1
 8012a64:	f040 8082 	bne.w	8012b6c <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d101      	bne.n	8012a76 <HAL_NAND_Erase_Block+0x36>
 8012a72:	2302      	movs	r3, #2
 8012a74:	e07b      	b.n	8012b6e <HAL_NAND_Erase_Block+0x12e>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2201      	movs	r2, #1
 8012a7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2202      	movs	r2, #2
 8012a82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8012a86:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012a8a:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012a92:	2260      	movs	r2, #96	@ 0x60
 8012a94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012a96:	f3bf 8f4f 	dsb	sy
}
 8012a9a:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	881b      	ldrh	r3, [r3, #0]
 8012aa0:	b2da      	uxtb	r2, r3
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	889b      	ldrh	r3, [r3, #4]
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	885b      	ldrh	r3, [r3, #2]
 8012aac:	4618      	mov	r0, r3
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ab2:	fb00 f303 	mul.w	r3, r0, r3
 8012ab6:	440b      	add	r3, r1
 8012ab8:	b2d9      	uxtb	r1, r3
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	fb11 f303 	smulbb	r3, r1, r3
 8012ac4:	b2db      	uxtb	r3, r3
 8012ac6:	68f9      	ldr	r1, [r7, #12]
 8012ac8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8012acc:	4413      	add	r3, r2
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012ad2:	f3bf 8f4f 	dsb	sy
}
 8012ad6:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	4619      	mov	r1, r3
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	889b      	ldrh	r3, [r3, #4]
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	885b      	ldrh	r3, [r3, #2]
 8012ae8:	4618      	mov	r0, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aee:	fb00 f303 	mul.w	r3, r0, r3
 8012af2:	4413      	add	r3, r2
 8012af4:	687a      	ldr	r2, [r7, #4]
 8012af6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012af8:	fb02 f303 	mul.w	r3, r2, r3
 8012afc:	440b      	add	r3, r1
 8012afe:	0a1a      	lsrs	r2, r3, #8
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012b06:	b2d2      	uxtb	r2, r2
 8012b08:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012b0a:	f3bf 8f4f 	dsb	sy
}
 8012b0e:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	881b      	ldrh	r3, [r3, #0]
 8012b14:	4619      	mov	r1, r3
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	889b      	ldrh	r3, [r3, #4]
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	885b      	ldrh	r3, [r3, #2]
 8012b20:	4618      	mov	r0, r3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b26:	fb00 f303 	mul.w	r3, r0, r3
 8012b2a:	4413      	add	r3, r2
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012b30:	fb02 f303 	mul.w	r3, r2, r3
 8012b34:	440b      	add	r3, r1
 8012b36:	0c1a      	lsrs	r2, r3, #16
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012b3e:	b2d2      	uxtb	r2, r2
 8012b40:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012b42:	f3bf 8f4f 	dsb	sy
}
 8012b46:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012b4e:	22d0      	movs	r2, #208	@ 0xd0
 8012b50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8012b52:	f3bf 8f4f 	dsb	sy
}
 8012b56:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2200      	movs	r2, #0
 8012b64:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	e000      	b.n	8012b6e <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8012b6c:	2301      	movs	r3, #1
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3714      	adds	r7, #20
 8012b72:	46bd      	mov	sp, r7
 8012b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b78:	4770      	bx	lr

08012b7a <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 8012b7a:	b480      	push	{r7}
 8012b7c:	b085      	sub	sp, #20
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8012b82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8012b86:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012b8e:	2270      	movs	r2, #112	@ 0x70
 8012b90:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8012b9a:	68bb      	ldr	r3, [r7, #8]
 8012b9c:	f003 0301 	and.w	r3, r3, #1
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d001      	beq.n	8012ba8 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	e007      	b.n	8012bb8 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d001      	beq.n	8012bb6 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8012bb2:	2340      	movs	r3, #64	@ 0x40
 8012bb4:	e000      	b.n	8012bb8 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8012bb6:	2300      	movs	r3, #0
  }
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3714      	adds	r7, #20
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr

08012bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b088      	sub	sp, #32
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d102      	bne.n	8012bd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8012bd2:	2301      	movs	r3, #1
 8012bd4:	f000 bc28 	b.w	8013428 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012bd8:	4b94      	ldr	r3, [pc, #592]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012bda:	69db      	ldr	r3, [r3, #28]
 8012bdc:	f003 0318 	and.w	r3, r3, #24
 8012be0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8012be2:	4b92      	ldr	r3, [pc, #584]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012be6:	f003 0303 	and.w	r3, r3, #3
 8012bea:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f003 0310 	and.w	r3, r3, #16
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d05b      	beq.n	8012cb0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	2b08      	cmp	r3, #8
 8012bfc:	d005      	beq.n	8012c0a <HAL_RCC_OscConfig+0x46>
 8012bfe:	69fb      	ldr	r3, [r7, #28]
 8012c00:	2b18      	cmp	r3, #24
 8012c02:	d114      	bne.n	8012c2e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8012c04:	69bb      	ldr	r3, [r7, #24]
 8012c06:	2b02      	cmp	r3, #2
 8012c08:	d111      	bne.n	8012c2e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	69db      	ldr	r3, [r3, #28]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d102      	bne.n	8012c18 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8012c12:	2301      	movs	r3, #1
 8012c14:	f000 bc08 	b.w	8013428 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8012c18:	4b84      	ldr	r3, [pc, #528]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012c1a:	699b      	ldr	r3, [r3, #24]
 8012c1c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6a1b      	ldr	r3, [r3, #32]
 8012c24:	041b      	lsls	r3, r3, #16
 8012c26:	4981      	ldr	r1, [pc, #516]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012c28:	4313      	orrs	r3, r2
 8012c2a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8012c2c:	e040      	b.n	8012cb0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	69db      	ldr	r3, [r3, #28]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d023      	beq.n	8012c7e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8012c36:	4b7d      	ldr	r3, [pc, #500]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4a7c      	ldr	r2, [pc, #496]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c42:	f7fe fc87 	bl	8011554 <HAL_GetTick>
 8012c46:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8012c48:	e008      	b.n	8012c5c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8012c4a:	f7fe fc83 	bl	8011554 <HAL_GetTick>
 8012c4e:	4602      	mov	r2, r0
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	1ad3      	subs	r3, r2, r3
 8012c54:	2b02      	cmp	r3, #2
 8012c56:	d901      	bls.n	8012c5c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8012c58:	2303      	movs	r3, #3
 8012c5a:	e3e5      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8012c5c:	4b73      	ldr	r3, [pc, #460]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d0f0      	beq.n	8012c4a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8012c68:	4b70      	ldr	r3, [pc, #448]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012c6a:	699b      	ldr	r3, [r3, #24]
 8012c6c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6a1b      	ldr	r3, [r3, #32]
 8012c74:	041b      	lsls	r3, r3, #16
 8012c76:	496d      	ldr	r1, [pc, #436]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012c78:	4313      	orrs	r3, r2
 8012c7a:	618b      	str	r3, [r1, #24]
 8012c7c:	e018      	b.n	8012cb0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8012c7e:	4b6b      	ldr	r3, [pc, #428]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	4a6a      	ldr	r2, [pc, #424]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c8a:	f7fe fc63 	bl	8011554 <HAL_GetTick>
 8012c8e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8012c90:	e008      	b.n	8012ca4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8012c92:	f7fe fc5f 	bl	8011554 <HAL_GetTick>
 8012c96:	4602      	mov	r2, r0
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	1ad3      	subs	r3, r2, r3
 8012c9c:	2b02      	cmp	r3, #2
 8012c9e:	d901      	bls.n	8012ca4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8012ca0:	2303      	movs	r3, #3
 8012ca2:	e3c1      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8012ca4:	4b61      	ldr	r3, [pc, #388]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d1f0      	bne.n	8012c92 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f003 0301 	and.w	r3, r3, #1
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	f000 80a0 	beq.w	8012dfe <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8012cbe:	69fb      	ldr	r3, [r7, #28]
 8012cc0:	2b10      	cmp	r3, #16
 8012cc2:	d005      	beq.n	8012cd0 <HAL_RCC_OscConfig+0x10c>
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	2b18      	cmp	r3, #24
 8012cc8:	d109      	bne.n	8012cde <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	2b03      	cmp	r3, #3
 8012cce:	d106      	bne.n	8012cde <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f040 8092 	bne.w	8012dfe <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8012cda:	2301      	movs	r3, #1
 8012cdc:	e3a4      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ce6:	d106      	bne.n	8012cf6 <HAL_RCC_OscConfig+0x132>
 8012ce8:	4b50      	ldr	r3, [pc, #320]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	4a4f      	ldr	r2, [pc, #316]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012cf2:	6013      	str	r3, [r2, #0]
 8012cf4:	e058      	b.n	8012da8 <HAL_RCC_OscConfig+0x1e4>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	685b      	ldr	r3, [r3, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d112      	bne.n	8012d24 <HAL_RCC_OscConfig+0x160>
 8012cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	4a4a      	ldr	r2, [pc, #296]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012d08:	6013      	str	r3, [r2, #0]
 8012d0a:	4b48      	ldr	r3, [pc, #288]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	4a47      	ldr	r2, [pc, #284]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012d14:	6013      	str	r3, [r2, #0]
 8012d16:	4b45      	ldr	r3, [pc, #276]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	4a44      	ldr	r2, [pc, #272]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012d20:	6013      	str	r3, [r2, #0]
 8012d22:	e041      	b.n	8012da8 <HAL_RCC_OscConfig+0x1e4>
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012d2c:	d112      	bne.n	8012d54 <HAL_RCC_OscConfig+0x190>
 8012d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	4a3e      	ldr	r2, [pc, #248]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012d38:	6013      	str	r3, [r2, #0]
 8012d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	4a3b      	ldr	r2, [pc, #236]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012d44:	6013      	str	r3, [r2, #0]
 8012d46:	4b39      	ldr	r3, [pc, #228]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	4a38      	ldr	r2, [pc, #224]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012d50:	6013      	str	r3, [r2, #0]
 8012d52:	e029      	b.n	8012da8 <HAL_RCC_OscConfig+0x1e4>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8012d5c:	d112      	bne.n	8012d84 <HAL_RCC_OscConfig+0x1c0>
 8012d5e:	4b33      	ldr	r3, [pc, #204]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	4a32      	ldr	r2, [pc, #200]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012d68:	6013      	str	r3, [r2, #0]
 8012d6a:	4b30      	ldr	r3, [pc, #192]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012d74:	6013      	str	r3, [r2, #0]
 8012d76:	4b2d      	ldr	r3, [pc, #180]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012d80:	6013      	str	r3, [r2, #0]
 8012d82:	e011      	b.n	8012da8 <HAL_RCC_OscConfig+0x1e4>
 8012d84:	4b29      	ldr	r3, [pc, #164]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4a28      	ldr	r2, [pc, #160]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012d8e:	6013      	str	r3, [r2, #0]
 8012d90:	4b26      	ldr	r3, [pc, #152]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4a25      	ldr	r2, [pc, #148]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012d9a:	6013      	str	r3, [r2, #0]
 8012d9c:	4b23      	ldr	r3, [pc, #140]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	4a22      	ldr	r2, [pc, #136]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012da2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	685b      	ldr	r3, [r3, #4]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d013      	beq.n	8012dd8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012db0:	f7fe fbd0 	bl	8011554 <HAL_GetTick>
 8012db4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012db6:	e008      	b.n	8012dca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8012db8:	f7fe fbcc 	bl	8011554 <HAL_GetTick>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	1ad3      	subs	r3, r2, r3
 8012dc2:	2b64      	cmp	r3, #100	@ 0x64
 8012dc4:	d901      	bls.n	8012dca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8012dc6:	2303      	movs	r3, #3
 8012dc8:	e32e      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012dca:	4b18      	ldr	r3, [pc, #96]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d0f0      	beq.n	8012db8 <HAL_RCC_OscConfig+0x1f4>
 8012dd6:	e012      	b.n	8012dfe <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012dd8:	f7fe fbbc 	bl	8011554 <HAL_GetTick>
 8012ddc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012dde:	e008      	b.n	8012df2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8012de0:	f7fe fbb8 	bl	8011554 <HAL_GetTick>
 8012de4:	4602      	mov	r2, r0
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	1ad3      	subs	r3, r2, r3
 8012dea:	2b64      	cmp	r3, #100	@ 0x64
 8012dec:	d901      	bls.n	8012df2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8012dee:	2303      	movs	r3, #3
 8012df0:	e31a      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012df2:	4b0e      	ldr	r3, [pc, #56]	@ (8012e2c <HAL_RCC_OscConfig+0x268>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d1f0      	bne.n	8012de0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f003 0302 	and.w	r3, r3, #2
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	f000 809a 	beq.w	8012f40 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8012e0c:	69fb      	ldr	r3, [r7, #28]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d005      	beq.n	8012e1e <HAL_RCC_OscConfig+0x25a>
 8012e12:	69fb      	ldr	r3, [r7, #28]
 8012e14:	2b18      	cmp	r3, #24
 8012e16:	d149      	bne.n	8012eac <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	d146      	bne.n	8012eac <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	68db      	ldr	r3, [r3, #12]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d104      	bne.n	8012e30 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8012e26:	2301      	movs	r3, #1
 8012e28:	e2fe      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
 8012e2a:	bf00      	nop
 8012e2c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d11c      	bne.n	8012e70 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8012e36:	4b9a      	ldr	r3, [pc, #616]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f003 0218 	and.w	r2, r3, #24
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	691b      	ldr	r3, [r3, #16]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d014      	beq.n	8012e70 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8012e46:	4b96      	ldr	r3, [pc, #600]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f023 0218 	bic.w	r2, r3, #24
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	691b      	ldr	r3, [r3, #16]
 8012e52:	4993      	ldr	r1, [pc, #588]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012e54:	4313      	orrs	r3, r2
 8012e56:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8012e58:	f000 fdd0 	bl	80139fc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8012e5c:	4b91      	ldr	r3, [pc, #580]	@ (80130a4 <HAL_RCC_OscConfig+0x4e0>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7fe faed 	bl	8011440 <HAL_InitTick>
 8012e66:	4603      	mov	r3, r0
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d001      	beq.n	8012e70 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	e2db      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e70:	f7fe fb70 	bl	8011554 <HAL_GetTick>
 8012e74:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012e76:	e008      	b.n	8012e8a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8012e78:	f7fe fb6c 	bl	8011554 <HAL_GetTick>
 8012e7c:	4602      	mov	r2, r0
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	1ad3      	subs	r3, r2, r3
 8012e82:	2b02      	cmp	r3, #2
 8012e84:	d901      	bls.n	8012e8a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8012e86:	2303      	movs	r3, #3
 8012e88:	e2ce      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012e8a:	4b85      	ldr	r3, [pc, #532]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f003 0302 	and.w	r3, r3, #2
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d0f0      	beq.n	8012e78 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8012e96:	4b82      	ldr	r3, [pc, #520]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012e98:	691b      	ldr	r3, [r3, #16]
 8012e9a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	695b      	ldr	r3, [r3, #20]
 8012ea2:	041b      	lsls	r3, r3, #16
 8012ea4:	497e      	ldr	r1, [pc, #504]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8012eaa:	e049      	b.n	8012f40 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	68db      	ldr	r3, [r3, #12]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d02c      	beq.n	8012f0e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8012eb4:	4b7a      	ldr	r3, [pc, #488]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	f023 0218 	bic.w	r2, r3, #24
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	691b      	ldr	r3, [r3, #16]
 8012ec0:	4977      	ldr	r1, [pc, #476]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012ec2:	4313      	orrs	r3, r2
 8012ec4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8012ec6:	4b76      	ldr	r3, [pc, #472]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	4a75      	ldr	r2, [pc, #468]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012ecc:	f043 0301 	orr.w	r3, r3, #1
 8012ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012ed2:	f7fe fb3f 	bl	8011554 <HAL_GetTick>
 8012ed6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012ed8:	e008      	b.n	8012eec <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8012eda:	f7fe fb3b 	bl	8011554 <HAL_GetTick>
 8012ede:	4602      	mov	r2, r0
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	1ad3      	subs	r3, r2, r3
 8012ee4:	2b02      	cmp	r3, #2
 8012ee6:	d901      	bls.n	8012eec <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8012ee8:	2303      	movs	r3, #3
 8012eea:	e29d      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012eec:	4b6c      	ldr	r3, [pc, #432]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	f003 0302 	and.w	r3, r3, #2
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d0f0      	beq.n	8012eda <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8012ef8:	4b69      	ldr	r3, [pc, #420]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012efa:	691b      	ldr	r3, [r3, #16]
 8012efc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	695b      	ldr	r3, [r3, #20]
 8012f04:	041b      	lsls	r3, r3, #16
 8012f06:	4966      	ldr	r1, [pc, #408]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012f08:	4313      	orrs	r3, r2
 8012f0a:	610b      	str	r3, [r1, #16]
 8012f0c:	e018      	b.n	8012f40 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012f0e:	4b64      	ldr	r3, [pc, #400]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4a63      	ldr	r2, [pc, #396]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012f14:	f023 0301 	bic.w	r3, r3, #1
 8012f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012f1a:	f7fe fb1b 	bl	8011554 <HAL_GetTick>
 8012f1e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8012f20:	e008      	b.n	8012f34 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8012f22:	f7fe fb17 	bl	8011554 <HAL_GetTick>
 8012f26:	4602      	mov	r2, r0
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	1ad3      	subs	r3, r2, r3
 8012f2c:	2b02      	cmp	r3, #2
 8012f2e:	d901      	bls.n	8012f34 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8012f30:	2303      	movs	r3, #3
 8012f32:	e279      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8012f34:	4b5a      	ldr	r3, [pc, #360]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	f003 0302 	and.w	r3, r3, #2
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d1f0      	bne.n	8012f22 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	f003 0308 	and.w	r3, r3, #8
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d03c      	beq.n	8012fc6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	699b      	ldr	r3, [r3, #24]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d01c      	beq.n	8012f8e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012f54:	4b52      	ldr	r3, [pc, #328]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012f5a:	4a51      	ldr	r2, [pc, #324]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012f5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012f60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f64:	f7fe faf6 	bl	8011554 <HAL_GetTick>
 8012f68:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8012f6a:	e008      	b.n	8012f7e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8012f6c:	f7fe faf2 	bl	8011554 <HAL_GetTick>
 8012f70:	4602      	mov	r2, r0
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	1ad3      	subs	r3, r2, r3
 8012f76:	2b02      	cmp	r3, #2
 8012f78:	d901      	bls.n	8012f7e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8012f7a:	2303      	movs	r3, #3
 8012f7c:	e254      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8012f7e:	4b48      	ldr	r3, [pc, #288]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d0ef      	beq.n	8012f6c <HAL_RCC_OscConfig+0x3a8>
 8012f8c:	e01b      	b.n	8012fc6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012f8e:	4b44      	ldr	r3, [pc, #272]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012f94:	4a42      	ldr	r2, [pc, #264]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012f96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f9e:	f7fe fad9 	bl	8011554 <HAL_GetTick>
 8012fa2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8012fa4:	e008      	b.n	8012fb8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8012fa6:	f7fe fad5 	bl	8011554 <HAL_GetTick>
 8012faa:	4602      	mov	r2, r0
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	1ad3      	subs	r3, r2, r3
 8012fb0:	2b02      	cmp	r3, #2
 8012fb2:	d901      	bls.n	8012fb8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8012fb4:	2303      	movs	r3, #3
 8012fb6:	e237      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8012fb8:	4b39      	ldr	r3, [pc, #228]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8012fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012fbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d1ef      	bne.n	8012fa6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	f003 0304 	and.w	r3, r3, #4
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	f000 80d2 	beq.w	8013178 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8012fd4:	4b34      	ldr	r3, [pc, #208]	@ (80130a8 <HAL_RCC_OscConfig+0x4e4>)
 8012fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fd8:	f003 0301 	and.w	r3, r3, #1
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d118      	bne.n	8013012 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8012fe0:	4b31      	ldr	r3, [pc, #196]	@ (80130a8 <HAL_RCC_OscConfig+0x4e4>)
 8012fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fe4:	4a30      	ldr	r2, [pc, #192]	@ (80130a8 <HAL_RCC_OscConfig+0x4e4>)
 8012fe6:	f043 0301 	orr.w	r3, r3, #1
 8012fea:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012fec:	f7fe fab2 	bl	8011554 <HAL_GetTick>
 8012ff0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8012ff2:	e008      	b.n	8013006 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012ff4:	f7fe faae 	bl	8011554 <HAL_GetTick>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	1ad3      	subs	r3, r2, r3
 8012ffe:	2b02      	cmp	r3, #2
 8013000:	d901      	bls.n	8013006 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8013002:	2303      	movs	r3, #3
 8013004:	e210      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8013006:	4b28      	ldr	r3, [pc, #160]	@ (80130a8 <HAL_RCC_OscConfig+0x4e4>)
 8013008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801300a:	f003 0301 	and.w	r3, r3, #1
 801300e:	2b00      	cmp	r3, #0
 8013010:	d0f0      	beq.n	8012ff4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	689b      	ldr	r3, [r3, #8]
 8013016:	2b01      	cmp	r3, #1
 8013018:	d108      	bne.n	801302c <HAL_RCC_OscConfig+0x468>
 801301a:	4b21      	ldr	r3, [pc, #132]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 801301c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013020:	4a1f      	ldr	r2, [pc, #124]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013022:	f043 0301 	orr.w	r3, r3, #1
 8013026:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801302a:	e074      	b.n	8013116 <HAL_RCC_OscConfig+0x552>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d118      	bne.n	8013066 <HAL_RCC_OscConfig+0x4a2>
 8013034:	4b1a      	ldr	r3, [pc, #104]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801303a:	4a19      	ldr	r2, [pc, #100]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 801303c:	f023 0301 	bic.w	r3, r3, #1
 8013040:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013044:	4b16      	ldr	r3, [pc, #88]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801304a:	4a15      	ldr	r2, [pc, #84]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 801304c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013050:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013054:	4b12      	ldr	r3, [pc, #72]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801305a:	4a11      	ldr	r2, [pc, #68]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 801305c:	f023 0304 	bic.w	r3, r3, #4
 8013060:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013064:	e057      	b.n	8013116 <HAL_RCC_OscConfig+0x552>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	689b      	ldr	r3, [r3, #8]
 801306a:	2b05      	cmp	r3, #5
 801306c:	d11e      	bne.n	80130ac <HAL_RCC_OscConfig+0x4e8>
 801306e:	4b0c      	ldr	r3, [pc, #48]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013074:	4a0a      	ldr	r2, [pc, #40]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013076:	f043 0304 	orr.w	r3, r3, #4
 801307a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801307e:	4b08      	ldr	r3, [pc, #32]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013084:	4a06      	ldr	r2, [pc, #24]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801308a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801308e:	4b04      	ldr	r3, [pc, #16]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013094:	4a02      	ldr	r2, [pc, #8]	@ (80130a0 <HAL_RCC_OscConfig+0x4dc>)
 8013096:	f043 0301 	orr.w	r3, r3, #1
 801309a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801309e:	e03a      	b.n	8013116 <HAL_RCC_OscConfig+0x552>
 80130a0:	44020c00 	.word	0x44020c00
 80130a4:	200000ac 	.word	0x200000ac
 80130a8:	44020800 	.word	0x44020800
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	2b85      	cmp	r3, #133	@ 0x85
 80130b2:	d118      	bne.n	80130e6 <HAL_RCC_OscConfig+0x522>
 80130b4:	4ba2      	ldr	r3, [pc, #648]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130ba:	4aa1      	ldr	r2, [pc, #644]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130bc:	f043 0304 	orr.w	r3, r3, #4
 80130c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80130c4:	4b9e      	ldr	r3, [pc, #632]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130ca:	4a9d      	ldr	r2, [pc, #628]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80130d4:	4b9a      	ldr	r3, [pc, #616]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130da:	4a99      	ldr	r2, [pc, #612]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130dc:	f043 0301 	orr.w	r3, r3, #1
 80130e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80130e4:	e017      	b.n	8013116 <HAL_RCC_OscConfig+0x552>
 80130e6:	4b96      	ldr	r3, [pc, #600]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130ec:	4a94      	ldr	r2, [pc, #592]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130ee:	f023 0301 	bic.w	r3, r3, #1
 80130f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80130f6:	4b92      	ldr	r3, [pc, #584]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80130fc:	4a90      	ldr	r2, [pc, #576]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80130fe:	f023 0304 	bic.w	r3, r3, #4
 8013102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8013106:	4b8e      	ldr	r3, [pc, #568]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 8013108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801310c:	4a8c      	ldr	r2, [pc, #560]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 801310e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013112:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d016      	beq.n	801314c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801311e:	f7fe fa19 	bl	8011554 <HAL_GetTick>
 8013122:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013124:	e00a      	b.n	801313c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013126:	f7fe fa15 	bl	8011554 <HAL_GetTick>
 801312a:	4602      	mov	r2, r0
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	1ad3      	subs	r3, r2, r3
 8013130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013134:	4293      	cmp	r3, r2
 8013136:	d901      	bls.n	801313c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8013138:	2303      	movs	r3, #3
 801313a:	e175      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801313c:	4b80      	ldr	r3, [pc, #512]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 801313e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013142:	f003 0302 	and.w	r3, r3, #2
 8013146:	2b00      	cmp	r3, #0
 8013148:	d0ed      	beq.n	8013126 <HAL_RCC_OscConfig+0x562>
 801314a:	e015      	b.n	8013178 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801314c:	f7fe fa02 	bl	8011554 <HAL_GetTick>
 8013150:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013152:	e00a      	b.n	801316a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013154:	f7fe f9fe 	bl	8011554 <HAL_GetTick>
 8013158:	4602      	mov	r2, r0
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	1ad3      	subs	r3, r2, r3
 801315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013162:	4293      	cmp	r3, r2
 8013164:	d901      	bls.n	801316a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8013166:	2303      	movs	r3, #3
 8013168:	e15e      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801316a:	4b75      	ldr	r3, [pc, #468]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 801316c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013170:	f003 0302 	and.w	r3, r3, #2
 8013174:	2b00      	cmp	r3, #0
 8013176:	d1ed      	bne.n	8013154 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f003 0320 	and.w	r3, r3, #32
 8013180:	2b00      	cmp	r3, #0
 8013182:	d036      	beq.n	80131f2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013188:	2b00      	cmp	r3, #0
 801318a:	d019      	beq.n	80131c0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801318c:	4b6c      	ldr	r3, [pc, #432]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4a6b      	ldr	r2, [pc, #428]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 8013192:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8013196:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013198:	f7fe f9dc 	bl	8011554 <HAL_GetTick>
 801319c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 801319e:	e008      	b.n	80131b2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80131a0:	f7fe f9d8 	bl	8011554 <HAL_GetTick>
 80131a4:	4602      	mov	r2, r0
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	1ad3      	subs	r3, r2, r3
 80131aa:	2b02      	cmp	r3, #2
 80131ac:	d901      	bls.n	80131b2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80131ae:	2303      	movs	r3, #3
 80131b0:	e13a      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80131b2:	4b63      	ldr	r3, [pc, #396]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d0f0      	beq.n	80131a0 <HAL_RCC_OscConfig+0x5dc>
 80131be:	e018      	b.n	80131f2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80131c0:	4b5f      	ldr	r3, [pc, #380]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	4a5e      	ldr	r2, [pc, #376]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80131c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80131ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80131cc:	f7fe f9c2 	bl	8011554 <HAL_GetTick>
 80131d0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80131d2:	e008      	b.n	80131e6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80131d4:	f7fe f9be 	bl	8011554 <HAL_GetTick>
 80131d8:	4602      	mov	r2, r0
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	1ad3      	subs	r3, r2, r3
 80131de:	2b02      	cmp	r3, #2
 80131e0:	d901      	bls.n	80131e6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80131e2:	2303      	movs	r3, #3
 80131e4:	e120      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80131e6:	4b56      	ldr	r3, [pc, #344]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d1f0      	bne.n	80131d4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	f000 8115 	beq.w	8013426 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	2b18      	cmp	r3, #24
 8013200:	f000 80af 	beq.w	8013362 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013208:	2b02      	cmp	r3, #2
 801320a:	f040 8086 	bne.w	801331a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 801320e:	4b4c      	ldr	r3, [pc, #304]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	4a4b      	ldr	r2, [pc, #300]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 8013214:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801321a:	f7fe f99b 	bl	8011554 <HAL_GetTick>
 801321e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8013220:	e008      	b.n	8013234 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8013222:	f7fe f997 	bl	8011554 <HAL_GetTick>
 8013226:	4602      	mov	r2, r0
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	1ad3      	subs	r3, r2, r3
 801322c:	2b02      	cmp	r3, #2
 801322e:	d901      	bls.n	8013234 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8013230:	2303      	movs	r3, #3
 8013232:	e0f9      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8013234:	4b42      	ldr	r3, [pc, #264]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801323c:	2b00      	cmp	r3, #0
 801323e:	d1f0      	bne.n	8013222 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8013240:	4b3f      	ldr	r3, [pc, #252]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 8013242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013244:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013248:	f023 0303 	bic.w	r3, r3, #3
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8013254:	0212      	lsls	r2, r2, #8
 8013256:	430a      	orrs	r2, r1
 8013258:	4939      	ldr	r1, [pc, #228]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 801325a:	4313      	orrs	r3, r2
 801325c:	628b      	str	r3, [r1, #40]	@ 0x28
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013262:	3b01      	subs	r3, #1
 8013264:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801326c:	3b01      	subs	r3, #1
 801326e:	025b      	lsls	r3, r3, #9
 8013270:	b29b      	uxth	r3, r3
 8013272:	431a      	orrs	r2, r3
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013278:	3b01      	subs	r3, #1
 801327a:	041b      	lsls	r3, r3, #16
 801327c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013280:	431a      	orrs	r2, r3
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013286:	3b01      	subs	r3, #1
 8013288:	061b      	lsls	r3, r3, #24
 801328a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801328e:	492c      	ldr	r1, [pc, #176]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 8013290:	4313      	orrs	r3, r2
 8013292:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8013294:	4b2a      	ldr	r3, [pc, #168]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 8013296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013298:	4a29      	ldr	r2, [pc, #164]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 801329a:	f023 0310 	bic.w	r3, r3, #16
 801329e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132a4:	4a26      	ldr	r2, [pc, #152]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132a6:	00db      	lsls	r3, r3, #3
 80132a8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80132aa:	4b25      	ldr	r3, [pc, #148]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132ae:	4a24      	ldr	r2, [pc, #144]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132b0:	f043 0310 	orr.w	r3, r3, #16
 80132b4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80132b6:	4b22      	ldr	r3, [pc, #136]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132ba:	f023 020c 	bic.w	r2, r3, #12
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132c2:	491f      	ldr	r1, [pc, #124]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132c4:	4313      	orrs	r3, r2
 80132c6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80132c8:	4b1d      	ldr	r3, [pc, #116]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132cc:	f023 0220 	bic.w	r2, r3, #32
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80132d4:	491a      	ldr	r1, [pc, #104]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132d6:	4313      	orrs	r3, r2
 80132d8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80132da:	4b19      	ldr	r3, [pc, #100]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132de:	4a18      	ldr	r2, [pc, #96]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80132e4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80132e6:	4b16      	ldr	r3, [pc, #88]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	4a15      	ldr	r2, [pc, #84]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 80132ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80132f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80132f2:	f7fe f92f 	bl	8011554 <HAL_GetTick>
 80132f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80132f8:	e008      	b.n	801330c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80132fa:	f7fe f92b 	bl	8011554 <HAL_GetTick>
 80132fe:	4602      	mov	r2, r0
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	1ad3      	subs	r3, r2, r3
 8013304:	2b02      	cmp	r3, #2
 8013306:	d901      	bls.n	801330c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8013308:	2303      	movs	r3, #3
 801330a:	e08d      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 801330c:	4b0c      	ldr	r3, [pc, #48]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013314:	2b00      	cmp	r3, #0
 8013316:	d0f0      	beq.n	80132fa <HAL_RCC_OscConfig+0x736>
 8013318:	e085      	b.n	8013426 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 801331a:	4b09      	ldr	r3, [pc, #36]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	4a08      	ldr	r2, [pc, #32]	@ (8013340 <HAL_RCC_OscConfig+0x77c>)
 8013320:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013326:	f7fe f915 	bl	8011554 <HAL_GetTick>
 801332a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 801332c:	e00a      	b.n	8013344 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 801332e:	f7fe f911 	bl	8011554 <HAL_GetTick>
 8013332:	4602      	mov	r2, r0
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	2b02      	cmp	r3, #2
 801333a:	d903      	bls.n	8013344 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 801333c:	2303      	movs	r3, #3
 801333e:	e073      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
 8013340:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8013344:	4b3a      	ldr	r3, [pc, #232]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801334c:	2b00      	cmp	r3, #0
 801334e:	d1ee      	bne.n	801332e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8013350:	4b37      	ldr	r3, [pc, #220]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 8013352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013354:	4a36      	ldr	r2, [pc, #216]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 8013356:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 801335a:	f023 0303 	bic.w	r3, r3, #3
 801335e:	6293      	str	r3, [r2, #40]	@ 0x28
 8013360:	e061      	b.n	8013426 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8013362:	4b33      	ldr	r3, [pc, #204]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 8013364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013366:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8013368:	4b31      	ldr	r3, [pc, #196]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 801336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801336c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013372:	2b01      	cmp	r3, #1
 8013374:	d031      	beq.n	80133da <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	f003 0203 	and.w	r2, r3, #3
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013380:	429a      	cmp	r2, r3
 8013382:	d12a      	bne.n	80133da <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	0a1b      	lsrs	r3, r3, #8
 8013388:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8013390:	429a      	cmp	r2, r3
 8013392:	d122      	bne.n	80133da <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801339e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d11a      	bne.n	80133da <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	0a5b      	lsrs	r3, r3, #9
 80133a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133b0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d111      	bne.n	80133da <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	0c1b      	lsrs	r3, r3, #16
 80133ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d108      	bne.n	80133da <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	0e1b      	lsrs	r3, r3, #24
 80133cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80133d4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d001      	beq.n	80133de <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80133da:	2301      	movs	r3, #1
 80133dc:	e024      	b.n	8013428 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80133de:	4b14      	ldr	r3, [pc, #80]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 80133e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133e2:	08db      	lsrs	r3, r3, #3
 80133e4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d01a      	beq.n	8013426 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80133f0:	4b0f      	ldr	r3, [pc, #60]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 80133f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133f4:	4a0e      	ldr	r2, [pc, #56]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 80133f6:	f023 0310 	bic.w	r3, r3, #16
 80133fa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80133fc:	f7fe f8aa 	bl	8011554 <HAL_GetTick>
 8013400:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8013402:	bf00      	nop
 8013404:	f7fe f8a6 	bl	8011554 <HAL_GetTick>
 8013408:	4602      	mov	r2, r0
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	4293      	cmp	r3, r2
 801340e:	d0f9      	beq.n	8013404 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013414:	4a06      	ldr	r2, [pc, #24]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 8013416:	00db      	lsls	r3, r3, #3
 8013418:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 801341a:	4b05      	ldr	r3, [pc, #20]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 801341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801341e:	4a04      	ldr	r2, [pc, #16]	@ (8013430 <HAL_RCC_OscConfig+0x86c>)
 8013420:	f043 0310 	orr.w	r3, r3, #16
 8013424:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8013426:	2300      	movs	r3, #0
}
 8013428:	4618      	mov	r0, r3
 801342a:	3720      	adds	r7, #32
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}
 8013430:	44020c00 	.word	0x44020c00

08013434 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b084      	sub	sp, #16
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
 801343c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d101      	bne.n	8013448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013444:	2301      	movs	r3, #1
 8013446:	e19e      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013448:	4b83      	ldr	r3, [pc, #524]	@ (8013658 <HAL_RCC_ClockConfig+0x224>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f003 030f 	and.w	r3, r3, #15
 8013450:	683a      	ldr	r2, [r7, #0]
 8013452:	429a      	cmp	r2, r3
 8013454:	d910      	bls.n	8013478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013456:	4b80      	ldr	r3, [pc, #512]	@ (8013658 <HAL_RCC_ClockConfig+0x224>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	f023 020f 	bic.w	r2, r3, #15
 801345e:	497e      	ldr	r1, [pc, #504]	@ (8013658 <HAL_RCC_ClockConfig+0x224>)
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	4313      	orrs	r3, r2
 8013464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013466:	4b7c      	ldr	r3, [pc, #496]	@ (8013658 <HAL_RCC_ClockConfig+0x224>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f003 030f 	and.w	r3, r3, #15
 801346e:	683a      	ldr	r2, [r7, #0]
 8013470:	429a      	cmp	r2, r3
 8013472:	d001      	beq.n	8013478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8013474:	2301      	movs	r3, #1
 8013476:	e186      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f003 0310 	and.w	r3, r3, #16
 8013480:	2b00      	cmp	r3, #0
 8013482:	d012      	beq.n	80134aa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	695a      	ldr	r2, [r3, #20]
 8013488:	4b74      	ldr	r3, [pc, #464]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 801348a:	6a1b      	ldr	r3, [r3, #32]
 801348c:	0a1b      	lsrs	r3, r3, #8
 801348e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013492:	429a      	cmp	r2, r3
 8013494:	d909      	bls.n	80134aa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8013496:	4b71      	ldr	r3, [pc, #452]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013498:	6a1b      	ldr	r3, [r3, #32]
 801349a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	695b      	ldr	r3, [r3, #20]
 80134a2:	021b      	lsls	r3, r3, #8
 80134a4:	496d      	ldr	r1, [pc, #436]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 80134a6:	4313      	orrs	r3, r2
 80134a8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	f003 0308 	and.w	r3, r3, #8
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d012      	beq.n	80134dc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	691a      	ldr	r2, [r3, #16]
 80134ba:	4b68      	ldr	r3, [pc, #416]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 80134bc:	6a1b      	ldr	r3, [r3, #32]
 80134be:	091b      	lsrs	r3, r3, #4
 80134c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d909      	bls.n	80134dc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80134c8:	4b64      	ldr	r3, [pc, #400]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 80134ca:	6a1b      	ldr	r3, [r3, #32]
 80134cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	691b      	ldr	r3, [r3, #16]
 80134d4:	011b      	lsls	r3, r3, #4
 80134d6:	4961      	ldr	r1, [pc, #388]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 80134d8:	4313      	orrs	r3, r2
 80134da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f003 0304 	and.w	r3, r3, #4
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d010      	beq.n	801350a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	68da      	ldr	r2, [r3, #12]
 80134ec:	4b5b      	ldr	r3, [pc, #364]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 80134ee:	6a1b      	ldr	r3, [r3, #32]
 80134f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d908      	bls.n	801350a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80134f8:	4b58      	ldr	r3, [pc, #352]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 80134fa:	6a1b      	ldr	r3, [r3, #32]
 80134fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	68db      	ldr	r3, [r3, #12]
 8013504:	4955      	ldr	r1, [pc, #340]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013506:	4313      	orrs	r3, r2
 8013508:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	f003 0302 	and.w	r3, r3, #2
 8013512:	2b00      	cmp	r3, #0
 8013514:	d010      	beq.n	8013538 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	689a      	ldr	r2, [r3, #8]
 801351a:	4b50      	ldr	r3, [pc, #320]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 801351c:	6a1b      	ldr	r3, [r3, #32]
 801351e:	f003 030f 	and.w	r3, r3, #15
 8013522:	429a      	cmp	r2, r3
 8013524:	d908      	bls.n	8013538 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8013526:	4b4d      	ldr	r3, [pc, #308]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013528:	6a1b      	ldr	r3, [r3, #32]
 801352a:	f023 020f 	bic.w	r2, r3, #15
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	689b      	ldr	r3, [r3, #8]
 8013532:	494a      	ldr	r1, [pc, #296]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013534:	4313      	orrs	r3, r2
 8013536:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	f003 0301 	and.w	r3, r3, #1
 8013540:	2b00      	cmp	r3, #0
 8013542:	f000 8093 	beq.w	801366c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	2b03      	cmp	r3, #3
 801354c:	d107      	bne.n	801355e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 801354e:	4b43      	ldr	r3, [pc, #268]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013556:	2b00      	cmp	r3, #0
 8013558:	d121      	bne.n	801359e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 801355a:	2301      	movs	r3, #1
 801355c:	e113      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	685b      	ldr	r3, [r3, #4]
 8013562:	2b02      	cmp	r3, #2
 8013564:	d107      	bne.n	8013576 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013566:	4b3d      	ldr	r3, [pc, #244]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801356e:	2b00      	cmp	r3, #0
 8013570:	d115      	bne.n	801359e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8013572:	2301      	movs	r3, #1
 8013574:	e107      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	2b01      	cmp	r3, #1
 801357c:	d107      	bne.n	801358e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 801357e:	4b37      	ldr	r3, [pc, #220]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013586:	2b00      	cmp	r3, #0
 8013588:	d109      	bne.n	801359e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 801358a:	2301      	movs	r3, #1
 801358c:	e0fb      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801358e:	4b33      	ldr	r3, [pc, #204]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	f003 0302 	and.w	r3, r3, #2
 8013596:	2b00      	cmp	r3, #0
 8013598:	d101      	bne.n	801359e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 801359a:	2301      	movs	r3, #1
 801359c:	e0f3      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 801359e:	4b2f      	ldr	r3, [pc, #188]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 80135a0:	69db      	ldr	r3, [r3, #28]
 80135a2:	f023 0203 	bic.w	r2, r3, #3
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	492c      	ldr	r1, [pc, #176]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 80135ac:	4313      	orrs	r3, r2
 80135ae:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80135b0:	f7fd ffd0 	bl	8011554 <HAL_GetTick>
 80135b4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	2b03      	cmp	r3, #3
 80135bc:	d112      	bne.n	80135e4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80135be:	e00a      	b.n	80135d6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80135c0:	f7fd ffc8 	bl	8011554 <HAL_GetTick>
 80135c4:	4602      	mov	r2, r0
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	1ad3      	subs	r3, r2, r3
 80135ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80135ce:	4293      	cmp	r3, r2
 80135d0:	d901      	bls.n	80135d6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80135d2:	2303      	movs	r3, #3
 80135d4:	e0d7      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80135d6:	4b21      	ldr	r3, [pc, #132]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 80135d8:	69db      	ldr	r3, [r3, #28]
 80135da:	f003 0318 	and.w	r3, r3, #24
 80135de:	2b18      	cmp	r3, #24
 80135e0:	d1ee      	bne.n	80135c0 <HAL_RCC_ClockConfig+0x18c>
 80135e2:	e043      	b.n	801366c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	2b02      	cmp	r3, #2
 80135ea:	d112      	bne.n	8013612 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80135ec:	e00a      	b.n	8013604 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80135ee:	f7fd ffb1 	bl	8011554 <HAL_GetTick>
 80135f2:	4602      	mov	r2, r0
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	1ad3      	subs	r3, r2, r3
 80135f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80135fc:	4293      	cmp	r3, r2
 80135fe:	d901      	bls.n	8013604 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8013600:	2303      	movs	r3, #3
 8013602:	e0c0      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013604:	4b15      	ldr	r3, [pc, #84]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013606:	69db      	ldr	r3, [r3, #28]
 8013608:	f003 0318 	and.w	r3, r3, #24
 801360c:	2b10      	cmp	r3, #16
 801360e:	d1ee      	bne.n	80135ee <HAL_RCC_ClockConfig+0x1ba>
 8013610:	e02c      	b.n	801366c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	2b01      	cmp	r3, #1
 8013618:	d122      	bne.n	8013660 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 801361a:	e00a      	b.n	8013632 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 801361c:	f7fd ff9a 	bl	8011554 <HAL_GetTick>
 8013620:	4602      	mov	r2, r0
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	1ad3      	subs	r3, r2, r3
 8013626:	f241 3288 	movw	r2, #5000	@ 0x1388
 801362a:	4293      	cmp	r3, r2
 801362c:	d901      	bls.n	8013632 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 801362e:	2303      	movs	r3, #3
 8013630:	e0a9      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8013632:	4b0a      	ldr	r3, [pc, #40]	@ (801365c <HAL_RCC_ClockConfig+0x228>)
 8013634:	69db      	ldr	r3, [r3, #28]
 8013636:	f003 0318 	and.w	r3, r3, #24
 801363a:	2b08      	cmp	r3, #8
 801363c:	d1ee      	bne.n	801361c <HAL_RCC_ClockConfig+0x1e8>
 801363e:	e015      	b.n	801366c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8013640:	f7fd ff88 	bl	8011554 <HAL_GetTick>
 8013644:	4602      	mov	r2, r0
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801364e:	4293      	cmp	r3, r2
 8013650:	d906      	bls.n	8013660 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8013652:	2303      	movs	r3, #3
 8013654:	e097      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
 8013656:	bf00      	nop
 8013658:	40022000 	.word	0x40022000
 801365c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013660:	4b4b      	ldr	r3, [pc, #300]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 8013662:	69db      	ldr	r3, [r3, #28]
 8013664:	f003 0318 	and.w	r3, r3, #24
 8013668:	2b00      	cmp	r3, #0
 801366a:	d1e9      	bne.n	8013640 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	f003 0302 	and.w	r3, r3, #2
 8013674:	2b00      	cmp	r3, #0
 8013676:	d010      	beq.n	801369a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	689a      	ldr	r2, [r3, #8]
 801367c:	4b44      	ldr	r3, [pc, #272]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 801367e:	6a1b      	ldr	r3, [r3, #32]
 8013680:	f003 030f 	and.w	r3, r3, #15
 8013684:	429a      	cmp	r2, r3
 8013686:	d208      	bcs.n	801369a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8013688:	4b41      	ldr	r3, [pc, #260]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 801368a:	6a1b      	ldr	r3, [r3, #32]
 801368c:	f023 020f 	bic.w	r2, r3, #15
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	689b      	ldr	r3, [r3, #8]
 8013694:	493e      	ldr	r1, [pc, #248]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 8013696:	4313      	orrs	r3, r2
 8013698:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801369a:	4b3e      	ldr	r3, [pc, #248]	@ (8013794 <HAL_RCC_ClockConfig+0x360>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f003 030f 	and.w	r3, r3, #15
 80136a2:	683a      	ldr	r2, [r7, #0]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d210      	bcs.n	80136ca <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80136a8:	4b3a      	ldr	r3, [pc, #232]	@ (8013794 <HAL_RCC_ClockConfig+0x360>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	f023 020f 	bic.w	r2, r3, #15
 80136b0:	4938      	ldr	r1, [pc, #224]	@ (8013794 <HAL_RCC_ClockConfig+0x360>)
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	4313      	orrs	r3, r2
 80136b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80136b8:	4b36      	ldr	r3, [pc, #216]	@ (8013794 <HAL_RCC_ClockConfig+0x360>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f003 030f 	and.w	r3, r3, #15
 80136c0:	683a      	ldr	r2, [r7, #0]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d001      	beq.n	80136ca <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80136c6:	2301      	movs	r3, #1
 80136c8:	e05d      	b.n	8013786 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	f003 0304 	and.w	r3, r3, #4
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d010      	beq.n	80136f8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	68da      	ldr	r2, [r3, #12]
 80136da:	4b2d      	ldr	r3, [pc, #180]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 80136dc:	6a1b      	ldr	r3, [r3, #32]
 80136de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d208      	bcs.n	80136f8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80136e6:	4b2a      	ldr	r3, [pc, #168]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 80136e8:	6a1b      	ldr	r3, [r3, #32]
 80136ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	4927      	ldr	r1, [pc, #156]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 80136f4:	4313      	orrs	r3, r2
 80136f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	f003 0308 	and.w	r3, r3, #8
 8013700:	2b00      	cmp	r3, #0
 8013702:	d012      	beq.n	801372a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	691a      	ldr	r2, [r3, #16]
 8013708:	4b21      	ldr	r3, [pc, #132]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 801370a:	6a1b      	ldr	r3, [r3, #32]
 801370c:	091b      	lsrs	r3, r3, #4
 801370e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013712:	429a      	cmp	r2, r3
 8013714:	d209      	bcs.n	801372a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8013716:	4b1e      	ldr	r3, [pc, #120]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 8013718:	6a1b      	ldr	r3, [r3, #32]
 801371a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	691b      	ldr	r3, [r3, #16]
 8013722:	011b      	lsls	r3, r3, #4
 8013724:	491a      	ldr	r1, [pc, #104]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 8013726:	4313      	orrs	r3, r2
 8013728:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f003 0310 	and.w	r3, r3, #16
 8013732:	2b00      	cmp	r3, #0
 8013734:	d012      	beq.n	801375c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	695a      	ldr	r2, [r3, #20]
 801373a:	4b15      	ldr	r3, [pc, #84]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 801373c:	6a1b      	ldr	r3, [r3, #32]
 801373e:	0a1b      	lsrs	r3, r3, #8
 8013740:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013744:	429a      	cmp	r2, r3
 8013746:	d209      	bcs.n	801375c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8013748:	4b11      	ldr	r3, [pc, #68]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 801374a:	6a1b      	ldr	r3, [r3, #32]
 801374c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	695b      	ldr	r3, [r3, #20]
 8013754:	021b      	lsls	r3, r3, #8
 8013756:	490e      	ldr	r1, [pc, #56]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 8013758:	4313      	orrs	r3, r2
 801375a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 801375c:	f000 f822 	bl	80137a4 <HAL_RCC_GetSysClockFreq>
 8013760:	4602      	mov	r2, r0
 8013762:	4b0b      	ldr	r3, [pc, #44]	@ (8013790 <HAL_RCC_ClockConfig+0x35c>)
 8013764:	6a1b      	ldr	r3, [r3, #32]
 8013766:	f003 030f 	and.w	r3, r3, #15
 801376a:	490b      	ldr	r1, [pc, #44]	@ (8013798 <HAL_RCC_ClockConfig+0x364>)
 801376c:	5ccb      	ldrb	r3, [r1, r3]
 801376e:	fa22 f303 	lsr.w	r3, r2, r3
 8013772:	4a0a      	ldr	r2, [pc, #40]	@ (801379c <HAL_RCC_ClockConfig+0x368>)
 8013774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8013776:	4b0a      	ldr	r3, [pc, #40]	@ (80137a0 <HAL_RCC_ClockConfig+0x36c>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	4618      	mov	r0, r3
 801377c:	f7fd fe60 	bl	8011440 <HAL_InitTick>
 8013780:	4603      	mov	r3, r0
 8013782:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8013784:	7afb      	ldrb	r3, [r7, #11]
}
 8013786:	4618      	mov	r0, r3
 8013788:	3710      	adds	r7, #16
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	44020c00 	.word	0x44020c00
 8013794:	40022000 	.word	0x40022000
 8013798:	0801f380 	.word	0x0801f380
 801379c:	200000a8 	.word	0x200000a8
 80137a0:	200000ac 	.word	0x200000ac

080137a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80137a4:	b480      	push	{r7}
 80137a6:	b089      	sub	sp, #36	@ 0x24
 80137a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80137aa:	4b8c      	ldr	r3, [pc, #560]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 80137ac:	69db      	ldr	r3, [r3, #28]
 80137ae:	f003 0318 	and.w	r3, r3, #24
 80137b2:	2b08      	cmp	r3, #8
 80137b4:	d102      	bne.n	80137bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80137b6:	4b8a      	ldr	r3, [pc, #552]	@ (80139e0 <HAL_RCC_GetSysClockFreq+0x23c>)
 80137b8:	61fb      	str	r3, [r7, #28]
 80137ba:	e107      	b.n	80139cc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80137bc:	4b87      	ldr	r3, [pc, #540]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 80137be:	69db      	ldr	r3, [r3, #28]
 80137c0:	f003 0318 	and.w	r3, r3, #24
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d112      	bne.n	80137ee <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80137c8:	4b84      	ldr	r3, [pc, #528]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f003 0320 	and.w	r3, r3, #32
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d009      	beq.n	80137e8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80137d4:	4b81      	ldr	r3, [pc, #516]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	08db      	lsrs	r3, r3, #3
 80137da:	f003 0303 	and.w	r3, r3, #3
 80137de:	4a81      	ldr	r2, [pc, #516]	@ (80139e4 <HAL_RCC_GetSysClockFreq+0x240>)
 80137e0:	fa22 f303 	lsr.w	r3, r2, r3
 80137e4:	61fb      	str	r3, [r7, #28]
 80137e6:	e0f1      	b.n	80139cc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80137e8:	4b7e      	ldr	r3, [pc, #504]	@ (80139e4 <HAL_RCC_GetSysClockFreq+0x240>)
 80137ea:	61fb      	str	r3, [r7, #28]
 80137ec:	e0ee      	b.n	80139cc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80137ee:	4b7b      	ldr	r3, [pc, #492]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 80137f0:	69db      	ldr	r3, [r3, #28]
 80137f2:	f003 0318 	and.w	r3, r3, #24
 80137f6:	2b10      	cmp	r3, #16
 80137f8:	d102      	bne.n	8013800 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80137fa:	4b7b      	ldr	r3, [pc, #492]	@ (80139e8 <HAL_RCC_GetSysClockFreq+0x244>)
 80137fc:	61fb      	str	r3, [r7, #28]
 80137fe:	e0e5      	b.n	80139cc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013800:	4b76      	ldr	r3, [pc, #472]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 8013802:	69db      	ldr	r3, [r3, #28]
 8013804:	f003 0318 	and.w	r3, r3, #24
 8013808:	2b18      	cmp	r3, #24
 801380a:	f040 80dd 	bne.w	80139c8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 801380e:	4b73      	ldr	r3, [pc, #460]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 8013810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013812:	f003 0303 	and.w	r3, r3, #3
 8013816:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8013818:	4b70      	ldr	r3, [pc, #448]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 801381a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801381c:	0a1b      	lsrs	r3, r3, #8
 801381e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013822:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8013824:	4b6d      	ldr	r3, [pc, #436]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 8013826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013828:	091b      	lsrs	r3, r3, #4
 801382a:	f003 0301 	and.w	r3, r3, #1
 801382e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8013830:	4b6a      	ldr	r3, [pc, #424]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 8013832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8013834:	08db      	lsrs	r3, r3, #3
 8013836:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 801383a:	68fa      	ldr	r2, [r7, #12]
 801383c:	fb02 f303 	mul.w	r3, r2, r3
 8013840:	ee07 3a90 	vmov	s15, r3
 8013844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013848:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	2b00      	cmp	r3, #0
 8013850:	f000 80b7 	beq.w	80139c2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	2b01      	cmp	r3, #1
 8013858:	d003      	beq.n	8013862 <HAL_RCC_GetSysClockFreq+0xbe>
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	2b03      	cmp	r3, #3
 801385e:	d056      	beq.n	801390e <HAL_RCC_GetSysClockFreq+0x16a>
 8013860:	e077      	b.n	8013952 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8013862:	4b5e      	ldr	r3, [pc, #376]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f003 0320 	and.w	r3, r3, #32
 801386a:	2b00      	cmp	r3, #0
 801386c:	d02d      	beq.n	80138ca <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801386e:	4b5b      	ldr	r3, [pc, #364]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	08db      	lsrs	r3, r3, #3
 8013874:	f003 0303 	and.w	r3, r3, #3
 8013878:	4a5a      	ldr	r2, [pc, #360]	@ (80139e4 <HAL_RCC_GetSysClockFreq+0x240>)
 801387a:	fa22 f303 	lsr.w	r3, r2, r3
 801387e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	ee07 3a90 	vmov	s15, r3
 8013886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801388a:	693b      	ldr	r3, [r7, #16]
 801388c:	ee07 3a90 	vmov	s15, r3
 8013890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013898:	4b50      	ldr	r3, [pc, #320]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 801389a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138a0:	ee07 3a90 	vmov	s15, r3
 80138a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80138a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80138ac:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80139ec <HAL_RCC_GetSysClockFreq+0x248>
 80138b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80138b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80138b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80138bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80138c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138c4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80138c8:	e065      	b.n	8013996 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	ee07 3a90 	vmov	s15, r3
 80138d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138d4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80139f0 <HAL_RCC_GetSysClockFreq+0x24c>
 80138d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80138dc:	4b3f      	ldr	r3, [pc, #252]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 80138de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80138e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138e4:	ee07 3a90 	vmov	s15, r3
 80138e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80138ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80138f0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80139ec <HAL_RCC_GetSysClockFreq+0x248>
 80138f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80138f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80138fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013900:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013908:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 801390c:	e043      	b.n	8013996 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	ee07 3a90 	vmov	s15, r3
 8013914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013918:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80139f4 <HAL_RCC_GetSysClockFreq+0x250>
 801391c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013920:	4b2e      	ldr	r3, [pc, #184]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 8013922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013928:	ee07 3a90 	vmov	s15, r3
 801392c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8013930:	ed97 6a02 	vldr	s12, [r7, #8]
 8013934:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80139ec <HAL_RCC_GetSysClockFreq+0x248>
 8013938:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801393c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8013940:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013944:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013948:	ee67 7a27 	vmul.f32	s15, s14, s15
 801394c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8013950:	e021      	b.n	8013996 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	ee07 3a90 	vmov	s15, r3
 8013958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801395c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80139f8 <HAL_RCC_GetSysClockFreq+0x254>
 8013960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013964:	4b1d      	ldr	r3, [pc, #116]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 8013966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801396c:	ee07 3a90 	vmov	s15, r3
 8013970:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8013974:	ed97 6a02 	vldr	s12, [r7, #8]
 8013978:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80139ec <HAL_RCC_GetSysClockFreq+0x248>
 801397c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8013980:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8013984:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013988:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801398c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013990:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8013994:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8013996:	4b11      	ldr	r3, [pc, #68]	@ (80139dc <HAL_RCC_GetSysClockFreq+0x238>)
 8013998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801399a:	0a5b      	lsrs	r3, r3, #9
 801399c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139a0:	3301      	adds	r3, #1
 80139a2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	ee07 3a90 	vmov	s15, r3
 80139aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80139ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80139b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80139b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80139ba:	ee17 3a90 	vmov	r3, s15
 80139be:	61fb      	str	r3, [r7, #28]
 80139c0:	e004      	b.n	80139cc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80139c2:	2300      	movs	r3, #0
 80139c4:	61fb      	str	r3, [r7, #28]
 80139c6:	e001      	b.n	80139cc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80139c8:	4b06      	ldr	r3, [pc, #24]	@ (80139e4 <HAL_RCC_GetSysClockFreq+0x240>)
 80139ca:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80139cc:	69fb      	ldr	r3, [r7, #28]
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3724      	adds	r7, #36	@ 0x24
 80139d2:	46bd      	mov	sp, r7
 80139d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d8:	4770      	bx	lr
 80139da:	bf00      	nop
 80139dc:	44020c00 	.word	0x44020c00
 80139e0:	003d0900 	.word	0x003d0900
 80139e4:	03d09000 	.word	0x03d09000
 80139e8:	017d7840 	.word	0x017d7840
 80139ec:	46000000 	.word	0x46000000
 80139f0:	4c742400 	.word	0x4c742400
 80139f4:	4bbebc20 	.word	0x4bbebc20
 80139f8:	4a742400 	.word	0x4a742400

080139fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8013a00:	f7ff fed0 	bl	80137a4 <HAL_RCC_GetSysClockFreq>
 8013a04:	4602      	mov	r2, r0
 8013a06:	4b08      	ldr	r3, [pc, #32]	@ (8013a28 <HAL_RCC_GetHCLKFreq+0x2c>)
 8013a08:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8013a0a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8013a0e:	4907      	ldr	r1, [pc, #28]	@ (8013a2c <HAL_RCC_GetHCLKFreq+0x30>)
 8013a10:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8013a12:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8013a16:	fa22 f303 	lsr.w	r3, r2, r3
 8013a1a:	4a05      	ldr	r2, [pc, #20]	@ (8013a30 <HAL_RCC_GetHCLKFreq+0x34>)
 8013a1c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8013a1e:	4b04      	ldr	r3, [pc, #16]	@ (8013a30 <HAL_RCC_GetHCLKFreq+0x34>)
 8013a20:	681b      	ldr	r3, [r3, #0]
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	44020c00 	.word	0x44020c00
 8013a2c:	0801f380 	.word	0x0801f380
 8013a30:	200000a8 	.word	0x200000a8

08013a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8013a38:	f7ff ffe0 	bl	80139fc <HAL_RCC_GetHCLKFreq>
 8013a3c:	4602      	mov	r2, r0
 8013a3e:	4b06      	ldr	r3, [pc, #24]	@ (8013a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013a40:	6a1b      	ldr	r3, [r3, #32]
 8013a42:	091b      	lsrs	r3, r3, #4
 8013a44:	f003 0307 	and.w	r3, r3, #7
 8013a48:	4904      	ldr	r1, [pc, #16]	@ (8013a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8013a4a:	5ccb      	ldrb	r3, [r1, r3]
 8013a4c:	f003 031f 	and.w	r3, r3, #31
 8013a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	44020c00 	.word	0x44020c00
 8013a5c:	0801f390 	.word	0x0801f390

08013a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8013a64:	f7ff ffca 	bl	80139fc <HAL_RCC_GetHCLKFreq>
 8013a68:	4602      	mov	r2, r0
 8013a6a:	4b06      	ldr	r3, [pc, #24]	@ (8013a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013a6c:	6a1b      	ldr	r3, [r3, #32]
 8013a6e:	0a1b      	lsrs	r3, r3, #8
 8013a70:	f003 0307 	and.w	r3, r3, #7
 8013a74:	4904      	ldr	r1, [pc, #16]	@ (8013a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8013a76:	5ccb      	ldrb	r3, [r1, r3]
 8013a78:	f003 031f 	and.w	r3, r3, #31
 8013a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	44020c00 	.word	0x44020c00
 8013a88:	0801f390 	.word	0x0801f390

08013a8c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8013a90:	f7ff ffb4 	bl	80139fc <HAL_RCC_GetHCLKFreq>
 8013a94:	4602      	mov	r2, r0
 8013a96:	4b06      	ldr	r3, [pc, #24]	@ (8013ab0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8013a98:	6a1b      	ldr	r3, [r3, #32]
 8013a9a:	0b1b      	lsrs	r3, r3, #12
 8013a9c:	f003 0307 	and.w	r3, r3, #7
 8013aa0:	4904      	ldr	r1, [pc, #16]	@ (8013ab4 <HAL_RCC_GetPCLK3Freq+0x28>)
 8013aa2:	5ccb      	ldrb	r3, [r1, r3]
 8013aa4:	f003 031f 	and.w	r3, r3, #31
 8013aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	bd80      	pop	{r7, pc}
 8013ab0:	44020c00 	.word	0x44020c00
 8013ab4:	0801f390 	.word	0x0801f390

08013ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8013ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013abc:	b0d8      	sub	sp, #352	@ 0x160
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8013aca:	2300      	movs	r3, #0
 8013acc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8013adc:	2500      	movs	r5, #0
 8013ade:	ea54 0305 	orrs.w	r3, r4, r5
 8013ae2:	d00b      	beq.n	8013afc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8013ae4:	4bcd      	ldr	r3, [pc, #820]	@ (8013e1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013aea:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8013aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013af4:	4ac9      	ldr	r2, [pc, #804]	@ (8013e1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013af6:	430b      	orrs	r3, r1
 8013af8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b04:	f002 0801 	and.w	r8, r2, #1
 8013b08:	f04f 0900 	mov.w	r9, #0
 8013b0c:	ea58 0309 	orrs.w	r3, r8, r9
 8013b10:	d042      	beq.n	8013b98 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8013b12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013b18:	2b05      	cmp	r3, #5
 8013b1a:	d823      	bhi.n	8013b64 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8013b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8013b24 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8013b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b22:	bf00      	nop
 8013b24:	08013b6d 	.word	0x08013b6d
 8013b28:	08013b3d 	.word	0x08013b3d
 8013b2c:	08013b51 	.word	0x08013b51
 8013b30:	08013b6d 	.word	0x08013b6d
 8013b34:	08013b6d 	.word	0x08013b6d
 8013b38:	08013b6d 	.word	0x08013b6d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013b40:	3308      	adds	r3, #8
 8013b42:	4618      	mov	r0, r3
 8013b44:	f004 feda 	bl	80188fc <RCCEx_PLL2_Config>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8013b4e:	e00e      	b.n	8013b6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013b54:	3330      	adds	r3, #48	@ 0x30
 8013b56:	4618      	mov	r0, r3
 8013b58:	f004 ff68 	bl	8018a2c <RCCEx_PLL3_Config>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8013b62:	e004      	b.n	8013b6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013b64:	2301      	movs	r3, #1
 8013b66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013b6a:	e000      	b.n	8013b6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8013b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013b6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d10c      	bne.n	8013b90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8013b76:	4ba9      	ldr	r3, [pc, #676]	@ (8013e1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013b78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013b7c:	f023 0107 	bic.w	r1, r3, #7
 8013b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013b86:	4aa5      	ldr	r2, [pc, #660]	@ (8013e1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013b88:	430b      	orrs	r3, r1
 8013b8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013b8e:	e003      	b.n	8013b98 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013b90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013b94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba0:	f002 0a02 	and.w	sl, r2, #2
 8013ba4:	f04f 0b00 	mov.w	fp, #0
 8013ba8:	ea5a 030b 	orrs.w	r3, sl, fp
 8013bac:	f000 8088 	beq.w	8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8013bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013bb6:	2b28      	cmp	r3, #40	@ 0x28
 8013bb8:	d868      	bhi.n	8013c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8013bba:	a201      	add	r2, pc, #4	@ (adr r2, 8013bc0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8013bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bc0:	08013c95 	.word	0x08013c95
 8013bc4:	08013c8d 	.word	0x08013c8d
 8013bc8:	08013c8d 	.word	0x08013c8d
 8013bcc:	08013c8d 	.word	0x08013c8d
 8013bd0:	08013c8d 	.word	0x08013c8d
 8013bd4:	08013c8d 	.word	0x08013c8d
 8013bd8:	08013c8d 	.word	0x08013c8d
 8013bdc:	08013c8d 	.word	0x08013c8d
 8013be0:	08013c65 	.word	0x08013c65
 8013be4:	08013c8d 	.word	0x08013c8d
 8013be8:	08013c8d 	.word	0x08013c8d
 8013bec:	08013c8d 	.word	0x08013c8d
 8013bf0:	08013c8d 	.word	0x08013c8d
 8013bf4:	08013c8d 	.word	0x08013c8d
 8013bf8:	08013c8d 	.word	0x08013c8d
 8013bfc:	08013c8d 	.word	0x08013c8d
 8013c00:	08013c79 	.word	0x08013c79
 8013c04:	08013c8d 	.word	0x08013c8d
 8013c08:	08013c8d 	.word	0x08013c8d
 8013c0c:	08013c8d 	.word	0x08013c8d
 8013c10:	08013c8d 	.word	0x08013c8d
 8013c14:	08013c8d 	.word	0x08013c8d
 8013c18:	08013c8d 	.word	0x08013c8d
 8013c1c:	08013c8d 	.word	0x08013c8d
 8013c20:	08013c95 	.word	0x08013c95
 8013c24:	08013c8d 	.word	0x08013c8d
 8013c28:	08013c8d 	.word	0x08013c8d
 8013c2c:	08013c8d 	.word	0x08013c8d
 8013c30:	08013c8d 	.word	0x08013c8d
 8013c34:	08013c8d 	.word	0x08013c8d
 8013c38:	08013c8d 	.word	0x08013c8d
 8013c3c:	08013c8d 	.word	0x08013c8d
 8013c40:	08013c95 	.word	0x08013c95
 8013c44:	08013c8d 	.word	0x08013c8d
 8013c48:	08013c8d 	.word	0x08013c8d
 8013c4c:	08013c8d 	.word	0x08013c8d
 8013c50:	08013c8d 	.word	0x08013c8d
 8013c54:	08013c8d 	.word	0x08013c8d
 8013c58:	08013c8d 	.word	0x08013c8d
 8013c5c:	08013c8d 	.word	0x08013c8d
 8013c60:	08013c95 	.word	0x08013c95
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013c68:	3308      	adds	r3, #8
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f004 fe46 	bl	80188fc <RCCEx_PLL2_Config>
 8013c70:	4603      	mov	r3, r0
 8013c72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8013c76:	e00e      	b.n	8013c96 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013c7c:	3330      	adds	r3, #48	@ 0x30
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f004 fed4 	bl	8018a2c <RCCEx_PLL3_Config>
 8013c84:	4603      	mov	r3, r0
 8013c86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8013c8a:	e004      	b.n	8013c96 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013c92:	e000      	b.n	8013c96 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8013c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013c96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d10c      	bne.n	8013cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8013c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8013e1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013ca4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8013ca8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013cae:	4a5b      	ldr	r2, [pc, #364]	@ (8013e1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013cb0:	430b      	orrs	r3, r1
 8013cb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013cb6:	e003      	b.n	8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013cb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013cbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8013cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cc8:	f002 0304 	and.w	r3, r2, #4
 8013ccc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8013cd6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8013cda:	460b      	mov	r3, r1
 8013cdc:	4313      	orrs	r3, r2
 8013cde:	d04e      	beq.n	8013d7e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8013ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013ce6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8013cea:	d02c      	beq.n	8013d46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8013cec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8013cf0:	d825      	bhi.n	8013d3e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8013cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013cf6:	d028      	beq.n	8013d4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8013cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013cfc:	d81f      	bhi.n	8013d3e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8013cfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8013d00:	d025      	beq.n	8013d4e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8013d02:	2bc0      	cmp	r3, #192	@ 0xc0
 8013d04:	d81b      	bhi.n	8013d3e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8013d06:	2b80      	cmp	r3, #128	@ 0x80
 8013d08:	d00f      	beq.n	8013d2a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8013d0a:	2b80      	cmp	r3, #128	@ 0x80
 8013d0c:	d817      	bhi.n	8013d3e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d01f      	beq.n	8013d52 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8013d12:	2b40      	cmp	r3, #64	@ 0x40
 8013d14:	d113      	bne.n	8013d3e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013d1a:	3308      	adds	r3, #8
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f004 fded 	bl	80188fc <RCCEx_PLL2_Config>
 8013d22:	4603      	mov	r3, r0
 8013d24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8013d28:	e014      	b.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013d2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013d2e:	3330      	adds	r3, #48	@ 0x30
 8013d30:	4618      	mov	r0, r3
 8013d32:	f004 fe7b 	bl	8018a2c <RCCEx_PLL3_Config>
 8013d36:	4603      	mov	r3, r0
 8013d38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8013d3c:	e00a      	b.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013d44:	e006      	b.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8013d46:	bf00      	nop
 8013d48:	e004      	b.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8013d4a:	bf00      	nop
 8013d4c:	e002      	b.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8013d4e:	bf00      	nop
 8013d50:	e000      	b.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8013d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013d54:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d10c      	bne.n	8013d76 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8013d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8013e1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013d62:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8013d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8013e1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8013d6e:	430b      	orrs	r3, r1
 8013d70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013d74:	e003      	b.n	8013d7e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013d7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8013d7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d86:	f002 0308 	and.w	r3, r2, #8
 8013d8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8013d8e:	2300      	movs	r3, #0
 8013d90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8013d94:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8013d98:	460b      	mov	r3, r1
 8013d9a:	4313      	orrs	r3, r2
 8013d9c:	d056      	beq.n	8013e4c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8013d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013da4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8013da8:	d031      	beq.n	8013e0e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8013daa:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8013dae:	d82a      	bhi.n	8013e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8013db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013db4:	d02d      	beq.n	8013e12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8013db6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013dba:	d824      	bhi.n	8013e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8013dbc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013dc0:	d029      	beq.n	8013e16 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8013dc2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8013dc6:	d81e      	bhi.n	8013e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8013dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013dcc:	d011      	beq.n	8013df2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8013dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013dd2:	d818      	bhi.n	8013e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d023      	beq.n	8013e20 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8013dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013ddc:	d113      	bne.n	8013e06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013dde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013de2:	3308      	adds	r3, #8
 8013de4:	4618      	mov	r0, r3
 8013de6:	f004 fd89 	bl	80188fc <RCCEx_PLL2_Config>
 8013dea:	4603      	mov	r3, r0
 8013dec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8013df0:	e017      	b.n	8013e22 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013df2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013df6:	3330      	adds	r3, #48	@ 0x30
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f004 fe17 	bl	8018a2c <RCCEx_PLL3_Config>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8013e04:	e00d      	b.n	8013e22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013e06:	2301      	movs	r3, #1
 8013e08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013e0c:	e009      	b.n	8013e22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8013e0e:	bf00      	nop
 8013e10:	e007      	b.n	8013e22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8013e12:	bf00      	nop
 8013e14:	e005      	b.n	8013e22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8013e16:	bf00      	nop
 8013e18:	e003      	b.n	8013e22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8013e1a:	bf00      	nop
 8013e1c:	44020c00 	.word	0x44020c00
        break;
 8013e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013e22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d10c      	bne.n	8013e44 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8013e2a:	4bbb      	ldr	r3, [pc, #748]	@ (8014118 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013e30:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8013e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013e38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013e3a:	4ab7      	ldr	r2, [pc, #732]	@ (8014118 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013e3c:	430b      	orrs	r3, r1
 8013e3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013e42:	e003      	b.n	8013e4c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013e44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013e48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8013e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e54:	f002 0310 	and.w	r3, r2, #16
 8013e58:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013e62:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8013e66:	460b      	mov	r3, r1
 8013e68:	4313      	orrs	r3, r2
 8013e6a:	d053      	beq.n	8013f14 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8013e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e72:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013e76:	d031      	beq.n	8013edc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8013e78:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8013e7c:	d82a      	bhi.n	8013ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8013e7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013e82:	d02d      	beq.n	8013ee0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8013e84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013e88:	d824      	bhi.n	8013ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8013e8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013e8e:	d029      	beq.n	8013ee4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8013e90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013e94:	d81e      	bhi.n	8013ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8013e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013e9a:	d011      	beq.n	8013ec0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8013e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013ea0:	d818      	bhi.n	8013ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d020      	beq.n	8013ee8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8013ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013eaa:	d113      	bne.n	8013ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013eb0:	3308      	adds	r3, #8
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f004 fd22 	bl	80188fc <RCCEx_PLL2_Config>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8013ebe:	e014      	b.n	8013eea <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013ec4:	3330      	adds	r3, #48	@ 0x30
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f004 fdb0 	bl	8018a2c <RCCEx_PLL3_Config>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8013ed2:	e00a      	b.n	8013eea <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013ed4:	2301      	movs	r3, #1
 8013ed6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013eda:	e006      	b.n	8013eea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8013edc:	bf00      	nop
 8013ede:	e004      	b.n	8013eea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8013ee0:	bf00      	nop
 8013ee2:	e002      	b.n	8013eea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8013ee4:	bf00      	nop
 8013ee6:	e000      	b.n	8013eea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8013ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013eea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d10c      	bne.n	8013f0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8013ef2:	4b89      	ldr	r3, [pc, #548]	@ (8014118 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013ef4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013ef8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8013efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f02:	4a85      	ldr	r2, [pc, #532]	@ (8014118 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013f04:	430b      	orrs	r3, r1
 8013f06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013f0a:	e003      	b.n	8013f14 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013f0c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013f10:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8013f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1c:	f002 0320 	and.w	r3, r2, #32
 8013f20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8013f24:	2300      	movs	r3, #0
 8013f26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013f2a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8013f2e:	460b      	mov	r3, r1
 8013f30:	4313      	orrs	r3, r2
 8013f32:	d053      	beq.n	8013fdc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8013f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f3a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8013f3e:	d031      	beq.n	8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8013f40:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8013f44:	d82a      	bhi.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8013f46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013f4a:	d02d      	beq.n	8013fa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8013f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013f50:	d824      	bhi.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8013f52:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8013f56:	d029      	beq.n	8013fac <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8013f58:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8013f5c:	d81e      	bhi.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8013f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f62:	d011      	beq.n	8013f88 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8013f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f68:	d818      	bhi.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d020      	beq.n	8013fb0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8013f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013f72:	d113      	bne.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8013f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013f78:	3308      	adds	r3, #8
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f004 fcbe 	bl	80188fc <RCCEx_PLL2_Config>
 8013f80:	4603      	mov	r3, r0
 8013f82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8013f86:	e014      	b.n	8013fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8013f88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013f8c:	3330      	adds	r3, #48	@ 0x30
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f004 fd4c 	bl	8018a2c <RCCEx_PLL3_Config>
 8013f94:	4603      	mov	r3, r0
 8013f96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8013f9a:	e00a      	b.n	8013fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8013fa2:	e006      	b.n	8013fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8013fa4:	bf00      	nop
 8013fa6:	e004      	b.n	8013fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8013fa8:	bf00      	nop
 8013faa:	e002      	b.n	8013fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8013fac:	bf00      	nop
 8013fae:	e000      	b.n	8013fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8013fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013fb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d10c      	bne.n	8013fd4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8013fba:	4b57      	ldr	r3, [pc, #348]	@ (8014118 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013fc0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8013fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fca:	4a53      	ldr	r2, [pc, #332]	@ (8014118 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8013fcc:	430b      	orrs	r3, r1
 8013fce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013fd2:	e003      	b.n	8013fdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013fd4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8013fd8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8013fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8013fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8013fe8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8013fec:	2300      	movs	r3, #0
 8013fee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013ff2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8013ff6:	460b      	mov	r3, r1
 8013ff8:	4313      	orrs	r3, r2
 8013ffa:	d053      	beq.n	80140a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8013ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014002:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8014006:	d031      	beq.n	801406c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8014008:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 801400c:	d82a      	bhi.n	8014064 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 801400e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014012:	d02d      	beq.n	8014070 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8014014:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014018:	d824      	bhi.n	8014064 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 801401a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 801401e:	d029      	beq.n	8014074 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8014020:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8014024:	d81e      	bhi.n	8014064 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8014026:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801402a:	d011      	beq.n	8014050 <HAL_RCCEx_PeriphCLKConfig+0x598>
 801402c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8014030:	d818      	bhi.n	8014064 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8014032:	2b00      	cmp	r3, #0
 8014034:	d020      	beq.n	8014078 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8014036:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801403a:	d113      	bne.n	8014064 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801403c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014040:	3308      	adds	r3, #8
 8014042:	4618      	mov	r0, r3
 8014044:	f004 fc5a 	bl	80188fc <RCCEx_PLL2_Config>
 8014048:	4603      	mov	r3, r0
 801404a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 801404e:	e014      	b.n	801407a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014050:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014054:	3330      	adds	r3, #48	@ 0x30
 8014056:	4618      	mov	r0, r3
 8014058:	f004 fce8 	bl	8018a2c <RCCEx_PLL3_Config>
 801405c:	4603      	mov	r3, r0
 801405e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8014062:	e00a      	b.n	801407a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014064:	2301      	movs	r3, #1
 8014066:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801406a:	e006      	b.n	801407a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 801406c:	bf00      	nop
 801406e:	e004      	b.n	801407a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8014070:	bf00      	nop
 8014072:	e002      	b.n	801407a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8014074:	bf00      	nop
 8014076:	e000      	b.n	801407a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8014078:	bf00      	nop
    }

    if (ret == HAL_OK)
 801407a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801407e:	2b00      	cmp	r3, #0
 8014080:	d10c      	bne.n	801409c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8014082:	4b25      	ldr	r3, [pc, #148]	@ (8014118 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8014084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014088:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 801408c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014092:	4a21      	ldr	r2, [pc, #132]	@ (8014118 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8014094:	430b      	orrs	r3, r1
 8014096:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801409a:	e003      	b.n	80140a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801409c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80140a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80140a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80140a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80140b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80140b4:	2300      	movs	r3, #0
 80140b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80140ba:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80140be:	460b      	mov	r3, r1
 80140c0:	4313      	orrs	r3, r2
 80140c2:	d055      	beq.n	8014170 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80140c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80140c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80140ca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80140ce:	d033      	beq.n	8014138 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80140d0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80140d4:	d82c      	bhi.n	8014130 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80140d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80140da:	d02f      	beq.n	801413c <HAL_RCCEx_PeriphCLKConfig+0x684>
 80140dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80140e0:	d826      	bhi.n	8014130 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80140e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80140e6:	d02b      	beq.n	8014140 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80140e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80140ec:	d820      	bhi.n	8014130 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80140ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80140f2:	d013      	beq.n	801411c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80140f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80140f8:	d81a      	bhi.n	8014130 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d022      	beq.n	8014144 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80140fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014102:	d115      	bne.n	8014130 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014104:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014108:	3308      	adds	r3, #8
 801410a:	4618      	mov	r0, r3
 801410c:	f004 fbf6 	bl	80188fc <RCCEx_PLL2_Config>
 8014110:	4603      	mov	r3, r0
 8014112:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8014116:	e016      	b.n	8014146 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8014118:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801411c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014120:	3330      	adds	r3, #48	@ 0x30
 8014122:	4618      	mov	r0, r3
 8014124:	f004 fc82 	bl	8018a2c <RCCEx_PLL3_Config>
 8014128:	4603      	mov	r3, r0
 801412a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 801412e:	e00a      	b.n	8014146 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014130:	2301      	movs	r3, #1
 8014132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014136:	e006      	b.n	8014146 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8014138:	bf00      	nop
 801413a:	e004      	b.n	8014146 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 801413c:	bf00      	nop
 801413e:	e002      	b.n	8014146 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8014140:	bf00      	nop
 8014142:	e000      	b.n	8014146 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8014144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014146:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801414a:	2b00      	cmp	r3, #0
 801414c:	d10c      	bne.n	8014168 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 801414e:	4bbb      	ldr	r3, [pc, #748]	@ (801443c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8014150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014154:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8014158:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801415c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801415e:	4ab7      	ldr	r2, [pc, #732]	@ (801443c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8014160:	430b      	orrs	r3, r1
 8014162:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8014166:	e003      	b.n	8014170 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014168:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801416c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8014170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014178:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 801417c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8014180:	2300      	movs	r3, #0
 8014182:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8014186:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 801418a:	460b      	mov	r3, r1
 801418c:	4313      	orrs	r3, r2
 801418e:	d053      	beq.n	8014238 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8014190:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014196:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801419a:	d031      	beq.n	8014200 <HAL_RCCEx_PeriphCLKConfig+0x748>
 801419c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80141a0:	d82a      	bhi.n	80141f8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80141a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80141a6:	d02d      	beq.n	8014204 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80141a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80141ac:	d824      	bhi.n	80141f8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80141ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80141b2:	d029      	beq.n	8014208 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80141b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80141b8:	d81e      	bhi.n	80141f8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80141ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80141be:	d011      	beq.n	80141e4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80141c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80141c4:	d818      	bhi.n	80141f8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d020      	beq.n	801420c <HAL_RCCEx_PeriphCLKConfig+0x754>
 80141ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80141ce:	d113      	bne.n	80141f8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80141d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80141d4:	3308      	adds	r3, #8
 80141d6:	4618      	mov	r0, r3
 80141d8:	f004 fb90 	bl	80188fc <RCCEx_PLL2_Config>
 80141dc:	4603      	mov	r3, r0
 80141de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80141e2:	e014      	b.n	801420e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80141e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80141e8:	3330      	adds	r3, #48	@ 0x30
 80141ea:	4618      	mov	r0, r3
 80141ec:	f004 fc1e 	bl	8018a2c <RCCEx_PLL3_Config>
 80141f0:	4603      	mov	r3, r0
 80141f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80141f6:	e00a      	b.n	801420e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80141f8:	2301      	movs	r3, #1
 80141fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80141fe:	e006      	b.n	801420e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8014200:	bf00      	nop
 8014202:	e004      	b.n	801420e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8014204:	bf00      	nop
 8014206:	e002      	b.n	801420e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8014208:	bf00      	nop
 801420a:	e000      	b.n	801420e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 801420c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801420e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014212:	2b00      	cmp	r3, #0
 8014214:	d10c      	bne.n	8014230 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8014216:	4b89      	ldr	r3, [pc, #548]	@ (801443c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8014218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801421c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8014220:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014226:	4a85      	ldr	r2, [pc, #532]	@ (801443c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8014228:	430b      	orrs	r3, r1
 801422a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801422e:	e003      	b.n	8014238 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014230:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014234:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8014238:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014240:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8014244:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8014248:	2300      	movs	r3, #0
 801424a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801424e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8014252:	460b      	mov	r3, r1
 8014254:	4313      	orrs	r3, r2
 8014256:	d055      	beq.n	8014304 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8014258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801425c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014260:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8014264:	d031      	beq.n	80142ca <HAL_RCCEx_PeriphCLKConfig+0x812>
 8014266:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 801426a:	d82a      	bhi.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 801426c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014270:	d02d      	beq.n	80142ce <HAL_RCCEx_PeriphCLKConfig+0x816>
 8014272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014276:	d824      	bhi.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8014278:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 801427c:	d029      	beq.n	80142d2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 801427e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8014282:	d81e      	bhi.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8014284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014288:	d011      	beq.n	80142ae <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 801428a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801428e:	d818      	bhi.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8014290:	2b00      	cmp	r3, #0
 8014292:	d020      	beq.n	80142d6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8014294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014298:	d113      	bne.n	80142c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801429a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801429e:	3308      	adds	r3, #8
 80142a0:	4618      	mov	r0, r3
 80142a2:	f004 fb2b 	bl	80188fc <RCCEx_PLL2_Config>
 80142a6:	4603      	mov	r3, r0
 80142a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80142ac:	e014      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80142ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80142b2:	3330      	adds	r3, #48	@ 0x30
 80142b4:	4618      	mov	r0, r3
 80142b6:	f004 fbb9 	bl	8018a2c <RCCEx_PLL3_Config>
 80142ba:	4603      	mov	r3, r0
 80142bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80142c0:	e00a      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80142c2:	2301      	movs	r3, #1
 80142c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80142c8:	e006      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80142ca:	bf00      	nop
 80142cc:	e004      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80142ce:	bf00      	nop
 80142d0:	e002      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80142d2:	bf00      	nop
 80142d4:	e000      	b.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80142d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80142d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d10d      	bne.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80142e0:	4b56      	ldr	r3, [pc, #344]	@ (801443c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80142e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80142e6:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80142ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80142ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80142f2:	4a52      	ldr	r2, [pc, #328]	@ (801443c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80142f4:	430b      	orrs	r3, r1
 80142f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80142fa:	e003      	b.n	8014304 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80142fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014300:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8014304:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8014310:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8014314:	2300      	movs	r3, #0
 8014316:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801431a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801431e:	460b      	mov	r3, r1
 8014320:	4313      	orrs	r3, r2
 8014322:	d044      	beq.n	80143ae <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8014324:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801432c:	2b05      	cmp	r3, #5
 801432e:	d823      	bhi.n	8014378 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8014330:	a201      	add	r2, pc, #4	@ (adr r2, 8014338 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8014332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014336:	bf00      	nop
 8014338:	08014381 	.word	0x08014381
 801433c:	08014351 	.word	0x08014351
 8014340:	08014365 	.word	0x08014365
 8014344:	08014381 	.word	0x08014381
 8014348:	08014381 	.word	0x08014381
 801434c:	08014381 	.word	0x08014381
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014354:	3308      	adds	r3, #8
 8014356:	4618      	mov	r0, r3
 8014358:	f004 fad0 	bl	80188fc <RCCEx_PLL2_Config>
 801435c:	4603      	mov	r3, r0
 801435e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8014362:	e00e      	b.n	8014382 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014368:	3330      	adds	r3, #48	@ 0x30
 801436a:	4618      	mov	r0, r3
 801436c:	f004 fb5e 	bl	8018a2c <RCCEx_PLL3_Config>
 8014370:	4603      	mov	r3, r0
 8014372:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8014376:	e004      	b.n	8014382 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014378:	2301      	movs	r3, #1
 801437a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801437e:	e000      	b.n	8014382 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8014380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014382:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014386:	2b00      	cmp	r3, #0
 8014388:	d10d      	bne.n	80143a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 801438a:	4b2c      	ldr	r3, [pc, #176]	@ (801443c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 801438c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014390:	f023 0107 	bic.w	r1, r3, #7
 8014394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801439c:	4a27      	ldr	r2, [pc, #156]	@ (801443c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 801439e:	430b      	orrs	r3, r1
 80143a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80143a4:	e003      	b.n	80143ae <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80143a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80143aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80143ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80143b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80143ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80143be:	2300      	movs	r3, #0
 80143c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80143c4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80143c8:	460b      	mov	r3, r1
 80143ca:	4313      	orrs	r3, r2
 80143cc:	d04f      	beq.n	801446e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80143ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80143d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80143d6:	2b50      	cmp	r3, #80	@ 0x50
 80143d8:	d029      	beq.n	801442e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80143da:	2b50      	cmp	r3, #80	@ 0x50
 80143dc:	d823      	bhi.n	8014426 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80143de:	2b40      	cmp	r3, #64	@ 0x40
 80143e0:	d027      	beq.n	8014432 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80143e2:	2b40      	cmp	r3, #64	@ 0x40
 80143e4:	d81f      	bhi.n	8014426 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80143e6:	2b30      	cmp	r3, #48	@ 0x30
 80143e8:	d025      	beq.n	8014436 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80143ea:	2b30      	cmp	r3, #48	@ 0x30
 80143ec:	d81b      	bhi.n	8014426 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80143ee:	2b20      	cmp	r3, #32
 80143f0:	d00f      	beq.n	8014412 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80143f2:	2b20      	cmp	r3, #32
 80143f4:	d817      	bhi.n	8014426 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d022      	beq.n	8014440 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80143fa:	2b10      	cmp	r3, #16
 80143fc:	d113      	bne.n	8014426 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80143fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014402:	3308      	adds	r3, #8
 8014404:	4618      	mov	r0, r3
 8014406:	f004 fa79 	bl	80188fc <RCCEx_PLL2_Config>
 801440a:	4603      	mov	r3, r0
 801440c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8014410:	e017      	b.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014412:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014416:	3330      	adds	r3, #48	@ 0x30
 8014418:	4618      	mov	r0, r3
 801441a:	f004 fb07 	bl	8018a2c <RCCEx_PLL3_Config>
 801441e:	4603      	mov	r3, r0
 8014420:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8014424:	e00d      	b.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014426:	2301      	movs	r3, #1
 8014428:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801442c:	e009      	b.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 801442e:	bf00      	nop
 8014430:	e007      	b.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8014432:	bf00      	nop
 8014434:	e005      	b.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8014436:	bf00      	nop
 8014438:	e003      	b.n	8014442 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 801443a:	bf00      	nop
 801443c:	44020c00 	.word	0x44020c00
        break;
 8014440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014442:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014446:	2b00      	cmp	r3, #0
 8014448:	d10d      	bne.n	8014466 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 801444a:	4baf      	ldr	r3, [pc, #700]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 801444c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014450:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8014454:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801445c:	4aaa      	ldr	r2, [pc, #680]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 801445e:	430b      	orrs	r3, r1
 8014460:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014464:	e003      	b.n	801446e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014466:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801446a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801446e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014476:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801447a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801447e:	2300      	movs	r3, #0
 8014480:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8014484:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8014488:	460b      	mov	r3, r1
 801448a:	4313      	orrs	r3, r2
 801448c:	d055      	beq.n	801453a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 801448e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014496:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801449a:	d031      	beq.n	8014500 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 801449c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80144a0:	d82a      	bhi.n	80144f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80144a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80144a6:	d02d      	beq.n	8014504 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80144a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80144ac:	d824      	bhi.n	80144f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80144ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80144b2:	d029      	beq.n	8014508 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80144b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80144b8:	d81e      	bhi.n	80144f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80144ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80144be:	d011      	beq.n	80144e4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80144c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80144c4:	d818      	bhi.n	80144f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d020      	beq.n	801450c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80144ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80144ce:	d113      	bne.n	80144f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80144d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80144d4:	3308      	adds	r3, #8
 80144d6:	4618      	mov	r0, r3
 80144d8:	f004 fa10 	bl	80188fc <RCCEx_PLL2_Config>
 80144dc:	4603      	mov	r3, r0
 80144de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80144e2:	e014      	b.n	801450e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80144e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80144e8:	3330      	adds	r3, #48	@ 0x30
 80144ea:	4618      	mov	r0, r3
 80144ec:	f004 fa9e 	bl	8018a2c <RCCEx_PLL3_Config>
 80144f0:	4603      	mov	r3, r0
 80144f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80144f6:	e00a      	b.n	801450e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80144f8:	2301      	movs	r3, #1
 80144fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80144fe:	e006      	b.n	801450e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8014500:	bf00      	nop
 8014502:	e004      	b.n	801450e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8014504:	bf00      	nop
 8014506:	e002      	b.n	801450e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8014508:	bf00      	nop
 801450a:	e000      	b.n	801450e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 801450c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801450e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014512:	2b00      	cmp	r3, #0
 8014514:	d10d      	bne.n	8014532 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8014516:	4b7c      	ldr	r3, [pc, #496]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8014518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801451c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8014520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014528:	4a77      	ldr	r2, [pc, #476]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 801452a:	430b      	orrs	r3, r1
 801452c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014530:	e003      	b.n	801453a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014532:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014536:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801453a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014542:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8014546:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801454a:	2300      	movs	r3, #0
 801454c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8014550:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8014554:	460b      	mov	r3, r1
 8014556:	4313      	orrs	r3, r2
 8014558:	d03d      	beq.n	80145d6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 801455a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014562:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014566:	d01b      	beq.n	80145a0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8014568:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801456c:	d814      	bhi.n	8014598 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 801456e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014572:	d017      	beq.n	80145a4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8014574:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014578:	d80e      	bhi.n	8014598 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 801457a:	2b00      	cmp	r3, #0
 801457c:	d014      	beq.n	80145a8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 801457e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014582:	d109      	bne.n	8014598 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014584:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014588:	3330      	adds	r3, #48	@ 0x30
 801458a:	4618      	mov	r0, r3
 801458c:	f004 fa4e 	bl	8018a2c <RCCEx_PLL3_Config>
 8014590:	4603      	mov	r3, r0
 8014592:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8014596:	e008      	b.n	80145aa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014598:	2301      	movs	r3, #1
 801459a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801459e:	e004      	b.n	80145aa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80145a0:	bf00      	nop
 80145a2:	e002      	b.n	80145aa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80145a4:	bf00      	nop
 80145a6:	e000      	b.n	80145aa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80145a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80145aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d10d      	bne.n	80145ce <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80145b2:	4b55      	ldr	r3, [pc, #340]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80145b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80145b8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80145bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80145c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80145c4:	4a50      	ldr	r2, [pc, #320]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80145c6:	430b      	orrs	r3, r1
 80145c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80145cc:	e003      	b.n	80145d6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80145ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80145d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80145d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80145da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145de:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80145e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80145e6:	2300      	movs	r3, #0
 80145e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80145ec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80145f0:	460b      	mov	r3, r1
 80145f2:	4313      	orrs	r3, r2
 80145f4:	d03d      	beq.n	8014672 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80145f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80145fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80145fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8014602:	d01b      	beq.n	801463c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8014604:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8014608:	d814      	bhi.n	8014634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 801460a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801460e:	d017      	beq.n	8014640 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8014610:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8014614:	d80e      	bhi.n	8014634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8014616:	2b00      	cmp	r3, #0
 8014618:	d014      	beq.n	8014644 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 801461a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801461e:	d109      	bne.n	8014634 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014620:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014624:	3330      	adds	r3, #48	@ 0x30
 8014626:	4618      	mov	r0, r3
 8014628:	f004 fa00 	bl	8018a2c <RCCEx_PLL3_Config>
 801462c:	4603      	mov	r3, r0
 801462e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8014632:	e008      	b.n	8014646 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014634:	2301      	movs	r3, #1
 8014636:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801463a:	e004      	b.n	8014646 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 801463c:	bf00      	nop
 801463e:	e002      	b.n	8014646 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8014640:	bf00      	nop
 8014642:	e000      	b.n	8014646 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8014644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014646:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801464a:	2b00      	cmp	r3, #0
 801464c:	d10d      	bne.n	801466a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 801464e:	4b2e      	ldr	r3, [pc, #184]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8014650:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8014654:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8014658:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801465c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014660:	4a29      	ldr	r2, [pc, #164]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8014662:	430b      	orrs	r3, r1
 8014664:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8014668:	e003      	b.n	8014672 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801466a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801466e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014672:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801467e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014682:	2300      	movs	r3, #0
 8014684:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8014688:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801468c:	460b      	mov	r3, r1
 801468e:	4313      	orrs	r3, r2
 8014690:	d040      	beq.n	8014714 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8014692:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014696:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801469a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801469e:	d01b      	beq.n	80146d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80146a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80146a4:	d814      	bhi.n	80146d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80146a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80146aa:	d017      	beq.n	80146dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80146ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80146b0:	d80e      	bhi.n	80146d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d014      	beq.n	80146e0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80146b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80146ba:	d109      	bne.n	80146d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80146bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80146c0:	3330      	adds	r3, #48	@ 0x30
 80146c2:	4618      	mov	r0, r3
 80146c4:	f004 f9b2 	bl	8018a2c <RCCEx_PLL3_Config>
 80146c8:	4603      	mov	r3, r0
 80146ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80146ce:	e008      	b.n	80146e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80146d0:	2301      	movs	r3, #1
 80146d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80146d6:	e004      	b.n	80146e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80146d8:	bf00      	nop
 80146da:	e002      	b.n	80146e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80146dc:	bf00      	nop
 80146de:	e000      	b.n	80146e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80146e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80146e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d110      	bne.n	801470c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80146ea:	4b07      	ldr	r3, [pc, #28]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80146ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80146f0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80146f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80146f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80146fc:	4a02      	ldr	r2, [pc, #8]	@ (8014708 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80146fe:	430b      	orrs	r3, r1
 8014700:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8014704:	e006      	b.n	8014714 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8014706:	bf00      	nop
 8014708:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 801470c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014710:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8014714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471c:	2100      	movs	r1, #0
 801471e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8014722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801472a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801472e:	460b      	mov	r3, r1
 8014730:	4313      	orrs	r3, r2
 8014732:	d03d      	beq.n	80147b0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8014734:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014738:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801473c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8014740:	d01b      	beq.n	801477a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8014742:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8014746:	d814      	bhi.n	8014772 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8014748:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801474c:	d017      	beq.n	801477e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 801474e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014752:	d80e      	bhi.n	8014772 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8014754:	2b00      	cmp	r3, #0
 8014756:	d014      	beq.n	8014782 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8014758:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801475c:	d109      	bne.n	8014772 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801475e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014762:	3330      	adds	r3, #48	@ 0x30
 8014764:	4618      	mov	r0, r3
 8014766:	f004 f961 	bl	8018a2c <RCCEx_PLL3_Config>
 801476a:	4603      	mov	r3, r0
 801476c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8014770:	e008      	b.n	8014784 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014772:	2301      	movs	r3, #1
 8014774:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014778:	e004      	b.n	8014784 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 801477a:	bf00      	nop
 801477c:	e002      	b.n	8014784 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 801477e:	bf00      	nop
 8014780:	e000      	b.n	8014784 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8014782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014784:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014788:	2b00      	cmp	r3, #0
 801478a:	d10d      	bne.n	80147a8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 801478c:	4bbe      	ldr	r3, [pc, #760]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 801478e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8014792:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8014796:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801479a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801479e:	4aba      	ldr	r2, [pc, #744]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80147a0:	430b      	orrs	r3, r1
 80147a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80147a6:	e003      	b.n	80147b0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80147a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80147ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80147b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80147b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80147bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80147c0:	2300      	movs	r3, #0
 80147c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80147c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80147ca:	460b      	mov	r3, r1
 80147cc:	4313      	orrs	r3, r2
 80147ce:	d035      	beq.n	801483c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80147d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80147d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80147d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80147dc:	d015      	beq.n	801480a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80147de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80147e2:	d80e      	bhi.n	8014802 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d012      	beq.n	801480e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80147e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80147ec:	d109      	bne.n	8014802 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80147ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80147f2:	3330      	adds	r3, #48	@ 0x30
 80147f4:	4618      	mov	r0, r3
 80147f6:	f004 f919 	bl	8018a2c <RCCEx_PLL3_Config>
 80147fa:	4603      	mov	r3, r0
 80147fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8014800:	e006      	b.n	8014810 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014802:	2301      	movs	r3, #1
 8014804:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014808:	e002      	b.n	8014810 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 801480a:	bf00      	nop
 801480c:	e000      	b.n	8014810 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 801480e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014810:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014814:	2b00      	cmp	r3, #0
 8014816:	d10d      	bne.n	8014834 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8014818:	4b9b      	ldr	r3, [pc, #620]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 801481a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801481e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8014822:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801482a:	4a97      	ldr	r2, [pc, #604]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 801482c:	430b      	orrs	r3, r1
 801482e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8014832:	e003      	b.n	801483c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014834:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014838:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801483c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014844:	2100      	movs	r1, #0
 8014846:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 801484a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801484e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8014852:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8014856:	460b      	mov	r3, r1
 8014858:	4313      	orrs	r3, r2
 801485a:	d00e      	beq.n	801487a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 801485c:	4b8a      	ldr	r3, [pc, #552]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 801485e:	69db      	ldr	r3, [r3, #28]
 8014860:	4a89      	ldr	r2, [pc, #548]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014862:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8014866:	61d3      	str	r3, [r2, #28]
 8014868:	4b87      	ldr	r3, [pc, #540]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 801486a:	69d9      	ldr	r1, [r3, #28]
 801486c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014870:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8014874:	4a84      	ldr	r2, [pc, #528]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014876:	430b      	orrs	r3, r1
 8014878:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801487a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014882:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8014886:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801488a:	2300      	movs	r3, #0
 801488c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8014890:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8014894:	460b      	mov	r3, r1
 8014896:	4313      	orrs	r3, r2
 8014898:	d055      	beq.n	8014946 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 801489a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801489e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80148a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80148a6:	d031      	beq.n	801490c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80148a8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80148ac:	d82a      	bhi.n	8014904 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80148ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80148b2:	d02d      	beq.n	8014910 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80148b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80148b8:	d824      	bhi.n	8014904 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80148ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80148be:	d029      	beq.n	8014914 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80148c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80148c4:	d81e      	bhi.n	8014904 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80148c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80148ca:	d011      	beq.n	80148f0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80148cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80148d0:	d818      	bhi.n	8014904 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d020      	beq.n	8014918 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80148d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80148da:	d113      	bne.n	8014904 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80148dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80148e0:	3308      	adds	r3, #8
 80148e2:	4618      	mov	r0, r3
 80148e4:	f004 f80a 	bl	80188fc <RCCEx_PLL2_Config>
 80148e8:	4603      	mov	r3, r0
 80148ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80148ee:	e014      	b.n	801491a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80148f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80148f4:	3330      	adds	r3, #48	@ 0x30
 80148f6:	4618      	mov	r0, r3
 80148f8:	f004 f898 	bl	8018a2c <RCCEx_PLL3_Config>
 80148fc:	4603      	mov	r3, r0
 80148fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8014902:	e00a      	b.n	801491a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014904:	2301      	movs	r3, #1
 8014906:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801490a:	e006      	b.n	801491a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 801490c:	bf00      	nop
 801490e:	e004      	b.n	801491a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8014910:	bf00      	nop
 8014912:	e002      	b.n	801491a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8014914:	bf00      	nop
 8014916:	e000      	b.n	801491a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8014918:	bf00      	nop
    }

    if (ret == HAL_OK)
 801491a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801491e:	2b00      	cmp	r3, #0
 8014920:	d10d      	bne.n	801493e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8014922:	4b59      	ldr	r3, [pc, #356]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014924:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014928:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 801492c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014930:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014934:	4a54      	ldr	r2, [pc, #336]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014936:	430b      	orrs	r3, r1
 8014938:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 801493c:	e003      	b.n	8014946 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801493e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014942:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8014946:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8014952:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014956:	2300      	movs	r3, #0
 8014958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801495c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8014960:	460b      	mov	r3, r1
 8014962:	4313      	orrs	r3, r2
 8014964:	d055      	beq.n	8014a12 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8014966:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801496a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801496e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8014972:	d031      	beq.n	80149d8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8014974:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8014978:	d82a      	bhi.n	80149d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 801497a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801497e:	d02d      	beq.n	80149dc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8014980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014984:	d824      	bhi.n	80149d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8014986:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801498a:	d029      	beq.n	80149e0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 801498c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014990:	d81e      	bhi.n	80149d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8014992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014996:	d011      	beq.n	80149bc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8014998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801499c:	d818      	bhi.n	80149d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d020      	beq.n	80149e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80149a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80149a6:	d113      	bne.n	80149d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80149a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80149ac:	3308      	adds	r3, #8
 80149ae:	4618      	mov	r0, r3
 80149b0:	f003 ffa4 	bl	80188fc <RCCEx_PLL2_Config>
 80149b4:	4603      	mov	r3, r0
 80149b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80149ba:	e014      	b.n	80149e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80149bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80149c0:	3330      	adds	r3, #48	@ 0x30
 80149c2:	4618      	mov	r0, r3
 80149c4:	f004 f832 	bl	8018a2c <RCCEx_PLL3_Config>
 80149c8:	4603      	mov	r3, r0
 80149ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80149ce:	e00a      	b.n	80149e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80149d0:	2301      	movs	r3, #1
 80149d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80149d6:	e006      	b.n	80149e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80149d8:	bf00      	nop
 80149da:	e004      	b.n	80149e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80149dc:	bf00      	nop
 80149de:	e002      	b.n	80149e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80149e0:	bf00      	nop
 80149e2:	e000      	b.n	80149e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80149e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80149e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d10d      	bne.n	8014a0a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80149ee:	4b26      	ldr	r3, [pc, #152]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80149f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80149f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80149f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80149fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014a00:	4a21      	ldr	r2, [pc, #132]	@ (8014a88 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8014a02:	430b      	orrs	r3, r1
 8014a04:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014a08:	e003      	b.n	8014a12 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014a0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014a0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8014a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1a:	2100      	movs	r1, #0
 8014a1c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8014a20:	f003 0320 	and.w	r3, r3, #32
 8014a24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8014a2c:	460b      	mov	r3, r1
 8014a2e:	4313      	orrs	r3, r2
 8014a30:	d057      	beq.n	8014ae2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8014a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014a3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014a3e:	d033      	beq.n	8014aa8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8014a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014a44:	d82c      	bhi.n	8014aa0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8014a46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014a4a:	d02f      	beq.n	8014aac <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8014a4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014a50:	d826      	bhi.n	8014aa0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8014a52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014a56:	d02b      	beq.n	8014ab0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8014a58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014a5c:	d820      	bhi.n	8014aa0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8014a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014a62:	d013      	beq.n	8014a8c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8014a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014a68:	d81a      	bhi.n	8014aa0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d022      	beq.n	8014ab4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8014a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014a72:	d115      	bne.n	8014aa0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014a78:	3308      	adds	r3, #8
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f003 ff3e 	bl	80188fc <RCCEx_PLL2_Config>
 8014a80:	4603      	mov	r3, r0
 8014a82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8014a86:	e016      	b.n	8014ab6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8014a88:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014a90:	3330      	adds	r3, #48	@ 0x30
 8014a92:	4618      	mov	r0, r3
 8014a94:	f003 ffca 	bl	8018a2c <RCCEx_PLL3_Config>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8014a9e:	e00a      	b.n	8014ab6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014aa6:	e006      	b.n	8014ab6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8014aa8:	bf00      	nop
 8014aaa:	e004      	b.n	8014ab6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8014aac:	bf00      	nop
 8014aae:	e002      	b.n	8014ab6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8014ab0:	bf00      	nop
 8014ab2:	e000      	b.n	8014ab6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8014ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014ab6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d10d      	bne.n	8014ada <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8014abe:	4bbb      	ldr	r3, [pc, #748]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014ac0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014ac4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8014ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014acc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014ad0:	4ab6      	ldr	r2, [pc, #728]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014ad2:	430b      	orrs	r3, r1
 8014ad4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014ad8:	e003      	b.n	8014ae2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ada:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014ade:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8014ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aea:	2100      	movs	r1, #0
 8014aec:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8014af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014af4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8014af8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8014afc:	460b      	mov	r3, r1
 8014afe:	4313      	orrs	r3, r2
 8014b00:	d055      	beq.n	8014bae <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8014b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014b0a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8014b0e:	d031      	beq.n	8014b74 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8014b10:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8014b14:	d82a      	bhi.n	8014b6c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8014b16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014b1a:	d02d      	beq.n	8014b78 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8014b1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014b20:	d824      	bhi.n	8014b6c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8014b22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014b26:	d029      	beq.n	8014b7c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8014b28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014b2c:	d81e      	bhi.n	8014b6c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8014b2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014b32:	d011      	beq.n	8014b58 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8014b34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014b38:	d818      	bhi.n	8014b6c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d020      	beq.n	8014b80 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8014b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014b42:	d113      	bne.n	8014b6c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014b44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014b48:	3308      	adds	r3, #8
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f003 fed6 	bl	80188fc <RCCEx_PLL2_Config>
 8014b50:	4603      	mov	r3, r0
 8014b52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8014b56:	e014      	b.n	8014b82 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014b5c:	3330      	adds	r3, #48	@ 0x30
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f003 ff64 	bl	8018a2c <RCCEx_PLL3_Config>
 8014b64:	4603      	mov	r3, r0
 8014b66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8014b6a:	e00a      	b.n	8014b82 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014b72:	e006      	b.n	8014b82 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8014b74:	bf00      	nop
 8014b76:	e004      	b.n	8014b82 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8014b78:	bf00      	nop
 8014b7a:	e002      	b.n	8014b82 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8014b7c:	bf00      	nop
 8014b7e:	e000      	b.n	8014b82 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8014b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014b82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d10d      	bne.n	8014ba6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8014b8a:	4b88      	ldr	r3, [pc, #544]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014b8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014b90:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8014b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014b9c:	4a83      	ldr	r2, [pc, #524]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014b9e:	430b      	orrs	r3, r1
 8014ba0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014ba4:	e003      	b.n	8014bae <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ba6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014baa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8014bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb6:	2100      	movs	r1, #0
 8014bb8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8014bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014bc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014bc4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8014bc8:	460b      	mov	r3, r1
 8014bca:	4313      	orrs	r3, r2
 8014bcc:	d055      	beq.n	8014c7a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8014bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014bd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014bd6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8014bda:	d031      	beq.n	8014c40 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8014bdc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8014be0:	d82a      	bhi.n	8014c38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8014be2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014be6:	d02d      	beq.n	8014c44 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8014be8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014bec:	d824      	bhi.n	8014c38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8014bee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014bf2:	d029      	beq.n	8014c48 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8014bf4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014bf8:	d81e      	bhi.n	8014c38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8014bfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014bfe:	d011      	beq.n	8014c24 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8014c00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014c04:	d818      	bhi.n	8014c38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d020      	beq.n	8014c4c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8014c0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014c0e:	d113      	bne.n	8014c38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c14:	3308      	adds	r3, #8
 8014c16:	4618      	mov	r0, r3
 8014c18:	f003 fe70 	bl	80188fc <RCCEx_PLL2_Config>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8014c22:	e014      	b.n	8014c4e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c28:	3330      	adds	r3, #48	@ 0x30
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f003 fefe 	bl	8018a2c <RCCEx_PLL3_Config>
 8014c30:	4603      	mov	r3, r0
 8014c32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8014c36:	e00a      	b.n	8014c4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014c3e:	e006      	b.n	8014c4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8014c40:	bf00      	nop
 8014c42:	e004      	b.n	8014c4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8014c44:	bf00      	nop
 8014c46:	e002      	b.n	8014c4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8014c48:	bf00      	nop
 8014c4a:	e000      	b.n	8014c4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8014c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014c4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d10d      	bne.n	8014c72 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8014c56:	4b55      	ldr	r3, [pc, #340]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014c58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014c5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8014c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014c68:	4a50      	ldr	r2, [pc, #320]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014c6a:	430b      	orrs	r3, r1
 8014c6c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014c70:	e003      	b.n	8014c7a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014c76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8014c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c82:	2100      	movs	r1, #0
 8014c84:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8014c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014c90:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8014c94:	460b      	mov	r3, r1
 8014c96:	4313      	orrs	r3, r2
 8014c98:	d055      	beq.n	8014d46 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8014c9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014c9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014ca6:	d031      	beq.n	8014d0c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8014ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014cac:	d82a      	bhi.n	8014d04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8014cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014cb2:	d02d      	beq.n	8014d10 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8014cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014cb8:	d824      	bhi.n	8014d04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8014cba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014cbe:	d029      	beq.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8014cc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014cc4:	d81e      	bhi.n	8014d04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8014cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014cca:	d011      	beq.n	8014cf0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8014ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014cd0:	d818      	bhi.n	8014d04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d020      	beq.n	8014d18 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8014cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014cda:	d113      	bne.n	8014d04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014ce0:	3308      	adds	r3, #8
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f003 fe0a 	bl	80188fc <RCCEx_PLL2_Config>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8014cee:	e014      	b.n	8014d1a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014cf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014cf4:	3330      	adds	r3, #48	@ 0x30
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f003 fe98 	bl	8018a2c <RCCEx_PLL3_Config>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8014d02:	e00a      	b.n	8014d1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014d04:	2301      	movs	r3, #1
 8014d06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014d0a:	e006      	b.n	8014d1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8014d0c:	bf00      	nop
 8014d0e:	e004      	b.n	8014d1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8014d10:	bf00      	nop
 8014d12:	e002      	b.n	8014d1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8014d14:	bf00      	nop
 8014d16:	e000      	b.n	8014d1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8014d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d10d      	bne.n	8014d3e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8014d22:	4b22      	ldr	r3, [pc, #136]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014d24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014d28:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8014d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014d30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014d34:	4a1d      	ldr	r2, [pc, #116]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014d36:	430b      	orrs	r3, r1
 8014d38:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8014d3c:	e003      	b.n	8014d46 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014d42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8014d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d4e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8014d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014d56:	2300      	movs	r3, #0
 8014d58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014d5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8014d60:	460b      	mov	r3, r1
 8014d62:	4313      	orrs	r3, r2
 8014d64:	d055      	beq.n	8014e12 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8014d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014d6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014d6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014d72:	d035      	beq.n	8014de0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8014d74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014d78:	d82e      	bhi.n	8014dd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8014d7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014d7e:	d031      	beq.n	8014de4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8014d80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014d84:	d828      	bhi.n	8014dd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8014d86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014d8a:	d01b      	beq.n	8014dc4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8014d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014d90:	d822      	bhi.n	8014dd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d003      	beq.n	8014d9e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8014d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d9a:	d009      	beq.n	8014db0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8014d9c:	e01c      	b.n	8014dd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014d9e:	4b03      	ldr	r3, [pc, #12]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014da2:	4a02      	ldr	r2, [pc, #8]	@ (8014dac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8014da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014da8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8014daa:	e01c      	b.n	8014de6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8014dac:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014db4:	3308      	adds	r3, #8
 8014db6:	4618      	mov	r0, r3
 8014db8:	f003 fda0 	bl	80188fc <RCCEx_PLL2_Config>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8014dc2:	e010      	b.n	8014de6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014dc8:	3330      	adds	r3, #48	@ 0x30
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f003 fe2e 	bl	8018a2c <RCCEx_PLL3_Config>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8014dd6:	e006      	b.n	8014de6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014dd8:	2301      	movs	r3, #1
 8014dda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014dde:	e002      	b.n	8014de6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8014de0:	bf00      	nop
 8014de2:	e000      	b.n	8014de6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8014de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014de6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d10d      	bne.n	8014e0a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8014dee:	4bc3      	ldr	r3, [pc, #780]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014df4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8014df8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014dfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014e00:	4abe      	ldr	r2, [pc, #760]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014e02:	430b      	orrs	r3, r1
 8014e04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014e08:	e003      	b.n	8014e12 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014e0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014e0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8014e12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e1a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8014e1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014e22:	2300      	movs	r3, #0
 8014e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014e28:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8014e2c:	460b      	mov	r3, r1
 8014e2e:	4313      	orrs	r3, r2
 8014e30:	d051      	beq.n	8014ed6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8014e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014e36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014e3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014e3e:	d033      	beq.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8014e40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014e44:	d82c      	bhi.n	8014ea0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8014e46:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8014e4a:	d02d      	beq.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8014e4c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8014e50:	d826      	bhi.n	8014ea0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8014e52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014e56:	d019      	beq.n	8014e8c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8014e58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014e5c:	d820      	bhi.n	8014ea0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d003      	beq.n	8014e6a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8014e62:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8014e66:	d007      	beq.n	8014e78 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8014e68:	e01a      	b.n	8014ea0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014e6a:	4ba4      	ldr	r3, [pc, #656]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e6e:	4aa3      	ldr	r2, [pc, #652]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014e74:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8014e76:	e018      	b.n	8014eaa <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014e7c:	3308      	adds	r3, #8
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f003 fd3c 	bl	80188fc <RCCEx_PLL2_Config>
 8014e84:	4603      	mov	r3, r0
 8014e86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8014e8a:	e00e      	b.n	8014eaa <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8014e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014e90:	3330      	adds	r3, #48	@ 0x30
 8014e92:	4618      	mov	r0, r3
 8014e94:	f003 fdca 	bl	8018a2c <RCCEx_PLL3_Config>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8014e9e:	e004      	b.n	8014eaa <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014ea6:	e000      	b.n	8014eaa <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8014ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014eaa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d10d      	bne.n	8014ece <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8014eb2:	4b92      	ldr	r3, [pc, #584]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014eb8:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8014ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014ec0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014ec4:	4a8d      	ldr	r2, [pc, #564]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014ec6:	430b      	orrs	r3, r1
 8014ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014ecc:	e003      	b.n	8014ed6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ece:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014ed2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8014ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ede:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8014ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014ee8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8014eec:	460b      	mov	r3, r1
 8014eee:	4313      	orrs	r3, r2
 8014ef0:	d032      	beq.n	8014f58 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8014ef2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014ef6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8014efa:	2b05      	cmp	r3, #5
 8014efc:	d80f      	bhi.n	8014f1e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8014efe:	2b03      	cmp	r3, #3
 8014f00:	d211      	bcs.n	8014f26 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d911      	bls.n	8014f2a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8014f06:	2b02      	cmp	r3, #2
 8014f08:	d109      	bne.n	8014f1e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8014f0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014f0e:	3308      	adds	r3, #8
 8014f10:	4618      	mov	r0, r3
 8014f12:	f003 fcf3 	bl	80188fc <RCCEx_PLL2_Config>
 8014f16:	4603      	mov	r3, r0
 8014f18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014f1c:	e006      	b.n	8014f2c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8014f1e:	2301      	movs	r3, #1
 8014f20:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014f24:	e002      	b.n	8014f2c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8014f26:	bf00      	nop
 8014f28:	e000      	b.n	8014f2c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8014f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014f2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d10d      	bne.n	8014f50 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8014f34:	4b71      	ldr	r3, [pc, #452]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014f3a:	f023 0107 	bic.w	r1, r3, #7
 8014f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014f42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8014f46:	4a6d      	ldr	r2, [pc, #436]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014f48:	430b      	orrs	r3, r1
 8014f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014f4e:	e003      	b.n	8014f58 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014f50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014f54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8014f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f60:	2100      	movs	r1, #0
 8014f62:	6739      	str	r1, [r7, #112]	@ 0x70
 8014f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8014f68:	677b      	str	r3, [r7, #116]	@ 0x74
 8014f6a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8014f6e:	460b      	mov	r3, r1
 8014f70:	4313      	orrs	r3, r2
 8014f72:	d024      	beq.n	8014fbe <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8014f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014f78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d005      	beq.n	8014f8c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8014f80:	2b08      	cmp	r3, #8
 8014f82:	d005      	beq.n	8014f90 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014f84:	2301      	movs	r3, #1
 8014f86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8014f8a:	e002      	b.n	8014f92 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8014f8c:	bf00      	nop
 8014f8e:	e000      	b.n	8014f92 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8014f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014f92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d10d      	bne.n	8014fb6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8014f9a:	4b58      	ldr	r3, [pc, #352]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014fa0:	f023 0108 	bic.w	r1, r3, #8
 8014fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014fac:	4a53      	ldr	r2, [pc, #332]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8014fae:	430b      	orrs	r3, r1
 8014fb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014fb4:	e003      	b.n	8014fbe <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8014fba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8014fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8014fca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014fcc:	2300      	movs	r3, #0
 8014fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014fd0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	4313      	orrs	r3, r2
 8014fd8:	f000 80b9 	beq.w	801514e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8014fdc:	4b48      	ldr	r3, [pc, #288]	@ (8015100 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8014fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fe0:	4a47      	ldr	r2, [pc, #284]	@ (8015100 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8014fe2:	f043 0301 	orr.w	r3, r3, #1
 8014fe6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014fe8:	f7fc fab4 	bl	8011554 <HAL_GetTick>
 8014fec:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8014ff0:	e00b      	b.n	801500a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014ff2:	f7fc faaf 	bl	8011554 <HAL_GetTick>
 8014ff6:	4602      	mov	r2, r0
 8014ff8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8014ffc:	1ad3      	subs	r3, r2, r3
 8014ffe:	2b02      	cmp	r3, #2
 8015000:	d903      	bls.n	801500a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8015002:	2303      	movs	r3, #3
 8015004:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015008:	e005      	b.n	8015016 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 801500a:	4b3d      	ldr	r3, [pc, #244]	@ (8015100 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 801500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801500e:	f003 0301 	and.w	r3, r3, #1
 8015012:	2b00      	cmp	r3, #0
 8015014:	d0ed      	beq.n	8014ff2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8015016:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801501a:	2b00      	cmp	r3, #0
 801501c:	f040 8093 	bne.w	8015146 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8015020:	4b36      	ldr	r3, [pc, #216]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8015022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8015026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801502a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 801502e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8015032:	2b00      	cmp	r3, #0
 8015034:	d023      	beq.n	801507e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8015036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801503a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 801503e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8015042:	4293      	cmp	r3, r2
 8015044:	d01b      	beq.n	801507e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8015046:	4b2d      	ldr	r3, [pc, #180]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8015048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801504c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015050:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015054:	4b29      	ldr	r3, [pc, #164]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8015056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801505a:	4a28      	ldr	r2, [pc, #160]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 801505c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015060:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015064:	4b25      	ldr	r3, [pc, #148]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8015066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801506a:	4a24      	ldr	r2, [pc, #144]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 801506c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015070:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8015074:	4a21      	ldr	r2, [pc, #132]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8015076:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801507a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801507e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8015082:	f003 0301 	and.w	r3, r3, #1
 8015086:	2b00      	cmp	r3, #0
 8015088:	d019      	beq.n	80150be <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801508a:	f7fc fa63 	bl	8011554 <HAL_GetTick>
 801508e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015092:	e00d      	b.n	80150b0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015094:	f7fc fa5e 	bl	8011554 <HAL_GetTick>
 8015098:	4602      	mov	r2, r0
 801509a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801509e:	1ad2      	subs	r2, r2, r3
 80150a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d903      	bls.n	80150b0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80150a8:	2303      	movs	r3, #3
 80150aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80150ae:	e006      	b.n	80150be <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80150b0:	4b12      	ldr	r3, [pc, #72]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80150b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80150b6:	f003 0302 	and.w	r3, r3, #2
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d0ea      	beq.n	8015094 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80150be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d13a      	bne.n	801513c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80150c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80150ca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80150ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80150d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80150d6:	d115      	bne.n	8015104 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80150d8:	4b08      	ldr	r3, [pc, #32]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80150da:	69db      	ldr	r3, [r3, #28]
 80150dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80150e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80150e4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80150e8:	091b      	lsrs	r3, r3, #4
 80150ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80150ee:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80150f2:	4a02      	ldr	r2, [pc, #8]	@ (80150fc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80150f4:	430b      	orrs	r3, r1
 80150f6:	61d3      	str	r3, [r2, #28]
 80150f8:	e00a      	b.n	8015110 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80150fa:	bf00      	nop
 80150fc:	44020c00 	.word	0x44020c00
 8015100:	44020800 	.word	0x44020800
 8015104:	4b9f      	ldr	r3, [pc, #636]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015106:	69db      	ldr	r3, [r3, #28]
 8015108:	4a9e      	ldr	r2, [pc, #632]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801510a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801510e:	61d3      	str	r3, [r2, #28]
 8015110:	4b9c      	ldr	r3, [pc, #624]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8015116:	4a9b      	ldr	r2, [pc, #620]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801511c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8015120:	4b98      	ldr	r3, [pc, #608]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015122:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8015126:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801512a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801512e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015132:	4a94      	ldr	r2, [pc, #592]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015134:	430b      	orrs	r3, r1
 8015136:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801513a:	e008      	b.n	801514e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801513c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015140:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8015144:	e003      	b.n	801514e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015146:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801514a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801514e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015156:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 801515a:	663b      	str	r3, [r7, #96]	@ 0x60
 801515c:	2300      	movs	r3, #0
 801515e:	667b      	str	r3, [r7, #100]	@ 0x64
 8015160:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8015164:	460b      	mov	r3, r1
 8015166:	4313      	orrs	r3, r2
 8015168:	d035      	beq.n	80151d6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 801516a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801516e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8015172:	2b30      	cmp	r3, #48	@ 0x30
 8015174:	d014      	beq.n	80151a0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8015176:	2b30      	cmp	r3, #48	@ 0x30
 8015178:	d80e      	bhi.n	8015198 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 801517a:	2b20      	cmp	r3, #32
 801517c:	d012      	beq.n	80151a4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 801517e:	2b20      	cmp	r3, #32
 8015180:	d80a      	bhi.n	8015198 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8015182:	2b00      	cmp	r3, #0
 8015184:	d010      	beq.n	80151a8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8015186:	2b10      	cmp	r3, #16
 8015188:	d106      	bne.n	8015198 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801518a:	4b7e      	ldr	r3, [pc, #504]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801518c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801518e:	4a7d      	ldr	r2, [pc, #500]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015194:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8015196:	e008      	b.n	80151aa <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015198:	2301      	movs	r3, #1
 801519a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801519e:	e004      	b.n	80151aa <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80151a0:	bf00      	nop
 80151a2:	e002      	b.n	80151aa <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80151a4:	bf00      	nop
 80151a6:	e000      	b.n	80151aa <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80151a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80151aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d10d      	bne.n	80151ce <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80151b2:	4b74      	ldr	r3, [pc, #464]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80151b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80151b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80151bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80151c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80151c4:	4a6f      	ldr	r2, [pc, #444]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80151c6:	430b      	orrs	r3, r1
 80151c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80151cc:	e003      	b.n	80151d6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80151ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80151d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80151d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80151da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151de:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80151e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80151e4:	2300      	movs	r3, #0
 80151e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80151e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80151ec:	460b      	mov	r3, r1
 80151ee:	4313      	orrs	r3, r2
 80151f0:	d033      	beq.n	801525a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80151f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80151f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d002      	beq.n	8015204 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80151fe:	2b40      	cmp	r3, #64	@ 0x40
 8015200:	d007      	beq.n	8015212 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8015202:	e010      	b.n	8015226 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015204:	4b5f      	ldr	r3, [pc, #380]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015208:	4a5e      	ldr	r2, [pc, #376]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801520a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801520e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8015210:	e00d      	b.n	801522e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015212:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015216:	3308      	adds	r3, #8
 8015218:	4618      	mov	r0, r3
 801521a:	f003 fb6f 	bl	80188fc <RCCEx_PLL2_Config>
 801521e:	4603      	mov	r3, r0
 8015220:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8015224:	e003      	b.n	801522e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8015226:	2301      	movs	r3, #1
 8015228:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801522c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801522e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015232:	2b00      	cmp	r3, #0
 8015234:	d10d      	bne.n	8015252 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8015236:	4b53      	ldr	r3, [pc, #332]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015238:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801523c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8015240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015244:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8015248:	4a4e      	ldr	r2, [pc, #312]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801524a:	430b      	orrs	r3, r1
 801524c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8015250:	e003      	b.n	801525a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015252:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015256:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801525a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015262:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8015266:	653b      	str	r3, [r7, #80]	@ 0x50
 8015268:	2300      	movs	r3, #0
 801526a:	657b      	str	r3, [r7, #84]	@ 0x54
 801526c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8015270:	460b      	mov	r3, r1
 8015272:	4313      	orrs	r3, r2
 8015274:	d033      	beq.n	80152de <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8015276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801527a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801527e:	2b00      	cmp	r3, #0
 8015280:	d002      	beq.n	8015288 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8015282:	2b80      	cmp	r3, #128	@ 0x80
 8015284:	d007      	beq.n	8015296 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8015286:	e010      	b.n	80152aa <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015288:	4b3e      	ldr	r3, [pc, #248]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801528a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801528c:	4a3d      	ldr	r2, [pc, #244]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801528e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015292:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8015294:	e00d      	b.n	80152b2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801529a:	3308      	adds	r3, #8
 801529c:	4618      	mov	r0, r3
 801529e:	f003 fb2d 	bl	80188fc <RCCEx_PLL2_Config>
 80152a2:	4603      	mov	r3, r0
 80152a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80152a8:	e003      	b.n	80152b2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80152aa:	2301      	movs	r3, #1
 80152ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80152b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80152b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d10d      	bne.n	80152d6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80152ba:	4b32      	ldr	r3, [pc, #200]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80152bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80152c0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80152c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80152c8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80152cc:	4a2d      	ldr	r2, [pc, #180]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80152ce:	430b      	orrs	r3, r1
 80152d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80152d4:	e003      	b.n	80152de <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80152d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80152da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80152de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80152e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80152ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80152ec:	2300      	movs	r3, #0
 80152ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80152f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80152f4:	460b      	mov	r3, r1
 80152f6:	4313      	orrs	r3, r2
 80152f8:	d04a      	beq.n	8015390 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80152fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80152fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015302:	2b04      	cmp	r3, #4
 8015304:	d827      	bhi.n	8015356 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8015306:	a201      	add	r2, pc, #4	@ (adr r2, 801530c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8015308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801530c:	08015321 	.word	0x08015321
 8015310:	0801532f 	.word	0x0801532f
 8015314:	08015343 	.word	0x08015343
 8015318:	0801535f 	.word	0x0801535f
 801531c:	0801535f 	.word	0x0801535f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015320:	4b18      	ldr	r3, [pc, #96]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015324:	4a17      	ldr	r2, [pc, #92]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8015326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801532a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 801532c:	e018      	b.n	8015360 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801532e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015332:	3308      	adds	r3, #8
 8015334:	4618      	mov	r0, r3
 8015336:	f003 fae1 	bl	80188fc <RCCEx_PLL2_Config>
 801533a:	4603      	mov	r3, r0
 801533c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8015340:	e00e      	b.n	8015360 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8015342:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015346:	3330      	adds	r3, #48	@ 0x30
 8015348:	4618      	mov	r0, r3
 801534a:	f003 fb6f 	bl	8018a2c <RCCEx_PLL3_Config>
 801534e:	4603      	mov	r3, r0
 8015350:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8015354:	e004      	b.n	8015360 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015356:	2301      	movs	r3, #1
 8015358:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801535c:	e000      	b.n	8015360 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 801535e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015360:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015364:	2b00      	cmp	r3, #0
 8015366:	d10f      	bne.n	8015388 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8015368:	4b06      	ldr	r3, [pc, #24]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801536a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801536e:	f023 0107 	bic.w	r1, r3, #7
 8015372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801537a:	4a02      	ldr	r2, [pc, #8]	@ (8015384 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 801537c:	430b      	orrs	r3, r1
 801537e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015382:	e005      	b.n	8015390 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8015384:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015388:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801538c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8015390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015398:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801539c:	643b      	str	r3, [r7, #64]	@ 0x40
 801539e:	2300      	movs	r3, #0
 80153a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80153a2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80153a6:	460b      	mov	r3, r1
 80153a8:	4313      	orrs	r3, r2
 80153aa:	f000 8081 	beq.w	80154b0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80153ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80153b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80153b6:	2b20      	cmp	r3, #32
 80153b8:	d85f      	bhi.n	801547a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80153ba:	a201      	add	r2, pc, #4	@ (adr r2, 80153c0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80153bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153c0:	08015445 	.word	0x08015445
 80153c4:	0801547b 	.word	0x0801547b
 80153c8:	0801547b 	.word	0x0801547b
 80153cc:	0801547b 	.word	0x0801547b
 80153d0:	0801547b 	.word	0x0801547b
 80153d4:	0801547b 	.word	0x0801547b
 80153d8:	0801547b 	.word	0x0801547b
 80153dc:	0801547b 	.word	0x0801547b
 80153e0:	08015453 	.word	0x08015453
 80153e4:	0801547b 	.word	0x0801547b
 80153e8:	0801547b 	.word	0x0801547b
 80153ec:	0801547b 	.word	0x0801547b
 80153f0:	0801547b 	.word	0x0801547b
 80153f4:	0801547b 	.word	0x0801547b
 80153f8:	0801547b 	.word	0x0801547b
 80153fc:	0801547b 	.word	0x0801547b
 8015400:	08015467 	.word	0x08015467
 8015404:	0801547b 	.word	0x0801547b
 8015408:	0801547b 	.word	0x0801547b
 801540c:	0801547b 	.word	0x0801547b
 8015410:	0801547b 	.word	0x0801547b
 8015414:	0801547b 	.word	0x0801547b
 8015418:	0801547b 	.word	0x0801547b
 801541c:	0801547b 	.word	0x0801547b
 8015420:	08015483 	.word	0x08015483
 8015424:	0801547b 	.word	0x0801547b
 8015428:	0801547b 	.word	0x0801547b
 801542c:	0801547b 	.word	0x0801547b
 8015430:	0801547b 	.word	0x0801547b
 8015434:	0801547b 	.word	0x0801547b
 8015438:	0801547b 	.word	0x0801547b
 801543c:	0801547b 	.word	0x0801547b
 8015440:	08015483 	.word	0x08015483
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015444:	4bab      	ldr	r3, [pc, #684]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8015446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015448:	4aaa      	ldr	r2, [pc, #680]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 801544a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801544e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8015450:	e018      	b.n	8015484 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015452:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015456:	3308      	adds	r3, #8
 8015458:	4618      	mov	r0, r3
 801545a:	f003 fa4f 	bl	80188fc <RCCEx_PLL2_Config>
 801545e:	4603      	mov	r3, r0
 8015460:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8015464:	e00e      	b.n	8015484 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8015466:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801546a:	3330      	adds	r3, #48	@ 0x30
 801546c:	4618      	mov	r0, r3
 801546e:	f003 fadd 	bl	8018a2c <RCCEx_PLL3_Config>
 8015472:	4603      	mov	r3, r0
 8015474:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8015478:	e004      	b.n	8015484 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801547a:	2301      	movs	r3, #1
 801547c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015480:	e000      	b.n	8015484 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8015482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015484:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015488:	2b00      	cmp	r3, #0
 801548a:	d10d      	bne.n	80154a8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 801548c:	4b99      	ldr	r3, [pc, #612]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 801548e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015492:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8015496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801549a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801549e:	4a95      	ldr	r2, [pc, #596]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80154a0:	430b      	orrs	r3, r1
 80154a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80154a6:	e003      	b.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80154a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80154ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80154b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80154b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80154bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80154be:	2300      	movs	r3, #0
 80154c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80154c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80154c6:	460b      	mov	r3, r1
 80154c8:	4313      	orrs	r3, r2
 80154ca:	d04e      	beq.n	801556a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80154cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80154d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80154d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80154d8:	d02e      	beq.n	8015538 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80154da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80154de:	d827      	bhi.n	8015530 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80154e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80154e2:	d02b      	beq.n	801553c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80154e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80154e6:	d823      	bhi.n	8015530 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80154e8:	2b80      	cmp	r3, #128	@ 0x80
 80154ea:	d017      	beq.n	801551c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80154ec:	2b80      	cmp	r3, #128	@ 0x80
 80154ee:	d81f      	bhi.n	8015530 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d002      	beq.n	80154fa <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80154f4:	2b40      	cmp	r3, #64	@ 0x40
 80154f6:	d007      	beq.n	8015508 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80154f8:	e01a      	b.n	8015530 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80154fa:	4b7e      	ldr	r3, [pc, #504]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80154fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154fe:	4a7d      	ldr	r2, [pc, #500]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8015500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015504:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8015506:	e01a      	b.n	801553e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015508:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801550c:	3308      	adds	r3, #8
 801550e:	4618      	mov	r0, r3
 8015510:	f003 f9f4 	bl	80188fc <RCCEx_PLL2_Config>
 8015514:	4603      	mov	r3, r0
 8015516:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 801551a:	e010      	b.n	801553e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801551c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015520:	3330      	adds	r3, #48	@ 0x30
 8015522:	4618      	mov	r0, r3
 8015524:	f003 fa82 	bl	8018a2c <RCCEx_PLL3_Config>
 8015528:	4603      	mov	r3, r0
 801552a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 801552e:	e006      	b.n	801553e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015530:	2301      	movs	r3, #1
 8015532:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015536:	e002      	b.n	801553e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8015538:	bf00      	nop
 801553a:	e000      	b.n	801553e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 801553c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801553e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015542:	2b00      	cmp	r3, #0
 8015544:	d10d      	bne.n	8015562 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8015546:	4b6b      	ldr	r3, [pc, #428]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8015548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801554c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8015550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8015558:	4a66      	ldr	r2, [pc, #408]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 801555a:	430b      	orrs	r3, r1
 801555c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015560:	e003      	b.n	801556a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015562:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015566:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 801556a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015572:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8015576:	633b      	str	r3, [r7, #48]	@ 0x30
 8015578:	2300      	movs	r3, #0
 801557a:	637b      	str	r3, [r7, #52]	@ 0x34
 801557c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8015580:	460b      	mov	r3, r1
 8015582:	4313      	orrs	r3, r2
 8015584:	d055      	beq.n	8015632 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8015586:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801558a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801558e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8015592:	d031      	beq.n	80155f8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8015594:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8015598:	d82a      	bhi.n	80155f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 801559a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801559e:	d02d      	beq.n	80155fc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80155a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80155a4:	d824      	bhi.n	80155f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80155a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80155aa:	d029      	beq.n	8015600 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80155ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80155b0:	d81e      	bhi.n	80155f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80155b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80155b6:	d011      	beq.n	80155dc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80155b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80155bc:	d818      	bhi.n	80155f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d020      	beq.n	8015604 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80155c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80155c6:	d113      	bne.n	80155f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80155c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80155cc:	3308      	adds	r3, #8
 80155ce:	4618      	mov	r0, r3
 80155d0:	f003 f994 	bl	80188fc <RCCEx_PLL2_Config>
 80155d4:	4603      	mov	r3, r0
 80155d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80155da:	e014      	b.n	8015606 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80155dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80155e0:	3330      	adds	r3, #48	@ 0x30
 80155e2:	4618      	mov	r0, r3
 80155e4:	f003 fa22 	bl	8018a2c <RCCEx_PLL3_Config>
 80155e8:	4603      	mov	r3, r0
 80155ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80155ee:	e00a      	b.n	8015606 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80155f0:	2301      	movs	r3, #1
 80155f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80155f6:	e006      	b.n	8015606 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80155f8:	bf00      	nop
 80155fa:	e004      	b.n	8015606 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80155fc:	bf00      	nop
 80155fe:	e002      	b.n	8015606 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8015600:	bf00      	nop
 8015602:	e000      	b.n	8015606 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8015604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015606:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801560a:	2b00      	cmp	r3, #0
 801560c:	d10d      	bne.n	801562a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 801560e:	4b39      	ldr	r3, [pc, #228]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8015610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015614:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8015618:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801561c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8015620:	4a34      	ldr	r2, [pc, #208]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8015622:	430b      	orrs	r3, r1
 8015624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015628:	e003      	b.n	8015632 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801562a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801562e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8015632:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801563e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015640:	2300      	movs	r3, #0
 8015642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015644:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8015648:	460b      	mov	r3, r1
 801564a:	4313      	orrs	r3, r2
 801564c:	d058      	beq.n	8015700 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 801564e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8015656:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801565a:	d031      	beq.n	80156c0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 801565c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8015660:	d82a      	bhi.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8015662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015666:	d02d      	beq.n	80156c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8015668:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801566c:	d824      	bhi.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 801566e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015672:	d029      	beq.n	80156c8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8015674:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015678:	d81e      	bhi.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 801567a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801567e:	d011      	beq.n	80156a4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8015680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015684:	d818      	bhi.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8015686:	2b00      	cmp	r3, #0
 8015688:	d020      	beq.n	80156cc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 801568a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801568e:	d113      	bne.n	80156b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015690:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015694:	3308      	adds	r3, #8
 8015696:	4618      	mov	r0, r3
 8015698:	f003 f930 	bl	80188fc <RCCEx_PLL2_Config>
 801569c:	4603      	mov	r3, r0
 801569e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80156a2:	e014      	b.n	80156ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80156a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80156a8:	3330      	adds	r3, #48	@ 0x30
 80156aa:	4618      	mov	r0, r3
 80156ac:	f003 f9be 	bl	8018a2c <RCCEx_PLL3_Config>
 80156b0:	4603      	mov	r3, r0
 80156b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80156b6:	e00a      	b.n	80156ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80156b8:	2301      	movs	r3, #1
 80156ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80156be:	e006      	b.n	80156ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80156c0:	bf00      	nop
 80156c2:	e004      	b.n	80156ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80156c4:	bf00      	nop
 80156c6:	e002      	b.n	80156ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80156c8:	bf00      	nop
 80156ca:	e000      	b.n	80156ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80156cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80156ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d110      	bne.n	80156f8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80156d6:	4b07      	ldr	r3, [pc, #28]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80156d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80156dc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80156e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80156e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80156e8:	4902      	ldr	r1, [pc, #8]	@ (80156f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80156ea:	4313      	orrs	r3, r2
 80156ec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80156f0:	e006      	b.n	8015700 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80156f2:	bf00      	nop
 80156f4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80156f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80156fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8015700:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015708:	2100      	movs	r1, #0
 801570a:	6239      	str	r1, [r7, #32]
 801570c:	f003 0301 	and.w	r3, r3, #1
 8015710:	627b      	str	r3, [r7, #36]	@ 0x24
 8015712:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8015716:	460b      	mov	r3, r1
 8015718:	4313      	orrs	r3, r2
 801571a:	d055      	beq.n	80157c8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 801571c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8015724:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8015728:	d031      	beq.n	801578e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 801572a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 801572e:	d82a      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8015730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015734:	d02d      	beq.n	8015792 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8015736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801573a:	d824      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 801573c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8015740:	d029      	beq.n	8015796 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8015742:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8015746:	d81e      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8015748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801574c:	d011      	beq.n	8015772 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 801574e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015752:	d818      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8015754:	2b00      	cmp	r3, #0
 8015756:	d020      	beq.n	801579a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8015758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801575c:	d113      	bne.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801575e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015762:	3308      	adds	r3, #8
 8015764:	4618      	mov	r0, r3
 8015766:	f003 f8c9 	bl	80188fc <RCCEx_PLL2_Config>
 801576a:	4603      	mov	r3, r0
 801576c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015770:	e014      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8015772:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015776:	3330      	adds	r3, #48	@ 0x30
 8015778:	4618      	mov	r0, r3
 801577a:	f003 f957 	bl	8018a2c <RCCEx_PLL3_Config>
 801577e:	4603      	mov	r3, r0
 8015780:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015784:	e00a      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015786:	2301      	movs	r3, #1
 8015788:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 801578c:	e006      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 801578e:	bf00      	nop
 8015790:	e004      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8015792:	bf00      	nop
 8015794:	e002      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8015796:	bf00      	nop
 8015798:	e000      	b.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 801579a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801579c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d10d      	bne.n	80157c0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80157a4:	4b88      	ldr	r3, [pc, #544]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80157a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80157aa:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80157ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80157b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80157b6:	4984      	ldr	r1, [pc, #528]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80157b8:	4313      	orrs	r3, r2
 80157ba:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80157be:	e003      	b.n	80157c8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80157c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80157c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80157cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d0:	2100      	movs	r1, #0
 80157d2:	61b9      	str	r1, [r7, #24]
 80157d4:	f003 0302 	and.w	r3, r3, #2
 80157d8:	61fb      	str	r3, [r7, #28]
 80157da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80157de:	460b      	mov	r3, r1
 80157e0:	4313      	orrs	r3, r2
 80157e2:	d03d      	beq.n	8015860 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80157e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80157e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80157ec:	2b03      	cmp	r3, #3
 80157ee:	d81c      	bhi.n	801582a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80157f0:	a201      	add	r2, pc, #4	@ (adr r2, 80157f8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80157f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157f6:	bf00      	nop
 80157f8:	08015833 	.word	0x08015833
 80157fc:	08015809 	.word	0x08015809
 8015800:	08015817 	.word	0x08015817
 8015804:	08015833 	.word	0x08015833
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015808:	4b6f      	ldr	r3, [pc, #444]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801580c:	4a6e      	ldr	r2, [pc, #440]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801580e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015812:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8015814:	e00e      	b.n	8015834 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015816:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801581a:	3308      	adds	r3, #8
 801581c:	4618      	mov	r0, r3
 801581e:	f003 f86d 	bl	80188fc <RCCEx_PLL2_Config>
 8015822:	4603      	mov	r3, r0
 8015824:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8015828:	e004      	b.n	8015834 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801582a:	2301      	movs	r3, #1
 801582c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015830:	e000      	b.n	8015834 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8015832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015834:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015838:	2b00      	cmp	r3, #0
 801583a:	d10d      	bne.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 801583c:	4b62      	ldr	r3, [pc, #392]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801583e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015842:	f023 0203 	bic.w	r2, r3, #3
 8015846:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801584a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801584e:	495e      	ldr	r1, [pc, #376]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015850:	4313      	orrs	r3, r2
 8015852:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8015856:	e003      	b.n	8015860 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015858:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801585c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015868:	2100      	movs	r1, #0
 801586a:	6139      	str	r1, [r7, #16]
 801586c:	f003 0304 	and.w	r3, r3, #4
 8015870:	617b      	str	r3, [r7, #20]
 8015872:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8015876:	460b      	mov	r3, r1
 8015878:	4313      	orrs	r3, r2
 801587a:	d03a      	beq.n	80158f2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 801587c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015880:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015888:	d00e      	beq.n	80158a8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 801588a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801588e:	d815      	bhi.n	80158bc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8015890:	2b00      	cmp	r3, #0
 8015892:	d017      	beq.n	80158c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8015894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015898:	d110      	bne.n	80158bc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801589a:	4b4b      	ldr	r3, [pc, #300]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801589e:	4a4a      	ldr	r2, [pc, #296]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80158a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80158a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80158a6:	e00e      	b.n	80158c6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80158a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80158ac:	3308      	adds	r3, #8
 80158ae:	4618      	mov	r0, r3
 80158b0:	f003 f824 	bl	80188fc <RCCEx_PLL2_Config>
 80158b4:	4603      	mov	r3, r0
 80158b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80158ba:	e004      	b.n	80158c6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80158bc:	2301      	movs	r3, #1
 80158be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80158c2:	e000      	b.n	80158c6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80158c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80158c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d10d      	bne.n	80158ea <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80158ce:	4b3e      	ldr	r3, [pc, #248]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80158d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80158d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80158d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80158dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80158e0:	4939      	ldr	r1, [pc, #228]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80158e2:	4313      	orrs	r3, r2
 80158e4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80158e8:	e003      	b.n	80158f2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80158ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80158ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80158f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80158f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158fa:	2100      	movs	r1, #0
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	f003 0310 	and.w	r3, r3, #16
 8015902:	60fb      	str	r3, [r7, #12]
 8015904:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8015908:	460b      	mov	r3, r1
 801590a:	4313      	orrs	r3, r2
 801590c:	d038      	beq.n	8015980 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 801590e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015912:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8015916:	2b30      	cmp	r3, #48	@ 0x30
 8015918:	d01b      	beq.n	8015952 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 801591a:	2b30      	cmp	r3, #48	@ 0x30
 801591c:	d815      	bhi.n	801594a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 801591e:	2b10      	cmp	r3, #16
 8015920:	d002      	beq.n	8015928 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8015922:	2b20      	cmp	r3, #32
 8015924:	d007      	beq.n	8015936 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8015926:	e010      	b.n	801594a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015928:	4b27      	ldr	r3, [pc, #156]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801592a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801592c:	4a26      	ldr	r2, [pc, #152]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801592e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015932:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8015934:	e00e      	b.n	8015954 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8015936:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801593a:	3330      	adds	r3, #48	@ 0x30
 801593c:	4618      	mov	r0, r3
 801593e:	f003 f875 	bl	8018a2c <RCCEx_PLL3_Config>
 8015942:	4603      	mov	r3, r0
 8015944:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8015948:	e004      	b.n	8015954 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801594a:	2301      	movs	r3, #1
 801594c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8015950:	e000      	b.n	8015954 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8015952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015954:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8015958:	2b00      	cmp	r3, #0
 801595a:	d10d      	bne.n	8015978 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 801595c:	4b1a      	ldr	r3, [pc, #104]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801595e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015962:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8015966:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801596a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801596e:	4916      	ldr	r1, [pc, #88]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8015970:	4313      	orrs	r3, r2
 8015972:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8015976:	e003      	b.n	8015980 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015978:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 801597c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8015980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015988:	2100      	movs	r1, #0
 801598a:	6039      	str	r1, [r7, #0]
 801598c:	f003 0308 	and.w	r3, r3, #8
 8015990:	607b      	str	r3, [r7, #4]
 8015992:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015996:	460b      	mov	r3, r1
 8015998:	4313      	orrs	r3, r2
 801599a:	d00c      	beq.n	80159b6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 801599c:	4b0a      	ldr	r3, [pc, #40]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 801599e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80159a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80159a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80159aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80159ae:	4906      	ldr	r1, [pc, #24]	@ (80159c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80159b0:	4313      	orrs	r3, r2
 80159b2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80159b6:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80159c0:	46bd      	mov	sp, r7
 80159c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80159c6:	bf00      	nop
 80159c8:	44020c00 	.word	0x44020c00

080159cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b08b      	sub	sp, #44	@ 0x2c
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80159d4:	4bad      	ldr	r3, [pc, #692]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80159d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80159d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80159dc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80159de:	4bab      	ldr	r3, [pc, #684]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80159e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159e2:	f003 0303 	and.w	r3, r3, #3
 80159e6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80159e8:	4ba8      	ldr	r3, [pc, #672]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80159ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159ec:	0a1b      	lsrs	r3, r3, #8
 80159ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80159f2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80159f4:	4ba5      	ldr	r3, [pc, #660]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80159f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159f8:	f003 0310 	and.w	r3, r3, #16
 80159fc:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80159fe:	4ba3      	ldr	r3, [pc, #652]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a02:	08db      	lsrs	r3, r3, #3
 8015a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a08:	697a      	ldr	r2, [r7, #20]
 8015a0a:	fb02 f303 	mul.w	r3, r2, r3
 8015a0e:	ee07 3a90 	vmov	s15, r3
 8015a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a16:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8015a1a:	69bb      	ldr	r3, [r7, #24]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	f000 8126 	beq.w	8015c6e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8015a22:	69fb      	ldr	r3, [r7, #28]
 8015a24:	2b03      	cmp	r3, #3
 8015a26:	d053      	beq.n	8015ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	2b03      	cmp	r3, #3
 8015a2c:	d86f      	bhi.n	8015b0e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	2b01      	cmp	r3, #1
 8015a32:	d003      	beq.n	8015a3c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8015a34:	69fb      	ldr	r3, [r7, #28]
 8015a36:	2b02      	cmp	r3, #2
 8015a38:	d02b      	beq.n	8015a92 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8015a3a:	e068      	b.n	8015b0e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8015a3c:	4b93      	ldr	r3, [pc, #588]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	08db      	lsrs	r3, r3, #3
 8015a42:	f003 0303 	and.w	r3, r3, #3
 8015a46:	4a92      	ldr	r2, [pc, #584]	@ (8015c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8015a48:	fa22 f303 	lsr.w	r3, r2, r3
 8015a4c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	ee07 3a90 	vmov	s15, r3
 8015a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	ee07 3a90 	vmov	s15, r3
 8015a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015a66:	6a3b      	ldr	r3, [r7, #32]
 8015a68:	ee07 3a90 	vmov	s15, r3
 8015a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a70:	ed97 6a04 	vldr	s12, [r7, #16]
 8015a74:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8015c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8015a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015a80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8015a90:	e068      	b.n	8015b64 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8015a92:	69bb      	ldr	r3, [r7, #24]
 8015a94:	ee07 3a90 	vmov	s15, r3
 8015a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a9c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8015c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8015aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015aa4:	6a3b      	ldr	r3, [r7, #32]
 8015aa6:	ee07 3a90 	vmov	s15, r3
 8015aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015aae:	ed97 6a04 	vldr	s12, [r7, #16]
 8015ab2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8015c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8015ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015aca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8015ace:	e049      	b.n	8015b64 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8015ad0:	69bb      	ldr	r3, [r7, #24]
 8015ad2:	ee07 3a90 	vmov	s15, r3
 8015ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ada:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8015c9c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8015ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015ae2:	6a3b      	ldr	r3, [r7, #32]
 8015ae4:	ee07 3a90 	vmov	s15, r3
 8015ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015aec:	ed97 6a04 	vldr	s12, [r7, #16]
 8015af0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8015c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8015af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015afc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b08:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8015b0c:	e02a      	b.n	8015b64 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8015b0e:	4b5f      	ldr	r3, [pc, #380]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	08db      	lsrs	r3, r3, #3
 8015b14:	f003 0303 	and.w	r3, r3, #3
 8015b18:	4a5d      	ldr	r2, [pc, #372]	@ (8015c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8015b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8015b1e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	ee07 3a90 	vmov	s15, r3
 8015b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015b2a:	69bb      	ldr	r3, [r7, #24]
 8015b2c:	ee07 3a90 	vmov	s15, r3
 8015b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015b38:	6a3b      	ldr	r3, [r7, #32]
 8015b3a:	ee07 3a90 	vmov	s15, r3
 8015b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015b42:	ed97 6a04 	vldr	s12, [r7, #16]
 8015b46:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8015c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8015b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b5e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8015b62:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015b64:	4b49      	ldr	r3, [pc, #292]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015b6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015b70:	d121      	bne.n	8015bb6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8015b72:	4b46      	ldr	r3, [pc, #280]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d017      	beq.n	8015bae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015b7e:	4b43      	ldr	r3, [pc, #268]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b82:	0a5b      	lsrs	r3, r3, #9
 8015b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015b88:	ee07 3a90 	vmov	s15, r3
 8015b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8015b90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015b94:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8015b98:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015ba4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	601a      	str	r2, [r3, #0]
 8015bac:	e006      	b.n	8015bbc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	601a      	str	r2, [r3, #0]
 8015bb4:	e002      	b.n	8015bbc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015bbc:	4b33      	ldr	r3, [pc, #204]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015bc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015bc8:	d121      	bne.n	8015c0e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8015bca:	4b30      	ldr	r3, [pc, #192]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d017      	beq.n	8015c06 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015bda:	0c1b      	lsrs	r3, r3, #16
 8015bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015be0:	ee07 3a90 	vmov	s15, r3
 8015be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8015be8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015bec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8015bf0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015bfc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	605a      	str	r2, [r3, #4]
 8015c04:	e006      	b.n	8015c14 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2200      	movs	r2, #0
 8015c0a:	605a      	str	r2, [r3, #4]
 8015c0c:	e002      	b.n	8015c14 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	2200      	movs	r2, #0
 8015c12:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015c14:	4b1d      	ldr	r3, [pc, #116]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015c20:	d121      	bne.n	8015c66 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8015c22:	4b1a      	ldr	r3, [pc, #104]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d017      	beq.n	8015c5e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015c2e:	4b17      	ldr	r3, [pc, #92]	@ (8015c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8015c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015c32:	0e1b      	lsrs	r3, r3, #24
 8015c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015c38:	ee07 3a90 	vmov	s15, r3
 8015c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8015c40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015c44:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8015c48:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015c54:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8015c5c:	e010      	b.n	8015c80 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2200      	movs	r2, #0
 8015c62:	609a      	str	r2, [r3, #8]
}
 8015c64:	e00c      	b.n	8015c80 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	2200      	movs	r2, #0
 8015c6a:	609a      	str	r2, [r3, #8]
}
 8015c6c:	e008      	b.n	8015c80 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	2200      	movs	r2, #0
 8015c72:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2200      	movs	r2, #0
 8015c78:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	609a      	str	r2, [r3, #8]
}
 8015c80:	bf00      	nop
 8015c82:	372c      	adds	r7, #44	@ 0x2c
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr
 8015c8c:	44020c00 	.word	0x44020c00
 8015c90:	03d09000 	.word	0x03d09000
 8015c94:	46000000 	.word	0x46000000
 8015c98:	4a742400 	.word	0x4a742400
 8015c9c:	4bbebc20 	.word	0x4bbebc20

08015ca0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8015ca0:	b480      	push	{r7}
 8015ca2:	b08b      	sub	sp, #44	@ 0x2c
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8015ca8:	4bad      	ldr	r3, [pc, #692]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015cb0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8015cb2:	4bab      	ldr	r3, [pc, #684]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cb6:	f003 0303 	and.w	r3, r3, #3
 8015cba:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8015cbc:	4ba8      	ldr	r3, [pc, #672]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cc0:	0a1b      	lsrs	r3, r3, #8
 8015cc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015cc6:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8015cc8:	4ba5      	ldr	r3, [pc, #660]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ccc:	f003 0310 	and.w	r3, r3, #16
 8015cd0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8015cd2:	4ba3      	ldr	r3, [pc, #652]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015cd6:	08db      	lsrs	r3, r3, #3
 8015cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015cdc:	697a      	ldr	r2, [r7, #20]
 8015cde:	fb02 f303 	mul.w	r3, r2, r3
 8015ce2:	ee07 3a90 	vmov	s15, r3
 8015ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015cea:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8015cee:	69bb      	ldr	r3, [r7, #24]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	f000 8126 	beq.w	8015f42 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8015cf6:	69fb      	ldr	r3, [r7, #28]
 8015cf8:	2b03      	cmp	r3, #3
 8015cfa:	d053      	beq.n	8015da4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8015cfc:	69fb      	ldr	r3, [r7, #28]
 8015cfe:	2b03      	cmp	r3, #3
 8015d00:	d86f      	bhi.n	8015de2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8015d02:	69fb      	ldr	r3, [r7, #28]
 8015d04:	2b01      	cmp	r3, #1
 8015d06:	d003      	beq.n	8015d10 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8015d08:	69fb      	ldr	r3, [r7, #28]
 8015d0a:	2b02      	cmp	r3, #2
 8015d0c:	d02b      	beq.n	8015d66 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8015d0e:	e068      	b.n	8015de2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8015d10:	4b93      	ldr	r3, [pc, #588]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	08db      	lsrs	r3, r3, #3
 8015d16:	f003 0303 	and.w	r3, r3, #3
 8015d1a:	4a92      	ldr	r2, [pc, #584]	@ (8015f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8015d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8015d20:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	ee07 3a90 	vmov	s15, r3
 8015d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d2c:	69bb      	ldr	r3, [r7, #24]
 8015d2e:	ee07 3a90 	vmov	s15, r3
 8015d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d3a:	6a3b      	ldr	r3, [r7, #32]
 8015d3c:	ee07 3a90 	vmov	s15, r3
 8015d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d44:	ed97 6a04 	vldr	s12, [r7, #16]
 8015d48:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8015f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8015d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8015d64:	e068      	b.n	8015e38 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8015d66:	69bb      	ldr	r3, [r7, #24]
 8015d68:	ee07 3a90 	vmov	s15, r3
 8015d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d70:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8015f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8015d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d78:	6a3b      	ldr	r3, [r7, #32]
 8015d7a:	ee07 3a90 	vmov	s15, r3
 8015d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d82:	ed97 6a04 	vldr	s12, [r7, #16]
 8015d86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8015f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8015d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8015da2:	e049      	b.n	8015e38 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8015da4:	69bb      	ldr	r3, [r7, #24]
 8015da6:	ee07 3a90 	vmov	s15, r3
 8015daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015dae:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8015f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8015db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015db6:	6a3b      	ldr	r3, [r7, #32]
 8015db8:	ee07 3a90 	vmov	s15, r3
 8015dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015dc0:	ed97 6a04 	vldr	s12, [r7, #16]
 8015dc4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8015f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8015dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015dd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ddc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8015de0:	e02a      	b.n	8015e38 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8015de2:	4b5f      	ldr	r3, [pc, #380]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	08db      	lsrs	r3, r3, #3
 8015de8:	f003 0303 	and.w	r3, r3, #3
 8015dec:	4a5d      	ldr	r2, [pc, #372]	@ (8015f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8015dee:	fa22 f303 	lsr.w	r3, r2, r3
 8015df2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	ee07 3a90 	vmov	s15, r3
 8015dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015dfe:	69bb      	ldr	r3, [r7, #24]
 8015e00:	ee07 3a90 	vmov	s15, r3
 8015e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015e0c:	6a3b      	ldr	r3, [r7, #32]
 8015e0e:	ee07 3a90 	vmov	s15, r3
 8015e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015e16:	ed97 6a04 	vldr	s12, [r7, #16]
 8015e1a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8015f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8015e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e32:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8015e36:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015e38:	4b49      	ldr	r3, [pc, #292]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015e40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015e44:	d121      	bne.n	8015e8a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8015e46:	4b46      	ldr	r3, [pc, #280]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d017      	beq.n	8015e82 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8015e52:	4b43      	ldr	r3, [pc, #268]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e56:	0a5b      	lsrs	r3, r3, #9
 8015e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015e5c:	ee07 3a90 	vmov	s15, r3
 8015e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8015e64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e68:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8015e6c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015e78:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	601a      	str	r2, [r3, #0]
 8015e80:	e006      	b.n	8015e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2200      	movs	r2, #0
 8015e86:	601a      	str	r2, [r3, #0]
 8015e88:	e002      	b.n	8015e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015e90:	4b33      	ldr	r3, [pc, #204]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015e98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015e9c:	d121      	bne.n	8015ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8015e9e:	4b30      	ldr	r3, [pc, #192]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d017      	beq.n	8015eda <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8015eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015eae:	0c1b      	lsrs	r3, r3, #16
 8015eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015eb4:	ee07 3a90 	vmov	s15, r3
 8015eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8015ebc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015ec0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8015ec4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015ed0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	605a      	str	r2, [r3, #4]
 8015ed8:	e006      	b.n	8015ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2200      	movs	r2, #0
 8015ede:	605a      	str	r2, [r3, #4]
 8015ee0:	e002      	b.n	8015ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015ef0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015ef4:	d121      	bne.n	8015f3a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8015ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015efa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d017      	beq.n	8015f32 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8015f02:	4b17      	ldr	r3, [pc, #92]	@ (8015f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8015f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f06:	0e1b      	lsrs	r3, r3, #24
 8015f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f0c:	ee07 3a90 	vmov	s15, r3
 8015f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8015f14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015f18:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8015f1c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015f28:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8015f30:	e010      	b.n	8015f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2200      	movs	r2, #0
 8015f36:	609a      	str	r2, [r3, #8]
}
 8015f38:	e00c      	b.n	8015f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	609a      	str	r2, [r3, #8]
}
 8015f40:	e008      	b.n	8015f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	2200      	movs	r2, #0
 8015f46:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2200      	movs	r2, #0
 8015f52:	609a      	str	r2, [r3, #8]
}
 8015f54:	bf00      	nop
 8015f56:	372c      	adds	r7, #44	@ 0x2c
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5e:	4770      	bx	lr
 8015f60:	44020c00 	.word	0x44020c00
 8015f64:	03d09000 	.word	0x03d09000
 8015f68:	46000000 	.word	0x46000000
 8015f6c:	4a742400 	.word	0x4a742400
 8015f70:	4bbebc20 	.word	0x4bbebc20

08015f74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8015f74:	b480      	push	{r7}
 8015f76:	b08b      	sub	sp, #44	@ 0x2c
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8015f7c:	4bad      	ldr	r3, [pc, #692]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f84:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8015f86:	4bab      	ldr	r3, [pc, #684]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f8a:	f003 0303 	and.w	r3, r3, #3
 8015f8e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8015f90:	4ba8      	ldr	r3, [pc, #672]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f94:	0a1b      	lsrs	r3, r3, #8
 8015f96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015f9a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8015f9c:	4ba5      	ldr	r3, [pc, #660]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015fa0:	f003 0310 	and.w	r3, r3, #16
 8015fa4:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8015fa6:	4ba3      	ldr	r3, [pc, #652]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015faa:	08db      	lsrs	r3, r3, #3
 8015fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fb0:	697a      	ldr	r2, [r7, #20]
 8015fb2:	fb02 f303 	mul.w	r3, r2, r3
 8015fb6:	ee07 3a90 	vmov	s15, r3
 8015fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fbe:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8015fc2:	69bb      	ldr	r3, [r7, #24]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	f000 8126 	beq.w	8016216 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8015fca:	69fb      	ldr	r3, [r7, #28]
 8015fcc:	2b03      	cmp	r3, #3
 8015fce:	d053      	beq.n	8016078 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8015fd0:	69fb      	ldr	r3, [r7, #28]
 8015fd2:	2b03      	cmp	r3, #3
 8015fd4:	d86f      	bhi.n	80160b6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8015fd6:	69fb      	ldr	r3, [r7, #28]
 8015fd8:	2b01      	cmp	r3, #1
 8015fda:	d003      	beq.n	8015fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8015fdc:	69fb      	ldr	r3, [r7, #28]
 8015fde:	2b02      	cmp	r3, #2
 8015fe0:	d02b      	beq.n	801603a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8015fe2:	e068      	b.n	80160b6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8015fe4:	4b93      	ldr	r3, [pc, #588]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	08db      	lsrs	r3, r3, #3
 8015fea:	f003 0303 	and.w	r3, r3, #3
 8015fee:	4a92      	ldr	r2, [pc, #584]	@ (8016238 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8015ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8015ff4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	ee07 3a90 	vmov	s15, r3
 8015ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016000:	69bb      	ldr	r3, [r7, #24]
 8016002:	ee07 3a90 	vmov	s15, r3
 8016006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801600e:	6a3b      	ldr	r3, [r7, #32]
 8016010:	ee07 3a90 	vmov	s15, r3
 8016014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016018:	ed97 6a04 	vldr	s12, [r7, #16]
 801601c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 801623c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8016020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801602c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016034:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8016038:	e068      	b.n	801610c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 801603a:	69bb      	ldr	r3, [r7, #24]
 801603c:	ee07 3a90 	vmov	s15, r3
 8016040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016044:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8016240 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8016048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801604c:	6a3b      	ldr	r3, [r7, #32]
 801604e:	ee07 3a90 	vmov	s15, r3
 8016052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016056:	ed97 6a04 	vldr	s12, [r7, #16]
 801605a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801623c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 801605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016072:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8016076:	e049      	b.n	801610c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8016078:	69bb      	ldr	r3, [r7, #24]
 801607a:	ee07 3a90 	vmov	s15, r3
 801607e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016082:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8016244 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8016086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801608a:	6a3b      	ldr	r3, [r7, #32]
 801608c:	ee07 3a90 	vmov	s15, r3
 8016090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016094:	ed97 6a04 	vldr	s12, [r7, #16]
 8016098:	eddf 5a68 	vldr	s11, [pc, #416]	@ 801623c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 801609c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80160a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80160a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80160b4:	e02a      	b.n	801610c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80160b6:	4b5f      	ldr	r3, [pc, #380]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	08db      	lsrs	r3, r3, #3
 80160bc:	f003 0303 	and.w	r3, r3, #3
 80160c0:	4a5d      	ldr	r2, [pc, #372]	@ (8016238 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80160c2:	fa22 f303 	lsr.w	r3, r2, r3
 80160c6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	ee07 3a90 	vmov	s15, r3
 80160ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80160d2:	69bb      	ldr	r3, [r7, #24]
 80160d4:	ee07 3a90 	vmov	s15, r3
 80160d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80160e0:	6a3b      	ldr	r3, [r7, #32]
 80160e2:	ee07 3a90 	vmov	s15, r3
 80160e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80160ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80160ee:	eddf 5a53 	vldr	s11, [pc, #332]	@ 801623c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80160f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80160f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80160fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016106:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 801610a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801610c:	4b49      	ldr	r3, [pc, #292]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016118:	d121      	bne.n	801615e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 801611a:	4b46      	ldr	r3, [pc, #280]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 801611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801611e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016122:	2b00      	cmp	r3, #0
 8016124:	d017      	beq.n	8016156 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8016126:	4b43      	ldr	r3, [pc, #268]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8016128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801612a:	0a5b      	lsrs	r3, r3, #9
 801612c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016130:	ee07 3a90 	vmov	s15, r3
 8016134:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8016138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801613c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8016140:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8016144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801614c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	601a      	str	r2, [r3, #0]
 8016154:	e006      	b.n	8016164 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	2200      	movs	r2, #0
 801615a:	601a      	str	r2, [r3, #0]
 801615c:	e002      	b.n	8016164 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	2200      	movs	r2, #0
 8016162:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016164:	4b33      	ldr	r3, [pc, #204]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801616c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016170:	d121      	bne.n	80161b6 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8016172:	4b30      	ldr	r3, [pc, #192]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8016174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801617a:	2b00      	cmp	r3, #0
 801617c:	d017      	beq.n	80161ae <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801617e:	4b2d      	ldr	r3, [pc, #180]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8016180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016182:	0c1b      	lsrs	r3, r3, #16
 8016184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016188:	ee07 3a90 	vmov	s15, r3
 801618c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8016190:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016194:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8016198:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 801619c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80161a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80161a4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	605a      	str	r2, [r3, #4]
 80161ac:	e006      	b.n	80161bc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2200      	movs	r2, #0
 80161b2:	605a      	str	r2, [r3, #4]
 80161b4:	e002      	b.n	80161bc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2200      	movs	r2, #0
 80161ba:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80161bc:	4b1d      	ldr	r3, [pc, #116]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80161c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80161c8:	d121      	bne.n	801620e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80161ca:	4b1a      	ldr	r3, [pc, #104]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80161cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d017      	beq.n	8016206 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80161d6:	4b17      	ldr	r3, [pc, #92]	@ (8016234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80161d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161da:	0e1b      	lsrs	r3, r3, #24
 80161dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80161e0:	ee07 3a90 	vmov	s15, r3
 80161e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80161e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80161ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80161f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80161f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80161f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80161fc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8016204:	e010      	b.n	8016228 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	2200      	movs	r2, #0
 801620a:	609a      	str	r2, [r3, #8]
}
 801620c:	e00c      	b.n	8016228 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2200      	movs	r2, #0
 8016212:	609a      	str	r2, [r3, #8]
}
 8016214:	e008      	b.n	8016228 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2200      	movs	r2, #0
 801621a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	2200      	movs	r2, #0
 8016220:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2200      	movs	r2, #0
 8016226:	609a      	str	r2, [r3, #8]
}
 8016228:	bf00      	nop
 801622a:	372c      	adds	r7, #44	@ 0x2c
 801622c:	46bd      	mov	sp, r7
 801622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016232:	4770      	bx	lr
 8016234:	44020c00 	.word	0x44020c00
 8016238:	03d09000 	.word	0x03d09000
 801623c:	46000000 	.word	0x46000000
 8016240:	4a742400 	.word	0x4a742400
 8016244:	4bbebc20 	.word	0x4bbebc20

08016248 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8016248:	b590      	push	{r4, r7, lr}
 801624a:	b08f      	sub	sp, #60	@ 0x3c
 801624c:	af00      	add	r7, sp, #0
 801624e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8016252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016256:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 801625a:	4321      	orrs	r1, r4
 801625c:	d150      	bne.n	8016300 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 801625e:	4b26      	ldr	r3, [pc, #152]	@ (80162f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8016260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016268:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 801626a:	4b23      	ldr	r3, [pc, #140]	@ (80162f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801626c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016270:	f003 0302 	and.w	r3, r3, #2
 8016274:	2b02      	cmp	r3, #2
 8016276:	d108      	bne.n	801628a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8016278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801627a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801627e:	d104      	bne.n	801628a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8016280:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016284:	637b      	str	r3, [r7, #52]	@ 0x34
 8016286:	f002 bb2a 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 801628a:	4b1b      	ldr	r3, [pc, #108]	@ (80162f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801628c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016298:	d108      	bne.n	80162ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 801629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801629c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80162a0:	d104      	bne.n	80162ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80162a2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80162a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80162a8:	f002 bb19 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80162ac:	4b12      	ldr	r3, [pc, #72]	@ (80162f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80162b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80162b8:	d119      	bne.n	80162ee <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80162ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80162c0:	d115      	bne.n	80162ee <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80162c2:	4b0d      	ldr	r3, [pc, #52]	@ (80162f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80162c4:	69db      	ldr	r3, [r3, #28]
 80162c6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80162ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80162ce:	d30a      	bcc.n	80162e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80162d0:	4b09      	ldr	r3, [pc, #36]	@ (80162f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80162d2:	69db      	ldr	r3, [r3, #28]
 80162d4:	0a1b      	lsrs	r3, r3, #8
 80162d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80162da:	4a08      	ldr	r2, [pc, #32]	@ (80162fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80162dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80162e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80162e2:	f002 bafc 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80162e6:	2300      	movs	r3, #0
 80162e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80162ea:	f002 baf8 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80162ee:	2300      	movs	r3, #0
 80162f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80162f2:	f002 baf4 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80162f6:	bf00      	nop
 80162f8:	44020c00 	.word	0x44020c00
 80162fc:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8016300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016304:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8016308:	ea50 0104 	orrs.w	r1, r0, r4
 801630c:	f001 8275 	beq.w	80177fa <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8016310:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016314:	2801      	cmp	r0, #1
 8016316:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 801631a:	f082 82dd 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801631e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016322:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8016326:	ea50 0104 	orrs.w	r1, r0, r4
 801632a:	f001 816c 	beq.w	8017606 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 801632e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016332:	2801      	cmp	r0, #1
 8016334:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8016338:	f082 82ce 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801633c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016340:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8016344:	ea50 0104 	orrs.w	r1, r0, r4
 8016348:	f001 8602 	beq.w	8017f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 801634c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016350:	2801      	cmp	r0, #1
 8016352:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8016356:	f082 82bf 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801635a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801635e:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8016362:	ea50 0104 	orrs.w	r1, r0, r4
 8016366:	f001 854c 	beq.w	8017e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 801636a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801636e:	2801      	cmp	r0, #1
 8016370:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8016374:	f082 82b0 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016378:	e9d7 0100 	ldrd	r0, r1, [r7]
 801637c:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8016380:	ea50 0104 	orrs.w	r1, r0, r4
 8016384:	f001 849e 	beq.w	8017cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8016388:	e9d7 0100 	ldrd	r0, r1, [r7]
 801638c:	2801      	cmp	r0, #1
 801638e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8016392:	f082 82a1 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016396:	e9d7 0100 	ldrd	r0, r1, [r7]
 801639a:	f1a1 0420 	sub.w	r4, r1, #32
 801639e:	ea50 0104 	orrs.w	r1, r0, r4
 80163a2:	f001 83e8 	beq.w	8017b76 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80163a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163aa:	2801      	cmp	r0, #1
 80163ac:	f171 0120 	sbcs.w	r1, r1, #32
 80163b0:	f082 8292 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80163b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163b8:	f1a1 0410 	sub.w	r4, r1, #16
 80163bc:	ea50 0104 	orrs.w	r1, r0, r4
 80163c0:	f002 8256 	beq.w	8018870 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80163c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163c8:	2801      	cmp	r0, #1
 80163ca:	f171 0110 	sbcs.w	r1, r1, #16
 80163ce:	f082 8283 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80163d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163d6:	f1a1 0408 	sub.w	r4, r1, #8
 80163da:	ea50 0104 	orrs.w	r1, r0, r4
 80163de:	f002 81cc 	beq.w	801877a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80163e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163e6:	2801      	cmp	r0, #1
 80163e8:	f171 0108 	sbcs.w	r1, r1, #8
 80163ec:	f082 8274 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80163f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80163f4:	1f0c      	subs	r4, r1, #4
 80163f6:	ea50 0104 	orrs.w	r1, r0, r4
 80163fa:	f001 8648 	beq.w	801808e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80163fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016402:	2801      	cmp	r0, #1
 8016404:	f171 0104 	sbcs.w	r1, r1, #4
 8016408:	f082 8266 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801640c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016410:	1e8c      	subs	r4, r1, #2
 8016412:	ea50 0104 	orrs.w	r1, r0, r4
 8016416:	f002 8143 	beq.w	80186a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 801641a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801641e:	2801      	cmp	r0, #1
 8016420:	f171 0102 	sbcs.w	r1, r1, #2
 8016424:	f082 8258 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016428:	e9d7 0100 	ldrd	r0, r1, [r7]
 801642c:	1e4c      	subs	r4, r1, #1
 801642e:	ea50 0104 	orrs.w	r1, r0, r4
 8016432:	f002 80ce 	beq.w	80185d2 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8016436:	e9d7 0100 	ldrd	r0, r1, [r7]
 801643a:	2801      	cmp	r0, #1
 801643c:	f171 0101 	sbcs.w	r1, r1, #1
 8016440:	f082 824a 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016444:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016448:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 801644c:	4321      	orrs	r1, r4
 801644e:	f002 8059 	beq.w	8018504 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8016452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016456:	4cd9      	ldr	r4, [pc, #868]	@ (80167bc <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8016458:	42a0      	cmp	r0, r4
 801645a:	f171 0100 	sbcs.w	r1, r1, #0
 801645e:	f082 823b 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016466:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 801646a:	4321      	orrs	r1, r4
 801646c:	f001 87d9 	beq.w	8018422 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8016470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016474:	4cd2      	ldr	r4, [pc, #840]	@ (80167c0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8016476:	42a0      	cmp	r0, r4
 8016478:	f171 0100 	sbcs.w	r1, r1, #0
 801647c:	f082 822c 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016484:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8016488:	4321      	orrs	r1, r4
 801648a:	f001 8751 	beq.w	8018330 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 801648e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016492:	4ccc      	ldr	r4, [pc, #816]	@ (80167c4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8016494:	42a0      	cmp	r0, r4
 8016496:	f171 0100 	sbcs.w	r1, r1, #0
 801649a:	f082 821d 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801649e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164a2:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80164a6:	4321      	orrs	r1, r4
 80164a8:	f001 869a 	beq.w	80181e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80164ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164b0:	4cc5      	ldr	r4, [pc, #788]	@ (80167c8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80164b2:	42a0      	cmp	r0, r4
 80164b4:	f171 0100 	sbcs.w	r1, r1, #0
 80164b8:	f082 820e 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80164bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164c0:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80164c4:	4321      	orrs	r1, r4
 80164c6:	f001 8612 	beq.w	80180ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80164ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164ce:	4cbf      	ldr	r4, [pc, #764]	@ (80167cc <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80164d0:	42a0      	cmp	r0, r4
 80164d2:	f171 0100 	sbcs.w	r1, r1, #0
 80164d6:	f082 81ff 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80164da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164de:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80164e2:	4321      	orrs	r1, r4
 80164e4:	f002 817e 	beq.w	80187e4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80164e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164ec:	4cb8      	ldr	r4, [pc, #736]	@ (80167d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80164ee:	42a0      	cmp	r0, r4
 80164f0:	f171 0100 	sbcs.w	r1, r1, #0
 80164f4:	f082 81f0 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80164f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80164fc:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8016500:	4321      	orrs	r1, r4
 8016502:	f000 829e 	beq.w	8016a42 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8016506:	e9d7 0100 	ldrd	r0, r1, [r7]
 801650a:	4cb2      	ldr	r4, [pc, #712]	@ (80167d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 801650c:	42a0      	cmp	r0, r4
 801650e:	f171 0100 	sbcs.w	r1, r1, #0
 8016512:	f082 81e1 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016516:	e9d7 0100 	ldrd	r0, r1, [r7]
 801651a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 801651e:	4321      	orrs	r1, r4
 8016520:	f000 826d 	beq.w	80169fe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8016524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016528:	4cab      	ldr	r4, [pc, #684]	@ (80167d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 801652a:	42a0      	cmp	r0, r4
 801652c:	f171 0100 	sbcs.w	r1, r1, #0
 8016530:	f082 81d2 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016538:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 801653c:	4321      	orrs	r1, r4
 801653e:	f001 800d 	beq.w	801755c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8016542:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016546:	4ca5      	ldr	r4, [pc, #660]	@ (80167dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8016548:	42a0      	cmp	r0, r4
 801654a:	f171 0100 	sbcs.w	r1, r1, #0
 801654e:	f082 81c3 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016556:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 801655a:	4321      	orrs	r1, r4
 801655c:	f000 81d0 	beq.w	8016900 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8016560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016564:	4c9e      	ldr	r4, [pc, #632]	@ (80167e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8016566:	42a0      	cmp	r0, r4
 8016568:	f171 0100 	sbcs.w	r1, r1, #0
 801656c:	f082 81b4 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016570:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016574:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8016578:	4321      	orrs	r1, r4
 801657a:	f000 8142 	beq.w	8016802 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 801657e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016582:	4c98      	ldr	r4, [pc, #608]	@ (80167e4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8016584:	42a0      	cmp	r0, r4
 8016586:	f171 0100 	sbcs.w	r1, r1, #0
 801658a:	f082 81a5 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801658e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016592:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8016596:	4321      	orrs	r1, r4
 8016598:	f001 824e 	beq.w	8017a38 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 801659c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165a0:	4c91      	ldr	r4, [pc, #580]	@ (80167e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80165a2:	42a0      	cmp	r0, r4
 80165a4:	f171 0100 	sbcs.w	r1, r1, #0
 80165a8:	f082 8196 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80165ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165b0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80165b4:	4321      	orrs	r1, r4
 80165b6:	f001 8197 	beq.w	80178e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80165ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165be:	4c8b      	ldr	r4, [pc, #556]	@ (80167ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80165c0:	42a0      	cmp	r0, r4
 80165c2:	f171 0100 	sbcs.w	r1, r1, #0
 80165c6:	f082 8187 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80165ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165ce:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80165d2:	4321      	orrs	r1, r4
 80165d4:	f001 8154 	beq.w	8017880 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80165d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165dc:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80165e0:	f171 0100 	sbcs.w	r1, r1, #0
 80165e4:	f082 8178 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80165e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165ec:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80165f0:	4321      	orrs	r1, r4
 80165f2:	f001 80b7 	beq.w	8017764 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80165f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165fa:	f248 0401 	movw	r4, #32769	@ 0x8001
 80165fe:	42a0      	cmp	r0, r4
 8016600:	f171 0100 	sbcs.w	r1, r1, #0
 8016604:	f082 8168 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016608:	e9d7 0100 	ldrd	r0, r1, [r7]
 801660c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8016610:	4321      	orrs	r1, r4
 8016612:	f001 8064 	beq.w	80176de <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8016616:	e9d7 0100 	ldrd	r0, r1, [r7]
 801661a:	f244 0401 	movw	r4, #16385	@ 0x4001
 801661e:	42a0      	cmp	r0, r4
 8016620:	f171 0100 	sbcs.w	r1, r1, #0
 8016624:	f082 8158 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016628:	e9d7 0100 	ldrd	r0, r1, [r7]
 801662c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8016630:	4321      	orrs	r1, r4
 8016632:	f001 8011 	beq.w	8017658 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8016636:	e9d7 0100 	ldrd	r0, r1, [r7]
 801663a:	f242 0401 	movw	r4, #8193	@ 0x2001
 801663e:	42a0      	cmp	r0, r4
 8016640:	f171 0100 	sbcs.w	r1, r1, #0
 8016644:	f082 8148 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016648:	e9d7 0100 	ldrd	r0, r1, [r7]
 801664c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8016650:	4321      	orrs	r1, r4
 8016652:	f000 871e 	beq.w	8017492 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8016656:	e9d7 0100 	ldrd	r0, r1, [r7]
 801665a:	f241 0401 	movw	r4, #4097	@ 0x1001
 801665e:	42a0      	cmp	r0, r4
 8016660:	f171 0100 	sbcs.w	r1, r1, #0
 8016664:	f082 8138 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016668:	e9d7 0100 	ldrd	r0, r1, [r7]
 801666c:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8016670:	4321      	orrs	r1, r4
 8016672:	f000 86a8 	beq.w	80173c6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8016676:	e9d7 0100 	ldrd	r0, r1, [r7]
 801667a:	f640 0401 	movw	r4, #2049	@ 0x801
 801667e:	42a0      	cmp	r0, r4
 8016680:	f171 0100 	sbcs.w	r1, r1, #0
 8016684:	f082 8128 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016688:	e9d7 0100 	ldrd	r0, r1, [r7]
 801668c:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8016690:	4321      	orrs	r1, r4
 8016692:	f000 8632 	beq.w	80172fa <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8016696:	e9d7 0100 	ldrd	r0, r1, [r7]
 801669a:	f240 4401 	movw	r4, #1025	@ 0x401
 801669e:	42a0      	cmp	r0, r4
 80166a0:	f171 0100 	sbcs.w	r1, r1, #0
 80166a4:	f082 8118 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80166a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166ac:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80166b0:	4321      	orrs	r1, r4
 80166b2:	f000 85b0 	beq.w	8017216 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80166b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166ba:	f240 2401 	movw	r4, #513	@ 0x201
 80166be:	42a0      	cmp	r0, r4
 80166c0:	f171 0100 	sbcs.w	r1, r1, #0
 80166c4:	f082 8108 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80166c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166cc:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80166d0:	4321      	orrs	r1, r4
 80166d2:	f000 8535 	beq.w	8017140 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80166d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166da:	f240 1401 	movw	r4, #257	@ 0x101
 80166de:	42a0      	cmp	r0, r4
 80166e0:	f171 0100 	sbcs.w	r1, r1, #0
 80166e4:	f082 80f8 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80166e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166ec:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80166f0:	4321      	orrs	r1, r4
 80166f2:	f000 84ba 	beq.w	801706a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80166f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166fa:	2881      	cmp	r0, #129	@ 0x81
 80166fc:	f171 0100 	sbcs.w	r1, r1, #0
 8016700:	f082 80ea 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016708:	2821      	cmp	r0, #33	@ 0x21
 801670a:	f171 0100 	sbcs.w	r1, r1, #0
 801670e:	d26f      	bcs.n	80167f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8016710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016714:	4301      	orrs	r1, r0
 8016716:	f002 80df 	beq.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801671a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801671e:	1e42      	subs	r2, r0, #1
 8016720:	f141 33ff 	adc.w	r3, r1, #4294967295
 8016724:	2a20      	cmp	r2, #32
 8016726:	f173 0100 	sbcs.w	r1, r3, #0
 801672a:	f082 80d5 	bcs.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 801672e:	2a1f      	cmp	r2, #31
 8016730:	f202 80d2 	bhi.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8016734:	a101      	add	r1, pc, #4	@ (adr r1, 801673c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8016736:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801673a:	bf00      	nop
 801673c:	08016a9d 	.word	0x08016a9d
 8016740:	08016b69 	.word	0x08016b69
 8016744:	080188d9 	.word	0x080188d9
 8016748:	08016c29 	.word	0x08016c29
 801674c:	080188d9 	.word	0x080188d9
 8016750:	080188d9 	.word	0x080188d9
 8016754:	080188d9 	.word	0x080188d9
 8016758:	08016cf9 	.word	0x08016cf9
 801675c:	080188d9 	.word	0x080188d9
 8016760:	080188d9 	.word	0x080188d9
 8016764:	080188d9 	.word	0x080188d9
 8016768:	080188d9 	.word	0x080188d9
 801676c:	080188d9 	.word	0x080188d9
 8016770:	080188d9 	.word	0x080188d9
 8016774:	080188d9 	.word	0x080188d9
 8016778:	08016ddb 	.word	0x08016ddb
 801677c:	080188d9 	.word	0x080188d9
 8016780:	080188d9 	.word	0x080188d9
 8016784:	080188d9 	.word	0x080188d9
 8016788:	080188d9 	.word	0x080188d9
 801678c:	080188d9 	.word	0x080188d9
 8016790:	080188d9 	.word	0x080188d9
 8016794:	080188d9 	.word	0x080188d9
 8016798:	080188d9 	.word	0x080188d9
 801679c:	080188d9 	.word	0x080188d9
 80167a0:	080188d9 	.word	0x080188d9
 80167a4:	080188d9 	.word	0x080188d9
 80167a8:	080188d9 	.word	0x080188d9
 80167ac:	080188d9 	.word	0x080188d9
 80167b0:	080188d9 	.word	0x080188d9
 80167b4:	080188d9 	.word	0x080188d9
 80167b8:	08016eb1 	.word	0x08016eb1
 80167bc:	80000001 	.word	0x80000001
 80167c0:	40000001 	.word	0x40000001
 80167c4:	20000001 	.word	0x20000001
 80167c8:	10000001 	.word	0x10000001
 80167cc:	08000001 	.word	0x08000001
 80167d0:	04000001 	.word	0x04000001
 80167d4:	00800001 	.word	0x00800001
 80167d8:	00400001 	.word	0x00400001
 80167dc:	00200001 	.word	0x00200001
 80167e0:	00100001 	.word	0x00100001
 80167e4:	00080001 	.word	0x00080001
 80167e8:	00040001 	.word	0x00040001
 80167ec:	00020001 	.word	0x00020001
 80167f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80167f4:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80167f8:	430b      	orrs	r3, r1
 80167fa:	f000 83c4 	beq.w	8016f86 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80167fe:	f002 b86b 	b.w	80188d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8016802:	4ba1      	ldr	r3, [pc, #644]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8016808:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801680c:	633b      	str	r3, [r7, #48]	@ 0x30
 801680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016814:	d036      	beq.n	8016884 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8016816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016818:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801681c:	d86b      	bhi.n	80168f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 801681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016820:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8016824:	d02b      	beq.n	801687e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8016826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016828:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801682c:	d863      	bhi.n	80168f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 801682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016834:	d01b      	beq.n	801686e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8016836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016838:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801683c:	d85b      	bhi.n	80168f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 801683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016840:	2b00      	cmp	r3, #0
 8016842:	d004      	beq.n	801684e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8016844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801684a:	d008      	beq.n	801685e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 801684c:	e053      	b.n	80168f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801684e:	f107 0320 	add.w	r3, r7, #32
 8016852:	4618      	mov	r0, r3
 8016854:	f7ff f8ba 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8016858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801685a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801685c:	e04e      	b.n	80168fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801685e:	f107 0314 	add.w	r3, r7, #20
 8016862:	4618      	mov	r0, r3
 8016864:	f7ff fa1c 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801686c:	e046      	b.n	80168fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801686e:	f107 0308 	add.w	r3, r7, #8
 8016872:	4618      	mov	r0, r3
 8016874:	f7ff fb7e 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8016878:	68bb      	ldr	r3, [r7, #8]
 801687a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801687c:	e03e      	b.n	80168fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 801687e:	4b83      	ldr	r3, [pc, #524]	@ (8016a8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8016880:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8016882:	e03b      	b.n	80168fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016884:	4b80      	ldr	r3, [pc, #512]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801688a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801688e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016890:	4b7d      	ldr	r3, [pc, #500]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	f003 0302 	and.w	r3, r3, #2
 8016898:	2b02      	cmp	r3, #2
 801689a:	d10c      	bne.n	80168b6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 801689c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d109      	bne.n	80168b6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80168a2:	4b79      	ldr	r3, [pc, #484]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	08db      	lsrs	r3, r3, #3
 80168a8:	f003 0303 	and.w	r3, r3, #3
 80168ac:	4a78      	ldr	r2, [pc, #480]	@ (8016a90 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80168ae:	fa22 f303 	lsr.w	r3, r2, r3
 80168b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80168b4:	e01e      	b.n	80168f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80168b6:	4b74      	ldr	r3, [pc, #464]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80168be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80168c2:	d106      	bne.n	80168d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80168c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80168ca:	d102      	bne.n	80168d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80168cc:	4b71      	ldr	r3, [pc, #452]	@ (8016a94 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80168ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80168d0:	e010      	b.n	80168f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80168d2:	4b6d      	ldr	r3, [pc, #436]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80168da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80168de:	d106      	bne.n	80168ee <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80168e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80168e6:	d102      	bne.n	80168ee <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80168e8:	4b6b      	ldr	r3, [pc, #428]	@ (8016a98 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80168ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80168ec:	e002      	b.n	80168f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80168ee:	2300      	movs	r3, #0
 80168f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80168f2:	e003      	b.n	80168fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80168f4:	e002      	b.n	80168fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80168f6:	2300      	movs	r3, #0
 80168f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80168fa:	bf00      	nop
          }
        }
        break;
 80168fc:	f001 bfef 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8016900:	4b61      	ldr	r3, [pc, #388]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8016906:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 801690a:	633b      	str	r3, [r7, #48]	@ 0x30
 801690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801690e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016912:	d036      	beq.n	8016982 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8016914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016916:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801691a:	d86b      	bhi.n	80169f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 801691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801691e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8016922:	d02b      	beq.n	801697c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8016924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016926:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 801692a:	d863      	bhi.n	80169f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 801692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801692e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016932:	d01b      	beq.n	801696c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8016934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801693a:	d85b      	bhi.n	80169f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 801693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801693e:	2b00      	cmp	r3, #0
 8016940:	d004      	beq.n	801694c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8016942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016944:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8016948:	d008      	beq.n	801695c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 801694a:	e053      	b.n	80169f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801694c:	f107 0320 	add.w	r3, r7, #32
 8016950:	4618      	mov	r0, r3
 8016952:	f7ff f83b 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8016956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016958:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801695a:	e04e      	b.n	80169fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801695c:	f107 0314 	add.w	r3, r7, #20
 8016960:	4618      	mov	r0, r3
 8016962:	f7ff f99d 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8016966:	697b      	ldr	r3, [r7, #20]
 8016968:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801696a:	e046      	b.n	80169fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801696c:	f107 0308 	add.w	r3, r7, #8
 8016970:	4618      	mov	r0, r3
 8016972:	f7ff faff 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801697a:	e03e      	b.n	80169fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 801697c:	4b43      	ldr	r3, [pc, #268]	@ (8016a8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 801697e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8016980:	e03b      	b.n	80169fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016982:	4b41      	ldr	r3, [pc, #260]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8016988:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801698c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801698e:	4b3e      	ldr	r3, [pc, #248]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	f003 0302 	and.w	r3, r3, #2
 8016996:	2b02      	cmp	r3, #2
 8016998:	d10c      	bne.n	80169b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 801699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801699c:	2b00      	cmp	r3, #0
 801699e:	d109      	bne.n	80169b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80169a0:	4b39      	ldr	r3, [pc, #228]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	08db      	lsrs	r3, r3, #3
 80169a6:	f003 0303 	and.w	r3, r3, #3
 80169aa:	4a39      	ldr	r2, [pc, #228]	@ (8016a90 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80169ac:	fa22 f303 	lsr.w	r3, r2, r3
 80169b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80169b2:	e01e      	b.n	80169f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80169b4:	4b34      	ldr	r3, [pc, #208]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80169bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80169c0:	d106      	bne.n	80169d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80169c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80169c8:	d102      	bne.n	80169d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80169ca:	4b32      	ldr	r3, [pc, #200]	@ (8016a94 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80169cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80169ce:	e010      	b.n	80169f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80169d0:	4b2d      	ldr	r3, [pc, #180]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80169d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80169dc:	d106      	bne.n	80169ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80169de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80169e4:	d102      	bne.n	80169ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80169e6:	4b2c      	ldr	r3, [pc, #176]	@ (8016a98 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80169e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80169ea:	e002      	b.n	80169f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80169ec:	2300      	movs	r3, #0
 80169ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80169f0:	e003      	b.n	80169fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80169f2:	e002      	b.n	80169fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80169f4:	2300      	movs	r3, #0
 80169f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80169f8:	bf00      	nop
          }
        }
        break;
 80169fa:	f001 bf70 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80169fe:	4b22      	ldr	r3, [pc, #136]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016a00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8016a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016a08:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8016a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d108      	bne.n	8016a22 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016a10:	f107 0320 	add.w	r3, r7, #32
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7fe ffd9 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a1c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8016a1e:	f001 bf5e 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8016a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a24:	2b40      	cmp	r3, #64	@ 0x40
 8016a26:	d108      	bne.n	8016a3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016a28:	f107 0314 	add.w	r3, r7, #20
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f7ff f937 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8016a32:	69fb      	ldr	r3, [r7, #28]
 8016a34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016a36:	f001 bf52 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016a3e:	f001 bf4e 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8016a42:	4b11      	ldr	r3, [pc, #68]	@ (8016a88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8016a44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8016a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a4c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d108      	bne.n	8016a66 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016a54:	f107 0320 	add.w	r3, r7, #32
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7fe ffb7 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8016a62:	f001 bf3c 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8016a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a68:	2b80      	cmp	r3, #128	@ 0x80
 8016a6a:	d108      	bne.n	8016a7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016a6c:	f107 0314 	add.w	r3, r7, #20
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7ff f915 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8016a76:	69fb      	ldr	r3, [r7, #28]
 8016a78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016a7a:	f001 bf30 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016a82:	f001 bf2c 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016a86:	bf00      	nop
 8016a88:	44020c00 	.word	0x44020c00
 8016a8c:	00bb8000 	.word	0x00bb8000
 8016a90:	03d09000 	.word	0x03d09000
 8016a94:	003d0900 	.word	0x003d0900
 8016a98:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8016a9c:	4b9d      	ldr	r3, [pc, #628]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016a9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016aa2:	f003 0307 	and.w	r3, r3, #7
 8016aa6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8016aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d104      	bne.n	8016ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8016aae:	f7fc ffd7 	bl	8013a60 <HAL_RCC_GetPCLK2Freq>
 8016ab2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8016ab4:	f001 bf13 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8016ab8:	4b96      	ldr	r3, [pc, #600]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016ac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016ac4:	d10a      	bne.n	8016adc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8016ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ac8:	2b01      	cmp	r3, #1
 8016aca:	d107      	bne.n	8016adc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016acc:	f107 0314 	add.w	r3, r7, #20
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f7ff f8e5 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016ad6:	69bb      	ldr	r3, [r7, #24]
 8016ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ada:	e043      	b.n	8016b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8016adc:	4b8d      	ldr	r3, [pc, #564]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016ae8:	d10a      	bne.n	8016b00 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8016aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016aec:	2b02      	cmp	r3, #2
 8016aee:	d107      	bne.n	8016b00 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016af0:	f107 0308 	add.w	r3, r7, #8
 8016af4:	4618      	mov	r0, r3
 8016af6:	f7ff fa3d 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8016afe:	e031      	b.n	8016b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8016b00:	4b84      	ldr	r3, [pc, #528]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	f003 0302 	and.w	r3, r3, #2
 8016b08:	2b02      	cmp	r3, #2
 8016b0a:	d10c      	bne.n	8016b26 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8016b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b0e:	2b03      	cmp	r3, #3
 8016b10:	d109      	bne.n	8016b26 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016b12:	4b80      	ldr	r3, [pc, #512]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	08db      	lsrs	r3, r3, #3
 8016b18:	f003 0303 	and.w	r3, r3, #3
 8016b1c:	4a7e      	ldr	r2, [pc, #504]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8016b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8016b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b24:	e01e      	b.n	8016b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8016b26:	4b7b      	ldr	r3, [pc, #492]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b32:	d105      	bne.n	8016b40 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8016b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b36:	2b04      	cmp	r3, #4
 8016b38:	d102      	bne.n	8016b40 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8016b3a:	4b78      	ldr	r3, [pc, #480]	@ (8016d1c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8016b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b3e:	e011      	b.n	8016b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8016b40:	4b74      	ldr	r3, [pc, #464]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016b46:	f003 0302 	and.w	r3, r3, #2
 8016b4a:	2b02      	cmp	r3, #2
 8016b4c:	d106      	bne.n	8016b5c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8016b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b50:	2b05      	cmp	r3, #5
 8016b52:	d103      	bne.n	8016b5c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8016b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b5a:	e003      	b.n	8016b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016b60:	f001 bebd 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016b64:	f001 bebb 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8016b68:	4b6a      	ldr	r3, [pc, #424]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016b6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8016b72:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8016b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d104      	bne.n	8016b84 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016b7a:	f7fc ff5b 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8016b7e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8016b80:	f001 bead 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8016b84:	4b63      	ldr	r3, [pc, #396]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016b90:	d10a      	bne.n	8016ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8016b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b94:	2b08      	cmp	r3, #8
 8016b96:	d107      	bne.n	8016ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016b98:	f107 0314 	add.w	r3, r7, #20
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f7ff f87f 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ba6:	e03d      	b.n	8016c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8016ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016baa:	2b10      	cmp	r3, #16
 8016bac:	d108      	bne.n	8016bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016bae:	f107 0308 	add.w	r3, r7, #8
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f7ff f9de 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016bbc:	f001 be8f 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8016bc0:	4b54      	ldr	r3, [pc, #336]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	f003 0302 	and.w	r3, r3, #2
 8016bc8:	2b02      	cmp	r3, #2
 8016bca:	d10c      	bne.n	8016be6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8016bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bce:	2b18      	cmp	r3, #24
 8016bd0:	d109      	bne.n	8016be6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016bd2:	4b50      	ldr	r3, [pc, #320]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	08db      	lsrs	r3, r3, #3
 8016bd8:	f003 0303 	and.w	r3, r3, #3
 8016bdc:	4a4e      	ldr	r2, [pc, #312]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8016bde:	fa22 f303 	lsr.w	r3, r2, r3
 8016be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8016be4:	e01e      	b.n	8016c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8016be6:	4b4b      	ldr	r3, [pc, #300]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016bf2:	d105      	bne.n	8016c00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8016bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bf6:	2b20      	cmp	r3, #32
 8016bf8:	d102      	bne.n	8016c00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8016bfa:	4b48      	ldr	r3, [pc, #288]	@ (8016d1c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8016bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8016bfe:	e011      	b.n	8016c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8016c00:	4b44      	ldr	r3, [pc, #272]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016c06:	f003 0302 	and.w	r3, r3, #2
 8016c0a:	2b02      	cmp	r3, #2
 8016c0c:	d106      	bne.n	8016c1c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8016c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c10:	2b28      	cmp	r3, #40	@ 0x28
 8016c12:	d103      	bne.n	8016c1c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8016c14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c1a:	e003      	b.n	8016c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016c20:	f001 be5d 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016c24:	f001 be5b 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8016c28:	4b3a      	ldr	r3, [pc, #232]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016c2e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8016c32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8016c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d104      	bne.n	8016c44 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016c3a:	f7fc fefb 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8016c3e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8016c40:	f001 be4d 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8016c44:	4b33      	ldr	r3, [pc, #204]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016c50:	d10a      	bne.n	8016c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8016c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c54:	2b40      	cmp	r3, #64	@ 0x40
 8016c56:	d107      	bne.n	8016c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016c58:	f107 0314 	add.w	r3, r7, #20
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7ff f81f 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016c62:	69bb      	ldr	r3, [r7, #24]
 8016c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c66:	e045      	b.n	8016cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8016c68:	4b2a      	ldr	r3, [pc, #168]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016c74:	d10a      	bne.n	8016c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8016c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c78:	2b80      	cmp	r3, #128	@ 0x80
 8016c7a:	d107      	bne.n	8016c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016c7c:	f107 0308 	add.w	r3, r7, #8
 8016c80:	4618      	mov	r0, r3
 8016c82:	f7ff f977 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c8a:	e033      	b.n	8016cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8016c8c:	4b21      	ldr	r3, [pc, #132]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	f003 0302 	and.w	r3, r3, #2
 8016c94:	2b02      	cmp	r3, #2
 8016c96:	d10c      	bne.n	8016cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8016c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8016c9c:	d109      	bne.n	8016cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	08db      	lsrs	r3, r3, #3
 8016ca4:	f003 0303 	and.w	r3, r3, #3
 8016ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8016caa:	fa22 f303 	lsr.w	r3, r2, r3
 8016cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8016cb0:	e020      	b.n	8016cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8016cb2:	4b18      	ldr	r3, [pc, #96]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016cbe:	d106      	bne.n	8016cce <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8016cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016cc6:	d102      	bne.n	8016cce <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8016cc8:	4b14      	ldr	r3, [pc, #80]	@ (8016d1c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8016cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ccc:	e012      	b.n	8016cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8016cce:	4b11      	ldr	r3, [pc, #68]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016cd4:	f003 0302 	and.w	r3, r3, #2
 8016cd8:	2b02      	cmp	r3, #2
 8016cda:	d107      	bne.n	8016cec <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8016cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cde:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8016ce2:	d103      	bne.n	8016cec <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8016ce4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8016cea:	e003      	b.n	8016cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8016cec:	2300      	movs	r3, #0
 8016cee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016cf0:	f001 bdf5 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016cf4:	f001 bdf3 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8016cf8:	4b06      	ldr	r3, [pc, #24]	@ (8016d14 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8016cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016cfe:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8016d02:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8016d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d10a      	bne.n	8016d20 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016d0a:	f7fc fe93 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8016d0e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8016d10:	f001 bde5 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016d14:	44020c00 	.word	0x44020c00
 8016d18:	03d09000 	.word	0x03d09000
 8016d1c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8016d20:	4ba0      	ldr	r3, [pc, #640]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016d28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016d2c:	d10b      	bne.n	8016d46 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8016d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016d34:	d107      	bne.n	8016d46 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016d36:	f107 0314 	add.w	r3, r7, #20
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fe ffb0 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016d40:	69bb      	ldr	r3, [r7, #24]
 8016d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d44:	e047      	b.n	8016dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8016d46:	4b97      	ldr	r3, [pc, #604]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016d52:	d10b      	bne.n	8016d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8016d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016d5a:	d107      	bne.n	8016d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016d5c:	f107 0308 	add.w	r3, r7, #8
 8016d60:	4618      	mov	r0, r3
 8016d62:	f7ff f907 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d6a:	e034      	b.n	8016dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8016d6c:	4b8d      	ldr	r3, [pc, #564]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	f003 0302 	and.w	r3, r3, #2
 8016d74:	2b02      	cmp	r3, #2
 8016d76:	d10d      	bne.n	8016d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8016d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8016d7e:	d109      	bne.n	8016d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016d80:	4b88      	ldr	r3, [pc, #544]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	08db      	lsrs	r3, r3, #3
 8016d86:	f003 0303 	and.w	r3, r3, #3
 8016d8a:	4a87      	ldr	r2, [pc, #540]	@ (8016fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8016d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8016d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d92:	e020      	b.n	8016dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8016d94:	4b83      	ldr	r3, [pc, #524]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016da0:	d106      	bne.n	8016db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8016da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016da8:	d102      	bne.n	8016db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8016daa:	4b80      	ldr	r3, [pc, #512]	@ (8016fac <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8016dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8016dae:	e012      	b.n	8016dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8016db0:	4b7c      	ldr	r3, [pc, #496]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016db6:	f003 0302 	and.w	r3, r3, #2
 8016dba:	2b02      	cmp	r3, #2
 8016dbc:	d107      	bne.n	8016dce <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8016dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dc0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8016dc4:	d103      	bne.n	8016dce <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8016dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8016dcc:	e003      	b.n	8016dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016dd2:	f001 bd84 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016dd6:	f001 bd82 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8016dda:	4b72      	ldr	r3, [pc, #456]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016de0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8016de4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8016de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d104      	bne.n	8016df6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016dec:	f7fc fe22 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8016df0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8016df2:	f001 bd74 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8016df6:	4b6b      	ldr	r3, [pc, #428]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016dfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016e02:	d10b      	bne.n	8016e1c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8016e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016e0a:	d107      	bne.n	8016e1c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016e0c:	f107 0314 	add.w	r3, r7, #20
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7fe ff45 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016e16:	69bb      	ldr	r3, [r7, #24]
 8016e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e1a:	e047      	b.n	8016eac <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8016e1c:	4b61      	ldr	r3, [pc, #388]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016e28:	d10b      	bne.n	8016e42 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8016e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016e30:	d107      	bne.n	8016e42 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016e32:	f107 0308 	add.w	r3, r7, #8
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7ff f89c 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e40:	e034      	b.n	8016eac <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8016e42:	4b58      	ldr	r3, [pc, #352]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	f003 0302 	and.w	r3, r3, #2
 8016e4a:	2b02      	cmp	r3, #2
 8016e4c:	d10d      	bne.n	8016e6a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8016e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016e54:	d109      	bne.n	8016e6a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016e56:	4b53      	ldr	r3, [pc, #332]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	08db      	lsrs	r3, r3, #3
 8016e5c:	f003 0303 	and.w	r3, r3, #3
 8016e60:	4a51      	ldr	r2, [pc, #324]	@ (8016fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8016e62:	fa22 f303 	lsr.w	r3, r2, r3
 8016e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e68:	e020      	b.n	8016eac <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8016e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016e76:	d106      	bne.n	8016e86 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8016e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016e7e:	d102      	bne.n	8016e86 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8016e80:	4b4a      	ldr	r3, [pc, #296]	@ (8016fac <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8016e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e84:	e012      	b.n	8016eac <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8016e86:	4b47      	ldr	r3, [pc, #284]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016e8c:	f003 0302 	and.w	r3, r3, #2
 8016e90:	2b02      	cmp	r3, #2
 8016e92:	d107      	bne.n	8016ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8016e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e96:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8016e9a:	d103      	bne.n	8016ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8016e9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ea2:	e003      	b.n	8016eac <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016ea8:	f001 bd19 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016eac:	f001 bd17 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8016eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016eb6:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8016eba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8016ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d104      	bne.n	8016ecc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016ec2:	f7fc fdb7 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8016ec6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8016ec8:	f001 bd09 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8016ecc:	4b35      	ldr	r3, [pc, #212]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016ed4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016ed8:	d10b      	bne.n	8016ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8016eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016ee0:	d107      	bne.n	8016ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016ee2:	f107 0314 	add.w	r3, r7, #20
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7fe feda 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016eec:	69bb      	ldr	r3, [r7, #24]
 8016eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ef0:	e047      	b.n	8016f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8016ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016efe:	d10b      	bne.n	8016f18 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8016f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016f06:	d107      	bne.n	8016f18 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016f08:	f107 0308 	add.w	r3, r7, #8
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f7ff f831 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f16:	e034      	b.n	8016f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8016f18:	4b22      	ldr	r3, [pc, #136]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	f003 0302 	and.w	r3, r3, #2
 8016f20:	2b02      	cmp	r3, #2
 8016f22:	d10d      	bne.n	8016f40 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8016f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f26:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8016f2a:	d109      	bne.n	8016f40 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8016f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	08db      	lsrs	r3, r3, #3
 8016f32:	f003 0303 	and.w	r3, r3, #3
 8016f36:	4a1c      	ldr	r2, [pc, #112]	@ (8016fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8016f38:	fa22 f303 	lsr.w	r3, r2, r3
 8016f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f3e:	e020      	b.n	8016f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8016f40:	4b18      	ldr	r3, [pc, #96]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016f4c:	d106      	bne.n	8016f5c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8016f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016f54:	d102      	bne.n	8016f5c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8016f56:	4b15      	ldr	r3, [pc, #84]	@ (8016fac <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8016f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f5a:	e012      	b.n	8016f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8016f5c:	4b11      	ldr	r3, [pc, #68]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016f62:	f003 0302 	and.w	r3, r3, #2
 8016f66:	2b02      	cmp	r3, #2
 8016f68:	d107      	bne.n	8016f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8016f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f6c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8016f70:	d103      	bne.n	8016f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8016f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f78:	e003      	b.n	8016f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016f7e:	f001 bcae 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016f82:	f001 bcac 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8016f86:	4b07      	ldr	r3, [pc, #28]	@ (8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8016f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016f8c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8016f90:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8016f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d10b      	bne.n	8016fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8016f98:	f7fc fd4c 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8016f9c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8016f9e:	f001 bc9e 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8016fa2:	bf00      	nop
 8016fa4:	44020c00 	.word	0x44020c00
 8016fa8:	03d09000 	.word	0x03d09000
 8016fac:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8016fb0:	4ba0      	ldr	r3, [pc, #640]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016fb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016fbc:	d10b      	bne.n	8016fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8016fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016fc4:	d107      	bne.n	8016fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016fc6:	f107 0314 	add.w	r3, r7, #20
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7fe fe68 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016fd0:	69bb      	ldr	r3, [r7, #24]
 8016fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8016fd4:	e047      	b.n	8017066 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8016fd6:	4b97      	ldr	r3, [pc, #604]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016fe2:	d10b      	bne.n	8016ffc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8016fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fe6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8016fea:	d107      	bne.n	8016ffc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016fec:	f107 0308 	add.w	r3, r7, #8
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f7fe ffbf 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ffa:	e034      	b.n	8017066 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8016ffc:	4b8d      	ldr	r3, [pc, #564]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	f003 0302 	and.w	r3, r3, #2
 8017004:	2b02      	cmp	r3, #2
 8017006:	d10d      	bne.n	8017024 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8017008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801700a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 801700e:	d109      	bne.n	8017024 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017010:	4b88      	ldr	r3, [pc, #544]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	08db      	lsrs	r3, r3, #3
 8017016:	f003 0303 	and.w	r3, r3, #3
 801701a:	4a87      	ldr	r2, [pc, #540]	@ (8017238 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 801701c:	fa22 f303 	lsr.w	r3, r2, r3
 8017020:	637b      	str	r3, [r7, #52]	@ 0x34
 8017022:	e020      	b.n	8017066 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8017024:	4b83      	ldr	r3, [pc, #524]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801702c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017030:	d106      	bne.n	8017040 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8017032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017034:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017038:	d102      	bne.n	8017040 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 801703a:	4b80      	ldr	r3, [pc, #512]	@ (801723c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 801703c:	637b      	str	r3, [r7, #52]	@ 0x34
 801703e:	e012      	b.n	8017066 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8017040:	4b7c      	ldr	r3, [pc, #496]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017046:	f003 0302 	and.w	r3, r3, #2
 801704a:	2b02      	cmp	r3, #2
 801704c:	d107      	bne.n	801705e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 801704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017050:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8017054:	d103      	bne.n	801705e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8017056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801705a:	637b      	str	r3, [r7, #52]	@ 0x34
 801705c:	e003      	b.n	8017066 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 801705e:	2300      	movs	r3, #0
 8017060:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017062:	f001 bc3c 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017066:	f001 bc3a 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 801706a:	4b72      	ldr	r3, [pc, #456]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801706c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017070:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8017074:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8017076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017078:	2b00      	cmp	r3, #0
 801707a:	d104      	bne.n	8017086 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801707c:	f7fc fcda 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8017080:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8017082:	f001 bc2c 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8017086:	4b6b      	ldr	r3, [pc, #428]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801708e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017092:	d10b      	bne.n	80170ac <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8017094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017096:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801709a:	d107      	bne.n	80170ac <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801709c:	f107 0314 	add.w	r3, r7, #20
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7fe fdfd 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80170a6:	69bb      	ldr	r3, [r7, #24]
 80170a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80170aa:	e047      	b.n	801713c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80170ac:	4b61      	ldr	r3, [pc, #388]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80170b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80170b8:	d10b      	bne.n	80170d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80170ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80170c0:	d107      	bne.n	80170d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80170c2:	f107 0308 	add.w	r3, r7, #8
 80170c6:	4618      	mov	r0, r3
 80170c8:	f7fe ff54 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80170d0:	e034      	b.n	801713c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80170d2:	4b58      	ldr	r3, [pc, #352]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	f003 0302 	and.w	r3, r3, #2
 80170da:	2b02      	cmp	r3, #2
 80170dc:	d10d      	bne.n	80170fa <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80170de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80170e4:	d109      	bne.n	80170fa <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80170e6:	4b53      	ldr	r3, [pc, #332]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	08db      	lsrs	r3, r3, #3
 80170ec:	f003 0303 	and.w	r3, r3, #3
 80170f0:	4a51      	ldr	r2, [pc, #324]	@ (8017238 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80170f2:	fa22 f303 	lsr.w	r3, r2, r3
 80170f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80170f8:	e020      	b.n	801713c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80170fa:	4b4e      	ldr	r3, [pc, #312]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017106:	d106      	bne.n	8017116 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8017108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801710a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801710e:	d102      	bne.n	8017116 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8017110:	4b4a      	ldr	r3, [pc, #296]	@ (801723c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8017112:	637b      	str	r3, [r7, #52]	@ 0x34
 8017114:	e012      	b.n	801713c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8017116:	4b47      	ldr	r3, [pc, #284]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801711c:	f003 0302 	and.w	r3, r3, #2
 8017120:	2b02      	cmp	r3, #2
 8017122:	d107      	bne.n	8017134 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8017124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017126:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 801712a:	d103      	bne.n	8017134 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 801712c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017130:	637b      	str	r3, [r7, #52]	@ 0x34
 8017132:	e003      	b.n	801713c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8017134:	2300      	movs	r3, #0
 8017136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017138:	f001 bbd1 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801713c:	f001 bbcf 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8017140:	4b3c      	ldr	r3, [pc, #240]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017142:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017146:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801714a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 801714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801714e:	2b00      	cmp	r3, #0
 8017150:	d104      	bne.n	801715c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8017152:	f7fc fc6f 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8017156:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8017158:	f001 bbc1 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 801715c:	4b35      	ldr	r3, [pc, #212]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017168:	d10b      	bne.n	8017182 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 801716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801716c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017170:	d107      	bne.n	8017182 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017172:	f107 0314 	add.w	r3, r7, #20
 8017176:	4618      	mov	r0, r3
 8017178:	f7fe fd92 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801717c:	69bb      	ldr	r3, [r7, #24]
 801717e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017180:	e047      	b.n	8017212 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8017182:	4b2c      	ldr	r3, [pc, #176]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801718a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801718e:	d10b      	bne.n	80171a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8017190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017192:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017196:	d107      	bne.n	80171a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017198:	f107 0308 	add.w	r3, r7, #8
 801719c:	4618      	mov	r0, r3
 801719e:	f7fe fee9 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80171a6:	e034      	b.n	8017212 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80171a8:	4b22      	ldr	r3, [pc, #136]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	f003 0302 	and.w	r3, r3, #2
 80171b0:	2b02      	cmp	r3, #2
 80171b2:	d10d      	bne.n	80171d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80171b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80171ba:	d109      	bne.n	80171d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80171bc:	4b1d      	ldr	r3, [pc, #116]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	08db      	lsrs	r3, r3, #3
 80171c2:	f003 0303 	and.w	r3, r3, #3
 80171c6:	4a1c      	ldr	r2, [pc, #112]	@ (8017238 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80171c8:	fa22 f303 	lsr.w	r3, r2, r3
 80171cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80171ce:	e020      	b.n	8017212 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80171d0:	4b18      	ldr	r3, [pc, #96]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80171d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80171dc:	d106      	bne.n	80171ec <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80171de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80171e4:	d102      	bne.n	80171ec <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80171e6:	4b15      	ldr	r3, [pc, #84]	@ (801723c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80171e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80171ea:	e012      	b.n	8017212 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80171ec:	4b11      	ldr	r3, [pc, #68]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80171ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80171f2:	f003 0302 	and.w	r3, r3, #2
 80171f6:	2b02      	cmp	r3, #2
 80171f8:	d107      	bne.n	801720a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80171fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8017200:	d103      	bne.n	801720a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8017202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017206:	637b      	str	r3, [r7, #52]	@ 0x34
 8017208:	e003      	b.n	8017212 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 801720a:	2300      	movs	r3, #0
 801720c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801720e:	f001 bb66 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017212:	f001 bb64 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8017216:	4b07      	ldr	r3, [pc, #28]	@ (8017234 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801721c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8017220:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8017222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017224:	2b00      	cmp	r3, #0
 8017226:	d10b      	bne.n	8017240 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8017228:	f7fc fc04 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 801722c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 801722e:	f001 bb56 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017232:	bf00      	nop
 8017234:	44020c00 	.word	0x44020c00
 8017238:	03d09000 	.word	0x03d09000
 801723c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8017240:	4ba1      	ldr	r3, [pc, #644]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017248:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801724c:	d10b      	bne.n	8017266 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 801724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017254:	d107      	bne.n	8017266 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017256:	f107 0314 	add.w	r3, r7, #20
 801725a:	4618      	mov	r0, r3
 801725c:	f7fe fd20 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8017260:	69bb      	ldr	r3, [r7, #24]
 8017262:	637b      	str	r3, [r7, #52]	@ 0x34
 8017264:	e047      	b.n	80172f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8017266:	4b98      	ldr	r3, [pc, #608]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801726e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017272:	d10b      	bne.n	801728c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8017274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801727a:	d107      	bne.n	801728c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801727c:	f107 0308 	add.w	r3, r7, #8
 8017280:	4618      	mov	r0, r3
 8017282:	f7fe fe77 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	637b      	str	r3, [r7, #52]	@ 0x34
 801728a:	e034      	b.n	80172f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 801728c:	4b8e      	ldr	r3, [pc, #568]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	f003 0302 	and.w	r3, r3, #2
 8017294:	2b02      	cmp	r3, #2
 8017296:	d10d      	bne.n	80172b4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8017298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801729a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 801729e:	d109      	bne.n	80172b4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80172a0:	4b89      	ldr	r3, [pc, #548]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	08db      	lsrs	r3, r3, #3
 80172a6:	f003 0303 	and.w	r3, r3, #3
 80172aa:	4a88      	ldr	r2, [pc, #544]	@ (80174cc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80172ac:	fa22 f303 	lsr.w	r3, r2, r3
 80172b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80172b2:	e020      	b.n	80172f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80172b4:	4b84      	ldr	r3, [pc, #528]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80172bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80172c0:	d106      	bne.n	80172d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80172c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80172c8:	d102      	bne.n	80172d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80172ca:	4b81      	ldr	r3, [pc, #516]	@ (80174d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80172cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80172ce:	e012      	b.n	80172f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80172d0:	4b7d      	ldr	r3, [pc, #500]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80172d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80172d6:	f003 0302 	and.w	r3, r3, #2
 80172da:	2b02      	cmp	r3, #2
 80172dc:	d107      	bne.n	80172ee <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80172de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172e0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80172e4:	d103      	bne.n	80172ee <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80172e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80172ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80172ec:	e003      	b.n	80172f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80172ee:	2300      	movs	r3, #0
 80172f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80172f2:	f001 baf4 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80172f6:	f001 baf2 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80172fa:	4b73      	ldr	r3, [pc, #460]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80172fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017300:	f003 0307 	and.w	r3, r3, #7
 8017304:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8017306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017308:	2b00      	cmp	r3, #0
 801730a:	d104      	bne.n	8017316 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801730c:	f7fc fb92 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8017310:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8017312:	f001 bae4 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8017316:	4b6c      	ldr	r3, [pc, #432]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801731e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017322:	d10a      	bne.n	801733a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8017324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017326:	2b01      	cmp	r3, #1
 8017328:	d107      	bne.n	801733a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801732a:	f107 0314 	add.w	r3, r7, #20
 801732e:	4618      	mov	r0, r3
 8017330:	f7fe fcb6 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8017334:	69bb      	ldr	r3, [r7, #24]
 8017336:	637b      	str	r3, [r7, #52]	@ 0x34
 8017338:	e043      	b.n	80173c2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 801733a:	4b63      	ldr	r3, [pc, #396]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017342:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017346:	d10a      	bne.n	801735e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8017348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801734a:	2b02      	cmp	r3, #2
 801734c:	d107      	bne.n	801735e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801734e:	f107 0308 	add.w	r3, r7, #8
 8017352:	4618      	mov	r0, r3
 8017354:	f7fe fe0e 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	637b      	str	r3, [r7, #52]	@ 0x34
 801735c:	e031      	b.n	80173c2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 801735e:	4b5a      	ldr	r3, [pc, #360]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	f003 0302 	and.w	r3, r3, #2
 8017366:	2b02      	cmp	r3, #2
 8017368:	d10c      	bne.n	8017384 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 801736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801736c:	2b03      	cmp	r3, #3
 801736e:	d109      	bne.n	8017384 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017370:	4b55      	ldr	r3, [pc, #340]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	08db      	lsrs	r3, r3, #3
 8017376:	f003 0303 	and.w	r3, r3, #3
 801737a:	4a54      	ldr	r2, [pc, #336]	@ (80174cc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 801737c:	fa22 f303 	lsr.w	r3, r2, r3
 8017380:	637b      	str	r3, [r7, #52]	@ 0x34
 8017382:	e01e      	b.n	80173c2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8017384:	4b50      	ldr	r3, [pc, #320]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801738c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017390:	d105      	bne.n	801739e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8017392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017394:	2b04      	cmp	r3, #4
 8017396:	d102      	bne.n	801739e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8017398:	4b4d      	ldr	r3, [pc, #308]	@ (80174d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 801739a:	637b      	str	r3, [r7, #52]	@ 0x34
 801739c:	e011      	b.n	80173c2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 801739e:	4b4a      	ldr	r3, [pc, #296]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80173a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80173a4:	f003 0302 	and.w	r3, r3, #2
 80173a8:	2b02      	cmp	r3, #2
 80173aa:	d106      	bne.n	80173ba <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80173ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ae:	2b05      	cmp	r3, #5
 80173b0:	d103      	bne.n	80173ba <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80173b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80173b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80173b8:	e003      	b.n	80173c2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80173ba:	2300      	movs	r3, #0
 80173bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80173be:	f001 ba8e 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80173c2:	f001 ba8c 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80173c6:	4b40      	ldr	r3, [pc, #256]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80173c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80173cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80173d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80173d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d104      	bne.n	80173e2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80173d8:	f7fc fb2c 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 80173dc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80173de:	f001 ba7e 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80173e2:	4b39      	ldr	r3, [pc, #228]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80173ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80173ee:	d10a      	bne.n	8017406 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80173f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173f2:	2b10      	cmp	r3, #16
 80173f4:	d107      	bne.n	8017406 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80173f6:	f107 0314 	add.w	r3, r7, #20
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7fe fc50 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8017400:	69bb      	ldr	r3, [r7, #24]
 8017402:	637b      	str	r3, [r7, #52]	@ 0x34
 8017404:	e043      	b.n	801748e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8017406:	4b30      	ldr	r3, [pc, #192]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801740e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017412:	d10a      	bne.n	801742a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8017414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017416:	2b20      	cmp	r3, #32
 8017418:	d107      	bne.n	801742a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801741a:	f107 0308 	add.w	r3, r7, #8
 801741e:	4618      	mov	r0, r3
 8017420:	f7fe fda8 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	637b      	str	r3, [r7, #52]	@ 0x34
 8017428:	e031      	b.n	801748e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 801742a:	4b27      	ldr	r3, [pc, #156]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	f003 0302 	and.w	r3, r3, #2
 8017432:	2b02      	cmp	r3, #2
 8017434:	d10c      	bne.n	8017450 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8017436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017438:	2b30      	cmp	r3, #48	@ 0x30
 801743a:	d109      	bne.n	8017450 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801743c:	4b22      	ldr	r3, [pc, #136]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	08db      	lsrs	r3, r3, #3
 8017442:	f003 0303 	and.w	r3, r3, #3
 8017446:	4a21      	ldr	r2, [pc, #132]	@ (80174cc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8017448:	fa22 f303 	lsr.w	r3, r2, r3
 801744c:	637b      	str	r3, [r7, #52]	@ 0x34
 801744e:	e01e      	b.n	801748e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8017450:	4b1d      	ldr	r3, [pc, #116]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801745c:	d105      	bne.n	801746a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 801745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017460:	2b40      	cmp	r3, #64	@ 0x40
 8017462:	d102      	bne.n	801746a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8017464:	4b1a      	ldr	r3, [pc, #104]	@ (80174d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8017466:	637b      	str	r3, [r7, #52]	@ 0x34
 8017468:	e011      	b.n	801748e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 801746a:	4b17      	ldr	r3, [pc, #92]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801746c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017470:	f003 0302 	and.w	r3, r3, #2
 8017474:	2b02      	cmp	r3, #2
 8017476:	d106      	bne.n	8017486 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8017478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801747a:	2b50      	cmp	r3, #80	@ 0x50
 801747c:	d103      	bne.n	8017486 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 801747e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017482:	637b      	str	r3, [r7, #52]	@ 0x34
 8017484:	e003      	b.n	801748e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8017486:	2300      	movs	r3, #0
 8017488:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801748a:	f001 ba28 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801748e:	f001 ba26 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8017492:	4b0d      	ldr	r3, [pc, #52]	@ (80174c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8017494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017498:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801749c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 801749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d104      	bne.n	80174ae <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80174a4:	f7fc faf2 	bl	8013a8c <HAL_RCC_GetPCLK3Freq>
 80174a8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80174aa:	f001 ba18 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80174ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80174b4:	d10e      	bne.n	80174d4 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80174b6:	f107 0314 	add.w	r3, r7, #20
 80174ba:	4618      	mov	r0, r3
 80174bc:	f7fe fbf0 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80174c0:	69bb      	ldr	r3, [r7, #24]
 80174c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80174c4:	f001 ba0b 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80174c8:	44020c00 	.word	0x44020c00
 80174cc:	03d09000 	.word	0x03d09000
 80174d0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80174d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80174da:	d108      	bne.n	80174ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80174dc:	f107 0308 	add.w	r3, r7, #8
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7fe fd47 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80174ea:	f001 b9f8 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80174ee:	4ba4      	ldr	r3, [pc, #656]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f003 0302 	and.w	r3, r3, #2
 80174f6:	2b02      	cmp	r3, #2
 80174f8:	d10d      	bne.n	8017516 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80174fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017500:	d109      	bne.n	8017516 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017502:	4b9f      	ldr	r3, [pc, #636]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	08db      	lsrs	r3, r3, #3
 8017508:	f003 0303 	and.w	r3, r3, #3
 801750c:	4a9d      	ldr	r2, [pc, #628]	@ (8017784 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 801750e:	fa22 f303 	lsr.w	r3, r2, r3
 8017512:	637b      	str	r3, [r7, #52]	@ 0x34
 8017514:	e020      	b.n	8017558 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8017516:	4b9a      	ldr	r3, [pc, #616]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801751e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017522:	d106      	bne.n	8017532 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8017524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017526:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801752a:	d102      	bne.n	8017532 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 801752c:	4b96      	ldr	r3, [pc, #600]	@ (8017788 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 801752e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017530:	e012      	b.n	8017558 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8017532:	4b93      	ldr	r3, [pc, #588]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017538:	f003 0302 	and.w	r3, r3, #2
 801753c:	2b02      	cmp	r3, #2
 801753e:	d107      	bne.n	8017550 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8017540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017542:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8017546:	d103      	bne.n	8017550 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8017548:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801754c:	637b      	str	r3, [r7, #52]	@ 0x34
 801754e:	e003      	b.n	8017558 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8017550:	2300      	movs	r3, #0
 8017552:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017554:	f001 b9c3 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017558:	f001 b9c1 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 801755c:	4b88      	ldr	r3, [pc, #544]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801755e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017562:	f003 0307 	and.w	r3, r3, #7
 8017566:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8017568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801756a:	2b00      	cmp	r3, #0
 801756c:	d104      	bne.n	8017578 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 801756e:	f7fc fa45 	bl	80139fc <HAL_RCC_GetHCLKFreq>
 8017572:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8017574:	f001 b9b3 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8017578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801757a:	2b01      	cmp	r3, #1
 801757c:	d104      	bne.n	8017588 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 801757e:	f7fc f911 	bl	80137a4 <HAL_RCC_GetSysClockFreq>
 8017582:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8017584:	f001 b9ab 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8017588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801758a:	2b02      	cmp	r3, #2
 801758c:	d108      	bne.n	80175a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801758e:	f107 0314 	add.w	r3, r7, #20
 8017592:	4618      	mov	r0, r3
 8017594:	f7fe fb84 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8017598:	69fb      	ldr	r3, [r7, #28]
 801759a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801759c:	f001 b99f 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80175a0:	4b77      	ldr	r3, [pc, #476]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80175a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80175ac:	d105      	bne.n	80175ba <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80175ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175b0:	2b03      	cmp	r3, #3
 80175b2:	d102      	bne.n	80175ba <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80175b4:	4b75      	ldr	r3, [pc, #468]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80175b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80175b8:	e023      	b.n	8017602 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80175ba:	4b71      	ldr	r3, [pc, #452]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	f003 0302 	and.w	r3, r3, #2
 80175c2:	2b02      	cmp	r3, #2
 80175c4:	d10c      	bne.n	80175e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80175c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175c8:	2b04      	cmp	r3, #4
 80175ca:	d109      	bne.n	80175e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80175cc:	4b6c      	ldr	r3, [pc, #432]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	08db      	lsrs	r3, r3, #3
 80175d2:	f003 0303 	and.w	r3, r3, #3
 80175d6:	4a6b      	ldr	r2, [pc, #428]	@ (8017784 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80175d8:	fa22 f303 	lsr.w	r3, r2, r3
 80175dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80175de:	e010      	b.n	8017602 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80175e0:	4b67      	ldr	r3, [pc, #412]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80175e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80175ec:	d105      	bne.n	80175fa <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80175ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175f0:	2b05      	cmp	r3, #5
 80175f2:	d102      	bne.n	80175fa <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80175f4:	4b64      	ldr	r3, [pc, #400]	@ (8017788 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80175f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80175f8:	e003      	b.n	8017602 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80175fa:	2300      	movs	r3, #0
 80175fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80175fe:	f001 b96e 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017602:	f001 b96c 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8017606:	4b5e      	ldr	r3, [pc, #376]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801760c:	f003 0308 	and.w	r3, r3, #8
 8017610:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8017612:	4b5b      	ldr	r3, [pc, #364]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017618:	f003 0302 	and.w	r3, r3, #2
 801761c:	2b02      	cmp	r3, #2
 801761e:	d106      	bne.n	801762e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8017620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017622:	2b00      	cmp	r3, #0
 8017624:	d103      	bne.n	801762e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8017626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801762a:	637b      	str	r3, [r7, #52]	@ 0x34
 801762c:	e012      	b.n	8017654 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 801762e:	4b54      	ldr	r3, [pc, #336]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801763c:	d106      	bne.n	801764c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 801763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017640:	2b08      	cmp	r3, #8
 8017642:	d103      	bne.n	801764c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8017644:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017648:	637b      	str	r3, [r7, #52]	@ 0x34
 801764a:	e003      	b.n	8017654 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 801764c:	2300      	movs	r3, #0
 801764e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8017650:	f001 b945 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017654:	f001 b943 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8017658:	4b49      	ldr	r3, [pc, #292]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801765a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801765e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8017662:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8017664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017666:	2b00      	cmp	r3, #0
 8017668:	d104      	bne.n	8017674 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801766a:	f7fc f9e3 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 801766e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8017670:	f001 b935 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8017674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801767a:	d108      	bne.n	801768e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801767c:	f107 0308 	add.w	r3, r7, #8
 8017680:	4618      	mov	r0, r3
 8017682:	f7fe fc77 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801768a:	f001 b928 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 801768e:	4b3c      	ldr	r3, [pc, #240]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	f003 0302 	and.w	r3, r3, #2
 8017696:	2b02      	cmp	r3, #2
 8017698:	d10d      	bne.n	80176b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 801769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801769c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80176a0:	d109      	bne.n	80176b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80176a2:	4b37      	ldr	r3, [pc, #220]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	08db      	lsrs	r3, r3, #3
 80176a8:	f003 0303 	and.w	r3, r3, #3
 80176ac:	4a35      	ldr	r2, [pc, #212]	@ (8017784 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80176ae:	fa22 f303 	lsr.w	r3, r2, r3
 80176b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80176b4:	e011      	b.n	80176da <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80176b6:	4b32      	ldr	r3, [pc, #200]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80176be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80176c2:	d106      	bne.n	80176d2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80176c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80176ca:	d102      	bne.n	80176d2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80176cc:	4b2e      	ldr	r3, [pc, #184]	@ (8017788 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80176ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80176d0:	e003      	b.n	80176da <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80176d2:	2300      	movs	r3, #0
 80176d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80176d6:	f001 b902 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80176da:	f001 b900 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80176de:	4b28      	ldr	r3, [pc, #160]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80176e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80176e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80176e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80176ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d104      	bne.n	80176fa <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80176f0:	f7fc f9a0 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 80176f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80176f6:	f001 b8f2 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80176fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017700:	d108      	bne.n	8017714 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017702:	f107 0308 	add.w	r3, r7, #8
 8017706:	4618      	mov	r0, r3
 8017708:	f7fe fc34 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801770c:	693b      	ldr	r3, [r7, #16]
 801770e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017710:	f001 b8e5 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8017714:	4b1a      	ldr	r3, [pc, #104]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	f003 0302 	and.w	r3, r3, #2
 801771c:	2b02      	cmp	r3, #2
 801771e:	d10d      	bne.n	801773c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8017720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017722:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8017726:	d109      	bne.n	801773c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017728:	4b15      	ldr	r3, [pc, #84]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	08db      	lsrs	r3, r3, #3
 801772e:	f003 0303 	and.w	r3, r3, #3
 8017732:	4a14      	ldr	r2, [pc, #80]	@ (8017784 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8017734:	fa22 f303 	lsr.w	r3, r2, r3
 8017738:	637b      	str	r3, [r7, #52]	@ 0x34
 801773a:	e011      	b.n	8017760 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 801773c:	4b10      	ldr	r3, [pc, #64]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017748:	d106      	bne.n	8017758 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 801774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801774c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8017750:	d102      	bne.n	8017758 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8017752:	4b0d      	ldr	r3, [pc, #52]	@ (8017788 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8017754:	637b      	str	r3, [r7, #52]	@ 0x34
 8017756:	e003      	b.n	8017760 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8017758:	2300      	movs	r3, #0
 801775a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801775c:	f001 b8bf 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017760:	f001 b8bd 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8017764:	4b06      	ldr	r3, [pc, #24]	@ (8017780 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8017766:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801776a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 801776e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8017770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017772:	2b00      	cmp	r3, #0
 8017774:	d10c      	bne.n	8017790 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8017776:	f7fc f989 	bl	8013a8c <HAL_RCC_GetPCLK3Freq>
 801777a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 801777c:	f001 b8af 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017780:	44020c00 	.word	0x44020c00
 8017784:	03d09000 	.word	0x03d09000
 8017788:	003d0900 	.word	0x003d0900
 801778c:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8017790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017796:	d108      	bne.n	80177aa <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017798:	f107 0308 	add.w	r3, r7, #8
 801779c:	4618      	mov	r0, r3
 801779e:	f7fe fbe9 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80177a2:	693b      	ldr	r3, [r7, #16]
 80177a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80177a6:	f001 b89a 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80177aa:	4b9f      	ldr	r3, [pc, #636]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	f003 0302 	and.w	r3, r3, #2
 80177b2:	2b02      	cmp	r3, #2
 80177b4:	d10d      	bne.n	80177d2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80177b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80177bc:	d109      	bne.n	80177d2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80177be:	4b9a      	ldr	r3, [pc, #616]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	08db      	lsrs	r3, r3, #3
 80177c4:	f003 0303 	and.w	r3, r3, #3
 80177c8:	4a98      	ldr	r2, [pc, #608]	@ (8017a2c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80177ca:	fa22 f303 	lsr.w	r3, r2, r3
 80177ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80177d0:	e011      	b.n	80177f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80177d2:	4b95      	ldr	r3, [pc, #596]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80177da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80177de:	d106      	bne.n	80177ee <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80177e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80177e6:	d102      	bne.n	80177ee <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80177e8:	4b91      	ldr	r3, [pc, #580]	@ (8017a30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80177ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80177ec:	e003      	b.n	80177f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80177ee:	2300      	movs	r3, #0
 80177f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80177f2:	f001 b874 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80177f6:	f001 b872 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80177fa:	4b8b      	ldr	r3, [pc, #556]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80177fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8017800:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8017804:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8017806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017808:	2b00      	cmp	r3, #0
 801780a:	d104      	bne.n	8017816 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 801780c:	f7fc f93e 	bl	8013a8c <HAL_RCC_GetPCLK3Freq>
 8017810:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8017812:	f001 b864 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8017816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801781c:	d108      	bne.n	8017830 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801781e:	f107 0308 	add.w	r3, r7, #8
 8017822:	4618      	mov	r0, r3
 8017824:	f7fe fba6 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801782c:	f001 b857 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8017830:	4b7d      	ldr	r3, [pc, #500]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	f003 0302 	and.w	r3, r3, #2
 8017838:	2b02      	cmp	r3, #2
 801783a:	d10d      	bne.n	8017858 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 801783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801783e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017842:	d109      	bne.n	8017858 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017844:	4b78      	ldr	r3, [pc, #480]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	08db      	lsrs	r3, r3, #3
 801784a:	f003 0303 	and.w	r3, r3, #3
 801784e:	4a77      	ldr	r2, [pc, #476]	@ (8017a2c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8017850:	fa22 f303 	lsr.w	r3, r2, r3
 8017854:	637b      	str	r3, [r7, #52]	@ 0x34
 8017856:	e011      	b.n	801787c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8017858:	4b73      	ldr	r3, [pc, #460]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017864:	d106      	bne.n	8017874 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8017866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017868:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801786c:	d102      	bne.n	8017874 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 801786e:	4b70      	ldr	r3, [pc, #448]	@ (8017a30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8017870:	637b      	str	r3, [r7, #52]	@ 0x34
 8017872:	e003      	b.n	801787c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8017874:	2300      	movs	r3, #0
 8017876:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017878:	f001 b831 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801787c:	f001 b82f 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8017880:	4b69      	ldr	r3, [pc, #420]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8017886:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 801788a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 801788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801788e:	2b00      	cmp	r3, #0
 8017890:	d104      	bne.n	801789c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8017892:	f7fc f8cf 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8017896:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8017898:	f001 b821 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 801789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801789e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80178a2:	d108      	bne.n	80178b6 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80178a4:	f107 0308 	add.w	r3, r7, #8
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7fe fb63 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80178ae:	693b      	ldr	r3, [r7, #16]
 80178b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80178b2:	f001 b814 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80178b6:	4b5c      	ldr	r3, [pc, #368]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	f003 0302 	and.w	r3, r3, #2
 80178be:	2b02      	cmp	r3, #2
 80178c0:	d10e      	bne.n	80178e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80178c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80178c8:	d10a      	bne.n	80178e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80178ca:	4b57      	ldr	r3, [pc, #348]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	08db      	lsrs	r3, r3, #3
 80178d0:	f003 0303 	and.w	r3, r3, #3
 80178d4:	4a55      	ldr	r2, [pc, #340]	@ (8017a2c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80178d6:	fa22 f303 	lsr.w	r3, r2, r3
 80178da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80178dc:	f000 bfff 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80178e0:	2300      	movs	r3, #0
 80178e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80178e4:	f000 bffb 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80178e8:	4b4f      	ldr	r3, [pc, #316]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80178ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80178ee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80178f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80178f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178f6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80178fa:	d056      	beq.n	80179aa <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80178fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178fe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8017902:	f200 808b 	bhi.w	8017a1c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8017906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801790c:	d03e      	beq.n	801798c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 801790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017914:	f200 8082 	bhi.w	8017a1c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8017918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801791a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801791e:	d027      	beq.n	8017970 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8017920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017926:	d879      	bhi.n	8017a1c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8017928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801792a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801792e:	d017      	beq.n	8017960 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8017930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017936:	d871      	bhi.n	8017a1c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8017938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801793a:	2b00      	cmp	r3, #0
 801793c:	d004      	beq.n	8017948 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 801793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017944:	d004      	beq.n	8017950 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8017946:	e069      	b.n	8017a1c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8017948:	f7fc f8a0 	bl	8013a8c <HAL_RCC_GetPCLK3Freq>
 801794c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 801794e:	e068      	b.n	8017a22 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017950:	f107 0314 	add.w	r3, r7, #20
 8017954:	4618      	mov	r0, r3
 8017956:	f7fe f9a3 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801795a:	697b      	ldr	r3, [r7, #20]
 801795c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801795e:	e060      	b.n	8017a22 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017960:	f107 0308 	add.w	r3, r7, #8
 8017964:	4618      	mov	r0, r3
 8017966:	f7fe fb05 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 801796a:	693b      	ldr	r3, [r7, #16]
 801796c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801796e:	e058      	b.n	8017a22 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017970:	4b2d      	ldr	r3, [pc, #180]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8017972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017976:	f003 0302 	and.w	r3, r3, #2
 801797a:	2b02      	cmp	r3, #2
 801797c:	d103      	bne.n	8017986 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 801797e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017982:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017984:	e04d      	b.n	8017a22 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8017986:	2300      	movs	r3, #0
 8017988:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801798a:	e04a      	b.n	8017a22 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 801798c:	4b26      	ldr	r3, [pc, #152]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801798e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017992:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801799a:	d103      	bne.n	80179a4 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 801799c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80179a0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80179a2:	e03e      	b.n	8017a22 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80179a4:	2300      	movs	r3, #0
 80179a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80179a8:	e03b      	b.n	8017a22 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80179aa:	4b1f      	ldr	r3, [pc, #124]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80179ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80179b0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80179b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80179b6:	4b1c      	ldr	r3, [pc, #112]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	f003 0302 	and.w	r3, r3, #2
 80179be:	2b02      	cmp	r3, #2
 80179c0:	d10c      	bne.n	80179dc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80179c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d109      	bne.n	80179dc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80179c8:	4b17      	ldr	r3, [pc, #92]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	08db      	lsrs	r3, r3, #3
 80179ce:	f003 0303 	and.w	r3, r3, #3
 80179d2:	4a16      	ldr	r2, [pc, #88]	@ (8017a2c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80179d4:	fa22 f303 	lsr.w	r3, r2, r3
 80179d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80179da:	e01e      	b.n	8017a1a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80179dc:	4b12      	ldr	r3, [pc, #72]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80179e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80179e8:	d106      	bne.n	80179f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80179ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80179f0:	d102      	bne.n	80179f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80179f2:	4b0f      	ldr	r3, [pc, #60]	@ (8017a30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80179f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80179f6:	e010      	b.n	8017a1a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80179f8:	4b0b      	ldr	r3, [pc, #44]	@ (8017a28 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017a00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017a04:	d106      	bne.n	8017a14 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8017a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017a0c:	d102      	bne.n	8017a14 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8017a0e:	4b09      	ldr	r3, [pc, #36]	@ (8017a34 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8017a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a12:	e002      	b.n	8017a1a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8017a14:	2300      	movs	r3, #0
 8017a16:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8017a18:	e003      	b.n	8017a22 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8017a1a:	e002      	b.n	8017a22 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017a20:	bf00      	nop
          }
        }
        break;
 8017a22:	f000 bf5c 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017a26:	bf00      	nop
 8017a28:	44020c00 	.word	0x44020c00
 8017a2c:	03d09000 	.word	0x03d09000
 8017a30:	003d0900 	.word	0x003d0900
 8017a34:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8017a38:	4b9e      	ldr	r3, [pc, #632]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017a3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017a3e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8017a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8017a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a46:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8017a4a:	d056      	beq.n	8017afa <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8017a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8017a52:	f200 808b 	bhi.w	8017b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8017a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017a5c:	d03e      	beq.n	8017adc <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8017a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017a64:	f200 8082 	bhi.w	8017b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8017a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8017a6e:	d027      	beq.n	8017ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8017a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8017a76:	d879      	bhi.n	8017b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8017a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017a7e:	d017      	beq.n	8017ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8017a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017a86:	d871      	bhi.n	8017b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8017a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d004      	beq.n	8017a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8017a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017a94:	d004      	beq.n	8017aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8017a96:	e069      	b.n	8017b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8017a98:	f7fb ffcc 	bl	8013a34 <HAL_RCC_GetPCLK1Freq>
 8017a9c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017a9e:	e068      	b.n	8017b72 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017aa0:	f107 0314 	add.w	r3, r7, #20
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f7fe f8fb 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017aaa:	697b      	ldr	r3, [r7, #20]
 8017aac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017aae:	e060      	b.n	8017b72 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017ab0:	f107 0308 	add.w	r3, r7, #8
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	f7fe fa5d 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017aba:	693b      	ldr	r3, [r7, #16]
 8017abc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017abe:	e058      	b.n	8017b72 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017ac0:	4b7c      	ldr	r3, [pc, #496]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017ac6:	f003 0302 	and.w	r3, r3, #2
 8017aca:	2b02      	cmp	r3, #2
 8017acc:	d103      	bne.n	8017ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8017ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017ad2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017ad4:	e04d      	b.n	8017b72 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017ada:	e04a      	b.n	8017b72 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017adc:	4b75      	ldr	r3, [pc, #468]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017ae2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017aea:	d103      	bne.n	8017af4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8017aec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017af0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017af2:	e03e      	b.n	8017b72 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8017af4:	2300      	movs	r3, #0
 8017af6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017af8:	e03b      	b.n	8017b72 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017afa:	4b6e      	ldr	r3, [pc, #440]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017b00:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017b04:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017b06:	4b6b      	ldr	r3, [pc, #428]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	f003 0302 	and.w	r3, r3, #2
 8017b0e:	2b02      	cmp	r3, #2
 8017b10:	d10c      	bne.n	8017b2c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8017b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d109      	bne.n	8017b2c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017b18:	4b66      	ldr	r3, [pc, #408]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	08db      	lsrs	r3, r3, #3
 8017b1e:	f003 0303 	and.w	r3, r3, #3
 8017b22:	4a65      	ldr	r2, [pc, #404]	@ (8017cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8017b24:	fa22 f303 	lsr.w	r3, r2, r3
 8017b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b2a:	e01e      	b.n	8017b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017b2c:	4b61      	ldr	r3, [pc, #388]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017b38:	d106      	bne.n	8017b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8017b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017b40:	d102      	bne.n	8017b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017b42:	4b5e      	ldr	r3, [pc, #376]	@ (8017cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8017b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b46:	e010      	b.n	8017b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017b48:	4b5a      	ldr	r3, [pc, #360]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017b54:	d106      	bne.n	8017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8017b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017b5c:	d102      	bne.n	8017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8017b5e:	4b58      	ldr	r3, [pc, #352]	@ (8017cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8017b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b62:	e002      	b.n	8017b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8017b64:	2300      	movs	r3, #0
 8017b66:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8017b68:	e003      	b.n	8017b72 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8017b6a:	e002      	b.n	8017b72 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017b70:	bf00      	nop
          }
        }
        break;
 8017b72:	f000 beb4 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8017b76:	4b4f      	ldr	r3, [pc, #316]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017b78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017b7c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8017b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8017b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017b88:	d056      	beq.n	8017c38 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8017b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017b90:	f200 808b 	bhi.w	8017caa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8017b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017b9a:	d03e      	beq.n	8017c1a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8017b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017ba2:	f200 8082 	bhi.w	8017caa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8017ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8017bac:	d027      	beq.n	8017bfe <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8017bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8017bb4:	d879      	bhi.n	8017caa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8017bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017bbc:	d017      	beq.n	8017bee <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8017bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017bc4:	d871      	bhi.n	8017caa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8017bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d004      	beq.n	8017bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8017bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017bd2:	d004      	beq.n	8017bde <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8017bd4:	e069      	b.n	8017caa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8017bd6:	f7fb ff59 	bl	8013a8c <HAL_RCC_GetPCLK3Freq>
 8017bda:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017bdc:	e068      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017bde:	f107 0314 	add.w	r3, r7, #20
 8017be2:	4618      	mov	r0, r3
 8017be4:	f7fe f85c 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017be8:	697b      	ldr	r3, [r7, #20]
 8017bea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017bec:	e060      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017bee:	f107 0308 	add.w	r3, r7, #8
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f7fe f9be 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017bfc:	e058      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017c04:	f003 0302 	and.w	r3, r3, #2
 8017c08:	2b02      	cmp	r3, #2
 8017c0a:	d103      	bne.n	8017c14 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8017c0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017c10:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017c12:	e04d      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8017c14:	2300      	movs	r3, #0
 8017c16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017c18:	e04a      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017c1a:	4b26      	ldr	r3, [pc, #152]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017c24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017c28:	d103      	bne.n	8017c32 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8017c2a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017c2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017c30:	e03e      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8017c32:	2300      	movs	r3, #0
 8017c34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017c36:	e03b      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017c38:	4b1e      	ldr	r3, [pc, #120]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017c3e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017c42:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017c44:	4b1b      	ldr	r3, [pc, #108]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	f003 0302 	and.w	r3, r3, #2
 8017c4c:	2b02      	cmp	r3, #2
 8017c4e:	d10c      	bne.n	8017c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8017c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d109      	bne.n	8017c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017c56:	4b17      	ldr	r3, [pc, #92]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	08db      	lsrs	r3, r3, #3
 8017c5c:	f003 0303 	and.w	r3, r3, #3
 8017c60:	4a15      	ldr	r2, [pc, #84]	@ (8017cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8017c62:	fa22 f303 	lsr.w	r3, r2, r3
 8017c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8017c68:	e01e      	b.n	8017ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017c6a:	4b12      	ldr	r3, [pc, #72]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017c72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017c76:	d106      	bne.n	8017c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8017c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017c7e:	d102      	bne.n	8017c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017c80:	4b0e      	ldr	r3, [pc, #56]	@ (8017cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8017c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8017c84:	e010      	b.n	8017ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017c86:	4b0b      	ldr	r3, [pc, #44]	@ (8017cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017c92:	d106      	bne.n	8017ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8017c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017c9a:	d102      	bne.n	8017ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8017c9c:	4b08      	ldr	r3, [pc, #32]	@ (8017cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8017c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017ca0:	e002      	b.n	8017ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8017ca6:	e003      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8017ca8:	e002      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8017caa:	2300      	movs	r3, #0
 8017cac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017cae:	bf00      	nop
          }
        }
        break;
 8017cb0:	f000 be15 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017cb4:	44020c00 	.word	0x44020c00
 8017cb8:	03d09000 	.word	0x03d09000
 8017cbc:	003d0900 	.word	0x003d0900
 8017cc0:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8017cc4:	4b9e      	ldr	r3, [pc, #632]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017cc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017cca:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8017cce:	633b      	str	r3, [r7, #48]	@ 0x30
 8017cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cd2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8017cd6:	d056      	beq.n	8017d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8017cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cda:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8017cde:	f200 808b 	bhi.w	8017df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8017ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ce4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017ce8:	d03e      	beq.n	8017d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8017cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017cf0:	f200 8082 	bhi.w	8017df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8017cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017cfa:	d027      	beq.n	8017d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8017cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017d02:	d879      	bhi.n	8017df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8017d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017d0a:	d017      	beq.n	8017d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8017d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017d12:	d871      	bhi.n	8017df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8017d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d004      	beq.n	8017d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8017d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017d20:	d004      	beq.n	8017d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8017d22:	e069      	b.n	8017df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8017d24:	f7fb feb2 	bl	8013a8c <HAL_RCC_GetPCLK3Freq>
 8017d28:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017d2a:	e068      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017d2c:	f107 0314 	add.w	r3, r7, #20
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7fd ffb5 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017d36:	697b      	ldr	r3, [r7, #20]
 8017d38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017d3a:	e060      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017d3c:	f107 0308 	add.w	r3, r7, #8
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7fe f917 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017d46:	693b      	ldr	r3, [r7, #16]
 8017d48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017d4a:	e058      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017d4c:	4b7c      	ldr	r3, [pc, #496]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017d52:	f003 0302 	and.w	r3, r3, #2
 8017d56:	2b02      	cmp	r3, #2
 8017d58:	d103      	bne.n	8017d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8017d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017d5e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017d60:	e04d      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8017d62:	2300      	movs	r3, #0
 8017d64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017d66:	e04a      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017d68:	4b75      	ldr	r3, [pc, #468]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017d6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017d72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017d76:	d103      	bne.n	8017d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8017d78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017d7c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017d7e:	e03e      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8017d80:	2300      	movs	r3, #0
 8017d82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017d84:	e03b      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017d86:	4b6e      	ldr	r3, [pc, #440]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017d8c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017d90:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017d92:	4b6b      	ldr	r3, [pc, #428]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	f003 0302 	and.w	r3, r3, #2
 8017d9a:	2b02      	cmp	r3, #2
 8017d9c:	d10c      	bne.n	8017db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8017d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d109      	bne.n	8017db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017da4:	4b66      	ldr	r3, [pc, #408]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	08db      	lsrs	r3, r3, #3
 8017daa:	f003 0303 	and.w	r3, r3, #3
 8017dae:	4a65      	ldr	r2, [pc, #404]	@ (8017f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8017db0:	fa22 f303 	lsr.w	r3, r2, r3
 8017db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8017db6:	e01e      	b.n	8017df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017db8:	4b61      	ldr	r3, [pc, #388]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017dc4:	d106      	bne.n	8017dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8017dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017dcc:	d102      	bne.n	8017dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017dce:	4b5e      	ldr	r3, [pc, #376]	@ (8017f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8017dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8017dd2:	e010      	b.n	8017df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017de0:	d106      	bne.n	8017df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8017de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017de4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017de8:	d102      	bne.n	8017df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8017dea:	4b58      	ldr	r3, [pc, #352]	@ (8017f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8017dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8017dee:	e002      	b.n	8017df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8017df0:	2300      	movs	r3, #0
 8017df2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8017df4:	e003      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8017df6:	e002      	b.n	8017dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8017df8:	2300      	movs	r3, #0
 8017dfa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017dfc:	bf00      	nop
          }
        }
        break;
 8017dfe:	f000 bd6e 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8017e02:	4b4f      	ldr	r3, [pc, #316]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017e04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017e08:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8017e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8017e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e10:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8017e14:	d056      	beq.n	8017ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8017e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e18:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8017e1c:	f200 808b 	bhi.w	8017f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8017e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017e26:	d03e      	beq.n	8017ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8017e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017e2e:	f200 8082 	bhi.w	8017f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8017e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017e38:	d027      	beq.n	8017e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8017e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017e40:	d879      	bhi.n	8017f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8017e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017e48:	d017      	beq.n	8017e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8017e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017e50:	d871      	bhi.n	8017f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8017e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d004      	beq.n	8017e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8017e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017e5e:	d004      	beq.n	8017e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8017e60:	e069      	b.n	8017f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8017e62:	f7fb fe13 	bl	8013a8c <HAL_RCC_GetPCLK3Freq>
 8017e66:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017e68:	e068      	b.n	8017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017e6a:	f107 0314 	add.w	r3, r7, #20
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f7fd ff16 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017e78:	e060      	b.n	8017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017e7a:	f107 0308 	add.w	r3, r7, #8
 8017e7e:	4618      	mov	r0, r3
 8017e80:	f7fe f878 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017e84:	693b      	ldr	r3, [r7, #16]
 8017e86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017e88:	e058      	b.n	8017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017e90:	f003 0302 	and.w	r3, r3, #2
 8017e94:	2b02      	cmp	r3, #2
 8017e96:	d103      	bne.n	8017ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8017e98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017e9c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017e9e:	e04d      	b.n	8017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017ea4:	e04a      	b.n	8017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017ea6:	4b26      	ldr	r3, [pc, #152]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017eb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017eb4:	d103      	bne.n	8017ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8017eb6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017eba:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017ebc:	e03e      	b.n	8017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017ec2:	e03b      	b.n	8017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017eca:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017ece:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	f003 0302 	and.w	r3, r3, #2
 8017ed8:	2b02      	cmp	r3, #2
 8017eda:	d10c      	bne.n	8017ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8017edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d109      	bne.n	8017ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8017ee2:	4b17      	ldr	r3, [pc, #92]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	08db      	lsrs	r3, r3, #3
 8017ee8:	f003 0303 	and.w	r3, r3, #3
 8017eec:	4a15      	ldr	r2, [pc, #84]	@ (8017f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8017eee:	fa22 f303 	lsr.w	r3, r2, r3
 8017ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8017ef4:	e01e      	b.n	8017f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017ef6:	4b12      	ldr	r3, [pc, #72]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017f02:	d106      	bne.n	8017f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8017f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017f0a:	d102      	bne.n	8017f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8017f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8017f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8017f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017f10:	e010      	b.n	8017f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017f12:	4b0b      	ldr	r3, [pc, #44]	@ (8017f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017f1e:	d106      	bne.n	8017f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8017f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017f26:	d102      	bne.n	8017f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8017f28:	4b08      	ldr	r3, [pc, #32]	@ (8017f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8017f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017f2c:	e002      	b.n	8017f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8017f2e:	2300      	movs	r3, #0
 8017f30:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8017f32:	e003      	b.n	8017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8017f34:	e002      	b.n	8017f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8017f36:	2300      	movs	r3, #0
 8017f38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017f3a:	bf00      	nop
          }
        }
        break;
 8017f3c:	f000 bccf 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8017f40:	44020c00 	.word	0x44020c00
 8017f44:	03d09000 	.word	0x03d09000
 8017f48:	003d0900 	.word	0x003d0900
 8017f4c:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8017f50:	4b9e      	ldr	r3, [pc, #632]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017f52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8017f56:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8017f5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8017f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017f62:	d056      	beq.n	8018012 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8017f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017f6a:	f200 808b 	bhi.w	8018084 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8017f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017f74:	d03e      	beq.n	8017ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8017f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017f7c:	f200 8082 	bhi.w	8018084 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8017f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8017f86:	d027      	beq.n	8017fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8017f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8017f8e:	d879      	bhi.n	8018084 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8017f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017f96:	d017      	beq.n	8017fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8017f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017f9e:	d871      	bhi.n	8018084 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8017fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d004      	beq.n	8017fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8017fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017fac:	d004      	beq.n	8017fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8017fae:	e069      	b.n	8018084 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8017fb0:	f7fb fd6c 	bl	8013a8c <HAL_RCC_GetPCLK3Freq>
 8017fb4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8017fb6:	e068      	b.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017fb8:	f107 0314 	add.w	r3, r7, #20
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f7fd fe6f 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017fc6:	e060      	b.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017fc8:	f107 0308 	add.w	r3, r7, #8
 8017fcc:	4618      	mov	r0, r3
 8017fce:	f7fd ffd1 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8017fd2:	693b      	ldr	r3, [r7, #16]
 8017fd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017fd6:	e058      	b.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017fd8:	4b7c      	ldr	r3, [pc, #496]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017fde:	f003 0302 	and.w	r3, r3, #2
 8017fe2:	2b02      	cmp	r3, #2
 8017fe4:	d103      	bne.n	8017fee <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8017fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017fea:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8017fec:	e04d      	b.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8017fee:	2300      	movs	r3, #0
 8017ff0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8017ff2:	e04a      	b.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8017ff4:	4b75      	ldr	r3, [pc, #468]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8017ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017ffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018002:	d103      	bne.n	801800c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8018004:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8018008:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801800a:	e03e      	b.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 801800c:	2300      	movs	r3, #0
 801800e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018010:	e03b      	b.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8018012:	4b6e      	ldr	r3, [pc, #440]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018018:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801801c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801801e:	4b6b      	ldr	r3, [pc, #428]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	f003 0302 	and.w	r3, r3, #2
 8018026:	2b02      	cmp	r3, #2
 8018028:	d10c      	bne.n	8018044 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 801802a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801802c:	2b00      	cmp	r3, #0
 801802e:	d109      	bne.n	8018044 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8018030:	4b66      	ldr	r3, [pc, #408]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	08db      	lsrs	r3, r3, #3
 8018036:	f003 0303 	and.w	r3, r3, #3
 801803a:	4a65      	ldr	r2, [pc, #404]	@ (80181d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 801803c:	fa22 f303 	lsr.w	r3, r2, r3
 8018040:	637b      	str	r3, [r7, #52]	@ 0x34
 8018042:	e01e      	b.n	8018082 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8018044:	4b61      	ldr	r3, [pc, #388]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801804c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018050:	d106      	bne.n	8018060 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8018052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018058:	d102      	bne.n	8018060 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 801805a:	4b5e      	ldr	r3, [pc, #376]	@ (80181d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 801805c:	637b      	str	r3, [r7, #52]	@ 0x34
 801805e:	e010      	b.n	8018082 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8018060:	4b5a      	ldr	r3, [pc, #360]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801806c:	d106      	bne.n	801807c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 801806e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8018074:	d102      	bne.n	801807c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8018076:	4b58      	ldr	r3, [pc, #352]	@ (80181d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8018078:	637b      	str	r3, [r7, #52]	@ 0x34
 801807a:	e002      	b.n	8018082 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 801807c:	2300      	movs	r3, #0
 801807e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8018080:	e003      	b.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8018082:	e002      	b.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8018084:	2300      	movs	r3, #0
 8018086:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018088:	bf00      	nop
          }
        }
        break;
 801808a:	f000 bc28 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801808e:	4b4f      	ldr	r3, [pc, #316]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8018098:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 801809a:	4b4c      	ldr	r3, [pc, #304]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80180a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80180a6:	d106      	bne.n	80180b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80180a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d103      	bne.n	80180b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80180ae:	4b4a      	ldr	r3, [pc, #296]	@ (80181d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80180b0:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80180b2:	f000 bc14 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80180b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80180bc:	d108      	bne.n	80180d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80180be:	f107 0320 	add.w	r3, r7, #32
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7fd fc82 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80180c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80180cc:	f000 bc07 	b.w	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80180d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80180d6:	d107      	bne.n	80180e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80180d8:	f107 0314 	add.w	r3, r7, #20
 80180dc:	4618      	mov	r0, r3
 80180de:	f7fd fddf 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80180e2:	69bb      	ldr	r3, [r7, #24]
 80180e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80180e6:	e3fa      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80180e8:	2300      	movs	r3, #0
 80180ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80180ec:	e3f7      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80180ee:	4b37      	ldr	r3, [pc, #220]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80180f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80180f4:	f003 0307 	and.w	r3, r3, #7
 80180f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80180fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180fc:	2b04      	cmp	r3, #4
 80180fe:	d861      	bhi.n	80181c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8018100:	a201      	add	r2, pc, #4	@ (adr r2, 8018108 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8018102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018106:	bf00      	nop
 8018108:	0801811d 	.word	0x0801811d
 801810c:	0801812d 	.word	0x0801812d
 8018110:	0801813d 	.word	0x0801813d
 8018114:	0801814d 	.word	0x0801814d
 8018118:	08018153 	.word	0x08018153
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801811c:	f107 0320 	add.w	r3, r7, #32
 8018120:	4618      	mov	r0, r3
 8018122:	f7fd fc53 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8018126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018128:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801812a:	e04e      	b.n	80181ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801812c:	f107 0314 	add.w	r3, r7, #20
 8018130:	4618      	mov	r0, r3
 8018132:	f7fd fdb5 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801813a:	e046      	b.n	80181ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801813c:	f107 0308 	add.w	r3, r7, #8
 8018140:	4618      	mov	r0, r3
 8018142:	f7fd ff17 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8018146:	68bb      	ldr	r3, [r7, #8]
 8018148:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801814a:	e03e      	b.n	80181ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 801814c:	4b23      	ldr	r3, [pc, #140]	@ (80181dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 801814e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018150:	e03b      	b.n	80181ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8018152:	4b1e      	ldr	r3, [pc, #120]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018158:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801815c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801815e:	4b1b      	ldr	r3, [pc, #108]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	f003 0302 	and.w	r3, r3, #2
 8018166:	2b02      	cmp	r3, #2
 8018168:	d10c      	bne.n	8018184 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 801816a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801816c:	2b00      	cmp	r3, #0
 801816e:	d109      	bne.n	8018184 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8018170:	4b16      	ldr	r3, [pc, #88]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	08db      	lsrs	r3, r3, #3
 8018176:	f003 0303 	and.w	r3, r3, #3
 801817a:	4a15      	ldr	r2, [pc, #84]	@ (80181d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 801817c:	fa22 f303 	lsr.w	r3, r2, r3
 8018180:	637b      	str	r3, [r7, #52]	@ 0x34
 8018182:	e01e      	b.n	80181c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8018184:	4b11      	ldr	r3, [pc, #68]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801818c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018190:	d106      	bne.n	80181a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8018192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018198:	d102      	bne.n	80181a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 801819a:	4b0e      	ldr	r3, [pc, #56]	@ (80181d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 801819c:	637b      	str	r3, [r7, #52]	@ 0x34
 801819e:	e010      	b.n	80181c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80181a0:	4b0a      	ldr	r3, [pc, #40]	@ (80181cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80181a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80181ac:	d106      	bne.n	80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80181ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80181b4:	d102      	bne.n	80181bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80181b6:	4b08      	ldr	r3, [pc, #32]	@ (80181d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80181b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80181ba:	e002      	b.n	80181c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80181bc:	2300      	movs	r3, #0
 80181be:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80181c0:	e003      	b.n	80181ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80181c2:	e002      	b.n	80181ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80181c4:	2300      	movs	r3, #0
 80181c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80181c8:	bf00      	nop
          }
        }
        break;
 80181ca:	e388      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80181cc:	44020c00 	.word	0x44020c00
 80181d0:	03d09000 	.word	0x03d09000
 80181d4:	003d0900 	.word	0x003d0900
 80181d8:	017d7840 	.word	0x017d7840
 80181dc:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80181e0:	4ba9      	ldr	r3, [pc, #676]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80181e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80181e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80181ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80181ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181ee:	2b20      	cmp	r3, #32
 80181f0:	f200 809a 	bhi.w	8018328 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80181f4:	a201      	add	r2, pc, #4	@ (adr r2, 80181fc <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80181f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181fa:	bf00      	nop
 80181fc:	08018281 	.word	0x08018281
 8018200:	08018329 	.word	0x08018329
 8018204:	08018329 	.word	0x08018329
 8018208:	08018329 	.word	0x08018329
 801820c:	08018329 	.word	0x08018329
 8018210:	08018329 	.word	0x08018329
 8018214:	08018329 	.word	0x08018329
 8018218:	08018329 	.word	0x08018329
 801821c:	08018291 	.word	0x08018291
 8018220:	08018329 	.word	0x08018329
 8018224:	08018329 	.word	0x08018329
 8018228:	08018329 	.word	0x08018329
 801822c:	08018329 	.word	0x08018329
 8018230:	08018329 	.word	0x08018329
 8018234:	08018329 	.word	0x08018329
 8018238:	08018329 	.word	0x08018329
 801823c:	080182a1 	.word	0x080182a1
 8018240:	08018329 	.word	0x08018329
 8018244:	08018329 	.word	0x08018329
 8018248:	08018329 	.word	0x08018329
 801824c:	08018329 	.word	0x08018329
 8018250:	08018329 	.word	0x08018329
 8018254:	08018329 	.word	0x08018329
 8018258:	08018329 	.word	0x08018329
 801825c:	080182b1 	.word	0x080182b1
 8018260:	08018329 	.word	0x08018329
 8018264:	08018329 	.word	0x08018329
 8018268:	08018329 	.word	0x08018329
 801826c:	08018329 	.word	0x08018329
 8018270:	08018329 	.word	0x08018329
 8018274:	08018329 	.word	0x08018329
 8018278:	08018329 	.word	0x08018329
 801827c:	080182b7 	.word	0x080182b7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018280:	f107 0320 	add.w	r3, r7, #32
 8018284:	4618      	mov	r0, r3
 8018286:	f7fd fba1 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 801828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801828c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801828e:	e04e      	b.n	801832e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018290:	f107 0314 	add.w	r3, r7, #20
 8018294:	4618      	mov	r0, r3
 8018296:	f7fd fd03 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801829e:	e046      	b.n	801832e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80182a0:	f107 0308 	add.w	r3, r7, #8
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7fd fe65 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80182aa:	68bb      	ldr	r3, [r7, #8]
 80182ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80182ae:	e03e      	b.n	801832e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80182b0:	4b76      	ldr	r3, [pc, #472]	@ (801848c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80182b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80182b4:	e03b      	b.n	801832e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80182b6:	4b74      	ldr	r3, [pc, #464]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80182b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80182bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80182c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80182c2:	4b71      	ldr	r3, [pc, #452]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	f003 0302 	and.w	r3, r3, #2
 80182ca:	2b02      	cmp	r3, #2
 80182cc:	d10c      	bne.n	80182e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80182ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d109      	bne.n	80182e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80182d4:	4b6c      	ldr	r3, [pc, #432]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	08db      	lsrs	r3, r3, #3
 80182da:	f003 0303 	and.w	r3, r3, #3
 80182de:	4a6c      	ldr	r2, [pc, #432]	@ (8018490 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80182e0:	fa22 f303 	lsr.w	r3, r2, r3
 80182e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80182e6:	e01e      	b.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80182e8:	4b67      	ldr	r3, [pc, #412]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80182f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80182f4:	d106      	bne.n	8018304 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80182f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80182fc:	d102      	bne.n	8018304 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80182fe:	4b65      	ldr	r3, [pc, #404]	@ (8018494 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8018300:	637b      	str	r3, [r7, #52]	@ 0x34
 8018302:	e010      	b.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8018304:	4b60      	ldr	r3, [pc, #384]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801830c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018310:	d106      	bne.n	8018320 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8018312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018314:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8018318:	d102      	bne.n	8018320 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801831a:	4b5f      	ldr	r3, [pc, #380]	@ (8018498 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 801831c:	637b      	str	r3, [r7, #52]	@ 0x34
 801831e:	e002      	b.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8018320:	2300      	movs	r3, #0
 8018322:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8018324:	e003      	b.n	801832e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8018326:	e002      	b.n	801832e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8018328:	2300      	movs	r3, #0
 801832a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801832c:	bf00      	nop
          }
        }
        break;
 801832e:	e2d6      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8018330:	4b55      	ldr	r3, [pc, #340]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8018332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018336:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801833a:	633b      	str	r3, [r7, #48]	@ 0x30
 801833c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801833e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018342:	d031      	beq.n	80183a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8018344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801834a:	d866      	bhi.n	801841a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 801834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801834e:	2bc0      	cmp	r3, #192	@ 0xc0
 8018350:	d027      	beq.n	80183a2 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8018352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018354:	2bc0      	cmp	r3, #192	@ 0xc0
 8018356:	d860      	bhi.n	801841a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8018358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801835a:	2b80      	cmp	r3, #128	@ 0x80
 801835c:	d019      	beq.n	8018392 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 801835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018360:	2b80      	cmp	r3, #128	@ 0x80
 8018362:	d85a      	bhi.n	801841a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8018364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018366:	2b00      	cmp	r3, #0
 8018368:	d003      	beq.n	8018372 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 801836a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801836c:	2b40      	cmp	r3, #64	@ 0x40
 801836e:	d008      	beq.n	8018382 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8018370:	e053      	b.n	801841a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018372:	f107 0320 	add.w	r3, r7, #32
 8018376:	4618      	mov	r0, r3
 8018378:	f7fd fb28 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 801837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801837e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018380:	e04e      	b.n	8018420 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018382:	f107 0314 	add.w	r3, r7, #20
 8018386:	4618      	mov	r0, r3
 8018388:	f7fd fc8a 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018390:	e046      	b.n	8018420 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018392:	f107 0308 	add.w	r3, r7, #8
 8018396:	4618      	mov	r0, r3
 8018398:	f7fd fdec 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80183a0:	e03e      	b.n	8018420 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80183a2:	4b3a      	ldr	r3, [pc, #232]	@ (801848c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80183a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80183a6:	e03b      	b.n	8018420 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80183a8:	4b37      	ldr	r3, [pc, #220]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80183aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80183ae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80183b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80183b4:	4b34      	ldr	r3, [pc, #208]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	f003 0302 	and.w	r3, r3, #2
 80183bc:	2b02      	cmp	r3, #2
 80183be:	d10c      	bne.n	80183da <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80183c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d109      	bne.n	80183da <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80183c6:	4b30      	ldr	r3, [pc, #192]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	08db      	lsrs	r3, r3, #3
 80183cc:	f003 0303 	and.w	r3, r3, #3
 80183d0:	4a2f      	ldr	r2, [pc, #188]	@ (8018490 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80183d2:	fa22 f303 	lsr.w	r3, r2, r3
 80183d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80183d8:	e01e      	b.n	8018418 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80183da:	4b2b      	ldr	r3, [pc, #172]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80183e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80183e6:	d106      	bne.n	80183f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80183e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80183ee:	d102      	bne.n	80183f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80183f0:	4b28      	ldr	r3, [pc, #160]	@ (8018494 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80183f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80183f4:	e010      	b.n	8018418 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80183f6:	4b24      	ldr	r3, [pc, #144]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80183fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018402:	d106      	bne.n	8018412 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8018404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018406:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801840a:	d102      	bne.n	8018412 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801840c:	4b22      	ldr	r3, [pc, #136]	@ (8018498 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 801840e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018410:	e002      	b.n	8018418 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8018412:	2300      	movs	r3, #0
 8018414:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8018416:	e003      	b.n	8018420 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8018418:	e002      	b.n	8018420 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 801841a:	2300      	movs	r3, #0
 801841c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801841e:	bf00      	nop
          }
        }
        break;
 8018420:	e25d      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8018422:	4b19      	ldr	r3, [pc, #100]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8018424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018428:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 801842c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 801842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018430:	2b00      	cmp	r3, #0
 8018432:	d103      	bne.n	801843c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8018434:	f7fb fb14 	bl	8013a60 <HAL_RCC_GetPCLK2Freq>
 8018438:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 801843a:	e250      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 801843c:	4b12      	ldr	r3, [pc, #72]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018448:	d10b      	bne.n	8018462 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 801844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801844c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018450:	d107      	bne.n	8018462 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018452:	f107 0314 	add.w	r3, r7, #20
 8018456:	4618      	mov	r0, r3
 8018458:	f7fd fc22 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801845c:	69bb      	ldr	r3, [r7, #24]
 801845e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018460:	e04f      	b.n	8018502 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8018462:	4b09      	ldr	r3, [pc, #36]	@ (8018488 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801846a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801846e:	d115      	bne.n	801849c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8018470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018476:	d111      	bne.n	801849c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018478:	f107 0308 	add.w	r3, r7, #8
 801847c:	4618      	mov	r0, r3
 801847e:	f7fd fd79 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	637b      	str	r3, [r7, #52]	@ 0x34
 8018486:	e03c      	b.n	8018502 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8018488:	44020c00 	.word	0x44020c00
 801848c:	00bb8000 	.word	0x00bb8000
 8018490:	03d09000 	.word	0x03d09000
 8018494:	003d0900 	.word	0x003d0900
 8018498:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 801849c:	4b94      	ldr	r3, [pc, #592]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	f003 0302 	and.w	r3, r3, #2
 80184a4:	2b02      	cmp	r3, #2
 80184a6:	d10d      	bne.n	80184c4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80184a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184aa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80184ae:	d109      	bne.n	80184c4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80184b0:	4b8f      	ldr	r3, [pc, #572]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	08db      	lsrs	r3, r3, #3
 80184b6:	f003 0303 	and.w	r3, r3, #3
 80184ba:	4a8e      	ldr	r2, [pc, #568]	@ (80186f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80184bc:	fa22 f303 	lsr.w	r3, r2, r3
 80184c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80184c2:	e01e      	b.n	8018502 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80184c4:	4b8a      	ldr	r3, [pc, #552]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80184cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80184d0:	d106      	bne.n	80184e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80184d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80184d8:	d102      	bne.n	80184e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80184da:	4b87      	ldr	r3, [pc, #540]	@ (80186f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80184dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80184de:	e010      	b.n	8018502 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80184e0:	4b83      	ldr	r3, [pc, #524]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80184e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80184ec:	d106      	bne.n	80184fc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80184ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184f0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80184f4:	d102      	bne.n	80184fc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80184f6:	4b81      	ldr	r3, [pc, #516]	@ (80186fc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80184f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80184fa:	e002      	b.n	8018502 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80184fc:	2300      	movs	r3, #0
 80184fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8018500:	e1ed      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8018502:	e1ec      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8018504:	4b7a      	ldr	r3, [pc, #488]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801850a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801850e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8018510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018512:	2b00      	cmp	r3, #0
 8018514:	d103      	bne.n	801851e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8018516:	f7fb fab9 	bl	8013a8c <HAL_RCC_GetPCLK3Freq>
 801851a:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 801851c:	e1df      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 801851e:	4b74      	ldr	r3, [pc, #464]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801852a:	d10b      	bne.n	8018544 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 801852c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801852e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018532:	d107      	bne.n	8018544 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018534:	f107 0314 	add.w	r3, r7, #20
 8018538:	4618      	mov	r0, r3
 801853a:	f7fd fbb1 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801853e:	69bb      	ldr	r3, [r7, #24]
 8018540:	637b      	str	r3, [r7, #52]	@ 0x34
 8018542:	e045      	b.n	80185d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8018544:	4b6a      	ldr	r3, [pc, #424]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801854c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018550:	d10b      	bne.n	801856a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8018552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018558:	d107      	bne.n	801856a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801855a:	f107 0308 	add.w	r3, r7, #8
 801855e:	4618      	mov	r0, r3
 8018560:	f7fd fd08 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	637b      	str	r3, [r7, #52]	@ 0x34
 8018568:	e032      	b.n	80185d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 801856a:	4b61      	ldr	r3, [pc, #388]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	f003 0302 	and.w	r3, r3, #2
 8018572:	2b02      	cmp	r3, #2
 8018574:	d10d      	bne.n	8018592 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8018576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018578:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801857c:	d109      	bne.n	8018592 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801857e:	4b5c      	ldr	r3, [pc, #368]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	08db      	lsrs	r3, r3, #3
 8018584:	f003 0303 	and.w	r3, r3, #3
 8018588:	4a5a      	ldr	r2, [pc, #360]	@ (80186f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 801858a:	fa22 f303 	lsr.w	r3, r2, r3
 801858e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018590:	e01e      	b.n	80185d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8018592:	4b57      	ldr	r3, [pc, #348]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801859a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801859e:	d106      	bne.n	80185ae <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80185a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80185a6:	d102      	bne.n	80185ae <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80185a8:	4b53      	ldr	r3, [pc, #332]	@ (80186f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80185aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80185ac:	e010      	b.n	80185d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80185ae:	4b50      	ldr	r3, [pc, #320]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80185b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80185ba:	d106      	bne.n	80185ca <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80185bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80185c2:	d102      	bne.n	80185ca <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80185c4:	4b4d      	ldr	r3, [pc, #308]	@ (80186fc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80185c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80185c8:	e002      	b.n	80185d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80185ca:	2300      	movs	r3, #0
 80185cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80185ce:	e186      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80185d0:	e185      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80185d2:	4b47      	ldr	r3, [pc, #284]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80185d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80185d8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80185dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80185de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d103      	bne.n	80185ec <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80185e4:	f7fb fa3c 	bl	8013a60 <HAL_RCC_GetPCLK2Freq>
 80185e8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80185ea:	e178      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80185ec:	4b40      	ldr	r3, [pc, #256]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80185f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80185f8:	d10b      	bne.n	8018612 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80185fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018600:	d107      	bne.n	8018612 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018602:	f107 0314 	add.w	r3, r7, #20
 8018606:	4618      	mov	r0, r3
 8018608:	f7fd fb4a 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801860c:	69bb      	ldr	r3, [r7, #24]
 801860e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018610:	e045      	b.n	801869e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8018612:	4b37      	ldr	r3, [pc, #220]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801861a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801861e:	d10b      	bne.n	8018638 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8018620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018626:	d107      	bne.n	8018638 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018628:	f107 0308 	add.w	r3, r7, #8
 801862c:	4618      	mov	r0, r3
 801862e:	f7fd fca1 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	637b      	str	r3, [r7, #52]	@ 0x34
 8018636:	e032      	b.n	801869e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8018638:	4b2d      	ldr	r3, [pc, #180]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	f003 0302 	and.w	r3, r3, #2
 8018640:	2b02      	cmp	r3, #2
 8018642:	d10d      	bne.n	8018660 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8018644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018646:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 801864a:	d109      	bne.n	8018660 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801864c:	4b28      	ldr	r3, [pc, #160]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	08db      	lsrs	r3, r3, #3
 8018652:	f003 0303 	and.w	r3, r3, #3
 8018656:	4a27      	ldr	r2, [pc, #156]	@ (80186f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8018658:	fa22 f303 	lsr.w	r3, r2, r3
 801865c:	637b      	str	r3, [r7, #52]	@ 0x34
 801865e:	e01e      	b.n	801869e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8018660:	4b23      	ldr	r3, [pc, #140]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801866c:	d106      	bne.n	801867c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 801866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018674:	d102      	bne.n	801867c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8018676:	4b20      	ldr	r3, [pc, #128]	@ (80186f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8018678:	637b      	str	r3, [r7, #52]	@ 0x34
 801867a:	e010      	b.n	801869e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 801867c:	4b1c      	ldr	r3, [pc, #112]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018688:	d106      	bne.n	8018698 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 801868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801868c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8018690:	d102      	bne.n	8018698 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8018692:	4b1a      	ldr	r3, [pc, #104]	@ (80186fc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8018694:	637b      	str	r3, [r7, #52]	@ 0x34
 8018696:	e002      	b.n	801869e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8018698:	2300      	movs	r3, #0
 801869a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801869c:	e11f      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801869e:	e11e      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80186a0:	4b13      	ldr	r3, [pc, #76]	@ (80186f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80186a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80186a6:	f003 0303 	and.w	r3, r3, #3
 80186aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80186ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186ae:	2b03      	cmp	r3, #3
 80186b0:	d85f      	bhi.n	8018772 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80186b2:	a201      	add	r2, pc, #4	@ (adr r2, 80186b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80186b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b8:	080186c9 	.word	0x080186c9
 80186bc:	080186d1 	.word	0x080186d1
 80186c0:	080186e1 	.word	0x080186e1
 80186c4:	08018701 	.word	0x08018701

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80186c8:	f7fb f998 	bl	80139fc <HAL_RCC_GetHCLKFreq>
 80186cc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80186ce:	e053      	b.n	8018778 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80186d0:	f107 0320 	add.w	r3, r7, #32
 80186d4:	4618      	mov	r0, r3
 80186d6:	f7fd f979 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80186da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80186de:	e04b      	b.n	8018778 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80186e0:	f107 0314 	add.w	r3, r7, #20
 80186e4:	4618      	mov	r0, r3
 80186e6:	f7fd fadb 	bl	8015ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80186ea:	69fb      	ldr	r3, [r7, #28]
 80186ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80186ee:	e043      	b.n	8018778 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80186f0:	44020c00 	.word	0x44020c00
 80186f4:	03d09000 	.word	0x03d09000
 80186f8:	003d0900 	.word	0x003d0900
 80186fc:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8018700:	4b79      	ldr	r3, [pc, #484]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018706:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801870a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801870c:	4b76      	ldr	r3, [pc, #472]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	f003 0302 	and.w	r3, r3, #2
 8018714:	2b02      	cmp	r3, #2
 8018716:	d10c      	bne.n	8018732 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8018718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801871a:	2b00      	cmp	r3, #0
 801871c:	d109      	bne.n	8018732 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801871e:	4b72      	ldr	r3, [pc, #456]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	08db      	lsrs	r3, r3, #3
 8018724:	f003 0303 	and.w	r3, r3, #3
 8018728:	4a70      	ldr	r2, [pc, #448]	@ (80188ec <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 801872a:	fa22 f303 	lsr.w	r3, r2, r3
 801872e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018730:	e01e      	b.n	8018770 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8018732:	4b6d      	ldr	r3, [pc, #436]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801873a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801873e:	d106      	bne.n	801874e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8018740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018746:	d102      	bne.n	801874e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8018748:	4b69      	ldr	r3, [pc, #420]	@ (80188f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 801874a:	637b      	str	r3, [r7, #52]	@ 0x34
 801874c:	e010      	b.n	8018770 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801874e:	4b66      	ldr	r3, [pc, #408]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801875a:	d106      	bne.n	801876a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 801875c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801875e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8018762:	d102      	bne.n	801876a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8018764:	4b63      	ldr	r3, [pc, #396]	@ (80188f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8018766:	637b      	str	r3, [r7, #52]	@ 0x34
 8018768:	e002      	b.n	8018770 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 801876a:	2300      	movs	r3, #0
 801876c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 801876e:	e003      	b.n	8018778 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8018770:	e002      	b.n	8018778 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8018772:	2300      	movs	r3, #0
 8018774:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8018776:	bf00      	nop
          }
        }
        break;
 8018778:	e0b1      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 801877a:	4b5b      	ldr	r3, [pc, #364]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801877c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018780:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018784:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8018786:	4b58      	ldr	r3, [pc, #352]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801878c:	f003 0302 	and.w	r3, r3, #2
 8018790:	2b02      	cmp	r3, #2
 8018792:	d106      	bne.n	80187a2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8018794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018796:	2b00      	cmp	r3, #0
 8018798:	d103      	bne.n	80187a2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 801879a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801879e:	637b      	str	r3, [r7, #52]	@ 0x34
 80187a0:	e01f      	b.n	80187e2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80187a2:	4b51      	ldr	r3, [pc, #324]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80187a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80187a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80187ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80187b0:	d106      	bne.n	80187c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80187b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187b4:	2b40      	cmp	r3, #64	@ 0x40
 80187b6:	d103      	bne.n	80187c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80187b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80187bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80187be:	e010      	b.n	80187e2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80187c0:	4b49      	ldr	r3, [pc, #292]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80187c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187cc:	d106      	bne.n	80187dc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80187ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187d0:	2b80      	cmp	r3, #128	@ 0x80
 80187d2:	d103      	bne.n	80187dc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 80187d4:	f248 0312 	movw	r3, #32786	@ 0x8012
 80187d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80187da:	e002      	b.n	80187e2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80187dc:	2300      	movs	r3, #0
 80187de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80187e0:	e07d      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80187e2:	e07c      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80187e4:	4b40      	ldr	r3, [pc, #256]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80187e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80187ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80187ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80187f0:	4b3d      	ldr	r3, [pc, #244]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80187f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80187fc:	d105      	bne.n	801880a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80187fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018800:	2b00      	cmp	r3, #0
 8018802:	d102      	bne.n	801880a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8018804:	4b3c      	ldr	r3, [pc, #240]	@ (80188f8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8018806:	637b      	str	r3, [r7, #52]	@ 0x34
 8018808:	e031      	b.n	801886e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 801880a:	4b37      	ldr	r3, [pc, #220]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018812:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8018816:	d10a      	bne.n	801882e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8018818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801881a:	2b10      	cmp	r3, #16
 801881c:	d107      	bne.n	801882e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801881e:	f107 0320 	add.w	r3, r7, #32
 8018822:	4618      	mov	r0, r3
 8018824:	f7fd f8d2 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8018828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801882a:	637b      	str	r3, [r7, #52]	@ 0x34
 801882c:	e01f      	b.n	801886e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 801882e:	4b2e      	ldr	r3, [pc, #184]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8018834:	f003 0302 	and.w	r3, r3, #2
 8018838:	2b02      	cmp	r3, #2
 801883a:	d106      	bne.n	801884a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 801883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801883e:	2b20      	cmp	r3, #32
 8018840:	d103      	bne.n	801884a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8018842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018846:	637b      	str	r3, [r7, #52]	@ 0x34
 8018848:	e011      	b.n	801886e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 801884a:	4b27      	ldr	r3, [pc, #156]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801884c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8018850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018858:	d106      	bne.n	8018868 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 801885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801885c:	2b30      	cmp	r3, #48	@ 0x30
 801885e:	d103      	bne.n	8018868 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8018860:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8018864:	637b      	str	r3, [r7, #52]	@ 0x34
 8018866:	e002      	b.n	801886e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8018868:	2300      	movs	r3, #0
 801886a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 801886c:	e037      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801886e:	e036      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8018870:	4b1d      	ldr	r3, [pc, #116]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8018876:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801887a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 801887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801887e:	2b10      	cmp	r3, #16
 8018880:	d107      	bne.n	8018892 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018882:	f107 0320 	add.w	r3, r7, #32
 8018886:	4618      	mov	r0, r3
 8018888:	f7fd f8a0 	bl	80159cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801888e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8018890:	e025      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8018892:	4b15      	ldr	r3, [pc, #84]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801889a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801889e:	d10a      	bne.n	80188b6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80188a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188a2:	2b20      	cmp	r3, #32
 80188a4:	d107      	bne.n	80188b6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80188a6:	f107 0308 	add.w	r3, r7, #8
 80188aa:	4618      	mov	r0, r3
 80188ac:	f7fd fb62 	bl	8015f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80188b4:	e00f      	b.n	80188d6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80188b6:	4b0c      	ldr	r3, [pc, #48]	@ (80188e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80188be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80188c2:	d105      	bne.n	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80188c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188c6:	2b30      	cmp	r3, #48	@ 0x30
 80188c8:	d102      	bne.n	80188d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80188ca:	4b0b      	ldr	r3, [pc, #44]	@ (80188f8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80188cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80188ce:	e002      	b.n	80188d6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80188d0:	2300      	movs	r3, #0
 80188d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80188d4:	e003      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80188d6:	e002      	b.n	80188de <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 80188d8:	2300      	movs	r3, #0
 80188da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80188dc:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 80188de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	373c      	adds	r7, #60	@ 0x3c
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd90      	pop	{r4, r7, pc}
 80188e8:	44020c00 	.word	0x44020c00
 80188ec:	03d09000 	.word	0x03d09000
 80188f0:	003d0900 	.word	0x003d0900
 80188f4:	017d7840 	.word	0x017d7840
 80188f8:	02dc6c00 	.word	0x02dc6c00

080188fc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b084      	sub	sp, #16
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8018904:	4b48      	ldr	r3, [pc, #288]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	4a47      	ldr	r2, [pc, #284]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 801890a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801890e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018910:	f7f8 fe20 	bl	8011554 <HAL_GetTick>
 8018914:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018916:	e008      	b.n	801892a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8018918:	f7f8 fe1c 	bl	8011554 <HAL_GetTick>
 801891c:	4602      	mov	r2, r0
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	1ad3      	subs	r3, r2, r3
 8018922:	2b02      	cmp	r3, #2
 8018924:	d901      	bls.n	801892a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8018926:	2303      	movs	r3, #3
 8018928:	e07a      	b.n	8018a20 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801892a:	4b3f      	ldr	r3, [pc, #252]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018932:	2b00      	cmp	r3, #0
 8018934:	d1f0      	bne.n	8018918 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8018936:	4b3c      	ldr	r3, [pc, #240]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 8018938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801893a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801893e:	f023 0303 	bic.w	r3, r3, #3
 8018942:	687a      	ldr	r2, [r7, #4]
 8018944:	6811      	ldr	r1, [r2, #0]
 8018946:	687a      	ldr	r2, [r7, #4]
 8018948:	6852      	ldr	r2, [r2, #4]
 801894a:	0212      	lsls	r2, r2, #8
 801894c:	430a      	orrs	r2, r1
 801894e:	4936      	ldr	r1, [pc, #216]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 8018950:	4313      	orrs	r3, r2
 8018952:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	689b      	ldr	r3, [r3, #8]
 8018958:	3b01      	subs	r3, #1
 801895a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	68db      	ldr	r3, [r3, #12]
 8018962:	3b01      	subs	r3, #1
 8018964:	025b      	lsls	r3, r3, #9
 8018966:	b29b      	uxth	r3, r3
 8018968:	431a      	orrs	r2, r3
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	691b      	ldr	r3, [r3, #16]
 801896e:	3b01      	subs	r3, #1
 8018970:	041b      	lsls	r3, r3, #16
 8018972:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8018976:	431a      	orrs	r2, r3
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	695b      	ldr	r3, [r3, #20]
 801897c:	3b01      	subs	r3, #1
 801897e:	061b      	lsls	r3, r3, #24
 8018980:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8018984:	4928      	ldr	r1, [pc, #160]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 8018986:	4313      	orrs	r3, r2
 8018988:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 801898a:	4b27      	ldr	r3, [pc, #156]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 801898c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801898e:	f023 020c 	bic.w	r2, r3, #12
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	699b      	ldr	r3, [r3, #24]
 8018996:	4924      	ldr	r1, [pc, #144]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 8018998:	4313      	orrs	r3, r2
 801899a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 801899c:	4b22      	ldr	r3, [pc, #136]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 801899e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189a0:	f023 0220 	bic.w	r2, r3, #32
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	69db      	ldr	r3, [r3, #28]
 80189a8:	491f      	ldr	r1, [pc, #124]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189aa:	4313      	orrs	r3, r2
 80189ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80189ae:	4b1e      	ldr	r3, [pc, #120]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189b6:	491c      	ldr	r1, [pc, #112]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189b8:	4313      	orrs	r3, r2
 80189ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80189bc:	4b1a      	ldr	r3, [pc, #104]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189c0:	4a19      	ldr	r2, [pc, #100]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189c2:	f023 0310 	bic.w	r3, r3, #16
 80189c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80189c8:	4b17      	ldr	r3, [pc, #92]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80189cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80189d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80189d4:	687a      	ldr	r2, [r7, #4]
 80189d6:	6a12      	ldr	r2, [r2, #32]
 80189d8:	00d2      	lsls	r2, r2, #3
 80189da:	4913      	ldr	r1, [pc, #76]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189dc:	4313      	orrs	r3, r2
 80189de:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80189e0:	4b11      	ldr	r3, [pc, #68]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189e4:	4a10      	ldr	r2, [pc, #64]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189e6:	f043 0310 	orr.w	r3, r3, #16
 80189ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80189ec:	4b0e      	ldr	r3, [pc, #56]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	4a0d      	ldr	r2, [pc, #52]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 80189f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80189f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80189f8:	f7f8 fdac 	bl	8011554 <HAL_GetTick>
 80189fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80189fe:	e008      	b.n	8018a12 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8018a00:	f7f8 fda8 	bl	8011554 <HAL_GetTick>
 8018a04:	4602      	mov	r2, r0
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	1ad3      	subs	r3, r2, r3
 8018a0a:	2b02      	cmp	r3, #2
 8018a0c:	d901      	bls.n	8018a12 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8018a0e:	2303      	movs	r3, #3
 8018a10:	e006      	b.n	8018a20 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018a12:	4b05      	ldr	r3, [pc, #20]	@ (8018a28 <RCCEx_PLL2_Config+0x12c>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d0f0      	beq.n	8018a00 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8018a1e:	2300      	movs	r3, #0

}
 8018a20:	4618      	mov	r0, r3
 8018a22:	3710      	adds	r7, #16
 8018a24:	46bd      	mov	sp, r7
 8018a26:	bd80      	pop	{r7, pc}
 8018a28:	44020c00 	.word	0x44020c00

08018a2c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b084      	sub	sp, #16
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8018a34:	4b48      	ldr	r3, [pc, #288]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	4a47      	ldr	r2, [pc, #284]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018a3e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018a40:	f7f8 fd88 	bl	8011554 <HAL_GetTick>
 8018a44:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8018a46:	e008      	b.n	8018a5a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8018a48:	f7f8 fd84 	bl	8011554 <HAL_GetTick>
 8018a4c:	4602      	mov	r2, r0
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	1ad3      	subs	r3, r2, r3
 8018a52:	2b02      	cmp	r3, #2
 8018a54:	d901      	bls.n	8018a5a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8018a56:	2303      	movs	r3, #3
 8018a58:	e07a      	b.n	8018b50 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8018a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d1f0      	bne.n	8018a48 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8018a66:	4b3c      	ldr	r3, [pc, #240]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a6a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018a6e:	f023 0303 	bic.w	r3, r3, #3
 8018a72:	687a      	ldr	r2, [r7, #4]
 8018a74:	6811      	ldr	r1, [r2, #0]
 8018a76:	687a      	ldr	r2, [r7, #4]
 8018a78:	6852      	ldr	r2, [r2, #4]
 8018a7a:	0212      	lsls	r2, r2, #8
 8018a7c:	430a      	orrs	r2, r1
 8018a7e:	4936      	ldr	r1, [pc, #216]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018a80:	4313      	orrs	r3, r2
 8018a82:	630b      	str	r3, [r1, #48]	@ 0x30
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	689b      	ldr	r3, [r3, #8]
 8018a88:	3b01      	subs	r3, #1
 8018a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	68db      	ldr	r3, [r3, #12]
 8018a92:	3b01      	subs	r3, #1
 8018a94:	025b      	lsls	r3, r3, #9
 8018a96:	b29b      	uxth	r3, r3
 8018a98:	431a      	orrs	r2, r3
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	691b      	ldr	r3, [r3, #16]
 8018a9e:	3b01      	subs	r3, #1
 8018aa0:	041b      	lsls	r3, r3, #16
 8018aa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8018aa6:	431a      	orrs	r2, r3
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	695b      	ldr	r3, [r3, #20]
 8018aac:	3b01      	subs	r3, #1
 8018aae:	061b      	lsls	r3, r3, #24
 8018ab0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8018ab4:	4928      	ldr	r1, [pc, #160]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018ab6:	4313      	orrs	r3, r2
 8018ab8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8018aba:	4b27      	ldr	r3, [pc, #156]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018abe:	f023 020c 	bic.w	r2, r3, #12
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	699b      	ldr	r3, [r3, #24]
 8018ac6:	4924      	ldr	r1, [pc, #144]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018ac8:	4313      	orrs	r3, r2
 8018aca:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8018acc:	4b22      	ldr	r3, [pc, #136]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018ad0:	f023 0220 	bic.w	r2, r3, #32
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	69db      	ldr	r3, [r3, #28]
 8018ad8:	491f      	ldr	r1, [pc, #124]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018ada:	4313      	orrs	r3, r2
 8018adc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8018ade:	4b1e      	ldr	r3, [pc, #120]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ae6:	491c      	ldr	r1, [pc, #112]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018ae8:	4313      	orrs	r3, r2
 8018aea:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8018aec:	4b1a      	ldr	r3, [pc, #104]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018af0:	4a19      	ldr	r2, [pc, #100]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018af2:	f023 0310 	bic.w	r3, r3, #16
 8018af6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8018af8:	4b17      	ldr	r3, [pc, #92]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018afc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8018b00:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8018b04:	687a      	ldr	r2, [r7, #4]
 8018b06:	6a12      	ldr	r2, [r2, #32]
 8018b08:	00d2      	lsls	r2, r2, #3
 8018b0a:	4913      	ldr	r1, [pc, #76]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018b0c:	4313      	orrs	r3, r2
 8018b0e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8018b10:	4b11      	ldr	r3, [pc, #68]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b14:	4a10      	ldr	r2, [pc, #64]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018b16:	f043 0310 	orr.w	r3, r3, #16
 8018b1a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8018b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	4a0d      	ldr	r2, [pc, #52]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8018b26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018b28:	f7f8 fd14 	bl	8011554 <HAL_GetTick>
 8018b2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018b2e:	e008      	b.n	8018b42 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8018b30:	f7f8 fd10 	bl	8011554 <HAL_GetTick>
 8018b34:	4602      	mov	r2, r0
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	1ad3      	subs	r3, r2, r3
 8018b3a:	2b02      	cmp	r3, #2
 8018b3c:	d901      	bls.n	8018b42 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8018b3e:	2303      	movs	r3, #3
 8018b40:	e006      	b.n	8018b50 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8018b42:	4b05      	ldr	r3, [pc, #20]	@ (8018b58 <RCCEx_PLL3_Config+0x12c>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d0f0      	beq.n	8018b30 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8018b4e:	2300      	movs	r3, #0
}
 8018b50:	4618      	mov	r0, r3
 8018b52:	3710      	adds	r7, #16
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}
 8018b58:	44020c00 	.word	0x44020c00

08018b5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b084      	sub	sp, #16
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d101      	bne.n	8018b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	e162      	b.n	8018e34 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	4a70      	ldr	r2, [pc, #448]	@ (8018d34 <HAL_SPI_Init+0x1d8>)
 8018b74:	4293      	cmp	r3, r2
 8018b76:	d018      	beq.n	8018baa <HAL_SPI_Init+0x4e>
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8018d38 <HAL_SPI_Init+0x1dc>)
 8018b7e:	4293      	cmp	r3, r2
 8018b80:	d013      	beq.n	8018baa <HAL_SPI_Init+0x4e>
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	4a6d      	ldr	r2, [pc, #436]	@ (8018d3c <HAL_SPI_Init+0x1e0>)
 8018b88:	4293      	cmp	r3, r2
 8018b8a:	d00e      	beq.n	8018baa <HAL_SPI_Init+0x4e>
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	4a6b      	ldr	r2, [pc, #428]	@ (8018d40 <HAL_SPI_Init+0x1e4>)
 8018b92:	4293      	cmp	r3, r2
 8018b94:	d009      	beq.n	8018baa <HAL_SPI_Init+0x4e>
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	4a6a      	ldr	r2, [pc, #424]	@ (8018d44 <HAL_SPI_Init+0x1e8>)
 8018b9c:	4293      	cmp	r3, r2
 8018b9e:	d004      	beq.n	8018baa <HAL_SPI_Init+0x4e>
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	4a68      	ldr	r2, [pc, #416]	@ (8018d48 <HAL_SPI_Init+0x1ec>)
 8018ba6:	4293      	cmp	r3, r2
 8018ba8:	e000      	b.n	8018bac <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8018baa:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2200      	movs	r2, #0
 8018bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	4a5f      	ldr	r2, [pc, #380]	@ (8018d34 <HAL_SPI_Init+0x1d8>)
 8018bb8:	4293      	cmp	r3, r2
 8018bba:	d018      	beq.n	8018bee <HAL_SPI_Init+0x92>
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	4a5d      	ldr	r2, [pc, #372]	@ (8018d38 <HAL_SPI_Init+0x1dc>)
 8018bc2:	4293      	cmp	r3, r2
 8018bc4:	d013      	beq.n	8018bee <HAL_SPI_Init+0x92>
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	4a5c      	ldr	r2, [pc, #368]	@ (8018d3c <HAL_SPI_Init+0x1e0>)
 8018bcc:	4293      	cmp	r3, r2
 8018bce:	d00e      	beq.n	8018bee <HAL_SPI_Init+0x92>
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	4a5a      	ldr	r2, [pc, #360]	@ (8018d40 <HAL_SPI_Init+0x1e4>)
 8018bd6:	4293      	cmp	r3, r2
 8018bd8:	d009      	beq.n	8018bee <HAL_SPI_Init+0x92>
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	4a59      	ldr	r2, [pc, #356]	@ (8018d44 <HAL_SPI_Init+0x1e8>)
 8018be0:	4293      	cmp	r3, r2
 8018be2:	d004      	beq.n	8018bee <HAL_SPI_Init+0x92>
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	4a57      	ldr	r2, [pc, #348]	@ (8018d48 <HAL_SPI_Init+0x1ec>)
 8018bea:	4293      	cmp	r3, r2
 8018bec:	d105      	bne.n	8018bfa <HAL_SPI_Init+0x9e>
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	68db      	ldr	r3, [r3, #12]
 8018bf2:	2b0f      	cmp	r3, #15
 8018bf4:	d901      	bls.n	8018bfa <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8018bf6:	2301      	movs	r3, #1
 8018bf8:	e11c      	b.n	8018e34 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8018bfa:	6878      	ldr	r0, [r7, #4]
 8018bfc:	f000 fdac 	bl	8019758 <SPI_GetPacketSize>
 8018c00:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	4a4b      	ldr	r2, [pc, #300]	@ (8018d34 <HAL_SPI_Init+0x1d8>)
 8018c08:	4293      	cmp	r3, r2
 8018c0a:	d018      	beq.n	8018c3e <HAL_SPI_Init+0xe2>
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4a49      	ldr	r2, [pc, #292]	@ (8018d38 <HAL_SPI_Init+0x1dc>)
 8018c12:	4293      	cmp	r3, r2
 8018c14:	d013      	beq.n	8018c3e <HAL_SPI_Init+0xe2>
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	4a48      	ldr	r2, [pc, #288]	@ (8018d3c <HAL_SPI_Init+0x1e0>)
 8018c1c:	4293      	cmp	r3, r2
 8018c1e:	d00e      	beq.n	8018c3e <HAL_SPI_Init+0xe2>
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	4a46      	ldr	r2, [pc, #280]	@ (8018d40 <HAL_SPI_Init+0x1e4>)
 8018c26:	4293      	cmp	r3, r2
 8018c28:	d009      	beq.n	8018c3e <HAL_SPI_Init+0xe2>
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	4a45      	ldr	r2, [pc, #276]	@ (8018d44 <HAL_SPI_Init+0x1e8>)
 8018c30:	4293      	cmp	r3, r2
 8018c32:	d004      	beq.n	8018c3e <HAL_SPI_Init+0xe2>
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	4a43      	ldr	r2, [pc, #268]	@ (8018d48 <HAL_SPI_Init+0x1ec>)
 8018c3a:	4293      	cmp	r3, r2
 8018c3c:	d102      	bne.n	8018c44 <HAL_SPI_Init+0xe8>
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	2b08      	cmp	r3, #8
 8018c42:	d820      	bhi.n	8018c86 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8018c48:	4a40      	ldr	r2, [pc, #256]	@ (8018d4c <HAL_SPI_Init+0x1f0>)
 8018c4a:	4293      	cmp	r3, r2
 8018c4c:	d018      	beq.n	8018c80 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	4a3f      	ldr	r2, [pc, #252]	@ (8018d50 <HAL_SPI_Init+0x1f4>)
 8018c54:	4293      	cmp	r3, r2
 8018c56:	d013      	beq.n	8018c80 <HAL_SPI_Init+0x124>
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8018d54 <HAL_SPI_Init+0x1f8>)
 8018c5e:	4293      	cmp	r3, r2
 8018c60:	d00e      	beq.n	8018c80 <HAL_SPI_Init+0x124>
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	4a3c      	ldr	r2, [pc, #240]	@ (8018d58 <HAL_SPI_Init+0x1fc>)
 8018c68:	4293      	cmp	r3, r2
 8018c6a:	d009      	beq.n	8018c80 <HAL_SPI_Init+0x124>
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	4a3a      	ldr	r2, [pc, #232]	@ (8018d5c <HAL_SPI_Init+0x200>)
 8018c72:	4293      	cmp	r3, r2
 8018c74:	d004      	beq.n	8018c80 <HAL_SPI_Init+0x124>
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	4a39      	ldr	r2, [pc, #228]	@ (8018d60 <HAL_SPI_Init+0x204>)
 8018c7c:	4293      	cmp	r3, r2
 8018c7e:	d104      	bne.n	8018c8a <HAL_SPI_Init+0x12e>
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	2b10      	cmp	r3, #16
 8018c84:	d901      	bls.n	8018c8a <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8018c86:	2301      	movs	r3, #1
 8018c88:	e0d4      	b.n	8018e34 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8018c90:	b2db      	uxtb	r3, r3
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d106      	bne.n	8018ca4 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	2200      	movs	r2, #0
 8018c9a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8018c9e:	6878      	ldr	r0, [r7, #4]
 8018ca0:	f7f7 fdbe 	bl	8010820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	2202      	movs	r2, #2
 8018ca8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	681a      	ldr	r2, [r3, #0]
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	f022 0201 	bic.w	r2, r2, #1
 8018cba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	689b      	ldr	r3, [r3, #8]
 8018cc2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8018cc6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	699b      	ldr	r3, [r3, #24]
 8018ccc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018cd0:	d119      	bne.n	8018d06 <HAL_SPI_Init+0x1aa>
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	685b      	ldr	r3, [r3, #4]
 8018cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8018cda:	d103      	bne.n	8018ce4 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d008      	beq.n	8018cf6 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d10c      	bne.n	8018d06 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8018cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018cf4:	d107      	bne.n	8018d06 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	681a      	ldr	r2, [r3, #0]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8018d04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d028      	beq.n	8018d64 <HAL_SPI_Init+0x208>
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	68db      	ldr	r3, [r3, #12]
 8018d16:	2b06      	cmp	r3, #6
 8018d18:	d924      	bls.n	8018d64 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	430a      	orrs	r2, r1
 8018d2e:	601a      	str	r2, [r3, #0]
 8018d30:	e020      	b.n	8018d74 <HAL_SPI_Init+0x218>
 8018d32:	bf00      	nop
 8018d34:	40014c00 	.word	0x40014c00
 8018d38:	50014c00 	.word	0x50014c00
 8018d3c:	44002000 	.word	0x44002000
 8018d40:	54002000 	.word	0x54002000
 8018d44:	40015000 	.word	0x40015000
 8018d48:	50015000 	.word	0x50015000
 8018d4c:	40013000 	.word	0x40013000
 8018d50:	50013000 	.word	0x50013000
 8018d54:	40003800 	.word	0x40003800
 8018d58:	50003800 	.word	0x50003800
 8018d5c:	40003c00 	.word	0x40003c00
 8018d60:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	681a      	ldr	r2, [r3, #0]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8018d72:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	69da      	ldr	r2, [r3, #28]
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d7c:	431a      	orrs	r2, r3
 8018d7e:	68bb      	ldr	r3, [r7, #8]
 8018d80:	431a      	orrs	r2, r3
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018d86:	ea42 0103 	orr.w	r1, r2, r3
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	68da      	ldr	r2, [r3, #12]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	430a      	orrs	r2, r1
 8018d94:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d9e:	431a      	orrs	r2, r3
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018da4:	431a      	orrs	r2, r3
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	699b      	ldr	r3, [r3, #24]
 8018daa:	431a      	orrs	r2, r3
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	691b      	ldr	r3, [r3, #16]
 8018db0:	431a      	orrs	r2, r3
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	695b      	ldr	r3, [r3, #20]
 8018db6:	431a      	orrs	r2, r3
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	6a1b      	ldr	r3, [r3, #32]
 8018dbc:	431a      	orrs	r2, r3
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	685b      	ldr	r3, [r3, #4]
 8018dc2:	431a      	orrs	r2, r3
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018dc8:	431a      	orrs	r2, r3
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	689b      	ldr	r3, [r3, #8]
 8018dce:	431a      	orrs	r2, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018dd4:	431a      	orrs	r2, r3
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018dda:	431a      	orrs	r2, r3
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018de0:	ea42 0103 	orr.w	r1, r2, r3
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	430a      	orrs	r2, r1
 8018dee:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	f022 0201 	bic.w	r2, r2, #1
 8018dfe:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	685b      	ldr	r3, [r3, #4]
 8018e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d00a      	beq.n	8018e22 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	68db      	ldr	r3, [r3, #12]
 8018e12:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	430a      	orrs	r2, r1
 8018e20:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	2200      	movs	r2, #0
 8018e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	2201      	movs	r2, #1
 8018e2e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8018e32:	2300      	movs	r3, #0
}
 8018e34:	4618      	mov	r0, r3
 8018e36:	3710      	adds	r7, #16
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bd80      	pop	{r7, pc}

08018e3c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b088      	sub	sp, #32
 8018e40:	af02      	add	r7, sp, #8
 8018e42:	60f8      	str	r0, [r7, #12]
 8018e44:	60b9      	str	r1, [r7, #8]
 8018e46:	603b      	str	r3, [r7, #0]
 8018e48:	4613      	mov	r3, r2
 8018e4a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	3320      	adds	r3, #32
 8018e52:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018e54:	f7f8 fb7e 	bl	8011554 <HAL_GetTick>
 8018e58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8018e60:	b2db      	uxtb	r3, r3
 8018e62:	2b01      	cmp	r3, #1
 8018e64:	d001      	beq.n	8018e6a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8018e66:	2302      	movs	r3, #2
 8018e68:	e1f9      	b.n	801925e <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 8018e6a:	68bb      	ldr	r3, [r7, #8]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d002      	beq.n	8018e76 <HAL_SPI_Transmit+0x3a>
 8018e70:	88fb      	ldrh	r3, [r7, #6]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d101      	bne.n	8018e7a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8018e76:	2301      	movs	r3, #1
 8018e78:	e1f1      	b.n	801925e <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8018e80:	2b01      	cmp	r3, #1
 8018e82:	d101      	bne.n	8018e88 <HAL_SPI_Transmit+0x4c>
 8018e84:	2302      	movs	r3, #2
 8018e86:	e1ea      	b.n	801925e <HAL_SPI_Transmit+0x422>
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	2201      	movs	r2, #1
 8018e8c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	2203      	movs	r2, #3
 8018e94:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	68ba      	ldr	r2, [r7, #8]
 8018ea4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	88fa      	ldrh	r2, [r7, #6]
 8018eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	88fa      	ldrh	r2, [r7, #6]
 8018eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	2200      	movs	r2, #0
 8018eba:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	2200      	movs	r2, #0
 8018ed0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	689b      	ldr	r3, [r3, #8]
 8018edc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8018ee0:	d108      	bne.n	8018ef4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	681a      	ldr	r2, [r3, #0]
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8018ef0:	601a      	str	r2, [r3, #0]
 8018ef2:	e009      	b.n	8018f08 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	68db      	ldr	r3, [r3, #12]
 8018efa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8018f06:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	685b      	ldr	r3, [r3, #4]
 8018f0e:	0c1b      	lsrs	r3, r3, #16
 8018f10:	041b      	lsls	r3, r3, #16
 8018f12:	88f9      	ldrh	r1, [r7, #6]
 8018f14:	68fa      	ldr	r2, [r7, #12]
 8018f16:	6812      	ldr	r2, [r2, #0]
 8018f18:	430b      	orrs	r3, r1
 8018f1a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	681a      	ldr	r2, [r3, #0]
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	f042 0201 	orr.w	r2, r2, #1
 8018f2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	685b      	ldr	r3, [r3, #4]
 8018f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8018f34:	d107      	bne.n	8018f46 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	681a      	ldr	r2, [r3, #0]
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018f44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	68db      	ldr	r3, [r3, #12]
 8018f4a:	2b0f      	cmp	r3, #15
 8018f4c:	d965      	bls.n	801901a <HAL_SPI_Transmit+0x1de>
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	4a94      	ldr	r2, [pc, #592]	@ (80191a4 <HAL_SPI_Transmit+0x368>)
 8018f54:	4293      	cmp	r3, r2
 8018f56:	d059      	beq.n	801900c <HAL_SPI_Transmit+0x1d0>
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	4a92      	ldr	r2, [pc, #584]	@ (80191a8 <HAL_SPI_Transmit+0x36c>)
 8018f5e:	4293      	cmp	r3, r2
 8018f60:	d054      	beq.n	801900c <HAL_SPI_Transmit+0x1d0>
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	4a91      	ldr	r2, [pc, #580]	@ (80191ac <HAL_SPI_Transmit+0x370>)
 8018f68:	4293      	cmp	r3, r2
 8018f6a:	d04f      	beq.n	801900c <HAL_SPI_Transmit+0x1d0>
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	4a8f      	ldr	r2, [pc, #572]	@ (80191b0 <HAL_SPI_Transmit+0x374>)
 8018f72:	4293      	cmp	r3, r2
 8018f74:	d04a      	beq.n	801900c <HAL_SPI_Transmit+0x1d0>
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	4a8e      	ldr	r2, [pc, #568]	@ (80191b4 <HAL_SPI_Transmit+0x378>)
 8018f7c:	4293      	cmp	r3, r2
 8018f7e:	d045      	beq.n	801900c <HAL_SPI_Transmit+0x1d0>
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	4a8c      	ldr	r2, [pc, #560]	@ (80191b8 <HAL_SPI_Transmit+0x37c>)
 8018f86:	4293      	cmp	r3, r2
 8018f88:	d147      	bne.n	801901a <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8018f8a:	e03f      	b.n	801900c <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	695b      	ldr	r3, [r3, #20]
 8018f92:	f003 0302 	and.w	r3, r3, #2
 8018f96:	2b02      	cmp	r3, #2
 8018f98:	d114      	bne.n	8018fc4 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	6812      	ldr	r2, [r2, #0]
 8018fa4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018faa:	1d1a      	adds	r2, r3, #4
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	3b01      	subs	r3, #1
 8018fba:	b29a      	uxth	r2, r3
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8018fc2:	e023      	b.n	801900c <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018fc4:	f7f8 fac6 	bl	8011554 <HAL_GetTick>
 8018fc8:	4602      	mov	r2, r0
 8018fca:	693b      	ldr	r3, [r7, #16]
 8018fcc:	1ad3      	subs	r3, r2, r3
 8018fce:	683a      	ldr	r2, [r7, #0]
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d803      	bhi.n	8018fdc <HAL_SPI_Transmit+0x1a0>
 8018fd4:	683b      	ldr	r3, [r7, #0]
 8018fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018fda:	d102      	bne.n	8018fe2 <HAL_SPI_Transmit+0x1a6>
 8018fdc:	683b      	ldr	r3, [r7, #0]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d114      	bne.n	801900c <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8018fe2:	68f8      	ldr	r0, [r7, #12]
 8018fe4:	f000 faea 	bl	80195bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018fee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	2201      	movs	r2, #1
 8018ffc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	2200      	movs	r2, #0
 8019004:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8019008:	2303      	movs	r3, #3
 801900a:	e128      	b.n	801925e <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019012:	b29b      	uxth	r3, r3
 8019014:	2b00      	cmp	r3, #0
 8019016:	d1b9      	bne.n	8018f8c <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8019018:	e0fb      	b.n	8019212 <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	68db      	ldr	r3, [r3, #12]
 801901e:	2b07      	cmp	r3, #7
 8019020:	f240 80f0 	bls.w	8019204 <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8019024:	e05d      	b.n	80190e2 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	695b      	ldr	r3, [r3, #20]
 801902c:	f003 0302 	and.w	r3, r3, #2
 8019030:	2b02      	cmp	r3, #2
 8019032:	d132      	bne.n	801909a <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801903a:	b29b      	uxth	r3, r3
 801903c:	2b01      	cmp	r3, #1
 801903e:	d918      	bls.n	8019072 <HAL_SPI_Transmit+0x236>
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019044:	2b00      	cmp	r3, #0
 8019046:	d014      	beq.n	8019072 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	6812      	ldr	r2, [r2, #0]
 8019052:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019058:	1d1a      	adds	r2, r3, #4
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019064:	b29b      	uxth	r3, r3
 8019066:	3b02      	subs	r3, #2
 8019068:	b29a      	uxth	r2, r3
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8019070:	e037      	b.n	80190e2 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019076:	881a      	ldrh	r2, [r3, #0]
 8019078:	697b      	ldr	r3, [r7, #20]
 801907a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019080:	1c9a      	adds	r2, r3, #2
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801908c:	b29b      	uxth	r3, r3
 801908e:	3b01      	subs	r3, #1
 8019090:	b29a      	uxth	r2, r3
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8019098:	e023      	b.n	80190e2 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801909a:	f7f8 fa5b 	bl	8011554 <HAL_GetTick>
 801909e:	4602      	mov	r2, r0
 80190a0:	693b      	ldr	r3, [r7, #16]
 80190a2:	1ad3      	subs	r3, r2, r3
 80190a4:	683a      	ldr	r2, [r7, #0]
 80190a6:	429a      	cmp	r2, r3
 80190a8:	d803      	bhi.n	80190b2 <HAL_SPI_Transmit+0x276>
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190b0:	d102      	bne.n	80190b8 <HAL_SPI_Transmit+0x27c>
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d114      	bne.n	80190e2 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80190b8:	68f8      	ldr	r0, [r7, #12]
 80190ba:	f000 fa7f 	bl	80195bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80190c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	2201      	movs	r2, #1
 80190d2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	2200      	movs	r2, #0
 80190da:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80190de:	2303      	movs	r3, #3
 80190e0:	e0bd      	b.n	801925e <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80190e8:	b29b      	uxth	r3, r3
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d19b      	bne.n	8019026 <HAL_SPI_Transmit+0x1ea>
 80190ee:	e090      	b.n	8019212 <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	695b      	ldr	r3, [r3, #20]
 80190f6:	f003 0302 	and.w	r3, r3, #2
 80190fa:	2b02      	cmp	r3, #2
 80190fc:	d15e      	bne.n	80191bc <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019104:	b29b      	uxth	r3, r3
 8019106:	2b03      	cmp	r3, #3
 8019108:	d918      	bls.n	801913c <HAL_SPI_Transmit+0x300>
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801910e:	2b40      	cmp	r3, #64	@ 0x40
 8019110:	d914      	bls.n	801913c <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	6812      	ldr	r2, [r2, #0]
 801911c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019122:	1d1a      	adds	r2, r3, #4
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801912e:	b29b      	uxth	r3, r3
 8019130:	3b04      	subs	r3, #4
 8019132:	b29a      	uxth	r2, r3
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801913a:	e063      	b.n	8019204 <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019142:	b29b      	uxth	r3, r3
 8019144:	2b01      	cmp	r3, #1
 8019146:	d917      	bls.n	8019178 <HAL_SPI_Transmit+0x33c>
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801914c:	2b00      	cmp	r3, #0
 801914e:	d013      	beq.n	8019178 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019154:	881a      	ldrh	r2, [r3, #0]
 8019156:	697b      	ldr	r3, [r7, #20]
 8019158:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801915e:	1c9a      	adds	r2, r3, #2
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801916a:	b29b      	uxth	r3, r3
 801916c:	3b02      	subs	r3, #2
 801916e:	b29a      	uxth	r2, r3
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8019176:	e045      	b.n	8019204 <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	3320      	adds	r3, #32
 8019182:	7812      	ldrb	r2, [r2, #0]
 8019184:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801918a:	1c5a      	adds	r2, r3, #1
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019196:	b29b      	uxth	r3, r3
 8019198:	3b01      	subs	r3, #1
 801919a:	b29a      	uxth	r2, r3
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80191a2:	e02f      	b.n	8019204 <HAL_SPI_Transmit+0x3c8>
 80191a4:	40013000 	.word	0x40013000
 80191a8:	50013000 	.word	0x50013000
 80191ac:	40003800 	.word	0x40003800
 80191b0:	50003800 	.word	0x50003800
 80191b4:	40003c00 	.word	0x40003c00
 80191b8:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80191bc:	f7f8 f9ca 	bl	8011554 <HAL_GetTick>
 80191c0:	4602      	mov	r2, r0
 80191c2:	693b      	ldr	r3, [r7, #16]
 80191c4:	1ad3      	subs	r3, r2, r3
 80191c6:	683a      	ldr	r2, [r7, #0]
 80191c8:	429a      	cmp	r2, r3
 80191ca:	d803      	bhi.n	80191d4 <HAL_SPI_Transmit+0x398>
 80191cc:	683b      	ldr	r3, [r7, #0]
 80191ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191d2:	d102      	bne.n	80191da <HAL_SPI_Transmit+0x39e>
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d114      	bne.n	8019204 <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80191da:	68f8      	ldr	r0, [r7, #12]
 80191dc:	f000 f9ee 	bl	80195bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80191e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	2201      	movs	r2, #1
 80191f4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	2200      	movs	r2, #0
 80191fc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8019200:	2303      	movs	r3, #3
 8019202:	e02c      	b.n	801925e <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801920a:	b29b      	uxth	r3, r3
 801920c:	2b00      	cmp	r3, #0
 801920e:	f47f af6f 	bne.w	80190f0 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8019212:	693b      	ldr	r3, [r7, #16]
 8019214:	9300      	str	r3, [sp, #0]
 8019216:	683b      	ldr	r3, [r7, #0]
 8019218:	2200      	movs	r2, #0
 801921a:	2108      	movs	r1, #8
 801921c:	68f8      	ldr	r0, [r7, #12]
 801921e:	f000 fa6d 	bl	80196fc <SPI_WaitOnFlagUntilTimeout>
 8019222:	4603      	mov	r3, r0
 8019224:	2b00      	cmp	r3, #0
 8019226:	d007      	beq.n	8019238 <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801922e:	f043 0220 	orr.w	r2, r3, #32
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8019238:	68f8      	ldr	r0, [r7, #12]
 801923a:	f000 f9bf 	bl	80195bc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	2201      	movs	r2, #1
 8019242:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	2200      	movs	r2, #0
 801924a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019254:	2b00      	cmp	r3, #0
 8019256:	d001      	beq.n	801925c <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 8019258:	2301      	movs	r3, #1
 801925a:	e000      	b.n	801925e <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 801925c:	2300      	movs	r3, #0
  }
}
 801925e:	4618      	mov	r0, r3
 8019260:	3718      	adds	r7, #24
 8019262:	46bd      	mov	sp, r7
 8019264:	bd80      	pop	{r7, pc}
 8019266:	bf00      	nop

08019268 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b086      	sub	sp, #24
 801926c:	af00      	add	r7, sp, #0
 801926e:	60f8      	str	r0, [r7, #12]
 8019270:	60b9      	str	r1, [r7, #8]
 8019272:	603b      	str	r3, [r7, #0]
 8019274:	4613      	mov	r3, r2
 8019276:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	3330      	adds	r3, #48	@ 0x30
 801927e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019280:	f7f8 f968 	bl	8011554 <HAL_GetTick>
 8019284:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 801928c:	b2db      	uxtb	r3, r3
 801928e:	2b01      	cmp	r3, #1
 8019290:	d001      	beq.n	8019296 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 8019292:	2302      	movs	r3, #2
 8019294:	e181      	b.n	801959a <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 8019296:	68bb      	ldr	r3, [r7, #8]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d002      	beq.n	80192a2 <HAL_SPI_Receive+0x3a>
 801929c:	88fb      	ldrh	r3, [r7, #6]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d101      	bne.n	80192a6 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 80192a2:	2301      	movs	r3, #1
 80192a4:	e179      	b.n	801959a <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80192ac:	2b01      	cmp	r3, #1
 80192ae:	d101      	bne.n	80192b4 <HAL_SPI_Receive+0x4c>
 80192b0:	2302      	movs	r3, #2
 80192b2:	e172      	b.n	801959a <HAL_SPI_Receive+0x332>
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	2201      	movs	r2, #1
 80192b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	2204      	movs	r2, #4
 80192c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	2200      	movs	r2, #0
 80192c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	68ba      	ldr	r2, [r7, #8]
 80192d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	88fa      	ldrh	r2, [r7, #6]
 80192d6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	88fa      	ldrh	r2, [r7, #6]
 80192de:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	2200      	movs	r2, #0
 80192e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	2200      	movs	r2, #0
 80192ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	2200      	movs	r2, #0
 80192f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	2200      	movs	r2, #0
 80192fc:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	2200      	movs	r2, #0
 8019302:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	689b      	ldr	r3, [r3, #8]
 8019308:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801930c:	d108      	bne.n	8019320 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	681a      	ldr	r2, [r3, #0]
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801931c:	601a      	str	r2, [r3, #0]
 801931e:	e009      	b.n	8019334 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	68db      	ldr	r3, [r3, #12]
 8019326:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8019332:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	685b      	ldr	r3, [r3, #4]
 801933a:	0c1b      	lsrs	r3, r3, #16
 801933c:	041b      	lsls	r3, r3, #16
 801933e:	88f9      	ldrh	r1, [r7, #6]
 8019340:	68fa      	ldr	r2, [r7, #12]
 8019342:	6812      	ldr	r2, [r2, #0]
 8019344:	430b      	orrs	r3, r1
 8019346:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	681a      	ldr	r2, [r3, #0]
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	f042 0201 	orr.w	r2, r2, #1
 8019356:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	685b      	ldr	r3, [r3, #4]
 801935c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8019360:	d107      	bne.n	8019372 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	681a      	ldr	r2, [r3, #0]
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8019370:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	68db      	ldr	r3, [r3, #12]
 8019376:	2b0f      	cmp	r3, #15
 8019378:	d966      	bls.n	8019448 <HAL_SPI_Receive+0x1e0>
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	4a89      	ldr	r2, [pc, #548]	@ (80195a4 <HAL_SPI_Receive+0x33c>)
 8019380:	4293      	cmp	r3, r2
 8019382:	d05a      	beq.n	801943a <HAL_SPI_Receive+0x1d2>
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	4a87      	ldr	r2, [pc, #540]	@ (80195a8 <HAL_SPI_Receive+0x340>)
 801938a:	4293      	cmp	r3, r2
 801938c:	d055      	beq.n	801943a <HAL_SPI_Receive+0x1d2>
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	4a86      	ldr	r2, [pc, #536]	@ (80195ac <HAL_SPI_Receive+0x344>)
 8019394:	4293      	cmp	r3, r2
 8019396:	d050      	beq.n	801943a <HAL_SPI_Receive+0x1d2>
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	4a84      	ldr	r2, [pc, #528]	@ (80195b0 <HAL_SPI_Receive+0x348>)
 801939e:	4293      	cmp	r3, r2
 80193a0:	d04b      	beq.n	801943a <HAL_SPI_Receive+0x1d2>
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	4a83      	ldr	r2, [pc, #524]	@ (80195b4 <HAL_SPI_Receive+0x34c>)
 80193a8:	4293      	cmp	r3, r2
 80193aa:	d046      	beq.n	801943a <HAL_SPI_Receive+0x1d2>
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	4a81      	ldr	r2, [pc, #516]	@ (80195b8 <HAL_SPI_Receive+0x350>)
 80193b2:	4293      	cmp	r3, r2
 80193b4:	d148      	bne.n	8019448 <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80193b6:	e040      	b.n	801943a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	695a      	ldr	r2, [r3, #20]
 80193be:	f248 0308 	movw	r3, #32776	@ 0x8008
 80193c2:	4013      	ands	r3, r2
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d014      	beq.n	80193f2 <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	681a      	ldr	r2, [r3, #0]
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80193d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80193d2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80193d8:	1d1a      	adds	r2, r3, #4
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80193e4:	b29b      	uxth	r3, r3
 80193e6:	3b01      	subs	r3, #1
 80193e8:	b29a      	uxth	r2, r3
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80193f0:	e023      	b.n	801943a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80193f2:	f7f8 f8af 	bl	8011554 <HAL_GetTick>
 80193f6:	4602      	mov	r2, r0
 80193f8:	693b      	ldr	r3, [r7, #16]
 80193fa:	1ad3      	subs	r3, r2, r3
 80193fc:	683a      	ldr	r2, [r7, #0]
 80193fe:	429a      	cmp	r2, r3
 8019400:	d803      	bhi.n	801940a <HAL_SPI_Receive+0x1a2>
 8019402:	683b      	ldr	r3, [r7, #0]
 8019404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019408:	d102      	bne.n	8019410 <HAL_SPI_Receive+0x1a8>
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d114      	bne.n	801943a <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8019410:	68f8      	ldr	r0, [r7, #12]
 8019412:	f000 f8d3 	bl	80195bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801941c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	2201      	movs	r2, #1
 801942a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	2200      	movs	r2, #0
 8019432:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8019436:	2303      	movs	r3, #3
 8019438:	e0af      	b.n	801959a <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8019440:	b29b      	uxth	r3, r3
 8019442:	2b00      	cmp	r3, #0
 8019444:	d1b8      	bne.n	80193b8 <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8019446:	e095      	b.n	8019574 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	68db      	ldr	r3, [r3, #12]
 801944c:	2b07      	cmp	r3, #7
 801944e:	f240 808b 	bls.w	8019568 <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8019452:	e03f      	b.n	80194d4 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	695b      	ldr	r3, [r3, #20]
 801945a:	f003 0301 	and.w	r3, r3, #1
 801945e:	2b01      	cmp	r3, #1
 8019460:	d114      	bne.n	801948c <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019466:	697a      	ldr	r2, [r7, #20]
 8019468:	8812      	ldrh	r2, [r2, #0]
 801946a:	b292      	uxth	r2, r2
 801946c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019472:	1c9a      	adds	r2, r3, #2
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801947e:	b29b      	uxth	r3, r3
 8019480:	3b01      	subs	r3, #1
 8019482:	b29a      	uxth	r2, r3
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 801948a:	e023      	b.n	80194d4 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801948c:	f7f8 f862 	bl	8011554 <HAL_GetTick>
 8019490:	4602      	mov	r2, r0
 8019492:	693b      	ldr	r3, [r7, #16]
 8019494:	1ad3      	subs	r3, r2, r3
 8019496:	683a      	ldr	r2, [r7, #0]
 8019498:	429a      	cmp	r2, r3
 801949a:	d803      	bhi.n	80194a4 <HAL_SPI_Receive+0x23c>
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194a2:	d102      	bne.n	80194aa <HAL_SPI_Receive+0x242>
 80194a4:	683b      	ldr	r3, [r7, #0]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d114      	bne.n	80194d4 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80194aa:	68f8      	ldr	r0, [r7, #12]
 80194ac:	f000 f886 	bl	80195bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80194b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	2201      	movs	r2, #1
 80194c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	2200      	movs	r2, #0
 80194cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80194d0:	2303      	movs	r3, #3
 80194d2:	e062      	b.n	801959a <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80194da:	b29b      	uxth	r3, r3
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d1b9      	bne.n	8019454 <HAL_SPI_Receive+0x1ec>
 80194e0:	e048      	b.n	8019574 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	695b      	ldr	r3, [r3, #20]
 80194e8:	f003 0301 	and.w	r3, r3, #1
 80194ec:	2b01      	cmp	r3, #1
 80194ee:	d117      	bne.n	8019520 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80194fc:	7812      	ldrb	r2, [r2, #0]
 80194fe:	b2d2      	uxtb	r2, r2
 8019500:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019506:	1c5a      	adds	r2, r3, #1
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8019512:	b29b      	uxth	r3, r3
 8019514:	3b01      	subs	r3, #1
 8019516:	b29a      	uxth	r2, r3
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 801951e:	e023      	b.n	8019568 <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019520:	f7f8 f818 	bl	8011554 <HAL_GetTick>
 8019524:	4602      	mov	r2, r0
 8019526:	693b      	ldr	r3, [r7, #16]
 8019528:	1ad3      	subs	r3, r2, r3
 801952a:	683a      	ldr	r2, [r7, #0]
 801952c:	429a      	cmp	r2, r3
 801952e:	d803      	bhi.n	8019538 <HAL_SPI_Receive+0x2d0>
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019536:	d102      	bne.n	801953e <HAL_SPI_Receive+0x2d6>
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d114      	bne.n	8019568 <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801953e:	68f8      	ldr	r0, [r7, #12]
 8019540:	f000 f83c 	bl	80195bc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801954a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	2201      	movs	r2, #1
 8019558:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	2200      	movs	r2, #0
 8019560:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8019564:	2303      	movs	r3, #3
 8019566:	e018      	b.n	801959a <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801956e:	b29b      	uxth	r3, r3
 8019570:	2b00      	cmp	r3, #0
 8019572:	d1b6      	bne.n	80194e2 <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8019574:	68f8      	ldr	r0, [r7, #12]
 8019576:	f000 f821 	bl	80195bc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	2201      	movs	r2, #1
 801957e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	2200      	movs	r2, #0
 8019586:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019590:	2b00      	cmp	r3, #0
 8019592:	d001      	beq.n	8019598 <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 8019594:	2301      	movs	r3, #1
 8019596:	e000      	b.n	801959a <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 8019598:	2300      	movs	r3, #0
  }
}
 801959a:	4618      	mov	r0, r3
 801959c:	3718      	adds	r7, #24
 801959e:	46bd      	mov	sp, r7
 80195a0:	bd80      	pop	{r7, pc}
 80195a2:	bf00      	nop
 80195a4:	40013000 	.word	0x40013000
 80195a8:	50013000 	.word	0x50013000
 80195ac:	40003800 	.word	0x40003800
 80195b0:	50003800 	.word	0x50003800
 80195b4:	40003c00 	.word	0x40003c00
 80195b8:	50003c00 	.word	0x50003c00

080195bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80195bc:	b480      	push	{r7}
 80195be:	b085      	sub	sp, #20
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	695b      	ldr	r3, [r3, #20]
 80195ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	699a      	ldr	r2, [r3, #24]
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	f042 0208 	orr.w	r2, r2, #8
 80195da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	699a      	ldr	r2, [r3, #24]
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	f042 0210 	orr.w	r2, r2, #16
 80195ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	681a      	ldr	r2, [r3, #0]
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	f022 0201 	bic.w	r2, r2, #1
 80195fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	691b      	ldr	r3, [r3, #16]
 8019602:	687a      	ldr	r2, [r7, #4]
 8019604:	6812      	ldr	r2, [r2, #0]
 8019606:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 801960a:	f023 0303 	bic.w	r3, r3, #3
 801960e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	689a      	ldr	r2, [r3, #8]
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801961e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8019626:	b2db      	uxtb	r3, r3
 8019628:	2b04      	cmp	r3, #4
 801962a:	d014      	beq.n	8019656 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	f003 0320 	and.w	r3, r3, #32
 8019632:	2b00      	cmp	r3, #0
 8019634:	d00f      	beq.n	8019656 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801963c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	699a      	ldr	r2, [r3, #24]
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	f042 0220 	orr.w	r2, r2, #32
 8019654:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 801965c:	b2db      	uxtb	r3, r3
 801965e:	2b03      	cmp	r3, #3
 8019660:	d014      	beq.n	801968c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019668:	2b00      	cmp	r3, #0
 801966a:	d00f      	beq.n	801968c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019672:	f043 0204 	orr.w	r2, r3, #4
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	699a      	ldr	r2, [r3, #24]
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801968a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019692:	2b00      	cmp	r3, #0
 8019694:	d00f      	beq.n	80196b6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801969c:	f043 0201 	orr.w	r2, r3, #1
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	699a      	ldr	r2, [r3, #24]
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80196b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d00f      	beq.n	80196e0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80196c6:	f043 0208 	orr.w	r2, r3, #8
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	699a      	ldr	r2, [r3, #24]
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80196de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2200      	movs	r2, #0
 80196e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	2200      	movs	r2, #0
 80196ec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80196f0:	bf00      	nop
 80196f2:	3714      	adds	r7, #20
 80196f4:	46bd      	mov	sp, r7
 80196f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fa:	4770      	bx	lr

080196fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b084      	sub	sp, #16
 8019700:	af00      	add	r7, sp, #0
 8019702:	60f8      	str	r0, [r7, #12]
 8019704:	60b9      	str	r1, [r7, #8]
 8019706:	603b      	str	r3, [r7, #0]
 8019708:	4613      	mov	r3, r2
 801970a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801970c:	e010      	b.n	8019730 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801970e:	f7f7 ff21 	bl	8011554 <HAL_GetTick>
 8019712:	4602      	mov	r2, r0
 8019714:	69bb      	ldr	r3, [r7, #24]
 8019716:	1ad3      	subs	r3, r2, r3
 8019718:	683a      	ldr	r2, [r7, #0]
 801971a:	429a      	cmp	r2, r3
 801971c:	d803      	bhi.n	8019726 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801971e:	683b      	ldr	r3, [r7, #0]
 8019720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019724:	d102      	bne.n	801972c <SPI_WaitOnFlagUntilTimeout+0x30>
 8019726:	683b      	ldr	r3, [r7, #0]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d101      	bne.n	8019730 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 801972c:	2303      	movs	r3, #3
 801972e:	e00f      	b.n	8019750 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	695a      	ldr	r2, [r3, #20]
 8019736:	68bb      	ldr	r3, [r7, #8]
 8019738:	4013      	ands	r3, r2
 801973a:	68ba      	ldr	r2, [r7, #8]
 801973c:	429a      	cmp	r2, r3
 801973e:	bf0c      	ite	eq
 8019740:	2301      	moveq	r3, #1
 8019742:	2300      	movne	r3, #0
 8019744:	b2db      	uxtb	r3, r3
 8019746:	461a      	mov	r2, r3
 8019748:	79fb      	ldrb	r3, [r7, #7]
 801974a:	429a      	cmp	r2, r3
 801974c:	d0df      	beq.n	801970e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801974e:	2300      	movs	r3, #0
}
 8019750:	4618      	mov	r0, r3
 8019752:	3710      	adds	r7, #16
 8019754:	46bd      	mov	sp, r7
 8019756:	bd80      	pop	{r7, pc}

08019758 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8019758:	b480      	push	{r7}
 801975a:	b085      	sub	sp, #20
 801975c:	af00      	add	r7, sp, #0
 801975e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019764:	095b      	lsrs	r3, r3, #5
 8019766:	3301      	adds	r3, #1
 8019768:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	68db      	ldr	r3, [r3, #12]
 801976e:	3301      	adds	r3, #1
 8019770:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8019772:	68bb      	ldr	r3, [r7, #8]
 8019774:	3307      	adds	r3, #7
 8019776:	08db      	lsrs	r3, r3, #3
 8019778:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	68fa      	ldr	r2, [r7, #12]
 801977e:	fb02 f303 	mul.w	r3, r2, r3
}
 8019782:	4618      	mov	r0, r3
 8019784:	3714      	adds	r7, #20
 8019786:	46bd      	mov	sp, r7
 8019788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978c:	4770      	bx	lr
	...

08019790 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b084      	sub	sp, #16
 8019794:	af00      	add	r7, sp, #0
 8019796:	60f8      	str	r0, [r7, #12]
 8019798:	60b9      	str	r1, [r7, #8]
 801979a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d101      	bne.n	80197a6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80197a2:	2301      	movs	r3, #1
 80197a4:	e03e      	b.n	8019824 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80197ac:	b2db      	uxtb	r3, r3
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d106      	bne.n	80197c0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	2200      	movs	r2, #0
 80197b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80197ba:	68f8      	ldr	r0, [r7, #12]
 80197bc:	f7f7 fc2a 	bl	8011014 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	681a      	ldr	r2, [r3, #0]
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	3308      	adds	r3, #8
 80197c8:	4619      	mov	r1, r3
 80197ca:	4610      	mov	r0, r2
 80197cc:	f002 fb3e 	bl	801be4c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	6818      	ldr	r0, [r3, #0]
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	689b      	ldr	r3, [r3, #8]
 80197d8:	461a      	mov	r2, r3
 80197da:	68b9      	ldr	r1, [r7, #8]
 80197dc:	f002 fc04 	bl	801bfe8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	6858      	ldr	r0, [r3, #4]
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	689a      	ldr	r2, [r3, #8]
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197ec:	6879      	ldr	r1, [r7, #4]
 80197ee:	f002 fc48 	bl	801c082 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	68fa      	ldr	r2, [r7, #12]
 80197f8:	6892      	ldr	r2, [r2, #8]
 80197fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	68fa      	ldr	r2, [r7, #12]
 8019804:	6892      	ldr	r2, [r2, #8]
 8019806:	f041 0101 	orr.w	r1, r1, #1
 801980a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 801980e:	4b07      	ldr	r3, [pc, #28]	@ (801982c <HAL_SRAM_Init+0x9c>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	4a06      	ldr	r2, [pc, #24]	@ (801982c <HAL_SRAM_Init+0x9c>)
 8019814:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019818:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	2201      	movs	r2, #1
 801981e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8019822:	2300      	movs	r3, #0
}
 8019824:	4618      	mov	r0, r3
 8019826:	3710      	adds	r7, #16
 8019828:	46bd      	mov	sp, r7
 801982a:	bd80      	pop	{r7, pc}
 801982c:	47000400 	.word	0x47000400

08019830 <HAL_SRAM_Read_8b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
                                   uint32_t BufferSize)
{
 8019830:	b480      	push	{r7}
 8019832:	b08b      	sub	sp, #44	@ 0x2c
 8019834:	af00      	add	r7, sp, #0
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	60b9      	str	r1, [r7, #8]
 801983a:	607a      	str	r2, [r7, #4]
 801983c:	603b      	str	r3, [r7, #0]
  uint32_t size;
  uint32_t time_out = 0 ;
 801983e:	2300      	movs	r3, #0
 8019840:	623b      	str	r3, [r7, #32]
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 8019842:	68bb      	ldr	r3, [r7, #8]
 8019844:	61fb      	str	r3, [r7, #28]
  uint8_t *pdestbuff = pDstBuffer;
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	61bb      	str	r3, [r7, #24]
  HAL_SRAM_StateTypeDef state = hsram->State;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019850:	75fb      	strb	r3, [r7, #23]


  while(*psramaddress == 0xFF && time_out++ < 0xFFFF0 );
 8019852:	bf00      	nop
 8019854:	69fb      	ldr	r3, [r7, #28]
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	b2db      	uxtb	r3, r3
 801985a:	2bff      	cmp	r3, #255	@ 0xff
 801985c:	d105      	bne.n	801986a <HAL_SRAM_Read_8b+0x3a>
 801985e:	6a3b      	ldr	r3, [r7, #32]
 8019860:	1c5a      	adds	r2, r3, #1
 8019862:	623a      	str	r2, [r7, #32]
 8019864:	4a1e      	ldr	r2, [pc, #120]	@ (80198e0 <HAL_SRAM_Read_8b+0xb0>)
 8019866:	4293      	cmp	r3, r2
 8019868:	d9f4      	bls.n	8019854 <HAL_SRAM_Read_8b+0x24>
  /* Check the SRAM controller state */
  if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 801986a:	7dfb      	ldrb	r3, [r7, #23]
 801986c:	2b01      	cmp	r3, #1
 801986e:	d002      	beq.n	8019876 <HAL_SRAM_Read_8b+0x46>
 8019870:	7dfb      	ldrb	r3, [r7, #23]
 8019872:	2b04      	cmp	r3, #4
 8019874:	d12c      	bne.n	80198d0 <HAL_SRAM_Read_8b+0xa0>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801987c:	2b01      	cmp	r3, #1
 801987e:	d101      	bne.n	8019884 <HAL_SRAM_Read_8b+0x54>
 8019880:	2302      	movs	r3, #2
 8019882:	e026      	b.n	80198d2 <HAL_SRAM_Read_8b+0xa2>
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	2201      	movs	r2, #1
 8019888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	2202      	movs	r2, #2
 8019890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Read data from memory */
    for (size = BufferSize; size != 0U; size--)
 8019894:	683b      	ldr	r3, [r7, #0]
 8019896:	627b      	str	r3, [r7, #36]	@ 0x24
 8019898:	e00d      	b.n	80198b6 <HAL_SRAM_Read_8b+0x86>
    {
      *pdestbuff = *psramaddress;
 801989a:	69fb      	ldr	r3, [r7, #28]
 801989c:	781b      	ldrb	r3, [r3, #0]
 801989e:	b2da      	uxtb	r2, r3
 80198a0:	69bb      	ldr	r3, [r7, #24]
 80198a2:	701a      	strb	r2, [r3, #0]
      pdestbuff++;
 80198a4:	69bb      	ldr	r3, [r7, #24]
 80198a6:	3301      	adds	r3, #1
 80198a8:	61bb      	str	r3, [r7, #24]
      psramaddress++;
 80198aa:	69fb      	ldr	r3, [r7, #28]
 80198ac:	3301      	adds	r3, #1
 80198ae:	61fb      	str	r3, [r7, #28]
    for (size = BufferSize; size != 0U; size--)
 80198b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198b2:	3b01      	subs	r3, #1
 80198b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80198b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d1ee      	bne.n	801989a <HAL_SRAM_Read_8b+0x6a>
    }

    /* Update the SRAM controller state */
    hsram->State = state;
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	7dfa      	ldrb	r2, [r7, #23]
 80198c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	2200      	movs	r2, #0
 80198c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80198cc:	2300      	movs	r3, #0
 80198ce:	e000      	b.n	80198d2 <HAL_SRAM_Read_8b+0xa2>
    return HAL_ERROR;
 80198d0:	2301      	movs	r3, #1
}
 80198d2:	4618      	mov	r0, r3
 80198d4:	372c      	adds	r7, #44	@ 0x2c
 80198d6:	46bd      	mov	sp, r7
 80198d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198dc:	4770      	bx	lr
 80198de:	bf00      	nop
 80198e0:	000fffef 	.word	0x000fffef

080198e4 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 80198e4:	b480      	push	{r7}
 80198e6:	b089      	sub	sp, #36	@ 0x24
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	60f8      	str	r0, [r7, #12]
 80198ec:	60b9      	str	r1, [r7, #8]
 80198ee:	607a      	str	r2, [r7, #4]
 80198f0:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 80198f2:	68bb      	ldr	r3, [r7, #8]
 80198f4:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019900:	b2db      	uxtb	r3, r3
 8019902:	2b01      	cmp	r3, #1
 8019904:	d12b      	bne.n	801995e <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801990c:	2b01      	cmp	r3, #1
 801990e:	d101      	bne.n	8019914 <HAL_SRAM_Write_8b+0x30>
 8019910:	2302      	movs	r3, #2
 8019912:	e025      	b.n	8019960 <HAL_SRAM_Write_8b+0x7c>
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	2201      	movs	r2, #1
 8019918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	2202      	movs	r2, #2
 8019920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 8019924:	683b      	ldr	r3, [r7, #0]
 8019926:	61fb      	str	r3, [r7, #28]
 8019928:	e00c      	b.n	8019944 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 801992a:	697b      	ldr	r3, [r7, #20]
 801992c:	781a      	ldrb	r2, [r3, #0]
 801992e:	69bb      	ldr	r3, [r7, #24]
 8019930:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 8019932:	697b      	ldr	r3, [r7, #20]
 8019934:	3301      	adds	r3, #1
 8019936:	617b      	str	r3, [r7, #20]
      psramaddress++;
 8019938:	69bb      	ldr	r3, [r7, #24]
 801993a:	3301      	adds	r3, #1
 801993c:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 801993e:	69fb      	ldr	r3, [r7, #28]
 8019940:	3b01      	subs	r3, #1
 8019942:	61fb      	str	r3, [r7, #28]
 8019944:	69fb      	ldr	r3, [r7, #28]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d1ef      	bne.n	801992a <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	2201      	movs	r2, #1
 801994e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 8019952:	68fb      	ldr	r3, [r7, #12]
 8019954:	2200      	movs	r2, #0
 8019956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801995a:	2300      	movs	r3, #0
 801995c:	e000      	b.n	8019960 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 801995e:	2301      	movs	r3, #1
}
 8019960:	4618      	mov	r0, r3
 8019962:	3724      	adds	r7, #36	@ 0x24
 8019964:	46bd      	mov	sp, r7
 8019966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801996a:	4770      	bx	lr

0801996c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801996c:	b580      	push	{r7, lr}
 801996e:	b082      	sub	sp, #8
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d101      	bne.n	801997e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801997a:	2301      	movs	r3, #1
 801997c:	e042      	b.n	8019a04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019984:	2b00      	cmp	r3, #0
 8019986:	d106      	bne.n	8019996 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	2200      	movs	r2, #0
 801998c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8019990:	6878      	ldr	r0, [r7, #4]
 8019992:	f7f7 f8ad 	bl	8010af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	2224      	movs	r2, #36	@ 0x24
 801999a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	681a      	ldr	r2, [r3, #0]
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	f022 0201 	bic.w	r2, r2, #1
 80199ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d002      	beq.n	80199bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80199b6:	6878      	ldr	r0, [r7, #4]
 80199b8:	f000 fec8 	bl	801a74c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80199bc:	6878      	ldr	r0, [r7, #4]
 80199be:	f000 fcd7 	bl	801a370 <UART_SetConfig>
 80199c2:	4603      	mov	r3, r0
 80199c4:	2b01      	cmp	r3, #1
 80199c6:	d101      	bne.n	80199cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80199c8:	2301      	movs	r3, #1
 80199ca:	e01b      	b.n	8019a04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	685a      	ldr	r2, [r3, #4]
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80199da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	689a      	ldr	r2, [r3, #8]
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80199ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	681a      	ldr	r2, [r3, #0]
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	f042 0201 	orr.w	r2, r2, #1
 80199fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80199fc:	6878      	ldr	r0, [r7, #4]
 80199fe:	f000 ff47 	bl	801a890 <UART_CheckIdleState>
 8019a02:	4603      	mov	r3, r0
}
 8019a04:	4618      	mov	r0, r3
 8019a06:	3708      	adds	r7, #8
 8019a08:	46bd      	mov	sp, r7
 8019a0a:	bd80      	pop	{r7, pc}

08019a0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b08a      	sub	sp, #40	@ 0x28
 8019a10:	af02      	add	r7, sp, #8
 8019a12:	60f8      	str	r0, [r7, #12]
 8019a14:	60b9      	str	r1, [r7, #8]
 8019a16:	603b      	str	r3, [r7, #0]
 8019a18:	4613      	mov	r3, r2
 8019a1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019a22:	2b20      	cmp	r3, #32
 8019a24:	f040 808b 	bne.w	8019b3e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8019a28:	68bb      	ldr	r3, [r7, #8]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d002      	beq.n	8019a34 <HAL_UART_Transmit+0x28>
 8019a2e:	88fb      	ldrh	r3, [r7, #6]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d101      	bne.n	8019a38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8019a34:	2301      	movs	r3, #1
 8019a36:	e083      	b.n	8019b40 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	689b      	ldr	r3, [r3, #8]
 8019a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019a42:	2b80      	cmp	r3, #128	@ 0x80
 8019a44:	d107      	bne.n	8019a56 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	689a      	ldr	r2, [r3, #8]
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8019a54:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	2200      	movs	r2, #0
 8019a5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	2221      	movs	r2, #33	@ 0x21
 8019a62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8019a66:	f7f7 fd75 	bl	8011554 <HAL_GetTick>
 8019a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	88fa      	ldrh	r2, [r7, #6]
 8019a70:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	88fa      	ldrh	r2, [r7, #6]
 8019a78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	689b      	ldr	r3, [r3, #8]
 8019a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019a84:	d108      	bne.n	8019a98 <HAL_UART_Transmit+0x8c>
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	691b      	ldr	r3, [r3, #16]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d104      	bne.n	8019a98 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8019a8e:	2300      	movs	r3, #0
 8019a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8019a92:	68bb      	ldr	r3, [r7, #8]
 8019a94:	61bb      	str	r3, [r7, #24]
 8019a96:	e003      	b.n	8019aa0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8019aa0:	e030      	b.n	8019b04 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8019aa2:	683b      	ldr	r3, [r7, #0]
 8019aa4:	9300      	str	r3, [sp, #0]
 8019aa6:	697b      	ldr	r3, [r7, #20]
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	2180      	movs	r1, #128	@ 0x80
 8019aac:	68f8      	ldr	r0, [r7, #12]
 8019aae:	f000 ff99 	bl	801a9e4 <UART_WaitOnFlagUntilTimeout>
 8019ab2:	4603      	mov	r3, r0
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d005      	beq.n	8019ac4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	2220      	movs	r2, #32
 8019abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8019ac0:	2303      	movs	r3, #3
 8019ac2:	e03d      	b.n	8019b40 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8019ac4:	69fb      	ldr	r3, [r7, #28]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d10b      	bne.n	8019ae2 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8019aca:	69bb      	ldr	r3, [r7, #24]
 8019acc:	881b      	ldrh	r3, [r3, #0]
 8019ace:	461a      	mov	r2, r3
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019ad8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8019ada:	69bb      	ldr	r3, [r7, #24]
 8019adc:	3302      	adds	r3, #2
 8019ade:	61bb      	str	r3, [r7, #24]
 8019ae0:	e007      	b.n	8019af2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8019ae2:	69fb      	ldr	r3, [r7, #28]
 8019ae4:	781a      	ldrb	r2, [r3, #0]
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8019aec:	69fb      	ldr	r3, [r7, #28]
 8019aee:	3301      	adds	r3, #1
 8019af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019af8:	b29b      	uxth	r3, r3
 8019afa:	3b01      	subs	r3, #1
 8019afc:	b29a      	uxth	r2, r3
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d1c8      	bne.n	8019aa2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8019b10:	683b      	ldr	r3, [r7, #0]
 8019b12:	9300      	str	r3, [sp, #0]
 8019b14:	697b      	ldr	r3, [r7, #20]
 8019b16:	2200      	movs	r2, #0
 8019b18:	2140      	movs	r1, #64	@ 0x40
 8019b1a:	68f8      	ldr	r0, [r7, #12]
 8019b1c:	f000 ff62 	bl	801a9e4 <UART_WaitOnFlagUntilTimeout>
 8019b20:	4603      	mov	r3, r0
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d005      	beq.n	8019b32 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	2220      	movs	r2, #32
 8019b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8019b2e:	2303      	movs	r3, #3
 8019b30:	e006      	b.n	8019b40 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	2220      	movs	r2, #32
 8019b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	e000      	b.n	8019b40 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8019b3e:	2302      	movs	r3, #2
  }
}
 8019b40:	4618      	mov	r0, r3
 8019b42:	3720      	adds	r7, #32
 8019b44:	46bd      	mov	sp, r7
 8019b46:	bd80      	pop	{r7, pc}

08019b48 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8019b48:	b480      	push	{r7}
 8019b4a:	b091      	sub	sp, #68	@ 0x44
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	60f8      	str	r0, [r7, #12]
 8019b50:	60b9      	str	r1, [r7, #8]
 8019b52:	4613      	mov	r3, r2
 8019b54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019b5c:	2b20      	cmp	r3, #32
 8019b5e:	f040 8088 	bne.w	8019c72 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8019b62:	68bb      	ldr	r3, [r7, #8]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d002      	beq.n	8019b6e <HAL_UART_Transmit_IT+0x26>
 8019b68:	88fb      	ldrh	r3, [r7, #6]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d101      	bne.n	8019b72 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8019b6e:	2301      	movs	r3, #1
 8019b70:	e080      	b.n	8019c74 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	689b      	ldr	r3, [r3, #8]
 8019b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019b7c:	2b80      	cmp	r3, #128	@ 0x80
 8019b7e:	d107      	bne.n	8019b90 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	689a      	ldr	r2, [r3, #8]
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8019b8e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	68ba      	ldr	r2, [r7, #8]
 8019b94:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	88fa      	ldrh	r2, [r7, #6]
 8019b9a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	88fa      	ldrh	r2, [r7, #6]
 8019ba2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	2200      	movs	r2, #0
 8019baa:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	2200      	movs	r2, #0
 8019bb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	2221      	movs	r2, #33	@ 0x21
 8019bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019bc4:	d12a      	bne.n	8019c1c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	689b      	ldr	r3, [r3, #8]
 8019bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019bce:	d107      	bne.n	8019be0 <HAL_UART_Transmit_IT+0x98>
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	691b      	ldr	r3, [r3, #16]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d103      	bne.n	8019be0 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	4a29      	ldr	r2, [pc, #164]	@ (8019c80 <HAL_UART_Transmit_IT+0x138>)
 8019bdc:	679a      	str	r2, [r3, #120]	@ 0x78
 8019bde:	e002      	b.n	8019be6 <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	4a28      	ldr	r2, [pc, #160]	@ (8019c84 <HAL_UART_Transmit_IT+0x13c>)
 8019be4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	3308      	adds	r3, #8
 8019bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bf0:	e853 3f00 	ldrex	r3, [r3]
 8019bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	3308      	adds	r3, #8
 8019c04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019c06:	637a      	str	r2, [r7, #52]	@ 0x34
 8019c08:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c0e:	e841 2300 	strex	r3, r2, [r1]
 8019c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d1e5      	bne.n	8019be6 <HAL_UART_Transmit_IT+0x9e>
 8019c1a:	e028      	b.n	8019c6e <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	689b      	ldr	r3, [r3, #8]
 8019c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019c24:	d107      	bne.n	8019c36 <HAL_UART_Transmit_IT+0xee>
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	691b      	ldr	r3, [r3, #16]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d103      	bne.n	8019c36 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	4a15      	ldr	r2, [pc, #84]	@ (8019c88 <HAL_UART_Transmit_IT+0x140>)
 8019c32:	679a      	str	r2, [r3, #120]	@ 0x78
 8019c34:	e002      	b.n	8019c3c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	4a14      	ldr	r2, [pc, #80]	@ (8019c8c <HAL_UART_Transmit_IT+0x144>)
 8019c3a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	e853 3f00 	ldrex	r3, [r3]
 8019c48:	613b      	str	r3, [r7, #16]
   return(result);
 8019c4a:	693b      	ldr	r3, [r7, #16]
 8019c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	461a      	mov	r2, r3
 8019c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c5a:	623b      	str	r3, [r7, #32]
 8019c5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c5e:	69f9      	ldr	r1, [r7, #28]
 8019c60:	6a3a      	ldr	r2, [r7, #32]
 8019c62:	e841 2300 	strex	r3, r2, [r1]
 8019c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8019c68:	69bb      	ldr	r3, [r7, #24]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d1e6      	bne.n	8019c3c <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 8019c6e:	2300      	movs	r3, #0
 8019c70:	e000      	b.n	8019c74 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8019c72:	2302      	movs	r3, #2
  }
}
 8019c74:	4618      	mov	r0, r3
 8019c76:	3744      	adds	r7, #68	@ 0x44
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7e:	4770      	bx	lr
 8019c80:	0801b057 	.word	0x0801b057
 8019c84:	0801af77 	.word	0x0801af77
 8019c88:	0801aeb5 	.word	0x0801aeb5
 8019c8c:	0801adfd 	.word	0x0801adfd

08019c90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b08a      	sub	sp, #40	@ 0x28
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	60f8      	str	r0, [r7, #12]
 8019c98:	60b9      	str	r1, [r7, #8]
 8019c9a:	4613      	mov	r3, r2
 8019c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019ca4:	2b20      	cmp	r3, #32
 8019ca6:	d14b      	bne.n	8019d40 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d002      	beq.n	8019cb4 <HAL_UART_Receive_IT+0x24>
 8019cae:	88fb      	ldrh	r3, [r7, #6]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d101      	bne.n	8019cb8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8019cb4:	2301      	movs	r3, #1
 8019cb6:	e044      	b.n	8019d42 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	2200      	movs	r2, #0
 8019cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	689b      	ldr	r3, [r3, #8]
 8019cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019cc8:	2b40      	cmp	r3, #64	@ 0x40
 8019cca:	d107      	bne.n	8019cdc <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	689a      	ldr	r2, [r3, #8]
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8019cda:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8019d4c <HAL_UART_Receive_IT+0xbc>)
 8019ce2:	4293      	cmp	r3, r2
 8019ce4:	d024      	beq.n	8019d30 <HAL_UART_Receive_IT+0xa0>
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	4a19      	ldr	r2, [pc, #100]	@ (8019d50 <HAL_UART_Receive_IT+0xc0>)
 8019cec:	4293      	cmp	r3, r2
 8019cee:	d01f      	beq.n	8019d30 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	685b      	ldr	r3, [r3, #4]
 8019cf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d018      	beq.n	8019d30 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d04:	697b      	ldr	r3, [r7, #20]
 8019d06:	e853 3f00 	ldrex	r3, [r3]
 8019d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8019d0c:	693b      	ldr	r3, [r7, #16]
 8019d0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8019d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	461a      	mov	r2, r3
 8019d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d1c:	623b      	str	r3, [r7, #32]
 8019d1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d20:	69f9      	ldr	r1, [r7, #28]
 8019d22:	6a3a      	ldr	r2, [r7, #32]
 8019d24:	e841 2300 	strex	r3, r2, [r1]
 8019d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8019d2a:	69bb      	ldr	r3, [r7, #24]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d1e6      	bne.n	8019cfe <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8019d30:	88fb      	ldrh	r3, [r7, #6]
 8019d32:	461a      	mov	r2, r3
 8019d34:	68b9      	ldr	r1, [r7, #8]
 8019d36:	68f8      	ldr	r0, [r7, #12]
 8019d38:	f000 fec2 	bl	801aac0 <UART_Start_Receive_IT>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	e000      	b.n	8019d42 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8019d40:	2302      	movs	r3, #2
  }
}
 8019d42:	4618      	mov	r0, r3
 8019d44:	3728      	adds	r7, #40	@ 0x28
 8019d46:	46bd      	mov	sp, r7
 8019d48:	bd80      	pop	{r7, pc}
 8019d4a:	bf00      	nop
 8019d4c:	44002400 	.word	0x44002400
 8019d50:	54002400 	.word	0x54002400

08019d54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	b0ae      	sub	sp, #184	@ 0xb8
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	69db      	ldr	r3, [r3, #28]
 8019d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	689b      	ldr	r3, [r3, #8]
 8019d76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8019d7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8019d82:	4013      	ands	r3, r2
 8019d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8019d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d11b      	bne.n	8019dc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8019d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019d94:	f003 0320 	and.w	r3, r3, #32
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d015      	beq.n	8019dc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8019d9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019da0:	f003 0320 	and.w	r3, r3, #32
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d105      	bne.n	8019db4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8019da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d009      	beq.n	8019dc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	f000 82ac 	beq.w	801a316 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019dc2:	6878      	ldr	r0, [r7, #4]
 8019dc4:	4798      	blx	r3
      }
      return;
 8019dc6:	e2a6      	b.n	801a316 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8019dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	f000 80fd 	beq.w	8019fcc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8019dd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8019dd6:	4b7a      	ldr	r3, [pc, #488]	@ (8019fc0 <HAL_UART_IRQHandler+0x26c>)
 8019dd8:	4013      	ands	r3, r2
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d106      	bne.n	8019dec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8019dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8019de2:	4b78      	ldr	r3, [pc, #480]	@ (8019fc4 <HAL_UART_IRQHandler+0x270>)
 8019de4:	4013      	ands	r3, r2
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	f000 80f0 	beq.w	8019fcc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019dec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019df0:	f003 0301 	and.w	r3, r3, #1
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d011      	beq.n	8019e1c <HAL_UART_IRQHandler+0xc8>
 8019df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d00b      	beq.n	8019e1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	2201      	movs	r2, #1
 8019e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e12:	f043 0201 	orr.w	r2, r3, #1
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e20:	f003 0302 	and.w	r3, r3, #2
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d011      	beq.n	8019e4c <HAL_UART_IRQHandler+0xf8>
 8019e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019e2c:	f003 0301 	and.w	r3, r3, #1
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d00b      	beq.n	8019e4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	2202      	movs	r2, #2
 8019e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e42:	f043 0204 	orr.w	r2, r3, #4
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e50:	f003 0304 	and.w	r3, r3, #4
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d011      	beq.n	8019e7c <HAL_UART_IRQHandler+0x128>
 8019e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019e5c:	f003 0301 	and.w	r3, r3, #1
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d00b      	beq.n	8019e7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	2204      	movs	r2, #4
 8019e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e72:	f043 0202 	orr.w	r2, r3, #2
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8019e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019e80:	f003 0308 	and.w	r3, r3, #8
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d017      	beq.n	8019eb8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8019e88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019e8c:	f003 0320 	and.w	r3, r3, #32
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d105      	bne.n	8019ea0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8019e94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8019e98:	4b49      	ldr	r3, [pc, #292]	@ (8019fc0 <HAL_UART_IRQHandler+0x26c>)
 8019e9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d00b      	beq.n	8019eb8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	2208      	movs	r2, #8
 8019ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019eae:	f043 0208 	orr.w	r2, r3, #8
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8019eb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d012      	beq.n	8019eea <HAL_UART_IRQHandler+0x196>
 8019ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019ec8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d00c      	beq.n	8019eea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ee0:	f043 0220 	orr.w	r2, r3, #32
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	f000 8212 	beq.w	801a31a <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8019ef6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019efa:	f003 0320 	and.w	r3, r3, #32
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d013      	beq.n	8019f2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8019f02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019f06:	f003 0320 	and.w	r3, r3, #32
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d105      	bne.n	8019f1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8019f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d007      	beq.n	8019f2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d003      	beq.n	8019f2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f26:	6878      	ldr	r0, [r7, #4]
 8019f28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	689b      	ldr	r3, [r3, #8]
 8019f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019f3e:	2b40      	cmp	r3, #64	@ 0x40
 8019f40:	d005      	beq.n	8019f4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8019f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019f46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d02e      	beq.n	8019fac <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019f4e:	6878      	ldr	r0, [r7, #4]
 8019f50:	f000 fed8 	bl	801ad04 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	689b      	ldr	r3, [r3, #8]
 8019f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019f5e:	2b40      	cmp	r3, #64	@ 0x40
 8019f60:	d120      	bne.n	8019fa4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d017      	beq.n	8019f9c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f72:	4a15      	ldr	r2, [pc, #84]	@ (8019fc8 <HAL_UART_IRQHandler+0x274>)
 8019f74:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	f7f7 fd25 	bl	80119cc <HAL_DMA_Abort_IT>
 8019f82:	4603      	mov	r3, r0
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d019      	beq.n	8019fbc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f90:	687a      	ldr	r2, [r7, #4]
 8019f92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8019f96:	4610      	mov	r0, r2
 8019f98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019f9a:	e00f      	b.n	8019fbc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8019f9c:	6878      	ldr	r0, [r7, #4]
 8019f9e:	f000 f9d1 	bl	801a344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019fa2:	e00b      	b.n	8019fbc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019fa4:	6878      	ldr	r0, [r7, #4]
 8019fa6:	f000 f9cd 	bl	801a344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019faa:	e007      	b.n	8019fbc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8019fac:	6878      	ldr	r0, [r7, #4]
 8019fae:	f000 f9c9 	bl	801a344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	2200      	movs	r2, #0
 8019fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8019fba:	e1ae      	b.n	801a31a <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019fbc:	bf00      	nop
    return;
 8019fbe:	e1ac      	b.n	801a31a <HAL_UART_IRQHandler+0x5c6>
 8019fc0:	10000001 	.word	0x10000001
 8019fc4:	04000120 	.word	0x04000120
 8019fc8:	0801add1 	.word	0x0801add1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019fd0:	2b01      	cmp	r3, #1
 8019fd2:	f040 8142 	bne.w	801a25a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8019fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019fda:	f003 0310 	and.w	r3, r3, #16
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	f000 813b 	beq.w	801a25a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8019fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019fe8:	f003 0310 	and.w	r3, r3, #16
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	f000 8134 	beq.w	801a25a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	2210      	movs	r2, #16
 8019ff8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	689b      	ldr	r3, [r3, #8]
 801a000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a004:	2b40      	cmp	r3, #64	@ 0x40
 801a006:	f040 80aa 	bne.w	801a15e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a014:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 801a018:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	f000 8084 	beq.w	801a12a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a028:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 801a02c:	429a      	cmp	r2, r3
 801a02e:	d27c      	bcs.n	801a12a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 801a036:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a042:	2b81      	cmp	r3, #129	@ 0x81
 801a044:	d060      	beq.n	801a108 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a04c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a04e:	e853 3f00 	ldrex	r3, [r3]
 801a052:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a054:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a056:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a05a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	461a      	mov	r2, r3
 801a064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a06c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a06e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a070:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a074:	e841 2300 	strex	r3, r2, [r1]
 801a078:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a07a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d1e2      	bne.n	801a046 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	3308      	adds	r3, #8
 801a086:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a088:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a08a:	e853 3f00 	ldrex	r3, [r3]
 801a08e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a092:	f023 0301 	bic.w	r3, r3, #1
 801a096:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	3308      	adds	r3, #8
 801a0a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a0a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a0a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a0aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a0ac:	e841 2300 	strex	r3, r2, [r1]
 801a0b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a0b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d1e3      	bne.n	801a080 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	2220      	movs	r2, #32
 801a0bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a0ce:	e853 3f00 	ldrex	r3, [r3]
 801a0d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a0d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0d6:	f023 0310 	bic.w	r3, r3, #16
 801a0da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a0e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a0ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a0ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a0f0:	e841 2300 	strex	r3, r2, [r1]
 801a0f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a0f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d1e4      	bne.n	801a0c6 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a102:	4618      	mov	r0, r3
 801a104:	f7f7 fbe6 	bl	80118d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	2202      	movs	r2, #2
 801a10c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	1ad3      	subs	r3, r2, r3
 801a11e:	b29b      	uxth	r3, r3
 801a120:	4619      	mov	r1, r3
 801a122:	6878      	ldr	r0, [r7, #4]
 801a124:	f000 f918 	bl	801a358 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801a128:	e0f9      	b.n	801a31e <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a130:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 801a134:	429a      	cmp	r2, r3
 801a136:	f040 80f2 	bne.w	801a31e <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a142:	2b81      	cmp	r3, #129	@ 0x81
 801a144:	f040 80eb 	bne.w	801a31e <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	2202      	movs	r2, #2
 801a14c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a154:	4619      	mov	r1, r3
 801a156:	6878      	ldr	r0, [r7, #4]
 801a158:	f000 f8fe 	bl	801a358 <HAL_UARTEx_RxEventCallback>
      return;
 801a15c:	e0df      	b.n	801a31e <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a16a:	b29b      	uxth	r3, r3
 801a16c:	1ad3      	subs	r3, r2, r3
 801a16e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a178:	b29b      	uxth	r3, r3
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	f000 80d1 	beq.w	801a322 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 801a180:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 801a184:	2b00      	cmp	r3, #0
 801a186:	f000 80cc 	beq.w	801a322 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a192:	e853 3f00 	ldrex	r3, [r3]
 801a196:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a19a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a19e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	461a      	mov	r2, r3
 801a1a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a1ac:	647b      	str	r3, [r7, #68]	@ 0x44
 801a1ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a1b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a1b4:	e841 2300 	strex	r3, r2, [r1]
 801a1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d1e4      	bne.n	801a18a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	3308      	adds	r3, #8
 801a1c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1ca:	e853 3f00 	ldrex	r3, [r3]
 801a1ce:	623b      	str	r3, [r7, #32]
   return(result);
 801a1d0:	6a3b      	ldr	r3, [r7, #32]
 801a1d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a1d6:	f023 0301 	bic.w	r3, r3, #1
 801a1da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	3308      	adds	r3, #8
 801a1e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a1e8:	633a      	str	r2, [r7, #48]	@ 0x30
 801a1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a1f0:	e841 2300 	strex	r3, r2, [r1]
 801a1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d1e1      	bne.n	801a1c0 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	2220      	movs	r2, #32
 801a200:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2200      	movs	r2, #0
 801a208:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	2200      	movs	r2, #0
 801a20e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a216:	693b      	ldr	r3, [r7, #16]
 801a218:	e853 3f00 	ldrex	r3, [r3]
 801a21c:	60fb      	str	r3, [r7, #12]
   return(result);
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	f023 0310 	bic.w	r3, r3, #16
 801a224:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	461a      	mov	r2, r3
 801a22e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a232:	61fb      	str	r3, [r7, #28]
 801a234:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a236:	69b9      	ldr	r1, [r7, #24]
 801a238:	69fa      	ldr	r2, [r7, #28]
 801a23a:	e841 2300 	strex	r3, r2, [r1]
 801a23e:	617b      	str	r3, [r7, #20]
   return(result);
 801a240:	697b      	ldr	r3, [r7, #20]
 801a242:	2b00      	cmp	r3, #0
 801a244:	d1e4      	bne.n	801a210 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	2202      	movs	r2, #2
 801a24a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801a24c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 801a250:	4619      	mov	r1, r3
 801a252:	6878      	ldr	r0, [r7, #4]
 801a254:	f000 f880 	bl	801a358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a258:	e063      	b.n	801a322 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801a25a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a25e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801a262:	2b00      	cmp	r3, #0
 801a264:	d00e      	beq.n	801a284 <HAL_UART_IRQHandler+0x530>
 801a266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a26a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d008      	beq.n	801a284 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801a27a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801a27c:	6878      	ldr	r0, [r7, #4]
 801a27e:	f001 fcc3 	bl	801bc08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a282:	e051      	b.n	801a328 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801a284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d014      	beq.n	801a2ba <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801a290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801a294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d105      	bne.n	801a2a8 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801a29c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a2a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d008      	beq.n	801a2ba <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d03a      	beq.n	801a326 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a2b4:	6878      	ldr	r0, [r7, #4]
 801a2b6:	4798      	blx	r3
    }
    return;
 801a2b8:	e035      	b.n	801a326 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801a2ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a2be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d009      	beq.n	801a2da <HAL_UART_IRQHandler+0x586>
 801a2c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801a2ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d003      	beq.n	801a2da <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	f000 ff34 	bl	801b140 <UART_EndTransmit_IT>
    return;
 801a2d8:	e026      	b.n	801a328 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801a2da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a2de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d009      	beq.n	801a2fa <HAL_UART_IRQHandler+0x5a6>
 801a2e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801a2ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d003      	beq.n	801a2fa <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801a2f2:	6878      	ldr	r0, [r7, #4]
 801a2f4:	f001 fc9c 	bl	801bc30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a2f8:	e016      	b.n	801a328 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801a2fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a2fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801a302:	2b00      	cmp	r3, #0
 801a304:	d010      	beq.n	801a328 <HAL_UART_IRQHandler+0x5d4>
 801a306:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	da0c      	bge.n	801a328 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801a30e:	6878      	ldr	r0, [r7, #4]
 801a310:	f001 fc84 	bl	801bc1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a314:	e008      	b.n	801a328 <HAL_UART_IRQHandler+0x5d4>
      return;
 801a316:	bf00      	nop
 801a318:	e006      	b.n	801a328 <HAL_UART_IRQHandler+0x5d4>
    return;
 801a31a:	bf00      	nop
 801a31c:	e004      	b.n	801a328 <HAL_UART_IRQHandler+0x5d4>
      return;
 801a31e:	bf00      	nop
 801a320:	e002      	b.n	801a328 <HAL_UART_IRQHandler+0x5d4>
      return;
 801a322:	bf00      	nop
 801a324:	e000      	b.n	801a328 <HAL_UART_IRQHandler+0x5d4>
    return;
 801a326:	bf00      	nop
  }
}
 801a328:	37b8      	adds	r7, #184	@ 0xb8
 801a32a:	46bd      	mov	sp, r7
 801a32c:	bd80      	pop	{r7, pc}
 801a32e:	bf00      	nop

0801a330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a330:	b480      	push	{r7}
 801a332:	b083      	sub	sp, #12
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801a338:	bf00      	nop
 801a33a:	370c      	adds	r7, #12
 801a33c:	46bd      	mov	sp, r7
 801a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a342:	4770      	bx	lr

0801a344 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801a344:	b480      	push	{r7}
 801a346:	b083      	sub	sp, #12
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801a34c:	bf00      	nop
 801a34e:	370c      	adds	r7, #12
 801a350:	46bd      	mov	sp, r7
 801a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a356:	4770      	bx	lr

0801a358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a358:	b480      	push	{r7}
 801a35a:	b083      	sub	sp, #12
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	6078      	str	r0, [r7, #4]
 801a360:	460b      	mov	r3, r1
 801a362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a364:	bf00      	nop
 801a366:	370c      	adds	r7, #12
 801a368:	46bd      	mov	sp, r7
 801a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a36e:	4770      	bx	lr

0801a370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a374:	b094      	sub	sp, #80	@ 0x50
 801a376:	af00      	add	r7, sp, #0
 801a378:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a37a:	2300      	movs	r3, #0
 801a37c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a382:	681a      	ldr	r2, [r3, #0]
 801a384:	4b78      	ldr	r3, [pc, #480]	@ (801a568 <UART_SetConfig+0x1f8>)
 801a386:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a38a:	689a      	ldr	r2, [r3, #8]
 801a38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a38e:	691b      	ldr	r3, [r3, #16]
 801a390:	431a      	orrs	r2, r3
 801a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a394:	695b      	ldr	r3, [r3, #20]
 801a396:	431a      	orrs	r2, r3
 801a398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a39a:	69db      	ldr	r3, [r3, #28]
 801a39c:	4313      	orrs	r3, r2
 801a39e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	4971      	ldr	r1, [pc, #452]	@ (801a56c <UART_SetConfig+0x1fc>)
 801a3a8:	4019      	ands	r1, r3
 801a3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ac:	681a      	ldr	r2, [r3, #0]
 801a3ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a3b0:	430b      	orrs	r3, r1
 801a3b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	685b      	ldr	r3, [r3, #4]
 801a3ba:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801a3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3c0:	68d9      	ldr	r1, [r3, #12]
 801a3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3c4:	681a      	ldr	r2, [r3, #0]
 801a3c6:	ea40 0301 	orr.w	r3, r0, r1
 801a3ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ce:	699b      	ldr	r3, [r3, #24]
 801a3d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3d4:	681a      	ldr	r2, [r3, #0]
 801a3d6:	4b64      	ldr	r3, [pc, #400]	@ (801a568 <UART_SetConfig+0x1f8>)
 801a3d8:	429a      	cmp	r2, r3
 801a3da:	d009      	beq.n	801a3f0 <UART_SetConfig+0x80>
 801a3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3de:	681a      	ldr	r2, [r3, #0]
 801a3e0:	4b63      	ldr	r3, [pc, #396]	@ (801a570 <UART_SetConfig+0x200>)
 801a3e2:	429a      	cmp	r2, r3
 801a3e4:	d004      	beq.n	801a3f0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3e8:	6a1a      	ldr	r2, [r3, #32]
 801a3ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a3ec:	4313      	orrs	r3, r2
 801a3ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	689b      	ldr	r3, [r3, #8]
 801a3f6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801a3fa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801a3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a400:	681a      	ldr	r2, [r3, #0]
 801a402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a404:	430b      	orrs	r3, r1
 801a406:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801a408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a40e:	f023 000f 	bic.w	r0, r3, #15
 801a412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a414:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801a416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a418:	681a      	ldr	r2, [r3, #0]
 801a41a:	ea40 0301 	orr.w	r3, r0, r1
 801a41e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a422:	681a      	ldr	r2, [r3, #0]
 801a424:	4b53      	ldr	r3, [pc, #332]	@ (801a574 <UART_SetConfig+0x204>)
 801a426:	429a      	cmp	r2, r3
 801a428:	d102      	bne.n	801a430 <UART_SetConfig+0xc0>
 801a42a:	2301      	movs	r3, #1
 801a42c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a42e:	e066      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a432:	681a      	ldr	r2, [r3, #0]
 801a434:	4b50      	ldr	r3, [pc, #320]	@ (801a578 <UART_SetConfig+0x208>)
 801a436:	429a      	cmp	r2, r3
 801a438:	d102      	bne.n	801a440 <UART_SetConfig+0xd0>
 801a43a:	2302      	movs	r3, #2
 801a43c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a43e:	e05e      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a442:	681a      	ldr	r2, [r3, #0]
 801a444:	4b4d      	ldr	r3, [pc, #308]	@ (801a57c <UART_SetConfig+0x20c>)
 801a446:	429a      	cmp	r2, r3
 801a448:	d102      	bne.n	801a450 <UART_SetConfig+0xe0>
 801a44a:	2304      	movs	r3, #4
 801a44c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a44e:	e056      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a452:	681a      	ldr	r2, [r3, #0]
 801a454:	4b4a      	ldr	r3, [pc, #296]	@ (801a580 <UART_SetConfig+0x210>)
 801a456:	429a      	cmp	r2, r3
 801a458:	d102      	bne.n	801a460 <UART_SetConfig+0xf0>
 801a45a:	2308      	movs	r3, #8
 801a45c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a45e:	e04e      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a462:	681a      	ldr	r2, [r3, #0]
 801a464:	4b47      	ldr	r3, [pc, #284]	@ (801a584 <UART_SetConfig+0x214>)
 801a466:	429a      	cmp	r2, r3
 801a468:	d102      	bne.n	801a470 <UART_SetConfig+0x100>
 801a46a:	2310      	movs	r3, #16
 801a46c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a46e:	e046      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a472:	681a      	ldr	r2, [r3, #0]
 801a474:	4b44      	ldr	r3, [pc, #272]	@ (801a588 <UART_SetConfig+0x218>)
 801a476:	429a      	cmp	r2, r3
 801a478:	d102      	bne.n	801a480 <UART_SetConfig+0x110>
 801a47a:	2320      	movs	r3, #32
 801a47c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a47e:	e03e      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a482:	681a      	ldr	r2, [r3, #0]
 801a484:	4b41      	ldr	r3, [pc, #260]	@ (801a58c <UART_SetConfig+0x21c>)
 801a486:	429a      	cmp	r2, r3
 801a488:	d102      	bne.n	801a490 <UART_SetConfig+0x120>
 801a48a:	2340      	movs	r3, #64	@ 0x40
 801a48c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a48e:	e036      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a492:	681a      	ldr	r2, [r3, #0]
 801a494:	4b3e      	ldr	r3, [pc, #248]	@ (801a590 <UART_SetConfig+0x220>)
 801a496:	429a      	cmp	r2, r3
 801a498:	d102      	bne.n	801a4a0 <UART_SetConfig+0x130>
 801a49a:	2380      	movs	r3, #128	@ 0x80
 801a49c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a49e:	e02e      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a2:	681a      	ldr	r2, [r3, #0]
 801a4a4:	4b3b      	ldr	r3, [pc, #236]	@ (801a594 <UART_SetConfig+0x224>)
 801a4a6:	429a      	cmp	r2, r3
 801a4a8:	d103      	bne.n	801a4b2 <UART_SetConfig+0x142>
 801a4aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a4ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a4b0:	e025      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4b4:	681a      	ldr	r2, [r3, #0]
 801a4b6:	4b38      	ldr	r3, [pc, #224]	@ (801a598 <UART_SetConfig+0x228>)
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	d103      	bne.n	801a4c4 <UART_SetConfig+0x154>
 801a4bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a4c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a4c2:	e01c      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4c6:	681a      	ldr	r2, [r3, #0]
 801a4c8:	4b34      	ldr	r3, [pc, #208]	@ (801a59c <UART_SetConfig+0x22c>)
 801a4ca:	429a      	cmp	r2, r3
 801a4cc:	d103      	bne.n	801a4d6 <UART_SetConfig+0x166>
 801a4ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a4d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a4d4:	e013      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4d8:	681a      	ldr	r2, [r3, #0]
 801a4da:	4b31      	ldr	r3, [pc, #196]	@ (801a5a0 <UART_SetConfig+0x230>)
 801a4dc:	429a      	cmp	r2, r3
 801a4de:	d103      	bne.n	801a4e8 <UART_SetConfig+0x178>
 801a4e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a4e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a4e6:	e00a      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ea:	681a      	ldr	r2, [r3, #0]
 801a4ec:	4b1e      	ldr	r3, [pc, #120]	@ (801a568 <UART_SetConfig+0x1f8>)
 801a4ee:	429a      	cmp	r2, r3
 801a4f0:	d103      	bne.n	801a4fa <UART_SetConfig+0x18a>
 801a4f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a4f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a4f8:	e001      	b.n	801a4fe <UART_SetConfig+0x18e>
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a500:	681a      	ldr	r2, [r3, #0]
 801a502:	4b19      	ldr	r3, [pc, #100]	@ (801a568 <UART_SetConfig+0x1f8>)
 801a504:	429a      	cmp	r2, r3
 801a506:	d005      	beq.n	801a514 <UART_SetConfig+0x1a4>
 801a508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a50a:	681a      	ldr	r2, [r3, #0]
 801a50c:	4b18      	ldr	r3, [pc, #96]	@ (801a570 <UART_SetConfig+0x200>)
 801a50e:	429a      	cmp	r2, r3
 801a510:	f040 8094 	bne.w	801a63c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801a514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a516:	2200      	movs	r2, #0
 801a518:	623b      	str	r3, [r7, #32]
 801a51a:	627a      	str	r2, [r7, #36]	@ 0x24
 801a51c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a520:	f7fb fe92 	bl	8016248 <HAL_RCCEx_GetPeriphCLKFreq>
 801a524:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801a526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a528:	2b00      	cmp	r3, #0
 801a52a:	f000 80f7 	beq.w	801a71c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801a52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a532:	4a1c      	ldr	r2, [pc, #112]	@ (801a5a4 <UART_SetConfig+0x234>)
 801a534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a538:	461a      	mov	r2, r3
 801a53a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a53c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a540:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a544:	685a      	ldr	r2, [r3, #4]
 801a546:	4613      	mov	r3, r2
 801a548:	005b      	lsls	r3, r3, #1
 801a54a:	4413      	add	r3, r2
 801a54c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a54e:	429a      	cmp	r2, r3
 801a550:	d305      	bcc.n	801a55e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801a552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a554:	685b      	ldr	r3, [r3, #4]
 801a556:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a558:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a55a:	429a      	cmp	r2, r3
 801a55c:	d924      	bls.n	801a5a8 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 801a55e:	2301      	movs	r3, #1
 801a560:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801a564:	e069      	b.n	801a63a <UART_SetConfig+0x2ca>
 801a566:	bf00      	nop
 801a568:	44002400 	.word	0x44002400
 801a56c:	cfff69f3 	.word	0xcfff69f3
 801a570:	54002400 	.word	0x54002400
 801a574:	40013800 	.word	0x40013800
 801a578:	40004400 	.word	0x40004400
 801a57c:	40004800 	.word	0x40004800
 801a580:	40004c00 	.word	0x40004c00
 801a584:	40005000 	.word	0x40005000
 801a588:	40006400 	.word	0x40006400
 801a58c:	40007800 	.word	0x40007800
 801a590:	40007c00 	.word	0x40007c00
 801a594:	40008000 	.word	0x40008000
 801a598:	40006800 	.word	0x40006800
 801a59c:	40006c00 	.word	0x40006c00
 801a5a0:	40008400 	.word	0x40008400
 801a5a4:	0801f398 	.word	0x0801f398
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	61bb      	str	r3, [r7, #24]
 801a5ae:	61fa      	str	r2, [r7, #28]
 801a5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5b4:	4a64      	ldr	r2, [pc, #400]	@ (801a748 <UART_SetConfig+0x3d8>)
 801a5b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a5ba:	b29b      	uxth	r3, r3
 801a5bc:	2200      	movs	r2, #0
 801a5be:	613b      	str	r3, [r7, #16]
 801a5c0:	617a      	str	r2, [r7, #20]
 801a5c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a5c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a5ca:	f7f2 fb4d 	bl	800cc68 <__aeabi_uldivmod>
 801a5ce:	4602      	mov	r2, r0
 801a5d0:	460b      	mov	r3, r1
 801a5d2:	4610      	mov	r0, r2
 801a5d4:	4619      	mov	r1, r3
 801a5d6:	f04f 0200 	mov.w	r2, #0
 801a5da:	f04f 0300 	mov.w	r3, #0
 801a5de:	020b      	lsls	r3, r1, #8
 801a5e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801a5e4:	0202      	lsls	r2, r0, #8
 801a5e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a5e8:	6849      	ldr	r1, [r1, #4]
 801a5ea:	0849      	lsrs	r1, r1, #1
 801a5ec:	2000      	movs	r0, #0
 801a5ee:	460c      	mov	r4, r1
 801a5f0:	4605      	mov	r5, r0
 801a5f2:	eb12 0804 	adds.w	r8, r2, r4
 801a5f6:	eb43 0905 	adc.w	r9, r3, r5
 801a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5fc:	685b      	ldr	r3, [r3, #4]
 801a5fe:	2200      	movs	r2, #0
 801a600:	60bb      	str	r3, [r7, #8]
 801a602:	60fa      	str	r2, [r7, #12]
 801a604:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a608:	4640      	mov	r0, r8
 801a60a:	4649      	mov	r1, r9
 801a60c:	f7f2 fb2c 	bl	800cc68 <__aeabi_uldivmod>
 801a610:	4602      	mov	r2, r0
 801a612:	460b      	mov	r3, r1
 801a614:	4613      	mov	r3, r2
 801a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a61a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a61e:	d308      	bcc.n	801a632 <UART_SetConfig+0x2c2>
 801a620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a626:	d204      	bcs.n	801a632 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 801a628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a62e:	60da      	str	r2, [r3, #12]
 801a630:	e003      	b.n	801a63a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 801a632:	2301      	movs	r3, #1
 801a634:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 801a638:	e070      	b.n	801a71c <UART_SetConfig+0x3ac>
 801a63a:	e06f      	b.n	801a71c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a63e:	69db      	ldr	r3, [r3, #28]
 801a640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a644:	d13c      	bne.n	801a6c0 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801a646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a648:	2200      	movs	r2, #0
 801a64a:	603b      	str	r3, [r7, #0]
 801a64c:	607a      	str	r2, [r7, #4]
 801a64e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a652:	f7fb fdf9 	bl	8016248 <HAL_RCCEx_GetPeriphCLKFreq>
 801a656:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d05e      	beq.n	801a71c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a662:	4a39      	ldr	r2, [pc, #228]	@ (801a748 <UART_SetConfig+0x3d8>)
 801a664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a668:	461a      	mov	r2, r3
 801a66a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a66c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a670:	005a      	lsls	r2, r3, #1
 801a672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a674:	685b      	ldr	r3, [r3, #4]
 801a676:	085b      	lsrs	r3, r3, #1
 801a678:	441a      	add	r2, r3
 801a67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a67c:	685b      	ldr	r3, [r3, #4]
 801a67e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a682:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a686:	2b0f      	cmp	r3, #15
 801a688:	d916      	bls.n	801a6b8 <UART_SetConfig+0x348>
 801a68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a68c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a690:	d212      	bcs.n	801a6b8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a694:	b29b      	uxth	r3, r3
 801a696:	f023 030f 	bic.w	r3, r3, #15
 801a69a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a69e:	085b      	lsrs	r3, r3, #1
 801a6a0:	b29b      	uxth	r3, r3
 801a6a2:	f003 0307 	and.w	r3, r3, #7
 801a6a6:	b29a      	uxth	r2, r3
 801a6a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a6aa:	4313      	orrs	r3, r2
 801a6ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 801a6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a6b4:	60da      	str	r2, [r3, #12]
 801a6b6:	e031      	b.n	801a71c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801a6b8:	2301      	movs	r3, #1
 801a6ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801a6be:	e02d      	b.n	801a71c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801a6c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	469a      	mov	sl, r3
 801a6c6:	4693      	mov	fp, r2
 801a6c8:	4650      	mov	r0, sl
 801a6ca:	4659      	mov	r1, fp
 801a6cc:	f7fb fdbc 	bl	8016248 <HAL_RCCEx_GetPeriphCLKFreq>
 801a6d0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801a6d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d021      	beq.n	801a71c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a6dc:	4a1a      	ldr	r2, [pc, #104]	@ (801a748 <UART_SetConfig+0x3d8>)
 801a6de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a6e2:	461a      	mov	r2, r3
 801a6e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a6e6:	fbb3 f2f2 	udiv	r2, r3, r2
 801a6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6ec:	685b      	ldr	r3, [r3, #4]
 801a6ee:	085b      	lsrs	r3, r3, #1
 801a6f0:	441a      	add	r2, r3
 801a6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6f4:	685b      	ldr	r3, [r3, #4]
 801a6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a6fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6fe:	2b0f      	cmp	r3, #15
 801a700:	d909      	bls.n	801a716 <UART_SetConfig+0x3a6>
 801a702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a708:	d205      	bcs.n	801a716 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a70a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a70c:	b29a      	uxth	r2, r3
 801a70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	60da      	str	r2, [r3, #12]
 801a714:	e002      	b.n	801a71c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801a716:	2301      	movs	r3, #1
 801a718:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a71e:	2201      	movs	r2, #1
 801a720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801a724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a726:	2201      	movs	r2, #1
 801a728:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a72e:	2200      	movs	r2, #0
 801a730:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801a732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a734:	2200      	movs	r2, #0
 801a736:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801a738:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801a73c:	4618      	mov	r0, r3
 801a73e:	3750      	adds	r7, #80	@ 0x50
 801a740:	46bd      	mov	sp, r7
 801a742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a746:	bf00      	nop
 801a748:	0801f398 	.word	0x0801f398

0801a74c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a74c:	b480      	push	{r7}
 801a74e:	b083      	sub	sp, #12
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a758:	f003 0308 	and.w	r3, r3, #8
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d00a      	beq.n	801a776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	685b      	ldr	r3, [r3, #4]
 801a766:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	430a      	orrs	r2, r1
 801a774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a77a:	f003 0301 	and.w	r3, r3, #1
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d00a      	beq.n	801a798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	685b      	ldr	r3, [r3, #4]
 801a788:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	430a      	orrs	r2, r1
 801a796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a79c:	f003 0302 	and.w	r3, r3, #2
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d00a      	beq.n	801a7ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	685b      	ldr	r3, [r3, #4]
 801a7aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	430a      	orrs	r2, r1
 801a7b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7be:	f003 0304 	and.w	r3, r3, #4
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d00a      	beq.n	801a7dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	685b      	ldr	r3, [r3, #4]
 801a7cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	430a      	orrs	r2, r1
 801a7da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7e0:	f003 0310 	and.w	r3, r3, #16
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d00a      	beq.n	801a7fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	689b      	ldr	r3, [r3, #8]
 801a7ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	430a      	orrs	r2, r1
 801a7fc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a802:	f003 0320 	and.w	r3, r3, #32
 801a806:	2b00      	cmp	r3, #0
 801a808:	d00a      	beq.n	801a820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	689b      	ldr	r3, [r3, #8]
 801a810:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	430a      	orrs	r2, r1
 801a81e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d01a      	beq.n	801a862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	685b      	ldr	r3, [r3, #4]
 801a832:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	430a      	orrs	r2, r1
 801a840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a846:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a84a:	d10a      	bne.n	801a862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	685b      	ldr	r3, [r3, #4]
 801a852:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	430a      	orrs	r2, r1
 801a860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d00a      	beq.n	801a884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	685b      	ldr	r3, [r3, #4]
 801a874:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	430a      	orrs	r2, r1
 801a882:	605a      	str	r2, [r3, #4]
  }
}
 801a884:	bf00      	nop
 801a886:	370c      	adds	r7, #12
 801a888:	46bd      	mov	sp, r7
 801a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a88e:	4770      	bx	lr

0801a890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b098      	sub	sp, #96	@ 0x60
 801a894:	af02      	add	r7, sp, #8
 801a896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	2200      	movs	r2, #0
 801a89c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a8a0:	f7f6 fe58 	bl	8011554 <HAL_GetTick>
 801a8a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	f003 0308 	and.w	r3, r3, #8
 801a8b0:	2b08      	cmp	r3, #8
 801a8b2:	d12f      	bne.n	801a914 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a8b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a8b8:	9300      	str	r3, [sp, #0]
 801a8ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a8bc:	2200      	movs	r2, #0
 801a8be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801a8c2:	6878      	ldr	r0, [r7, #4]
 801a8c4:	f000 f88e 	bl	801a9e4 <UART_WaitOnFlagUntilTimeout>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d022      	beq.n	801a914 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8d6:	e853 3f00 	ldrex	r3, [r3]
 801a8da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a8e2:	653b      	str	r3, [r7, #80]	@ 0x50
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	461a      	mov	r2, r3
 801a8ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a8ec:	647b      	str	r3, [r7, #68]	@ 0x44
 801a8ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a8f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a8f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a8f4:	e841 2300 	strex	r3, r2, [r1]
 801a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d1e6      	bne.n	801a8ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	2220      	movs	r2, #32
 801a904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	2200      	movs	r2, #0
 801a90c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a910:	2303      	movs	r3, #3
 801a912:	e063      	b.n	801a9dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	f003 0304 	and.w	r3, r3, #4
 801a91e:	2b04      	cmp	r3, #4
 801a920:	d149      	bne.n	801a9b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a922:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a926:	9300      	str	r3, [sp, #0]
 801a928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a92a:	2200      	movs	r2, #0
 801a92c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801a930:	6878      	ldr	r0, [r7, #4]
 801a932:	f000 f857 	bl	801a9e4 <UART_WaitOnFlagUntilTimeout>
 801a936:	4603      	mov	r3, r0
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d03c      	beq.n	801a9b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a944:	e853 3f00 	ldrex	r3, [r3]
 801a948:	623b      	str	r3, [r7, #32]
   return(result);
 801a94a:	6a3b      	ldr	r3, [r7, #32]
 801a94c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	461a      	mov	r2, r3
 801a958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a95a:	633b      	str	r3, [r7, #48]	@ 0x30
 801a95c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a95e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a962:	e841 2300 	strex	r3, r2, [r1]
 801a966:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d1e6      	bne.n	801a93c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	3308      	adds	r3, #8
 801a974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a976:	693b      	ldr	r3, [r7, #16]
 801a978:	e853 3f00 	ldrex	r3, [r3]
 801a97c:	60fb      	str	r3, [r7, #12]
   return(result);
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	f023 0301 	bic.w	r3, r3, #1
 801a984:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	3308      	adds	r3, #8
 801a98c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a98e:	61fa      	str	r2, [r7, #28]
 801a990:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a992:	69b9      	ldr	r1, [r7, #24]
 801a994:	69fa      	ldr	r2, [r7, #28]
 801a996:	e841 2300 	strex	r3, r2, [r1]
 801a99a:	617b      	str	r3, [r7, #20]
   return(result);
 801a99c:	697b      	ldr	r3, [r7, #20]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d1e5      	bne.n	801a96e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	2220      	movs	r2, #32
 801a9a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a9b2:	2303      	movs	r3, #3
 801a9b4:	e012      	b.n	801a9dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	2220      	movs	r2, #32
 801a9ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	2220      	movs	r2, #32
 801a9c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a9da:	2300      	movs	r3, #0
}
 801a9dc:	4618      	mov	r0, r3
 801a9de:	3758      	adds	r7, #88	@ 0x58
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}

0801a9e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b084      	sub	sp, #16
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	60f8      	str	r0, [r7, #12]
 801a9ec:	60b9      	str	r1, [r7, #8]
 801a9ee:	603b      	str	r3, [r7, #0]
 801a9f0:	4613      	mov	r3, r2
 801a9f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a9f4:	e04f      	b.n	801aa96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a9f6:	69bb      	ldr	r3, [r7, #24]
 801a9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a9fc:	d04b      	beq.n	801aa96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a9fe:	f7f6 fda9 	bl	8011554 <HAL_GetTick>
 801aa02:	4602      	mov	r2, r0
 801aa04:	683b      	ldr	r3, [r7, #0]
 801aa06:	1ad3      	subs	r3, r2, r3
 801aa08:	69ba      	ldr	r2, [r7, #24]
 801aa0a:	429a      	cmp	r2, r3
 801aa0c:	d302      	bcc.n	801aa14 <UART_WaitOnFlagUntilTimeout+0x30>
 801aa0e:	69bb      	ldr	r3, [r7, #24]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d101      	bne.n	801aa18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801aa14:	2303      	movs	r3, #3
 801aa16:	e04e      	b.n	801aab6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	f003 0304 	and.w	r3, r3, #4
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d037      	beq.n	801aa96 <UART_WaitOnFlagUntilTimeout+0xb2>
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	2b80      	cmp	r3, #128	@ 0x80
 801aa2a:	d034      	beq.n	801aa96 <UART_WaitOnFlagUntilTimeout+0xb2>
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	2b40      	cmp	r3, #64	@ 0x40
 801aa30:	d031      	beq.n	801aa96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	69db      	ldr	r3, [r3, #28]
 801aa38:	f003 0308 	and.w	r3, r3, #8
 801aa3c:	2b08      	cmp	r3, #8
 801aa3e:	d110      	bne.n	801aa62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	2208      	movs	r2, #8
 801aa46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801aa48:	68f8      	ldr	r0, [r7, #12]
 801aa4a:	f000 f95b 	bl	801ad04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	2208      	movs	r2, #8
 801aa52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	2200      	movs	r2, #0
 801aa5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801aa5e:	2301      	movs	r3, #1
 801aa60:	e029      	b.n	801aab6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	69db      	ldr	r3, [r3, #28]
 801aa68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801aa6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801aa70:	d111      	bne.n	801aa96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801aa7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801aa7c:	68f8      	ldr	r0, [r7, #12]
 801aa7e:	f000 f941 	bl	801ad04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	2220      	movs	r2, #32
 801aa86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	2200      	movs	r2, #0
 801aa8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801aa92:	2303      	movs	r3, #3
 801aa94:	e00f      	b.n	801aab6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	69da      	ldr	r2, [r3, #28]
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	4013      	ands	r3, r2
 801aaa0:	68ba      	ldr	r2, [r7, #8]
 801aaa2:	429a      	cmp	r2, r3
 801aaa4:	bf0c      	ite	eq
 801aaa6:	2301      	moveq	r3, #1
 801aaa8:	2300      	movne	r3, #0
 801aaaa:	b2db      	uxtb	r3, r3
 801aaac:	461a      	mov	r2, r3
 801aaae:	79fb      	ldrb	r3, [r7, #7]
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d0a0      	beq.n	801a9f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801aab4:	2300      	movs	r3, #0
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	3710      	adds	r7, #16
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bd80      	pop	{r7, pc}
	...

0801aac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801aac0:	b480      	push	{r7}
 801aac2:	b0a3      	sub	sp, #140	@ 0x8c
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	60f8      	str	r0, [r7, #12]
 801aac8:	60b9      	str	r1, [r7, #8]
 801aaca:	4613      	mov	r3, r2
 801aacc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	68ba      	ldr	r2, [r7, #8]
 801aad2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	88fa      	ldrh	r2, [r7, #6]
 801aad8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	88fa      	ldrh	r2, [r7, #6]
 801aae0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	2200      	movs	r2, #0
 801aae8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801aaea:	68fb      	ldr	r3, [r7, #12]
 801aaec:	689b      	ldr	r3, [r3, #8]
 801aaee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801aaf2:	d10e      	bne.n	801ab12 <UART_Start_Receive_IT+0x52>
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	691b      	ldr	r3, [r3, #16]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d105      	bne.n	801ab08 <UART_Start_Receive_IT+0x48>
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801ab02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801ab06:	e02d      	b.n	801ab64 <UART_Start_Receive_IT+0xa4>
 801ab08:	68fb      	ldr	r3, [r7, #12]
 801ab0a:	22ff      	movs	r2, #255	@ 0xff
 801ab0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801ab10:	e028      	b.n	801ab64 <UART_Start_Receive_IT+0xa4>
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	689b      	ldr	r3, [r3, #8]
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d10d      	bne.n	801ab36 <UART_Start_Receive_IT+0x76>
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	691b      	ldr	r3, [r3, #16]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d104      	bne.n	801ab2c <UART_Start_Receive_IT+0x6c>
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	22ff      	movs	r2, #255	@ 0xff
 801ab26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801ab2a:	e01b      	b.n	801ab64 <UART_Start_Receive_IT+0xa4>
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	227f      	movs	r2, #127	@ 0x7f
 801ab30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801ab34:	e016      	b.n	801ab64 <UART_Start_Receive_IT+0xa4>
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	689b      	ldr	r3, [r3, #8]
 801ab3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ab3e:	d10d      	bne.n	801ab5c <UART_Start_Receive_IT+0x9c>
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	691b      	ldr	r3, [r3, #16]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d104      	bne.n	801ab52 <UART_Start_Receive_IT+0x92>
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	227f      	movs	r2, #127	@ 0x7f
 801ab4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801ab50:	e008      	b.n	801ab64 <UART_Start_Receive_IT+0xa4>
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	223f      	movs	r2, #63	@ 0x3f
 801ab56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801ab5a:	e003      	b.n	801ab64 <UART_Start_Receive_IT+0xa4>
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	2200      	movs	r2, #0
 801ab60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	2200      	movs	r2, #0
 801ab68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	2222      	movs	r2, #34	@ 0x22
 801ab70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	3308      	adds	r3, #8
 801ab7a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ab7e:	e853 3f00 	ldrex	r3, [r3]
 801ab82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801ab84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ab86:	f043 0301 	orr.w	r3, r3, #1
 801ab8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	3308      	adds	r3, #8
 801ab94:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ab98:	673a      	str	r2, [r7, #112]	@ 0x70
 801ab9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab9c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801ab9e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801aba0:	e841 2300 	strex	r3, r2, [r1]
 801aba4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801aba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d1e3      	bne.n	801ab74 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801abb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801abb4:	d14f      	bne.n	801ac56 <UART_Start_Receive_IT+0x196>
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801abbc:	88fa      	ldrh	r2, [r7, #6]
 801abbe:	429a      	cmp	r2, r3
 801abc0:	d349      	bcc.n	801ac56 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	689b      	ldr	r3, [r3, #8]
 801abc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801abca:	d107      	bne.n	801abdc <UART_Start_Receive_IT+0x11c>
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	691b      	ldr	r3, [r3, #16]
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d103      	bne.n	801abdc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	4a47      	ldr	r2, [pc, #284]	@ (801acf4 <UART_Start_Receive_IT+0x234>)
 801abd8:	675a      	str	r2, [r3, #116]	@ 0x74
 801abda:	e002      	b.n	801abe2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	4a46      	ldr	r2, [pc, #280]	@ (801acf8 <UART_Start_Receive_IT+0x238>)
 801abe0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	691b      	ldr	r3, [r3, #16]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d01a      	beq.n	801ac20 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801abf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801abf2:	e853 3f00 	ldrex	r3, [r3]
 801abf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801abf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801abfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801abfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	461a      	mov	r2, r3
 801ac08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ac0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ac0e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ac10:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801ac12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801ac14:	e841 2300 	strex	r3, r2, [r1]
 801ac18:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801ac1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d1e4      	bne.n	801abea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	3308      	adds	r3, #8
 801ac26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ac28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ac2a:	e853 3f00 	ldrex	r3, [r3]
 801ac2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801ac30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801ac36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	3308      	adds	r3, #8
 801ac3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801ac40:	64ba      	str	r2, [r7, #72]	@ 0x48
 801ac42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ac44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801ac46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ac48:	e841 2300 	strex	r3, r2, [r1]
 801ac4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801ac4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d1e5      	bne.n	801ac20 <UART_Start_Receive_IT+0x160>
 801ac54:	e046      	b.n	801ace4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	689b      	ldr	r3, [r3, #8]
 801ac5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ac5e:	d107      	bne.n	801ac70 <UART_Start_Receive_IT+0x1b0>
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	691b      	ldr	r3, [r3, #16]
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d103      	bne.n	801ac70 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	4a24      	ldr	r2, [pc, #144]	@ (801acfc <UART_Start_Receive_IT+0x23c>)
 801ac6c:	675a      	str	r2, [r3, #116]	@ 0x74
 801ac6e:	e002      	b.n	801ac76 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	4a23      	ldr	r2, [pc, #140]	@ (801ad00 <UART_Start_Receive_IT+0x240>)
 801ac74:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	691b      	ldr	r3, [r3, #16]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d019      	beq.n	801acb2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ac84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac86:	e853 3f00 	ldrex	r3, [r3]
 801ac8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac8e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801ac92:	677b      	str	r3, [r7, #116]	@ 0x74
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	461a      	mov	r2, r3
 801ac9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ac9c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ac9e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aca0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801aca2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aca4:	e841 2300 	strex	r3, r2, [r1]
 801aca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801acaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acac:	2b00      	cmp	r3, #0
 801acae:	d1e6      	bne.n	801ac7e <UART_Start_Receive_IT+0x1be>
 801acb0:	e018      	b.n	801ace4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801acb8:	697b      	ldr	r3, [r7, #20]
 801acba:	e853 3f00 	ldrex	r3, [r3]
 801acbe:	613b      	str	r3, [r7, #16]
   return(result);
 801acc0:	693b      	ldr	r3, [r7, #16]
 801acc2:	f043 0320 	orr.w	r3, r3, #32
 801acc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	461a      	mov	r2, r3
 801acce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801acd0:	623b      	str	r3, [r7, #32]
 801acd2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801acd4:	69f9      	ldr	r1, [r7, #28]
 801acd6:	6a3a      	ldr	r2, [r7, #32]
 801acd8:	e841 2300 	strex	r3, r2, [r1]
 801acdc:	61bb      	str	r3, [r7, #24]
   return(result);
 801acde:	69bb      	ldr	r3, [r7, #24]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d1e6      	bne.n	801acb2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801ace4:	2300      	movs	r3, #0
}
 801ace6:	4618      	mov	r0, r3
 801ace8:	378c      	adds	r7, #140	@ 0x8c
 801acea:	46bd      	mov	sp, r7
 801acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf0:	4770      	bx	lr
 801acf2:	bf00      	nop
 801acf4:	0801b891 	.word	0x0801b891
 801acf8:	0801b521 	.word	0x0801b521
 801acfc:	0801b35d 	.word	0x0801b35d
 801ad00:	0801b199 	.word	0x0801b199

0801ad04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ad04:	b480      	push	{r7}
 801ad06:	b095      	sub	sp, #84	@ 0x54
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad14:	e853 3f00 	ldrex	r3, [r3]
 801ad18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801ad1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801ad20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	461a      	mov	r2, r3
 801ad28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ad2a:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801ad30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ad32:	e841 2300 	strex	r3, r2, [r1]
 801ad36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801ad38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d1e6      	bne.n	801ad0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	3308      	adds	r3, #8
 801ad44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad46:	6a3b      	ldr	r3, [r7, #32]
 801ad48:	e853 3f00 	ldrex	r3, [r3]
 801ad4c:	61fb      	str	r3, [r7, #28]
   return(result);
 801ad4e:	69fb      	ldr	r3, [r7, #28]
 801ad50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ad54:	f023 0301 	bic.w	r3, r3, #1
 801ad58:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	3308      	adds	r3, #8
 801ad60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ad62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ad64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ad68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad6a:	e841 2300 	strex	r3, r2, [r1]
 801ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d1e3      	bne.n	801ad3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad7a:	2b01      	cmp	r3, #1
 801ad7c:	d118      	bne.n	801adb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	e853 3f00 	ldrex	r3, [r3]
 801ad8a:	60bb      	str	r3, [r7, #8]
   return(result);
 801ad8c:	68bb      	ldr	r3, [r7, #8]
 801ad8e:	f023 0310 	bic.w	r3, r3, #16
 801ad92:	647b      	str	r3, [r7, #68]	@ 0x44
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	461a      	mov	r2, r3
 801ad9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ad9c:	61bb      	str	r3, [r7, #24]
 801ad9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ada0:	6979      	ldr	r1, [r7, #20]
 801ada2:	69ba      	ldr	r2, [r7, #24]
 801ada4:	e841 2300 	strex	r3, r2, [r1]
 801ada8:	613b      	str	r3, [r7, #16]
   return(result);
 801adaa:	693b      	ldr	r3, [r7, #16]
 801adac:	2b00      	cmp	r3, #0
 801adae:	d1e6      	bne.n	801ad7e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	2220      	movs	r2, #32
 801adb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	2200      	movs	r2, #0
 801adbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	2200      	movs	r2, #0
 801adc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801adc4:	bf00      	nop
 801adc6:	3754      	adds	r7, #84	@ 0x54
 801adc8:	46bd      	mov	sp, r7
 801adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adce:	4770      	bx	lr

0801add0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801add0:	b580      	push	{r7, lr}
 801add2:	b084      	sub	sp, #16
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801addc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	2200      	movs	r2, #0
 801ade2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	2200      	movs	r2, #0
 801adea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801adee:	68f8      	ldr	r0, [r7, #12]
 801adf0:	f7ff faa8 	bl	801a344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801adf4:	bf00      	nop
 801adf6:	3710      	adds	r7, #16
 801adf8:	46bd      	mov	sp, r7
 801adfa:	bd80      	pop	{r7, pc}

0801adfc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801adfc:	b480      	push	{r7}
 801adfe:	b08f      	sub	sp, #60	@ 0x3c
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ae0a:	2b21      	cmp	r3, #33	@ 0x21
 801ae0c:	d14c      	bne.n	801aea8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801ae14:	b29b      	uxth	r3, r3
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d132      	bne.n	801ae80 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ae20:	6a3b      	ldr	r3, [r7, #32]
 801ae22:	e853 3f00 	ldrex	r3, [r3]
 801ae26:	61fb      	str	r3, [r7, #28]
   return(result);
 801ae28:	69fb      	ldr	r3, [r7, #28]
 801ae2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ae2e:	637b      	str	r3, [r7, #52]	@ 0x34
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	461a      	mov	r2, r3
 801ae36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ae38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ae3a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ae3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae40:	e841 2300 	strex	r3, r2, [r1]
 801ae44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801ae46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d1e6      	bne.n	801ae1a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	e853 3f00 	ldrex	r3, [r3]
 801ae58:	60bb      	str	r3, [r7, #8]
   return(result);
 801ae5a:	68bb      	ldr	r3, [r7, #8]
 801ae5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae60:	633b      	str	r3, [r7, #48]	@ 0x30
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	461a      	mov	r2, r3
 801ae68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae6a:	61bb      	str	r3, [r7, #24]
 801ae6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae6e:	6979      	ldr	r1, [r7, #20]
 801ae70:	69ba      	ldr	r2, [r7, #24]
 801ae72:	e841 2300 	strex	r3, r2, [r1]
 801ae76:	613b      	str	r3, [r7, #16]
   return(result);
 801ae78:	693b      	ldr	r3, [r7, #16]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d1e6      	bne.n	801ae4c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801ae7e:	e013      	b.n	801aea8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ae84:	781a      	ldrb	r2, [r3, #0]
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ae90:	1c5a      	adds	r2, r3, #1
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801ae9c:	b29b      	uxth	r3, r3
 801ae9e:	3b01      	subs	r3, #1
 801aea0:	b29a      	uxth	r2, r3
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801aea8:	bf00      	nop
 801aeaa:	373c      	adds	r7, #60	@ 0x3c
 801aeac:	46bd      	mov	sp, r7
 801aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb2:	4770      	bx	lr

0801aeb4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801aeb4:	b480      	push	{r7}
 801aeb6:	b091      	sub	sp, #68	@ 0x44
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801aec2:	2b21      	cmp	r3, #33	@ 0x21
 801aec4:	d151      	bne.n	801af6a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801aecc:	b29b      	uxth	r3, r3
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d132      	bne.n	801af38 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeda:	e853 3f00 	ldrex	r3, [r3]
 801aede:	623b      	str	r3, [r7, #32]
   return(result);
 801aee0:	6a3b      	ldr	r3, [r7, #32]
 801aee2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801aee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	461a      	mov	r2, r3
 801aeee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aef0:	633b      	str	r3, [r7, #48]	@ 0x30
 801aef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aef4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aef8:	e841 2300 	strex	r3, r2, [r1]
 801aefc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801aefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af00:	2b00      	cmp	r3, #0
 801af02:	d1e6      	bne.n	801aed2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	681b      	ldr	r3, [r3, #0]
 801af08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801af0a:	693b      	ldr	r3, [r7, #16]
 801af0c:	e853 3f00 	ldrex	r3, [r3]
 801af10:	60fb      	str	r3, [r7, #12]
   return(result);
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801af18:	637b      	str	r3, [r7, #52]	@ 0x34
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	461a      	mov	r2, r3
 801af20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af22:	61fb      	str	r3, [r7, #28]
 801af24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801af26:	69b9      	ldr	r1, [r7, #24]
 801af28:	69fa      	ldr	r2, [r7, #28]
 801af2a:	e841 2300 	strex	r3, r2, [r1]
 801af2e:	617b      	str	r3, [r7, #20]
   return(result);
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	2b00      	cmp	r3, #0
 801af34:	d1e6      	bne.n	801af04 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801af36:	e018      	b.n	801af6a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801af3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801af3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af40:	881b      	ldrh	r3, [r3, #0]
 801af42:	461a      	mov	r2, r3
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801af4c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801af52:	1c9a      	adds	r2, r3, #2
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801af5e:	b29b      	uxth	r3, r3
 801af60:	3b01      	subs	r3, #1
 801af62:	b29a      	uxth	r2, r3
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801af6a:	bf00      	nop
 801af6c:	3744      	adds	r7, #68	@ 0x44
 801af6e:	46bd      	mov	sp, r7
 801af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af74:	4770      	bx	lr

0801af76 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801af76:	b480      	push	{r7}
 801af78:	b091      	sub	sp, #68	@ 0x44
 801af7a:	af00      	add	r7, sp, #0
 801af7c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801af84:	2b21      	cmp	r3, #33	@ 0x21
 801af86:	d160      	bne.n	801b04a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801af8e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801af90:	e057      	b.n	801b042 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801af98:	b29b      	uxth	r3, r3
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d133      	bne.n	801b006 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	3308      	adds	r3, #8
 801afa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801afa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afa8:	e853 3f00 	ldrex	r3, [r3]
 801afac:	623b      	str	r3, [r7, #32]
   return(result);
 801afae:	6a3b      	ldr	r3, [r7, #32]
 801afb0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801afb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	3308      	adds	r3, #8
 801afbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801afbe:	633a      	str	r2, [r7, #48]	@ 0x30
 801afc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801afc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801afc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801afc6:	e841 2300 	strex	r3, r2, [r1]
 801afca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801afcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d1e5      	bne.n	801af9e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801afd8:	693b      	ldr	r3, [r7, #16]
 801afda:	e853 3f00 	ldrex	r3, [r3]
 801afde:	60fb      	str	r3, [r7, #12]
   return(result);
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801afe6:	637b      	str	r3, [r7, #52]	@ 0x34
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	461a      	mov	r2, r3
 801afee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aff0:	61fb      	str	r3, [r7, #28]
 801aff2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aff4:	69b9      	ldr	r1, [r7, #24]
 801aff6:	69fa      	ldr	r2, [r7, #28]
 801aff8:	e841 2300 	strex	r3, r2, [r1]
 801affc:	617b      	str	r3, [r7, #20]
   return(result);
 801affe:	697b      	ldr	r3, [r7, #20]
 801b000:	2b00      	cmp	r3, #0
 801b002:	d1e6      	bne.n	801afd2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801b004:	e021      	b.n	801b04a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	69db      	ldr	r3, [r3, #28]
 801b00c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b010:	2b00      	cmp	r3, #0
 801b012:	d013      	beq.n	801b03c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b018:	781a      	ldrb	r2, [r3, #0]
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b024:	1c5a      	adds	r2, r3, #1
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801b030:	b29b      	uxth	r3, r3
 801b032:	3b01      	subs	r3, #1
 801b034:	b29a      	uxth	r2, r3
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801b03c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b03e:	3b01      	subs	r3, #1
 801b040:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801b042:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b044:	2b00      	cmp	r3, #0
 801b046:	d1a4      	bne.n	801af92 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801b048:	e7ff      	b.n	801b04a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801b04a:	bf00      	nop
 801b04c:	3744      	adds	r7, #68	@ 0x44
 801b04e:	46bd      	mov	sp, r7
 801b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b054:	4770      	bx	lr

0801b056 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801b056:	b480      	push	{r7}
 801b058:	b091      	sub	sp, #68	@ 0x44
 801b05a:	af00      	add	r7, sp, #0
 801b05c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b064:	2b21      	cmp	r3, #33	@ 0x21
 801b066:	d165      	bne.n	801b134 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801b06e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801b070:	e05c      	b.n	801b12c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801b078:	b29b      	uxth	r3, r3
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d133      	bne.n	801b0e6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	3308      	adds	r3, #8
 801b084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b086:	6a3b      	ldr	r3, [r7, #32]
 801b088:	e853 3f00 	ldrex	r3, [r3]
 801b08c:	61fb      	str	r3, [r7, #28]
   return(result);
 801b08e:	69fb      	ldr	r3, [r7, #28]
 801b090:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801b094:	637b      	str	r3, [r7, #52]	@ 0x34
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	3308      	adds	r3, #8
 801b09c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b09e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b0a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b0a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b0a6:	e841 2300 	strex	r3, r2, [r1]
 801b0aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801b0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d1e5      	bne.n	801b07e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	e853 3f00 	ldrex	r3, [r3]
 801b0be:	60bb      	str	r3, [r7, #8]
   return(result);
 801b0c0:	68bb      	ldr	r3, [r7, #8]
 801b0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b0c6:	633b      	str	r3, [r7, #48]	@ 0x30
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	461a      	mov	r2, r3
 801b0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0d0:	61bb      	str	r3, [r7, #24]
 801b0d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b0d4:	6979      	ldr	r1, [r7, #20]
 801b0d6:	69ba      	ldr	r2, [r7, #24]
 801b0d8:	e841 2300 	strex	r3, r2, [r1]
 801b0dc:	613b      	str	r3, [r7, #16]
   return(result);
 801b0de:	693b      	ldr	r3, [r7, #16]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d1e6      	bne.n	801b0b2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801b0e4:	e026      	b.n	801b134 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	69db      	ldr	r3, [r3, #28]
 801b0ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d018      	beq.n	801b126 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b0f8:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801b0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0fc:	881b      	ldrh	r3, [r3, #0]
 801b0fe:	461a      	mov	r2, r3
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b108:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b10e:	1c9a      	adds	r2, r3, #2
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801b11a:	b29b      	uxth	r3, r3
 801b11c:	3b01      	subs	r3, #1
 801b11e:	b29a      	uxth	r2, r3
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801b126:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b128:	3b01      	subs	r3, #1
 801b12a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801b12c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d19f      	bne.n	801b072 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801b132:	e7ff      	b.n	801b134 <UART_TxISR_16BIT_FIFOEN+0xde>
 801b134:	bf00      	nop
 801b136:	3744      	adds	r7, #68	@ 0x44
 801b138:	46bd      	mov	sp, r7
 801b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b13e:	4770      	bx	lr

0801b140 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b140:	b580      	push	{r7, lr}
 801b142:	b088      	sub	sp, #32
 801b144:	af00      	add	r7, sp, #0
 801b146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	e853 3f00 	ldrex	r3, [r3]
 801b154:	60bb      	str	r3, [r7, #8]
   return(result);
 801b156:	68bb      	ldr	r3, [r7, #8]
 801b158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b15c:	61fb      	str	r3, [r7, #28]
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	461a      	mov	r2, r3
 801b164:	69fb      	ldr	r3, [r7, #28]
 801b166:	61bb      	str	r3, [r7, #24]
 801b168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b16a:	6979      	ldr	r1, [r7, #20]
 801b16c:	69ba      	ldr	r2, [r7, #24]
 801b16e:	e841 2300 	strex	r3, r2, [r1]
 801b172:	613b      	str	r3, [r7, #16]
   return(result);
 801b174:	693b      	ldr	r3, [r7, #16]
 801b176:	2b00      	cmp	r3, #0
 801b178:	d1e6      	bne.n	801b148 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	2220      	movs	r2, #32
 801b17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	2200      	movs	r2, #0
 801b186:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801b188:	6878      	ldr	r0, [r7, #4]
 801b18a:	f7ff f8d1 	bl	801a330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b18e:	bf00      	nop
 801b190:	3720      	adds	r7, #32
 801b192:	46bd      	mov	sp, r7
 801b194:	bd80      	pop	{r7, pc}
	...

0801b198 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801b198:	b580      	push	{r7, lr}
 801b19a:	b09c      	sub	sp, #112	@ 0x70
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b1a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b1b0:	2b22      	cmp	r3, #34	@ 0x22
 801b1b2:	f040 80c3 	bne.w	801b33c <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b1bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801b1c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801b1c4:	b2d9      	uxtb	r1, r3
 801b1c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801b1ca:	b2da      	uxtb	r2, r3
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b1d0:	400a      	ands	r2, r1
 801b1d2:	b2d2      	uxtb	r2, r2
 801b1d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b1da:	1c5a      	adds	r2, r3, #1
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b1e6:	b29b      	uxth	r3, r3
 801b1e8:	3b01      	subs	r3, #1
 801b1ea:	b29a      	uxth	r2, r3
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b1f8:	b29b      	uxth	r3, r3
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	f040 80a6 	bne.w	801b34c <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b208:	e853 3f00 	ldrex	r3, [r3]
 801b20c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801b20e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801b214:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	461a      	mov	r2, r3
 801b21c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b21e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b220:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b222:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b224:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b226:	e841 2300 	strex	r3, r2, [r1]
 801b22a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801b22c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d1e6      	bne.n	801b200 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	3308      	adds	r3, #8
 801b238:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b23c:	e853 3f00 	ldrex	r3, [r3]
 801b240:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801b242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b244:	f023 0301 	bic.w	r3, r3, #1
 801b248:	667b      	str	r3, [r7, #100]	@ 0x64
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	3308      	adds	r3, #8
 801b250:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801b252:	647a      	str	r2, [r7, #68]	@ 0x44
 801b254:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b256:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801b258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b25a:	e841 2300 	strex	r3, r2, [r1]
 801b25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801b260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b262:	2b00      	cmp	r3, #0
 801b264:	d1e5      	bne.n	801b232 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2220      	movs	r2, #32
 801b26a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	2200      	movs	r2, #0
 801b272:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	2200      	movs	r2, #0
 801b278:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	4a35      	ldr	r2, [pc, #212]	@ (801b354 <UART_RxISR_8BIT+0x1bc>)
 801b280:	4293      	cmp	r3, r2
 801b282:	d024      	beq.n	801b2ce <UART_RxISR_8BIT+0x136>
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	4a33      	ldr	r2, [pc, #204]	@ (801b358 <UART_RxISR_8BIT+0x1c0>)
 801b28a:	4293      	cmp	r3, r2
 801b28c:	d01f      	beq.n	801b2ce <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	685b      	ldr	r3, [r3, #4]
 801b294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d018      	beq.n	801b2ce <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a4:	e853 3f00 	ldrex	r3, [r3]
 801b2a8:	623b      	str	r3, [r7, #32]
   return(result);
 801b2aa:	6a3b      	ldr	r3, [r7, #32]
 801b2ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801b2b0:	663b      	str	r3, [r7, #96]	@ 0x60
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	461a      	mov	r2, r3
 801b2b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b2ba:	633b      	str	r3, [r7, #48]	@ 0x30
 801b2bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b2c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b2c2:	e841 2300 	strex	r3, r2, [r1]
 801b2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801b2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d1e6      	bne.n	801b29c <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b2d2:	2b01      	cmp	r3, #1
 801b2d4:	d12e      	bne.n	801b334 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	2200      	movs	r2, #0
 801b2da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2e2:	693b      	ldr	r3, [r7, #16]
 801b2e4:	e853 3f00 	ldrex	r3, [r3]
 801b2e8:	60fb      	str	r3, [r7, #12]
   return(result);
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	f023 0310 	bic.w	r3, r3, #16
 801b2f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	461a      	mov	r2, r3
 801b2f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b2fa:	61fb      	str	r3, [r7, #28]
 801b2fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2fe:	69b9      	ldr	r1, [r7, #24]
 801b300:	69fa      	ldr	r2, [r7, #28]
 801b302:	e841 2300 	strex	r3, r2, [r1]
 801b306:	617b      	str	r3, [r7, #20]
   return(result);
 801b308:	697b      	ldr	r3, [r7, #20]
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d1e6      	bne.n	801b2dc <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	69db      	ldr	r3, [r3, #28]
 801b314:	f003 0310 	and.w	r3, r3, #16
 801b318:	2b10      	cmp	r3, #16
 801b31a:	d103      	bne.n	801b324 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	2210      	movs	r2, #16
 801b322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b32a:	4619      	mov	r1, r3
 801b32c:	6878      	ldr	r0, [r7, #4]
 801b32e:	f7ff f813 	bl	801a358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b332:	e00b      	b.n	801b34c <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 801b334:	6878      	ldr	r0, [r7, #4]
 801b336:	f7f5 f81b 	bl	8010370 <HAL_UART_RxCpltCallback>
}
 801b33a:	e007      	b.n	801b34c <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	699a      	ldr	r2, [r3, #24]
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	f042 0208 	orr.w	r2, r2, #8
 801b34a:	619a      	str	r2, [r3, #24]
}
 801b34c:	bf00      	nop
 801b34e:	3770      	adds	r7, #112	@ 0x70
 801b350:	46bd      	mov	sp, r7
 801b352:	bd80      	pop	{r7, pc}
 801b354:	44002400 	.word	0x44002400
 801b358:	54002400 	.word	0x54002400

0801b35c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b09c      	sub	sp, #112	@ 0x70
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b36a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b374:	2b22      	cmp	r3, #34	@ 0x22
 801b376:	f040 80c3 	bne.w	801b500 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b380:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b388:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801b38a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801b38e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801b392:	4013      	ands	r3, r2
 801b394:	b29a      	uxth	r2, r3
 801b396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b398:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b39e:	1c9a      	adds	r2, r3, #2
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b3aa:	b29b      	uxth	r3, r3
 801b3ac:	3b01      	subs	r3, #1
 801b3ae:	b29a      	uxth	r2, r3
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b3bc:	b29b      	uxth	r3, r3
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	f040 80a6 	bne.w	801b510 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b3cc:	e853 3f00 	ldrex	r3, [r3]
 801b3d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801b3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b3d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801b3d8:	667b      	str	r3, [r7, #100]	@ 0x64
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	461a      	mov	r2, r3
 801b3e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b3e2:	657b      	str	r3, [r7, #84]	@ 0x54
 801b3e4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b3e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b3e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b3ea:	e841 2300 	strex	r3, r2, [r1]
 801b3ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801b3f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d1e6      	bne.n	801b3c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	3308      	adds	r3, #8
 801b3fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b400:	e853 3f00 	ldrex	r3, [r3]
 801b404:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801b406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b408:	f023 0301 	bic.w	r3, r3, #1
 801b40c:	663b      	str	r3, [r7, #96]	@ 0x60
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	3308      	adds	r3, #8
 801b414:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b416:	643a      	str	r2, [r7, #64]	@ 0x40
 801b418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b41a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b41c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b41e:	e841 2300 	strex	r3, r2, [r1]
 801b422:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801b424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b426:	2b00      	cmp	r3, #0
 801b428:	d1e5      	bne.n	801b3f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	2220      	movs	r2, #32
 801b42e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	2200      	movs	r2, #0
 801b436:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	2200      	movs	r2, #0
 801b43c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	4a35      	ldr	r2, [pc, #212]	@ (801b518 <UART_RxISR_16BIT+0x1bc>)
 801b444:	4293      	cmp	r3, r2
 801b446:	d024      	beq.n	801b492 <UART_RxISR_16BIT+0x136>
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	4a33      	ldr	r2, [pc, #204]	@ (801b51c <UART_RxISR_16BIT+0x1c0>)
 801b44e:	4293      	cmp	r3, r2
 801b450:	d01f      	beq.n	801b492 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	681b      	ldr	r3, [r3, #0]
 801b456:	685b      	ldr	r3, [r3, #4]
 801b458:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d018      	beq.n	801b492 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b466:	6a3b      	ldr	r3, [r7, #32]
 801b468:	e853 3f00 	ldrex	r3, [r3]
 801b46c:	61fb      	str	r3, [r7, #28]
   return(result);
 801b46e:	69fb      	ldr	r3, [r7, #28]
 801b470:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801b474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	461a      	mov	r2, r3
 801b47c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b480:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b486:	e841 2300 	strex	r3, r2, [r1]
 801b48a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801b48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d1e6      	bne.n	801b460 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b496:	2b01      	cmp	r3, #1
 801b498:	d12e      	bne.n	801b4f8 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	2200      	movs	r2, #0
 801b49e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	e853 3f00 	ldrex	r3, [r3]
 801b4ac:	60bb      	str	r3, [r7, #8]
   return(result);
 801b4ae:	68bb      	ldr	r3, [r7, #8]
 801b4b0:	f023 0310 	bic.w	r3, r3, #16
 801b4b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	461a      	mov	r2, r3
 801b4bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b4be:	61bb      	str	r3, [r7, #24]
 801b4c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b4c2:	6979      	ldr	r1, [r7, #20]
 801b4c4:	69ba      	ldr	r2, [r7, #24]
 801b4c6:	e841 2300 	strex	r3, r2, [r1]
 801b4ca:	613b      	str	r3, [r7, #16]
   return(result);
 801b4cc:	693b      	ldr	r3, [r7, #16]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d1e6      	bne.n	801b4a0 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	69db      	ldr	r3, [r3, #28]
 801b4d8:	f003 0310 	and.w	r3, r3, #16
 801b4dc:	2b10      	cmp	r3, #16
 801b4de:	d103      	bne.n	801b4e8 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	2210      	movs	r2, #16
 801b4e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b4ee:	4619      	mov	r1, r3
 801b4f0:	6878      	ldr	r0, [r7, #4]
 801b4f2:	f7fe ff31 	bl	801a358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b4f6:	e00b      	b.n	801b510 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 801b4f8:	6878      	ldr	r0, [r7, #4]
 801b4fa:	f7f4 ff39 	bl	8010370 <HAL_UART_RxCpltCallback>
}
 801b4fe:	e007      	b.n	801b510 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	699a      	ldr	r2, [r3, #24]
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	f042 0208 	orr.w	r2, r2, #8
 801b50e:	619a      	str	r2, [r3, #24]
}
 801b510:	bf00      	nop
 801b512:	3770      	adds	r7, #112	@ 0x70
 801b514:	46bd      	mov	sp, r7
 801b516:	bd80      	pop	{r7, pc}
 801b518:	44002400 	.word	0x44002400
 801b51c:	54002400 	.word	0x54002400

0801b520 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801b520:	b580      	push	{r7, lr}
 801b522:	b0ac      	sub	sp, #176	@ 0xb0
 801b524:	af00      	add	r7, sp, #0
 801b526:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b52e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	69db      	ldr	r3, [r3, #28]
 801b538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	689b      	ldr	r3, [r3, #8]
 801b54c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b556:	2b22      	cmp	r3, #34	@ 0x22
 801b558:	f040 8188 	bne.w	801b86c <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801b562:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801b566:	e12b      	b.n	801b7c0 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b56e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801b572:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801b576:	b2d9      	uxtb	r1, r3
 801b578:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801b57c:	b2da      	uxtb	r2, r3
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b582:	400a      	ands	r2, r1
 801b584:	b2d2      	uxtb	r2, r2
 801b586:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b58c:	1c5a      	adds	r2, r3, #1
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b598:	b29b      	uxth	r3, r3
 801b59a:	3b01      	subs	r3, #1
 801b59c:	b29a      	uxth	r2, r3
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	69db      	ldr	r3, [r3, #28]
 801b5aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801b5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5b2:	f003 0307 	and.w	r3, r3, #7
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d053      	beq.n	801b662 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b5ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5be:	f003 0301 	and.w	r3, r3, #1
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d011      	beq.n	801b5ea <UART_RxISR_8BIT_FIFOEN+0xca>
 801b5c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b5ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d00b      	beq.n	801b5ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	2201      	movs	r2, #1
 801b5d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b5e0:	f043 0201 	orr.w	r2, r3, #1
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b5ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5ee:	f003 0302 	and.w	r3, r3, #2
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d011      	beq.n	801b61a <UART_RxISR_8BIT_FIFOEN+0xfa>
 801b5f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801b5fa:	f003 0301 	and.w	r3, r3, #1
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d00b      	beq.n	801b61a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	2202      	movs	r2, #2
 801b608:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b610:	f043 0204 	orr.w	r2, r3, #4
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b61a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b61e:	f003 0304 	and.w	r3, r3, #4
 801b622:	2b00      	cmp	r3, #0
 801b624:	d011      	beq.n	801b64a <UART_RxISR_8BIT_FIFOEN+0x12a>
 801b626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801b62a:	f003 0301 	and.w	r3, r3, #1
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d00b      	beq.n	801b64a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	2204      	movs	r2, #4
 801b638:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b640:	f043 0202 	orr.w	r2, r3, #2
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b650:	2b00      	cmp	r3, #0
 801b652:	d006      	beq.n	801b662 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b654:	6878      	ldr	r0, [r7, #4]
 801b656:	f7fe fe75 	bl	801a344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	2200      	movs	r2, #0
 801b65e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b668:	b29b      	uxth	r3, r3
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	f040 80a8 	bne.w	801b7c0 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b678:	e853 3f00 	ldrex	r3, [r3]
 801b67c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801b67e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	461a      	mov	r2, r3
 801b68e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801b692:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801b694:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b696:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801b698:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801b69a:	e841 2300 	strex	r3, r2, [r1]
 801b69e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801b6a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d1e4      	bne.n	801b670 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	3308      	adds	r3, #8
 801b6ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b6ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b6b0:	e853 3f00 	ldrex	r3, [r3]
 801b6b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801b6b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b6b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801b6bc:	f023 0301 	bic.w	r3, r3, #1
 801b6c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	3308      	adds	r3, #8
 801b6ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801b6ce:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b6d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b6d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801b6d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b6d6:	e841 2300 	strex	r3, r2, [r1]
 801b6da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801b6dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d1e1      	bne.n	801b6a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	2220      	movs	r2, #32
 801b6e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	2200      	movs	r2, #0
 801b6ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	2200      	movs	r2, #0
 801b6f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	4a62      	ldr	r2, [pc, #392]	@ (801b884 <UART_RxISR_8BIT_FIFOEN+0x364>)
 801b6fc:	4293      	cmp	r3, r2
 801b6fe:	d026      	beq.n	801b74e <UART_RxISR_8BIT_FIFOEN+0x22e>
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	4a60      	ldr	r2, [pc, #384]	@ (801b888 <UART_RxISR_8BIT_FIFOEN+0x368>)
 801b706:	4293      	cmp	r3, r2
 801b708:	d021      	beq.n	801b74e <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	685b      	ldr	r3, [r3, #4]
 801b710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801b714:	2b00      	cmp	r3, #0
 801b716:	d01a      	beq.n	801b74e <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b720:	e853 3f00 	ldrex	r3, [r3]
 801b724:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801b726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b728:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801b72c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	461a      	mov	r2, r3
 801b736:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801b73a:	657b      	str	r3, [r7, #84]	@ 0x54
 801b73c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b73e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b740:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b742:	e841 2300 	strex	r3, r2, [r1]
 801b746:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801b748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d1e4      	bne.n	801b718 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b752:	2b01      	cmp	r3, #1
 801b754:	d130      	bne.n	801b7b8 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	2200      	movs	r2, #0
 801b75a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b764:	e853 3f00 	ldrex	r3, [r3]
 801b768:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801b76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b76c:	f023 0310 	bic.w	r3, r3, #16
 801b770:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	461a      	mov	r2, r3
 801b77a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b77e:	643b      	str	r3, [r7, #64]	@ 0x40
 801b780:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b782:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b784:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b786:	e841 2300 	strex	r3, r2, [r1]
 801b78a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d1e4      	bne.n	801b75c <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	69db      	ldr	r3, [r3, #28]
 801b798:	f003 0310 	and.w	r3, r3, #16
 801b79c:	2b10      	cmp	r3, #16
 801b79e:	d103      	bne.n	801b7a8 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	2210      	movs	r2, #16
 801b7a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b7ae:	4619      	mov	r1, r3
 801b7b0:	6878      	ldr	r0, [r7, #4]
 801b7b2:	f7fe fdd1 	bl	801a358 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801b7b6:	e00e      	b.n	801b7d6 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 801b7b8:	6878      	ldr	r0, [r7, #4]
 801b7ba:	f7f4 fdd9 	bl	8010370 <HAL_UART_RxCpltCallback>
        break;
 801b7be:	e00a      	b.n	801b7d6 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801b7c0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d006      	beq.n	801b7d6 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 801b7c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b7cc:	f003 0320 	and.w	r3, r3, #32
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	f47f aec9 	bne.w	801b568 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b7dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801b7e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d049      	beq.n	801b87c <UART_RxISR_8BIT_FIFOEN+0x35c>
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801b7ee:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801b7f2:	429a      	cmp	r2, r3
 801b7f4:	d242      	bcs.n	801b87c <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	3308      	adds	r3, #8
 801b7fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b7fe:	6a3b      	ldr	r3, [r7, #32]
 801b800:	e853 3f00 	ldrex	r3, [r3]
 801b804:	61fb      	str	r3, [r7, #28]
   return(result);
 801b806:	69fb      	ldr	r3, [r7, #28]
 801b808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801b80c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	3308      	adds	r3, #8
 801b816:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801b81a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b81c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b81e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b822:	e841 2300 	strex	r3, r2, [r1]
 801b826:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801b828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d1e3      	bne.n	801b7f6 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	4a16      	ldr	r2, [pc, #88]	@ (801b88c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 801b832:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b83a:	68fb      	ldr	r3, [r7, #12]
 801b83c:	e853 3f00 	ldrex	r3, [r3]
 801b840:	60bb      	str	r3, [r7, #8]
   return(result);
 801b842:	68bb      	ldr	r3, [r7, #8]
 801b844:	f043 0320 	orr.w	r3, r3, #32
 801b848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	461a      	mov	r2, r3
 801b852:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b856:	61bb      	str	r3, [r7, #24]
 801b858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b85a:	6979      	ldr	r1, [r7, #20]
 801b85c:	69ba      	ldr	r2, [r7, #24]
 801b85e:	e841 2300 	strex	r3, r2, [r1]
 801b862:	613b      	str	r3, [r7, #16]
   return(result);
 801b864:	693b      	ldr	r3, [r7, #16]
 801b866:	2b00      	cmp	r3, #0
 801b868:	d1e4      	bne.n	801b834 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b86a:	e007      	b.n	801b87c <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	699a      	ldr	r2, [r3, #24]
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	f042 0208 	orr.w	r2, r2, #8
 801b87a:	619a      	str	r2, [r3, #24]
}
 801b87c:	bf00      	nop
 801b87e:	37b0      	adds	r7, #176	@ 0xb0
 801b880:	46bd      	mov	sp, r7
 801b882:	bd80      	pop	{r7, pc}
 801b884:	44002400 	.word	0x44002400
 801b888:	54002400 	.word	0x54002400
 801b88c:	0801b199 	.word	0x0801b199

0801b890 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801b890:	b580      	push	{r7, lr}
 801b892:	b0ae      	sub	sp, #184	@ 0xb8
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b89e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	69db      	ldr	r3, [r3, #28]
 801b8a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	689b      	ldr	r3, [r3, #8]
 801b8bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b8c6:	2b22      	cmp	r3, #34	@ 0x22
 801b8c8:	f040 818c 	bne.w	801bbe4 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801b8d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801b8d6:	e12f      	b.n	801bb38 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8de:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b8e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801b8ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801b8ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801b8f2:	4013      	ands	r3, r2
 801b8f4:	b29a      	uxth	r2, r3
 801b8f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801b8fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b900:	1c9a      	adds	r2, r3, #2
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b90c:	b29b      	uxth	r3, r3
 801b90e:	3b01      	subs	r3, #1
 801b910:	b29a      	uxth	r2, r3
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	69db      	ldr	r3, [r3, #28]
 801b91e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801b922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b926:	f003 0307 	and.w	r3, r3, #7
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d053      	beq.n	801b9d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b92e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b932:	f003 0301 	and.w	r3, r3, #1
 801b936:	2b00      	cmp	r3, #0
 801b938:	d011      	beq.n	801b95e <UART_RxISR_16BIT_FIFOEN+0xce>
 801b93a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b93e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b942:	2b00      	cmp	r3, #0
 801b944:	d00b      	beq.n	801b95e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	2201      	movs	r2, #1
 801b94c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b954:	f043 0201 	orr.w	r2, r3, #1
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b95e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b962:	f003 0302 	and.w	r3, r3, #2
 801b966:	2b00      	cmp	r3, #0
 801b968:	d011      	beq.n	801b98e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801b96a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b96e:	f003 0301 	and.w	r3, r3, #1
 801b972:	2b00      	cmp	r3, #0
 801b974:	d00b      	beq.n	801b98e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	2202      	movs	r2, #2
 801b97c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b984:	f043 0204 	orr.w	r2, r3, #4
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b98e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b992:	f003 0304 	and.w	r3, r3, #4
 801b996:	2b00      	cmp	r3, #0
 801b998:	d011      	beq.n	801b9be <UART_RxISR_16BIT_FIFOEN+0x12e>
 801b99a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b99e:	f003 0301 	and.w	r3, r3, #1
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d00b      	beq.n	801b9be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	2204      	movs	r2, #4
 801b9ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b9b4:	f043 0202 	orr.w	r2, r3, #2
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d006      	beq.n	801b9d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b9c8:	6878      	ldr	r0, [r7, #4]
 801b9ca:	f7fe fcbb 	bl	801a344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	2200      	movs	r2, #0
 801b9d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801b9dc:	b29b      	uxth	r3, r3
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	f040 80aa 	bne.w	801bb38 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b9ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b9ec:	e853 3f00 	ldrex	r3, [r3]
 801b9f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801b9f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b9f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b9f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	461a      	mov	r2, r3
 801ba02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801ba06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ba0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801ba0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801ba12:	e841 2300 	strex	r3, r2, [r1]
 801ba16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801ba18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d1e2      	bne.n	801b9e4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	3308      	adds	r3, #8
 801ba24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ba28:	e853 3f00 	ldrex	r3, [r3]
 801ba2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801ba2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ba30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ba34:	f023 0301 	bic.w	r3, r3, #1
 801ba38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	3308      	adds	r3, #8
 801ba42:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801ba46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801ba48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801ba4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801ba4e:	e841 2300 	strex	r3, r2, [r1]
 801ba52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801ba54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d1e1      	bne.n	801ba1e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	2220      	movs	r2, #32
 801ba5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	2200      	movs	r2, #0
 801ba66:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	4a62      	ldr	r2, [pc, #392]	@ (801bbfc <UART_RxISR_16BIT_FIFOEN+0x36c>)
 801ba74:	4293      	cmp	r3, r2
 801ba76:	d026      	beq.n	801bac6 <UART_RxISR_16BIT_FIFOEN+0x236>
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	4a60      	ldr	r2, [pc, #384]	@ (801bc00 <UART_RxISR_16BIT_FIFOEN+0x370>)
 801ba7e:	4293      	cmp	r3, r2
 801ba80:	d021      	beq.n	801bac6 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	685b      	ldr	r3, [r3, #4]
 801ba88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d01a      	beq.n	801bac6 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba98:	e853 3f00 	ldrex	r3, [r3]
 801ba9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801ba9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801baa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801baa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	461a      	mov	r2, r3
 801baae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801bab2:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bab4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bab6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801bab8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801baba:	e841 2300 	strex	r3, r2, [r1]
 801babe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801bac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d1e4      	bne.n	801ba90 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801baca:	2b01      	cmp	r3, #1
 801bacc:	d130      	bne.n	801bb30 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	2200      	movs	r2, #0
 801bad2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801badc:	e853 3f00 	ldrex	r3, [r3]
 801bae0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801bae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bae4:	f023 0310 	bic.w	r3, r3, #16
 801bae8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	461a      	mov	r2, r3
 801baf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801baf6:	647b      	str	r3, [r7, #68]	@ 0x44
 801baf8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bafa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801bafc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801bafe:	e841 2300 	strex	r3, r2, [r1]
 801bb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801bb04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d1e4      	bne.n	801bad4 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	69db      	ldr	r3, [r3, #28]
 801bb10:	f003 0310 	and.w	r3, r3, #16
 801bb14:	2b10      	cmp	r3, #16
 801bb16:	d103      	bne.n	801bb20 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	2210      	movs	r2, #16
 801bb1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801bb26:	4619      	mov	r1, r3
 801bb28:	6878      	ldr	r0, [r7, #4]
 801bb2a:	f7fe fc15 	bl	801a358 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801bb2e:	e00e      	b.n	801bb4e <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 801bb30:	6878      	ldr	r0, [r7, #4]
 801bb32:	f7f4 fc1d 	bl	8010370 <HAL_UART_RxCpltCallback>
        break;
 801bb36:	e00a      	b.n	801bb4e <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801bb38:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d006      	beq.n	801bb4e <UART_RxISR_16BIT_FIFOEN+0x2be>
 801bb40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801bb44:	f003 0320 	and.w	r3, r3, #32
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	f47f aec5 	bne.w	801b8d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801bb54:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801bb58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d049      	beq.n	801bbf4 <UART_RxISR_16BIT_FIFOEN+0x364>
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801bb66:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801bb6a:	429a      	cmp	r2, r3
 801bb6c:	d242      	bcs.n	801bbf4 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	3308      	adds	r3, #8
 801bb74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb78:	e853 3f00 	ldrex	r3, [r3]
 801bb7c:	623b      	str	r3, [r7, #32]
   return(result);
 801bb7e:	6a3b      	ldr	r3, [r7, #32]
 801bb80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801bb84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	3308      	adds	r3, #8
 801bb8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801bb92:	633a      	str	r2, [r7, #48]	@ 0x30
 801bb94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bb98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb9a:	e841 2300 	strex	r3, r2, [r1]
 801bb9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801bba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d1e3      	bne.n	801bb6e <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	4a16      	ldr	r2, [pc, #88]	@ (801bc04 <UART_RxISR_16BIT_FIFOEN+0x374>)
 801bbaa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bbb2:	693b      	ldr	r3, [r7, #16]
 801bbb4:	e853 3f00 	ldrex	r3, [r3]
 801bbb8:	60fb      	str	r3, [r7, #12]
   return(result);
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	f043 0320 	orr.w	r3, r3, #32
 801bbc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	461a      	mov	r2, r3
 801bbca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801bbce:	61fb      	str	r3, [r7, #28]
 801bbd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bbd2:	69b9      	ldr	r1, [r7, #24]
 801bbd4:	69fa      	ldr	r2, [r7, #28]
 801bbd6:	e841 2300 	strex	r3, r2, [r1]
 801bbda:	617b      	str	r3, [r7, #20]
   return(result);
 801bbdc:	697b      	ldr	r3, [r7, #20]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d1e4      	bne.n	801bbac <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801bbe2:	e007      	b.n	801bbf4 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	699a      	ldr	r2, [r3, #24]
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	f042 0208 	orr.w	r2, r2, #8
 801bbf2:	619a      	str	r2, [r3, #24]
}
 801bbf4:	bf00      	nop
 801bbf6:	37b8      	adds	r7, #184	@ 0xb8
 801bbf8:	46bd      	mov	sp, r7
 801bbfa:	bd80      	pop	{r7, pc}
 801bbfc:	44002400 	.word	0x44002400
 801bc00:	54002400 	.word	0x54002400
 801bc04:	0801b35d 	.word	0x0801b35d

0801bc08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801bc08:	b480      	push	{r7}
 801bc0a:	b083      	sub	sp, #12
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801bc10:	bf00      	nop
 801bc12:	370c      	adds	r7, #12
 801bc14:	46bd      	mov	sp, r7
 801bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc1a:	4770      	bx	lr

0801bc1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801bc1c:	b480      	push	{r7}
 801bc1e:	b083      	sub	sp, #12
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801bc24:	bf00      	nop
 801bc26:	370c      	adds	r7, #12
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc2e:	4770      	bx	lr

0801bc30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801bc30:	b480      	push	{r7}
 801bc32:	b083      	sub	sp, #12
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801bc38:	bf00      	nop
 801bc3a:	370c      	adds	r7, #12
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc42:	4770      	bx	lr

0801bc44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801bc44:	b480      	push	{r7}
 801bc46:	b085      	sub	sp, #20
 801bc48:	af00      	add	r7, sp, #0
 801bc4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801bc52:	2b01      	cmp	r3, #1
 801bc54:	d101      	bne.n	801bc5a <HAL_UARTEx_DisableFifoMode+0x16>
 801bc56:	2302      	movs	r3, #2
 801bc58:	e027      	b.n	801bcaa <HAL_UARTEx_DisableFifoMode+0x66>
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	2201      	movs	r2, #1
 801bc5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	2224      	movs	r2, #36	@ 0x24
 801bc66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	681a      	ldr	r2, [r3, #0]
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	f022 0201 	bic.w	r2, r2, #1
 801bc80:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801bc88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	2200      	movs	r2, #0
 801bc8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	68fa      	ldr	r2, [r7, #12]
 801bc96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	2220      	movs	r2, #32
 801bc9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	2200      	movs	r2, #0
 801bca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801bca8:	2300      	movs	r3, #0
}
 801bcaa:	4618      	mov	r0, r3
 801bcac:	3714      	adds	r7, #20
 801bcae:	46bd      	mov	sp, r7
 801bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb4:	4770      	bx	lr

0801bcb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801bcb6:	b580      	push	{r7, lr}
 801bcb8:	b084      	sub	sp, #16
 801bcba:	af00      	add	r7, sp, #0
 801bcbc:	6078      	str	r0, [r7, #4]
 801bcbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801bcc6:	2b01      	cmp	r3, #1
 801bcc8:	d101      	bne.n	801bcce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801bcca:	2302      	movs	r3, #2
 801bccc:	e02d      	b.n	801bd2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	2201      	movs	r2, #1
 801bcd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	2224      	movs	r2, #36	@ 0x24
 801bcda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	681a      	ldr	r2, [r3, #0]
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	f022 0201 	bic.w	r2, r2, #1
 801bcf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	689b      	ldr	r3, [r3, #8]
 801bcfc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	683a      	ldr	r2, [r7, #0]
 801bd06:	430a      	orrs	r2, r1
 801bd08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801bd0a:	6878      	ldr	r0, [r7, #4]
 801bd0c:	f000 f850 	bl	801bdb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	68fa      	ldr	r2, [r7, #12]
 801bd16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	2220      	movs	r2, #32
 801bd1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	2200      	movs	r2, #0
 801bd24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801bd28:	2300      	movs	r3, #0
}
 801bd2a:	4618      	mov	r0, r3
 801bd2c:	3710      	adds	r7, #16
 801bd2e:	46bd      	mov	sp, r7
 801bd30:	bd80      	pop	{r7, pc}

0801bd32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801bd32:	b580      	push	{r7, lr}
 801bd34:	b084      	sub	sp, #16
 801bd36:	af00      	add	r7, sp, #0
 801bd38:	6078      	str	r0, [r7, #4]
 801bd3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801bd42:	2b01      	cmp	r3, #1
 801bd44:	d101      	bne.n	801bd4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801bd46:	2302      	movs	r3, #2
 801bd48:	e02d      	b.n	801bda6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	2201      	movs	r2, #1
 801bd4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	2224      	movs	r2, #36	@ 0x24
 801bd56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	681a      	ldr	r2, [r3, #0]
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	f022 0201 	bic.w	r2, r2, #1
 801bd70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	689b      	ldr	r3, [r3, #8]
 801bd78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	683a      	ldr	r2, [r7, #0]
 801bd82:	430a      	orrs	r2, r1
 801bd84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801bd86:	6878      	ldr	r0, [r7, #4]
 801bd88:	f000 f812 	bl	801bdb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	68fa      	ldr	r2, [r7, #12]
 801bd92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	2220      	movs	r2, #32
 801bd98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	2200      	movs	r2, #0
 801bda0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801bda4:	2300      	movs	r3, #0
}
 801bda6:	4618      	mov	r0, r3
 801bda8:	3710      	adds	r7, #16
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd80      	pop	{r7, pc}
	...

0801bdb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801bdb0:	b480      	push	{r7}
 801bdb2:	b085      	sub	sp, #20
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d108      	bne.n	801bdd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	2201      	movs	r2, #1
 801bdc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	2201      	movs	r2, #1
 801bdcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801bdd0:	e031      	b.n	801be36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801bdd2:	2308      	movs	r3, #8
 801bdd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801bdd6:	2308      	movs	r3, #8
 801bdd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	689b      	ldr	r3, [r3, #8]
 801bde0:	0e5b      	lsrs	r3, r3, #25
 801bde2:	b2db      	uxtb	r3, r3
 801bde4:	f003 0307 	and.w	r3, r3, #7
 801bde8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	689b      	ldr	r3, [r3, #8]
 801bdf0:	0f5b      	lsrs	r3, r3, #29
 801bdf2:	b2db      	uxtb	r3, r3
 801bdf4:	f003 0307 	and.w	r3, r3, #7
 801bdf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bdfa:	7bbb      	ldrb	r3, [r7, #14]
 801bdfc:	7b3a      	ldrb	r2, [r7, #12]
 801bdfe:	4911      	ldr	r1, [pc, #68]	@ (801be44 <UARTEx_SetNbDataToProcess+0x94>)
 801be00:	5c8a      	ldrb	r2, [r1, r2]
 801be02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801be06:	7b3a      	ldrb	r2, [r7, #12]
 801be08:	490f      	ldr	r1, [pc, #60]	@ (801be48 <UARTEx_SetNbDataToProcess+0x98>)
 801be0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801be0c:	fb93 f3f2 	sdiv	r3, r3, r2
 801be10:	b29a      	uxth	r2, r3
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801be18:	7bfb      	ldrb	r3, [r7, #15]
 801be1a:	7b7a      	ldrb	r2, [r7, #13]
 801be1c:	4909      	ldr	r1, [pc, #36]	@ (801be44 <UARTEx_SetNbDataToProcess+0x94>)
 801be1e:	5c8a      	ldrb	r2, [r1, r2]
 801be20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801be24:	7b7a      	ldrb	r2, [r7, #13]
 801be26:	4908      	ldr	r1, [pc, #32]	@ (801be48 <UARTEx_SetNbDataToProcess+0x98>)
 801be28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801be2a:	fb93 f3f2 	sdiv	r3, r3, r2
 801be2e:	b29a      	uxth	r2, r3
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801be36:	bf00      	nop
 801be38:	3714      	adds	r7, #20
 801be3a:	46bd      	mov	sp, r7
 801be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be40:	4770      	bx	lr
 801be42:	bf00      	nop
 801be44:	0801f3b0 	.word	0x0801f3b0
 801be48:	0801f3b8 	.word	0x0801f3b8

0801be4c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 801be4c:	b480      	push	{r7}
 801be4e:	b087      	sub	sp, #28
 801be50:	af00      	add	r7, sp, #0
 801be52:	6078      	str	r0, [r7, #4]
 801be54:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 801be56:	683b      	ldr	r3, [r7, #0]
 801be58:	681a      	ldr	r2, [r3, #0]
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be60:	683a      	ldr	r2, [r7, #0]
 801be62:	6812      	ldr	r2, [r2, #0]
 801be64:	f023 0101 	bic.w	r1, r3, #1
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 801be6e:	683b      	ldr	r3, [r7, #0]
 801be70:	689b      	ldr	r3, [r3, #8]
 801be72:	2b08      	cmp	r3, #8
 801be74:	d102      	bne.n	801be7c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 801be76:	2340      	movs	r3, #64	@ 0x40
 801be78:	617b      	str	r3, [r7, #20]
 801be7a:	e001      	b.n	801be80 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 801be7c:	2300      	movs	r3, #0
 801be7e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 801be80:	683b      	ldr	r3, [r7, #0]
 801be82:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 801be84:	697b      	ldr	r3, [r7, #20]
 801be86:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 801be88:	683b      	ldr	r3, [r7, #0]
 801be8a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 801be8c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 801be8e:	683b      	ldr	r3, [r7, #0]
 801be90:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 801be92:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 801be94:	683b      	ldr	r3, [r7, #0]
 801be96:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 801be98:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 801be9a:	683b      	ldr	r3, [r7, #0]
 801be9c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 801be9e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 801bea0:	683b      	ldr	r3, [r7, #0]
 801bea2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 801bea4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 801bea6:	683b      	ldr	r3, [r7, #0]
 801bea8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 801beaa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 801beac:	683b      	ldr	r3, [r7, #0]
 801beae:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 801beb0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 801beb6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 801beb8:	683b      	ldr	r3, [r7, #0]
 801beba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 801bebc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 801bebe:	683b      	ldr	r3, [r7, #0]
 801bec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 801bec2:	4313      	orrs	r3, r2
 801bec4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 801bec6:	683b      	ldr	r3, [r7, #0]
 801bec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801beca:	693a      	ldr	r2, [r7, #16]
 801becc:	4313      	orrs	r3, r2
 801bece:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 801bed0:	683b      	ldr	r3, [r7, #0]
 801bed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bed4:	693a      	ldr	r2, [r7, #16]
 801bed6:	4313      	orrs	r3, r2
 801bed8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 801beda:	683b      	ldr	r3, [r7, #0]
 801bedc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bede:	693a      	ldr	r2, [r7, #16]
 801bee0:	4313      	orrs	r3, r2
 801bee2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bee8:	693a      	ldr	r2, [r7, #16]
 801beea:	4313      	orrs	r3, r2
 801beec:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 801beee:	4b3d      	ldr	r3, [pc, #244]	@ (801bfe4 <FMC_NORSRAM_Init+0x198>)
 801bef0:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bef8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 801befa:	68fb      	ldr	r3, [r7, #12]
 801befc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801bf00:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 801bf08:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 801bf10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 801bf12:	683b      	ldr	r3, [r7, #0]
 801bf14:	681a      	ldr	r2, [r3, #0]
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	43db      	mvns	r3, r3
 801bf20:	ea02 0103 	and.w	r1, r2, r3
 801bf24:	683b      	ldr	r3, [r7, #0]
 801bf26:	681a      	ldr	r2, [r3, #0]
 801bf28:	693b      	ldr	r3, [r7, #16]
 801bf2a:	4319      	orrs	r1, r3
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 801bf32:	683b      	ldr	r3, [r7, #0]
 801bf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bf36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801bf3a:	d10c      	bne.n	801bf56 <FMC_NORSRAM_Init+0x10a>
 801bf3c:	683b      	ldr	r3, [r7, #0]
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d008      	beq.n	801bf56 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801bf4c:	683b      	ldr	r3, [r7, #0]
 801bf4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bf50:	431a      	orrs	r2, r3
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d006      	beq.n	801bf6c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681a      	ldr	r2, [r3, #0]
 801bf62:	683b      	ldr	r3, [r7, #0]
 801bf64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bf66:	431a      	orrs	r2, r3
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 801bf6c:	683b      	ldr	r3, [r7, #0]
 801bf6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bf72:	2b01      	cmp	r3, #1
 801bf74:	d12f      	bne.n	801bfd6 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	6a1b      	ldr	r3, [r3, #32]
 801bf7a:	0c1b      	lsrs	r3, r3, #16
 801bf7c:	041b      	lsls	r3, r3, #16
 801bf7e:	683a      	ldr	r2, [r7, #0]
 801bf80:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 801bf82:	431a      	orrs	r2, r3
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 801bf88:	683b      	ldr	r3, [r7, #0]
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	2b04      	cmp	r3, #4
 801bf8e:	d014      	beq.n	801bfba <FMC_NORSRAM_Init+0x16e>
 801bf90:	2b04      	cmp	r3, #4
 801bf92:	d819      	bhi.n	801bfc8 <FMC_NORSRAM_Init+0x17c>
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d002      	beq.n	801bf9e <FMC_NORSRAM_Init+0x152>
 801bf98:	2b02      	cmp	r3, #2
 801bf9a:	d007      	beq.n	801bfac <FMC_NORSRAM_Init+0x160>
 801bf9c:	e014      	b.n	801bfc8 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	6a1b      	ldr	r3, [r3, #32]
 801bfa2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	621a      	str	r2, [r3, #32]
        break;
 801bfaa:	e014      	b.n	801bfd6 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	6a1b      	ldr	r3, [r3, #32]
 801bfb0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	621a      	str	r2, [r3, #32]
        break;
 801bfb8:	e00d      	b.n	801bfd6 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	6a1b      	ldr	r3, [r3, #32]
 801bfbe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	621a      	str	r2, [r3, #32]
        break;
 801bfc6:	e006      	b.n	801bfd6 <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	6a1b      	ldr	r3, [r3, #32]
 801bfcc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	621a      	str	r2, [r3, #32]
        break;
 801bfd4:	bf00      	nop
    }
  }

  return HAL_OK;
 801bfd6:	2300      	movs	r3, #0
}
 801bfd8:	4618      	mov	r0, r3
 801bfda:	371c      	adds	r7, #28
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe2:	4770      	bx	lr
 801bfe4:	0008fb7f 	.word	0x0008fb7f

0801bfe8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801bfe8:	b480      	push	{r7}
 801bfea:	b087      	sub	sp, #28
 801bfec:	af00      	add	r7, sp, #0
 801bfee:	60f8      	str	r0, [r7, #12]
 801bff0:	60b9      	str	r1, [r7, #8]
 801bff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 801bff4:	68bb      	ldr	r3, [r7, #8]
 801bff6:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	685b      	ldr	r3, [r3, #4]
 801bffc:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 801bffe:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 801c000:	68bb      	ldr	r3, [r7, #8]
 801c002:	689b      	ldr	r3, [r3, #8]
 801c004:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 801c006:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 801c008:	68bb      	ldr	r3, [r7, #8]
 801c00a:	68db      	ldr	r3, [r3, #12]
 801c00c:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 801c00e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 801c010:	68bb      	ldr	r3, [r7, #8]
 801c012:	691b      	ldr	r3, [r3, #16]
 801c014:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 801c016:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 801c018:	68bb      	ldr	r3, [r7, #8]
 801c01a:	695b      	ldr	r3, [r3, #20]
 801c01c:	3b01      	subs	r3, #1
 801c01e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 801c020:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 801c022:	68bb      	ldr	r3, [r7, #8]
 801c024:	699b      	ldr	r3, [r3, #24]
 801c026:	3b02      	subs	r3, #2
 801c028:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 801c02a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 801c02e:	68bb      	ldr	r3, [r7, #8]
 801c030:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 801c032:	687a      	ldr	r2, [r7, #4]
 801c034:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 801c036:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c04a:	d113      	bne.n	801c074 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	685b      	ldr	r3, [r3, #4]
 801c050:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801c054:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 801c056:	68bb      	ldr	r3, [r7, #8]
 801c058:	695b      	ldr	r3, [r3, #20]
 801c05a:	3b01      	subs	r3, #1
 801c05c:	051b      	lsls	r3, r3, #20
 801c05e:	697a      	ldr	r2, [r7, #20]
 801c060:	4313      	orrs	r3, r2
 801c062:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	685b      	ldr	r3, [r3, #4]
 801c068:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801c06c:	697b      	ldr	r3, [r7, #20]
 801c06e:	431a      	orrs	r2, r3
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801c074:	2300      	movs	r3, #0
}
 801c076:	4618      	mov	r0, r3
 801c078:	371c      	adds	r7, #28
 801c07a:	46bd      	mov	sp, r7
 801c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c080:	4770      	bx	lr

0801c082 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 801c082:	b480      	push	{r7}
 801c084:	b085      	sub	sp, #20
 801c086:	af00      	add	r7, sp, #0
 801c088:	60f8      	str	r0, [r7, #12]
 801c08a:	60b9      	str	r1, [r7, #8]
 801c08c:	607a      	str	r2, [r7, #4]
 801c08e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 801c090:	683b      	ldr	r3, [r7, #0]
 801c092:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c096:	d121      	bne.n	801c0dc <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	687a      	ldr	r2, [r7, #4]
 801c09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c0a0:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 801c0a4:	68bb      	ldr	r3, [r7, #8]
 801c0a6:	6819      	ldr	r1, [r3, #0]
 801c0a8:	68bb      	ldr	r3, [r7, #8]
 801c0aa:	685b      	ldr	r3, [r3, #4]
 801c0ac:	011b      	lsls	r3, r3, #4
 801c0ae:	4319      	orrs	r1, r3
 801c0b0:	68bb      	ldr	r3, [r7, #8]
 801c0b2:	689b      	ldr	r3, [r3, #8]
 801c0b4:	021b      	lsls	r3, r3, #8
 801c0b6:	4319      	orrs	r1, r3
 801c0b8:	68bb      	ldr	r3, [r7, #8]
 801c0ba:	68db      	ldr	r3, [r3, #12]
 801c0bc:	079b      	lsls	r3, r3, #30
 801c0be:	4319      	orrs	r1, r3
 801c0c0:	68bb      	ldr	r3, [r7, #8]
 801c0c2:	69db      	ldr	r3, [r3, #28]
 801c0c4:	4319      	orrs	r1, r3
 801c0c6:	68bb      	ldr	r3, [r7, #8]
 801c0c8:	691b      	ldr	r3, [r3, #16]
 801c0ca:	041b      	lsls	r3, r3, #16
 801c0cc:	430b      	orrs	r3, r1
 801c0ce:	ea42 0103 	orr.w	r1, r2, r3
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	687a      	ldr	r2, [r7, #4]
 801c0d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801c0da:	e005      	b.n	801c0e8 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	687a      	ldr	r2, [r7, #4]
 801c0e0:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 801c0e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 801c0e8:	2300      	movs	r3, #0
}
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	3714      	adds	r7, #20
 801c0ee:	46bd      	mov	sp, r7
 801c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0f4:	4770      	bx	lr
	...

0801c0f8 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 801c0f8:	b480      	push	{r7}
 801c0fa:	b083      	sub	sp, #12
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	6078      	str	r0, [r7, #4]
 801c100:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	681a      	ldr	r2, [r3, #0]
 801c106:	4b10      	ldr	r3, [pc, #64]	@ (801c148 <FMC_NAND_Init+0x50>)
 801c108:	4013      	ands	r3, r2
 801c10a:	683a      	ldr	r2, [r7, #0]
 801c10c:	6851      	ldr	r1, [r2, #4]
 801c10e:	683a      	ldr	r2, [r7, #0]
 801c110:	6892      	ldr	r2, [r2, #8]
 801c112:	4311      	orrs	r1, r2
 801c114:	683a      	ldr	r2, [r7, #0]
 801c116:	68d2      	ldr	r2, [r2, #12]
 801c118:	4311      	orrs	r1, r2
 801c11a:	683a      	ldr	r2, [r7, #0]
 801c11c:	6912      	ldr	r2, [r2, #16]
 801c11e:	4311      	orrs	r1, r2
 801c120:	683a      	ldr	r2, [r7, #0]
 801c122:	6952      	ldr	r2, [r2, #20]
 801c124:	0252      	lsls	r2, r2, #9
 801c126:	4311      	orrs	r1, r2
 801c128:	683a      	ldr	r2, [r7, #0]
 801c12a:	6992      	ldr	r2, [r2, #24]
 801c12c:	0352      	lsls	r2, r2, #13
 801c12e:	430a      	orrs	r2, r1
 801c130:	4313      	orrs	r3, r2
 801c132:	f043 0208 	orr.w	r2, r3, #8
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 801c13a:	2300      	movs	r3, #0
}
 801c13c:	4618      	mov	r0, r3
 801c13e:	370c      	adds	r7, #12
 801c140:	46bd      	mov	sp, r7
 801c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c146:	4770      	bx	lr
 801c148:	fff00181 	.word	0xfff00181

0801c14c <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 801c14c:	b480      	push	{r7}
 801c14e:	b085      	sub	sp, #20
 801c150:	af00      	add	r7, sp, #0
 801c152:	60f8      	str	r0, [r7, #12]
 801c154:	60b9      	str	r1, [r7, #8]
 801c156:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 801c158:	68bb      	ldr	r3, [r7, #8]
 801c15a:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 801c15c:	68bb      	ldr	r3, [r7, #8]
 801c15e:	685b      	ldr	r3, [r3, #4]
 801c160:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 801c162:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 801c164:	68bb      	ldr	r3, [r7, #8]
 801c166:	689b      	ldr	r3, [r3, #8]
 801c168:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 801c16a:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 801c16c:	68bb      	ldr	r3, [r7, #8]
 801c16e:	68db      	ldr	r3, [r3, #12]
 801c170:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 801c172:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 801c178:	2300      	movs	r3, #0
}
 801c17a:	4618      	mov	r0, r3
 801c17c:	3714      	adds	r7, #20
 801c17e:	46bd      	mov	sp, r7
 801c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c184:	4770      	bx	lr

0801c186 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 801c186:	b480      	push	{r7}
 801c188:	b085      	sub	sp, #20
 801c18a:	af00      	add	r7, sp, #0
 801c18c:	60f8      	str	r0, [r7, #12]
 801c18e:	60b9      	str	r1, [r7, #8]
 801c190:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 801c192:	68bb      	ldr	r3, [r7, #8]
 801c194:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 801c196:	68bb      	ldr	r3, [r7, #8]
 801c198:	685b      	ldr	r3, [r3, #4]
 801c19a:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 801c19c:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 801c19e:	68bb      	ldr	r3, [r7, #8]
 801c1a0:	689b      	ldr	r3, [r3, #8]
 801c1a2:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 801c1a4:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 801c1a6:	68bb      	ldr	r3, [r7, #8]
 801c1a8:	68db      	ldr	r3, [r3, #12]
 801c1aa:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 801c1ac:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801c1b2:	2300      	movs	r3, #0
}
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	3714      	adds	r7, #20
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1be:	4770      	bx	lr

0801c1c0 <__cvt>:
 801c1c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c1c4:	ec57 6b10 	vmov	r6, r7, d0
 801c1c8:	2f00      	cmp	r7, #0
 801c1ca:	460c      	mov	r4, r1
 801c1cc:	4619      	mov	r1, r3
 801c1ce:	463b      	mov	r3, r7
 801c1d0:	bfb4      	ite	lt
 801c1d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801c1d6:	2300      	movge	r3, #0
 801c1d8:	4691      	mov	r9, r2
 801c1da:	bfbf      	itttt	lt
 801c1dc:	4632      	movlt	r2, r6
 801c1de:	461f      	movlt	r7, r3
 801c1e0:	232d      	movlt	r3, #45	@ 0x2d
 801c1e2:	4616      	movlt	r6, r2
 801c1e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801c1e8:	700b      	strb	r3, [r1, #0]
 801c1ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c1ec:	f023 0820 	bic.w	r8, r3, #32
 801c1f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c1f4:	d005      	beq.n	801c202 <__cvt+0x42>
 801c1f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c1fa:	d100      	bne.n	801c1fe <__cvt+0x3e>
 801c1fc:	3401      	adds	r4, #1
 801c1fe:	2102      	movs	r1, #2
 801c200:	e000      	b.n	801c204 <__cvt+0x44>
 801c202:	2103      	movs	r1, #3
 801c204:	ab03      	add	r3, sp, #12
 801c206:	4622      	mov	r2, r4
 801c208:	9301      	str	r3, [sp, #4]
 801c20a:	ab02      	add	r3, sp, #8
 801c20c:	ec47 6b10 	vmov	d0, r6, r7
 801c210:	9300      	str	r3, [sp, #0]
 801c212:	4653      	mov	r3, sl
 801c214:	f000 fe94 	bl	801cf40 <_dtoa_r>
 801c218:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c21c:	4605      	mov	r5, r0
 801c21e:	d119      	bne.n	801c254 <__cvt+0x94>
 801c220:	f019 0f01 	tst.w	r9, #1
 801c224:	d00e      	beq.n	801c244 <__cvt+0x84>
 801c226:	eb00 0904 	add.w	r9, r0, r4
 801c22a:	2200      	movs	r2, #0
 801c22c:	2300      	movs	r3, #0
 801c22e:	4630      	mov	r0, r6
 801c230:	4639      	mov	r1, r7
 801c232:	f7f0 fc59 	bl	800cae8 <__aeabi_dcmpeq>
 801c236:	b108      	cbz	r0, 801c23c <__cvt+0x7c>
 801c238:	f8cd 900c 	str.w	r9, [sp, #12]
 801c23c:	2230      	movs	r2, #48	@ 0x30
 801c23e:	9b03      	ldr	r3, [sp, #12]
 801c240:	454b      	cmp	r3, r9
 801c242:	d31e      	bcc.n	801c282 <__cvt+0xc2>
 801c244:	9b03      	ldr	r3, [sp, #12]
 801c246:	4628      	mov	r0, r5
 801c248:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c24a:	1b5b      	subs	r3, r3, r5
 801c24c:	6013      	str	r3, [r2, #0]
 801c24e:	b004      	add	sp, #16
 801c250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c254:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c258:	eb00 0904 	add.w	r9, r0, r4
 801c25c:	d1e5      	bne.n	801c22a <__cvt+0x6a>
 801c25e:	7803      	ldrb	r3, [r0, #0]
 801c260:	2b30      	cmp	r3, #48	@ 0x30
 801c262:	d10a      	bne.n	801c27a <__cvt+0xba>
 801c264:	2200      	movs	r2, #0
 801c266:	2300      	movs	r3, #0
 801c268:	4630      	mov	r0, r6
 801c26a:	4639      	mov	r1, r7
 801c26c:	f7f0 fc3c 	bl	800cae8 <__aeabi_dcmpeq>
 801c270:	b918      	cbnz	r0, 801c27a <__cvt+0xba>
 801c272:	f1c4 0401 	rsb	r4, r4, #1
 801c276:	f8ca 4000 	str.w	r4, [sl]
 801c27a:	f8da 3000 	ldr.w	r3, [sl]
 801c27e:	4499      	add	r9, r3
 801c280:	e7d3      	b.n	801c22a <__cvt+0x6a>
 801c282:	1c59      	adds	r1, r3, #1
 801c284:	9103      	str	r1, [sp, #12]
 801c286:	701a      	strb	r2, [r3, #0]
 801c288:	e7d9      	b.n	801c23e <__cvt+0x7e>

0801c28a <__exponent>:
 801c28a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c28c:	2900      	cmp	r1, #0
 801c28e:	7002      	strb	r2, [r0, #0]
 801c290:	bfba      	itte	lt
 801c292:	4249      	neglt	r1, r1
 801c294:	232d      	movlt	r3, #45	@ 0x2d
 801c296:	232b      	movge	r3, #43	@ 0x2b
 801c298:	2909      	cmp	r1, #9
 801c29a:	7043      	strb	r3, [r0, #1]
 801c29c:	dd28      	ble.n	801c2f0 <__exponent+0x66>
 801c29e:	f10d 0307 	add.w	r3, sp, #7
 801c2a2:	270a      	movs	r7, #10
 801c2a4:	461d      	mov	r5, r3
 801c2a6:	461a      	mov	r2, r3
 801c2a8:	3b01      	subs	r3, #1
 801c2aa:	fbb1 f6f7 	udiv	r6, r1, r7
 801c2ae:	fb07 1416 	mls	r4, r7, r6, r1
 801c2b2:	3430      	adds	r4, #48	@ 0x30
 801c2b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c2b8:	460c      	mov	r4, r1
 801c2ba:	4631      	mov	r1, r6
 801c2bc:	2c63      	cmp	r4, #99	@ 0x63
 801c2be:	dcf2      	bgt.n	801c2a6 <__exponent+0x1c>
 801c2c0:	3130      	adds	r1, #48	@ 0x30
 801c2c2:	1e94      	subs	r4, r2, #2
 801c2c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c2c8:	1c41      	adds	r1, r0, #1
 801c2ca:	4623      	mov	r3, r4
 801c2cc:	42ab      	cmp	r3, r5
 801c2ce:	d30a      	bcc.n	801c2e6 <__exponent+0x5c>
 801c2d0:	f10d 0309 	add.w	r3, sp, #9
 801c2d4:	1a9b      	subs	r3, r3, r2
 801c2d6:	42ac      	cmp	r4, r5
 801c2d8:	bf88      	it	hi
 801c2da:	2300      	movhi	r3, #0
 801c2dc:	3302      	adds	r3, #2
 801c2de:	4403      	add	r3, r0
 801c2e0:	1a18      	subs	r0, r3, r0
 801c2e2:	b003      	add	sp, #12
 801c2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c2ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c2ee:	e7ed      	b.n	801c2cc <__exponent+0x42>
 801c2f0:	2330      	movs	r3, #48	@ 0x30
 801c2f2:	3130      	adds	r1, #48	@ 0x30
 801c2f4:	7083      	strb	r3, [r0, #2]
 801c2f6:	1d03      	adds	r3, r0, #4
 801c2f8:	70c1      	strb	r1, [r0, #3]
 801c2fa:	e7f1      	b.n	801c2e0 <__exponent+0x56>

0801c2fc <_printf_float>:
 801c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c300:	b08d      	sub	sp, #52	@ 0x34
 801c302:	460c      	mov	r4, r1
 801c304:	4616      	mov	r6, r2
 801c306:	461f      	mov	r7, r3
 801c308:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c30c:	4605      	mov	r5, r0
 801c30e:	f000 fcf5 	bl	801ccfc <_localeconv_r>
 801c312:	6803      	ldr	r3, [r0, #0]
 801c314:	4618      	mov	r0, r3
 801c316:	9304      	str	r3, [sp, #16]
 801c318:	f7ef ffba 	bl	800c290 <strlen>
 801c31c:	2300      	movs	r3, #0
 801c31e:	9005      	str	r0, [sp, #20]
 801c320:	930a      	str	r3, [sp, #40]	@ 0x28
 801c322:	f8d8 3000 	ldr.w	r3, [r8]
 801c326:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c32a:	3307      	adds	r3, #7
 801c32c:	f8d4 b000 	ldr.w	fp, [r4]
 801c330:	f023 0307 	bic.w	r3, r3, #7
 801c334:	f103 0208 	add.w	r2, r3, #8
 801c338:	f8c8 2000 	str.w	r2, [r8]
 801c33c:	f04f 32ff 	mov.w	r2, #4294967295
 801c340:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c344:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c348:	f8cd 8018 	str.w	r8, [sp, #24]
 801c34c:	9307      	str	r3, [sp, #28]
 801c34e:	4b9d      	ldr	r3, [pc, #628]	@ (801c5c4 <_printf_float+0x2c8>)
 801c350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c354:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c358:	f7f0 fbf8 	bl	800cb4c <__aeabi_dcmpun>
 801c35c:	bb70      	cbnz	r0, 801c3bc <_printf_float+0xc0>
 801c35e:	f04f 32ff 	mov.w	r2, #4294967295
 801c362:	4b98      	ldr	r3, [pc, #608]	@ (801c5c4 <_printf_float+0x2c8>)
 801c364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c368:	f7f0 fbd2 	bl	800cb10 <__aeabi_dcmple>
 801c36c:	bb30      	cbnz	r0, 801c3bc <_printf_float+0xc0>
 801c36e:	2200      	movs	r2, #0
 801c370:	2300      	movs	r3, #0
 801c372:	4640      	mov	r0, r8
 801c374:	4649      	mov	r1, r9
 801c376:	f7f0 fbc1 	bl	800cafc <__aeabi_dcmplt>
 801c37a:	b110      	cbz	r0, 801c382 <_printf_float+0x86>
 801c37c:	232d      	movs	r3, #45	@ 0x2d
 801c37e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c382:	4a91      	ldr	r2, [pc, #580]	@ (801c5c8 <_printf_float+0x2cc>)
 801c384:	4b91      	ldr	r3, [pc, #580]	@ (801c5cc <_printf_float+0x2d0>)
 801c386:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c38a:	bf94      	ite	ls
 801c38c:	4690      	movls	r8, r2
 801c38e:	4698      	movhi	r8, r3
 801c390:	2303      	movs	r3, #3
 801c392:	f04f 0900 	mov.w	r9, #0
 801c396:	6123      	str	r3, [r4, #16]
 801c398:	f02b 0304 	bic.w	r3, fp, #4
 801c39c:	6023      	str	r3, [r4, #0]
 801c39e:	4633      	mov	r3, r6
 801c3a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c3a2:	4621      	mov	r1, r4
 801c3a4:	4628      	mov	r0, r5
 801c3a6:	9700      	str	r7, [sp, #0]
 801c3a8:	f000 f9d2 	bl	801c750 <_printf_common>
 801c3ac:	3001      	adds	r0, #1
 801c3ae:	f040 808d 	bne.w	801c4cc <_printf_float+0x1d0>
 801c3b2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3b6:	b00d      	add	sp, #52	@ 0x34
 801c3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3bc:	4642      	mov	r2, r8
 801c3be:	464b      	mov	r3, r9
 801c3c0:	4640      	mov	r0, r8
 801c3c2:	4649      	mov	r1, r9
 801c3c4:	f7f0 fbc2 	bl	800cb4c <__aeabi_dcmpun>
 801c3c8:	b140      	cbz	r0, 801c3dc <_printf_float+0xe0>
 801c3ca:	464b      	mov	r3, r9
 801c3cc:	4a80      	ldr	r2, [pc, #512]	@ (801c5d0 <_printf_float+0x2d4>)
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	bfbc      	itt	lt
 801c3d2:	232d      	movlt	r3, #45	@ 0x2d
 801c3d4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c3d8:	4b7e      	ldr	r3, [pc, #504]	@ (801c5d4 <_printf_float+0x2d8>)
 801c3da:	e7d4      	b.n	801c386 <_printf_float+0x8a>
 801c3dc:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c3e0:	6863      	ldr	r3, [r4, #4]
 801c3e2:	9206      	str	r2, [sp, #24]
 801c3e4:	1c5a      	adds	r2, r3, #1
 801c3e6:	d13b      	bne.n	801c460 <_printf_float+0x164>
 801c3e8:	2306      	movs	r3, #6
 801c3ea:	6063      	str	r3, [r4, #4]
 801c3ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c3f0:	2300      	movs	r3, #0
 801c3f2:	4628      	mov	r0, r5
 801c3f4:	6022      	str	r2, [r4, #0]
 801c3f6:	9303      	str	r3, [sp, #12]
 801c3f8:	ab0a      	add	r3, sp, #40	@ 0x28
 801c3fa:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c3fe:	ab09      	add	r3, sp, #36	@ 0x24
 801c400:	ec49 8b10 	vmov	d0, r8, r9
 801c404:	9300      	str	r3, [sp, #0]
 801c406:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c40a:	6861      	ldr	r1, [r4, #4]
 801c40c:	f7ff fed8 	bl	801c1c0 <__cvt>
 801c410:	9b06      	ldr	r3, [sp, #24]
 801c412:	4680      	mov	r8, r0
 801c414:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c416:	2b47      	cmp	r3, #71	@ 0x47
 801c418:	d129      	bne.n	801c46e <_printf_float+0x172>
 801c41a:	1cc8      	adds	r0, r1, #3
 801c41c:	db02      	blt.n	801c424 <_printf_float+0x128>
 801c41e:	6863      	ldr	r3, [r4, #4]
 801c420:	4299      	cmp	r1, r3
 801c422:	dd41      	ble.n	801c4a8 <_printf_float+0x1ac>
 801c424:	f1aa 0a02 	sub.w	sl, sl, #2
 801c428:	fa5f fa8a 	uxtb.w	sl, sl
 801c42c:	3901      	subs	r1, #1
 801c42e:	4652      	mov	r2, sl
 801c430:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c434:	9109      	str	r1, [sp, #36]	@ 0x24
 801c436:	f7ff ff28 	bl	801c28a <__exponent>
 801c43a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c43c:	4681      	mov	r9, r0
 801c43e:	1813      	adds	r3, r2, r0
 801c440:	2a01      	cmp	r2, #1
 801c442:	6123      	str	r3, [r4, #16]
 801c444:	dc02      	bgt.n	801c44c <_printf_float+0x150>
 801c446:	6822      	ldr	r2, [r4, #0]
 801c448:	07d2      	lsls	r2, r2, #31
 801c44a:	d501      	bpl.n	801c450 <_printf_float+0x154>
 801c44c:	3301      	adds	r3, #1
 801c44e:	6123      	str	r3, [r4, #16]
 801c450:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c454:	2b00      	cmp	r3, #0
 801c456:	d0a2      	beq.n	801c39e <_printf_float+0xa2>
 801c458:	232d      	movs	r3, #45	@ 0x2d
 801c45a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c45e:	e79e      	b.n	801c39e <_printf_float+0xa2>
 801c460:	9a06      	ldr	r2, [sp, #24]
 801c462:	2a47      	cmp	r2, #71	@ 0x47
 801c464:	d1c2      	bne.n	801c3ec <_printf_float+0xf0>
 801c466:	2b00      	cmp	r3, #0
 801c468:	d1c0      	bne.n	801c3ec <_printf_float+0xf0>
 801c46a:	2301      	movs	r3, #1
 801c46c:	e7bd      	b.n	801c3ea <_printf_float+0xee>
 801c46e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c472:	d9db      	bls.n	801c42c <_printf_float+0x130>
 801c474:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c478:	d118      	bne.n	801c4ac <_printf_float+0x1b0>
 801c47a:	2900      	cmp	r1, #0
 801c47c:	6863      	ldr	r3, [r4, #4]
 801c47e:	dd0b      	ble.n	801c498 <_printf_float+0x19c>
 801c480:	6121      	str	r1, [r4, #16]
 801c482:	b913      	cbnz	r3, 801c48a <_printf_float+0x18e>
 801c484:	6822      	ldr	r2, [r4, #0]
 801c486:	07d0      	lsls	r0, r2, #31
 801c488:	d502      	bpl.n	801c490 <_printf_float+0x194>
 801c48a:	3301      	adds	r3, #1
 801c48c:	440b      	add	r3, r1
 801c48e:	6123      	str	r3, [r4, #16]
 801c490:	f04f 0900 	mov.w	r9, #0
 801c494:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c496:	e7db      	b.n	801c450 <_printf_float+0x154>
 801c498:	b913      	cbnz	r3, 801c4a0 <_printf_float+0x1a4>
 801c49a:	6822      	ldr	r2, [r4, #0]
 801c49c:	07d2      	lsls	r2, r2, #31
 801c49e:	d501      	bpl.n	801c4a4 <_printf_float+0x1a8>
 801c4a0:	3302      	adds	r3, #2
 801c4a2:	e7f4      	b.n	801c48e <_printf_float+0x192>
 801c4a4:	2301      	movs	r3, #1
 801c4a6:	e7f2      	b.n	801c48e <_printf_float+0x192>
 801c4a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c4ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c4ae:	4299      	cmp	r1, r3
 801c4b0:	db05      	blt.n	801c4be <_printf_float+0x1c2>
 801c4b2:	6823      	ldr	r3, [r4, #0]
 801c4b4:	6121      	str	r1, [r4, #16]
 801c4b6:	07d8      	lsls	r0, r3, #31
 801c4b8:	d5ea      	bpl.n	801c490 <_printf_float+0x194>
 801c4ba:	1c4b      	adds	r3, r1, #1
 801c4bc:	e7e7      	b.n	801c48e <_printf_float+0x192>
 801c4be:	2900      	cmp	r1, #0
 801c4c0:	bfd4      	ite	le
 801c4c2:	f1c1 0202 	rsble	r2, r1, #2
 801c4c6:	2201      	movgt	r2, #1
 801c4c8:	4413      	add	r3, r2
 801c4ca:	e7e0      	b.n	801c48e <_printf_float+0x192>
 801c4cc:	6823      	ldr	r3, [r4, #0]
 801c4ce:	055a      	lsls	r2, r3, #21
 801c4d0:	d407      	bmi.n	801c4e2 <_printf_float+0x1e6>
 801c4d2:	6923      	ldr	r3, [r4, #16]
 801c4d4:	4642      	mov	r2, r8
 801c4d6:	4631      	mov	r1, r6
 801c4d8:	4628      	mov	r0, r5
 801c4da:	47b8      	blx	r7
 801c4dc:	3001      	adds	r0, #1
 801c4de:	d12b      	bne.n	801c538 <_printf_float+0x23c>
 801c4e0:	e767      	b.n	801c3b2 <_printf_float+0xb6>
 801c4e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c4e6:	f240 80dd 	bls.w	801c6a4 <_printf_float+0x3a8>
 801c4ea:	2200      	movs	r2, #0
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c4f2:	f7f0 faf9 	bl	800cae8 <__aeabi_dcmpeq>
 801c4f6:	2800      	cmp	r0, #0
 801c4f8:	d033      	beq.n	801c562 <_printf_float+0x266>
 801c4fa:	2301      	movs	r3, #1
 801c4fc:	4a36      	ldr	r2, [pc, #216]	@ (801c5d8 <_printf_float+0x2dc>)
 801c4fe:	4631      	mov	r1, r6
 801c500:	4628      	mov	r0, r5
 801c502:	47b8      	blx	r7
 801c504:	3001      	adds	r0, #1
 801c506:	f43f af54 	beq.w	801c3b2 <_printf_float+0xb6>
 801c50a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c50e:	4543      	cmp	r3, r8
 801c510:	db02      	blt.n	801c518 <_printf_float+0x21c>
 801c512:	6823      	ldr	r3, [r4, #0]
 801c514:	07d8      	lsls	r0, r3, #31
 801c516:	d50f      	bpl.n	801c538 <_printf_float+0x23c>
 801c518:	4631      	mov	r1, r6
 801c51a:	4628      	mov	r0, r5
 801c51c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c520:	47b8      	blx	r7
 801c522:	3001      	adds	r0, #1
 801c524:	f43f af45 	beq.w	801c3b2 <_printf_float+0xb6>
 801c528:	f04f 0900 	mov.w	r9, #0
 801c52c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c530:	f104 0a1a 	add.w	sl, r4, #26
 801c534:	45c8      	cmp	r8, r9
 801c536:	dc09      	bgt.n	801c54c <_printf_float+0x250>
 801c538:	6823      	ldr	r3, [r4, #0]
 801c53a:	079b      	lsls	r3, r3, #30
 801c53c:	f100 8103 	bmi.w	801c746 <_printf_float+0x44a>
 801c540:	68e0      	ldr	r0, [r4, #12]
 801c542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c544:	4298      	cmp	r0, r3
 801c546:	bfb8      	it	lt
 801c548:	4618      	movlt	r0, r3
 801c54a:	e734      	b.n	801c3b6 <_printf_float+0xba>
 801c54c:	2301      	movs	r3, #1
 801c54e:	4652      	mov	r2, sl
 801c550:	4631      	mov	r1, r6
 801c552:	4628      	mov	r0, r5
 801c554:	47b8      	blx	r7
 801c556:	3001      	adds	r0, #1
 801c558:	f43f af2b 	beq.w	801c3b2 <_printf_float+0xb6>
 801c55c:	f109 0901 	add.w	r9, r9, #1
 801c560:	e7e8      	b.n	801c534 <_printf_float+0x238>
 801c562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c564:	2b00      	cmp	r3, #0
 801c566:	dc39      	bgt.n	801c5dc <_printf_float+0x2e0>
 801c568:	2301      	movs	r3, #1
 801c56a:	4a1b      	ldr	r2, [pc, #108]	@ (801c5d8 <_printf_float+0x2dc>)
 801c56c:	4631      	mov	r1, r6
 801c56e:	4628      	mov	r0, r5
 801c570:	47b8      	blx	r7
 801c572:	3001      	adds	r0, #1
 801c574:	f43f af1d 	beq.w	801c3b2 <_printf_float+0xb6>
 801c578:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c57c:	ea59 0303 	orrs.w	r3, r9, r3
 801c580:	d102      	bne.n	801c588 <_printf_float+0x28c>
 801c582:	6823      	ldr	r3, [r4, #0]
 801c584:	07d9      	lsls	r1, r3, #31
 801c586:	d5d7      	bpl.n	801c538 <_printf_float+0x23c>
 801c588:	4631      	mov	r1, r6
 801c58a:	4628      	mov	r0, r5
 801c58c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c590:	47b8      	blx	r7
 801c592:	3001      	adds	r0, #1
 801c594:	f43f af0d 	beq.w	801c3b2 <_printf_float+0xb6>
 801c598:	f04f 0a00 	mov.w	sl, #0
 801c59c:	f104 0b1a 	add.w	fp, r4, #26
 801c5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5a2:	425b      	negs	r3, r3
 801c5a4:	4553      	cmp	r3, sl
 801c5a6:	dc01      	bgt.n	801c5ac <_printf_float+0x2b0>
 801c5a8:	464b      	mov	r3, r9
 801c5aa:	e793      	b.n	801c4d4 <_printf_float+0x1d8>
 801c5ac:	2301      	movs	r3, #1
 801c5ae:	465a      	mov	r2, fp
 801c5b0:	4631      	mov	r1, r6
 801c5b2:	4628      	mov	r0, r5
 801c5b4:	47b8      	blx	r7
 801c5b6:	3001      	adds	r0, #1
 801c5b8:	f43f aefb 	beq.w	801c3b2 <_printf_float+0xb6>
 801c5bc:	f10a 0a01 	add.w	sl, sl, #1
 801c5c0:	e7ee      	b.n	801c5a0 <_printf_float+0x2a4>
 801c5c2:	bf00      	nop
 801c5c4:	7fefffff 	.word	0x7fefffff
 801c5c8:	0801f3c0 	.word	0x0801f3c0
 801c5cc:	0801f3c4 	.word	0x0801f3c4
 801c5d0:	0801f3c8 	.word	0x0801f3c8
 801c5d4:	0801f3cc 	.word	0x0801f3cc
 801c5d8:	0801f3d0 	.word	0x0801f3d0
 801c5dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c5de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c5e2:	4553      	cmp	r3, sl
 801c5e4:	bfa8      	it	ge
 801c5e6:	4653      	movge	r3, sl
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	4699      	mov	r9, r3
 801c5ec:	dc36      	bgt.n	801c65c <_printf_float+0x360>
 801c5ee:	f04f 0b00 	mov.w	fp, #0
 801c5f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c5f6:	f104 021a 	add.w	r2, r4, #26
 801c5fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c5fc:	9306      	str	r3, [sp, #24]
 801c5fe:	eba3 0309 	sub.w	r3, r3, r9
 801c602:	455b      	cmp	r3, fp
 801c604:	dc31      	bgt.n	801c66a <_printf_float+0x36e>
 801c606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c608:	459a      	cmp	sl, r3
 801c60a:	dc3a      	bgt.n	801c682 <_printf_float+0x386>
 801c60c:	6823      	ldr	r3, [r4, #0]
 801c60e:	07da      	lsls	r2, r3, #31
 801c610:	d437      	bmi.n	801c682 <_printf_float+0x386>
 801c612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c614:	ebaa 0903 	sub.w	r9, sl, r3
 801c618:	9b06      	ldr	r3, [sp, #24]
 801c61a:	ebaa 0303 	sub.w	r3, sl, r3
 801c61e:	4599      	cmp	r9, r3
 801c620:	bfa8      	it	ge
 801c622:	4699      	movge	r9, r3
 801c624:	f1b9 0f00 	cmp.w	r9, #0
 801c628:	dc33      	bgt.n	801c692 <_printf_float+0x396>
 801c62a:	f04f 0800 	mov.w	r8, #0
 801c62e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c632:	f104 0b1a 	add.w	fp, r4, #26
 801c636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c638:	ebaa 0303 	sub.w	r3, sl, r3
 801c63c:	eba3 0309 	sub.w	r3, r3, r9
 801c640:	4543      	cmp	r3, r8
 801c642:	f77f af79 	ble.w	801c538 <_printf_float+0x23c>
 801c646:	2301      	movs	r3, #1
 801c648:	465a      	mov	r2, fp
 801c64a:	4631      	mov	r1, r6
 801c64c:	4628      	mov	r0, r5
 801c64e:	47b8      	blx	r7
 801c650:	3001      	adds	r0, #1
 801c652:	f43f aeae 	beq.w	801c3b2 <_printf_float+0xb6>
 801c656:	f108 0801 	add.w	r8, r8, #1
 801c65a:	e7ec      	b.n	801c636 <_printf_float+0x33a>
 801c65c:	4642      	mov	r2, r8
 801c65e:	4631      	mov	r1, r6
 801c660:	4628      	mov	r0, r5
 801c662:	47b8      	blx	r7
 801c664:	3001      	adds	r0, #1
 801c666:	d1c2      	bne.n	801c5ee <_printf_float+0x2f2>
 801c668:	e6a3      	b.n	801c3b2 <_printf_float+0xb6>
 801c66a:	2301      	movs	r3, #1
 801c66c:	4631      	mov	r1, r6
 801c66e:	4628      	mov	r0, r5
 801c670:	9206      	str	r2, [sp, #24]
 801c672:	47b8      	blx	r7
 801c674:	3001      	adds	r0, #1
 801c676:	f43f ae9c 	beq.w	801c3b2 <_printf_float+0xb6>
 801c67a:	f10b 0b01 	add.w	fp, fp, #1
 801c67e:	9a06      	ldr	r2, [sp, #24]
 801c680:	e7bb      	b.n	801c5fa <_printf_float+0x2fe>
 801c682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c686:	4631      	mov	r1, r6
 801c688:	4628      	mov	r0, r5
 801c68a:	47b8      	blx	r7
 801c68c:	3001      	adds	r0, #1
 801c68e:	d1c0      	bne.n	801c612 <_printf_float+0x316>
 801c690:	e68f      	b.n	801c3b2 <_printf_float+0xb6>
 801c692:	9a06      	ldr	r2, [sp, #24]
 801c694:	464b      	mov	r3, r9
 801c696:	4631      	mov	r1, r6
 801c698:	4628      	mov	r0, r5
 801c69a:	4442      	add	r2, r8
 801c69c:	47b8      	blx	r7
 801c69e:	3001      	adds	r0, #1
 801c6a0:	d1c3      	bne.n	801c62a <_printf_float+0x32e>
 801c6a2:	e686      	b.n	801c3b2 <_printf_float+0xb6>
 801c6a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c6a8:	f1ba 0f01 	cmp.w	sl, #1
 801c6ac:	dc01      	bgt.n	801c6b2 <_printf_float+0x3b6>
 801c6ae:	07db      	lsls	r3, r3, #31
 801c6b0:	d536      	bpl.n	801c720 <_printf_float+0x424>
 801c6b2:	2301      	movs	r3, #1
 801c6b4:	4642      	mov	r2, r8
 801c6b6:	4631      	mov	r1, r6
 801c6b8:	4628      	mov	r0, r5
 801c6ba:	47b8      	blx	r7
 801c6bc:	3001      	adds	r0, #1
 801c6be:	f43f ae78 	beq.w	801c3b2 <_printf_float+0xb6>
 801c6c2:	4631      	mov	r1, r6
 801c6c4:	4628      	mov	r0, r5
 801c6c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c6ca:	47b8      	blx	r7
 801c6cc:	3001      	adds	r0, #1
 801c6ce:	f43f ae70 	beq.w	801c3b2 <_printf_float+0xb6>
 801c6d2:	2200      	movs	r2, #0
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c6da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c6de:	f7f0 fa03 	bl	800cae8 <__aeabi_dcmpeq>
 801c6e2:	b9c0      	cbnz	r0, 801c716 <_printf_float+0x41a>
 801c6e4:	4653      	mov	r3, sl
 801c6e6:	f108 0201 	add.w	r2, r8, #1
 801c6ea:	4631      	mov	r1, r6
 801c6ec:	4628      	mov	r0, r5
 801c6ee:	47b8      	blx	r7
 801c6f0:	3001      	adds	r0, #1
 801c6f2:	d10c      	bne.n	801c70e <_printf_float+0x412>
 801c6f4:	e65d      	b.n	801c3b2 <_printf_float+0xb6>
 801c6f6:	2301      	movs	r3, #1
 801c6f8:	465a      	mov	r2, fp
 801c6fa:	4631      	mov	r1, r6
 801c6fc:	4628      	mov	r0, r5
 801c6fe:	47b8      	blx	r7
 801c700:	3001      	adds	r0, #1
 801c702:	f43f ae56 	beq.w	801c3b2 <_printf_float+0xb6>
 801c706:	f108 0801 	add.w	r8, r8, #1
 801c70a:	45d0      	cmp	r8, sl
 801c70c:	dbf3      	blt.n	801c6f6 <_printf_float+0x3fa>
 801c70e:	464b      	mov	r3, r9
 801c710:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c714:	e6df      	b.n	801c4d6 <_printf_float+0x1da>
 801c716:	f04f 0800 	mov.w	r8, #0
 801c71a:	f104 0b1a 	add.w	fp, r4, #26
 801c71e:	e7f4      	b.n	801c70a <_printf_float+0x40e>
 801c720:	2301      	movs	r3, #1
 801c722:	4642      	mov	r2, r8
 801c724:	e7e1      	b.n	801c6ea <_printf_float+0x3ee>
 801c726:	2301      	movs	r3, #1
 801c728:	464a      	mov	r2, r9
 801c72a:	4631      	mov	r1, r6
 801c72c:	4628      	mov	r0, r5
 801c72e:	47b8      	blx	r7
 801c730:	3001      	adds	r0, #1
 801c732:	f43f ae3e 	beq.w	801c3b2 <_printf_float+0xb6>
 801c736:	f108 0801 	add.w	r8, r8, #1
 801c73a:	68e3      	ldr	r3, [r4, #12]
 801c73c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c73e:	1a5b      	subs	r3, r3, r1
 801c740:	4543      	cmp	r3, r8
 801c742:	dcf0      	bgt.n	801c726 <_printf_float+0x42a>
 801c744:	e6fc      	b.n	801c540 <_printf_float+0x244>
 801c746:	f04f 0800 	mov.w	r8, #0
 801c74a:	f104 0919 	add.w	r9, r4, #25
 801c74e:	e7f4      	b.n	801c73a <_printf_float+0x43e>

0801c750 <_printf_common>:
 801c750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c754:	4616      	mov	r6, r2
 801c756:	4698      	mov	r8, r3
 801c758:	688a      	ldr	r2, [r1, #8]
 801c75a:	4607      	mov	r7, r0
 801c75c:	690b      	ldr	r3, [r1, #16]
 801c75e:	460c      	mov	r4, r1
 801c760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c764:	4293      	cmp	r3, r2
 801c766:	bfb8      	it	lt
 801c768:	4613      	movlt	r3, r2
 801c76a:	6033      	str	r3, [r6, #0]
 801c76c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c770:	b10a      	cbz	r2, 801c776 <_printf_common+0x26>
 801c772:	3301      	adds	r3, #1
 801c774:	6033      	str	r3, [r6, #0]
 801c776:	6823      	ldr	r3, [r4, #0]
 801c778:	0699      	lsls	r1, r3, #26
 801c77a:	bf42      	ittt	mi
 801c77c:	6833      	ldrmi	r3, [r6, #0]
 801c77e:	3302      	addmi	r3, #2
 801c780:	6033      	strmi	r3, [r6, #0]
 801c782:	6825      	ldr	r5, [r4, #0]
 801c784:	f015 0506 	ands.w	r5, r5, #6
 801c788:	d106      	bne.n	801c798 <_printf_common+0x48>
 801c78a:	f104 0a19 	add.w	sl, r4, #25
 801c78e:	68e3      	ldr	r3, [r4, #12]
 801c790:	6832      	ldr	r2, [r6, #0]
 801c792:	1a9b      	subs	r3, r3, r2
 801c794:	42ab      	cmp	r3, r5
 801c796:	dc2b      	bgt.n	801c7f0 <_printf_common+0xa0>
 801c798:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c79c:	6822      	ldr	r2, [r4, #0]
 801c79e:	3b00      	subs	r3, #0
 801c7a0:	bf18      	it	ne
 801c7a2:	2301      	movne	r3, #1
 801c7a4:	0692      	lsls	r2, r2, #26
 801c7a6:	d430      	bmi.n	801c80a <_printf_common+0xba>
 801c7a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c7ac:	4641      	mov	r1, r8
 801c7ae:	4638      	mov	r0, r7
 801c7b0:	47c8      	blx	r9
 801c7b2:	3001      	adds	r0, #1
 801c7b4:	d023      	beq.n	801c7fe <_printf_common+0xae>
 801c7b6:	6823      	ldr	r3, [r4, #0]
 801c7b8:	341a      	adds	r4, #26
 801c7ba:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801c7be:	f003 0306 	and.w	r3, r3, #6
 801c7c2:	2b04      	cmp	r3, #4
 801c7c4:	bf0a      	itet	eq
 801c7c6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801c7ca:	2500      	movne	r5, #0
 801c7cc:	6833      	ldreq	r3, [r6, #0]
 801c7ce:	f04f 0600 	mov.w	r6, #0
 801c7d2:	bf08      	it	eq
 801c7d4:	1aed      	subeq	r5, r5, r3
 801c7d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801c7da:	bf08      	it	eq
 801c7dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c7e0:	4293      	cmp	r3, r2
 801c7e2:	bfc4      	itt	gt
 801c7e4:	1a9b      	subgt	r3, r3, r2
 801c7e6:	18ed      	addgt	r5, r5, r3
 801c7e8:	42b5      	cmp	r5, r6
 801c7ea:	d11a      	bne.n	801c822 <_printf_common+0xd2>
 801c7ec:	2000      	movs	r0, #0
 801c7ee:	e008      	b.n	801c802 <_printf_common+0xb2>
 801c7f0:	2301      	movs	r3, #1
 801c7f2:	4652      	mov	r2, sl
 801c7f4:	4641      	mov	r1, r8
 801c7f6:	4638      	mov	r0, r7
 801c7f8:	47c8      	blx	r9
 801c7fa:	3001      	adds	r0, #1
 801c7fc:	d103      	bne.n	801c806 <_printf_common+0xb6>
 801c7fe:	f04f 30ff 	mov.w	r0, #4294967295
 801c802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c806:	3501      	adds	r5, #1
 801c808:	e7c1      	b.n	801c78e <_printf_common+0x3e>
 801c80a:	18e1      	adds	r1, r4, r3
 801c80c:	1c5a      	adds	r2, r3, #1
 801c80e:	2030      	movs	r0, #48	@ 0x30
 801c810:	3302      	adds	r3, #2
 801c812:	4422      	add	r2, r4
 801c814:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c81c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c820:	e7c2      	b.n	801c7a8 <_printf_common+0x58>
 801c822:	2301      	movs	r3, #1
 801c824:	4622      	mov	r2, r4
 801c826:	4641      	mov	r1, r8
 801c828:	4638      	mov	r0, r7
 801c82a:	47c8      	blx	r9
 801c82c:	3001      	adds	r0, #1
 801c82e:	d0e6      	beq.n	801c7fe <_printf_common+0xae>
 801c830:	3601      	adds	r6, #1
 801c832:	e7d9      	b.n	801c7e8 <_printf_common+0x98>

0801c834 <_printf_i>:
 801c834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c838:	7e0f      	ldrb	r7, [r1, #24]
 801c83a:	4691      	mov	r9, r2
 801c83c:	4680      	mov	r8, r0
 801c83e:	460c      	mov	r4, r1
 801c840:	2f78      	cmp	r7, #120	@ 0x78
 801c842:	469a      	mov	sl, r3
 801c844:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c84a:	d807      	bhi.n	801c85c <_printf_i+0x28>
 801c84c:	2f62      	cmp	r7, #98	@ 0x62
 801c84e:	d80a      	bhi.n	801c866 <_printf_i+0x32>
 801c850:	2f00      	cmp	r7, #0
 801c852:	f000 80d2 	beq.w	801c9fa <_printf_i+0x1c6>
 801c856:	2f58      	cmp	r7, #88	@ 0x58
 801c858:	f000 80b9 	beq.w	801c9ce <_printf_i+0x19a>
 801c85c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c864:	e03a      	b.n	801c8dc <_printf_i+0xa8>
 801c866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c86a:	2b15      	cmp	r3, #21
 801c86c:	d8f6      	bhi.n	801c85c <_printf_i+0x28>
 801c86e:	a101      	add	r1, pc, #4	@ (adr r1, 801c874 <_printf_i+0x40>)
 801c870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c874:	0801c8cd 	.word	0x0801c8cd
 801c878:	0801c8e1 	.word	0x0801c8e1
 801c87c:	0801c85d 	.word	0x0801c85d
 801c880:	0801c85d 	.word	0x0801c85d
 801c884:	0801c85d 	.word	0x0801c85d
 801c888:	0801c85d 	.word	0x0801c85d
 801c88c:	0801c8e1 	.word	0x0801c8e1
 801c890:	0801c85d 	.word	0x0801c85d
 801c894:	0801c85d 	.word	0x0801c85d
 801c898:	0801c85d 	.word	0x0801c85d
 801c89c:	0801c85d 	.word	0x0801c85d
 801c8a0:	0801c9e1 	.word	0x0801c9e1
 801c8a4:	0801c90b 	.word	0x0801c90b
 801c8a8:	0801c99b 	.word	0x0801c99b
 801c8ac:	0801c85d 	.word	0x0801c85d
 801c8b0:	0801c85d 	.word	0x0801c85d
 801c8b4:	0801ca03 	.word	0x0801ca03
 801c8b8:	0801c85d 	.word	0x0801c85d
 801c8bc:	0801c90b 	.word	0x0801c90b
 801c8c0:	0801c85d 	.word	0x0801c85d
 801c8c4:	0801c85d 	.word	0x0801c85d
 801c8c8:	0801c9a3 	.word	0x0801c9a3
 801c8cc:	6833      	ldr	r3, [r6, #0]
 801c8ce:	1d1a      	adds	r2, r3, #4
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	6032      	str	r2, [r6, #0]
 801c8d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c8d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c8dc:	2301      	movs	r3, #1
 801c8de:	e09d      	b.n	801ca1c <_printf_i+0x1e8>
 801c8e0:	6833      	ldr	r3, [r6, #0]
 801c8e2:	6820      	ldr	r0, [r4, #0]
 801c8e4:	1d19      	adds	r1, r3, #4
 801c8e6:	6031      	str	r1, [r6, #0]
 801c8e8:	0606      	lsls	r6, r0, #24
 801c8ea:	d501      	bpl.n	801c8f0 <_printf_i+0xbc>
 801c8ec:	681d      	ldr	r5, [r3, #0]
 801c8ee:	e003      	b.n	801c8f8 <_printf_i+0xc4>
 801c8f0:	0645      	lsls	r5, r0, #25
 801c8f2:	d5fb      	bpl.n	801c8ec <_printf_i+0xb8>
 801c8f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c8f8:	2d00      	cmp	r5, #0
 801c8fa:	da03      	bge.n	801c904 <_printf_i+0xd0>
 801c8fc:	232d      	movs	r3, #45	@ 0x2d
 801c8fe:	426d      	negs	r5, r5
 801c900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c904:	4859      	ldr	r0, [pc, #356]	@ (801ca6c <_printf_i+0x238>)
 801c906:	230a      	movs	r3, #10
 801c908:	e011      	b.n	801c92e <_printf_i+0xfa>
 801c90a:	6821      	ldr	r1, [r4, #0]
 801c90c:	6833      	ldr	r3, [r6, #0]
 801c90e:	0608      	lsls	r0, r1, #24
 801c910:	f853 5b04 	ldr.w	r5, [r3], #4
 801c914:	d402      	bmi.n	801c91c <_printf_i+0xe8>
 801c916:	0649      	lsls	r1, r1, #25
 801c918:	bf48      	it	mi
 801c91a:	b2ad      	uxthmi	r5, r5
 801c91c:	2f6f      	cmp	r7, #111	@ 0x6f
 801c91e:	6033      	str	r3, [r6, #0]
 801c920:	4852      	ldr	r0, [pc, #328]	@ (801ca6c <_printf_i+0x238>)
 801c922:	bf14      	ite	ne
 801c924:	230a      	movne	r3, #10
 801c926:	2308      	moveq	r3, #8
 801c928:	2100      	movs	r1, #0
 801c92a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c92e:	6866      	ldr	r6, [r4, #4]
 801c930:	2e00      	cmp	r6, #0
 801c932:	60a6      	str	r6, [r4, #8]
 801c934:	bfa2      	ittt	ge
 801c936:	6821      	ldrge	r1, [r4, #0]
 801c938:	f021 0104 	bicge.w	r1, r1, #4
 801c93c:	6021      	strge	r1, [r4, #0]
 801c93e:	b90d      	cbnz	r5, 801c944 <_printf_i+0x110>
 801c940:	2e00      	cmp	r6, #0
 801c942:	d04b      	beq.n	801c9dc <_printf_i+0x1a8>
 801c944:	4616      	mov	r6, r2
 801c946:	fbb5 f1f3 	udiv	r1, r5, r3
 801c94a:	fb03 5711 	mls	r7, r3, r1, r5
 801c94e:	5dc7      	ldrb	r7, [r0, r7]
 801c950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c954:	462f      	mov	r7, r5
 801c956:	460d      	mov	r5, r1
 801c958:	42bb      	cmp	r3, r7
 801c95a:	d9f4      	bls.n	801c946 <_printf_i+0x112>
 801c95c:	2b08      	cmp	r3, #8
 801c95e:	d10b      	bne.n	801c978 <_printf_i+0x144>
 801c960:	6823      	ldr	r3, [r4, #0]
 801c962:	07df      	lsls	r7, r3, #31
 801c964:	d508      	bpl.n	801c978 <_printf_i+0x144>
 801c966:	6923      	ldr	r3, [r4, #16]
 801c968:	6861      	ldr	r1, [r4, #4]
 801c96a:	4299      	cmp	r1, r3
 801c96c:	bfde      	ittt	le
 801c96e:	2330      	movle	r3, #48	@ 0x30
 801c970:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c974:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c978:	1b92      	subs	r2, r2, r6
 801c97a:	6122      	str	r2, [r4, #16]
 801c97c:	464b      	mov	r3, r9
 801c97e:	aa03      	add	r2, sp, #12
 801c980:	4621      	mov	r1, r4
 801c982:	4640      	mov	r0, r8
 801c984:	f8cd a000 	str.w	sl, [sp]
 801c988:	f7ff fee2 	bl	801c750 <_printf_common>
 801c98c:	3001      	adds	r0, #1
 801c98e:	d14a      	bne.n	801ca26 <_printf_i+0x1f2>
 801c990:	f04f 30ff 	mov.w	r0, #4294967295
 801c994:	b004      	add	sp, #16
 801c996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c99a:	6823      	ldr	r3, [r4, #0]
 801c99c:	f043 0320 	orr.w	r3, r3, #32
 801c9a0:	6023      	str	r3, [r4, #0]
 801c9a2:	2778      	movs	r7, #120	@ 0x78
 801c9a4:	4832      	ldr	r0, [pc, #200]	@ (801ca70 <_printf_i+0x23c>)
 801c9a6:	6823      	ldr	r3, [r4, #0]
 801c9a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c9ac:	061f      	lsls	r7, r3, #24
 801c9ae:	6831      	ldr	r1, [r6, #0]
 801c9b0:	f851 5b04 	ldr.w	r5, [r1], #4
 801c9b4:	d402      	bmi.n	801c9bc <_printf_i+0x188>
 801c9b6:	065f      	lsls	r7, r3, #25
 801c9b8:	bf48      	it	mi
 801c9ba:	b2ad      	uxthmi	r5, r5
 801c9bc:	6031      	str	r1, [r6, #0]
 801c9be:	07d9      	lsls	r1, r3, #31
 801c9c0:	bf44      	itt	mi
 801c9c2:	f043 0320 	orrmi.w	r3, r3, #32
 801c9c6:	6023      	strmi	r3, [r4, #0]
 801c9c8:	b11d      	cbz	r5, 801c9d2 <_printf_i+0x19e>
 801c9ca:	2310      	movs	r3, #16
 801c9cc:	e7ac      	b.n	801c928 <_printf_i+0xf4>
 801c9ce:	4827      	ldr	r0, [pc, #156]	@ (801ca6c <_printf_i+0x238>)
 801c9d0:	e7e9      	b.n	801c9a6 <_printf_i+0x172>
 801c9d2:	6823      	ldr	r3, [r4, #0]
 801c9d4:	f023 0320 	bic.w	r3, r3, #32
 801c9d8:	6023      	str	r3, [r4, #0]
 801c9da:	e7f6      	b.n	801c9ca <_printf_i+0x196>
 801c9dc:	4616      	mov	r6, r2
 801c9de:	e7bd      	b.n	801c95c <_printf_i+0x128>
 801c9e0:	6833      	ldr	r3, [r6, #0]
 801c9e2:	6825      	ldr	r5, [r4, #0]
 801c9e4:	1d18      	adds	r0, r3, #4
 801c9e6:	6961      	ldr	r1, [r4, #20]
 801c9e8:	6030      	str	r0, [r6, #0]
 801c9ea:	062e      	lsls	r6, r5, #24
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	d501      	bpl.n	801c9f4 <_printf_i+0x1c0>
 801c9f0:	6019      	str	r1, [r3, #0]
 801c9f2:	e002      	b.n	801c9fa <_printf_i+0x1c6>
 801c9f4:	0668      	lsls	r0, r5, #25
 801c9f6:	d5fb      	bpl.n	801c9f0 <_printf_i+0x1bc>
 801c9f8:	8019      	strh	r1, [r3, #0]
 801c9fa:	2300      	movs	r3, #0
 801c9fc:	4616      	mov	r6, r2
 801c9fe:	6123      	str	r3, [r4, #16]
 801ca00:	e7bc      	b.n	801c97c <_printf_i+0x148>
 801ca02:	6833      	ldr	r3, [r6, #0]
 801ca04:	2100      	movs	r1, #0
 801ca06:	1d1a      	adds	r2, r3, #4
 801ca08:	6032      	str	r2, [r6, #0]
 801ca0a:	681e      	ldr	r6, [r3, #0]
 801ca0c:	6862      	ldr	r2, [r4, #4]
 801ca0e:	4630      	mov	r0, r6
 801ca10:	f000 f9eb 	bl	801cdea <memchr>
 801ca14:	b108      	cbz	r0, 801ca1a <_printf_i+0x1e6>
 801ca16:	1b80      	subs	r0, r0, r6
 801ca18:	6060      	str	r0, [r4, #4]
 801ca1a:	6863      	ldr	r3, [r4, #4]
 801ca1c:	6123      	str	r3, [r4, #16]
 801ca1e:	2300      	movs	r3, #0
 801ca20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ca24:	e7aa      	b.n	801c97c <_printf_i+0x148>
 801ca26:	6923      	ldr	r3, [r4, #16]
 801ca28:	4632      	mov	r2, r6
 801ca2a:	4649      	mov	r1, r9
 801ca2c:	4640      	mov	r0, r8
 801ca2e:	47d0      	blx	sl
 801ca30:	3001      	adds	r0, #1
 801ca32:	d0ad      	beq.n	801c990 <_printf_i+0x15c>
 801ca34:	6823      	ldr	r3, [r4, #0]
 801ca36:	079b      	lsls	r3, r3, #30
 801ca38:	d413      	bmi.n	801ca62 <_printf_i+0x22e>
 801ca3a:	68e0      	ldr	r0, [r4, #12]
 801ca3c:	9b03      	ldr	r3, [sp, #12]
 801ca3e:	4298      	cmp	r0, r3
 801ca40:	bfb8      	it	lt
 801ca42:	4618      	movlt	r0, r3
 801ca44:	e7a6      	b.n	801c994 <_printf_i+0x160>
 801ca46:	2301      	movs	r3, #1
 801ca48:	4632      	mov	r2, r6
 801ca4a:	4649      	mov	r1, r9
 801ca4c:	4640      	mov	r0, r8
 801ca4e:	47d0      	blx	sl
 801ca50:	3001      	adds	r0, #1
 801ca52:	d09d      	beq.n	801c990 <_printf_i+0x15c>
 801ca54:	3501      	adds	r5, #1
 801ca56:	68e3      	ldr	r3, [r4, #12]
 801ca58:	9903      	ldr	r1, [sp, #12]
 801ca5a:	1a5b      	subs	r3, r3, r1
 801ca5c:	42ab      	cmp	r3, r5
 801ca5e:	dcf2      	bgt.n	801ca46 <_printf_i+0x212>
 801ca60:	e7eb      	b.n	801ca3a <_printf_i+0x206>
 801ca62:	2500      	movs	r5, #0
 801ca64:	f104 0619 	add.w	r6, r4, #25
 801ca68:	e7f5      	b.n	801ca56 <_printf_i+0x222>
 801ca6a:	bf00      	nop
 801ca6c:	0801f3d2 	.word	0x0801f3d2
 801ca70:	0801f3e3 	.word	0x0801f3e3

0801ca74 <std>:
 801ca74:	2300      	movs	r3, #0
 801ca76:	b510      	push	{r4, lr}
 801ca78:	4604      	mov	r4, r0
 801ca7a:	6083      	str	r3, [r0, #8]
 801ca7c:	8181      	strh	r1, [r0, #12]
 801ca7e:	4619      	mov	r1, r3
 801ca80:	6643      	str	r3, [r0, #100]	@ 0x64
 801ca82:	81c2      	strh	r2, [r0, #14]
 801ca84:	2208      	movs	r2, #8
 801ca86:	6183      	str	r3, [r0, #24]
 801ca88:	e9c0 3300 	strd	r3, r3, [r0]
 801ca8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ca90:	305c      	adds	r0, #92	@ 0x5c
 801ca92:	f000 f914 	bl	801ccbe <memset>
 801ca96:	4b0d      	ldr	r3, [pc, #52]	@ (801cacc <std+0x58>)
 801ca98:	6224      	str	r4, [r4, #32]
 801ca9a:	6263      	str	r3, [r4, #36]	@ 0x24
 801ca9c:	4b0c      	ldr	r3, [pc, #48]	@ (801cad0 <std+0x5c>)
 801ca9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801caa0:	4b0c      	ldr	r3, [pc, #48]	@ (801cad4 <std+0x60>)
 801caa2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801caa4:	4b0c      	ldr	r3, [pc, #48]	@ (801cad8 <std+0x64>)
 801caa6:	6323      	str	r3, [r4, #48]	@ 0x30
 801caa8:	4b0c      	ldr	r3, [pc, #48]	@ (801cadc <std+0x68>)
 801caaa:	429c      	cmp	r4, r3
 801caac:	d006      	beq.n	801cabc <std+0x48>
 801caae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801cab2:	4294      	cmp	r4, r2
 801cab4:	d002      	beq.n	801cabc <std+0x48>
 801cab6:	33d0      	adds	r3, #208	@ 0xd0
 801cab8:	429c      	cmp	r4, r3
 801caba:	d105      	bne.n	801cac8 <std+0x54>
 801cabc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cac4:	f000 b98e 	b.w	801cde4 <__retarget_lock_init_recursive>
 801cac8:	bd10      	pop	{r4, pc}
 801caca:	bf00      	nop
 801cacc:	0801cc39 	.word	0x0801cc39
 801cad0:	0801cc5b 	.word	0x0801cc5b
 801cad4:	0801cc93 	.word	0x0801cc93
 801cad8:	0801ccb7 	.word	0x0801ccb7
 801cadc:	20005bf4 	.word	0x20005bf4

0801cae0 <stdio_exit_handler>:
 801cae0:	4a02      	ldr	r2, [pc, #8]	@ (801caec <stdio_exit_handler+0xc>)
 801cae2:	4903      	ldr	r1, [pc, #12]	@ (801caf0 <stdio_exit_handler+0x10>)
 801cae4:	4803      	ldr	r0, [pc, #12]	@ (801caf4 <stdio_exit_handler+0x14>)
 801cae6:	f000 b869 	b.w	801cbbc <_fwalk_sglue>
 801caea:	bf00      	nop
 801caec:	200000b4 	.word	0x200000b4
 801caf0:	0801e791 	.word	0x0801e791
 801caf4:	200000c4 	.word	0x200000c4

0801caf8 <cleanup_stdio>:
 801caf8:	6841      	ldr	r1, [r0, #4]
 801cafa:	4b0c      	ldr	r3, [pc, #48]	@ (801cb2c <cleanup_stdio+0x34>)
 801cafc:	4299      	cmp	r1, r3
 801cafe:	b510      	push	{r4, lr}
 801cb00:	4604      	mov	r4, r0
 801cb02:	d001      	beq.n	801cb08 <cleanup_stdio+0x10>
 801cb04:	f001 fe44 	bl	801e790 <_fflush_r>
 801cb08:	68a1      	ldr	r1, [r4, #8]
 801cb0a:	4b09      	ldr	r3, [pc, #36]	@ (801cb30 <cleanup_stdio+0x38>)
 801cb0c:	4299      	cmp	r1, r3
 801cb0e:	d002      	beq.n	801cb16 <cleanup_stdio+0x1e>
 801cb10:	4620      	mov	r0, r4
 801cb12:	f001 fe3d 	bl	801e790 <_fflush_r>
 801cb16:	68e1      	ldr	r1, [r4, #12]
 801cb18:	4b06      	ldr	r3, [pc, #24]	@ (801cb34 <cleanup_stdio+0x3c>)
 801cb1a:	4299      	cmp	r1, r3
 801cb1c:	d004      	beq.n	801cb28 <cleanup_stdio+0x30>
 801cb1e:	4620      	mov	r0, r4
 801cb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb24:	f001 be34 	b.w	801e790 <_fflush_r>
 801cb28:	bd10      	pop	{r4, pc}
 801cb2a:	bf00      	nop
 801cb2c:	20005bf4 	.word	0x20005bf4
 801cb30:	20005c5c 	.word	0x20005c5c
 801cb34:	20005cc4 	.word	0x20005cc4

0801cb38 <global_stdio_init.part.0>:
 801cb38:	b510      	push	{r4, lr}
 801cb3a:	4b0b      	ldr	r3, [pc, #44]	@ (801cb68 <global_stdio_init.part.0+0x30>)
 801cb3c:	2104      	movs	r1, #4
 801cb3e:	4c0b      	ldr	r4, [pc, #44]	@ (801cb6c <global_stdio_init.part.0+0x34>)
 801cb40:	4a0b      	ldr	r2, [pc, #44]	@ (801cb70 <global_stdio_init.part.0+0x38>)
 801cb42:	4620      	mov	r0, r4
 801cb44:	601a      	str	r2, [r3, #0]
 801cb46:	2200      	movs	r2, #0
 801cb48:	f7ff ff94 	bl	801ca74 <std>
 801cb4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cb50:	2201      	movs	r2, #1
 801cb52:	2109      	movs	r1, #9
 801cb54:	f7ff ff8e 	bl	801ca74 <std>
 801cb58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cb5c:	2202      	movs	r2, #2
 801cb5e:	2112      	movs	r1, #18
 801cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb64:	f7ff bf86 	b.w	801ca74 <std>
 801cb68:	20005d2c 	.word	0x20005d2c
 801cb6c:	20005bf4 	.word	0x20005bf4
 801cb70:	0801cae1 	.word	0x0801cae1

0801cb74 <__sfp_lock_acquire>:
 801cb74:	4801      	ldr	r0, [pc, #4]	@ (801cb7c <__sfp_lock_acquire+0x8>)
 801cb76:	f000 b936 	b.w	801cde6 <__retarget_lock_acquire_recursive>
 801cb7a:	bf00      	nop
 801cb7c:	20005d35 	.word	0x20005d35

0801cb80 <__sfp_lock_release>:
 801cb80:	4801      	ldr	r0, [pc, #4]	@ (801cb88 <__sfp_lock_release+0x8>)
 801cb82:	f000 b931 	b.w	801cde8 <__retarget_lock_release_recursive>
 801cb86:	bf00      	nop
 801cb88:	20005d35 	.word	0x20005d35

0801cb8c <__sinit>:
 801cb8c:	b510      	push	{r4, lr}
 801cb8e:	4604      	mov	r4, r0
 801cb90:	f7ff fff0 	bl	801cb74 <__sfp_lock_acquire>
 801cb94:	6a23      	ldr	r3, [r4, #32]
 801cb96:	b11b      	cbz	r3, 801cba0 <__sinit+0x14>
 801cb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb9c:	f7ff bff0 	b.w	801cb80 <__sfp_lock_release>
 801cba0:	4b04      	ldr	r3, [pc, #16]	@ (801cbb4 <__sinit+0x28>)
 801cba2:	6223      	str	r3, [r4, #32]
 801cba4:	4b04      	ldr	r3, [pc, #16]	@ (801cbb8 <__sinit+0x2c>)
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d1f5      	bne.n	801cb98 <__sinit+0xc>
 801cbac:	f7ff ffc4 	bl	801cb38 <global_stdio_init.part.0>
 801cbb0:	e7f2      	b.n	801cb98 <__sinit+0xc>
 801cbb2:	bf00      	nop
 801cbb4:	0801caf9 	.word	0x0801caf9
 801cbb8:	20005d2c 	.word	0x20005d2c

0801cbbc <_fwalk_sglue>:
 801cbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbc0:	4607      	mov	r7, r0
 801cbc2:	4688      	mov	r8, r1
 801cbc4:	4614      	mov	r4, r2
 801cbc6:	2600      	movs	r6, #0
 801cbc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cbcc:	f1b9 0901 	subs.w	r9, r9, #1
 801cbd0:	d505      	bpl.n	801cbde <_fwalk_sglue+0x22>
 801cbd2:	6824      	ldr	r4, [r4, #0]
 801cbd4:	2c00      	cmp	r4, #0
 801cbd6:	d1f7      	bne.n	801cbc8 <_fwalk_sglue+0xc>
 801cbd8:	4630      	mov	r0, r6
 801cbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cbde:	89ab      	ldrh	r3, [r5, #12]
 801cbe0:	2b01      	cmp	r3, #1
 801cbe2:	d907      	bls.n	801cbf4 <_fwalk_sglue+0x38>
 801cbe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cbe8:	3301      	adds	r3, #1
 801cbea:	d003      	beq.n	801cbf4 <_fwalk_sglue+0x38>
 801cbec:	4629      	mov	r1, r5
 801cbee:	4638      	mov	r0, r7
 801cbf0:	47c0      	blx	r8
 801cbf2:	4306      	orrs	r6, r0
 801cbf4:	3568      	adds	r5, #104	@ 0x68
 801cbf6:	e7e9      	b.n	801cbcc <_fwalk_sglue+0x10>

0801cbf8 <siprintf>:
 801cbf8:	b40e      	push	{r1, r2, r3}
 801cbfa:	b500      	push	{lr}
 801cbfc:	b09c      	sub	sp, #112	@ 0x70
 801cbfe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801cc02:	ab1d      	add	r3, sp, #116	@ 0x74
 801cc04:	9002      	str	r0, [sp, #8]
 801cc06:	9006      	str	r0, [sp, #24]
 801cc08:	9107      	str	r1, [sp, #28]
 801cc0a:	9104      	str	r1, [sp, #16]
 801cc0c:	4808      	ldr	r0, [pc, #32]	@ (801cc30 <siprintf+0x38>)
 801cc0e:	4909      	ldr	r1, [pc, #36]	@ (801cc34 <siprintf+0x3c>)
 801cc10:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc14:	9105      	str	r1, [sp, #20]
 801cc16:	a902      	add	r1, sp, #8
 801cc18:	6800      	ldr	r0, [r0, #0]
 801cc1a:	9301      	str	r3, [sp, #4]
 801cc1c:	f001 fc38 	bl	801e490 <_svfiprintf_r>
 801cc20:	9b02      	ldr	r3, [sp, #8]
 801cc22:	2200      	movs	r2, #0
 801cc24:	701a      	strb	r2, [r3, #0]
 801cc26:	b01c      	add	sp, #112	@ 0x70
 801cc28:	f85d eb04 	ldr.w	lr, [sp], #4
 801cc2c:	b003      	add	sp, #12
 801cc2e:	4770      	bx	lr
 801cc30:	200000c0 	.word	0x200000c0
 801cc34:	ffff0208 	.word	0xffff0208

0801cc38 <__sread>:
 801cc38:	b510      	push	{r4, lr}
 801cc3a:	460c      	mov	r4, r1
 801cc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc40:	f000 f882 	bl	801cd48 <_read_r>
 801cc44:	2800      	cmp	r0, #0
 801cc46:	bfab      	itete	ge
 801cc48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801cc4a:	89a3      	ldrhlt	r3, [r4, #12]
 801cc4c:	181b      	addge	r3, r3, r0
 801cc4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cc52:	bfac      	ite	ge
 801cc54:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cc56:	81a3      	strhlt	r3, [r4, #12]
 801cc58:	bd10      	pop	{r4, pc}

0801cc5a <__swrite>:
 801cc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc5e:	461f      	mov	r7, r3
 801cc60:	898b      	ldrh	r3, [r1, #12]
 801cc62:	4605      	mov	r5, r0
 801cc64:	460c      	mov	r4, r1
 801cc66:	05db      	lsls	r3, r3, #23
 801cc68:	4616      	mov	r6, r2
 801cc6a:	d505      	bpl.n	801cc78 <__swrite+0x1e>
 801cc6c:	2302      	movs	r3, #2
 801cc6e:	2200      	movs	r2, #0
 801cc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc74:	f000 f856 	bl	801cd24 <_lseek_r>
 801cc78:	89a3      	ldrh	r3, [r4, #12]
 801cc7a:	4632      	mov	r2, r6
 801cc7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc80:	4628      	mov	r0, r5
 801cc82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cc86:	81a3      	strh	r3, [r4, #12]
 801cc88:	463b      	mov	r3, r7
 801cc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc8e:	f000 b86d 	b.w	801cd6c <_write_r>

0801cc92 <__sseek>:
 801cc92:	b510      	push	{r4, lr}
 801cc94:	460c      	mov	r4, r1
 801cc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc9a:	f000 f843 	bl	801cd24 <_lseek_r>
 801cc9e:	1c43      	adds	r3, r0, #1
 801cca0:	89a3      	ldrh	r3, [r4, #12]
 801cca2:	bf15      	itete	ne
 801cca4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cca6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ccaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ccae:	81a3      	strheq	r3, [r4, #12]
 801ccb0:	bf18      	it	ne
 801ccb2:	81a3      	strhne	r3, [r4, #12]
 801ccb4:	bd10      	pop	{r4, pc}

0801ccb6 <__sclose>:
 801ccb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccba:	f000 b823 	b.w	801cd04 <_close_r>

0801ccbe <memset>:
 801ccbe:	4402      	add	r2, r0
 801ccc0:	4603      	mov	r3, r0
 801ccc2:	4293      	cmp	r3, r2
 801ccc4:	d100      	bne.n	801ccc8 <memset+0xa>
 801ccc6:	4770      	bx	lr
 801ccc8:	f803 1b01 	strb.w	r1, [r3], #1
 801cccc:	e7f9      	b.n	801ccc2 <memset+0x4>

0801ccce <strstr>:
 801ccce:	780a      	ldrb	r2, [r1, #0]
 801ccd0:	b570      	push	{r4, r5, r6, lr}
 801ccd2:	b96a      	cbnz	r2, 801ccf0 <strstr+0x22>
 801ccd4:	bd70      	pop	{r4, r5, r6, pc}
 801ccd6:	429a      	cmp	r2, r3
 801ccd8:	d109      	bne.n	801ccee <strstr+0x20>
 801ccda:	460c      	mov	r4, r1
 801ccdc:	4605      	mov	r5, r0
 801ccde:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d0f6      	beq.n	801ccd4 <strstr+0x6>
 801cce6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801ccea:	429e      	cmp	r6, r3
 801ccec:	d0f7      	beq.n	801ccde <strstr+0x10>
 801ccee:	3001      	adds	r0, #1
 801ccf0:	7803      	ldrb	r3, [r0, #0]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d1ef      	bne.n	801ccd6 <strstr+0x8>
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	e7ec      	b.n	801ccd4 <strstr+0x6>
	...

0801ccfc <_localeconv_r>:
 801ccfc:	4800      	ldr	r0, [pc, #0]	@ (801cd00 <_localeconv_r+0x4>)
 801ccfe:	4770      	bx	lr
 801cd00:	20000200 	.word	0x20000200

0801cd04 <_close_r>:
 801cd04:	b538      	push	{r3, r4, r5, lr}
 801cd06:	2300      	movs	r3, #0
 801cd08:	4d05      	ldr	r5, [pc, #20]	@ (801cd20 <_close_r+0x1c>)
 801cd0a:	4604      	mov	r4, r0
 801cd0c:	4608      	mov	r0, r1
 801cd0e:	602b      	str	r3, [r5, #0]
 801cd10:	f7f4 fa5e 	bl	80111d0 <_close>
 801cd14:	1c43      	adds	r3, r0, #1
 801cd16:	d102      	bne.n	801cd1e <_close_r+0x1a>
 801cd18:	682b      	ldr	r3, [r5, #0]
 801cd1a:	b103      	cbz	r3, 801cd1e <_close_r+0x1a>
 801cd1c:	6023      	str	r3, [r4, #0]
 801cd1e:	bd38      	pop	{r3, r4, r5, pc}
 801cd20:	20005d30 	.word	0x20005d30

0801cd24 <_lseek_r>:
 801cd24:	b538      	push	{r3, r4, r5, lr}
 801cd26:	4604      	mov	r4, r0
 801cd28:	4d06      	ldr	r5, [pc, #24]	@ (801cd44 <_lseek_r+0x20>)
 801cd2a:	4608      	mov	r0, r1
 801cd2c:	4611      	mov	r1, r2
 801cd2e:	2200      	movs	r2, #0
 801cd30:	602a      	str	r2, [r5, #0]
 801cd32:	461a      	mov	r2, r3
 801cd34:	f7f4 fa73 	bl	801121e <_lseek>
 801cd38:	1c43      	adds	r3, r0, #1
 801cd3a:	d102      	bne.n	801cd42 <_lseek_r+0x1e>
 801cd3c:	682b      	ldr	r3, [r5, #0]
 801cd3e:	b103      	cbz	r3, 801cd42 <_lseek_r+0x1e>
 801cd40:	6023      	str	r3, [r4, #0]
 801cd42:	bd38      	pop	{r3, r4, r5, pc}
 801cd44:	20005d30 	.word	0x20005d30

0801cd48 <_read_r>:
 801cd48:	b538      	push	{r3, r4, r5, lr}
 801cd4a:	4604      	mov	r4, r0
 801cd4c:	4d06      	ldr	r5, [pc, #24]	@ (801cd68 <_read_r+0x20>)
 801cd4e:	4608      	mov	r0, r1
 801cd50:	4611      	mov	r1, r2
 801cd52:	2200      	movs	r2, #0
 801cd54:	602a      	str	r2, [r5, #0]
 801cd56:	461a      	mov	r2, r3
 801cd58:	f7f4 fa01 	bl	801115e <_read>
 801cd5c:	1c43      	adds	r3, r0, #1
 801cd5e:	d102      	bne.n	801cd66 <_read_r+0x1e>
 801cd60:	682b      	ldr	r3, [r5, #0]
 801cd62:	b103      	cbz	r3, 801cd66 <_read_r+0x1e>
 801cd64:	6023      	str	r3, [r4, #0]
 801cd66:	bd38      	pop	{r3, r4, r5, pc}
 801cd68:	20005d30 	.word	0x20005d30

0801cd6c <_write_r>:
 801cd6c:	b538      	push	{r3, r4, r5, lr}
 801cd6e:	4604      	mov	r4, r0
 801cd70:	4d06      	ldr	r5, [pc, #24]	@ (801cd8c <_write_r+0x20>)
 801cd72:	4608      	mov	r0, r1
 801cd74:	4611      	mov	r1, r2
 801cd76:	2200      	movs	r2, #0
 801cd78:	602a      	str	r2, [r5, #0]
 801cd7a:	461a      	mov	r2, r3
 801cd7c:	f7f4 fa0c 	bl	8011198 <_write>
 801cd80:	1c43      	adds	r3, r0, #1
 801cd82:	d102      	bne.n	801cd8a <_write_r+0x1e>
 801cd84:	682b      	ldr	r3, [r5, #0]
 801cd86:	b103      	cbz	r3, 801cd8a <_write_r+0x1e>
 801cd88:	6023      	str	r3, [r4, #0]
 801cd8a:	bd38      	pop	{r3, r4, r5, pc}
 801cd8c:	20005d30 	.word	0x20005d30

0801cd90 <__errno>:
 801cd90:	4b01      	ldr	r3, [pc, #4]	@ (801cd98 <__errno+0x8>)
 801cd92:	6818      	ldr	r0, [r3, #0]
 801cd94:	4770      	bx	lr
 801cd96:	bf00      	nop
 801cd98:	200000c0 	.word	0x200000c0

0801cd9c <__libc_init_array>:
 801cd9c:	b570      	push	{r4, r5, r6, lr}
 801cd9e:	4d0d      	ldr	r5, [pc, #52]	@ (801cdd4 <__libc_init_array+0x38>)
 801cda0:	2600      	movs	r6, #0
 801cda2:	4c0d      	ldr	r4, [pc, #52]	@ (801cdd8 <__libc_init_array+0x3c>)
 801cda4:	1b64      	subs	r4, r4, r5
 801cda6:	10a4      	asrs	r4, r4, #2
 801cda8:	42a6      	cmp	r6, r4
 801cdaa:	d109      	bne.n	801cdc0 <__libc_init_array+0x24>
 801cdac:	4d0b      	ldr	r5, [pc, #44]	@ (801cddc <__libc_init_array+0x40>)
 801cdae:	2600      	movs	r6, #0
 801cdb0:	4c0b      	ldr	r4, [pc, #44]	@ (801cde0 <__libc_init_array+0x44>)
 801cdb2:	f002 f987 	bl	801f0c4 <_init>
 801cdb6:	1b64      	subs	r4, r4, r5
 801cdb8:	10a4      	asrs	r4, r4, #2
 801cdba:	42a6      	cmp	r6, r4
 801cdbc:	d105      	bne.n	801cdca <__libc_init_array+0x2e>
 801cdbe:	bd70      	pop	{r4, r5, r6, pc}
 801cdc0:	f855 3b04 	ldr.w	r3, [r5], #4
 801cdc4:	3601      	adds	r6, #1
 801cdc6:	4798      	blx	r3
 801cdc8:	e7ee      	b.n	801cda8 <__libc_init_array+0xc>
 801cdca:	f855 3b04 	ldr.w	r3, [r5], #4
 801cdce:	3601      	adds	r6, #1
 801cdd0:	4798      	blx	r3
 801cdd2:	e7f2      	b.n	801cdba <__libc_init_array+0x1e>
 801cdd4:	0801f738 	.word	0x0801f738
 801cdd8:	0801f738 	.word	0x0801f738
 801cddc:	0801f738 	.word	0x0801f738
 801cde0:	0801f73c 	.word	0x0801f73c

0801cde4 <__retarget_lock_init_recursive>:
 801cde4:	4770      	bx	lr

0801cde6 <__retarget_lock_acquire_recursive>:
 801cde6:	4770      	bx	lr

0801cde8 <__retarget_lock_release_recursive>:
 801cde8:	4770      	bx	lr

0801cdea <memchr>:
 801cdea:	b2c9      	uxtb	r1, r1
 801cdec:	4603      	mov	r3, r0
 801cdee:	4402      	add	r2, r0
 801cdf0:	b510      	push	{r4, lr}
 801cdf2:	4293      	cmp	r3, r2
 801cdf4:	4618      	mov	r0, r3
 801cdf6:	d101      	bne.n	801cdfc <memchr+0x12>
 801cdf8:	2000      	movs	r0, #0
 801cdfa:	e003      	b.n	801ce04 <memchr+0x1a>
 801cdfc:	7804      	ldrb	r4, [r0, #0]
 801cdfe:	3301      	adds	r3, #1
 801ce00:	428c      	cmp	r4, r1
 801ce02:	d1f6      	bne.n	801cdf2 <memchr+0x8>
 801ce04:	bd10      	pop	{r4, pc}

0801ce06 <memcpy>:
 801ce06:	440a      	add	r2, r1
 801ce08:	1e43      	subs	r3, r0, #1
 801ce0a:	4291      	cmp	r1, r2
 801ce0c:	d100      	bne.n	801ce10 <memcpy+0xa>
 801ce0e:	4770      	bx	lr
 801ce10:	b510      	push	{r4, lr}
 801ce12:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ce16:	4291      	cmp	r1, r2
 801ce18:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ce1c:	d1f9      	bne.n	801ce12 <memcpy+0xc>
 801ce1e:	bd10      	pop	{r4, pc}

0801ce20 <quorem>:
 801ce20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce24:	6903      	ldr	r3, [r0, #16]
 801ce26:	4607      	mov	r7, r0
 801ce28:	690c      	ldr	r4, [r1, #16]
 801ce2a:	42a3      	cmp	r3, r4
 801ce2c:	f2c0 8083 	blt.w	801cf36 <quorem+0x116>
 801ce30:	3c01      	subs	r4, #1
 801ce32:	f100 0514 	add.w	r5, r0, #20
 801ce36:	f101 0814 	add.w	r8, r1, #20
 801ce3a:	00a3      	lsls	r3, r4, #2
 801ce3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ce40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ce44:	9300      	str	r3, [sp, #0]
 801ce46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ce4a:	9301      	str	r3, [sp, #4]
 801ce4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ce50:	3301      	adds	r3, #1
 801ce52:	429a      	cmp	r2, r3
 801ce54:	fbb2 f6f3 	udiv	r6, r2, r3
 801ce58:	d331      	bcc.n	801cebe <quorem+0x9e>
 801ce5a:	f04f 0a00 	mov.w	sl, #0
 801ce5e:	46c4      	mov	ip, r8
 801ce60:	46ae      	mov	lr, r5
 801ce62:	46d3      	mov	fp, sl
 801ce64:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ce68:	b298      	uxth	r0, r3
 801ce6a:	45e1      	cmp	r9, ip
 801ce6c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801ce70:	fb06 a000 	mla	r0, r6, r0, sl
 801ce74:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801ce78:	b280      	uxth	r0, r0
 801ce7a:	fb06 2303 	mla	r3, r6, r3, r2
 801ce7e:	f8de 2000 	ldr.w	r2, [lr]
 801ce82:	b292      	uxth	r2, r2
 801ce84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ce88:	eba2 0200 	sub.w	r2, r2, r0
 801ce8c:	b29b      	uxth	r3, r3
 801ce8e:	f8de 0000 	ldr.w	r0, [lr]
 801ce92:	445a      	add	r2, fp
 801ce94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ce98:	b292      	uxth	r2, r2
 801ce9a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ce9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801cea2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801cea6:	f84e 2b04 	str.w	r2, [lr], #4
 801ceaa:	d2db      	bcs.n	801ce64 <quorem+0x44>
 801ceac:	9b00      	ldr	r3, [sp, #0]
 801ceae:	58eb      	ldr	r3, [r5, r3]
 801ceb0:	b92b      	cbnz	r3, 801cebe <quorem+0x9e>
 801ceb2:	9b01      	ldr	r3, [sp, #4]
 801ceb4:	3b04      	subs	r3, #4
 801ceb6:	429d      	cmp	r5, r3
 801ceb8:	461a      	mov	r2, r3
 801ceba:	d330      	bcc.n	801cf1e <quorem+0xfe>
 801cebc:	613c      	str	r4, [r7, #16]
 801cebe:	4638      	mov	r0, r7
 801cec0:	f001 f97e 	bl	801e1c0 <__mcmp>
 801cec4:	2800      	cmp	r0, #0
 801cec6:	db26      	blt.n	801cf16 <quorem+0xf6>
 801cec8:	4629      	mov	r1, r5
 801ceca:	2000      	movs	r0, #0
 801cecc:	f858 2b04 	ldr.w	r2, [r8], #4
 801ced0:	f8d1 c000 	ldr.w	ip, [r1]
 801ced4:	fa1f fe82 	uxth.w	lr, r2
 801ced8:	45c1      	cmp	r9, r8
 801ceda:	fa1f f38c 	uxth.w	r3, ip
 801cede:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801cee2:	eba3 030e 	sub.w	r3, r3, lr
 801cee6:	4403      	add	r3, r0
 801cee8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ceec:	b29b      	uxth	r3, r3
 801ceee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801cef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cef6:	ea4f 4022 	mov.w	r0, r2, asr #16
 801cefa:	f841 3b04 	str.w	r3, [r1], #4
 801cefe:	d2e5      	bcs.n	801cecc <quorem+0xac>
 801cf00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cf04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cf08:	b922      	cbnz	r2, 801cf14 <quorem+0xf4>
 801cf0a:	3b04      	subs	r3, #4
 801cf0c:	429d      	cmp	r5, r3
 801cf0e:	461a      	mov	r2, r3
 801cf10:	d30b      	bcc.n	801cf2a <quorem+0x10a>
 801cf12:	613c      	str	r4, [r7, #16]
 801cf14:	3601      	adds	r6, #1
 801cf16:	4630      	mov	r0, r6
 801cf18:	b003      	add	sp, #12
 801cf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf1e:	6812      	ldr	r2, [r2, #0]
 801cf20:	3b04      	subs	r3, #4
 801cf22:	2a00      	cmp	r2, #0
 801cf24:	d1ca      	bne.n	801cebc <quorem+0x9c>
 801cf26:	3c01      	subs	r4, #1
 801cf28:	e7c5      	b.n	801ceb6 <quorem+0x96>
 801cf2a:	6812      	ldr	r2, [r2, #0]
 801cf2c:	3b04      	subs	r3, #4
 801cf2e:	2a00      	cmp	r2, #0
 801cf30:	d1ef      	bne.n	801cf12 <quorem+0xf2>
 801cf32:	3c01      	subs	r4, #1
 801cf34:	e7ea      	b.n	801cf0c <quorem+0xec>
 801cf36:	2000      	movs	r0, #0
 801cf38:	e7ee      	b.n	801cf18 <quorem+0xf8>
 801cf3a:	0000      	movs	r0, r0
 801cf3c:	0000      	movs	r0, r0
	...

0801cf40 <_dtoa_r>:
 801cf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf44:	69c7      	ldr	r7, [r0, #28]
 801cf46:	b099      	sub	sp, #100	@ 0x64
 801cf48:	4683      	mov	fp, r0
 801cf4a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801cf4c:	9109      	str	r1, [sp, #36]	@ 0x24
 801cf4e:	920e      	str	r2, [sp, #56]	@ 0x38
 801cf50:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cf52:	ec55 4b10 	vmov	r4, r5, d0
 801cf56:	ed8d 0b02 	vstr	d0, [sp, #8]
 801cf5a:	b97f      	cbnz	r7, 801cf7c <_dtoa_r+0x3c>
 801cf5c:	2010      	movs	r0, #16
 801cf5e:	f000 fdfd 	bl	801db5c <malloc>
 801cf62:	4602      	mov	r2, r0
 801cf64:	f8cb 001c 	str.w	r0, [fp, #28]
 801cf68:	b920      	cbnz	r0, 801cf74 <_dtoa_r+0x34>
 801cf6a:	4ba7      	ldr	r3, [pc, #668]	@ (801d208 <_dtoa_r+0x2c8>)
 801cf6c:	21ef      	movs	r1, #239	@ 0xef
 801cf6e:	48a7      	ldr	r0, [pc, #668]	@ (801d20c <_dtoa_r+0x2cc>)
 801cf70:	f001 fc60 	bl	801e834 <__assert_func>
 801cf74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801cf78:	6007      	str	r7, [r0, #0]
 801cf7a:	60c7      	str	r7, [r0, #12]
 801cf7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801cf80:	6819      	ldr	r1, [r3, #0]
 801cf82:	b159      	cbz	r1, 801cf9c <_dtoa_r+0x5c>
 801cf84:	685a      	ldr	r2, [r3, #4]
 801cf86:	2301      	movs	r3, #1
 801cf88:	4658      	mov	r0, fp
 801cf8a:	4093      	lsls	r3, r2
 801cf8c:	604a      	str	r2, [r1, #4]
 801cf8e:	608b      	str	r3, [r1, #8]
 801cf90:	f000 feda 	bl	801dd48 <_Bfree>
 801cf94:	f8db 301c 	ldr.w	r3, [fp, #28]
 801cf98:	2200      	movs	r2, #0
 801cf9a:	601a      	str	r2, [r3, #0]
 801cf9c:	1e2b      	subs	r3, r5, #0
 801cf9e:	bfb7      	itett	lt
 801cfa0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801cfa4:	2300      	movge	r3, #0
 801cfa6:	2201      	movlt	r2, #1
 801cfa8:	9303      	strlt	r3, [sp, #12]
 801cfaa:	bfa8      	it	ge
 801cfac:	6033      	strge	r3, [r6, #0]
 801cfae:	9f03      	ldr	r7, [sp, #12]
 801cfb0:	4b97      	ldr	r3, [pc, #604]	@ (801d210 <_dtoa_r+0x2d0>)
 801cfb2:	bfb8      	it	lt
 801cfb4:	6032      	strlt	r2, [r6, #0]
 801cfb6:	43bb      	bics	r3, r7
 801cfb8:	d112      	bne.n	801cfe0 <_dtoa_r+0xa0>
 801cfba:	f242 730f 	movw	r3, #9999	@ 0x270f
 801cfbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cfc0:	6013      	str	r3, [r2, #0]
 801cfc2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cfc6:	4323      	orrs	r3, r4
 801cfc8:	f000 854c 	beq.w	801da64 <_dtoa_r+0xb24>
 801cfcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cfce:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801d224 <_dtoa_r+0x2e4>
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	f000 854e 	beq.w	801da74 <_dtoa_r+0xb34>
 801cfd8:	f10a 0303 	add.w	r3, sl, #3
 801cfdc:	f000 bd48 	b.w	801da70 <_dtoa_r+0xb30>
 801cfe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cfe4:	2200      	movs	r2, #0
 801cfe6:	2300      	movs	r3, #0
 801cfe8:	ec51 0b17 	vmov	r0, r1, d7
 801cfec:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801cff0:	f7ef fd7a 	bl	800cae8 <__aeabi_dcmpeq>
 801cff4:	4680      	mov	r8, r0
 801cff6:	b158      	cbz	r0, 801d010 <_dtoa_r+0xd0>
 801cff8:	2301      	movs	r3, #1
 801cffa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cffc:	6013      	str	r3, [r2, #0]
 801cffe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d000:	b113      	cbz	r3, 801d008 <_dtoa_r+0xc8>
 801d002:	4b84      	ldr	r3, [pc, #528]	@ (801d214 <_dtoa_r+0x2d4>)
 801d004:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d006:	6013      	str	r3, [r2, #0]
 801d008:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801d228 <_dtoa_r+0x2e8>
 801d00c:	f000 bd32 	b.w	801da74 <_dtoa_r+0xb34>
 801d010:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d014:	aa16      	add	r2, sp, #88	@ 0x58
 801d016:	a917      	add	r1, sp, #92	@ 0x5c
 801d018:	4658      	mov	r0, fp
 801d01a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d01e:	f001 f983 	bl	801e328 <__d2b>
 801d022:	4681      	mov	r9, r0
 801d024:	2e00      	cmp	r6, #0
 801d026:	d075      	beq.n	801d114 <_dtoa_r+0x1d4>
 801d028:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d02a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d02e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801d032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d036:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d03a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d03e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d042:	4619      	mov	r1, r3
 801d044:	2200      	movs	r2, #0
 801d046:	4b74      	ldr	r3, [pc, #464]	@ (801d218 <_dtoa_r+0x2d8>)
 801d048:	f7ef f92e 	bl	800c2a8 <__aeabi_dsub>
 801d04c:	a368      	add	r3, pc, #416	@ (adr r3, 801d1f0 <_dtoa_r+0x2b0>)
 801d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d052:	f7ef fae1 	bl	800c618 <__aeabi_dmul>
 801d056:	a368      	add	r3, pc, #416	@ (adr r3, 801d1f8 <_dtoa_r+0x2b8>)
 801d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d05c:	f7ef f926 	bl	800c2ac <__adddf3>
 801d060:	4604      	mov	r4, r0
 801d062:	460d      	mov	r5, r1
 801d064:	4630      	mov	r0, r6
 801d066:	f7ef fa6d 	bl	800c544 <__aeabi_i2d>
 801d06a:	a365      	add	r3, pc, #404	@ (adr r3, 801d200 <_dtoa_r+0x2c0>)
 801d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d070:	f7ef fad2 	bl	800c618 <__aeabi_dmul>
 801d074:	4602      	mov	r2, r0
 801d076:	460b      	mov	r3, r1
 801d078:	4620      	mov	r0, r4
 801d07a:	4629      	mov	r1, r5
 801d07c:	f7ef f916 	bl	800c2ac <__adddf3>
 801d080:	4604      	mov	r4, r0
 801d082:	460d      	mov	r5, r1
 801d084:	f7ef fd78 	bl	800cb78 <__aeabi_d2iz>
 801d088:	2200      	movs	r2, #0
 801d08a:	4607      	mov	r7, r0
 801d08c:	2300      	movs	r3, #0
 801d08e:	4620      	mov	r0, r4
 801d090:	4629      	mov	r1, r5
 801d092:	f7ef fd33 	bl	800cafc <__aeabi_dcmplt>
 801d096:	b140      	cbz	r0, 801d0aa <_dtoa_r+0x16a>
 801d098:	4638      	mov	r0, r7
 801d09a:	f7ef fa53 	bl	800c544 <__aeabi_i2d>
 801d09e:	4622      	mov	r2, r4
 801d0a0:	462b      	mov	r3, r5
 801d0a2:	f7ef fd21 	bl	800cae8 <__aeabi_dcmpeq>
 801d0a6:	b900      	cbnz	r0, 801d0aa <_dtoa_r+0x16a>
 801d0a8:	3f01      	subs	r7, #1
 801d0aa:	2f16      	cmp	r7, #22
 801d0ac:	d851      	bhi.n	801d152 <_dtoa_r+0x212>
 801d0ae:	4b5b      	ldr	r3, [pc, #364]	@ (801d21c <_dtoa_r+0x2dc>)
 801d0b0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d0b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0bc:	f7ef fd1e 	bl	800cafc <__aeabi_dcmplt>
 801d0c0:	2800      	cmp	r0, #0
 801d0c2:	d048      	beq.n	801d156 <_dtoa_r+0x216>
 801d0c4:	3f01      	subs	r7, #1
 801d0c6:	2300      	movs	r3, #0
 801d0c8:	9312      	str	r3, [sp, #72]	@ 0x48
 801d0ca:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d0cc:	1b9b      	subs	r3, r3, r6
 801d0ce:	1e5a      	subs	r2, r3, #1
 801d0d0:	bf46      	itte	mi
 801d0d2:	f1c3 0801 	rsbmi	r8, r3, #1
 801d0d6:	2300      	movmi	r3, #0
 801d0d8:	f04f 0800 	movpl.w	r8, #0
 801d0dc:	9208      	str	r2, [sp, #32]
 801d0de:	bf48      	it	mi
 801d0e0:	9308      	strmi	r3, [sp, #32]
 801d0e2:	2f00      	cmp	r7, #0
 801d0e4:	db39      	blt.n	801d15a <_dtoa_r+0x21a>
 801d0e6:	9b08      	ldr	r3, [sp, #32]
 801d0e8:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d0ea:	443b      	add	r3, r7
 801d0ec:	9308      	str	r3, [sp, #32]
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	930a      	str	r3, [sp, #40]	@ 0x28
 801d0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0f4:	2b09      	cmp	r3, #9
 801d0f6:	d864      	bhi.n	801d1c2 <_dtoa_r+0x282>
 801d0f8:	2b05      	cmp	r3, #5
 801d0fa:	bfc5      	ittet	gt
 801d0fc:	3b04      	subgt	r3, #4
 801d0fe:	2400      	movgt	r4, #0
 801d100:	2401      	movle	r4, #1
 801d102:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801d104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d106:	3b02      	subs	r3, #2
 801d108:	2b03      	cmp	r3, #3
 801d10a:	d865      	bhi.n	801d1d8 <_dtoa_r+0x298>
 801d10c:	e8df f003 	tbb	[pc, r3]
 801d110:	5737392c 	.word	0x5737392c
 801d114:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801d118:	441e      	add	r6, r3
 801d11a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d11e:	2b20      	cmp	r3, #32
 801d120:	bfc9      	itett	gt
 801d122:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d126:	f1c3 0320 	rsble	r3, r3, #32
 801d12a:	409f      	lslgt	r7, r3
 801d12c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d130:	bfd8      	it	le
 801d132:	fa04 f003 	lslle.w	r0, r4, r3
 801d136:	f106 36ff 	add.w	r6, r6, #4294967295
 801d13a:	bfc4      	itt	gt
 801d13c:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d140:	ea47 0003 	orrgt.w	r0, r7, r3
 801d144:	f7ef f9ee 	bl	800c524 <__aeabi_ui2d>
 801d148:	2201      	movs	r2, #1
 801d14a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d14e:	9214      	str	r2, [sp, #80]	@ 0x50
 801d150:	e777      	b.n	801d042 <_dtoa_r+0x102>
 801d152:	2301      	movs	r3, #1
 801d154:	e7b8      	b.n	801d0c8 <_dtoa_r+0x188>
 801d156:	9012      	str	r0, [sp, #72]	@ 0x48
 801d158:	e7b7      	b.n	801d0ca <_dtoa_r+0x18a>
 801d15a:	427b      	negs	r3, r7
 801d15c:	eba8 0807 	sub.w	r8, r8, r7
 801d160:	930a      	str	r3, [sp, #40]	@ 0x28
 801d162:	2300      	movs	r3, #0
 801d164:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d166:	e7c4      	b.n	801d0f2 <_dtoa_r+0x1b2>
 801d168:	2300      	movs	r3, #0
 801d16a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d16c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d16e:	2b00      	cmp	r3, #0
 801d170:	dc35      	bgt.n	801d1de <_dtoa_r+0x29e>
 801d172:	2301      	movs	r3, #1
 801d174:	461a      	mov	r2, r3
 801d176:	9300      	str	r3, [sp, #0]
 801d178:	9307      	str	r3, [sp, #28]
 801d17a:	920e      	str	r2, [sp, #56]	@ 0x38
 801d17c:	e00b      	b.n	801d196 <_dtoa_r+0x256>
 801d17e:	2301      	movs	r3, #1
 801d180:	e7f3      	b.n	801d16a <_dtoa_r+0x22a>
 801d182:	2300      	movs	r3, #0
 801d184:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d188:	18fb      	adds	r3, r7, r3
 801d18a:	9300      	str	r3, [sp, #0]
 801d18c:	3301      	adds	r3, #1
 801d18e:	2b01      	cmp	r3, #1
 801d190:	9307      	str	r3, [sp, #28]
 801d192:	bfb8      	it	lt
 801d194:	2301      	movlt	r3, #1
 801d196:	f8db 001c 	ldr.w	r0, [fp, #28]
 801d19a:	2100      	movs	r1, #0
 801d19c:	2204      	movs	r2, #4
 801d19e:	f102 0514 	add.w	r5, r2, #20
 801d1a2:	429d      	cmp	r5, r3
 801d1a4:	d91f      	bls.n	801d1e6 <_dtoa_r+0x2a6>
 801d1a6:	6041      	str	r1, [r0, #4]
 801d1a8:	4658      	mov	r0, fp
 801d1aa:	f000 fd8d 	bl	801dcc8 <_Balloc>
 801d1ae:	4682      	mov	sl, r0
 801d1b0:	2800      	cmp	r0, #0
 801d1b2:	d13b      	bne.n	801d22c <_dtoa_r+0x2ec>
 801d1b4:	4b1a      	ldr	r3, [pc, #104]	@ (801d220 <_dtoa_r+0x2e0>)
 801d1b6:	4602      	mov	r2, r0
 801d1b8:	f240 11af 	movw	r1, #431	@ 0x1af
 801d1bc:	e6d7      	b.n	801cf6e <_dtoa_r+0x2e>
 801d1be:	2301      	movs	r3, #1
 801d1c0:	e7e0      	b.n	801d184 <_dtoa_r+0x244>
 801d1c2:	2401      	movs	r4, #1
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d1c8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	9300      	str	r3, [sp, #0]
 801d1d2:	9307      	str	r3, [sp, #28]
 801d1d4:	2312      	movs	r3, #18
 801d1d6:	e7d0      	b.n	801d17a <_dtoa_r+0x23a>
 801d1d8:	2301      	movs	r3, #1
 801d1da:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d1dc:	e7f5      	b.n	801d1ca <_dtoa_r+0x28a>
 801d1de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d1e0:	9300      	str	r3, [sp, #0]
 801d1e2:	9307      	str	r3, [sp, #28]
 801d1e4:	e7d7      	b.n	801d196 <_dtoa_r+0x256>
 801d1e6:	3101      	adds	r1, #1
 801d1e8:	0052      	lsls	r2, r2, #1
 801d1ea:	e7d8      	b.n	801d19e <_dtoa_r+0x25e>
 801d1ec:	f3af 8000 	nop.w
 801d1f0:	636f4361 	.word	0x636f4361
 801d1f4:	3fd287a7 	.word	0x3fd287a7
 801d1f8:	8b60c8b3 	.word	0x8b60c8b3
 801d1fc:	3fc68a28 	.word	0x3fc68a28
 801d200:	509f79fb 	.word	0x509f79fb
 801d204:	3fd34413 	.word	0x3fd34413
 801d208:	0801f401 	.word	0x0801f401
 801d20c:	0801f418 	.word	0x0801f418
 801d210:	7ff00000 	.word	0x7ff00000
 801d214:	0801f3d1 	.word	0x0801f3d1
 801d218:	3ff80000 	.word	0x3ff80000
 801d21c:	0801f510 	.word	0x0801f510
 801d220:	0801f470 	.word	0x0801f470
 801d224:	0801f3fd 	.word	0x0801f3fd
 801d228:	0801f3d0 	.word	0x0801f3d0
 801d22c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d230:	6018      	str	r0, [r3, #0]
 801d232:	9b07      	ldr	r3, [sp, #28]
 801d234:	2b0e      	cmp	r3, #14
 801d236:	f200 80a4 	bhi.w	801d382 <_dtoa_r+0x442>
 801d23a:	2c00      	cmp	r4, #0
 801d23c:	f000 80a1 	beq.w	801d382 <_dtoa_r+0x442>
 801d240:	2f00      	cmp	r7, #0
 801d242:	dd33      	ble.n	801d2ac <_dtoa_r+0x36c>
 801d244:	f007 020f 	and.w	r2, r7, #15
 801d248:	4bac      	ldr	r3, [pc, #688]	@ (801d4fc <_dtoa_r+0x5bc>)
 801d24a:	05f8      	lsls	r0, r7, #23
 801d24c:	ea4f 1427 	mov.w	r4, r7, asr #4
 801d250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d254:	ed93 7b00 	vldr	d7, [r3]
 801d258:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d25c:	d516      	bpl.n	801d28c <_dtoa_r+0x34c>
 801d25e:	4ba8      	ldr	r3, [pc, #672]	@ (801d500 <_dtoa_r+0x5c0>)
 801d260:	f004 040f 	and.w	r4, r4, #15
 801d264:	2603      	movs	r6, #3
 801d266:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d26a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d26e:	f7ef fafd 	bl	800c86c <__aeabi_ddiv>
 801d272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d276:	4da2      	ldr	r5, [pc, #648]	@ (801d500 <_dtoa_r+0x5c0>)
 801d278:	b954      	cbnz	r4, 801d290 <_dtoa_r+0x350>
 801d27a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d282:	f7ef faf3 	bl	800c86c <__aeabi_ddiv>
 801d286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d28a:	e028      	b.n	801d2de <_dtoa_r+0x39e>
 801d28c:	2602      	movs	r6, #2
 801d28e:	e7f2      	b.n	801d276 <_dtoa_r+0x336>
 801d290:	07e1      	lsls	r1, r4, #31
 801d292:	d508      	bpl.n	801d2a6 <_dtoa_r+0x366>
 801d294:	3601      	adds	r6, #1
 801d296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d29a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d29e:	f7ef f9bb 	bl	800c618 <__aeabi_dmul>
 801d2a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d2a6:	1064      	asrs	r4, r4, #1
 801d2a8:	3508      	adds	r5, #8
 801d2aa:	e7e5      	b.n	801d278 <_dtoa_r+0x338>
 801d2ac:	f000 80d2 	beq.w	801d454 <_dtoa_r+0x514>
 801d2b0:	427c      	negs	r4, r7
 801d2b2:	4b92      	ldr	r3, [pc, #584]	@ (801d4fc <_dtoa_r+0x5bc>)
 801d2b4:	4d92      	ldr	r5, [pc, #584]	@ (801d500 <_dtoa_r+0x5c0>)
 801d2b6:	2602      	movs	r6, #2
 801d2b8:	f004 020f 	and.w	r2, r4, #15
 801d2bc:	1124      	asrs	r4, r4, #4
 801d2be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d2c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ca:	f7ef f9a5 	bl	800c618 <__aeabi_dmul>
 801d2ce:	2300      	movs	r3, #0
 801d2d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d2d4:	2c00      	cmp	r4, #0
 801d2d6:	f040 80b2 	bne.w	801d43e <_dtoa_r+0x4fe>
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d1d3      	bne.n	801d286 <_dtoa_r+0x346>
 801d2de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d2e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	f000 80b7 	beq.w	801d458 <_dtoa_r+0x518>
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	4b85      	ldr	r3, [pc, #532]	@ (801d504 <_dtoa_r+0x5c4>)
 801d2ee:	4620      	mov	r0, r4
 801d2f0:	4629      	mov	r1, r5
 801d2f2:	f7ef fc03 	bl	800cafc <__aeabi_dcmplt>
 801d2f6:	2800      	cmp	r0, #0
 801d2f8:	f000 80ae 	beq.w	801d458 <_dtoa_r+0x518>
 801d2fc:	9b07      	ldr	r3, [sp, #28]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	f000 80aa 	beq.w	801d458 <_dtoa_r+0x518>
 801d304:	9b00      	ldr	r3, [sp, #0]
 801d306:	2b00      	cmp	r3, #0
 801d308:	dd37      	ble.n	801d37a <_dtoa_r+0x43a>
 801d30a:	1e7b      	subs	r3, r7, #1
 801d30c:	4620      	mov	r0, r4
 801d30e:	2200      	movs	r2, #0
 801d310:	4629      	mov	r1, r5
 801d312:	9304      	str	r3, [sp, #16]
 801d314:	3601      	adds	r6, #1
 801d316:	4b7c      	ldr	r3, [pc, #496]	@ (801d508 <_dtoa_r+0x5c8>)
 801d318:	f7ef f97e 	bl	800c618 <__aeabi_dmul>
 801d31c:	9c00      	ldr	r4, [sp, #0]
 801d31e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d322:	4630      	mov	r0, r6
 801d324:	f7ef f90e 	bl	800c544 <__aeabi_i2d>
 801d328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d32c:	f7ef f974 	bl	800c618 <__aeabi_dmul>
 801d330:	2200      	movs	r2, #0
 801d332:	4b76      	ldr	r3, [pc, #472]	@ (801d50c <_dtoa_r+0x5cc>)
 801d334:	f7ee ffba 	bl	800c2ac <__adddf3>
 801d338:	4605      	mov	r5, r0
 801d33a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d33e:	2c00      	cmp	r4, #0
 801d340:	f040 808d 	bne.w	801d45e <_dtoa_r+0x51e>
 801d344:	2200      	movs	r2, #0
 801d346:	4b72      	ldr	r3, [pc, #456]	@ (801d510 <_dtoa_r+0x5d0>)
 801d348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d34c:	f7ee ffac 	bl	800c2a8 <__aeabi_dsub>
 801d350:	4602      	mov	r2, r0
 801d352:	460b      	mov	r3, r1
 801d354:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d358:	462a      	mov	r2, r5
 801d35a:	4633      	mov	r3, r6
 801d35c:	f7ef fbec 	bl	800cb38 <__aeabi_dcmpgt>
 801d360:	2800      	cmp	r0, #0
 801d362:	f040 828b 	bne.w	801d87c <_dtoa_r+0x93c>
 801d366:	462a      	mov	r2, r5
 801d368:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d36c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d370:	f7ef fbc4 	bl	800cafc <__aeabi_dcmplt>
 801d374:	2800      	cmp	r0, #0
 801d376:	f040 8128 	bne.w	801d5ca <_dtoa_r+0x68a>
 801d37a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801d37e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d382:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d384:	2b00      	cmp	r3, #0
 801d386:	f2c0 815a 	blt.w	801d63e <_dtoa_r+0x6fe>
 801d38a:	2f0e      	cmp	r7, #14
 801d38c:	f300 8157 	bgt.w	801d63e <_dtoa_r+0x6fe>
 801d390:	4b5a      	ldr	r3, [pc, #360]	@ (801d4fc <_dtoa_r+0x5bc>)
 801d392:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d396:	ed93 7b00 	vldr	d7, [r3]
 801d39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	ed8d 7b00 	vstr	d7, [sp]
 801d3a2:	da03      	bge.n	801d3ac <_dtoa_r+0x46c>
 801d3a4:	9b07      	ldr	r3, [sp, #28]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	f340 8101 	ble.w	801d5ae <_dtoa_r+0x66e>
 801d3ac:	4656      	mov	r6, sl
 801d3ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d3b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d3b6:	4620      	mov	r0, r4
 801d3b8:	4629      	mov	r1, r5
 801d3ba:	f7ef fa57 	bl	800c86c <__aeabi_ddiv>
 801d3be:	f7ef fbdb 	bl	800cb78 <__aeabi_d2iz>
 801d3c2:	4680      	mov	r8, r0
 801d3c4:	f7ef f8be 	bl	800c544 <__aeabi_i2d>
 801d3c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d3cc:	f7ef f924 	bl	800c618 <__aeabi_dmul>
 801d3d0:	4602      	mov	r2, r0
 801d3d2:	4620      	mov	r0, r4
 801d3d4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d3d8:	460b      	mov	r3, r1
 801d3da:	4629      	mov	r1, r5
 801d3dc:	f7ee ff64 	bl	800c2a8 <__aeabi_dsub>
 801d3e0:	9d07      	ldr	r5, [sp, #28]
 801d3e2:	f806 4b01 	strb.w	r4, [r6], #1
 801d3e6:	eba6 040a 	sub.w	r4, r6, sl
 801d3ea:	4602      	mov	r2, r0
 801d3ec:	460b      	mov	r3, r1
 801d3ee:	42a5      	cmp	r5, r4
 801d3f0:	f040 8117 	bne.w	801d622 <_dtoa_r+0x6e2>
 801d3f4:	f7ee ff5a 	bl	800c2ac <__adddf3>
 801d3f8:	4604      	mov	r4, r0
 801d3fa:	460d      	mov	r5, r1
 801d3fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d400:	f7ef fb9a 	bl	800cb38 <__aeabi_dcmpgt>
 801d404:	2800      	cmp	r0, #0
 801d406:	f040 80f9 	bne.w	801d5fc <_dtoa_r+0x6bc>
 801d40a:	4620      	mov	r0, r4
 801d40c:	4629      	mov	r1, r5
 801d40e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d412:	f7ef fb69 	bl	800cae8 <__aeabi_dcmpeq>
 801d416:	b118      	cbz	r0, 801d420 <_dtoa_r+0x4e0>
 801d418:	f018 0f01 	tst.w	r8, #1
 801d41c:	f040 80ee 	bne.w	801d5fc <_dtoa_r+0x6bc>
 801d420:	4649      	mov	r1, r9
 801d422:	4658      	mov	r0, fp
 801d424:	f000 fc90 	bl	801dd48 <_Bfree>
 801d428:	2300      	movs	r3, #0
 801d42a:	3701      	adds	r7, #1
 801d42c:	7033      	strb	r3, [r6, #0]
 801d42e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d430:	601f      	str	r7, [r3, #0]
 801d432:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d434:	2b00      	cmp	r3, #0
 801d436:	f000 831d 	beq.w	801da74 <_dtoa_r+0xb34>
 801d43a:	601e      	str	r6, [r3, #0]
 801d43c:	e31a      	b.n	801da74 <_dtoa_r+0xb34>
 801d43e:	07e2      	lsls	r2, r4, #31
 801d440:	d505      	bpl.n	801d44e <_dtoa_r+0x50e>
 801d442:	3601      	adds	r6, #1
 801d444:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d448:	f7ef f8e6 	bl	800c618 <__aeabi_dmul>
 801d44c:	2301      	movs	r3, #1
 801d44e:	1064      	asrs	r4, r4, #1
 801d450:	3508      	adds	r5, #8
 801d452:	e73f      	b.n	801d2d4 <_dtoa_r+0x394>
 801d454:	2602      	movs	r6, #2
 801d456:	e742      	b.n	801d2de <_dtoa_r+0x39e>
 801d458:	9c07      	ldr	r4, [sp, #28]
 801d45a:	9704      	str	r7, [sp, #16]
 801d45c:	e761      	b.n	801d322 <_dtoa_r+0x3e2>
 801d45e:	4b27      	ldr	r3, [pc, #156]	@ (801d4fc <_dtoa_r+0x5bc>)
 801d460:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d466:	4454      	add	r4, sl
 801d468:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d46c:	2900      	cmp	r1, #0
 801d46e:	d053      	beq.n	801d518 <_dtoa_r+0x5d8>
 801d470:	2000      	movs	r0, #0
 801d472:	4928      	ldr	r1, [pc, #160]	@ (801d514 <_dtoa_r+0x5d4>)
 801d474:	f7ef f9fa 	bl	800c86c <__aeabi_ddiv>
 801d478:	4633      	mov	r3, r6
 801d47a:	4656      	mov	r6, sl
 801d47c:	462a      	mov	r2, r5
 801d47e:	f7ee ff13 	bl	800c2a8 <__aeabi_dsub>
 801d482:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d48a:	f7ef fb75 	bl	800cb78 <__aeabi_d2iz>
 801d48e:	4605      	mov	r5, r0
 801d490:	f7ef f858 	bl	800c544 <__aeabi_i2d>
 801d494:	4602      	mov	r2, r0
 801d496:	460b      	mov	r3, r1
 801d498:	3530      	adds	r5, #48	@ 0x30
 801d49a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d49e:	f7ee ff03 	bl	800c2a8 <__aeabi_dsub>
 801d4a2:	4602      	mov	r2, r0
 801d4a4:	460b      	mov	r3, r1
 801d4a6:	f806 5b01 	strb.w	r5, [r6], #1
 801d4aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d4ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d4b2:	f7ef fb23 	bl	800cafc <__aeabi_dcmplt>
 801d4b6:	2800      	cmp	r0, #0
 801d4b8:	d171      	bne.n	801d59e <_dtoa_r+0x65e>
 801d4ba:	2000      	movs	r0, #0
 801d4bc:	4911      	ldr	r1, [pc, #68]	@ (801d504 <_dtoa_r+0x5c4>)
 801d4be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d4c2:	f7ee fef1 	bl	800c2a8 <__aeabi_dsub>
 801d4c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d4ca:	f7ef fb17 	bl	800cafc <__aeabi_dcmplt>
 801d4ce:	2800      	cmp	r0, #0
 801d4d0:	f040 8095 	bne.w	801d5fe <_dtoa_r+0x6be>
 801d4d4:	42a6      	cmp	r6, r4
 801d4d6:	f43f af50 	beq.w	801d37a <_dtoa_r+0x43a>
 801d4da:	2200      	movs	r2, #0
 801d4dc:	4b0a      	ldr	r3, [pc, #40]	@ (801d508 <_dtoa_r+0x5c8>)
 801d4de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d4e2:	f7ef f899 	bl	800c618 <__aeabi_dmul>
 801d4e6:	2200      	movs	r2, #0
 801d4e8:	4b07      	ldr	r3, [pc, #28]	@ (801d508 <_dtoa_r+0x5c8>)
 801d4ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d4f2:	f7ef f891 	bl	800c618 <__aeabi_dmul>
 801d4f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d4fa:	e7c4      	b.n	801d486 <_dtoa_r+0x546>
 801d4fc:	0801f510 	.word	0x0801f510
 801d500:	0801f4e8 	.word	0x0801f4e8
 801d504:	3ff00000 	.word	0x3ff00000
 801d508:	40240000 	.word	0x40240000
 801d50c:	401c0000 	.word	0x401c0000
 801d510:	40140000 	.word	0x40140000
 801d514:	3fe00000 	.word	0x3fe00000
 801d518:	4631      	mov	r1, r6
 801d51a:	4656      	mov	r6, sl
 801d51c:	4628      	mov	r0, r5
 801d51e:	f7ef f87b 	bl	800c618 <__aeabi_dmul>
 801d522:	9415      	str	r4, [sp, #84]	@ 0x54
 801d524:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d52c:	f7ef fb24 	bl	800cb78 <__aeabi_d2iz>
 801d530:	4605      	mov	r5, r0
 801d532:	f7ef f807 	bl	800c544 <__aeabi_i2d>
 801d536:	4602      	mov	r2, r0
 801d538:	3530      	adds	r5, #48	@ 0x30
 801d53a:	460b      	mov	r3, r1
 801d53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d540:	f7ee feb2 	bl	800c2a8 <__aeabi_dsub>
 801d544:	f806 5b01 	strb.w	r5, [r6], #1
 801d548:	4602      	mov	r2, r0
 801d54a:	460b      	mov	r3, r1
 801d54c:	42a6      	cmp	r6, r4
 801d54e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d552:	f04f 0200 	mov.w	r2, #0
 801d556:	d124      	bne.n	801d5a2 <_dtoa_r+0x662>
 801d558:	4bac      	ldr	r3, [pc, #688]	@ (801d80c <_dtoa_r+0x8cc>)
 801d55a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d55e:	f7ee fea5 	bl	800c2ac <__adddf3>
 801d562:	4602      	mov	r2, r0
 801d564:	460b      	mov	r3, r1
 801d566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d56a:	f7ef fae5 	bl	800cb38 <__aeabi_dcmpgt>
 801d56e:	2800      	cmp	r0, #0
 801d570:	d145      	bne.n	801d5fe <_dtoa_r+0x6be>
 801d572:	2000      	movs	r0, #0
 801d574:	49a5      	ldr	r1, [pc, #660]	@ (801d80c <_dtoa_r+0x8cc>)
 801d576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d57a:	f7ee fe95 	bl	800c2a8 <__aeabi_dsub>
 801d57e:	4602      	mov	r2, r0
 801d580:	460b      	mov	r3, r1
 801d582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d586:	f7ef fab9 	bl	800cafc <__aeabi_dcmplt>
 801d58a:	2800      	cmp	r0, #0
 801d58c:	f43f aef5 	beq.w	801d37a <_dtoa_r+0x43a>
 801d590:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801d592:	1e73      	subs	r3, r6, #1
 801d594:	9315      	str	r3, [sp, #84]	@ 0x54
 801d596:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d59a:	2b30      	cmp	r3, #48	@ 0x30
 801d59c:	d0f8      	beq.n	801d590 <_dtoa_r+0x650>
 801d59e:	9f04      	ldr	r7, [sp, #16]
 801d5a0:	e73e      	b.n	801d420 <_dtoa_r+0x4e0>
 801d5a2:	4b9b      	ldr	r3, [pc, #620]	@ (801d810 <_dtoa_r+0x8d0>)
 801d5a4:	f7ef f838 	bl	800c618 <__aeabi_dmul>
 801d5a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d5ac:	e7bc      	b.n	801d528 <_dtoa_r+0x5e8>
 801d5ae:	d10c      	bne.n	801d5ca <_dtoa_r+0x68a>
 801d5b0:	2200      	movs	r2, #0
 801d5b2:	4b98      	ldr	r3, [pc, #608]	@ (801d814 <_dtoa_r+0x8d4>)
 801d5b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d5b8:	f7ef f82e 	bl	800c618 <__aeabi_dmul>
 801d5bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d5c0:	f7ef fab0 	bl	800cb24 <__aeabi_dcmpge>
 801d5c4:	2800      	cmp	r0, #0
 801d5c6:	f000 8157 	beq.w	801d878 <_dtoa_r+0x938>
 801d5ca:	2400      	movs	r4, #0
 801d5cc:	4625      	mov	r5, r4
 801d5ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5d0:	4656      	mov	r6, sl
 801d5d2:	43db      	mvns	r3, r3
 801d5d4:	9304      	str	r3, [sp, #16]
 801d5d6:	2700      	movs	r7, #0
 801d5d8:	4621      	mov	r1, r4
 801d5da:	4658      	mov	r0, fp
 801d5dc:	f000 fbb4 	bl	801dd48 <_Bfree>
 801d5e0:	2d00      	cmp	r5, #0
 801d5e2:	d0dc      	beq.n	801d59e <_dtoa_r+0x65e>
 801d5e4:	b12f      	cbz	r7, 801d5f2 <_dtoa_r+0x6b2>
 801d5e6:	42af      	cmp	r7, r5
 801d5e8:	d003      	beq.n	801d5f2 <_dtoa_r+0x6b2>
 801d5ea:	4639      	mov	r1, r7
 801d5ec:	4658      	mov	r0, fp
 801d5ee:	f000 fbab 	bl	801dd48 <_Bfree>
 801d5f2:	4629      	mov	r1, r5
 801d5f4:	4658      	mov	r0, fp
 801d5f6:	f000 fba7 	bl	801dd48 <_Bfree>
 801d5fa:	e7d0      	b.n	801d59e <_dtoa_r+0x65e>
 801d5fc:	9704      	str	r7, [sp, #16]
 801d5fe:	4633      	mov	r3, r6
 801d600:	461e      	mov	r6, r3
 801d602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d606:	2a39      	cmp	r2, #57	@ 0x39
 801d608:	d107      	bne.n	801d61a <_dtoa_r+0x6da>
 801d60a:	459a      	cmp	sl, r3
 801d60c:	d1f8      	bne.n	801d600 <_dtoa_r+0x6c0>
 801d60e:	9a04      	ldr	r2, [sp, #16]
 801d610:	3201      	adds	r2, #1
 801d612:	9204      	str	r2, [sp, #16]
 801d614:	2230      	movs	r2, #48	@ 0x30
 801d616:	f88a 2000 	strb.w	r2, [sl]
 801d61a:	781a      	ldrb	r2, [r3, #0]
 801d61c:	3201      	adds	r2, #1
 801d61e:	701a      	strb	r2, [r3, #0]
 801d620:	e7bd      	b.n	801d59e <_dtoa_r+0x65e>
 801d622:	2200      	movs	r2, #0
 801d624:	4b7a      	ldr	r3, [pc, #488]	@ (801d810 <_dtoa_r+0x8d0>)
 801d626:	f7ee fff7 	bl	800c618 <__aeabi_dmul>
 801d62a:	2200      	movs	r2, #0
 801d62c:	2300      	movs	r3, #0
 801d62e:	4604      	mov	r4, r0
 801d630:	460d      	mov	r5, r1
 801d632:	f7ef fa59 	bl	800cae8 <__aeabi_dcmpeq>
 801d636:	2800      	cmp	r0, #0
 801d638:	f43f aebb 	beq.w	801d3b2 <_dtoa_r+0x472>
 801d63c:	e6f0      	b.n	801d420 <_dtoa_r+0x4e0>
 801d63e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d640:	2a00      	cmp	r2, #0
 801d642:	f000 80db 	beq.w	801d7fc <_dtoa_r+0x8bc>
 801d646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d648:	2a01      	cmp	r2, #1
 801d64a:	f300 80bf 	bgt.w	801d7cc <_dtoa_r+0x88c>
 801d64e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d650:	2a00      	cmp	r2, #0
 801d652:	f000 80b7 	beq.w	801d7c4 <_dtoa_r+0x884>
 801d656:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d65a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d65c:	4646      	mov	r6, r8
 801d65e:	9a08      	ldr	r2, [sp, #32]
 801d660:	2101      	movs	r1, #1
 801d662:	4658      	mov	r0, fp
 801d664:	4498      	add	r8, r3
 801d666:	441a      	add	r2, r3
 801d668:	9208      	str	r2, [sp, #32]
 801d66a:	f000 fc23 	bl	801deb4 <__i2b>
 801d66e:	4605      	mov	r5, r0
 801d670:	b15e      	cbz	r6, 801d68a <_dtoa_r+0x74a>
 801d672:	9b08      	ldr	r3, [sp, #32]
 801d674:	2b00      	cmp	r3, #0
 801d676:	dd08      	ble.n	801d68a <_dtoa_r+0x74a>
 801d678:	42b3      	cmp	r3, r6
 801d67a:	9a08      	ldr	r2, [sp, #32]
 801d67c:	bfa8      	it	ge
 801d67e:	4633      	movge	r3, r6
 801d680:	eba8 0803 	sub.w	r8, r8, r3
 801d684:	1af6      	subs	r6, r6, r3
 801d686:	1ad3      	subs	r3, r2, r3
 801d688:	9308      	str	r3, [sp, #32]
 801d68a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d68c:	b1f3      	cbz	r3, 801d6cc <_dtoa_r+0x78c>
 801d68e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d690:	2b00      	cmp	r3, #0
 801d692:	f000 80b7 	beq.w	801d804 <_dtoa_r+0x8c4>
 801d696:	b18c      	cbz	r4, 801d6bc <_dtoa_r+0x77c>
 801d698:	4629      	mov	r1, r5
 801d69a:	4622      	mov	r2, r4
 801d69c:	4658      	mov	r0, fp
 801d69e:	f000 fcc9 	bl	801e034 <__pow5mult>
 801d6a2:	464a      	mov	r2, r9
 801d6a4:	4601      	mov	r1, r0
 801d6a6:	4605      	mov	r5, r0
 801d6a8:	4658      	mov	r0, fp
 801d6aa:	f000 fc19 	bl	801dee0 <__multiply>
 801d6ae:	4649      	mov	r1, r9
 801d6b0:	9004      	str	r0, [sp, #16]
 801d6b2:	4658      	mov	r0, fp
 801d6b4:	f000 fb48 	bl	801dd48 <_Bfree>
 801d6b8:	9b04      	ldr	r3, [sp, #16]
 801d6ba:	4699      	mov	r9, r3
 801d6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6be:	1b1a      	subs	r2, r3, r4
 801d6c0:	d004      	beq.n	801d6cc <_dtoa_r+0x78c>
 801d6c2:	4649      	mov	r1, r9
 801d6c4:	4658      	mov	r0, fp
 801d6c6:	f000 fcb5 	bl	801e034 <__pow5mult>
 801d6ca:	4681      	mov	r9, r0
 801d6cc:	2101      	movs	r1, #1
 801d6ce:	4658      	mov	r0, fp
 801d6d0:	f000 fbf0 	bl	801deb4 <__i2b>
 801d6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d6d6:	4604      	mov	r4, r0
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	f000 81cf 	beq.w	801da7c <_dtoa_r+0xb3c>
 801d6de:	461a      	mov	r2, r3
 801d6e0:	4601      	mov	r1, r0
 801d6e2:	4658      	mov	r0, fp
 801d6e4:	f000 fca6 	bl	801e034 <__pow5mult>
 801d6e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6ea:	4604      	mov	r4, r0
 801d6ec:	2b01      	cmp	r3, #1
 801d6ee:	f300 8095 	bgt.w	801d81c <_dtoa_r+0x8dc>
 801d6f2:	9b02      	ldr	r3, [sp, #8]
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	f040 8087 	bne.w	801d808 <_dtoa_r+0x8c8>
 801d6fa:	9b03      	ldr	r3, [sp, #12]
 801d6fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d700:	2b00      	cmp	r3, #0
 801d702:	f040 8089 	bne.w	801d818 <_dtoa_r+0x8d8>
 801d706:	9b03      	ldr	r3, [sp, #12]
 801d708:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d70c:	0d1b      	lsrs	r3, r3, #20
 801d70e:	051b      	lsls	r3, r3, #20
 801d710:	b12b      	cbz	r3, 801d71e <_dtoa_r+0x7de>
 801d712:	9b08      	ldr	r3, [sp, #32]
 801d714:	f108 0801 	add.w	r8, r8, #1
 801d718:	3301      	adds	r3, #1
 801d71a:	9308      	str	r3, [sp, #32]
 801d71c:	2301      	movs	r3, #1
 801d71e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d722:	2b00      	cmp	r3, #0
 801d724:	f000 81b0 	beq.w	801da88 <_dtoa_r+0xb48>
 801d728:	6923      	ldr	r3, [r4, #16]
 801d72a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d72e:	6918      	ldr	r0, [r3, #16]
 801d730:	f000 fb74 	bl	801de1c <__hi0bits>
 801d734:	f1c0 0020 	rsb	r0, r0, #32
 801d738:	9b08      	ldr	r3, [sp, #32]
 801d73a:	4418      	add	r0, r3
 801d73c:	f010 001f 	ands.w	r0, r0, #31
 801d740:	d077      	beq.n	801d832 <_dtoa_r+0x8f2>
 801d742:	f1c0 0320 	rsb	r3, r0, #32
 801d746:	2b04      	cmp	r3, #4
 801d748:	dd6b      	ble.n	801d822 <_dtoa_r+0x8e2>
 801d74a:	f1c0 001c 	rsb	r0, r0, #28
 801d74e:	9b08      	ldr	r3, [sp, #32]
 801d750:	4480      	add	r8, r0
 801d752:	4403      	add	r3, r0
 801d754:	4406      	add	r6, r0
 801d756:	9308      	str	r3, [sp, #32]
 801d758:	f1b8 0f00 	cmp.w	r8, #0
 801d75c:	dd05      	ble.n	801d76a <_dtoa_r+0x82a>
 801d75e:	4649      	mov	r1, r9
 801d760:	4642      	mov	r2, r8
 801d762:	4658      	mov	r0, fp
 801d764:	f000 fcc0 	bl	801e0e8 <__lshift>
 801d768:	4681      	mov	r9, r0
 801d76a:	9b08      	ldr	r3, [sp, #32]
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	dd05      	ble.n	801d77c <_dtoa_r+0x83c>
 801d770:	4621      	mov	r1, r4
 801d772:	461a      	mov	r2, r3
 801d774:	4658      	mov	r0, fp
 801d776:	f000 fcb7 	bl	801e0e8 <__lshift>
 801d77a:	4604      	mov	r4, r0
 801d77c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d059      	beq.n	801d836 <_dtoa_r+0x8f6>
 801d782:	4621      	mov	r1, r4
 801d784:	4648      	mov	r0, r9
 801d786:	f000 fd1b 	bl	801e1c0 <__mcmp>
 801d78a:	2800      	cmp	r0, #0
 801d78c:	da53      	bge.n	801d836 <_dtoa_r+0x8f6>
 801d78e:	1e7b      	subs	r3, r7, #1
 801d790:	4649      	mov	r1, r9
 801d792:	220a      	movs	r2, #10
 801d794:	4658      	mov	r0, fp
 801d796:	9304      	str	r3, [sp, #16]
 801d798:	2300      	movs	r3, #0
 801d79a:	f000 faf7 	bl	801dd8c <__multadd>
 801d79e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d7a0:	4681      	mov	r9, r0
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	f000 8172 	beq.w	801da8c <_dtoa_r+0xb4c>
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	4629      	mov	r1, r5
 801d7ac:	220a      	movs	r2, #10
 801d7ae:	4658      	mov	r0, fp
 801d7b0:	f000 faec 	bl	801dd8c <__multadd>
 801d7b4:	9b00      	ldr	r3, [sp, #0]
 801d7b6:	4605      	mov	r5, r0
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	dc67      	bgt.n	801d88c <_dtoa_r+0x94c>
 801d7bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7be:	2b02      	cmp	r3, #2
 801d7c0:	dc41      	bgt.n	801d846 <_dtoa_r+0x906>
 801d7c2:	e063      	b.n	801d88c <_dtoa_r+0x94c>
 801d7c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d7c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d7ca:	e746      	b.n	801d65a <_dtoa_r+0x71a>
 801d7cc:	9b07      	ldr	r3, [sp, #28]
 801d7ce:	1e5c      	subs	r4, r3, #1
 801d7d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d7d2:	42a3      	cmp	r3, r4
 801d7d4:	bfb7      	itett	lt
 801d7d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801d7d8:	1b1c      	subge	r4, r3, r4
 801d7da:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801d7dc:	1ae3      	sublt	r3, r4, r3
 801d7de:	bfbe      	ittt	lt
 801d7e0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801d7e2:	2400      	movlt	r4, #0
 801d7e4:	18d2      	addlt	r2, r2, r3
 801d7e6:	9b07      	ldr	r3, [sp, #28]
 801d7e8:	bfb8      	it	lt
 801d7ea:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	bfb5      	itete	lt
 801d7f0:	eba8 0603 	sublt.w	r6, r8, r3
 801d7f4:	4646      	movge	r6, r8
 801d7f6:	2300      	movlt	r3, #0
 801d7f8:	9b07      	ldrge	r3, [sp, #28]
 801d7fa:	e730      	b.n	801d65e <_dtoa_r+0x71e>
 801d7fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d7fe:	4646      	mov	r6, r8
 801d800:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d802:	e735      	b.n	801d670 <_dtoa_r+0x730>
 801d804:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d806:	e75c      	b.n	801d6c2 <_dtoa_r+0x782>
 801d808:	2300      	movs	r3, #0
 801d80a:	e788      	b.n	801d71e <_dtoa_r+0x7de>
 801d80c:	3fe00000 	.word	0x3fe00000
 801d810:	40240000 	.word	0x40240000
 801d814:	40140000 	.word	0x40140000
 801d818:	9b02      	ldr	r3, [sp, #8]
 801d81a:	e780      	b.n	801d71e <_dtoa_r+0x7de>
 801d81c:	2300      	movs	r3, #0
 801d81e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d820:	e782      	b.n	801d728 <_dtoa_r+0x7e8>
 801d822:	d099      	beq.n	801d758 <_dtoa_r+0x818>
 801d824:	331c      	adds	r3, #28
 801d826:	9a08      	ldr	r2, [sp, #32]
 801d828:	441a      	add	r2, r3
 801d82a:	4498      	add	r8, r3
 801d82c:	441e      	add	r6, r3
 801d82e:	9208      	str	r2, [sp, #32]
 801d830:	e792      	b.n	801d758 <_dtoa_r+0x818>
 801d832:	4603      	mov	r3, r0
 801d834:	e7f6      	b.n	801d824 <_dtoa_r+0x8e4>
 801d836:	9b07      	ldr	r3, [sp, #28]
 801d838:	9704      	str	r7, [sp, #16]
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	dc20      	bgt.n	801d880 <_dtoa_r+0x940>
 801d83e:	9300      	str	r3, [sp, #0]
 801d840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d842:	2b02      	cmp	r3, #2
 801d844:	dd1e      	ble.n	801d884 <_dtoa_r+0x944>
 801d846:	9b00      	ldr	r3, [sp, #0]
 801d848:	2b00      	cmp	r3, #0
 801d84a:	f47f aec0 	bne.w	801d5ce <_dtoa_r+0x68e>
 801d84e:	4621      	mov	r1, r4
 801d850:	2205      	movs	r2, #5
 801d852:	4658      	mov	r0, fp
 801d854:	f000 fa9a 	bl	801dd8c <__multadd>
 801d858:	4601      	mov	r1, r0
 801d85a:	4604      	mov	r4, r0
 801d85c:	4648      	mov	r0, r9
 801d85e:	f000 fcaf 	bl	801e1c0 <__mcmp>
 801d862:	2800      	cmp	r0, #0
 801d864:	f77f aeb3 	ble.w	801d5ce <_dtoa_r+0x68e>
 801d868:	2331      	movs	r3, #49	@ 0x31
 801d86a:	4656      	mov	r6, sl
 801d86c:	f806 3b01 	strb.w	r3, [r6], #1
 801d870:	9b04      	ldr	r3, [sp, #16]
 801d872:	3301      	adds	r3, #1
 801d874:	9304      	str	r3, [sp, #16]
 801d876:	e6ae      	b.n	801d5d6 <_dtoa_r+0x696>
 801d878:	9c07      	ldr	r4, [sp, #28]
 801d87a:	9704      	str	r7, [sp, #16]
 801d87c:	4625      	mov	r5, r4
 801d87e:	e7f3      	b.n	801d868 <_dtoa_r+0x928>
 801d880:	9b07      	ldr	r3, [sp, #28]
 801d882:	9300      	str	r3, [sp, #0]
 801d884:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d886:	2b00      	cmp	r3, #0
 801d888:	f000 8104 	beq.w	801da94 <_dtoa_r+0xb54>
 801d88c:	2e00      	cmp	r6, #0
 801d88e:	dd05      	ble.n	801d89c <_dtoa_r+0x95c>
 801d890:	4629      	mov	r1, r5
 801d892:	4632      	mov	r2, r6
 801d894:	4658      	mov	r0, fp
 801d896:	f000 fc27 	bl	801e0e8 <__lshift>
 801d89a:	4605      	mov	r5, r0
 801d89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d05a      	beq.n	801d958 <_dtoa_r+0xa18>
 801d8a2:	6869      	ldr	r1, [r5, #4]
 801d8a4:	4658      	mov	r0, fp
 801d8a6:	f000 fa0f 	bl	801dcc8 <_Balloc>
 801d8aa:	4606      	mov	r6, r0
 801d8ac:	b928      	cbnz	r0, 801d8ba <_dtoa_r+0x97a>
 801d8ae:	4b84      	ldr	r3, [pc, #528]	@ (801dac0 <_dtoa_r+0xb80>)
 801d8b0:	4602      	mov	r2, r0
 801d8b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d8b6:	f7ff bb5a 	b.w	801cf6e <_dtoa_r+0x2e>
 801d8ba:	692a      	ldr	r2, [r5, #16]
 801d8bc:	f105 010c 	add.w	r1, r5, #12
 801d8c0:	300c      	adds	r0, #12
 801d8c2:	3202      	adds	r2, #2
 801d8c4:	0092      	lsls	r2, r2, #2
 801d8c6:	f7ff fa9e 	bl	801ce06 <memcpy>
 801d8ca:	2201      	movs	r2, #1
 801d8cc:	4631      	mov	r1, r6
 801d8ce:	4658      	mov	r0, fp
 801d8d0:	f000 fc0a 	bl	801e0e8 <__lshift>
 801d8d4:	f10a 0301 	add.w	r3, sl, #1
 801d8d8:	462f      	mov	r7, r5
 801d8da:	4605      	mov	r5, r0
 801d8dc:	9307      	str	r3, [sp, #28]
 801d8de:	9b00      	ldr	r3, [sp, #0]
 801d8e0:	4453      	add	r3, sl
 801d8e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d8e4:	9b02      	ldr	r3, [sp, #8]
 801d8e6:	f003 0301 	and.w	r3, r3, #1
 801d8ea:	930a      	str	r3, [sp, #40]	@ 0x28
 801d8ec:	9b07      	ldr	r3, [sp, #28]
 801d8ee:	4621      	mov	r1, r4
 801d8f0:	4648      	mov	r0, r9
 801d8f2:	3b01      	subs	r3, #1
 801d8f4:	9300      	str	r3, [sp, #0]
 801d8f6:	f7ff fa93 	bl	801ce20 <quorem>
 801d8fa:	4639      	mov	r1, r7
 801d8fc:	9002      	str	r0, [sp, #8]
 801d8fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d902:	4648      	mov	r0, r9
 801d904:	f000 fc5c 	bl	801e1c0 <__mcmp>
 801d908:	462a      	mov	r2, r5
 801d90a:	9008      	str	r0, [sp, #32]
 801d90c:	4621      	mov	r1, r4
 801d90e:	4658      	mov	r0, fp
 801d910:	f000 fc72 	bl	801e1f8 <__mdiff>
 801d914:	68c2      	ldr	r2, [r0, #12]
 801d916:	4606      	mov	r6, r0
 801d918:	bb02      	cbnz	r2, 801d95c <_dtoa_r+0xa1c>
 801d91a:	4601      	mov	r1, r0
 801d91c:	4648      	mov	r0, r9
 801d91e:	f000 fc4f 	bl	801e1c0 <__mcmp>
 801d922:	4602      	mov	r2, r0
 801d924:	4631      	mov	r1, r6
 801d926:	4658      	mov	r0, fp
 801d928:	920e      	str	r2, [sp, #56]	@ 0x38
 801d92a:	f000 fa0d 	bl	801dd48 <_Bfree>
 801d92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d930:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d932:	9e07      	ldr	r6, [sp, #28]
 801d934:	ea43 0102 	orr.w	r1, r3, r2
 801d938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d93a:	4319      	orrs	r1, r3
 801d93c:	d110      	bne.n	801d960 <_dtoa_r+0xa20>
 801d93e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d942:	d029      	beq.n	801d998 <_dtoa_r+0xa58>
 801d944:	9b08      	ldr	r3, [sp, #32]
 801d946:	2b00      	cmp	r3, #0
 801d948:	dd02      	ble.n	801d950 <_dtoa_r+0xa10>
 801d94a:	9b02      	ldr	r3, [sp, #8]
 801d94c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801d950:	9b00      	ldr	r3, [sp, #0]
 801d952:	f883 8000 	strb.w	r8, [r3]
 801d956:	e63f      	b.n	801d5d8 <_dtoa_r+0x698>
 801d958:	4628      	mov	r0, r5
 801d95a:	e7bb      	b.n	801d8d4 <_dtoa_r+0x994>
 801d95c:	2201      	movs	r2, #1
 801d95e:	e7e1      	b.n	801d924 <_dtoa_r+0x9e4>
 801d960:	9b08      	ldr	r3, [sp, #32]
 801d962:	2b00      	cmp	r3, #0
 801d964:	db04      	blt.n	801d970 <_dtoa_r+0xa30>
 801d966:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d968:	430b      	orrs	r3, r1
 801d96a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d96c:	430b      	orrs	r3, r1
 801d96e:	d120      	bne.n	801d9b2 <_dtoa_r+0xa72>
 801d970:	2a00      	cmp	r2, #0
 801d972:	dded      	ble.n	801d950 <_dtoa_r+0xa10>
 801d974:	4649      	mov	r1, r9
 801d976:	2201      	movs	r2, #1
 801d978:	4658      	mov	r0, fp
 801d97a:	f000 fbb5 	bl	801e0e8 <__lshift>
 801d97e:	4621      	mov	r1, r4
 801d980:	4681      	mov	r9, r0
 801d982:	f000 fc1d 	bl	801e1c0 <__mcmp>
 801d986:	2800      	cmp	r0, #0
 801d988:	dc03      	bgt.n	801d992 <_dtoa_r+0xa52>
 801d98a:	d1e1      	bne.n	801d950 <_dtoa_r+0xa10>
 801d98c:	f018 0f01 	tst.w	r8, #1
 801d990:	d0de      	beq.n	801d950 <_dtoa_r+0xa10>
 801d992:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d996:	d1d8      	bne.n	801d94a <_dtoa_r+0xa0a>
 801d998:	2339      	movs	r3, #57	@ 0x39
 801d99a:	9a00      	ldr	r2, [sp, #0]
 801d99c:	7013      	strb	r3, [r2, #0]
 801d99e:	4633      	mov	r3, r6
 801d9a0:	461e      	mov	r6, r3
 801d9a2:	3b01      	subs	r3, #1
 801d9a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d9a8:	2a39      	cmp	r2, #57	@ 0x39
 801d9aa:	d052      	beq.n	801da52 <_dtoa_r+0xb12>
 801d9ac:	3201      	adds	r2, #1
 801d9ae:	701a      	strb	r2, [r3, #0]
 801d9b0:	e612      	b.n	801d5d8 <_dtoa_r+0x698>
 801d9b2:	2a00      	cmp	r2, #0
 801d9b4:	dd07      	ble.n	801d9c6 <_dtoa_r+0xa86>
 801d9b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d9ba:	d0ed      	beq.n	801d998 <_dtoa_r+0xa58>
 801d9bc:	f108 0301 	add.w	r3, r8, #1
 801d9c0:	9a00      	ldr	r2, [sp, #0]
 801d9c2:	7013      	strb	r3, [r2, #0]
 801d9c4:	e608      	b.n	801d5d8 <_dtoa_r+0x698>
 801d9c6:	9b07      	ldr	r3, [sp, #28]
 801d9c8:	9a07      	ldr	r2, [sp, #28]
 801d9ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 801d9ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d9d0:	4293      	cmp	r3, r2
 801d9d2:	d028      	beq.n	801da26 <_dtoa_r+0xae6>
 801d9d4:	4649      	mov	r1, r9
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	220a      	movs	r2, #10
 801d9da:	4658      	mov	r0, fp
 801d9dc:	f000 f9d6 	bl	801dd8c <__multadd>
 801d9e0:	42af      	cmp	r7, r5
 801d9e2:	4681      	mov	r9, r0
 801d9e4:	f04f 0300 	mov.w	r3, #0
 801d9e8:	f04f 020a 	mov.w	r2, #10
 801d9ec:	4639      	mov	r1, r7
 801d9ee:	4658      	mov	r0, fp
 801d9f0:	d107      	bne.n	801da02 <_dtoa_r+0xac2>
 801d9f2:	f000 f9cb 	bl	801dd8c <__multadd>
 801d9f6:	4607      	mov	r7, r0
 801d9f8:	4605      	mov	r5, r0
 801d9fa:	9b07      	ldr	r3, [sp, #28]
 801d9fc:	3301      	adds	r3, #1
 801d9fe:	9307      	str	r3, [sp, #28]
 801da00:	e774      	b.n	801d8ec <_dtoa_r+0x9ac>
 801da02:	f000 f9c3 	bl	801dd8c <__multadd>
 801da06:	4629      	mov	r1, r5
 801da08:	4607      	mov	r7, r0
 801da0a:	2300      	movs	r3, #0
 801da0c:	220a      	movs	r2, #10
 801da0e:	4658      	mov	r0, fp
 801da10:	f000 f9bc 	bl	801dd8c <__multadd>
 801da14:	4605      	mov	r5, r0
 801da16:	e7f0      	b.n	801d9fa <_dtoa_r+0xaba>
 801da18:	9b00      	ldr	r3, [sp, #0]
 801da1a:	2700      	movs	r7, #0
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	bfcc      	ite	gt
 801da20:	461e      	movgt	r6, r3
 801da22:	2601      	movle	r6, #1
 801da24:	4456      	add	r6, sl
 801da26:	4649      	mov	r1, r9
 801da28:	2201      	movs	r2, #1
 801da2a:	4658      	mov	r0, fp
 801da2c:	f000 fb5c 	bl	801e0e8 <__lshift>
 801da30:	4621      	mov	r1, r4
 801da32:	4681      	mov	r9, r0
 801da34:	f000 fbc4 	bl	801e1c0 <__mcmp>
 801da38:	2800      	cmp	r0, #0
 801da3a:	dcb0      	bgt.n	801d99e <_dtoa_r+0xa5e>
 801da3c:	d102      	bne.n	801da44 <_dtoa_r+0xb04>
 801da3e:	f018 0f01 	tst.w	r8, #1
 801da42:	d1ac      	bne.n	801d99e <_dtoa_r+0xa5e>
 801da44:	4633      	mov	r3, r6
 801da46:	461e      	mov	r6, r3
 801da48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801da4c:	2a30      	cmp	r2, #48	@ 0x30
 801da4e:	d0fa      	beq.n	801da46 <_dtoa_r+0xb06>
 801da50:	e5c2      	b.n	801d5d8 <_dtoa_r+0x698>
 801da52:	459a      	cmp	sl, r3
 801da54:	d1a4      	bne.n	801d9a0 <_dtoa_r+0xa60>
 801da56:	9b04      	ldr	r3, [sp, #16]
 801da58:	3301      	adds	r3, #1
 801da5a:	9304      	str	r3, [sp, #16]
 801da5c:	2331      	movs	r3, #49	@ 0x31
 801da5e:	f88a 3000 	strb.w	r3, [sl]
 801da62:	e5b9      	b.n	801d5d8 <_dtoa_r+0x698>
 801da64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801da66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801dac4 <_dtoa_r+0xb84>
 801da6a:	b11b      	cbz	r3, 801da74 <_dtoa_r+0xb34>
 801da6c:	f10a 0308 	add.w	r3, sl, #8
 801da70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801da72:	6013      	str	r3, [r2, #0]
 801da74:	4650      	mov	r0, sl
 801da76:	b019      	add	sp, #100	@ 0x64
 801da78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da7e:	2b01      	cmp	r3, #1
 801da80:	f77f ae37 	ble.w	801d6f2 <_dtoa_r+0x7b2>
 801da84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da86:	930a      	str	r3, [sp, #40]	@ 0x28
 801da88:	2001      	movs	r0, #1
 801da8a:	e655      	b.n	801d738 <_dtoa_r+0x7f8>
 801da8c:	9b00      	ldr	r3, [sp, #0]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	f77f aed6 	ble.w	801d840 <_dtoa_r+0x900>
 801da94:	4656      	mov	r6, sl
 801da96:	4621      	mov	r1, r4
 801da98:	4648      	mov	r0, r9
 801da9a:	f7ff f9c1 	bl	801ce20 <quorem>
 801da9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801daa2:	9b00      	ldr	r3, [sp, #0]
 801daa4:	f806 8b01 	strb.w	r8, [r6], #1
 801daa8:	eba6 020a 	sub.w	r2, r6, sl
 801daac:	4293      	cmp	r3, r2
 801daae:	ddb3      	ble.n	801da18 <_dtoa_r+0xad8>
 801dab0:	4649      	mov	r1, r9
 801dab2:	2300      	movs	r3, #0
 801dab4:	220a      	movs	r2, #10
 801dab6:	4658      	mov	r0, fp
 801dab8:	f000 f968 	bl	801dd8c <__multadd>
 801dabc:	4681      	mov	r9, r0
 801dabe:	e7ea      	b.n	801da96 <_dtoa_r+0xb56>
 801dac0:	0801f470 	.word	0x0801f470
 801dac4:	0801f3f4 	.word	0x0801f3f4

0801dac8 <_free_r>:
 801dac8:	b538      	push	{r3, r4, r5, lr}
 801daca:	4605      	mov	r5, r0
 801dacc:	2900      	cmp	r1, #0
 801dace:	d041      	beq.n	801db54 <_free_r+0x8c>
 801dad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dad4:	1f0c      	subs	r4, r1, #4
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	bfb8      	it	lt
 801dada:	18e4      	addlt	r4, r4, r3
 801dadc:	f000 f8e8 	bl	801dcb0 <__malloc_lock>
 801dae0:	4a1d      	ldr	r2, [pc, #116]	@ (801db58 <_free_r+0x90>)
 801dae2:	6813      	ldr	r3, [r2, #0]
 801dae4:	b933      	cbnz	r3, 801daf4 <_free_r+0x2c>
 801dae6:	6063      	str	r3, [r4, #4]
 801dae8:	6014      	str	r4, [r2, #0]
 801daea:	4628      	mov	r0, r5
 801daec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801daf0:	f000 b8e4 	b.w	801dcbc <__malloc_unlock>
 801daf4:	42a3      	cmp	r3, r4
 801daf6:	d908      	bls.n	801db0a <_free_r+0x42>
 801daf8:	6820      	ldr	r0, [r4, #0]
 801dafa:	1821      	adds	r1, r4, r0
 801dafc:	428b      	cmp	r3, r1
 801dafe:	bf01      	itttt	eq
 801db00:	6819      	ldreq	r1, [r3, #0]
 801db02:	685b      	ldreq	r3, [r3, #4]
 801db04:	1809      	addeq	r1, r1, r0
 801db06:	6021      	streq	r1, [r4, #0]
 801db08:	e7ed      	b.n	801dae6 <_free_r+0x1e>
 801db0a:	461a      	mov	r2, r3
 801db0c:	685b      	ldr	r3, [r3, #4]
 801db0e:	b10b      	cbz	r3, 801db14 <_free_r+0x4c>
 801db10:	42a3      	cmp	r3, r4
 801db12:	d9fa      	bls.n	801db0a <_free_r+0x42>
 801db14:	6811      	ldr	r1, [r2, #0]
 801db16:	1850      	adds	r0, r2, r1
 801db18:	42a0      	cmp	r0, r4
 801db1a:	d10b      	bne.n	801db34 <_free_r+0x6c>
 801db1c:	6820      	ldr	r0, [r4, #0]
 801db1e:	4401      	add	r1, r0
 801db20:	1850      	adds	r0, r2, r1
 801db22:	6011      	str	r1, [r2, #0]
 801db24:	4283      	cmp	r3, r0
 801db26:	d1e0      	bne.n	801daea <_free_r+0x22>
 801db28:	6818      	ldr	r0, [r3, #0]
 801db2a:	685b      	ldr	r3, [r3, #4]
 801db2c:	4408      	add	r0, r1
 801db2e:	6053      	str	r3, [r2, #4]
 801db30:	6010      	str	r0, [r2, #0]
 801db32:	e7da      	b.n	801daea <_free_r+0x22>
 801db34:	d902      	bls.n	801db3c <_free_r+0x74>
 801db36:	230c      	movs	r3, #12
 801db38:	602b      	str	r3, [r5, #0]
 801db3a:	e7d6      	b.n	801daea <_free_r+0x22>
 801db3c:	6820      	ldr	r0, [r4, #0]
 801db3e:	1821      	adds	r1, r4, r0
 801db40:	428b      	cmp	r3, r1
 801db42:	bf02      	ittt	eq
 801db44:	6819      	ldreq	r1, [r3, #0]
 801db46:	685b      	ldreq	r3, [r3, #4]
 801db48:	1809      	addeq	r1, r1, r0
 801db4a:	6063      	str	r3, [r4, #4]
 801db4c:	bf08      	it	eq
 801db4e:	6021      	streq	r1, [r4, #0]
 801db50:	6054      	str	r4, [r2, #4]
 801db52:	e7ca      	b.n	801daea <_free_r+0x22>
 801db54:	bd38      	pop	{r3, r4, r5, pc}
 801db56:	bf00      	nop
 801db58:	20005d3c 	.word	0x20005d3c

0801db5c <malloc>:
 801db5c:	4b02      	ldr	r3, [pc, #8]	@ (801db68 <malloc+0xc>)
 801db5e:	4601      	mov	r1, r0
 801db60:	6818      	ldr	r0, [r3, #0]
 801db62:	f000 b825 	b.w	801dbb0 <_malloc_r>
 801db66:	bf00      	nop
 801db68:	200000c0 	.word	0x200000c0

0801db6c <sbrk_aligned>:
 801db6c:	b570      	push	{r4, r5, r6, lr}
 801db6e:	4e0f      	ldr	r6, [pc, #60]	@ (801dbac <sbrk_aligned+0x40>)
 801db70:	460c      	mov	r4, r1
 801db72:	4605      	mov	r5, r0
 801db74:	6831      	ldr	r1, [r6, #0]
 801db76:	b911      	cbnz	r1, 801db7e <sbrk_aligned+0x12>
 801db78:	f000 fe4c 	bl	801e814 <_sbrk_r>
 801db7c:	6030      	str	r0, [r6, #0]
 801db7e:	4621      	mov	r1, r4
 801db80:	4628      	mov	r0, r5
 801db82:	f000 fe47 	bl	801e814 <_sbrk_r>
 801db86:	1c43      	adds	r3, r0, #1
 801db88:	d103      	bne.n	801db92 <sbrk_aligned+0x26>
 801db8a:	f04f 34ff 	mov.w	r4, #4294967295
 801db8e:	4620      	mov	r0, r4
 801db90:	bd70      	pop	{r4, r5, r6, pc}
 801db92:	1cc4      	adds	r4, r0, #3
 801db94:	f024 0403 	bic.w	r4, r4, #3
 801db98:	42a0      	cmp	r0, r4
 801db9a:	d0f8      	beq.n	801db8e <sbrk_aligned+0x22>
 801db9c:	1a21      	subs	r1, r4, r0
 801db9e:	4628      	mov	r0, r5
 801dba0:	f000 fe38 	bl	801e814 <_sbrk_r>
 801dba4:	3001      	adds	r0, #1
 801dba6:	d1f2      	bne.n	801db8e <sbrk_aligned+0x22>
 801dba8:	e7ef      	b.n	801db8a <sbrk_aligned+0x1e>
 801dbaa:	bf00      	nop
 801dbac:	20005d38 	.word	0x20005d38

0801dbb0 <_malloc_r>:
 801dbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbb4:	1ccd      	adds	r5, r1, #3
 801dbb6:	4606      	mov	r6, r0
 801dbb8:	f025 0503 	bic.w	r5, r5, #3
 801dbbc:	3508      	adds	r5, #8
 801dbbe:	2d0c      	cmp	r5, #12
 801dbc0:	bf38      	it	cc
 801dbc2:	250c      	movcc	r5, #12
 801dbc4:	2d00      	cmp	r5, #0
 801dbc6:	db01      	blt.n	801dbcc <_malloc_r+0x1c>
 801dbc8:	42a9      	cmp	r1, r5
 801dbca:	d904      	bls.n	801dbd6 <_malloc_r+0x26>
 801dbcc:	230c      	movs	r3, #12
 801dbce:	6033      	str	r3, [r6, #0]
 801dbd0:	2000      	movs	r0, #0
 801dbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801dcac <_malloc_r+0xfc>
 801dbda:	f000 f869 	bl	801dcb0 <__malloc_lock>
 801dbde:	f8d8 3000 	ldr.w	r3, [r8]
 801dbe2:	461c      	mov	r4, r3
 801dbe4:	bb44      	cbnz	r4, 801dc38 <_malloc_r+0x88>
 801dbe6:	4629      	mov	r1, r5
 801dbe8:	4630      	mov	r0, r6
 801dbea:	f7ff ffbf 	bl	801db6c <sbrk_aligned>
 801dbee:	1c43      	adds	r3, r0, #1
 801dbf0:	4604      	mov	r4, r0
 801dbf2:	d158      	bne.n	801dca6 <_malloc_r+0xf6>
 801dbf4:	f8d8 4000 	ldr.w	r4, [r8]
 801dbf8:	4627      	mov	r7, r4
 801dbfa:	2f00      	cmp	r7, #0
 801dbfc:	d143      	bne.n	801dc86 <_malloc_r+0xd6>
 801dbfe:	2c00      	cmp	r4, #0
 801dc00:	d04b      	beq.n	801dc9a <_malloc_r+0xea>
 801dc02:	6823      	ldr	r3, [r4, #0]
 801dc04:	4639      	mov	r1, r7
 801dc06:	4630      	mov	r0, r6
 801dc08:	eb04 0903 	add.w	r9, r4, r3
 801dc0c:	f000 fe02 	bl	801e814 <_sbrk_r>
 801dc10:	4581      	cmp	r9, r0
 801dc12:	d142      	bne.n	801dc9a <_malloc_r+0xea>
 801dc14:	6821      	ldr	r1, [r4, #0]
 801dc16:	4630      	mov	r0, r6
 801dc18:	1a6d      	subs	r5, r5, r1
 801dc1a:	4629      	mov	r1, r5
 801dc1c:	f7ff ffa6 	bl	801db6c <sbrk_aligned>
 801dc20:	3001      	adds	r0, #1
 801dc22:	d03a      	beq.n	801dc9a <_malloc_r+0xea>
 801dc24:	6823      	ldr	r3, [r4, #0]
 801dc26:	442b      	add	r3, r5
 801dc28:	6023      	str	r3, [r4, #0]
 801dc2a:	f8d8 3000 	ldr.w	r3, [r8]
 801dc2e:	685a      	ldr	r2, [r3, #4]
 801dc30:	bb62      	cbnz	r2, 801dc8c <_malloc_r+0xdc>
 801dc32:	f8c8 7000 	str.w	r7, [r8]
 801dc36:	e00f      	b.n	801dc58 <_malloc_r+0xa8>
 801dc38:	6822      	ldr	r2, [r4, #0]
 801dc3a:	1b52      	subs	r2, r2, r5
 801dc3c:	d420      	bmi.n	801dc80 <_malloc_r+0xd0>
 801dc3e:	2a0b      	cmp	r2, #11
 801dc40:	d917      	bls.n	801dc72 <_malloc_r+0xc2>
 801dc42:	1961      	adds	r1, r4, r5
 801dc44:	42a3      	cmp	r3, r4
 801dc46:	6025      	str	r5, [r4, #0]
 801dc48:	bf18      	it	ne
 801dc4a:	6059      	strne	r1, [r3, #4]
 801dc4c:	6863      	ldr	r3, [r4, #4]
 801dc4e:	bf08      	it	eq
 801dc50:	f8c8 1000 	streq.w	r1, [r8]
 801dc54:	5162      	str	r2, [r4, r5]
 801dc56:	604b      	str	r3, [r1, #4]
 801dc58:	4630      	mov	r0, r6
 801dc5a:	f000 f82f 	bl	801dcbc <__malloc_unlock>
 801dc5e:	f104 000b 	add.w	r0, r4, #11
 801dc62:	1d23      	adds	r3, r4, #4
 801dc64:	f020 0007 	bic.w	r0, r0, #7
 801dc68:	1ac2      	subs	r2, r0, r3
 801dc6a:	bf1c      	itt	ne
 801dc6c:	1a1b      	subne	r3, r3, r0
 801dc6e:	50a3      	strne	r3, [r4, r2]
 801dc70:	e7af      	b.n	801dbd2 <_malloc_r+0x22>
 801dc72:	6862      	ldr	r2, [r4, #4]
 801dc74:	42a3      	cmp	r3, r4
 801dc76:	bf0c      	ite	eq
 801dc78:	f8c8 2000 	streq.w	r2, [r8]
 801dc7c:	605a      	strne	r2, [r3, #4]
 801dc7e:	e7eb      	b.n	801dc58 <_malloc_r+0xa8>
 801dc80:	4623      	mov	r3, r4
 801dc82:	6864      	ldr	r4, [r4, #4]
 801dc84:	e7ae      	b.n	801dbe4 <_malloc_r+0x34>
 801dc86:	463c      	mov	r4, r7
 801dc88:	687f      	ldr	r7, [r7, #4]
 801dc8a:	e7b6      	b.n	801dbfa <_malloc_r+0x4a>
 801dc8c:	461a      	mov	r2, r3
 801dc8e:	685b      	ldr	r3, [r3, #4]
 801dc90:	42a3      	cmp	r3, r4
 801dc92:	d1fb      	bne.n	801dc8c <_malloc_r+0xdc>
 801dc94:	2300      	movs	r3, #0
 801dc96:	6053      	str	r3, [r2, #4]
 801dc98:	e7de      	b.n	801dc58 <_malloc_r+0xa8>
 801dc9a:	230c      	movs	r3, #12
 801dc9c:	4630      	mov	r0, r6
 801dc9e:	6033      	str	r3, [r6, #0]
 801dca0:	f000 f80c 	bl	801dcbc <__malloc_unlock>
 801dca4:	e794      	b.n	801dbd0 <_malloc_r+0x20>
 801dca6:	6005      	str	r5, [r0, #0]
 801dca8:	e7d6      	b.n	801dc58 <_malloc_r+0xa8>
 801dcaa:	bf00      	nop
 801dcac:	20005d3c 	.word	0x20005d3c

0801dcb0 <__malloc_lock>:
 801dcb0:	4801      	ldr	r0, [pc, #4]	@ (801dcb8 <__malloc_lock+0x8>)
 801dcb2:	f7ff b898 	b.w	801cde6 <__retarget_lock_acquire_recursive>
 801dcb6:	bf00      	nop
 801dcb8:	20005d34 	.word	0x20005d34

0801dcbc <__malloc_unlock>:
 801dcbc:	4801      	ldr	r0, [pc, #4]	@ (801dcc4 <__malloc_unlock+0x8>)
 801dcbe:	f7ff b893 	b.w	801cde8 <__retarget_lock_release_recursive>
 801dcc2:	bf00      	nop
 801dcc4:	20005d34 	.word	0x20005d34

0801dcc8 <_Balloc>:
 801dcc8:	b570      	push	{r4, r5, r6, lr}
 801dcca:	69c6      	ldr	r6, [r0, #28]
 801dccc:	4604      	mov	r4, r0
 801dcce:	460d      	mov	r5, r1
 801dcd0:	b976      	cbnz	r6, 801dcf0 <_Balloc+0x28>
 801dcd2:	2010      	movs	r0, #16
 801dcd4:	f7ff ff42 	bl	801db5c <malloc>
 801dcd8:	4602      	mov	r2, r0
 801dcda:	61e0      	str	r0, [r4, #28]
 801dcdc:	b920      	cbnz	r0, 801dce8 <_Balloc+0x20>
 801dcde:	4b18      	ldr	r3, [pc, #96]	@ (801dd40 <_Balloc+0x78>)
 801dce0:	216b      	movs	r1, #107	@ 0x6b
 801dce2:	4818      	ldr	r0, [pc, #96]	@ (801dd44 <_Balloc+0x7c>)
 801dce4:	f000 fda6 	bl	801e834 <__assert_func>
 801dce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dcec:	6006      	str	r6, [r0, #0]
 801dcee:	60c6      	str	r6, [r0, #12]
 801dcf0:	69e6      	ldr	r6, [r4, #28]
 801dcf2:	68f3      	ldr	r3, [r6, #12]
 801dcf4:	b183      	cbz	r3, 801dd18 <_Balloc+0x50>
 801dcf6:	69e3      	ldr	r3, [r4, #28]
 801dcf8:	68db      	ldr	r3, [r3, #12]
 801dcfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dcfe:	b9b8      	cbnz	r0, 801dd30 <_Balloc+0x68>
 801dd00:	2101      	movs	r1, #1
 801dd02:	4620      	mov	r0, r4
 801dd04:	fa01 f605 	lsl.w	r6, r1, r5
 801dd08:	1d72      	adds	r2, r6, #5
 801dd0a:	0092      	lsls	r2, r2, #2
 801dd0c:	f000 fdb0 	bl	801e870 <_calloc_r>
 801dd10:	b160      	cbz	r0, 801dd2c <_Balloc+0x64>
 801dd12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801dd16:	e00e      	b.n	801dd36 <_Balloc+0x6e>
 801dd18:	2221      	movs	r2, #33	@ 0x21
 801dd1a:	2104      	movs	r1, #4
 801dd1c:	4620      	mov	r0, r4
 801dd1e:	f000 fda7 	bl	801e870 <_calloc_r>
 801dd22:	69e3      	ldr	r3, [r4, #28]
 801dd24:	60f0      	str	r0, [r6, #12]
 801dd26:	68db      	ldr	r3, [r3, #12]
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d1e4      	bne.n	801dcf6 <_Balloc+0x2e>
 801dd2c:	2000      	movs	r0, #0
 801dd2e:	bd70      	pop	{r4, r5, r6, pc}
 801dd30:	6802      	ldr	r2, [r0, #0]
 801dd32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dd36:	2300      	movs	r3, #0
 801dd38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801dd3c:	e7f7      	b.n	801dd2e <_Balloc+0x66>
 801dd3e:	bf00      	nop
 801dd40:	0801f401 	.word	0x0801f401
 801dd44:	0801f481 	.word	0x0801f481

0801dd48 <_Bfree>:
 801dd48:	b570      	push	{r4, r5, r6, lr}
 801dd4a:	69c6      	ldr	r6, [r0, #28]
 801dd4c:	4605      	mov	r5, r0
 801dd4e:	460c      	mov	r4, r1
 801dd50:	b976      	cbnz	r6, 801dd70 <_Bfree+0x28>
 801dd52:	2010      	movs	r0, #16
 801dd54:	f7ff ff02 	bl	801db5c <malloc>
 801dd58:	4602      	mov	r2, r0
 801dd5a:	61e8      	str	r0, [r5, #28]
 801dd5c:	b920      	cbnz	r0, 801dd68 <_Bfree+0x20>
 801dd5e:	4b09      	ldr	r3, [pc, #36]	@ (801dd84 <_Bfree+0x3c>)
 801dd60:	218f      	movs	r1, #143	@ 0x8f
 801dd62:	4809      	ldr	r0, [pc, #36]	@ (801dd88 <_Bfree+0x40>)
 801dd64:	f000 fd66 	bl	801e834 <__assert_func>
 801dd68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dd6c:	6006      	str	r6, [r0, #0]
 801dd6e:	60c6      	str	r6, [r0, #12]
 801dd70:	b13c      	cbz	r4, 801dd82 <_Bfree+0x3a>
 801dd72:	69eb      	ldr	r3, [r5, #28]
 801dd74:	6862      	ldr	r2, [r4, #4]
 801dd76:	68db      	ldr	r3, [r3, #12]
 801dd78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dd7c:	6021      	str	r1, [r4, #0]
 801dd7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801dd82:	bd70      	pop	{r4, r5, r6, pc}
 801dd84:	0801f401 	.word	0x0801f401
 801dd88:	0801f481 	.word	0x0801f481

0801dd8c <__multadd>:
 801dd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd90:	f101 0c14 	add.w	ip, r1, #20
 801dd94:	4607      	mov	r7, r0
 801dd96:	460c      	mov	r4, r1
 801dd98:	461e      	mov	r6, r3
 801dd9a:	690d      	ldr	r5, [r1, #16]
 801dd9c:	2000      	movs	r0, #0
 801dd9e:	f8dc 3000 	ldr.w	r3, [ip]
 801dda2:	3001      	adds	r0, #1
 801dda4:	b299      	uxth	r1, r3
 801dda6:	4285      	cmp	r5, r0
 801dda8:	fb02 6101 	mla	r1, r2, r1, r6
 801ddac:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ddb0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801ddb4:	b289      	uxth	r1, r1
 801ddb6:	fb02 3306 	mla	r3, r2, r6, r3
 801ddba:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ddbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ddc2:	f84c 1b04 	str.w	r1, [ip], #4
 801ddc6:	dcea      	bgt.n	801dd9e <__multadd+0x12>
 801ddc8:	b30e      	cbz	r6, 801de0e <__multadd+0x82>
 801ddca:	68a3      	ldr	r3, [r4, #8]
 801ddcc:	42ab      	cmp	r3, r5
 801ddce:	dc19      	bgt.n	801de04 <__multadd+0x78>
 801ddd0:	6861      	ldr	r1, [r4, #4]
 801ddd2:	4638      	mov	r0, r7
 801ddd4:	3101      	adds	r1, #1
 801ddd6:	f7ff ff77 	bl	801dcc8 <_Balloc>
 801ddda:	4680      	mov	r8, r0
 801dddc:	b928      	cbnz	r0, 801ddea <__multadd+0x5e>
 801ddde:	4602      	mov	r2, r0
 801dde0:	4b0c      	ldr	r3, [pc, #48]	@ (801de14 <__multadd+0x88>)
 801dde2:	21ba      	movs	r1, #186	@ 0xba
 801dde4:	480c      	ldr	r0, [pc, #48]	@ (801de18 <__multadd+0x8c>)
 801dde6:	f000 fd25 	bl	801e834 <__assert_func>
 801ddea:	6922      	ldr	r2, [r4, #16]
 801ddec:	f104 010c 	add.w	r1, r4, #12
 801ddf0:	300c      	adds	r0, #12
 801ddf2:	3202      	adds	r2, #2
 801ddf4:	0092      	lsls	r2, r2, #2
 801ddf6:	f7ff f806 	bl	801ce06 <memcpy>
 801ddfa:	4621      	mov	r1, r4
 801ddfc:	4644      	mov	r4, r8
 801ddfe:	4638      	mov	r0, r7
 801de00:	f7ff ffa2 	bl	801dd48 <_Bfree>
 801de04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801de08:	3501      	adds	r5, #1
 801de0a:	615e      	str	r6, [r3, #20]
 801de0c:	6125      	str	r5, [r4, #16]
 801de0e:	4620      	mov	r0, r4
 801de10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de14:	0801f470 	.word	0x0801f470
 801de18:	0801f481 	.word	0x0801f481

0801de1c <__hi0bits>:
 801de1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801de20:	4603      	mov	r3, r0
 801de22:	bf36      	itet	cc
 801de24:	0403      	lslcc	r3, r0, #16
 801de26:	2000      	movcs	r0, #0
 801de28:	2010      	movcc	r0, #16
 801de2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801de2e:	bf3c      	itt	cc
 801de30:	021b      	lslcc	r3, r3, #8
 801de32:	3008      	addcc	r0, #8
 801de34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801de38:	bf3c      	itt	cc
 801de3a:	011b      	lslcc	r3, r3, #4
 801de3c:	3004      	addcc	r0, #4
 801de3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801de42:	bf3c      	itt	cc
 801de44:	009b      	lslcc	r3, r3, #2
 801de46:	3002      	addcc	r0, #2
 801de48:	2b00      	cmp	r3, #0
 801de4a:	db05      	blt.n	801de58 <__hi0bits+0x3c>
 801de4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801de50:	f100 0001 	add.w	r0, r0, #1
 801de54:	bf08      	it	eq
 801de56:	2020      	moveq	r0, #32
 801de58:	4770      	bx	lr

0801de5a <__lo0bits>:
 801de5a:	6803      	ldr	r3, [r0, #0]
 801de5c:	4602      	mov	r2, r0
 801de5e:	f013 0007 	ands.w	r0, r3, #7
 801de62:	d00b      	beq.n	801de7c <__lo0bits+0x22>
 801de64:	07d9      	lsls	r1, r3, #31
 801de66:	d421      	bmi.n	801deac <__lo0bits+0x52>
 801de68:	0798      	lsls	r0, r3, #30
 801de6a:	bf47      	ittee	mi
 801de6c:	085b      	lsrmi	r3, r3, #1
 801de6e:	2001      	movmi	r0, #1
 801de70:	089b      	lsrpl	r3, r3, #2
 801de72:	2002      	movpl	r0, #2
 801de74:	bf4c      	ite	mi
 801de76:	6013      	strmi	r3, [r2, #0]
 801de78:	6013      	strpl	r3, [r2, #0]
 801de7a:	4770      	bx	lr
 801de7c:	b299      	uxth	r1, r3
 801de7e:	b909      	cbnz	r1, 801de84 <__lo0bits+0x2a>
 801de80:	0c1b      	lsrs	r3, r3, #16
 801de82:	2010      	movs	r0, #16
 801de84:	b2d9      	uxtb	r1, r3
 801de86:	b909      	cbnz	r1, 801de8c <__lo0bits+0x32>
 801de88:	3008      	adds	r0, #8
 801de8a:	0a1b      	lsrs	r3, r3, #8
 801de8c:	0719      	lsls	r1, r3, #28
 801de8e:	bf04      	itt	eq
 801de90:	091b      	lsreq	r3, r3, #4
 801de92:	3004      	addeq	r0, #4
 801de94:	0799      	lsls	r1, r3, #30
 801de96:	bf04      	itt	eq
 801de98:	089b      	lsreq	r3, r3, #2
 801de9a:	3002      	addeq	r0, #2
 801de9c:	07d9      	lsls	r1, r3, #31
 801de9e:	d403      	bmi.n	801dea8 <__lo0bits+0x4e>
 801dea0:	085b      	lsrs	r3, r3, #1
 801dea2:	f100 0001 	add.w	r0, r0, #1
 801dea6:	d003      	beq.n	801deb0 <__lo0bits+0x56>
 801dea8:	6013      	str	r3, [r2, #0]
 801deaa:	4770      	bx	lr
 801deac:	2000      	movs	r0, #0
 801deae:	4770      	bx	lr
 801deb0:	2020      	movs	r0, #32
 801deb2:	4770      	bx	lr

0801deb4 <__i2b>:
 801deb4:	b510      	push	{r4, lr}
 801deb6:	460c      	mov	r4, r1
 801deb8:	2101      	movs	r1, #1
 801deba:	f7ff ff05 	bl	801dcc8 <_Balloc>
 801debe:	4602      	mov	r2, r0
 801dec0:	b928      	cbnz	r0, 801dece <__i2b+0x1a>
 801dec2:	4b05      	ldr	r3, [pc, #20]	@ (801ded8 <__i2b+0x24>)
 801dec4:	f240 1145 	movw	r1, #325	@ 0x145
 801dec8:	4804      	ldr	r0, [pc, #16]	@ (801dedc <__i2b+0x28>)
 801deca:	f000 fcb3 	bl	801e834 <__assert_func>
 801dece:	2301      	movs	r3, #1
 801ded0:	6144      	str	r4, [r0, #20]
 801ded2:	6103      	str	r3, [r0, #16]
 801ded4:	bd10      	pop	{r4, pc}
 801ded6:	bf00      	nop
 801ded8:	0801f470 	.word	0x0801f470
 801dedc:	0801f481 	.word	0x0801f481

0801dee0 <__multiply>:
 801dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee4:	4614      	mov	r4, r2
 801dee6:	690a      	ldr	r2, [r1, #16]
 801dee8:	460f      	mov	r7, r1
 801deea:	b085      	sub	sp, #20
 801deec:	6923      	ldr	r3, [r4, #16]
 801deee:	429a      	cmp	r2, r3
 801def0:	bfa2      	ittt	ge
 801def2:	4623      	movge	r3, r4
 801def4:	460c      	movge	r4, r1
 801def6:	461f      	movge	r7, r3
 801def8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801defc:	68a3      	ldr	r3, [r4, #8]
 801defe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801df02:	6861      	ldr	r1, [r4, #4]
 801df04:	eb0a 0609 	add.w	r6, sl, r9
 801df08:	42b3      	cmp	r3, r6
 801df0a:	bfb8      	it	lt
 801df0c:	3101      	addlt	r1, #1
 801df0e:	f7ff fedb 	bl	801dcc8 <_Balloc>
 801df12:	b930      	cbnz	r0, 801df22 <__multiply+0x42>
 801df14:	4602      	mov	r2, r0
 801df16:	4b45      	ldr	r3, [pc, #276]	@ (801e02c <__multiply+0x14c>)
 801df18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801df1c:	4844      	ldr	r0, [pc, #272]	@ (801e030 <__multiply+0x150>)
 801df1e:	f000 fc89 	bl	801e834 <__assert_func>
 801df22:	f100 0514 	add.w	r5, r0, #20
 801df26:	2200      	movs	r2, #0
 801df28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801df2c:	462b      	mov	r3, r5
 801df2e:	4543      	cmp	r3, r8
 801df30:	d321      	bcc.n	801df76 <__multiply+0x96>
 801df32:	f107 0114 	add.w	r1, r7, #20
 801df36:	f104 0214 	add.w	r2, r4, #20
 801df3a:	f104 0715 	add.w	r7, r4, #21
 801df3e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801df42:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801df46:	9302      	str	r3, [sp, #8]
 801df48:	1b13      	subs	r3, r2, r4
 801df4a:	3b15      	subs	r3, #21
 801df4c:	f023 0303 	bic.w	r3, r3, #3
 801df50:	3304      	adds	r3, #4
 801df52:	42ba      	cmp	r2, r7
 801df54:	bf38      	it	cc
 801df56:	2304      	movcc	r3, #4
 801df58:	9301      	str	r3, [sp, #4]
 801df5a:	9b02      	ldr	r3, [sp, #8]
 801df5c:	9103      	str	r1, [sp, #12]
 801df5e:	428b      	cmp	r3, r1
 801df60:	d80c      	bhi.n	801df7c <__multiply+0x9c>
 801df62:	2e00      	cmp	r6, #0
 801df64:	dd03      	ble.n	801df6e <__multiply+0x8e>
 801df66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d05b      	beq.n	801e026 <__multiply+0x146>
 801df6e:	6106      	str	r6, [r0, #16]
 801df70:	b005      	add	sp, #20
 801df72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df76:	f843 2b04 	str.w	r2, [r3], #4
 801df7a:	e7d8      	b.n	801df2e <__multiply+0x4e>
 801df7c:	f8b1 a000 	ldrh.w	sl, [r1]
 801df80:	f1ba 0f00 	cmp.w	sl, #0
 801df84:	d024      	beq.n	801dfd0 <__multiply+0xf0>
 801df86:	f104 0e14 	add.w	lr, r4, #20
 801df8a:	46a9      	mov	r9, r5
 801df8c:	f04f 0c00 	mov.w	ip, #0
 801df90:	f85e 7b04 	ldr.w	r7, [lr], #4
 801df94:	f8d9 3000 	ldr.w	r3, [r9]
 801df98:	fa1f fb87 	uxth.w	fp, r7
 801df9c:	4572      	cmp	r2, lr
 801df9e:	b29b      	uxth	r3, r3
 801dfa0:	fb0a 330b 	mla	r3, sl, fp, r3
 801dfa4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801dfa8:	f8d9 7000 	ldr.w	r7, [r9]
 801dfac:	4463      	add	r3, ip
 801dfae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801dfb2:	fb0a c70b 	mla	r7, sl, fp, ip
 801dfb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801dfba:	b29b      	uxth	r3, r3
 801dfbc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801dfc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801dfc4:	f849 3b04 	str.w	r3, [r9], #4
 801dfc8:	d8e2      	bhi.n	801df90 <__multiply+0xb0>
 801dfca:	9b01      	ldr	r3, [sp, #4]
 801dfcc:	f845 c003 	str.w	ip, [r5, r3]
 801dfd0:	9b03      	ldr	r3, [sp, #12]
 801dfd2:	3104      	adds	r1, #4
 801dfd4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801dfd8:	f1b9 0f00 	cmp.w	r9, #0
 801dfdc:	d021      	beq.n	801e022 <__multiply+0x142>
 801dfde:	682b      	ldr	r3, [r5, #0]
 801dfe0:	f104 0c14 	add.w	ip, r4, #20
 801dfe4:	46ae      	mov	lr, r5
 801dfe6:	f04f 0a00 	mov.w	sl, #0
 801dfea:	f8bc b000 	ldrh.w	fp, [ip]
 801dfee:	b29b      	uxth	r3, r3
 801dff0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801dff4:	fb09 770b 	mla	r7, r9, fp, r7
 801dff8:	4457      	add	r7, sl
 801dffa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801dffe:	f84e 3b04 	str.w	r3, [lr], #4
 801e002:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e006:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e00a:	f8be 3000 	ldrh.w	r3, [lr]
 801e00e:	4562      	cmp	r2, ip
 801e010:	fb09 330a 	mla	r3, r9, sl, r3
 801e014:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e018:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e01c:	d8e5      	bhi.n	801dfea <__multiply+0x10a>
 801e01e:	9f01      	ldr	r7, [sp, #4]
 801e020:	51eb      	str	r3, [r5, r7]
 801e022:	3504      	adds	r5, #4
 801e024:	e799      	b.n	801df5a <__multiply+0x7a>
 801e026:	3e01      	subs	r6, #1
 801e028:	e79b      	b.n	801df62 <__multiply+0x82>
 801e02a:	bf00      	nop
 801e02c:	0801f470 	.word	0x0801f470
 801e030:	0801f481 	.word	0x0801f481

0801e034 <__pow5mult>:
 801e034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e038:	4615      	mov	r5, r2
 801e03a:	f012 0203 	ands.w	r2, r2, #3
 801e03e:	4607      	mov	r7, r0
 801e040:	460e      	mov	r6, r1
 801e042:	d007      	beq.n	801e054 <__pow5mult+0x20>
 801e044:	3a01      	subs	r2, #1
 801e046:	4c25      	ldr	r4, [pc, #148]	@ (801e0dc <__pow5mult+0xa8>)
 801e048:	2300      	movs	r3, #0
 801e04a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e04e:	f7ff fe9d 	bl	801dd8c <__multadd>
 801e052:	4606      	mov	r6, r0
 801e054:	10ad      	asrs	r5, r5, #2
 801e056:	d03d      	beq.n	801e0d4 <__pow5mult+0xa0>
 801e058:	69fc      	ldr	r4, [r7, #28]
 801e05a:	b97c      	cbnz	r4, 801e07c <__pow5mult+0x48>
 801e05c:	2010      	movs	r0, #16
 801e05e:	f7ff fd7d 	bl	801db5c <malloc>
 801e062:	4602      	mov	r2, r0
 801e064:	61f8      	str	r0, [r7, #28]
 801e066:	b928      	cbnz	r0, 801e074 <__pow5mult+0x40>
 801e068:	4b1d      	ldr	r3, [pc, #116]	@ (801e0e0 <__pow5mult+0xac>)
 801e06a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e06e:	481d      	ldr	r0, [pc, #116]	@ (801e0e4 <__pow5mult+0xb0>)
 801e070:	f000 fbe0 	bl	801e834 <__assert_func>
 801e074:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e078:	6004      	str	r4, [r0, #0]
 801e07a:	60c4      	str	r4, [r0, #12]
 801e07c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e080:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e084:	b94c      	cbnz	r4, 801e09a <__pow5mult+0x66>
 801e086:	f240 2171 	movw	r1, #625	@ 0x271
 801e08a:	4638      	mov	r0, r7
 801e08c:	f7ff ff12 	bl	801deb4 <__i2b>
 801e090:	2300      	movs	r3, #0
 801e092:	4604      	mov	r4, r0
 801e094:	f8c8 0008 	str.w	r0, [r8, #8]
 801e098:	6003      	str	r3, [r0, #0]
 801e09a:	f04f 0900 	mov.w	r9, #0
 801e09e:	07eb      	lsls	r3, r5, #31
 801e0a0:	d50a      	bpl.n	801e0b8 <__pow5mult+0x84>
 801e0a2:	4631      	mov	r1, r6
 801e0a4:	4622      	mov	r2, r4
 801e0a6:	4638      	mov	r0, r7
 801e0a8:	f7ff ff1a 	bl	801dee0 <__multiply>
 801e0ac:	4680      	mov	r8, r0
 801e0ae:	4631      	mov	r1, r6
 801e0b0:	4638      	mov	r0, r7
 801e0b2:	4646      	mov	r6, r8
 801e0b4:	f7ff fe48 	bl	801dd48 <_Bfree>
 801e0b8:	106d      	asrs	r5, r5, #1
 801e0ba:	d00b      	beq.n	801e0d4 <__pow5mult+0xa0>
 801e0bc:	6820      	ldr	r0, [r4, #0]
 801e0be:	b938      	cbnz	r0, 801e0d0 <__pow5mult+0x9c>
 801e0c0:	4622      	mov	r2, r4
 801e0c2:	4621      	mov	r1, r4
 801e0c4:	4638      	mov	r0, r7
 801e0c6:	f7ff ff0b 	bl	801dee0 <__multiply>
 801e0ca:	6020      	str	r0, [r4, #0]
 801e0cc:	f8c0 9000 	str.w	r9, [r0]
 801e0d0:	4604      	mov	r4, r0
 801e0d2:	e7e4      	b.n	801e09e <__pow5mult+0x6a>
 801e0d4:	4630      	mov	r0, r6
 801e0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e0da:	bf00      	nop
 801e0dc:	0801f4dc 	.word	0x0801f4dc
 801e0e0:	0801f401 	.word	0x0801f401
 801e0e4:	0801f481 	.word	0x0801f481

0801e0e8 <__lshift>:
 801e0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0ec:	460c      	mov	r4, r1
 801e0ee:	4607      	mov	r7, r0
 801e0f0:	4691      	mov	r9, r2
 801e0f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e0f6:	6923      	ldr	r3, [r4, #16]
 801e0f8:	6849      	ldr	r1, [r1, #4]
 801e0fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e0fe:	68a3      	ldr	r3, [r4, #8]
 801e100:	f108 0601 	add.w	r6, r8, #1
 801e104:	42b3      	cmp	r3, r6
 801e106:	db0b      	blt.n	801e120 <__lshift+0x38>
 801e108:	4638      	mov	r0, r7
 801e10a:	f7ff fddd 	bl	801dcc8 <_Balloc>
 801e10e:	4605      	mov	r5, r0
 801e110:	b948      	cbnz	r0, 801e126 <__lshift+0x3e>
 801e112:	4602      	mov	r2, r0
 801e114:	4b28      	ldr	r3, [pc, #160]	@ (801e1b8 <__lshift+0xd0>)
 801e116:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e11a:	4828      	ldr	r0, [pc, #160]	@ (801e1bc <__lshift+0xd4>)
 801e11c:	f000 fb8a 	bl	801e834 <__assert_func>
 801e120:	3101      	adds	r1, #1
 801e122:	005b      	lsls	r3, r3, #1
 801e124:	e7ee      	b.n	801e104 <__lshift+0x1c>
 801e126:	2300      	movs	r3, #0
 801e128:	f100 0114 	add.w	r1, r0, #20
 801e12c:	f100 0210 	add.w	r2, r0, #16
 801e130:	4618      	mov	r0, r3
 801e132:	4553      	cmp	r3, sl
 801e134:	db33      	blt.n	801e19e <__lshift+0xb6>
 801e136:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e13a:	f104 0314 	add.w	r3, r4, #20
 801e13e:	6920      	ldr	r0, [r4, #16]
 801e140:	f019 091f 	ands.w	r9, r9, #31
 801e144:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e148:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e14c:	d02b      	beq.n	801e1a6 <__lshift+0xbe>
 801e14e:	f1c9 0e20 	rsb	lr, r9, #32
 801e152:	468a      	mov	sl, r1
 801e154:	2200      	movs	r2, #0
 801e156:	6818      	ldr	r0, [r3, #0]
 801e158:	fa00 f009 	lsl.w	r0, r0, r9
 801e15c:	4310      	orrs	r0, r2
 801e15e:	f84a 0b04 	str.w	r0, [sl], #4
 801e162:	f853 2b04 	ldr.w	r2, [r3], #4
 801e166:	459c      	cmp	ip, r3
 801e168:	fa22 f20e 	lsr.w	r2, r2, lr
 801e16c:	d8f3      	bhi.n	801e156 <__lshift+0x6e>
 801e16e:	ebac 0304 	sub.w	r3, ip, r4
 801e172:	f104 0015 	add.w	r0, r4, #21
 801e176:	3b15      	subs	r3, #21
 801e178:	f023 0303 	bic.w	r3, r3, #3
 801e17c:	3304      	adds	r3, #4
 801e17e:	4584      	cmp	ip, r0
 801e180:	bf38      	it	cc
 801e182:	2304      	movcc	r3, #4
 801e184:	50ca      	str	r2, [r1, r3]
 801e186:	b10a      	cbz	r2, 801e18c <__lshift+0xa4>
 801e188:	f108 0602 	add.w	r6, r8, #2
 801e18c:	3e01      	subs	r6, #1
 801e18e:	4638      	mov	r0, r7
 801e190:	4621      	mov	r1, r4
 801e192:	612e      	str	r6, [r5, #16]
 801e194:	f7ff fdd8 	bl	801dd48 <_Bfree>
 801e198:	4628      	mov	r0, r5
 801e19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e19e:	3301      	adds	r3, #1
 801e1a0:	f842 0f04 	str.w	r0, [r2, #4]!
 801e1a4:	e7c5      	b.n	801e132 <__lshift+0x4a>
 801e1a6:	3904      	subs	r1, #4
 801e1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 801e1ac:	459c      	cmp	ip, r3
 801e1ae:	f841 2f04 	str.w	r2, [r1, #4]!
 801e1b2:	d8f9      	bhi.n	801e1a8 <__lshift+0xc0>
 801e1b4:	e7ea      	b.n	801e18c <__lshift+0xa4>
 801e1b6:	bf00      	nop
 801e1b8:	0801f470 	.word	0x0801f470
 801e1bc:	0801f481 	.word	0x0801f481

0801e1c0 <__mcmp>:
 801e1c0:	4603      	mov	r3, r0
 801e1c2:	690a      	ldr	r2, [r1, #16]
 801e1c4:	6900      	ldr	r0, [r0, #16]
 801e1c6:	1a80      	subs	r0, r0, r2
 801e1c8:	b530      	push	{r4, r5, lr}
 801e1ca:	d10e      	bne.n	801e1ea <__mcmp+0x2a>
 801e1cc:	3314      	adds	r3, #20
 801e1ce:	3114      	adds	r1, #20
 801e1d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e1d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e1d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e1dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e1e0:	4295      	cmp	r5, r2
 801e1e2:	d003      	beq.n	801e1ec <__mcmp+0x2c>
 801e1e4:	d205      	bcs.n	801e1f2 <__mcmp+0x32>
 801e1e6:	f04f 30ff 	mov.w	r0, #4294967295
 801e1ea:	bd30      	pop	{r4, r5, pc}
 801e1ec:	42a3      	cmp	r3, r4
 801e1ee:	d3f3      	bcc.n	801e1d8 <__mcmp+0x18>
 801e1f0:	e7fb      	b.n	801e1ea <__mcmp+0x2a>
 801e1f2:	2001      	movs	r0, #1
 801e1f4:	e7f9      	b.n	801e1ea <__mcmp+0x2a>
	...

0801e1f8 <__mdiff>:
 801e1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1fc:	4689      	mov	r9, r1
 801e1fe:	4606      	mov	r6, r0
 801e200:	4611      	mov	r1, r2
 801e202:	4614      	mov	r4, r2
 801e204:	4648      	mov	r0, r9
 801e206:	f7ff ffdb 	bl	801e1c0 <__mcmp>
 801e20a:	1e05      	subs	r5, r0, #0
 801e20c:	d112      	bne.n	801e234 <__mdiff+0x3c>
 801e20e:	4629      	mov	r1, r5
 801e210:	4630      	mov	r0, r6
 801e212:	f7ff fd59 	bl	801dcc8 <_Balloc>
 801e216:	4602      	mov	r2, r0
 801e218:	b928      	cbnz	r0, 801e226 <__mdiff+0x2e>
 801e21a:	4b41      	ldr	r3, [pc, #260]	@ (801e320 <__mdiff+0x128>)
 801e21c:	f240 2137 	movw	r1, #567	@ 0x237
 801e220:	4840      	ldr	r0, [pc, #256]	@ (801e324 <__mdiff+0x12c>)
 801e222:	f000 fb07 	bl	801e834 <__assert_func>
 801e226:	2301      	movs	r3, #1
 801e228:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e22c:	4610      	mov	r0, r2
 801e22e:	b003      	add	sp, #12
 801e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e234:	bfbc      	itt	lt
 801e236:	464b      	movlt	r3, r9
 801e238:	46a1      	movlt	r9, r4
 801e23a:	4630      	mov	r0, r6
 801e23c:	bfb8      	it	lt
 801e23e:	2501      	movlt	r5, #1
 801e240:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e244:	bfb4      	ite	lt
 801e246:	461c      	movlt	r4, r3
 801e248:	2500      	movge	r5, #0
 801e24a:	f7ff fd3d 	bl	801dcc8 <_Balloc>
 801e24e:	4602      	mov	r2, r0
 801e250:	b918      	cbnz	r0, 801e25a <__mdiff+0x62>
 801e252:	4b33      	ldr	r3, [pc, #204]	@ (801e320 <__mdiff+0x128>)
 801e254:	f240 2145 	movw	r1, #581	@ 0x245
 801e258:	e7e2      	b.n	801e220 <__mdiff+0x28>
 801e25a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e25e:	f104 0e14 	add.w	lr, r4, #20
 801e262:	6926      	ldr	r6, [r4, #16]
 801e264:	f100 0b14 	add.w	fp, r0, #20
 801e268:	60c5      	str	r5, [r0, #12]
 801e26a:	f109 0514 	add.w	r5, r9, #20
 801e26e:	f109 0310 	add.w	r3, r9, #16
 801e272:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e276:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e27a:	46d9      	mov	r9, fp
 801e27c:	f04f 0c00 	mov.w	ip, #0
 801e280:	9301      	str	r3, [sp, #4]
 801e282:	9b01      	ldr	r3, [sp, #4]
 801e284:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e288:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e28c:	4576      	cmp	r6, lr
 801e28e:	9301      	str	r3, [sp, #4]
 801e290:	fa1f f38a 	uxth.w	r3, sl
 801e294:	4619      	mov	r1, r3
 801e296:	b283      	uxth	r3, r0
 801e298:	ea4f 4010 	mov.w	r0, r0, lsr #16
 801e29c:	eba1 0303 	sub.w	r3, r1, r3
 801e2a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e2a4:	4463      	add	r3, ip
 801e2a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e2aa:	b29b      	uxth	r3, r3
 801e2ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e2b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e2b4:	f849 3b04 	str.w	r3, [r9], #4
 801e2b8:	d8e3      	bhi.n	801e282 <__mdiff+0x8a>
 801e2ba:	1b33      	subs	r3, r6, r4
 801e2bc:	3415      	adds	r4, #21
 801e2be:	3b15      	subs	r3, #21
 801e2c0:	f023 0303 	bic.w	r3, r3, #3
 801e2c4:	3304      	adds	r3, #4
 801e2c6:	42a6      	cmp	r6, r4
 801e2c8:	bf38      	it	cc
 801e2ca:	2304      	movcc	r3, #4
 801e2cc:	441d      	add	r5, r3
 801e2ce:	445b      	add	r3, fp
 801e2d0:	462c      	mov	r4, r5
 801e2d2:	461e      	mov	r6, r3
 801e2d4:	4544      	cmp	r4, r8
 801e2d6:	d30e      	bcc.n	801e2f6 <__mdiff+0xfe>
 801e2d8:	f108 0103 	add.w	r1, r8, #3
 801e2dc:	1b49      	subs	r1, r1, r5
 801e2de:	3d03      	subs	r5, #3
 801e2e0:	f021 0103 	bic.w	r1, r1, #3
 801e2e4:	45a8      	cmp	r8, r5
 801e2e6:	bf38      	it	cc
 801e2e8:	2100      	movcc	r1, #0
 801e2ea:	440b      	add	r3, r1
 801e2ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e2f0:	b199      	cbz	r1, 801e31a <__mdiff+0x122>
 801e2f2:	6117      	str	r7, [r2, #16]
 801e2f4:	e79a      	b.n	801e22c <__mdiff+0x34>
 801e2f6:	f854 1b04 	ldr.w	r1, [r4], #4
 801e2fa:	46e6      	mov	lr, ip
 801e2fc:	fa1f fc81 	uxth.w	ip, r1
 801e300:	0c08      	lsrs	r0, r1, #16
 801e302:	4471      	add	r1, lr
 801e304:	44f4      	add	ip, lr
 801e306:	b289      	uxth	r1, r1
 801e308:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e310:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e314:	f846 1b04 	str.w	r1, [r6], #4
 801e318:	e7dc      	b.n	801e2d4 <__mdiff+0xdc>
 801e31a:	3f01      	subs	r7, #1
 801e31c:	e7e6      	b.n	801e2ec <__mdiff+0xf4>
 801e31e:	bf00      	nop
 801e320:	0801f470 	.word	0x0801f470
 801e324:	0801f481 	.word	0x0801f481

0801e328 <__d2b>:
 801e328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e32c:	460f      	mov	r7, r1
 801e32e:	2101      	movs	r1, #1
 801e330:	4616      	mov	r6, r2
 801e332:	ec59 8b10 	vmov	r8, r9, d0
 801e336:	f7ff fcc7 	bl	801dcc8 <_Balloc>
 801e33a:	4604      	mov	r4, r0
 801e33c:	b930      	cbnz	r0, 801e34c <__d2b+0x24>
 801e33e:	4602      	mov	r2, r0
 801e340:	4b23      	ldr	r3, [pc, #140]	@ (801e3d0 <__d2b+0xa8>)
 801e342:	f240 310f 	movw	r1, #783	@ 0x30f
 801e346:	4823      	ldr	r0, [pc, #140]	@ (801e3d4 <__d2b+0xac>)
 801e348:	f000 fa74 	bl	801e834 <__assert_func>
 801e34c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e354:	b10d      	cbz	r5, 801e35a <__d2b+0x32>
 801e356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e35a:	9301      	str	r3, [sp, #4]
 801e35c:	f1b8 0300 	subs.w	r3, r8, #0
 801e360:	d023      	beq.n	801e3aa <__d2b+0x82>
 801e362:	4668      	mov	r0, sp
 801e364:	9300      	str	r3, [sp, #0]
 801e366:	f7ff fd78 	bl	801de5a <__lo0bits>
 801e36a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e36e:	b1d0      	cbz	r0, 801e3a6 <__d2b+0x7e>
 801e370:	f1c0 0320 	rsb	r3, r0, #32
 801e374:	fa02 f303 	lsl.w	r3, r2, r3
 801e378:	40c2      	lsrs	r2, r0
 801e37a:	430b      	orrs	r3, r1
 801e37c:	9201      	str	r2, [sp, #4]
 801e37e:	6163      	str	r3, [r4, #20]
 801e380:	9b01      	ldr	r3, [sp, #4]
 801e382:	2b00      	cmp	r3, #0
 801e384:	61a3      	str	r3, [r4, #24]
 801e386:	bf0c      	ite	eq
 801e388:	2201      	moveq	r2, #1
 801e38a:	2202      	movne	r2, #2
 801e38c:	6122      	str	r2, [r4, #16]
 801e38e:	b1a5      	cbz	r5, 801e3ba <__d2b+0x92>
 801e390:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e394:	4405      	add	r5, r0
 801e396:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e39a:	603d      	str	r5, [r7, #0]
 801e39c:	6030      	str	r0, [r6, #0]
 801e39e:	4620      	mov	r0, r4
 801e3a0:	b003      	add	sp, #12
 801e3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e3a6:	6161      	str	r1, [r4, #20]
 801e3a8:	e7ea      	b.n	801e380 <__d2b+0x58>
 801e3aa:	a801      	add	r0, sp, #4
 801e3ac:	f7ff fd55 	bl	801de5a <__lo0bits>
 801e3b0:	9b01      	ldr	r3, [sp, #4]
 801e3b2:	3020      	adds	r0, #32
 801e3b4:	2201      	movs	r2, #1
 801e3b6:	6163      	str	r3, [r4, #20]
 801e3b8:	e7e8      	b.n	801e38c <__d2b+0x64>
 801e3ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e3be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e3c2:	6038      	str	r0, [r7, #0]
 801e3c4:	6918      	ldr	r0, [r3, #16]
 801e3c6:	f7ff fd29 	bl	801de1c <__hi0bits>
 801e3ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e3ce:	e7e5      	b.n	801e39c <__d2b+0x74>
 801e3d0:	0801f470 	.word	0x0801f470
 801e3d4:	0801f481 	.word	0x0801f481

0801e3d8 <__ssputs_r>:
 801e3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3dc:	461f      	mov	r7, r3
 801e3de:	688e      	ldr	r6, [r1, #8]
 801e3e0:	4682      	mov	sl, r0
 801e3e2:	460c      	mov	r4, r1
 801e3e4:	42be      	cmp	r6, r7
 801e3e6:	4690      	mov	r8, r2
 801e3e8:	680b      	ldr	r3, [r1, #0]
 801e3ea:	d82d      	bhi.n	801e448 <__ssputs_r+0x70>
 801e3ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e3f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e3f4:	d026      	beq.n	801e444 <__ssputs_r+0x6c>
 801e3f6:	6965      	ldr	r5, [r4, #20]
 801e3f8:	6909      	ldr	r1, [r1, #16]
 801e3fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e3fe:	eba3 0901 	sub.w	r9, r3, r1
 801e402:	1c7b      	adds	r3, r7, #1
 801e404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e408:	444b      	add	r3, r9
 801e40a:	106d      	asrs	r5, r5, #1
 801e40c:	429d      	cmp	r5, r3
 801e40e:	bf38      	it	cc
 801e410:	461d      	movcc	r5, r3
 801e412:	0553      	lsls	r3, r2, #21
 801e414:	d527      	bpl.n	801e466 <__ssputs_r+0x8e>
 801e416:	4629      	mov	r1, r5
 801e418:	f7ff fbca 	bl	801dbb0 <_malloc_r>
 801e41c:	4606      	mov	r6, r0
 801e41e:	b360      	cbz	r0, 801e47a <__ssputs_r+0xa2>
 801e420:	464a      	mov	r2, r9
 801e422:	6921      	ldr	r1, [r4, #16]
 801e424:	f7fe fcef 	bl	801ce06 <memcpy>
 801e428:	89a3      	ldrh	r3, [r4, #12]
 801e42a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e42e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e432:	81a3      	strh	r3, [r4, #12]
 801e434:	6126      	str	r6, [r4, #16]
 801e436:	444e      	add	r6, r9
 801e438:	6165      	str	r5, [r4, #20]
 801e43a:	eba5 0509 	sub.w	r5, r5, r9
 801e43e:	6026      	str	r6, [r4, #0]
 801e440:	463e      	mov	r6, r7
 801e442:	60a5      	str	r5, [r4, #8]
 801e444:	42be      	cmp	r6, r7
 801e446:	d900      	bls.n	801e44a <__ssputs_r+0x72>
 801e448:	463e      	mov	r6, r7
 801e44a:	4632      	mov	r2, r6
 801e44c:	4641      	mov	r1, r8
 801e44e:	6820      	ldr	r0, [r4, #0]
 801e450:	f000 f9c6 	bl	801e7e0 <memmove>
 801e454:	68a3      	ldr	r3, [r4, #8]
 801e456:	2000      	movs	r0, #0
 801e458:	1b9b      	subs	r3, r3, r6
 801e45a:	60a3      	str	r3, [r4, #8]
 801e45c:	6823      	ldr	r3, [r4, #0]
 801e45e:	4433      	add	r3, r6
 801e460:	6023      	str	r3, [r4, #0]
 801e462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e466:	462a      	mov	r2, r5
 801e468:	f000 fa28 	bl	801e8bc <_realloc_r>
 801e46c:	4606      	mov	r6, r0
 801e46e:	2800      	cmp	r0, #0
 801e470:	d1e0      	bne.n	801e434 <__ssputs_r+0x5c>
 801e472:	6921      	ldr	r1, [r4, #16]
 801e474:	4650      	mov	r0, sl
 801e476:	f7ff fb27 	bl	801dac8 <_free_r>
 801e47a:	230c      	movs	r3, #12
 801e47c:	f04f 30ff 	mov.w	r0, #4294967295
 801e480:	f8ca 3000 	str.w	r3, [sl]
 801e484:	89a3      	ldrh	r3, [r4, #12]
 801e486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e48a:	81a3      	strh	r3, [r4, #12]
 801e48c:	e7e9      	b.n	801e462 <__ssputs_r+0x8a>
	...

0801e490 <_svfiprintf_r>:
 801e490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e494:	4698      	mov	r8, r3
 801e496:	898b      	ldrh	r3, [r1, #12]
 801e498:	b09d      	sub	sp, #116	@ 0x74
 801e49a:	4607      	mov	r7, r0
 801e49c:	061b      	lsls	r3, r3, #24
 801e49e:	460d      	mov	r5, r1
 801e4a0:	4614      	mov	r4, r2
 801e4a2:	d510      	bpl.n	801e4c6 <_svfiprintf_r+0x36>
 801e4a4:	690b      	ldr	r3, [r1, #16]
 801e4a6:	b973      	cbnz	r3, 801e4c6 <_svfiprintf_r+0x36>
 801e4a8:	2140      	movs	r1, #64	@ 0x40
 801e4aa:	f7ff fb81 	bl	801dbb0 <_malloc_r>
 801e4ae:	6028      	str	r0, [r5, #0]
 801e4b0:	6128      	str	r0, [r5, #16]
 801e4b2:	b930      	cbnz	r0, 801e4c2 <_svfiprintf_r+0x32>
 801e4b4:	230c      	movs	r3, #12
 801e4b6:	603b      	str	r3, [r7, #0]
 801e4b8:	f04f 30ff 	mov.w	r0, #4294967295
 801e4bc:	b01d      	add	sp, #116	@ 0x74
 801e4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4c2:	2340      	movs	r3, #64	@ 0x40
 801e4c4:	616b      	str	r3, [r5, #20]
 801e4c6:	2300      	movs	r3, #0
 801e4c8:	f8cd 800c 	str.w	r8, [sp, #12]
 801e4cc:	f04f 0901 	mov.w	r9, #1
 801e4d0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 801e674 <_svfiprintf_r+0x1e4>
 801e4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4d6:	2320      	movs	r3, #32
 801e4d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e4dc:	2330      	movs	r3, #48	@ 0x30
 801e4de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e4e2:	4623      	mov	r3, r4
 801e4e4:	469a      	mov	sl, r3
 801e4e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e4ea:	b10a      	cbz	r2, 801e4f0 <_svfiprintf_r+0x60>
 801e4ec:	2a25      	cmp	r2, #37	@ 0x25
 801e4ee:	d1f9      	bne.n	801e4e4 <_svfiprintf_r+0x54>
 801e4f0:	ebba 0b04 	subs.w	fp, sl, r4
 801e4f4:	d00b      	beq.n	801e50e <_svfiprintf_r+0x7e>
 801e4f6:	465b      	mov	r3, fp
 801e4f8:	4622      	mov	r2, r4
 801e4fa:	4629      	mov	r1, r5
 801e4fc:	4638      	mov	r0, r7
 801e4fe:	f7ff ff6b 	bl	801e3d8 <__ssputs_r>
 801e502:	3001      	adds	r0, #1
 801e504:	f000 80a7 	beq.w	801e656 <_svfiprintf_r+0x1c6>
 801e508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e50a:	445a      	add	r2, fp
 801e50c:	9209      	str	r2, [sp, #36]	@ 0x24
 801e50e:	f89a 3000 	ldrb.w	r3, [sl]
 801e512:	2b00      	cmp	r3, #0
 801e514:	f000 809f 	beq.w	801e656 <_svfiprintf_r+0x1c6>
 801e518:	2300      	movs	r3, #0
 801e51a:	f04f 32ff 	mov.w	r2, #4294967295
 801e51e:	f10a 0a01 	add.w	sl, sl, #1
 801e522:	9304      	str	r3, [sp, #16]
 801e524:	9307      	str	r3, [sp, #28]
 801e526:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e52a:	931a      	str	r3, [sp, #104]	@ 0x68
 801e52c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e530:	4654      	mov	r4, sl
 801e532:	2205      	movs	r2, #5
 801e534:	484f      	ldr	r0, [pc, #316]	@ (801e674 <_svfiprintf_r+0x1e4>)
 801e536:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e53a:	f7fe fc56 	bl	801cdea <memchr>
 801e53e:	9a04      	ldr	r2, [sp, #16]
 801e540:	b9d8      	cbnz	r0, 801e57a <_svfiprintf_r+0xea>
 801e542:	06d0      	lsls	r0, r2, #27
 801e544:	bf44      	itt	mi
 801e546:	2320      	movmi	r3, #32
 801e548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e54c:	0711      	lsls	r1, r2, #28
 801e54e:	bf44      	itt	mi
 801e550:	232b      	movmi	r3, #43	@ 0x2b
 801e552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e556:	f89a 3000 	ldrb.w	r3, [sl]
 801e55a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e55c:	d015      	beq.n	801e58a <_svfiprintf_r+0xfa>
 801e55e:	9a07      	ldr	r2, [sp, #28]
 801e560:	4654      	mov	r4, sl
 801e562:	2000      	movs	r0, #0
 801e564:	f04f 0c0a 	mov.w	ip, #10
 801e568:	4621      	mov	r1, r4
 801e56a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e56e:	3b30      	subs	r3, #48	@ 0x30
 801e570:	2b09      	cmp	r3, #9
 801e572:	d94b      	bls.n	801e60c <_svfiprintf_r+0x17c>
 801e574:	b1b0      	cbz	r0, 801e5a4 <_svfiprintf_r+0x114>
 801e576:	9207      	str	r2, [sp, #28]
 801e578:	e014      	b.n	801e5a4 <_svfiprintf_r+0x114>
 801e57a:	eba0 0308 	sub.w	r3, r0, r8
 801e57e:	46a2      	mov	sl, r4
 801e580:	fa09 f303 	lsl.w	r3, r9, r3
 801e584:	4313      	orrs	r3, r2
 801e586:	9304      	str	r3, [sp, #16]
 801e588:	e7d2      	b.n	801e530 <_svfiprintf_r+0xa0>
 801e58a:	9b03      	ldr	r3, [sp, #12]
 801e58c:	1d19      	adds	r1, r3, #4
 801e58e:	681b      	ldr	r3, [r3, #0]
 801e590:	2b00      	cmp	r3, #0
 801e592:	9103      	str	r1, [sp, #12]
 801e594:	bfbb      	ittet	lt
 801e596:	425b      	neglt	r3, r3
 801e598:	f042 0202 	orrlt.w	r2, r2, #2
 801e59c:	9307      	strge	r3, [sp, #28]
 801e59e:	9307      	strlt	r3, [sp, #28]
 801e5a0:	bfb8      	it	lt
 801e5a2:	9204      	strlt	r2, [sp, #16]
 801e5a4:	7823      	ldrb	r3, [r4, #0]
 801e5a6:	2b2e      	cmp	r3, #46	@ 0x2e
 801e5a8:	d10a      	bne.n	801e5c0 <_svfiprintf_r+0x130>
 801e5aa:	7863      	ldrb	r3, [r4, #1]
 801e5ac:	2b2a      	cmp	r3, #42	@ 0x2a
 801e5ae:	d132      	bne.n	801e616 <_svfiprintf_r+0x186>
 801e5b0:	9b03      	ldr	r3, [sp, #12]
 801e5b2:	3402      	adds	r4, #2
 801e5b4:	1d1a      	adds	r2, r3, #4
 801e5b6:	681b      	ldr	r3, [r3, #0]
 801e5b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e5bc:	9203      	str	r2, [sp, #12]
 801e5be:	9305      	str	r3, [sp, #20]
 801e5c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e684 <_svfiprintf_r+0x1f4>
 801e5c4:	2203      	movs	r2, #3
 801e5c6:	7821      	ldrb	r1, [r4, #0]
 801e5c8:	4650      	mov	r0, sl
 801e5ca:	f7fe fc0e 	bl	801cdea <memchr>
 801e5ce:	b138      	cbz	r0, 801e5e0 <_svfiprintf_r+0x150>
 801e5d0:	eba0 000a 	sub.w	r0, r0, sl
 801e5d4:	2240      	movs	r2, #64	@ 0x40
 801e5d6:	9b04      	ldr	r3, [sp, #16]
 801e5d8:	3401      	adds	r4, #1
 801e5da:	4082      	lsls	r2, r0
 801e5dc:	4313      	orrs	r3, r2
 801e5de:	9304      	str	r3, [sp, #16]
 801e5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5e4:	2206      	movs	r2, #6
 801e5e6:	4824      	ldr	r0, [pc, #144]	@ (801e678 <_svfiprintf_r+0x1e8>)
 801e5e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e5ec:	f7fe fbfd 	bl	801cdea <memchr>
 801e5f0:	2800      	cmp	r0, #0
 801e5f2:	d036      	beq.n	801e662 <_svfiprintf_r+0x1d2>
 801e5f4:	4b21      	ldr	r3, [pc, #132]	@ (801e67c <_svfiprintf_r+0x1ec>)
 801e5f6:	bb1b      	cbnz	r3, 801e640 <_svfiprintf_r+0x1b0>
 801e5f8:	9b03      	ldr	r3, [sp, #12]
 801e5fa:	3307      	adds	r3, #7
 801e5fc:	f023 0307 	bic.w	r3, r3, #7
 801e600:	3308      	adds	r3, #8
 801e602:	9303      	str	r3, [sp, #12]
 801e604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e606:	4433      	add	r3, r6
 801e608:	9309      	str	r3, [sp, #36]	@ 0x24
 801e60a:	e76a      	b.n	801e4e2 <_svfiprintf_r+0x52>
 801e60c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e610:	460c      	mov	r4, r1
 801e612:	2001      	movs	r0, #1
 801e614:	e7a8      	b.n	801e568 <_svfiprintf_r+0xd8>
 801e616:	2300      	movs	r3, #0
 801e618:	3401      	adds	r4, #1
 801e61a:	f04f 0c0a 	mov.w	ip, #10
 801e61e:	4619      	mov	r1, r3
 801e620:	9305      	str	r3, [sp, #20]
 801e622:	4620      	mov	r0, r4
 801e624:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e628:	3a30      	subs	r2, #48	@ 0x30
 801e62a:	2a09      	cmp	r2, #9
 801e62c:	d903      	bls.n	801e636 <_svfiprintf_r+0x1a6>
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d0c6      	beq.n	801e5c0 <_svfiprintf_r+0x130>
 801e632:	9105      	str	r1, [sp, #20]
 801e634:	e7c4      	b.n	801e5c0 <_svfiprintf_r+0x130>
 801e636:	fb0c 2101 	mla	r1, ip, r1, r2
 801e63a:	4604      	mov	r4, r0
 801e63c:	2301      	movs	r3, #1
 801e63e:	e7f0      	b.n	801e622 <_svfiprintf_r+0x192>
 801e640:	ab03      	add	r3, sp, #12
 801e642:	462a      	mov	r2, r5
 801e644:	a904      	add	r1, sp, #16
 801e646:	4638      	mov	r0, r7
 801e648:	9300      	str	r3, [sp, #0]
 801e64a:	4b0d      	ldr	r3, [pc, #52]	@ (801e680 <_svfiprintf_r+0x1f0>)
 801e64c:	f7fd fe56 	bl	801c2fc <_printf_float>
 801e650:	1c42      	adds	r2, r0, #1
 801e652:	4606      	mov	r6, r0
 801e654:	d1d6      	bne.n	801e604 <_svfiprintf_r+0x174>
 801e656:	89ab      	ldrh	r3, [r5, #12]
 801e658:	065b      	lsls	r3, r3, #25
 801e65a:	f53f af2d 	bmi.w	801e4b8 <_svfiprintf_r+0x28>
 801e65e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e660:	e72c      	b.n	801e4bc <_svfiprintf_r+0x2c>
 801e662:	ab03      	add	r3, sp, #12
 801e664:	462a      	mov	r2, r5
 801e666:	a904      	add	r1, sp, #16
 801e668:	4638      	mov	r0, r7
 801e66a:	9300      	str	r3, [sp, #0]
 801e66c:	4b04      	ldr	r3, [pc, #16]	@ (801e680 <_svfiprintf_r+0x1f0>)
 801e66e:	f7fe f8e1 	bl	801c834 <_printf_i>
 801e672:	e7ed      	b.n	801e650 <_svfiprintf_r+0x1c0>
 801e674:	0801f5d8 	.word	0x0801f5d8
 801e678:	0801f5e2 	.word	0x0801f5e2
 801e67c:	0801c2fd 	.word	0x0801c2fd
 801e680:	0801e3d9 	.word	0x0801e3d9
 801e684:	0801f5de 	.word	0x0801f5de

0801e688 <__sflush_r>:
 801e688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e690:	0716      	lsls	r6, r2, #28
 801e692:	4605      	mov	r5, r0
 801e694:	460c      	mov	r4, r1
 801e696:	d454      	bmi.n	801e742 <__sflush_r+0xba>
 801e698:	684b      	ldr	r3, [r1, #4]
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	dc02      	bgt.n	801e6a4 <__sflush_r+0x1c>
 801e69e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	dd48      	ble.n	801e736 <__sflush_r+0xae>
 801e6a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e6a6:	2e00      	cmp	r6, #0
 801e6a8:	d045      	beq.n	801e736 <__sflush_r+0xae>
 801e6aa:	2300      	movs	r3, #0
 801e6ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e6b0:	682f      	ldr	r7, [r5, #0]
 801e6b2:	6a21      	ldr	r1, [r4, #32]
 801e6b4:	602b      	str	r3, [r5, #0]
 801e6b6:	d030      	beq.n	801e71a <__sflush_r+0x92>
 801e6b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e6ba:	89a3      	ldrh	r3, [r4, #12]
 801e6bc:	0759      	lsls	r1, r3, #29
 801e6be:	d505      	bpl.n	801e6cc <__sflush_r+0x44>
 801e6c0:	6863      	ldr	r3, [r4, #4]
 801e6c2:	1ad2      	subs	r2, r2, r3
 801e6c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e6c6:	b10b      	cbz	r3, 801e6cc <__sflush_r+0x44>
 801e6c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e6ca:	1ad2      	subs	r2, r2, r3
 801e6cc:	2300      	movs	r3, #0
 801e6ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e6d0:	6a21      	ldr	r1, [r4, #32]
 801e6d2:	4628      	mov	r0, r5
 801e6d4:	47b0      	blx	r6
 801e6d6:	1c43      	adds	r3, r0, #1
 801e6d8:	89a3      	ldrh	r3, [r4, #12]
 801e6da:	d106      	bne.n	801e6ea <__sflush_r+0x62>
 801e6dc:	6829      	ldr	r1, [r5, #0]
 801e6de:	291d      	cmp	r1, #29
 801e6e0:	d82b      	bhi.n	801e73a <__sflush_r+0xb2>
 801e6e2:	4a2a      	ldr	r2, [pc, #168]	@ (801e78c <__sflush_r+0x104>)
 801e6e4:	410a      	asrs	r2, r1
 801e6e6:	07d6      	lsls	r6, r2, #31
 801e6e8:	d427      	bmi.n	801e73a <__sflush_r+0xb2>
 801e6ea:	2200      	movs	r2, #0
 801e6ec:	04d9      	lsls	r1, r3, #19
 801e6ee:	6062      	str	r2, [r4, #4]
 801e6f0:	6922      	ldr	r2, [r4, #16]
 801e6f2:	6022      	str	r2, [r4, #0]
 801e6f4:	d504      	bpl.n	801e700 <__sflush_r+0x78>
 801e6f6:	1c42      	adds	r2, r0, #1
 801e6f8:	d101      	bne.n	801e6fe <__sflush_r+0x76>
 801e6fa:	682b      	ldr	r3, [r5, #0]
 801e6fc:	b903      	cbnz	r3, 801e700 <__sflush_r+0x78>
 801e6fe:	6560      	str	r0, [r4, #84]	@ 0x54
 801e700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e702:	602f      	str	r7, [r5, #0]
 801e704:	b1b9      	cbz	r1, 801e736 <__sflush_r+0xae>
 801e706:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e70a:	4299      	cmp	r1, r3
 801e70c:	d002      	beq.n	801e714 <__sflush_r+0x8c>
 801e70e:	4628      	mov	r0, r5
 801e710:	f7ff f9da 	bl	801dac8 <_free_r>
 801e714:	2300      	movs	r3, #0
 801e716:	6363      	str	r3, [r4, #52]	@ 0x34
 801e718:	e00d      	b.n	801e736 <__sflush_r+0xae>
 801e71a:	2301      	movs	r3, #1
 801e71c:	4628      	mov	r0, r5
 801e71e:	47b0      	blx	r6
 801e720:	4602      	mov	r2, r0
 801e722:	1c50      	adds	r0, r2, #1
 801e724:	d1c9      	bne.n	801e6ba <__sflush_r+0x32>
 801e726:	682b      	ldr	r3, [r5, #0]
 801e728:	2b00      	cmp	r3, #0
 801e72a:	d0c6      	beq.n	801e6ba <__sflush_r+0x32>
 801e72c:	2b1d      	cmp	r3, #29
 801e72e:	d001      	beq.n	801e734 <__sflush_r+0xac>
 801e730:	2b16      	cmp	r3, #22
 801e732:	d11d      	bne.n	801e770 <__sflush_r+0xe8>
 801e734:	602f      	str	r7, [r5, #0]
 801e736:	2000      	movs	r0, #0
 801e738:	e021      	b.n	801e77e <__sflush_r+0xf6>
 801e73a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e73e:	b21b      	sxth	r3, r3
 801e740:	e01a      	b.n	801e778 <__sflush_r+0xf0>
 801e742:	690f      	ldr	r7, [r1, #16]
 801e744:	2f00      	cmp	r7, #0
 801e746:	d0f6      	beq.n	801e736 <__sflush_r+0xae>
 801e748:	0793      	lsls	r3, r2, #30
 801e74a:	680e      	ldr	r6, [r1, #0]
 801e74c:	600f      	str	r7, [r1, #0]
 801e74e:	bf0c      	ite	eq
 801e750:	694b      	ldreq	r3, [r1, #20]
 801e752:	2300      	movne	r3, #0
 801e754:	eba6 0807 	sub.w	r8, r6, r7
 801e758:	608b      	str	r3, [r1, #8]
 801e75a:	f1b8 0f00 	cmp.w	r8, #0
 801e75e:	ddea      	ble.n	801e736 <__sflush_r+0xae>
 801e760:	4643      	mov	r3, r8
 801e762:	463a      	mov	r2, r7
 801e764:	6a21      	ldr	r1, [r4, #32]
 801e766:	4628      	mov	r0, r5
 801e768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e76a:	47b0      	blx	r6
 801e76c:	2800      	cmp	r0, #0
 801e76e:	dc08      	bgt.n	801e782 <__sflush_r+0xfa>
 801e770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e778:	f04f 30ff 	mov.w	r0, #4294967295
 801e77c:	81a3      	strh	r3, [r4, #12]
 801e77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e782:	4407      	add	r7, r0
 801e784:	eba8 0800 	sub.w	r8, r8, r0
 801e788:	e7e7      	b.n	801e75a <__sflush_r+0xd2>
 801e78a:	bf00      	nop
 801e78c:	dfbffffe 	.word	0xdfbffffe

0801e790 <_fflush_r>:
 801e790:	b538      	push	{r3, r4, r5, lr}
 801e792:	690b      	ldr	r3, [r1, #16]
 801e794:	4605      	mov	r5, r0
 801e796:	460c      	mov	r4, r1
 801e798:	b913      	cbnz	r3, 801e7a0 <_fflush_r+0x10>
 801e79a:	2500      	movs	r5, #0
 801e79c:	4628      	mov	r0, r5
 801e79e:	bd38      	pop	{r3, r4, r5, pc}
 801e7a0:	b118      	cbz	r0, 801e7aa <_fflush_r+0x1a>
 801e7a2:	6a03      	ldr	r3, [r0, #32]
 801e7a4:	b90b      	cbnz	r3, 801e7aa <_fflush_r+0x1a>
 801e7a6:	f7fe f9f1 	bl	801cb8c <__sinit>
 801e7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d0f3      	beq.n	801e79a <_fflush_r+0xa>
 801e7b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e7b4:	07d0      	lsls	r0, r2, #31
 801e7b6:	d404      	bmi.n	801e7c2 <_fflush_r+0x32>
 801e7b8:	0599      	lsls	r1, r3, #22
 801e7ba:	d402      	bmi.n	801e7c2 <_fflush_r+0x32>
 801e7bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e7be:	f7fe fb12 	bl	801cde6 <__retarget_lock_acquire_recursive>
 801e7c2:	4628      	mov	r0, r5
 801e7c4:	4621      	mov	r1, r4
 801e7c6:	f7ff ff5f 	bl	801e688 <__sflush_r>
 801e7ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e7cc:	4605      	mov	r5, r0
 801e7ce:	07da      	lsls	r2, r3, #31
 801e7d0:	d4e4      	bmi.n	801e79c <_fflush_r+0xc>
 801e7d2:	89a3      	ldrh	r3, [r4, #12]
 801e7d4:	059b      	lsls	r3, r3, #22
 801e7d6:	d4e1      	bmi.n	801e79c <_fflush_r+0xc>
 801e7d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e7da:	f7fe fb05 	bl	801cde8 <__retarget_lock_release_recursive>
 801e7de:	e7dd      	b.n	801e79c <_fflush_r+0xc>

0801e7e0 <memmove>:
 801e7e0:	4288      	cmp	r0, r1
 801e7e2:	b510      	push	{r4, lr}
 801e7e4:	eb01 0402 	add.w	r4, r1, r2
 801e7e8:	d902      	bls.n	801e7f0 <memmove+0x10>
 801e7ea:	4284      	cmp	r4, r0
 801e7ec:	4623      	mov	r3, r4
 801e7ee:	d807      	bhi.n	801e800 <memmove+0x20>
 801e7f0:	1e43      	subs	r3, r0, #1
 801e7f2:	42a1      	cmp	r1, r4
 801e7f4:	d008      	beq.n	801e808 <memmove+0x28>
 801e7f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e7fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e7fe:	e7f8      	b.n	801e7f2 <memmove+0x12>
 801e800:	4402      	add	r2, r0
 801e802:	4601      	mov	r1, r0
 801e804:	428a      	cmp	r2, r1
 801e806:	d100      	bne.n	801e80a <memmove+0x2a>
 801e808:	bd10      	pop	{r4, pc}
 801e80a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e80e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e812:	e7f7      	b.n	801e804 <memmove+0x24>

0801e814 <_sbrk_r>:
 801e814:	b538      	push	{r3, r4, r5, lr}
 801e816:	2300      	movs	r3, #0
 801e818:	4d05      	ldr	r5, [pc, #20]	@ (801e830 <_sbrk_r+0x1c>)
 801e81a:	4604      	mov	r4, r0
 801e81c:	4608      	mov	r0, r1
 801e81e:	602b      	str	r3, [r5, #0]
 801e820:	f7f2 fd0a 	bl	8011238 <_sbrk>
 801e824:	1c43      	adds	r3, r0, #1
 801e826:	d102      	bne.n	801e82e <_sbrk_r+0x1a>
 801e828:	682b      	ldr	r3, [r5, #0]
 801e82a:	b103      	cbz	r3, 801e82e <_sbrk_r+0x1a>
 801e82c:	6023      	str	r3, [r4, #0]
 801e82e:	bd38      	pop	{r3, r4, r5, pc}
 801e830:	20005d30 	.word	0x20005d30

0801e834 <__assert_func>:
 801e834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e836:	4614      	mov	r4, r2
 801e838:	461a      	mov	r2, r3
 801e83a:	4b09      	ldr	r3, [pc, #36]	@ (801e860 <__assert_func+0x2c>)
 801e83c:	4605      	mov	r5, r0
 801e83e:	681b      	ldr	r3, [r3, #0]
 801e840:	68d8      	ldr	r0, [r3, #12]
 801e842:	b954      	cbnz	r4, 801e85a <__assert_func+0x26>
 801e844:	4b07      	ldr	r3, [pc, #28]	@ (801e864 <__assert_func+0x30>)
 801e846:	461c      	mov	r4, r3
 801e848:	9100      	str	r1, [sp, #0]
 801e84a:	4907      	ldr	r1, [pc, #28]	@ (801e868 <__assert_func+0x34>)
 801e84c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e850:	462b      	mov	r3, r5
 801e852:	f000 f86f 	bl	801e934 <fiprintf>
 801e856:	f000 f87f 	bl	801e958 <abort>
 801e85a:	4b04      	ldr	r3, [pc, #16]	@ (801e86c <__assert_func+0x38>)
 801e85c:	e7f4      	b.n	801e848 <__assert_func+0x14>
 801e85e:	bf00      	nop
 801e860:	200000c0 	.word	0x200000c0
 801e864:	0801f62e 	.word	0x0801f62e
 801e868:	0801f600 	.word	0x0801f600
 801e86c:	0801f5f3 	.word	0x0801f5f3

0801e870 <_calloc_r>:
 801e870:	b570      	push	{r4, r5, r6, lr}
 801e872:	fba1 5402 	umull	r5, r4, r1, r2
 801e876:	b93c      	cbnz	r4, 801e888 <_calloc_r+0x18>
 801e878:	4629      	mov	r1, r5
 801e87a:	f7ff f999 	bl	801dbb0 <_malloc_r>
 801e87e:	4606      	mov	r6, r0
 801e880:	b928      	cbnz	r0, 801e88e <_calloc_r+0x1e>
 801e882:	2600      	movs	r6, #0
 801e884:	4630      	mov	r0, r6
 801e886:	bd70      	pop	{r4, r5, r6, pc}
 801e888:	220c      	movs	r2, #12
 801e88a:	6002      	str	r2, [r0, #0]
 801e88c:	e7f9      	b.n	801e882 <_calloc_r+0x12>
 801e88e:	462a      	mov	r2, r5
 801e890:	4621      	mov	r1, r4
 801e892:	f7fe fa14 	bl	801ccbe <memset>
 801e896:	e7f5      	b.n	801e884 <_calloc_r+0x14>

0801e898 <__ascii_mbtowc>:
 801e898:	b082      	sub	sp, #8
 801e89a:	b901      	cbnz	r1, 801e89e <__ascii_mbtowc+0x6>
 801e89c:	a901      	add	r1, sp, #4
 801e89e:	b142      	cbz	r2, 801e8b2 <__ascii_mbtowc+0x1a>
 801e8a0:	b14b      	cbz	r3, 801e8b6 <__ascii_mbtowc+0x1e>
 801e8a2:	7813      	ldrb	r3, [r2, #0]
 801e8a4:	600b      	str	r3, [r1, #0]
 801e8a6:	7812      	ldrb	r2, [r2, #0]
 801e8a8:	1e10      	subs	r0, r2, #0
 801e8aa:	bf18      	it	ne
 801e8ac:	2001      	movne	r0, #1
 801e8ae:	b002      	add	sp, #8
 801e8b0:	4770      	bx	lr
 801e8b2:	4610      	mov	r0, r2
 801e8b4:	e7fb      	b.n	801e8ae <__ascii_mbtowc+0x16>
 801e8b6:	f06f 0001 	mvn.w	r0, #1
 801e8ba:	e7f8      	b.n	801e8ae <__ascii_mbtowc+0x16>

0801e8bc <_realloc_r>:
 801e8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8c0:	4680      	mov	r8, r0
 801e8c2:	4615      	mov	r5, r2
 801e8c4:	460c      	mov	r4, r1
 801e8c6:	b921      	cbnz	r1, 801e8d2 <_realloc_r+0x16>
 801e8c8:	4611      	mov	r1, r2
 801e8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e8ce:	f7ff b96f 	b.w	801dbb0 <_malloc_r>
 801e8d2:	b92a      	cbnz	r2, 801e8e0 <_realloc_r+0x24>
 801e8d4:	f7ff f8f8 	bl	801dac8 <_free_r>
 801e8d8:	2400      	movs	r4, #0
 801e8da:	4620      	mov	r0, r4
 801e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8e0:	f000 f841 	bl	801e966 <_malloc_usable_size_r>
 801e8e4:	4285      	cmp	r5, r0
 801e8e6:	4606      	mov	r6, r0
 801e8e8:	d802      	bhi.n	801e8f0 <_realloc_r+0x34>
 801e8ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801e8ee:	d8f4      	bhi.n	801e8da <_realloc_r+0x1e>
 801e8f0:	4629      	mov	r1, r5
 801e8f2:	4640      	mov	r0, r8
 801e8f4:	f7ff f95c 	bl	801dbb0 <_malloc_r>
 801e8f8:	4607      	mov	r7, r0
 801e8fa:	2800      	cmp	r0, #0
 801e8fc:	d0ec      	beq.n	801e8d8 <_realloc_r+0x1c>
 801e8fe:	42b5      	cmp	r5, r6
 801e900:	462a      	mov	r2, r5
 801e902:	4621      	mov	r1, r4
 801e904:	bf28      	it	cs
 801e906:	4632      	movcs	r2, r6
 801e908:	f7fe fa7d 	bl	801ce06 <memcpy>
 801e90c:	4621      	mov	r1, r4
 801e90e:	4640      	mov	r0, r8
 801e910:	463c      	mov	r4, r7
 801e912:	f7ff f8d9 	bl	801dac8 <_free_r>
 801e916:	e7e0      	b.n	801e8da <_realloc_r+0x1e>

0801e918 <__ascii_wctomb>:
 801e918:	4603      	mov	r3, r0
 801e91a:	4608      	mov	r0, r1
 801e91c:	b141      	cbz	r1, 801e930 <__ascii_wctomb+0x18>
 801e91e:	2aff      	cmp	r2, #255	@ 0xff
 801e920:	d904      	bls.n	801e92c <__ascii_wctomb+0x14>
 801e922:	228a      	movs	r2, #138	@ 0x8a
 801e924:	f04f 30ff 	mov.w	r0, #4294967295
 801e928:	601a      	str	r2, [r3, #0]
 801e92a:	4770      	bx	lr
 801e92c:	2001      	movs	r0, #1
 801e92e:	700a      	strb	r2, [r1, #0]
 801e930:	4770      	bx	lr
	...

0801e934 <fiprintf>:
 801e934:	b40e      	push	{r1, r2, r3}
 801e936:	b503      	push	{r0, r1, lr}
 801e938:	ab03      	add	r3, sp, #12
 801e93a:	4601      	mov	r1, r0
 801e93c:	4805      	ldr	r0, [pc, #20]	@ (801e954 <fiprintf+0x20>)
 801e93e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e942:	6800      	ldr	r0, [r0, #0]
 801e944:	9301      	str	r3, [sp, #4]
 801e946:	f000 f83f 	bl	801e9c8 <_vfiprintf_r>
 801e94a:	b002      	add	sp, #8
 801e94c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e950:	b003      	add	sp, #12
 801e952:	4770      	bx	lr
 801e954:	200000c0 	.word	0x200000c0

0801e958 <abort>:
 801e958:	2006      	movs	r0, #6
 801e95a:	b508      	push	{r3, lr}
 801e95c:	f000 fa08 	bl	801ed70 <raise>
 801e960:	2001      	movs	r0, #1
 801e962:	f7f2 fbf1 	bl	8011148 <_exit>

0801e966 <_malloc_usable_size_r>:
 801e966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e96a:	1f18      	subs	r0, r3, #4
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	bfbc      	itt	lt
 801e970:	580b      	ldrlt	r3, [r1, r0]
 801e972:	18c0      	addlt	r0, r0, r3
 801e974:	4770      	bx	lr

0801e976 <__sfputc_r>:
 801e976:	6893      	ldr	r3, [r2, #8]
 801e978:	3b01      	subs	r3, #1
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	6093      	str	r3, [r2, #8]
 801e97e:	b410      	push	{r4}
 801e980:	da08      	bge.n	801e994 <__sfputc_r+0x1e>
 801e982:	6994      	ldr	r4, [r2, #24]
 801e984:	42a3      	cmp	r3, r4
 801e986:	db01      	blt.n	801e98c <__sfputc_r+0x16>
 801e988:	290a      	cmp	r1, #10
 801e98a:	d103      	bne.n	801e994 <__sfputc_r+0x1e>
 801e98c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e990:	f000 b932 	b.w	801ebf8 <__swbuf_r>
 801e994:	6813      	ldr	r3, [r2, #0]
 801e996:	1c58      	adds	r0, r3, #1
 801e998:	6010      	str	r0, [r2, #0]
 801e99a:	4608      	mov	r0, r1
 801e99c:	7019      	strb	r1, [r3, #0]
 801e99e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e9a2:	4770      	bx	lr

0801e9a4 <__sfputs_r>:
 801e9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9a6:	4606      	mov	r6, r0
 801e9a8:	460f      	mov	r7, r1
 801e9aa:	4614      	mov	r4, r2
 801e9ac:	18d5      	adds	r5, r2, r3
 801e9ae:	42ac      	cmp	r4, r5
 801e9b0:	d101      	bne.n	801e9b6 <__sfputs_r+0x12>
 801e9b2:	2000      	movs	r0, #0
 801e9b4:	e007      	b.n	801e9c6 <__sfputs_r+0x22>
 801e9b6:	463a      	mov	r2, r7
 801e9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9bc:	4630      	mov	r0, r6
 801e9be:	f7ff ffda 	bl	801e976 <__sfputc_r>
 801e9c2:	1c43      	adds	r3, r0, #1
 801e9c4:	d1f3      	bne.n	801e9ae <__sfputs_r+0xa>
 801e9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e9c8 <_vfiprintf_r>:
 801e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9cc:	460d      	mov	r5, r1
 801e9ce:	b09d      	sub	sp, #116	@ 0x74
 801e9d0:	4614      	mov	r4, r2
 801e9d2:	4698      	mov	r8, r3
 801e9d4:	4606      	mov	r6, r0
 801e9d6:	b118      	cbz	r0, 801e9e0 <_vfiprintf_r+0x18>
 801e9d8:	6a03      	ldr	r3, [r0, #32]
 801e9da:	b90b      	cbnz	r3, 801e9e0 <_vfiprintf_r+0x18>
 801e9dc:	f7fe f8d6 	bl	801cb8c <__sinit>
 801e9e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e9e2:	07d9      	lsls	r1, r3, #31
 801e9e4:	d405      	bmi.n	801e9f2 <_vfiprintf_r+0x2a>
 801e9e6:	89ab      	ldrh	r3, [r5, #12]
 801e9e8:	059a      	lsls	r2, r3, #22
 801e9ea:	d402      	bmi.n	801e9f2 <_vfiprintf_r+0x2a>
 801e9ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e9ee:	f7fe f9fa 	bl	801cde6 <__retarget_lock_acquire_recursive>
 801e9f2:	89ab      	ldrh	r3, [r5, #12]
 801e9f4:	071b      	lsls	r3, r3, #28
 801e9f6:	d501      	bpl.n	801e9fc <_vfiprintf_r+0x34>
 801e9f8:	692b      	ldr	r3, [r5, #16]
 801e9fa:	b99b      	cbnz	r3, 801ea24 <_vfiprintf_r+0x5c>
 801e9fc:	4629      	mov	r1, r5
 801e9fe:	4630      	mov	r0, r6
 801ea00:	f000 f938 	bl	801ec74 <__swsetup_r>
 801ea04:	b170      	cbz	r0, 801ea24 <_vfiprintf_r+0x5c>
 801ea06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ea08:	07dc      	lsls	r4, r3, #31
 801ea0a:	d504      	bpl.n	801ea16 <_vfiprintf_r+0x4e>
 801ea0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ea10:	b01d      	add	sp, #116	@ 0x74
 801ea12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea16:	89ab      	ldrh	r3, [r5, #12]
 801ea18:	0598      	lsls	r0, r3, #22
 801ea1a:	d4f7      	bmi.n	801ea0c <_vfiprintf_r+0x44>
 801ea1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ea1e:	f7fe f9e3 	bl	801cde8 <__retarget_lock_release_recursive>
 801ea22:	e7f3      	b.n	801ea0c <_vfiprintf_r+0x44>
 801ea24:	2300      	movs	r3, #0
 801ea26:	f8cd 800c 	str.w	r8, [sp, #12]
 801ea2a:	f04f 0901 	mov.w	r9, #1
 801ea2e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 801ebe4 <_vfiprintf_r+0x21c>
 801ea32:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea34:	2320      	movs	r3, #32
 801ea36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ea3a:	2330      	movs	r3, #48	@ 0x30
 801ea3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ea40:	4623      	mov	r3, r4
 801ea42:	469a      	mov	sl, r3
 801ea44:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ea48:	b10a      	cbz	r2, 801ea4e <_vfiprintf_r+0x86>
 801ea4a:	2a25      	cmp	r2, #37	@ 0x25
 801ea4c:	d1f9      	bne.n	801ea42 <_vfiprintf_r+0x7a>
 801ea4e:	ebba 0b04 	subs.w	fp, sl, r4
 801ea52:	d00b      	beq.n	801ea6c <_vfiprintf_r+0xa4>
 801ea54:	465b      	mov	r3, fp
 801ea56:	4622      	mov	r2, r4
 801ea58:	4629      	mov	r1, r5
 801ea5a:	4630      	mov	r0, r6
 801ea5c:	f7ff ffa2 	bl	801e9a4 <__sfputs_r>
 801ea60:	3001      	adds	r0, #1
 801ea62:	f000 80a7 	beq.w	801ebb4 <_vfiprintf_r+0x1ec>
 801ea66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea68:	445a      	add	r2, fp
 801ea6a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ea6c:	f89a 3000 	ldrb.w	r3, [sl]
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	f000 809f 	beq.w	801ebb4 <_vfiprintf_r+0x1ec>
 801ea76:	2300      	movs	r3, #0
 801ea78:	f04f 32ff 	mov.w	r2, #4294967295
 801ea7c:	f10a 0a01 	add.w	sl, sl, #1
 801ea80:	9304      	str	r3, [sp, #16]
 801ea82:	9307      	str	r3, [sp, #28]
 801ea84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ea88:	931a      	str	r3, [sp, #104]	@ 0x68
 801ea8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ea8e:	4654      	mov	r4, sl
 801ea90:	2205      	movs	r2, #5
 801ea92:	4854      	ldr	r0, [pc, #336]	@ (801ebe4 <_vfiprintf_r+0x21c>)
 801ea94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea98:	f7fe f9a7 	bl	801cdea <memchr>
 801ea9c:	9a04      	ldr	r2, [sp, #16]
 801ea9e:	b9d8      	cbnz	r0, 801ead8 <_vfiprintf_r+0x110>
 801eaa0:	06d1      	lsls	r1, r2, #27
 801eaa2:	bf44      	itt	mi
 801eaa4:	2320      	movmi	r3, #32
 801eaa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801eaaa:	0713      	lsls	r3, r2, #28
 801eaac:	bf44      	itt	mi
 801eaae:	232b      	movmi	r3, #43	@ 0x2b
 801eab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801eab4:	f89a 3000 	ldrb.w	r3, [sl]
 801eab8:	2b2a      	cmp	r3, #42	@ 0x2a
 801eaba:	d015      	beq.n	801eae8 <_vfiprintf_r+0x120>
 801eabc:	9a07      	ldr	r2, [sp, #28]
 801eabe:	4654      	mov	r4, sl
 801eac0:	2000      	movs	r0, #0
 801eac2:	f04f 0c0a 	mov.w	ip, #10
 801eac6:	4621      	mov	r1, r4
 801eac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eacc:	3b30      	subs	r3, #48	@ 0x30
 801eace:	2b09      	cmp	r3, #9
 801ead0:	d94b      	bls.n	801eb6a <_vfiprintf_r+0x1a2>
 801ead2:	b1b0      	cbz	r0, 801eb02 <_vfiprintf_r+0x13a>
 801ead4:	9207      	str	r2, [sp, #28]
 801ead6:	e014      	b.n	801eb02 <_vfiprintf_r+0x13a>
 801ead8:	eba0 0308 	sub.w	r3, r0, r8
 801eadc:	46a2      	mov	sl, r4
 801eade:	fa09 f303 	lsl.w	r3, r9, r3
 801eae2:	4313      	orrs	r3, r2
 801eae4:	9304      	str	r3, [sp, #16]
 801eae6:	e7d2      	b.n	801ea8e <_vfiprintf_r+0xc6>
 801eae8:	9b03      	ldr	r3, [sp, #12]
 801eaea:	1d19      	adds	r1, r3, #4
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	9103      	str	r1, [sp, #12]
 801eaf2:	bfbb      	ittet	lt
 801eaf4:	425b      	neglt	r3, r3
 801eaf6:	f042 0202 	orrlt.w	r2, r2, #2
 801eafa:	9307      	strge	r3, [sp, #28]
 801eafc:	9307      	strlt	r3, [sp, #28]
 801eafe:	bfb8      	it	lt
 801eb00:	9204      	strlt	r2, [sp, #16]
 801eb02:	7823      	ldrb	r3, [r4, #0]
 801eb04:	2b2e      	cmp	r3, #46	@ 0x2e
 801eb06:	d10a      	bne.n	801eb1e <_vfiprintf_r+0x156>
 801eb08:	7863      	ldrb	r3, [r4, #1]
 801eb0a:	2b2a      	cmp	r3, #42	@ 0x2a
 801eb0c:	d132      	bne.n	801eb74 <_vfiprintf_r+0x1ac>
 801eb0e:	9b03      	ldr	r3, [sp, #12]
 801eb10:	3402      	adds	r4, #2
 801eb12:	1d1a      	adds	r2, r3, #4
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801eb1a:	9203      	str	r2, [sp, #12]
 801eb1c:	9305      	str	r3, [sp, #20]
 801eb1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ebf4 <_vfiprintf_r+0x22c>
 801eb22:	2203      	movs	r2, #3
 801eb24:	7821      	ldrb	r1, [r4, #0]
 801eb26:	4650      	mov	r0, sl
 801eb28:	f7fe f95f 	bl	801cdea <memchr>
 801eb2c:	b138      	cbz	r0, 801eb3e <_vfiprintf_r+0x176>
 801eb2e:	eba0 000a 	sub.w	r0, r0, sl
 801eb32:	2240      	movs	r2, #64	@ 0x40
 801eb34:	9b04      	ldr	r3, [sp, #16]
 801eb36:	3401      	adds	r4, #1
 801eb38:	4082      	lsls	r2, r0
 801eb3a:	4313      	orrs	r3, r2
 801eb3c:	9304      	str	r3, [sp, #16]
 801eb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb42:	2206      	movs	r2, #6
 801eb44:	4828      	ldr	r0, [pc, #160]	@ (801ebe8 <_vfiprintf_r+0x220>)
 801eb46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801eb4a:	f7fe f94e 	bl	801cdea <memchr>
 801eb4e:	2800      	cmp	r0, #0
 801eb50:	d03f      	beq.n	801ebd2 <_vfiprintf_r+0x20a>
 801eb52:	4b26      	ldr	r3, [pc, #152]	@ (801ebec <_vfiprintf_r+0x224>)
 801eb54:	bb1b      	cbnz	r3, 801eb9e <_vfiprintf_r+0x1d6>
 801eb56:	9b03      	ldr	r3, [sp, #12]
 801eb58:	3307      	adds	r3, #7
 801eb5a:	f023 0307 	bic.w	r3, r3, #7
 801eb5e:	3308      	adds	r3, #8
 801eb60:	9303      	str	r3, [sp, #12]
 801eb62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb64:	443b      	add	r3, r7
 801eb66:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb68:	e76a      	b.n	801ea40 <_vfiprintf_r+0x78>
 801eb6a:	fb0c 3202 	mla	r2, ip, r2, r3
 801eb6e:	460c      	mov	r4, r1
 801eb70:	2001      	movs	r0, #1
 801eb72:	e7a8      	b.n	801eac6 <_vfiprintf_r+0xfe>
 801eb74:	2300      	movs	r3, #0
 801eb76:	3401      	adds	r4, #1
 801eb78:	f04f 0c0a 	mov.w	ip, #10
 801eb7c:	4619      	mov	r1, r3
 801eb7e:	9305      	str	r3, [sp, #20]
 801eb80:	4620      	mov	r0, r4
 801eb82:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eb86:	3a30      	subs	r2, #48	@ 0x30
 801eb88:	2a09      	cmp	r2, #9
 801eb8a:	d903      	bls.n	801eb94 <_vfiprintf_r+0x1cc>
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d0c6      	beq.n	801eb1e <_vfiprintf_r+0x156>
 801eb90:	9105      	str	r1, [sp, #20]
 801eb92:	e7c4      	b.n	801eb1e <_vfiprintf_r+0x156>
 801eb94:	fb0c 2101 	mla	r1, ip, r1, r2
 801eb98:	4604      	mov	r4, r0
 801eb9a:	2301      	movs	r3, #1
 801eb9c:	e7f0      	b.n	801eb80 <_vfiprintf_r+0x1b8>
 801eb9e:	ab03      	add	r3, sp, #12
 801eba0:	462a      	mov	r2, r5
 801eba2:	a904      	add	r1, sp, #16
 801eba4:	4630      	mov	r0, r6
 801eba6:	9300      	str	r3, [sp, #0]
 801eba8:	4b11      	ldr	r3, [pc, #68]	@ (801ebf0 <_vfiprintf_r+0x228>)
 801ebaa:	f7fd fba7 	bl	801c2fc <_printf_float>
 801ebae:	4607      	mov	r7, r0
 801ebb0:	1c78      	adds	r0, r7, #1
 801ebb2:	d1d6      	bne.n	801eb62 <_vfiprintf_r+0x19a>
 801ebb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ebb6:	07d9      	lsls	r1, r3, #31
 801ebb8:	d405      	bmi.n	801ebc6 <_vfiprintf_r+0x1fe>
 801ebba:	89ab      	ldrh	r3, [r5, #12]
 801ebbc:	059a      	lsls	r2, r3, #22
 801ebbe:	d402      	bmi.n	801ebc6 <_vfiprintf_r+0x1fe>
 801ebc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ebc2:	f7fe f911 	bl	801cde8 <__retarget_lock_release_recursive>
 801ebc6:	89ab      	ldrh	r3, [r5, #12]
 801ebc8:	065b      	lsls	r3, r3, #25
 801ebca:	f53f af1f 	bmi.w	801ea0c <_vfiprintf_r+0x44>
 801ebce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebd0:	e71e      	b.n	801ea10 <_vfiprintf_r+0x48>
 801ebd2:	ab03      	add	r3, sp, #12
 801ebd4:	462a      	mov	r2, r5
 801ebd6:	a904      	add	r1, sp, #16
 801ebd8:	4630      	mov	r0, r6
 801ebda:	9300      	str	r3, [sp, #0]
 801ebdc:	4b04      	ldr	r3, [pc, #16]	@ (801ebf0 <_vfiprintf_r+0x228>)
 801ebde:	f7fd fe29 	bl	801c834 <_printf_i>
 801ebe2:	e7e4      	b.n	801ebae <_vfiprintf_r+0x1e6>
 801ebe4:	0801f5d8 	.word	0x0801f5d8
 801ebe8:	0801f5e2 	.word	0x0801f5e2
 801ebec:	0801c2fd 	.word	0x0801c2fd
 801ebf0:	0801e9a5 	.word	0x0801e9a5
 801ebf4:	0801f5de 	.word	0x0801f5de

0801ebf8 <__swbuf_r>:
 801ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebfa:	460e      	mov	r6, r1
 801ebfc:	4614      	mov	r4, r2
 801ebfe:	4605      	mov	r5, r0
 801ec00:	b118      	cbz	r0, 801ec0a <__swbuf_r+0x12>
 801ec02:	6a03      	ldr	r3, [r0, #32]
 801ec04:	b90b      	cbnz	r3, 801ec0a <__swbuf_r+0x12>
 801ec06:	f7fd ffc1 	bl	801cb8c <__sinit>
 801ec0a:	69a3      	ldr	r3, [r4, #24]
 801ec0c:	60a3      	str	r3, [r4, #8]
 801ec0e:	89a3      	ldrh	r3, [r4, #12]
 801ec10:	071a      	lsls	r2, r3, #28
 801ec12:	d501      	bpl.n	801ec18 <__swbuf_r+0x20>
 801ec14:	6923      	ldr	r3, [r4, #16]
 801ec16:	b943      	cbnz	r3, 801ec2a <__swbuf_r+0x32>
 801ec18:	4621      	mov	r1, r4
 801ec1a:	4628      	mov	r0, r5
 801ec1c:	f000 f82a 	bl	801ec74 <__swsetup_r>
 801ec20:	b118      	cbz	r0, 801ec2a <__swbuf_r+0x32>
 801ec22:	f04f 37ff 	mov.w	r7, #4294967295
 801ec26:	4638      	mov	r0, r7
 801ec28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec2a:	6823      	ldr	r3, [r4, #0]
 801ec2c:	b2f6      	uxtb	r6, r6
 801ec2e:	6922      	ldr	r2, [r4, #16]
 801ec30:	4637      	mov	r7, r6
 801ec32:	1a98      	subs	r0, r3, r2
 801ec34:	6963      	ldr	r3, [r4, #20]
 801ec36:	4283      	cmp	r3, r0
 801ec38:	dc05      	bgt.n	801ec46 <__swbuf_r+0x4e>
 801ec3a:	4621      	mov	r1, r4
 801ec3c:	4628      	mov	r0, r5
 801ec3e:	f7ff fda7 	bl	801e790 <_fflush_r>
 801ec42:	2800      	cmp	r0, #0
 801ec44:	d1ed      	bne.n	801ec22 <__swbuf_r+0x2a>
 801ec46:	68a3      	ldr	r3, [r4, #8]
 801ec48:	3b01      	subs	r3, #1
 801ec4a:	60a3      	str	r3, [r4, #8]
 801ec4c:	6823      	ldr	r3, [r4, #0]
 801ec4e:	1c5a      	adds	r2, r3, #1
 801ec50:	6022      	str	r2, [r4, #0]
 801ec52:	701e      	strb	r6, [r3, #0]
 801ec54:	1c43      	adds	r3, r0, #1
 801ec56:	6962      	ldr	r2, [r4, #20]
 801ec58:	429a      	cmp	r2, r3
 801ec5a:	d004      	beq.n	801ec66 <__swbuf_r+0x6e>
 801ec5c:	89a3      	ldrh	r3, [r4, #12]
 801ec5e:	07db      	lsls	r3, r3, #31
 801ec60:	d5e1      	bpl.n	801ec26 <__swbuf_r+0x2e>
 801ec62:	2e0a      	cmp	r6, #10
 801ec64:	d1df      	bne.n	801ec26 <__swbuf_r+0x2e>
 801ec66:	4621      	mov	r1, r4
 801ec68:	4628      	mov	r0, r5
 801ec6a:	f7ff fd91 	bl	801e790 <_fflush_r>
 801ec6e:	2800      	cmp	r0, #0
 801ec70:	d0d9      	beq.n	801ec26 <__swbuf_r+0x2e>
 801ec72:	e7d6      	b.n	801ec22 <__swbuf_r+0x2a>

0801ec74 <__swsetup_r>:
 801ec74:	b538      	push	{r3, r4, r5, lr}
 801ec76:	4b29      	ldr	r3, [pc, #164]	@ (801ed1c <__swsetup_r+0xa8>)
 801ec78:	4605      	mov	r5, r0
 801ec7a:	460c      	mov	r4, r1
 801ec7c:	6818      	ldr	r0, [r3, #0]
 801ec7e:	b118      	cbz	r0, 801ec88 <__swsetup_r+0x14>
 801ec80:	6a03      	ldr	r3, [r0, #32]
 801ec82:	b90b      	cbnz	r3, 801ec88 <__swsetup_r+0x14>
 801ec84:	f7fd ff82 	bl	801cb8c <__sinit>
 801ec88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec8c:	0719      	lsls	r1, r3, #28
 801ec8e:	d422      	bmi.n	801ecd6 <__swsetup_r+0x62>
 801ec90:	06da      	lsls	r2, r3, #27
 801ec92:	d407      	bmi.n	801eca4 <__swsetup_r+0x30>
 801ec94:	2209      	movs	r2, #9
 801ec96:	602a      	str	r2, [r5, #0]
 801ec98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 801eca0:	81a3      	strh	r3, [r4, #12]
 801eca2:	e033      	b.n	801ed0c <__swsetup_r+0x98>
 801eca4:	0758      	lsls	r0, r3, #29
 801eca6:	d512      	bpl.n	801ecce <__swsetup_r+0x5a>
 801eca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ecaa:	b141      	cbz	r1, 801ecbe <__swsetup_r+0x4a>
 801ecac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ecb0:	4299      	cmp	r1, r3
 801ecb2:	d002      	beq.n	801ecba <__swsetup_r+0x46>
 801ecb4:	4628      	mov	r0, r5
 801ecb6:	f7fe ff07 	bl	801dac8 <_free_r>
 801ecba:	2300      	movs	r3, #0
 801ecbc:	6363      	str	r3, [r4, #52]	@ 0x34
 801ecbe:	89a3      	ldrh	r3, [r4, #12]
 801ecc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ecc4:	81a3      	strh	r3, [r4, #12]
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	6063      	str	r3, [r4, #4]
 801ecca:	6923      	ldr	r3, [r4, #16]
 801eccc:	6023      	str	r3, [r4, #0]
 801ecce:	89a3      	ldrh	r3, [r4, #12]
 801ecd0:	f043 0308 	orr.w	r3, r3, #8
 801ecd4:	81a3      	strh	r3, [r4, #12]
 801ecd6:	6923      	ldr	r3, [r4, #16]
 801ecd8:	b94b      	cbnz	r3, 801ecee <__swsetup_r+0x7a>
 801ecda:	89a3      	ldrh	r3, [r4, #12]
 801ecdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ece0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ece4:	d003      	beq.n	801ecee <__swsetup_r+0x7a>
 801ece6:	4621      	mov	r1, r4
 801ece8:	4628      	mov	r0, r5
 801ecea:	f000 f882 	bl	801edf2 <__smakebuf_r>
 801ecee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ecf2:	f013 0201 	ands.w	r2, r3, #1
 801ecf6:	d00a      	beq.n	801ed0e <__swsetup_r+0x9a>
 801ecf8:	2200      	movs	r2, #0
 801ecfa:	60a2      	str	r2, [r4, #8]
 801ecfc:	6962      	ldr	r2, [r4, #20]
 801ecfe:	4252      	negs	r2, r2
 801ed00:	61a2      	str	r2, [r4, #24]
 801ed02:	6922      	ldr	r2, [r4, #16]
 801ed04:	b942      	cbnz	r2, 801ed18 <__swsetup_r+0xa4>
 801ed06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ed0a:	d1c5      	bne.n	801ec98 <__swsetup_r+0x24>
 801ed0c:	bd38      	pop	{r3, r4, r5, pc}
 801ed0e:	0799      	lsls	r1, r3, #30
 801ed10:	bf58      	it	pl
 801ed12:	6962      	ldrpl	r2, [r4, #20]
 801ed14:	60a2      	str	r2, [r4, #8]
 801ed16:	e7f4      	b.n	801ed02 <__swsetup_r+0x8e>
 801ed18:	2000      	movs	r0, #0
 801ed1a:	e7f7      	b.n	801ed0c <__swsetup_r+0x98>
 801ed1c:	200000c0 	.word	0x200000c0

0801ed20 <_raise_r>:
 801ed20:	291f      	cmp	r1, #31
 801ed22:	b538      	push	{r3, r4, r5, lr}
 801ed24:	4605      	mov	r5, r0
 801ed26:	460c      	mov	r4, r1
 801ed28:	d904      	bls.n	801ed34 <_raise_r+0x14>
 801ed2a:	2316      	movs	r3, #22
 801ed2c:	6003      	str	r3, [r0, #0]
 801ed2e:	f04f 30ff 	mov.w	r0, #4294967295
 801ed32:	bd38      	pop	{r3, r4, r5, pc}
 801ed34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ed36:	b112      	cbz	r2, 801ed3e <_raise_r+0x1e>
 801ed38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ed3c:	b94b      	cbnz	r3, 801ed52 <_raise_r+0x32>
 801ed3e:	4628      	mov	r0, r5
 801ed40:	f000 f830 	bl	801eda4 <_getpid_r>
 801ed44:	4622      	mov	r2, r4
 801ed46:	4601      	mov	r1, r0
 801ed48:	4628      	mov	r0, r5
 801ed4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ed4e:	f000 b817 	b.w	801ed80 <_kill_r>
 801ed52:	2b01      	cmp	r3, #1
 801ed54:	d00a      	beq.n	801ed6c <_raise_r+0x4c>
 801ed56:	1c59      	adds	r1, r3, #1
 801ed58:	d103      	bne.n	801ed62 <_raise_r+0x42>
 801ed5a:	2316      	movs	r3, #22
 801ed5c:	6003      	str	r3, [r0, #0]
 801ed5e:	2001      	movs	r0, #1
 801ed60:	e7e7      	b.n	801ed32 <_raise_r+0x12>
 801ed62:	2100      	movs	r1, #0
 801ed64:	4620      	mov	r0, r4
 801ed66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ed6a:	4798      	blx	r3
 801ed6c:	2000      	movs	r0, #0
 801ed6e:	e7e0      	b.n	801ed32 <_raise_r+0x12>

0801ed70 <raise>:
 801ed70:	4b02      	ldr	r3, [pc, #8]	@ (801ed7c <raise+0xc>)
 801ed72:	4601      	mov	r1, r0
 801ed74:	6818      	ldr	r0, [r3, #0]
 801ed76:	f7ff bfd3 	b.w	801ed20 <_raise_r>
 801ed7a:	bf00      	nop
 801ed7c:	200000c0 	.word	0x200000c0

0801ed80 <_kill_r>:
 801ed80:	b538      	push	{r3, r4, r5, lr}
 801ed82:	2300      	movs	r3, #0
 801ed84:	4d06      	ldr	r5, [pc, #24]	@ (801eda0 <_kill_r+0x20>)
 801ed86:	4604      	mov	r4, r0
 801ed88:	4608      	mov	r0, r1
 801ed8a:	4611      	mov	r1, r2
 801ed8c:	602b      	str	r3, [r5, #0]
 801ed8e:	f7f2 f9cb 	bl	8011128 <_kill>
 801ed92:	1c43      	adds	r3, r0, #1
 801ed94:	d102      	bne.n	801ed9c <_kill_r+0x1c>
 801ed96:	682b      	ldr	r3, [r5, #0]
 801ed98:	b103      	cbz	r3, 801ed9c <_kill_r+0x1c>
 801ed9a:	6023      	str	r3, [r4, #0]
 801ed9c:	bd38      	pop	{r3, r4, r5, pc}
 801ed9e:	bf00      	nop
 801eda0:	20005d30 	.word	0x20005d30

0801eda4 <_getpid_r>:
 801eda4:	f7f2 b9b8 	b.w	8011118 <_getpid>

0801eda8 <__swhatbuf_r>:
 801eda8:	b570      	push	{r4, r5, r6, lr}
 801edaa:	460c      	mov	r4, r1
 801edac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edb0:	b096      	sub	sp, #88	@ 0x58
 801edb2:	4615      	mov	r5, r2
 801edb4:	2900      	cmp	r1, #0
 801edb6:	461e      	mov	r6, r3
 801edb8:	da0c      	bge.n	801edd4 <__swhatbuf_r+0x2c>
 801edba:	89a3      	ldrh	r3, [r4, #12]
 801edbc:	2100      	movs	r1, #0
 801edbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801edc2:	bf14      	ite	ne
 801edc4:	2340      	movne	r3, #64	@ 0x40
 801edc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801edca:	2000      	movs	r0, #0
 801edcc:	6031      	str	r1, [r6, #0]
 801edce:	602b      	str	r3, [r5, #0]
 801edd0:	b016      	add	sp, #88	@ 0x58
 801edd2:	bd70      	pop	{r4, r5, r6, pc}
 801edd4:	466a      	mov	r2, sp
 801edd6:	f000 f849 	bl	801ee6c <_fstat_r>
 801edda:	2800      	cmp	r0, #0
 801eddc:	dbed      	blt.n	801edba <__swhatbuf_r+0x12>
 801edde:	9901      	ldr	r1, [sp, #4]
 801ede0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ede4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ede8:	4259      	negs	r1, r3
 801edea:	4159      	adcs	r1, r3
 801edec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801edf0:	e7eb      	b.n	801edca <__swhatbuf_r+0x22>

0801edf2 <__smakebuf_r>:
 801edf2:	898b      	ldrh	r3, [r1, #12]
 801edf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801edf6:	079d      	lsls	r5, r3, #30
 801edf8:	4606      	mov	r6, r0
 801edfa:	460c      	mov	r4, r1
 801edfc:	d507      	bpl.n	801ee0e <__smakebuf_r+0x1c>
 801edfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ee02:	6023      	str	r3, [r4, #0]
 801ee04:	6123      	str	r3, [r4, #16]
 801ee06:	2301      	movs	r3, #1
 801ee08:	6163      	str	r3, [r4, #20]
 801ee0a:	b003      	add	sp, #12
 801ee0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee0e:	ab01      	add	r3, sp, #4
 801ee10:	466a      	mov	r2, sp
 801ee12:	f7ff ffc9 	bl	801eda8 <__swhatbuf_r>
 801ee16:	9f00      	ldr	r7, [sp, #0]
 801ee18:	4605      	mov	r5, r0
 801ee1a:	4630      	mov	r0, r6
 801ee1c:	4639      	mov	r1, r7
 801ee1e:	f7fe fec7 	bl	801dbb0 <_malloc_r>
 801ee22:	b948      	cbnz	r0, 801ee38 <__smakebuf_r+0x46>
 801ee24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee28:	059a      	lsls	r2, r3, #22
 801ee2a:	d4ee      	bmi.n	801ee0a <__smakebuf_r+0x18>
 801ee2c:	f023 0303 	bic.w	r3, r3, #3
 801ee30:	f043 0302 	orr.w	r3, r3, #2
 801ee34:	81a3      	strh	r3, [r4, #12]
 801ee36:	e7e2      	b.n	801edfe <__smakebuf_r+0xc>
 801ee38:	89a3      	ldrh	r3, [r4, #12]
 801ee3a:	6020      	str	r0, [r4, #0]
 801ee3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ee40:	81a3      	strh	r3, [r4, #12]
 801ee42:	9b01      	ldr	r3, [sp, #4]
 801ee44:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ee48:	b15b      	cbz	r3, 801ee62 <__smakebuf_r+0x70>
 801ee4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee4e:	4630      	mov	r0, r6
 801ee50:	f000 f81e 	bl	801ee90 <_isatty_r>
 801ee54:	b128      	cbz	r0, 801ee62 <__smakebuf_r+0x70>
 801ee56:	89a3      	ldrh	r3, [r4, #12]
 801ee58:	f023 0303 	bic.w	r3, r3, #3
 801ee5c:	f043 0301 	orr.w	r3, r3, #1
 801ee60:	81a3      	strh	r3, [r4, #12]
 801ee62:	89a3      	ldrh	r3, [r4, #12]
 801ee64:	431d      	orrs	r5, r3
 801ee66:	81a5      	strh	r5, [r4, #12]
 801ee68:	e7cf      	b.n	801ee0a <__smakebuf_r+0x18>
	...

0801ee6c <_fstat_r>:
 801ee6c:	b538      	push	{r3, r4, r5, lr}
 801ee6e:	2300      	movs	r3, #0
 801ee70:	4d06      	ldr	r5, [pc, #24]	@ (801ee8c <_fstat_r+0x20>)
 801ee72:	4604      	mov	r4, r0
 801ee74:	4608      	mov	r0, r1
 801ee76:	4611      	mov	r1, r2
 801ee78:	602b      	str	r3, [r5, #0]
 801ee7a:	f7f2 f9b5 	bl	80111e8 <_fstat>
 801ee7e:	1c43      	adds	r3, r0, #1
 801ee80:	d102      	bne.n	801ee88 <_fstat_r+0x1c>
 801ee82:	682b      	ldr	r3, [r5, #0]
 801ee84:	b103      	cbz	r3, 801ee88 <_fstat_r+0x1c>
 801ee86:	6023      	str	r3, [r4, #0]
 801ee88:	bd38      	pop	{r3, r4, r5, pc}
 801ee8a:	bf00      	nop
 801ee8c:	20005d30 	.word	0x20005d30

0801ee90 <_isatty_r>:
 801ee90:	b538      	push	{r3, r4, r5, lr}
 801ee92:	2300      	movs	r3, #0
 801ee94:	4d05      	ldr	r5, [pc, #20]	@ (801eeac <_isatty_r+0x1c>)
 801ee96:	4604      	mov	r4, r0
 801ee98:	4608      	mov	r0, r1
 801ee9a:	602b      	str	r3, [r5, #0]
 801ee9c:	f7f2 f9b4 	bl	8011208 <_isatty>
 801eea0:	1c43      	adds	r3, r0, #1
 801eea2:	d102      	bne.n	801eeaa <_isatty_r+0x1a>
 801eea4:	682b      	ldr	r3, [r5, #0]
 801eea6:	b103      	cbz	r3, 801eeaa <_isatty_r+0x1a>
 801eea8:	6023      	str	r3, [r4, #0]
 801eeaa:	bd38      	pop	{r3, r4, r5, pc}
 801eeac:	20005d30 	.word	0x20005d30

0801eeb0 <sqrt>:
 801eeb0:	b538      	push	{r3, r4, r5, lr}
 801eeb2:	ec55 4b10 	vmov	r4, r5, d0
 801eeb6:	ed2d 8b02 	vpush	{d8}
 801eeba:	f000 f825 	bl	801ef08 <__ieee754_sqrt>
 801eebe:	4622      	mov	r2, r4
 801eec0:	462b      	mov	r3, r5
 801eec2:	4620      	mov	r0, r4
 801eec4:	4629      	mov	r1, r5
 801eec6:	eeb0 8a40 	vmov.f32	s16, s0
 801eeca:	eef0 8a60 	vmov.f32	s17, s1
 801eece:	f7ed fe3d 	bl	800cb4c <__aeabi_dcmpun>
 801eed2:	b990      	cbnz	r0, 801eefa <sqrt+0x4a>
 801eed4:	2200      	movs	r2, #0
 801eed6:	2300      	movs	r3, #0
 801eed8:	4620      	mov	r0, r4
 801eeda:	4629      	mov	r1, r5
 801eedc:	f7ed fe0e 	bl	800cafc <__aeabi_dcmplt>
 801eee0:	b158      	cbz	r0, 801eefa <sqrt+0x4a>
 801eee2:	f7fd ff55 	bl	801cd90 <__errno>
 801eee6:	2321      	movs	r3, #33	@ 0x21
 801eee8:	2200      	movs	r2, #0
 801eeea:	6003      	str	r3, [r0, #0]
 801eeec:	2300      	movs	r3, #0
 801eeee:	4610      	mov	r0, r2
 801eef0:	4619      	mov	r1, r3
 801eef2:	f7ed fcbb 	bl	800c86c <__aeabi_ddiv>
 801eef6:	ec41 0b18 	vmov	d8, r0, r1
 801eefa:	eeb0 0a48 	vmov.f32	s0, s16
 801eefe:	eef0 0a68 	vmov.f32	s1, s17
 801ef02:	ecbd 8b02 	vpop	{d8}
 801ef06:	bd38      	pop	{r3, r4, r5, pc}

0801ef08 <__ieee754_sqrt>:
 801ef08:	4a6b      	ldr	r2, [pc, #428]	@ (801f0b8 <__ieee754_sqrt+0x1b0>)
 801ef0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef0e:	ec55 4b10 	vmov	r4, r5, d0
 801ef12:	43aa      	bics	r2, r5
 801ef14:	462b      	mov	r3, r5
 801ef16:	4621      	mov	r1, r4
 801ef18:	d110      	bne.n	801ef3c <__ieee754_sqrt+0x34>
 801ef1a:	4622      	mov	r2, r4
 801ef1c:	4620      	mov	r0, r4
 801ef1e:	4629      	mov	r1, r5
 801ef20:	f7ed fb7a 	bl	800c618 <__aeabi_dmul>
 801ef24:	4602      	mov	r2, r0
 801ef26:	460b      	mov	r3, r1
 801ef28:	4620      	mov	r0, r4
 801ef2a:	4629      	mov	r1, r5
 801ef2c:	f7ed f9be 	bl	800c2ac <__adddf3>
 801ef30:	4604      	mov	r4, r0
 801ef32:	460d      	mov	r5, r1
 801ef34:	ec45 4b10 	vmov	d0, r4, r5
 801ef38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef3c:	2d00      	cmp	r5, #0
 801ef3e:	dc0e      	bgt.n	801ef5e <__ieee754_sqrt+0x56>
 801ef40:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801ef44:	4322      	orrs	r2, r4
 801ef46:	d0f5      	beq.n	801ef34 <__ieee754_sqrt+0x2c>
 801ef48:	b19d      	cbz	r5, 801ef72 <__ieee754_sqrt+0x6a>
 801ef4a:	4622      	mov	r2, r4
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	4629      	mov	r1, r5
 801ef50:	f7ed f9aa 	bl	800c2a8 <__aeabi_dsub>
 801ef54:	4602      	mov	r2, r0
 801ef56:	460b      	mov	r3, r1
 801ef58:	f7ed fc88 	bl	800c86c <__aeabi_ddiv>
 801ef5c:	e7e8      	b.n	801ef30 <__ieee754_sqrt+0x28>
 801ef5e:	152a      	asrs	r2, r5, #20
 801ef60:	d115      	bne.n	801ef8e <__ieee754_sqrt+0x86>
 801ef62:	2000      	movs	r0, #0
 801ef64:	e009      	b.n	801ef7a <__ieee754_sqrt+0x72>
 801ef66:	0acb      	lsrs	r3, r1, #11
 801ef68:	3a15      	subs	r2, #21
 801ef6a:	0549      	lsls	r1, r1, #21
 801ef6c:	2b00      	cmp	r3, #0
 801ef6e:	d0fa      	beq.n	801ef66 <__ieee754_sqrt+0x5e>
 801ef70:	e7f7      	b.n	801ef62 <__ieee754_sqrt+0x5a>
 801ef72:	462a      	mov	r2, r5
 801ef74:	e7fa      	b.n	801ef6c <__ieee754_sqrt+0x64>
 801ef76:	005b      	lsls	r3, r3, #1
 801ef78:	3001      	adds	r0, #1
 801ef7a:	02dc      	lsls	r4, r3, #11
 801ef7c:	d5fb      	bpl.n	801ef76 <__ieee754_sqrt+0x6e>
 801ef7e:	1e44      	subs	r4, r0, #1
 801ef80:	1b12      	subs	r2, r2, r4
 801ef82:	f1c0 0420 	rsb	r4, r0, #32
 801ef86:	fa21 f404 	lsr.w	r4, r1, r4
 801ef8a:	4081      	lsls	r1, r0
 801ef8c:	4323      	orrs	r3, r4
 801ef8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ef92:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801ef96:	07d2      	lsls	r2, r2, #31
 801ef98:	f04f 0600 	mov.w	r6, #0
 801ef9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801efa0:	ea4f 0565 	mov.w	r5, r5, asr #1
 801efa4:	f04f 0016 	mov.w	r0, #22
 801efa8:	4632      	mov	r2, r6
 801efaa:	bf58      	it	pl
 801efac:	005b      	lslpl	r3, r3, #1
 801efae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801efb2:	bf5c      	itt	pl
 801efb4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801efb8:	0049      	lslpl	r1, r1, #1
 801efba:	005b      	lsls	r3, r3, #1
 801efbc:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801efc0:	0049      	lsls	r1, r1, #1
 801efc2:	1917      	adds	r7, r2, r4
 801efc4:	429f      	cmp	r7, r3
 801efc6:	bfde      	ittt	le
 801efc8:	193a      	addle	r2, r7, r4
 801efca:	1bdb      	suble	r3, r3, r7
 801efcc:	1936      	addle	r6, r6, r4
 801efce:	0fcf      	lsrs	r7, r1, #31
 801efd0:	3801      	subs	r0, #1
 801efd2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801efd6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801efda:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801efde:	d1f0      	bne.n	801efc2 <__ieee754_sqrt+0xba>
 801efe0:	4604      	mov	r4, r0
 801efe2:	2720      	movs	r7, #32
 801efe4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801efe8:	429a      	cmp	r2, r3
 801efea:	eb00 0e0c 	add.w	lr, r0, ip
 801efee:	db02      	blt.n	801eff6 <__ieee754_sqrt+0xee>
 801eff0:	d113      	bne.n	801f01a <__ieee754_sqrt+0x112>
 801eff2:	458e      	cmp	lr, r1
 801eff4:	d811      	bhi.n	801f01a <__ieee754_sqrt+0x112>
 801eff6:	f1be 0f00 	cmp.w	lr, #0
 801effa:	eb0e 000c 	add.w	r0, lr, ip
 801effe:	da43      	bge.n	801f088 <__ieee754_sqrt+0x180>
 801f000:	2800      	cmp	r0, #0
 801f002:	db41      	blt.n	801f088 <__ieee754_sqrt+0x180>
 801f004:	f102 0801 	add.w	r8, r2, #1
 801f008:	1a9b      	subs	r3, r3, r2
 801f00a:	458e      	cmp	lr, r1
 801f00c:	4464      	add	r4, ip
 801f00e:	eba1 010e 	sub.w	r1, r1, lr
 801f012:	bf88      	it	hi
 801f014:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801f018:	4642      	mov	r2, r8
 801f01a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801f01e:	3f01      	subs	r7, #1
 801f020:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f024:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801f028:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f02c:	d1dc      	bne.n	801efe8 <__ieee754_sqrt+0xe0>
 801f02e:	4319      	orrs	r1, r3
 801f030:	d01b      	beq.n	801f06a <__ieee754_sqrt+0x162>
 801f032:	f8df a088 	ldr.w	sl, [pc, #136]	@ 801f0bc <__ieee754_sqrt+0x1b4>
 801f036:	f8df b088 	ldr.w	fp, [pc, #136]	@ 801f0c0 <__ieee754_sqrt+0x1b8>
 801f03a:	e9da 0100 	ldrd	r0, r1, [sl]
 801f03e:	e9db 2300 	ldrd	r2, r3, [fp]
 801f042:	e9da 8900 	ldrd	r8, r9, [sl]
 801f046:	f7ed f92f 	bl	800c2a8 <__aeabi_dsub>
 801f04a:	4602      	mov	r2, r0
 801f04c:	460b      	mov	r3, r1
 801f04e:	4640      	mov	r0, r8
 801f050:	4649      	mov	r1, r9
 801f052:	f7ed fd5d 	bl	800cb10 <__aeabi_dcmple>
 801f056:	b140      	cbz	r0, 801f06a <__ieee754_sqrt+0x162>
 801f058:	f1b4 3fff 	cmp.w	r4, #4294967295
 801f05c:	e9da 0100 	ldrd	r0, r1, [sl]
 801f060:	e9db 2300 	ldrd	r2, r3, [fp]
 801f064:	d112      	bne.n	801f08c <__ieee754_sqrt+0x184>
 801f066:	3601      	adds	r6, #1
 801f068:	463c      	mov	r4, r7
 801f06a:	1072      	asrs	r2, r6, #1
 801f06c:	07f1      	lsls	r1, r6, #31
 801f06e:	ea4f 0354 	mov.w	r3, r4, lsr #1
 801f072:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f076:	bf48      	it	mi
 801f078:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f07c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f080:	4618      	mov	r0, r3
 801f082:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f086:	e753      	b.n	801ef30 <__ieee754_sqrt+0x28>
 801f088:	4690      	mov	r8, r2
 801f08a:	e7bd      	b.n	801f008 <__ieee754_sqrt+0x100>
 801f08c:	e9da 8900 	ldrd	r8, r9, [sl]
 801f090:	f7ed f90c 	bl	800c2ac <__adddf3>
 801f094:	4602      	mov	r2, r0
 801f096:	460b      	mov	r3, r1
 801f098:	4640      	mov	r0, r8
 801f09a:	4649      	mov	r1, r9
 801f09c:	f7ed fd2e 	bl	800cafc <__aeabi_dcmplt>
 801f0a0:	b128      	cbz	r0, 801f0ae <__ieee754_sqrt+0x1a6>
 801f0a2:	1ca0      	adds	r0, r4, #2
 801f0a4:	f104 0402 	add.w	r4, r4, #2
 801f0a8:	bf08      	it	eq
 801f0aa:	3601      	addeq	r6, #1
 801f0ac:	e7dd      	b.n	801f06a <__ieee754_sqrt+0x162>
 801f0ae:	1c63      	adds	r3, r4, #1
 801f0b0:	f023 0401 	bic.w	r4, r3, #1
 801f0b4:	e7d9      	b.n	801f06a <__ieee754_sqrt+0x162>
 801f0b6:	bf00      	nop
 801f0b8:	7ff00000 	.word	0x7ff00000
 801f0bc:	20000288 	.word	0x20000288
 801f0c0:	20000280 	.word	0x20000280

0801f0c4 <_init>:
 801f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0c6:	bf00      	nop
 801f0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0ca:	bc08      	pop	{r3}
 801f0cc:	469e      	mov	lr, r3
 801f0ce:	4770      	bx	lr

0801f0d0 <_fini>:
 801f0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0d2:	bf00      	nop
 801f0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0d6:	bc08      	pop	{r3}
 801f0d8:	469e      	mov	lr, r3
 801f0da:	4770      	bx	lr
