
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f9c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800a1e8  0800a1e8  0000b1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3ec  0800a3ec  0000c028  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3ec  0800a3ec  0000b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3f4  0800a3f4  0000c028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f4  0800a3f4  0000b3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3f8  0800a3f8  0000b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800a3fc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000028  0800a424  0000c028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  0800a424  0000c1ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f47  00000000  00000000  0000c05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f6  00000000  00000000  0001efa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000218a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fc  00000000  00000000  00022588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031d12  00000000  00000000  00022f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c91  00000000  00000000  00054c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00135acc  00000000  00000000  00067927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019d3f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ec  00000000  00000000  0019d438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a0924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	00000000 	.word	0x00000000
 800026c:	0800a1d0 	.word	0x0800a1d0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000002c 	.word	0x2000002c
 8000288:	0800a1d0 	.word	0x0800a1d0

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetSectorAndBank>:




// Function to calculate sector and bank from address
void GetSectorAndBank(uint32_t address, uint32_t *sector, uint32_t *bank) {
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
    if (address < FLASH_BASE_BANK2) {
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80005b6:	d209      	bcs.n	80005cc <GetSectorAndBank+0x28>
        // Address is in Bank 1
        *bank = FLASH_BANK_1;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2201      	movs	r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
        *sector = (address - FLASH_BASE_BANK1) / FLASH_SECTOR_SIZE;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80005c4:	0b5a      	lsrs	r2, r3, #13
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	601a      	str	r2, [r3, #0]
    } else {
        // Address is in Bank 2
        *bank = FLASH_BANK_2;
        *sector = (address - FLASH_BASE_BANK2) / FLASH_SECTOR_SIZE;
    }
}
 80005ca:	e008      	b.n	80005de <GetSectorAndBank+0x3a>
        *bank = FLASH_BANK_2;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2202      	movs	r2, #2
 80005d0:	601a      	str	r2, [r3, #0]
        *sector = (address - FLASH_BASE_BANK2) / FLASH_SECTOR_SIZE;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f1a3 6301 	sub.w	r3, r3, #135266304	@ 0x8100000
 80005d8:	0b5a      	lsrs	r2, r3, #13
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <flash_erase>:
/**
 * @brief   This function erases the memory.
 * @param   address: First address to be erased (the last is the end of the flash).
 * @return  status: Report about the success of the erasing.
 */
flash_status flash_erase(uint32_t address) {
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b08a      	sub	sp, #40	@ 0x28
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]

	HAL_FLASH_Unlock();
 80005f2:	f001 f9d9 	bl	80019a8 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef eraseInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
	uint32_t pageError = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
	uint32_t sector, bank;
	while(address < 0x08100000)
 8000608:	e033      	b.n	8000672 <flash_erase+0x88>
	{
		// Calculate sector and bank from the address
		GetSectorAndBank(address, &sector, &bank);
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ffc5 	bl	80005a4 <GetSectorAndBank>

		// Validate sector and address range
		if (sector >= FLASH_TOTAL_SECTORS || address > FLASH_BANK2_END_ADDRESS) {
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	2bff      	cmp	r3, #255	@ 0xff
 800061e:	d803      	bhi.n	8000628 <flash_erase+0x3e>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8000626:	d303      	bcc.n	8000630 <flash_erase+0x46>
			HAL_FLASH_Lock();
 8000628:	f001 f9e4 	bl	80019f4 <HAL_FLASH_Lock>
			return FLASH_ERROR;
 800062c:	23ff      	movs	r3, #255	@ 0xff
 800062e:	e027      	b.n	8000680 <flash_erase+0x96>
		}

		// Configure the erase structure
		eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000630:	2304      	movs	r3, #4
 8000632:	61bb      	str	r3, [r7, #24]
		eraseInitStruct.Banks = bank;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	61fb      	str	r3, [r7, #28]
		eraseInitStruct.Sector = sector;
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	623b      	str	r3, [r7, #32]
		eraseInitStruct.NbSectors = 1;  // Erase one sector at a time
 800063c:	2301      	movs	r3, #1
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop

		// Perform Flash erase
		__disable_irq();

		if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK) {
 8000644:	f107 0214 	add.w	r2, r7, #20
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fb20 	bl	8001c94 <HAL_FLASHEx_Erase>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <flash_erase+0x7c>
  __ASM volatile ("cpsie i" : : : "memory");
 800065a:	b662      	cpsie	i
}
 800065c:	bf00      	nop
			__enable_irq();
			HAL_FLASH_Lock();
 800065e:	f001 f9c9 	bl	80019f4 <HAL_FLASH_Lock>
			return FLASH_ERROR;
 8000662:	23ff      	movs	r3, #255	@ 0xff
 8000664:	e00c      	b.n	8000680 <flash_erase+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
 8000666:	b662      	cpsie	i
}
 8000668:	bf00      	nop
		}

		__enable_irq();
		address = address + 0x2000;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000670:	607b      	str	r3, [r7, #4]
	while(address < 0x08100000)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8000678:	d3c7      	bcc.n	800060a <flash_erase+0x20>
	}

	HAL_FLASH_Lock();
 800067a:	f001 f9bb 	bl	80019f4 <HAL_FLASH_Lock>
	return FLASH_OK;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3728      	adds	r7, #40	@ 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <flash_jump_to_app>:
/**
 * @brief   Actually jumps to the user application.
 * @param   void
 * @return  void
 */
void flash_jump_to_app(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	//	 Function pointer to the address of the user application.
	fnc_ptr jump_to_app;
	jump_to_app =(fnc_ptr) (*(volatile uint32_t*) (FLASH_APP_START_ADDRESS + 4u));
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <flash_jump_to_app+0x2c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	607b      	str	r3, [r7, #4]

	HAL_DeInit();
 8000694:	f000 fdd0 	bl	8001238 <HAL_DeInit>
	//	 Change the main stack pointer.
	__set_MSP(*(volatile uint32_t*) FLASH_APP_START_ADDRESS);
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <flash_jump_to_app+0x30>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f383 8808 	msr	MSP, r3
}
 80006a4:	bf00      	nop
	jump_to_app();
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4798      	blx	r3
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	0800c004 	.word	0x0800c004
 80006b8:	0800c000 	.word	0x0800c000

080006bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c0:	f000 fd92 	bl	80011e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c4:	f000 f852 	bl	800076c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c8:	f000 f90c 	bl	80008e4 <MX_GPIO_Init>
	MX_UART5_Init();
 80006cc:	f000 f8be 	bl	800084c <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	UART_InitAllHandlers();
 80006d0:	f000 f980 	bl	80009d4 <UART_InitAllHandlers>
	if(!(IsBootloaderMode())){
 80006d4:	f000 f98c 	bl	80009f0 <IsBootloaderMode>
 80006d8:	4603      	mov	r3, r0
 80006da:	f083 0301 	eor.w	r3, r3, #1
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00c      	beq.n	80006fe <main+0x42>
	uart_transmit_str((uint8_t*)"\n\r================================\n\r");
 80006e4:	4818      	ldr	r0, [pc, #96]	@ (8000748 <main+0x8c>)
 80006e6:	f000 fb6d 	bl	8000dc4 <uart_transmit_str>
	uart_transmit_str((uint8_t*)"UART Bootloader\n\r");
 80006ea:	4818      	ldr	r0, [pc, #96]	@ (800074c <main+0x90>)
 80006ec:	f000 fb6a 	bl	8000dc4 <uart_transmit_str>
	uart_transmit_str((uint8_t*)"Entering into bootloader mode, open Tera Term and send binary file in XMODEM mode\n\r");
 80006f0:	4817      	ldr	r0, [pc, #92]	@ (8000750 <main+0x94>)
 80006f2:	f000 fb67 	bl	8000dc4 <uart_transmit_str>
	uart_transmit_str((uint8_t*)"================================\n\r\n\r");
 80006f6:	4817      	ldr	r0, [pc, #92]	@ (8000754 <main+0x98>)
 80006f8:	f000 fb64 	bl	8000dc4 <uart_transmit_str>
 80006fc:	e001      	b.n	8000702 <main+0x46>
	}
	else{
		flash_jump_to_app();
 80006fe:	f7ff ffc3 	bl	8000688 <flash_jump_to_app>
	}
	circular_buffer_init(&uart_buffer);
 8000702:	4815      	ldr	r0, [pc, #84]	@ (8000758 <main+0x9c>)
 8000704:	f000 f9ae 	bl	8000a64 <circular_buffer_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
#if 1
		if(!(IsBootloaderMode())){
 8000708:	f000 f972 	bl	80009f0 <IsBootloaderMode>
 800070c:	4603      	mov	r3, r0
 800070e:	f083 0301 	eor.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d013      	beq.n	8000740 <main+0x84>

			flash_erase(APPLICATION_START_ADDRESS);
 8000718:	4810      	ldr	r0, [pc, #64]	@ (800075c <main+0xa0>)
 800071a:	f7ff ff66 	bl	80005ea <flash_erase>
			uart_transmit_str((uint8_t*)"Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
 800071e:	4810      	ldr	r0, [pc, #64]	@ (8000760 <main+0xa4>)
 8000720:	f000 fb50 	bl	8000dc4 <uart_transmit_str>
			xmodem_receive(&huart5);
 8000724:	480f      	ldr	r0, [pc, #60]	@ (8000764 <main+0xa8>)
 8000726:	f000 fbf3 	bl	8000f10 <xmodem_receive>
			HAL_Delay(wait_time);
 800072a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800072e:	f000 fe65 	bl	80013fc <HAL_Delay>
			circular_buffer_init(&uart_buffer);
 8000732:	4809      	ldr	r0, [pc, #36]	@ (8000758 <main+0x9c>)
 8000734:	f000 f996 	bl	8000a64 <circular_buffer_init>
			uart_transmit_str((uint8_t*)"\n\rFailed... Please try again.\n\r");
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <main+0xac>)
 800073a:	f000 fb43 	bl	8000dc4 <uart_transmit_str>
 800073e:	e7e3      	b.n	8000708 <main+0x4c>
		}
		else
//#else
			/*make sure your code is update into flash*/
			flash_jump_to_app();
 8000740:	f7ff ffa2 	bl	8000688 <flash_jump_to_app>
		if(!(IsBootloaderMode())){
 8000744:	e7e0      	b.n	8000708 <main+0x4c>
 8000746:	bf00      	nop
 8000748:	0800a1e8 	.word	0x0800a1e8
 800074c:	0800a210 	.word	0x0800a210
 8000750:	0800a224 	.word	0x0800a224
 8000754:	0800a278 	.word	0x0800a278
 8000758:	200000dc 	.word	0x200000dc
 800075c:	0800c000 	.word	0x0800c000
 8000760:	0800a2a0 	.word	0x0800a2a0
 8000764:	20000044 	.word	0x20000044
 8000768:	0800a2f0 	.word	0x0800a2f0

0800076c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	@ 0x70
 8000770:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2250      	movs	r2, #80	@ 0x50
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f009 fcee 	bl	800a15c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000792:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <SystemClock_Config+0xd8>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	4a2b      	ldr	r2, [pc, #172]	@ (8000844 <SystemClock_Config+0xd8>)
 8000798:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800079c:	6113      	str	r3, [r2, #16]
 800079e:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <SystemClock_Config+0xd8>)
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007aa:	bf00      	nop
 80007ac:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <SystemClock_Config+0xd8>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	f003 0308 	and.w	r3, r3, #8
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d1f9      	bne.n	80007ac <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80007c6:	2303      	movs	r3, #3
 80007c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 80;
 80007ce:	2350      	movs	r3, #80	@ 0x50
 80007d0:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80007de:	2308      	movs	r3, #8
 80007e0:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fcbe 	bl	8002170 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x92>
	{
		Error_Handler();
 80007fa:	f000 f97e 	bl	8000afa <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	231f      	movs	r3, #31
 8000800:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2105      	movs	r1, #5
 800081c:	4618      	mov	r0, r3
 800081e:	f002 f8df 	bl	80029e0 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000828:	f000 f967 	bl	8000afa <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <SystemClock_Config+0xdc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <SystemClock_Config+0xdc>)
 8000836:	f043 0320 	orr.w	r3, r3, #32
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	3770      	adds	r7, #112	@ 0x70
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	44020800 	.word	0x44020800
 8000848:	40022000 	.word	0x40022000

0800084c <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <MX_UART5_Init+0x90>)
 8000852:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <MX_UART5_Init+0x94>)
 8000854:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <MX_UART5_Init+0x90>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_UART5_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <MX_UART5_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_UART5_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_UART5_Init+0x90>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <MX_UART5_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_UART5_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_UART5_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_UART5_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_UART5_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8000894:	4811      	ldr	r0, [pc, #68]	@ (80008dc <MX_UART5_Init+0x90>)
 8000896:	f007 fc37 	bl	8008108 <HAL_UART_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 80008a0:	f000 f92b 	bl	8000afa <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_UART5_Init+0x90>)
 80008a8:	f009 fb8d 	bl	8009fc6 <HAL_UARTEx_SetTxFifoThreshold>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_UART5_Init+0x6a>
	{
		Error_Handler();
 80008b2:	f000 f922 	bl	8000afa <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4808      	ldr	r0, [pc, #32]	@ (80008dc <MX_UART5_Init+0x90>)
 80008ba:	f009 fbc2 	bl	800a042 <HAL_UARTEx_SetRxFifoThreshold>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_UART5_Init+0x7c>
	{
		Error_Handler();
 80008c4:	f000 f919 	bl	8000afa <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_UART5_Init+0x90>)
 80008ca:	f009 fb43 	bl	8009f54 <HAL_UARTEx_DisableFifoMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 80008d4:	f000 f911 	bl	8000afa <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000044 	.word	0x20000044
 80008e0:	40005000 	.word	0x40005000

080008e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008fa:	4b33      	ldr	r3, [pc, #204]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 80008fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000900:	4a31      	ldr	r2, [pc, #196]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800090a:	4b2f      	ldr	r3, [pc, #188]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 800090c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000910:	f003 0310 	and.w	r3, r3, #16
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000918:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 800091a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091e:	4a2a      	ldr	r2, [pc, #168]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000928:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 800092a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 8000938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093c:	4a22      	ldr	r2, [pc, #136]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 800093e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000942:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 8000948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 8000956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095a:	4a1b      	ldr	r2, [pc, #108]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 8000966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 8000974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000978:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_GPIO_Init+0xe4>)
 8000984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : GPIO_3_Pin */
	GPIO_InitStruct.Pin = GPIO_3_Pin;
 8000990:	2310      	movs	r3, #16
 8000992:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480a      	ldr	r0, [pc, #40]	@ (80009cc <MX_GPIO_Init+0xe8>)
 80009a4:	f001 fa7a 	bl	8001e9c <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_2_Pin */
	GPIO_InitStruct.Pin = GPIO_2_Pin;
 80009a8:	2308      	movs	r3, #8
 80009aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIO_2_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_GPIO_Init+0xec>)
 80009bc:	f001 fa6e 	bl	8001e9c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	44020c00 	.word	0x44020c00
 80009cc:	42021000 	.word	0x42021000
 80009d0:	42020c00 	.word	0x42020c00

080009d4 <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */

void UART_InitAllHandlers(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart5, &uart5_rx_buffer[0], sizeof(uart5_rx_buffer));
 80009d8:	2201      	movs	r2, #1
 80009da:	4903      	ldr	r1, [pc, #12]	@ (80009e8 <UART_InitAllHandlers+0x14>)
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <UART_InitAllHandlers+0x18>)
 80009de:	f007 fc81 	bl	80082e4 <HAL_UART_Receive_IT>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000d8 	.word	0x200000d8
 80009ec:	20000044 	.word	0x20000044

080009f0 <IsBootloaderMode>:
	// Lock the flash after erasing
	HAL_FLASH_Lock();
}

// Check if bootloader mode should run (e.g., check GPIO or specific condition)
bool IsBootloaderMode(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

	if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == 1)
 80009f4:	2108      	movs	r1, #8
 80009f6:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <IsBootloaderMode+0x2c>)
 80009f8:	f001 fba2 	bl	8002140 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d108      	bne.n	8000a14 <IsBootloaderMode+0x24>
			&& (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 1)) {
 8000a02:	2110      	movs	r1, #16
 8000a04:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <IsBootloaderMode+0x30>)
 8000a06:	f001 fb9b 	bl	8002140 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <IsBootloaderMode+0x24>
		return GPIO_PIN_RESET; // Enter bootloader if button is pressed
 8000a10:	2300      	movs	r3, #0
 8000a12:	e000      	b.n	8000a16 <IsBootloaderMode+0x26>
	} else
		return GPIO_PIN_SET;
 8000a14:	2301      	movs	r3, #1

}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	42020c00 	.word	0x42020c00
 8000a20:	42021000 	.word	0x42021000

08000a24 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART5) {
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_UART_RxCpltCallback+0x30>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d10a      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0x28>
		// Handle data received from UART5
		HAL_UART_Receive_IT(&huart5, &uart5_rx_buffer[0], 1);
 8000a36:	2201      	movs	r2, #1
 8000a38:	4907      	ldr	r1, [pc, #28]	@ (8000a58 <HAL_UART_RxCpltCallback+0x34>)
 8000a3a:	4808      	ldr	r0, [pc, #32]	@ (8000a5c <HAL_UART_RxCpltCallback+0x38>)
 8000a3c:	f007 fc52 	bl	80082e4 <HAL_UART_Receive_IT>

		circular_buffer_write(&uart_buffer, uart5_rx_buffer[0]);
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_UART_RxCpltCallback+0x34>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <HAL_UART_RxCpltCallback+0x3c>)
 8000a48:	f000 f822 	bl	8000a90 <circular_buffer_write>
	}

}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40005000 	.word	0x40005000
 8000a58:	200000d8 	.word	0x200000d8
 8000a5c:	20000044 	.word	0x20000044
 8000a60:	200000dc 	.word	0x200000dc

08000a64 <circular_buffer_init>:

void circular_buffer_init(CircularBuffer *cb) {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	cb->head = 0;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	cb->tail = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	cb->full = false;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <circular_buffer_write>:



void circular_buffer_write(CircularBuffer *cb, uint8_t value) {
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
	cb->data[cb->head] = value;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	78f9      	ldrb	r1, [r7, #3]
 8000aa6:	54d1      	strb	r1, [r2, r3]

	// Advance the head pointer
	cb->head = (cb->head + 1) % BUFFER_SIZE;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

	if (cb->full) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <circular_buffer_write+0x42>
		// If the buffer is full, advance the tail pointer
		cb->tail = (cb->tail + 1) % BUFFER_SIZE;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	}

	// Check if the buffer is full
	cb->full = (cb->head == cb->tail);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2301      	moveq	r3, #1
 8000ae4:	2300      	movne	r3, #0
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000afe:	b672      	cpsid	i
}
 8000b00:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <Error_Handler+0x8>

08000b06 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0cc      	sub	sp, #304	@ 0x130
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b22:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b38:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000b42:	461a      	mov	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	f009 fb09 	bl	800a15c <memset>
  if(huart->Instance==UART5)
 8000b4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a36      	ldr	r2, [pc, #216]	@ (8000c30 <HAL_UART_MspInit+0x11c>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d164      	bne.n	8000c26 <HAL_UART_MspInit+0x112>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000b5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b60:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000b64:	f04f 0210 	mov.w	r2, #16
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b78:	2200      	movs	r2, #0
 8000b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 fa6f 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000b8c:	f7ff ffb5 	bl	8000afa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b90:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <HAL_UART_MspInit+0x120>)
 8000b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b96:	4a27      	ldr	r2, [pc, #156]	@ (8000c34 <HAL_UART_MspInit+0x120>)
 8000b98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ba0:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <HAL_UART_MspInit+0x120>)
 8000ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ba6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000baa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000bae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000bb8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000bbc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <HAL_UART_MspInit+0x120>)
 8000bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <HAL_UART_MspInit+0x120>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_UART_MspInit+0x120>)
 8000bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd4:	f003 0202 	and.w	r2, r3, #2
 8000bd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000bdc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000be6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000bea:	681b      	ldr	r3, [r3, #0]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bec:	2360      	movs	r3, #96	@ 0x60
 8000bee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000c04:	230e      	movs	r3, #14
 8000c06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_UART_MspInit+0x124>)
 8000c12:	f001 f943 	bl	8001e9c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	203e      	movs	r0, #62	@ 0x3e
 8000c1c:	f000 fcca 	bl	80015b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000c20:	203e      	movs	r0, #62	@ 0x3e
 8000c22:	f000 fce1 	bl	80015e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8000c26:	bf00      	nop
 8000c28:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40005000 	.word	0x40005000
 8000c34:	44020c00 	.word	0x44020c00
 8000c38:	42020400 	.word	0x42020400

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	// Capture the register values during NMI
	uint32_t *stackFrame;
	__asm volatile(
 8000c42:	f01e 0f04 	tst.w	lr, #4
 8000c46:	bf0c      	ite	eq
 8000c48:	f3ef 8308 	mrseq	r3, MSP
 8000c4c:	f3ef 8309 	mrsne	r3, PSP
 8000c50:	607b      	str	r3, [r7, #4]
//
//	// Send the message over UART (you can change huart1 to your actual UART handle)
//	HAL_UART_Transmit(&huart5, (uint8_t*) msg, len, HAL_MAX_DELAY);
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000c52:	bf00      	nop
 8000c54:	e7fd      	b.n	8000c52 <NMI_Handler+0x16>
	...

08000c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {

    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  uart_transmit_str((uint8_t*)"\n\Failure\n\r");
 8000c5c:	4801      	ldr	r0, [pc, #4]	@ (8000c64 <HardFault_Handler+0xc>)
 8000c5e:	f000 f8b1 	bl	8000dc4 <uart_transmit_str>
 8000c62:	e7fb      	b.n	8000c5c <HardFault_Handler+0x4>
 8000c64:	0800a36c 	.word	0x0800a36c

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 fb85 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <UART5_IRQHandler+0x10>)
 8000cbe:	f007 fb73 	bl	80083a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000044 	.word	0x20000044

08000ccc <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */

void SystemInit(void) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
	uint32_t reg_opsr;

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8000cd2:	4b35      	ldr	r3, [pc, #212]	@ (8000da8 <SystemInit+0xdc>)
 8000cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd8:	4a33      	ldr	r2, [pc, #204]	@ (8000da8 <SystemInit+0xdc>)
 8000cda:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR = RCC_CR_HSION;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <SystemInit+0xe0>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR1 = 0U;
 8000ce8:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <SystemInit+0xe0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
	RCC->CFGR2 = 0U;
 8000cee:	4b2f      	ldr	r3, [pc, #188]	@ (8000dac <SystemInit+0xe0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]

	/* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <SystemInit+0xe0>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	492c      	ldr	r1, [pc, #176]	@ (8000dac <SystemInit+0xe0>)
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000db0 <SystemInit+0xe4>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON |
			RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

	/* Reset PLLxCFGR register */
	RCC->PLL1CFGR = 0U;
 8000d00:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <SystemInit+0xe0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC->PLL2CFGR = 0U;
 8000d06:	4b29      	ldr	r3, [pc, #164]	@ (8000dac <SystemInit+0xe0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
	RCC->PLL3CFGR = 0U;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <SystemInit+0xe0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280U;
 8000d12:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <SystemInit+0xe0>)
 8000d14:	4a27      	ldr	r2, [pc, #156]	@ (8000db4 <SystemInit+0xe8>)
 8000d16:	635a      	str	r2, [r3, #52]	@ 0x34
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000U;
 8000d18:	4b24      	ldr	r3, [pc, #144]	@ (8000dac <SystemInit+0xe0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38
	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280U;
 8000d1e:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <SystemInit+0xe0>)
 8000d20:	4a24      	ldr	r2, [pc, #144]	@ (8000db4 <SystemInit+0xe8>)
 8000d22:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL2FRACR register */
	RCC->PLL2FRACR = 0x00000000U;
 8000d24:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <SystemInit+0xe0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280U;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <SystemInit+0xe0>)
 8000d2c:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <SystemInit+0xe8>)
 8000d2e:	645a      	str	r2, [r3, #68]	@ 0x44
	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000U;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	@ (8000dac <SystemInit+0xe0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

	/* Reset HSEBYP bit */
	RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d36:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <SystemInit+0xe0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <SystemInit+0xe0>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d40:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0U;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <SystemInit+0xe0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	651a      	str	r2, [r3, #80]	@ 0x50

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d48:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <SystemInit+0xdc>)
 8000d4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d4e:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

	/* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
	reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <SystemInit+0xec>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d58:	607b      	str	r3, [r7, #4]
	if ((reg_opsr == FLASH_OPSR_CODE_OP)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000d60:	d003      	beq.n	8000d6a <SystemInit+0x9e>
			|| (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1))) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d68:	d117      	bne.n	8000d9a <SystemInit+0xce>
		/* Check FLASH Option Control Register access */
		if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U) {
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <SystemInit+0xec>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <SystemInit+0xb6>
			/* Authorizes the Option Byte registers programming */
			FLASH->OPTKEYR = 0x08192A3BU;
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <SystemInit+0xec>)
 8000d78:	4a10      	ldr	r2, [pc, #64]	@ (8000dbc <SystemInit+0xf0>)
 8000d7a:	60da      	str	r2, [r3, #12]
			FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <SystemInit+0xec>)
 8000d7e:	4a10      	ldr	r2, [pc, #64]	@ (8000dc0 <SystemInit+0xf4>)
 8000d80:	60da      	str	r2, [r3, #12]
		}
		/* Launch the option bytes change operation */
		FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <SystemInit+0xec>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a0c      	ldr	r2, [pc, #48]	@ (8000db8 <SystemInit+0xec>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	61d3      	str	r3, [r2, #28]

		/* Lock the FLASH Option Control Register access */
		FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <SystemInit+0xec>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a09      	ldr	r2, [pc, #36]	@ (8000db8 <SystemInit+0xec>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	61d3      	str	r3, [r2, #28]
	}
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	44020c00 	.word	0x44020c00
 8000db0:	eae2eae3 	.word	0xeae2eae3
 8000db4:	01010280 	.word	0x01010280
 8000db8:	40022000 	.word	0x40022000
 8000dbc:	08192a3b 	.word	0x08192a3b
 8000dc0:	4c5d6e7f 	.word	0x4c5d6e7f

08000dc4 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 8000dcc:	23ff      	movs	r3, #255	@ 0xff
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 8000dd4:	e002      	b.n	8000ddc <uart_transmit_str+0x18>
  {
    length++;
 8000dd6:	89bb      	ldrh	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 8000ddc:	89bb      	ldrh	r3, [r7, #12]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f6      	bne.n	8000dd6 <uart_transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart5, data, length, UART_TIMEOUT))
 8000de8:	89ba      	ldrh	r2, [r7, #12]
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <uart_transmit_str+0x48>)
 8000df2:	f007 f9d9 	bl	80081a8 <HAL_UART_Transmit>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <uart_transmit_str+0x3c>
  {
    status = UART_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000044 	.word	0x20000044

08000e10 <calculate_crc>:
int circular_buffer_is_full(CircularBuffer *cb);
int circular_buffer_read_length(CircularBuffer *cb, uint8_t *dest, uint32_t length);
extern CircularBuffer uart_buffer;

/* CRC16 Calculation */
static uint16_t calculate_crc(const uint8_t *data, uint16_t length) {
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < length; i++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	81bb      	strh	r3, [r7, #12]
 8000e24:	e027      	b.n	8000e76 <calculate_crc+0x66>
		crc ^= (data[i] << 8);
 8000e26:	89bb      	ldrh	r3, [r7, #12]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e36:	4053      	eors	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	72fb      	strb	r3, [r7, #11]
 8000e40:	e013      	b.n	8000e6a <calculate_crc+0x5a>
			if (crc & 0x8000) {
 8000e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da09      	bge.n	8000e5e <calculate_crc+0x4e>
				crc = (crc << 1) ^ 0x1021;
 8000e4a:	89fb      	ldrh	r3, [r7, #14]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000e54:	f083 0301 	eor.w	r3, r3, #1
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	81fb      	strh	r3, [r7, #14]
 8000e5c:	e002      	b.n	8000e64 <calculate_crc+0x54>
			} else {
				crc <<= 1;
 8000e5e:	89fb      	ldrh	r3, [r7, #14]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++) {
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	3301      	adds	r3, #1
 8000e68:	72fb      	strb	r3, [r7, #11]
 8000e6a:	7afb      	ldrb	r3, [r7, #11]
 8000e6c:	2b07      	cmp	r3, #7
 8000e6e:	d9e8      	bls.n	8000e42 <calculate_crc+0x32>
	for (uint16_t i = 0; i < length; i++) {
 8000e70:	89bb      	ldrh	r3, [r7, #12]
 8000e72:	3301      	adds	r3, #1
 8000e74:	81bb      	strh	r3, [r7, #12]
 8000e76:	89ba      	ldrh	r2, [r7, #12]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d3d3      	bcc.n	8000e26 <calculate_crc+0x16>
			}
		}
	}
	return crc;
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <xmodem_receive_packet>:

/* Receive a single XMODEM packet */
static bool xmodem_receive_packet(UART_HandleTypeDef *huart, uint8_t *packet, uint8_t *packet_num) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
	uint8_t header[3];
	uint16_t crc_received, crc_calculated;

	/* Wait for SOH */
	circular_buffer_read_length(&uart_buffer, &header[0], 3);
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481a      	ldr	r0, [pc, #104]	@ (8000f0c <xmodem_receive_packet+0x80>)
 8000ea2:	f000 f8e9 	bl	8001078 <circular_buffer_read_length>
	if(header[0] != SOH){
 8000ea6:	7e3b      	ldrb	r3, [r7, #24]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d001      	beq.n	8000eb0 <xmodem_receive_packet+0x24>
		return false;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e029      	b.n	8000f04 <xmodem_receive_packet+0x78>
	}

	/* Read the packet data */
	if(circular_buffer_read_length(&uart_buffer, packet, 128) ){
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	4815      	ldr	r0, [pc, #84]	@ (8000f0c <xmodem_receive_packet+0x80>)
 8000eb6:	f000 f8df 	bl	8001078 <circular_buffer_read_length>
		// return false;
	}

	/* Read the CRC */
	uint8_t crc_bytes[2];
	if(circular_buffer_read_length(&uart_buffer, crc_bytes, 2)) {
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4812      	ldr	r0, [pc, #72]	@ (8000f0c <xmodem_receive_packet+0x80>)
 8000ec4:	f000 f8d8 	bl	8001078 <circular_buffer_read_length>
		//return false;
	}
	crc_received = (crc_bytes[0] << 8) | crc_bytes[1];
 8000ec8:	7d3b      	ldrb	r3, [r7, #20]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	7d7b      	ldrb	r3, [r7, #21]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	83fb      	strh	r3, [r7, #30]

	/* Verify packet number and CRC */
	crc_calculated = calculate_crc(packet, PACKET_SIZE);
 8000ed8:	2180      	movs	r1, #128	@ 0x80
 8000eda:	68b8      	ldr	r0, [r7, #8]
 8000edc:	f7ff ff98 	bl	8000e10 <calculate_crc>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	83bb      	strh	r3, [r7, #28]
	if ((header[1] != (uint8_t)(~header[2])) || crc_calculated != crc_received) {
 8000ee4:	7e7a      	ldrb	r2, [r7, #25]
 8000ee6:	7ebb      	ldrb	r3, [r7, #26]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d103      	bne.n	8000ef8 <xmodem_receive_packet+0x6c>
 8000ef0:	8bba      	ldrh	r2, [r7, #28]
 8000ef2:	8bfb      	ldrh	r3, [r7, #30]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d001      	beq.n	8000efc <xmodem_receive_packet+0x70>
		return false;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e003      	b.n	8000f04 <xmodem_receive_packet+0x78>
	}

	*packet_num = header[1];
 8000efc:	7e7a      	ldrb	r2, [r7, #25]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	701a      	strb	r2, [r3, #0]
	return true;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000dc 	.word	0x200000dc

08000f10 <xmodem_receive>:

/* XMODEM Receive Function */
bool xmodem_receive(UART_HandleTypeDef *huart) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0aa      	sub	sp, #168	@ 0xa8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = FLASH_APP_START_ADDRESS;
 8000f18:	4b53      	ldr	r3, [pc, #332]	@ (8001068 <xmodem_receive+0x158>)
 8000f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	uint8_t packet_num = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
	uint8_t packet[PACKET_SIZE];
	bool transfer_active = false;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	/* Check for EOT */
	uint8_t eot;


	uint8_t response = 'C';
 8000f2a:	2343      	movs	r3, #67	@ 0x43
 8000f2c:	76bb      	strb	r3, [r7, #26]
	HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 8000f2e:	f107 011a 	add.w	r1, r7, #26
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	2201      	movs	r2, #1
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f007 f935 	bl	80081a8 <HAL_UART_Transmit>
	transfer_active = true;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			break;
		}
	}
#endif

	while (transfer_active) {
 8000f44:	e086      	b.n	8001054 <xmodem_receive+0x144>
		/* Send NAK to start the transfer */
		//        uint8_t response = NAK;
		//        HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
		HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	@ 0x64
 8000f48:	f000 fa58 	bl	80013fc <HAL_Delay>
		/* Receive packets */
		if (xmodem_receive_packet(huart, packet, &packet_num)) {
 8000f4c:	f107 029e 	add.w	r2, r7, #158	@ 0x9e
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff98 	bl	8000e8c <xmodem_receive_packet>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d04a      	beq.n	8000ff8 <xmodem_receive+0xe8>
			/* Write the packet to flash */
			for (uint32_t i = 0; i < PACKET_SIZE; i += 16) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000f68:	e02d      	b.n	8000fc6 <xmodem_receive+0xb6>
				// Prepare 16 bytes of data for FLASH_TYPEPROGRAM_QUADWORD
				uint64_t quadword[2]; // 16 bytes (128 bits)
				quadword[0] = *(uint64_t *)(packet + i);       // First 8 bytes
 8000f6a:	f107 021c 	add.w	r2, r7, #28
 8000f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f72:	4413      	add	r3, r2
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	e9c7 2302 	strd	r2, r3, [r7, #8]
				quadword[1] = *(uint64_t *)(packet + i + 8);   // Next 8 bytes
 8000f7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f80:	3308      	adds	r3, #8
 8000f82:	f107 021c 	add.w	r2, r7, #28
 8000f86:	4413      	add	r3, r2
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	e9c7 2304 	strd	r2, r3, [r7, #16]

				// Ensure the flash address is 16-byte aligned
				if (flash_address % 16 != 0) {
 8000f90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000f94:	f003 030f 	and.w	r3, r3, #15
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d119      	bne.n	8000fd0 <xmodem_receive+0xc0>
					// Handle alignment error (optional)
					break;
				}

				// Write 16 bytes to flash
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, flash_address, (uint32_t)quadword) != HAL_OK) {
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f000 fc82 	bl	80018b0 <HAL_FLASH_Program>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d110      	bne.n	8000fd4 <xmodem_receive+0xc4>
					// Handle flash programming error
					break;
				}

				// Increment the address by 16 bytes for the next quadword
				flash_address += 16;
 8000fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000fb6:	3310      	adds	r3, #16
 8000fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			for (uint32_t i = 0; i < PACKET_SIZE; i += 16) {
 8000fbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000fc0:	3310      	adds	r3, #16
 8000fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fcc:	d9cd      	bls.n	8000f6a <xmodem_receive+0x5a>
 8000fce:	e002      	b.n	8000fd6 <xmodem_receive+0xc6>
					break;
 8000fd0:	bf00      	nop
 8000fd2:	e000      	b.n	8000fd6 <xmodem_receive+0xc6>
					break;
 8000fd4:	bf00      	nop
			}


			/* Send ACK */

			response = ACK;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	76bb      	strb	r3, [r7, #26]
			HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 8000fda:	f107 011a 	add.w	r1, r7, #26
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f007 f8df 	bl	80081a8 <HAL_UART_Transmit>
			packet_num++;
 8000fea:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8000ff6:	e015      	b.n	8001024 <xmodem_receive+0x114>

		} else {
			/* Send NAK for invalid packet */
			response = NAK;
 8000ff8:	2315      	movs	r3, #21
 8000ffa:	76bb      	strb	r3, [r7, #26]
			HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 8000ffc:	f107 011a 	add.w	r1, r7, #26
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	2201      	movs	r2, #1
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f007 f8ce 	bl	80081a8 <HAL_UART_Transmit>
			circular_buffer_read_length(&uart_buffer, &eot,1);
 800100c:	f107 031b 	add.w	r3, r7, #27
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	4815      	ldr	r0, [pc, #84]	@ (800106c <xmodem_receive+0x15c>)
 8001016:	f000 f82f 	bl	8001078 <circular_buffer_read_length>
			//            uart_transmit_str((uint8_t*)"\n\rSuccess.\n\r");
			//            uart_transmit_str((uint8_t*)"\n\rSuccess\n\r");
			if (eot != EOT)
 800101a:	7efb      	ldrb	r3, [r7, #27]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d001      	beq.n	8001024 <xmodem_receive+0x114>
				return false;
 8001020:	2300      	movs	r3, #0
 8001022:	e01d      	b.n	8001060 <xmodem_receive+0x150>
		}


		if (eot == EOT) {
 8001024:	7efb      	ldrb	r3, [r7, #27]
 8001026:	2b04      	cmp	r3, #4
 8001028:	d114      	bne.n	8001054 <xmodem_receive+0x144>
			/* Send ACK and exit transfer */
			response = ACK;
 800102a:	2306      	movs	r3, #6
 800102c:	76bb      	strb	r3, [r7, #26]
			HAL_UART_Transmit(huart, &response, 1, HAL_MAX_DELAY);
 800102e:	f107 011a 	add.w	r1, r7, #26
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2201      	movs	r2, #1
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f007 f8b5 	bl	80081a8 <HAL_UART_Transmit>
			(void)uart_transmit_str((uint8_t*)"\n\rFirmware updated!\n\r");
 800103e:	480c      	ldr	r0, [pc, #48]	@ (8001070 <xmodem_receive+0x160>)
 8001040:	f7ff fec0 	bl	8000dc4 <uart_transmit_str>
			(void)uart_transmit_str((uint8_t*)"Switch to Normal Mode...\n\r");
 8001044:	480b      	ldr	r0, [pc, #44]	@ (8001074 <xmodem_receive+0x164>)
 8001046:	f7ff febd 	bl	8000dc4 <uart_transmit_str>
//			(void)uart_transmit_str((uint8_t*)"Jumping to user application...\n\r");
//			flash_jump_to_app();
			transfer_active = false;
 800104a:	2300      	movs	r3, #0
 800104c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			while(1);
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <xmodem_receive+0x140>
	while (transfer_active) {
 8001054:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001058:	2b00      	cmp	r3, #0
 800105a:	f47f af74 	bne.w	8000f46 <xmodem_receive+0x36>
		}
	}

	return true;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	37a8      	adds	r7, #168	@ 0xa8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	0800c000 	.word	0x0800c000
 800106c:	200000dc 	.word	0x200000dc
 8001070:	0800a378 	.word	0x0800a378
 8001074:	0800a390 	.word	0x0800a390

08001078 <circular_buffer_read_length>:


int circular_buffer_read_length(CircularBuffer *cb, uint8_t *dest, uint32_t length) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	if (circular_buffer_is_empty(cb)) {
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f868 	bl	800115a <circular_buffer_is_empty>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <circular_buffer_read_length+0x1c>
		return false; // Buffer is empty
 8001090:	2300      	movs	r3, #0
 8001092:	e05e      	b.n	8001152 <circular_buffer_read_length+0xda>
	}

	// Calculate available data
	uint32_t available_data = cb->full ? BUFFER_SIZE : (cb->head >= cb->tail ? cb->head - cb->tail : BUFFER_SIZE - (cb->tail - cb->head));
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <circular_buffer_read_length+0x2c>
 800109e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a2:	e018      	b.n	80010d6 <circular_buffer_read_length+0x5e>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d307      	bcc.n	80010c4 <circular_buffer_read_length+0x4c>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	e008      	b.n	80010d6 <circular_buffer_read_length+0x5e>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80010d6:	617b      	str	r3, [r7, #20]
	if (length > available_data) {
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d901      	bls.n	80010e4 <circular_buffer_read_length+0x6c>
		return false; // Not enough data
 80010e0:	2300      	movs	r3, #0
 80010e2:	e036      	b.n	8001152 <circular_buffer_read_length+0xda>
	}

	// Determine the number of bytes until the end of the buffer
	uint32_t bytes_to_end = BUFFER_SIZE - cb->tail;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80010ea:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80010ee:	613b      	str	r3, [r7, #16]

	if (length <= bytes_to_end) {
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d80a      	bhi.n	800110e <circular_buffer_read_length+0x96>
		// All requested data is in a contiguous block
		memcpy(dest, &cb->data[cb->tail], length);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4619      	mov	r1, r3
 8001106:	68b8      	ldr	r0, [r7, #8]
 8001108:	f009 f854 	bl	800a1b4 <memcpy>
 800110c:	e013      	b.n	8001136 <circular_buffer_read_length+0xbe>
	} else {
		// Data wraps around, so split into two memcpy calls
		memcpy(dest, &cb->data[cb->tail], bytes_to_end);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4619      	mov	r1, r3
 800111c:	68b8      	ldr	r0, [r7, #8]
 800111e:	f009 f849 	bl	800a1b4 <memcpy>
		memcpy(dest + bytes_to_end, &cb->data[0], length - bytes_to_end);
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	18d0      	adds	r0, r2, r3
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	461a      	mov	r2, r3
 8001132:	f009 f83f 	bl	800a1b4 <memcpy>
	}

	// Advance the tail pointer
	cb->tail = (cb->tail + length) % BUFFER_SIZE;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

	// Clear the full flag
	cb->full = false;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

	return true;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <circular_buffer_is_empty>:

int circular_buffer_is_full(CircularBuffer *cb) {
	return cb->full;
}

int circular_buffer_is_empty(CircularBuffer *cb) {
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	return (cb->head == cb->tail && !cb->full);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800116e:	429a      	cmp	r2, r3
 8001170:	d109      	bne.n	8001186 <circular_buffer_is_empty+0x2c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8001178:	f083 0301 	eor.w	r3, r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <circular_buffer_is_empty+0x2c>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <circular_buffer_is_empty+0x2e>
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001194:	480d      	ldr	r0, [pc, #52]	@ (80011cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001196:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001198:	f7ff fd98 	bl	8000ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopForever+0xe>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopForever+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011c2:	f008 ffd3 	bl	800a16c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c6:	f7ff fa79 	bl	80006bc <main>

080011ca <LoopForever>:

LoopForever:
    b LoopForever
 80011ca:	e7fe      	b.n	80011ca <LoopForever>
  ldr   r0, =_estack
 80011cc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80011d8:	0800a3fc 	.word	0x0800a3fc
  ldr r2, =_sbss
 80011dc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80011e0:	200001ec 	.word	0x200001ec

080011e4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f9d6 	bl	800159e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80011f2:	f001 fdad 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 80011f6:	4602      	mov	r2, r0
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <HAL_Init+0x44>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	490b      	ldr	r1, [pc, #44]	@ (8001230 <HAL_Init+0x48>)
 8001202:	5ccb      	ldrb	r3, [r1, r3]
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <HAL_Init+0x4c>)
 800120a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800120c:	2004      	movs	r0, #4
 800120e:	f000 fa1b 	bl	8001648 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001212:	200f      	movs	r0, #15
 8001214:	f000 f85c 	bl	80012d0 <HAL_InitTick>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e002      	b.n	8001228 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001222:	f7ff fc70 	bl	8000b06 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	bd80      	pop	{r7, pc}
 800122c:	44020c00 	.word	0x44020c00
 8001230:	0800a3ac 	.word	0x0800a3ac
 8001234:	20000000 	.word	0x20000000

08001238 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800123c:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <HAL_DeInit+0x68>)
 800123e:	4a19      	ldr	r2, [pc, #100]	@ (80012a4 <HAL_DeInit+0x6c>)
 8001240:	675a      	str	r2, [r3, #116]	@ 0x74
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <HAL_DeInit+0x68>)
 8001244:	4a18      	ldr	r2, [pc, #96]	@ (80012a8 <HAL_DeInit+0x70>)
 8001246:	679a      	str	r2, [r3, #120]	@ 0x78
  __HAL_RCC_APB1_RELEASE_RESET();
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_DeInit+0x68>)
 800124a:	2200      	movs	r2, #0
 800124c:	675a      	str	r2, [r3, #116]	@ 0x74
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <HAL_DeInit+0x68>)
 8001250:	2200      	movs	r2, #0
 8001252:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_RCC_APB2_FORCE_RESET();
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_DeInit+0x68>)
 8001256:	4a15      	ldr	r2, [pc, #84]	@ (80012ac <HAL_DeInit+0x74>)
 8001258:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_APB2_RELEASE_RESET();
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_DeInit+0x68>)
 800125c:	2200      	movs	r2, #0
 800125e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_APB3_FORCE_RESET();
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_DeInit+0x68>)
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <HAL_DeInit+0x78>)
 8001264:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_APB3_RELEASE_RESET();
 8001268:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_DeInit+0x68>)
 800126a:	2200      	movs	r2, #0
 800126c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB1_FORCE_RESET();
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_DeInit+0x68>)
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <HAL_DeInit+0x7c>)
 8001274:	661a      	str	r2, [r3, #96]	@ 0x60
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_DeInit+0x68>)
 8001278:	2200      	movs	r2, #0
 800127a:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_RCC_AHB2_FORCE_RESET();
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_DeInit+0x68>)
 800127e:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <HAL_DeInit+0x80>)
 8001280:	665a      	str	r2, [r3, #100]	@ 0x64
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <HAL_DeInit+0x68>)
 8001284:	2200      	movs	r2, #0
 8001286:	665a      	str	r2, [r3, #100]	@ 0x64

#if defined(AHB4PERIPH_BASE)
  __HAL_RCC_AHB4_FORCE_RESET();
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_DeInit+0x68>)
 800128a:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <HAL_DeInit+0x84>)
 800128c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __HAL_RCC_AHB4_RELEASE_RESET();
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <HAL_DeInit+0x68>)
 8001290:	2200      	movs	r2, #0
 8001292:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif /* AHB4PERIPH_BASE */

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001294:	f000 f814 	bl	80012c0 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	44020c00 	.word	0x44020c00
 80012a4:	dffec1ff 	.word	0xdffec1ff
 80012a8:	4080062b 	.word	0x4080062b
 80012ac:	017f7800 	.word	0x017f7800
 80012b0:	001008e0 	.word	0x001008e0
 80012b4:	010ad003 	.word	0x010ad003
 80012b8:	001f1dff 	.word	0x001f1dff
 80012bc:	00111880 	.word	0x00111880

080012c0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80012dc:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <HAL_InitTick+0xdc>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e05c      	b.n	80013a2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <HAL_InitTick+0xe0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d10c      	bne.n	800130e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80012f4:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <HAL_InitTick+0xe4>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <HAL_InitTick+0xdc>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e037      	b.n	800137e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800130e:	f000 f9f3 	bl	80016f8 <HAL_SYSTICK_GetCLKSourceConfig>
 8001312:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d023      	beq.n	8001362 <HAL_InitTick+0x92>
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d82d      	bhi.n	800137c <HAL_InitTick+0xac>
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_InitTick+0x5e>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d00d      	beq.n	8001348 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800132c:	e026      	b.n	800137c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <HAL_InitTick+0xe4>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <HAL_InitTick+0xdc>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800133c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001340:	fbb2 f3f3 	udiv	r3, r2, r3
 8001344:	60fb      	str	r3, [r7, #12]
        break;
 8001346:	e01a      	b.n	800137e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_InitTick+0xdc>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	fbb3 f3f2 	udiv	r3, r3, r2
 8001356:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	60fb      	str	r3, [r7, #12]
        break;
 8001360:	e00d      	b.n	800137e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_InitTick+0xdc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001370:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	60fb      	str	r3, [r7, #12]
        break;
 800137a:	e000      	b.n	800137e <HAL_InitTick+0xae>
        break;
 800137c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f940 	bl	8001604 <HAL_SYSTICK_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e009      	b.n	80013a2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138e:	2200      	movs	r2, #0
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	f04f 30ff 	mov.w	r0, #4294967295
 8001396:	f000 f90d 	bl	80015b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800139a:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_InitTick+0xe8>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	e000e010 	.word	0xe000e010
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008
 80013e0:	200001e8 	.word	0x200001e8

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	200001e8 	.word	0x200001e8

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d005      	beq.n	8001422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_Delay+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001422:	bf00      	nop
 8001424:	f7ff ffde 	bl	80013e4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f7      	bhi.n	8001424 <HAL_Delay+0x28>
  {
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	@ (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	@ (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	@ 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff4c 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c2:	f7ff ff63 	bl	800148c <__NVIC_GetPriorityGrouping>
 80015c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	6978      	ldr	r0, [r7, #20]
 80015ce:	f7ff ffb3 	bl	8001538 <NVIC_EncodePriority>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff82 	bl	80014e4 <__NVIC_SetPriority>
}
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff56 	bl	80014a8 <__NVIC_EnableIRQ>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001614:	d301      	bcc.n	800161a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001616:	2301      	movs	r3, #1
 8001618:	e00d      	b.n	8001636 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <HAL_SYSTICK_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <HAL_SYSTICK_Config+0x40>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_SYSTICK_Config+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <HAL_SYSTICK_Config+0x40>)
 800162e:	f043 0303 	orr.w	r3, r3, #3
 8001632:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b04      	cmp	r3, #4
 8001654:	d844      	bhi.n	80016e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001656:	a201      	add	r2, pc, #4	@ (adr r2, 800165c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	0800167f 	.word	0x0800167f
 8001660:	0800169d 	.word	0x0800169d
 8001664:	080016bf 	.word	0x080016bf
 8001668:	080016e1 	.word	0x080016e1
 800166c:	08001671 	.word	0x08001671
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001670:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1e      	ldr	r2, [pc, #120]	@ (80016f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6013      	str	r3, [r2, #0]
      break;
 800167c:	e031      	b.n	80016e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1b      	ldr	r2, [pc, #108]	@ (80016f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800168a:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800168c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001690:	4a18      	ldr	r2, [pc, #96]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001692:	f023 030c 	bic.w	r3, r3, #12
 8001696:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800169a:	e022      	b.n	80016e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a13      	ldr	r2, [pc, #76]	@ (80016f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80016ae:	f023 030c 	bic.w	r3, r3, #12
 80016b2:	4a10      	ldr	r2, [pc, #64]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80016bc:	e011      	b.n	80016e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80016ca:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80016d0:	f023 030c 	bic.w	r3, r3, #12
 80016d4:	4a07      	ldr	r2, [pc, #28]	@ (80016f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80016de:	e000      	b.n	80016e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80016e0:	bf00      	nop
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010
 80016f4:	44020c00 	.word	0x44020c00

080016f8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800170a:	2304      	movs	r3, #4
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	e01e      	b.n	800174e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001712:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b08      	cmp	r3, #8
 8001720:	d00f      	beq.n	8001742 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d80f      	bhi.n	8001748 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d003      	beq.n	800173c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001734:	e008      	b.n	8001748 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
        break;
 800173a:	e008      	b.n	800174e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800173c:	2301      	movs	r3, #1
 800173e:	607b      	str	r3, [r7, #4]
        break;
 8001740:	e005      	b.n	800174e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001742:	2302      	movs	r3, #2
 8001744:	607b      	str	r3, [r7, #4]
        break;
 8001746:	e002      	b.n	800174e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
        break;
 800174c:	bf00      	nop
    }
  }
  return systick_source;
 800174e:	687b      	ldr	r3, [r7, #4]
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e010 	.word	0xe000e010
 8001760:	44020c00 	.word	0x44020c00

08001764 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800176c:	f7ff fe3a 	bl	80013e4 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e06b      	b.n	8001854 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d008      	beq.n	800179a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2220      	movs	r2, #32
 800178c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e05c      	b.n	8001854 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0204 	orr.w	r2, r2, #4
 80017a8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2205      	movs	r2, #5
 80017ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80017b2:	e020      	b.n	80017f6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80017b4:	f7ff fe16 	bl	80013e4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d919      	bls.n	80017f6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f043 0210 	orr.w	r2, r3, #16
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e6:	2201      	movs	r2, #1
 80017e8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e02e      	b.n	8001854 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0d7      	beq.n	80017b4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0202 	orr.w	r2, r2, #2
 8001812:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2204      	movs	r2, #4
 8001818:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001824:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800183e:	2201      	movs	r2, #1
 8001840:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e019      	b.n	80018a2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d004      	beq.n	8001884 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2220      	movs	r2, #32
 800187e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e00e      	b.n	80018a2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2204      	movs	r2, #4
 8001888:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018bc:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <HAL_FLASH_Program+0xe0>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_FLASH_Program+0x18>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e05e      	b.n	8001986 <HAL_FLASH_Program+0xd6>
 80018c8:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <HAL_FLASH_Program+0xe0>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
  HAL_FLASH_Unlock();
 80018ce:	f000 f86b 	bl	80019a8 <HAL_FLASH_Unlock>
  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <HAL_FLASH_Program+0xe0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018dc:	f000 f8a6 	bl	8001a2c <FLASH_WaitForLastOperation>
 80018e0:	4603      	mov	r3, r0
 80018e2:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 80018e4:	7ffb      	ldrb	r3, [r7, #31]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d147      	bne.n	800197a <HAL_FLASH_Program+0xca>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 80018ea:	4a29      	ldr	r2, [pc, #164]	@ (8001990 <HAL_FLASH_Program+0xe0>)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80018f0:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <HAL_FLASH_Program+0xe4>)
 80018f2:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d104      	bne.n	8001908 <HAL_FLASH_Program+0x58>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	68b8      	ldr	r0, [r7, #8]
 8001902:	f000 f8e1 	bl	8001ac8 <FLASH_Program_QuadWord>
 8001906:	e01b      	b.n	8001940 <HAL_FLASH_Program+0x90>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a23      	ldr	r2, [pc, #140]	@ (8001998 <HAL_FLASH_Program+0xe8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d003      	beq.n	8001918 <HAL_FLASH_Program+0x68>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4a22      	ldr	r2, [pc, #136]	@ (800199c <HAL_FLASH_Program+0xec>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d104      	bne.n	8001922 <HAL_FLASH_Program+0x72>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f000 f954 	bl	8001bc8 <FLASH_Program_QuadWord_OBK>
 8001920:	e00e      	b.n	8001940 <HAL_FLASH_Program+0x90>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001928:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <HAL_FLASH_Program+0xf0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d104      	bne.n	8001938 <HAL_FLASH_Program+0x88>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f000 f995 	bl	8001c60 <FLASH_Program_HalfWord>
 8001936:	e003      	b.n	8001940 <HAL_FLASH_Program+0x90>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	68b8      	ldr	r0, [r7, #8]
 800193c:	f000 f990 	bl	8001c60 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001940:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001944:	f000 f872 	bl	8001a2c <FLASH_WaitForLastOperation>
 8001948:	4603      	mov	r3, r0
 800194a:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f023 4330 	bic.w	r3, r3, #2952790016	@ 0xb0000000
 8001956:	f023 0304 	bic.w	r3, r3, #4
 800195a:	43db      	mvns	r3, r3
 800195c:	401a      	ands	r2, r3
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <HAL_FLASH_Program+0xec>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d107      	bne.n	800197a <HAL_FLASH_Program+0xca>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_FLASH_Program+0xf4>)
 800196c:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 0204 	bic.w	r2, r3, #4
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_FLASH_Program+0xe0>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
  HAL_FLASH_Lock();
 8001980:	f000 f838 	bl	80019f4 <HAL_FLASH_Lock>
  /* return status */
  return status;
 8001984:	7ffb      	ldrb	r3, [r7, #31]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000000c 	.word	0x2000000c
 8001994:	40022028 	.word	0x40022028
 8001998:	10000002 	.word	0x10000002
 800199c:	10000006 	.word	0x10000006
 80019a0:	40000002 	.word	0x40000002
 80019a4:	40022040 	.word	0x40022040

080019a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <HAL_FLASH_Unlock+0x40>)
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00d      	beq.n	80019da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_FLASH_Unlock+0x40>)
 80019c0:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_FLASH_Unlock+0x44>)
 80019c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <HAL_FLASH_Unlock+0x40>)
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <HAL_FLASH_Unlock+0x48>)
 80019c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <HAL_FLASH_Unlock+0x40>)
 80019cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 80019da:	79fb      	ldrb	r3, [r7, #7]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40022000 	.word	0x40022000
 80019ec:	45670123 	.word	0x45670123
 80019f0:	cdef89ab 	.word	0xcdef89ab

080019f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_FLASH_Lock+0x34>)
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <HAL_FLASH_Lock+0x34>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <HAL_FLASH_Lock+0x34>)
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40022000 	.word	0x40022000

08001a2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff fcd6 	bl	80013e4 <HAL_GetTick>
 8001a38:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8001a3a:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <FLASH_WaitForLastOperation+0x90>)
 8001a3c:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8001a3e:	e010      	b.n	8001a62 <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a46:	d00c      	beq.n	8001a62 <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a48:	f7ff fccc 	bl	80013e4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d302      	bcc.n	8001a5e <FLASH_WaitForLastOperation+0x32>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e027      	b.n	8001ab2 <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 030b 	and.w	r3, r3, #11
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1e8      	bne.n	8001a40 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 8001a6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <FLASH_WaitForLastOperation+0x94>)
 8001a70:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 037e 	and.w	r3, r3, #16646144	@ 0xfe0000
 8001a7a:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00c      	beq.n	8001a9c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <FLASH_WaitForLastOperation+0x98>)
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac4 <FLASH_WaitForLastOperation+0x98>)
 8001a8c:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f403 027e 	and.w	r2, r3, #16646144	@ 0xfe0000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00a      	b.n	8001ab2 <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aae:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022020 	.word	0x40022020
 8001ac0:	40022030 	.word	0x40022030
 8001ac4:	2000000c 	.word	0x2000000c

08001ac8 <FLASH_Program_QuadWord>:
  * @brief  Program a quad-word (128-bit) at a specified address.
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    uint8_t index = 4;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	623b      	str	r3, [r7, #32]
    uint32_t *src_addr  = (uint32_t *)DataAddress;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	61fb      	str	r3, [r7, #28]
    uint32_t primask_bit;
    __IO uint32_t *reg_cr;

    /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001ae0:	4b37      	ldr	r3, [pc, #220]	@ (8001bc0 <FLASH_Program_QuadWord+0xf8>)
 8001ae2:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    /* Validate FlashAddress and DataAddress */
    if ((FlashAddress % 16) != 0 ) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d15f      	bne.n	8001bae <FLASH_Program_QuadWord+0xe6>
//        printf("Error: Address is not 16-byte aligned. FlashAddress: 0x%08X, DataAddress: 0x%08X\n", FlashAddress, DataAddress);
        return;
    }

    if (FlashAddress < FLASH_BASE || FlashAddress >= (FLASH_BASE + FLASH_SIZE)) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001af4:	d35d      	bcc.n	8001bb2 <FLASH_Program_QuadWord+0xea>
 8001af6:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <FLASH_Program_QuadWord+0xfc>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00c      	beq.n	8001b1c <FLASH_Program_QuadWord+0x54>
 8001b02:	4b30      	ldr	r3, [pc, #192]	@ (8001bc4 <FLASH_Program_QuadWord+0xfc>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <FLASH_Program_QuadWord+0x4e>
 8001b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc4 <FLASH_Program_QuadWord+0xfc>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	029b      	lsls	r3, r3, #10
 8001b10:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001b14:	e004      	b.n	8001b20 <FLASH_Program_QuadWord+0x58>
 8001b16:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 8001b1a:	e001      	b.n	8001b20 <FLASH_Program_QuadWord+0x58>
 8001b1c:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d945      	bls.n	8001bb2 <FLASH_Program_QuadWord+0xea>
//        printf("Error: FlashAddress is out of range: 0x%08X\n", FlashAddress);
        return;
    }

    /* Ensure flash is ready */
    if (FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE) != HAL_OK) {
 8001b26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b2a:	f7ff ff7f 	bl	8001a2c <FLASH_WaitForLastOperation>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d140      	bne.n	8001bb6 <FLASH_Program_QuadWord+0xee>
//        printf("Error: Flash is busy or timeout occurred.\n");
        return;
    }

    /* Clear and set PG bit */
    if (READ_BIT((*reg_cr), FLASH_CR_PG)) {
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <FLASH_Program_QuadWord+0x84>
        CLEAR_BIT((*reg_cr), FLASH_CR_PG);
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 0202 	bic.w	r2, r3, #2
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	601a      	str	r2, [r3, #0]
    }
    SET_BIT((*reg_cr), FLASH_CR_PG);
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f043 0202 	orr.w	r2, r3, #2
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b58:	f3ef 8310 	mrs	r3, PRIMASK
 8001b5c:	613b      	str	r3, [r7, #16]
  return(result);
 8001b5e:	693b      	ldr	r3, [r7, #16]

    /* Enter critical section */
    primask_bit = __get_PRIMASK();
 8001b60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b62:	b672      	cpsid	i
}
 8001b64:	bf00      	nop
    __disable_irq();

    /* Program the quad-word */
    do {
        *dest_addr = *src_addr;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	3304      	adds	r3, #4
 8001b72:	623b      	str	r3, [r7, #32]
        src_addr++;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	3304      	adds	r3, #4
 8001b78:	61fb      	str	r3, [r7, #28]
        index--;
 8001b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    } while (index != 0U);
 8001b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ec      	bne.n	8001b66 <FLASH_Program_QuadWord+0x9e>
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f383 8810 	msr	PRIMASK, r3
}
 8001b96:	bf00      	nop

    /* Exit critical section */
    __set_PRIMASK(primask_bit);

    /* Wait for last operation to complete */
    if (FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE) != HAL_OK) {
 8001b98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b9c:	f7ff ff46 	bl	8001a2c <FLASH_WaitForLastOperation>
//        printf("Error: Flash programming failed during post-operation.\n");
    }

    /* Clear PG bit */
    CLEAR_BIT((*reg_cr), FLASH_CR_PG);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 0202 	bic.w	r2, r3, #2
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e004      	b.n	8001bb8 <FLASH_Program_QuadWord+0xf0>
        return;
 8001bae:	bf00      	nop
 8001bb0:	e002      	b.n	8001bb8 <FLASH_Program_QuadWord+0xf0>
        return;
 8001bb2:	bf00      	nop
 8001bb4:	e000      	b.n	8001bb8 <FLASH_Program_QuadWord+0xf0>
        return;
 8001bb6:	bf00      	nop
}
 8001bb8:	3728      	adds	r7, #40	@ 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022028 	.word	0x40022028
 8001bc4:	08fff80c 	.word	0x08fff80c

08001bc8 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	@ 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001be0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c54 <FLASH_Program_QuadWord_OBK+0x8c>)
 8001be2:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8001be4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <FLASH_Program_QuadWord_OBK+0x90>)
 8001be6:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f043 0202 	orr.w	r2, r3, #2
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <FLASH_Program_QuadWord_OBK+0x94>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	431a      	orrs	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c06:	f3ef 8310 	mrs	r3, PRIMASK
 8001c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c0c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	623b      	str	r3, [r7, #32]
    src_addr++;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	61fb      	str	r3, [r7, #28]
    index--;
 8001c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 8001c32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ec      	bne.n	8001c14 <FLASH_Program_QuadWord_OBK+0x4c>
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f383 8810 	msr	PRIMASK, r3
}
 8001c44:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001c46:	bf00      	nop
 8001c48:	372c      	adds	r7, #44	@ 0x2c
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40022028 	.word	0x40022028
 8001c58:	40022040 	.word	0x40022040
 8001c5c:	2000000c 	.word	0x2000000c

08001c60 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <FLASH_Program_HalfWord+0x30>)
 8001c6c:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f043 0202 	orr.w	r2, r3, #2
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8812      	ldrh	r2, [r2, #0]
 8001c80:	b292      	uxth	r2, r2
 8001c82:	801a      	strh	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40022028 	.word	0x40022028

08001c94 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d88 <HAL_FLASHEx_Erase+0xf4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_FLASHEx_Erase+0x16>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e06a      	b.n	8001d80 <HAL_FLASHEx_Erase+0xec>
 8001caa:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <HAL_FLASHEx_Erase+0xf4>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cb0:	4b35      	ldr	r3, [pc, #212]	@ (8001d88 <HAL_FLASHEx_Erase+0xf4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001cb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cba:	f7ff feb7 	bl	8001a2c <FLASH_WaitForLastOperation>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d157      	bne.n	8001d78 <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8001d88 <HAL_FLASHEx_Erase+0xf4>)
 8001cce:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d8c <HAL_FLASHEx_Erase+0xf8>)
 8001cd2:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cdc:	f248 0208 	movw	r2, #32776	@ 0x8008
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10b      	bne.n	8001cfc <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f853 	bl	8001d94 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001cee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cf2:	f7ff fe9b 	bl	8001a2c <FLASH_WaitForLastOperation>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	75fb      	strb	r3, [r7, #23]
 8001cfa:	e033      	b.n	8001d64 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <HAL_FLASHEx_Erase+0xfc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d108      	bne.n	8001d18 <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8001d06:	f000 f8b5 	bl	8001e74 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d0e:	f7ff fe8d 	bl	8001a2c <FLASH_WaitForLastOperation>
 8001d12:	4603      	mov	r3, r0
 8001d14:	75fb      	strb	r3, [r7, #23]
 8001d16:	e025      	b.n	8001d64 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	e015      	b.n	8001d54 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6938      	ldr	r0, [r7, #16]
 8001d30:	f000 f868 	bl	8001e04 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001d34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d38:	f7ff fe78 	bl	8001a2c <FLASH_WaitForLastOperation>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	601a      	str	r2, [r3, #0]
          break;
 8001d4c:	e00a      	b.n	8001d64 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	3301      	adds	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3e1      	bcc.n	8001d28 <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d70:	43db      	mvns	r3, r3
 8001d72:	401a      	ands	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_FLASHEx_Erase+0xf4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]

  return status;
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000000c 	.word	0x2000000c
 8001d8c:	40022028 	.word	0x40022028
 8001d90:	80000008 	.word	0x80000008

08001d94 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001d9c:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <FLASH_MassErase+0x6c>)
 8001d9e:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d108      	bne.n	8001dbc <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db2:	f043 0320 	orr.w	r3, r3, #32
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8001dba:	e01b      	b.n	8001df4 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dce:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001dd2:	f043 0228 	orr.w	r2, r3, #40	@ 0x28
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001dec:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40022028 	.word	0x40022028

08001e04 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <FLASH_Erase_Sector+0x6c>)
 8001e10:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d011      	beq.n	8001e40 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e24:	f423 53fe 	bic.w	r3, r3, #8128	@ 0x1fc0
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	019b      	lsls	r3, r3, #6
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f043 0224 	orr.w	r2, r3, #36	@ 0x24
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8001e3e:	e010      	b.n	8001e62 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f423 52fe 	bic.w	r2, r3, #8128	@ 0x1fc0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	019b      	lsls	r3, r3, #6
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e5a:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	6013      	str	r3, [r2, #0]
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40022028 	.word	0x40022028

08001e74 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <FLASH_OBKErase+0x24>)
 8001e7c:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f043 0208 	orr.w	r2, r3, #8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40022040 	.word	0x40022040

08001e9c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001eaa:	e136      	b.n	800211a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8128 	beq.w	8002114 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x38>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b12      	cmp	r3, #18
 8001ed2:	d125      	bne.n	8001f20 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 020f 	and.w	r2, r3, #15
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	6979      	ldr	r1, [r7, #20]
 8001f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d00b      	beq.n	8001f74 <HAL_GPIO_Init+0xd8>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d007      	beq.n	8001f74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f68:	2b11      	cmp	r3, #17
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b12      	cmp	r3, #18
 8001f72:	d130      	bne.n	8001fd6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001faa:	2201      	movs	r2, #1
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f003 0201 	and.w	r2, r3, #1
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d017      	beq.n	800200e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d07c      	beq.n	8002114 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800201a:	4a47      	ldr	r2, [pc, #284]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3318      	adds	r3, #24
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4013      	ands	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0a9a      	lsrs	r2, r3, #10
 8002042:	4b3e      	ldr	r3, [pc, #248]	@ (800213c <HAL_GPIO_Init+0x2a0>)
 8002044:	4013      	ands	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	f002 0203 	and.w	r2, r2, #3
 800204c:	00d2      	lsls	r2, r2, #3
 800204e:	4093      	lsls	r3, r2
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002056:	4938      	ldr	r1, [pc, #224]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3318      	adds	r3, #24
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002064:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002088:	4a2b      	ldr	r2, [pc, #172]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800208e:	4b2a      	ldr	r3, [pc, #168]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4013      	ands	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80020b2:	4a21      	ldr	r2, [pc, #132]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80020b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 80020ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4013      	ands	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80020de:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80020e6:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 80020e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800210c:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	3301      	adds	r3, #1
 8002118:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	f47f aec1 	bne.w	8001eac <HAL_GPIO_Init+0x10>
  }
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	44022000 	.word	0x44022000
 800213c:	002f7f7f 	.word	0x002f7f7f

08002140 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e001      	b.n	8002162 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	f000 bc28 	b.w	80029d4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002184:	4b94      	ldr	r3, [pc, #592]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f003 0318 	and.w	r3, r3, #24
 800218c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800218e:	4b92      	ldr	r3, [pc, #584]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d05b      	beq.n	800225c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x46>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2b18      	cmp	r3, #24
 80021ae:	d114      	bne.n	80021da <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d111      	bne.n	80021da <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f000 bc08 	b.w	80029d4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80021c4:	4b84      	ldr	r3, [pc, #528]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	4981      	ldr	r1, [pc, #516]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80021d8:	e040      	b.n	800225c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d023      	beq.n	800222a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021e2:	4b7d      	ldr	r3, [pc, #500]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7c      	ldr	r2, [pc, #496]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7ff f8f9 	bl	80013e4 <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80021f6:	f7ff f8f5 	bl	80013e4 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e3e5      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002208:	4b73      	ldr	r3, [pc, #460]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002214:	4b70      	ldr	r3, [pc, #448]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	496d      	ldr	r1, [pc, #436]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002224:	4313      	orrs	r3, r2
 8002226:	618b      	str	r3, [r1, #24]
 8002228:	e018      	b.n	800225c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800222a:	4b6b      	ldr	r3, [pc, #428]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6a      	ldr	r2, [pc, #424]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7ff f8d5 	bl	80013e4 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800223e:	f7ff f8d1 	bl	80013e4 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e3c1      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002250:	4b61      	ldr	r3, [pc, #388]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a0 	beq.w	80023aa <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	2b10      	cmp	r3, #16
 800226e:	d005      	beq.n	800227c <HAL_RCC_OscConfig+0x10c>
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b18      	cmp	r3, #24
 8002274:	d109      	bne.n	800228a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8092 	bne.w	80023aa <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e3a4      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x132>
 8002294:	4b50      	ldr	r3, [pc, #320]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a4f      	ldr	r2, [pc, #316]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e058      	b.n	8002354 <HAL_RCC_OscConfig+0x1e4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d112      	bne.n	80022d0 <HAL_RCC_OscConfig+0x160>
 80022aa:	4b4b      	ldr	r3, [pc, #300]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a4a      	ldr	r2, [pc, #296]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b48      	ldr	r3, [pc, #288]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a47      	ldr	r2, [pc, #284]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b45      	ldr	r3, [pc, #276]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a44      	ldr	r2, [pc, #272]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e041      	b.n	8002354 <HAL_RCC_OscConfig+0x1e4>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d8:	d112      	bne.n	8002300 <HAL_RCC_OscConfig+0x190>
 80022da:	4b3f      	ldr	r3, [pc, #252]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a3e      	ldr	r2, [pc, #248]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b3c      	ldr	r3, [pc, #240]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a3b      	ldr	r2, [pc, #236]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b39      	ldr	r3, [pc, #228]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a38      	ldr	r2, [pc, #224]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e029      	b.n	8002354 <HAL_RCC_OscConfig+0x1e4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002308:	d112      	bne.n	8002330 <HAL_RCC_OscConfig+0x1c0>
 800230a:	4b33      	ldr	r3, [pc, #204]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a32      	ldr	r2, [pc, #200]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b30      	ldr	r3, [pc, #192]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2f      	ldr	r2, [pc, #188]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 800231c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2c      	ldr	r2, [pc, #176]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e011      	b.n	8002354 <HAL_RCC_OscConfig+0x1e4>
 8002330:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a28      	ldr	r2, [pc, #160]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a25      	ldr	r2, [pc, #148]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 800234e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff f842 	bl	80013e4 <HAL_GetTick>
 8002360:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002364:	f7ff f83e 	bl	80013e4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	@ 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e32e      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x1f4>
 8002382:	e012      	b.n	80023aa <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff f82e 	bl	80013e4 <HAL_GetTick>
 8002388:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800238c:	f7ff f82a 	bl	80013e4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	@ 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e31a      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <HAL_RCC_OscConfig+0x268>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 809a 	beq.w	80024ec <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x25a>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	2b18      	cmp	r3, #24
 80023c2:	d149      	bne.n	8002458 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d146      	bne.n	8002458 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d104      	bne.n	80023dc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e2fe      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
 80023d6:	bf00      	nop
 80023d8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11c      	bne.n	800241c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80023e2:	4b9a      	ldr	r3, [pc, #616]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0218 	and.w	r2, r3, #24
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d014      	beq.n	800241c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80023f2:	4b96      	ldr	r3, [pc, #600]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0218 	bic.w	r2, r3, #24
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	4993      	ldr	r1, [pc, #588]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002404:	f000 fdd0 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002408:	4b91      	ldr	r3, [pc, #580]	@ (8002650 <HAL_RCC_OscConfig+0x4e0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe ff5f 	bl	80012d0 <HAL_InitTick>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e2db      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe ffe2 	bl	80013e4 <HAL_GetTick>
 8002420:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002424:	f7fe ffde 	bl	80013e4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e2ce      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002436:	4b85      	ldr	r3, [pc, #532]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002442:	4b82      	ldr	r3, [pc, #520]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	497e      	ldr	r1, [pc, #504]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002456:	e049      	b.n	80024ec <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02c      	beq.n	80024ba <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002460:	4b7a      	ldr	r3, [pc, #488]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 0218 	bic.w	r2, r3, #24
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	4977      	ldr	r1, [pc, #476]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002472:	4b76      	ldr	r3, [pc, #472]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a75      	ldr	r2, [pc, #468]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe ffb1 	bl	80013e4 <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002486:	f7fe ffad 	bl	80013e4 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e29d      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002498:	4b6c      	ldr	r3, [pc, #432]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80024a4:	4b69      	ldr	r3, [pc, #420]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	4966      	ldr	r1, [pc, #408]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	610b      	str	r3, [r1, #16]
 80024b8:	e018      	b.n	80024ec <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ba:	4b64      	ldr	r3, [pc, #400]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a63      	ldr	r2, [pc, #396]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe ff8d 	bl	80013e4 <HAL_GetTick>
 80024ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80024ce:	f7fe ff89 	bl	80013e4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e279      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e0:	4b5a      	ldr	r3, [pc, #360]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d03c      	beq.n	8002572 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002500:	4b52      	ldr	r3, [pc, #328]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002506:	4a51      	ldr	r2, [pc, #324]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002508:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800250c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7fe ff68 	bl	80013e4 <HAL_GetTick>
 8002514:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002518:	f7fe ff64 	bl	80013e4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e254      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800252a:	4b48      	ldr	r3, [pc, #288]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 800252c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <HAL_RCC_OscConfig+0x3a8>
 8002538:	e01b      	b.n	8002572 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253a:	4b44      	ldr	r3, [pc, #272]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 800253c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002540:	4a42      	ldr	r2, [pc, #264]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002542:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002546:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fe ff4b 	bl	80013e4 <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002552:	f7fe ff47 	bl	80013e4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e237      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002564:	4b39      	ldr	r3, [pc, #228]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800256a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ef      	bne.n	8002552 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80d2 	beq.w	8002724 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002580:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_RCC_OscConfig+0x4e4>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d118      	bne.n	80025be <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800258c:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <HAL_RCC_OscConfig+0x4e4>)
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	4a30      	ldr	r2, [pc, #192]	@ (8002654 <HAL_RCC_OscConfig+0x4e4>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002598:	f7fe ff24 	bl	80013e4 <HAL_GetTick>
 800259c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a0:	f7fe ff20 	bl	80013e4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e210      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80025b2:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <HAL_RCC_OscConfig+0x4e4>)
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_RCC_OscConfig+0x468>
 80025c6:	4b21      	ldr	r3, [pc, #132]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80025c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025cc:	4a1f      	ldr	r2, [pc, #124]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025d6:	e074      	b.n	80026c2 <HAL_RCC_OscConfig+0x552>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d118      	bne.n	8002612 <HAL_RCC_OscConfig+0x4a2>
 80025e0:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80025e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e6:	4a19      	ldr	r2, [pc, #100]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025f0:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80025f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f6:	4a15      	ldr	r2, [pc, #84]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 80025f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002606:	4a11      	ldr	r2, [pc, #68]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002610:	e057      	b.n	80026c2 <HAL_RCC_OscConfig+0x552>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b05      	cmp	r3, #5
 8002618:	d11e      	bne.n	8002658 <HAL_RCC_OscConfig+0x4e8>
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 800261c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002620:	4a0a      	ldr	r2, [pc, #40]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 800262c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002630:	4a06      	ldr	r2, [pc, #24]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002636:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800263a:	4b04      	ldr	r3, [pc, #16]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 800263c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002640:	4a02      	ldr	r2, [pc, #8]	@ (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800264a:	e03a      	b.n	80026c2 <HAL_RCC_OscConfig+0x552>
 800264c:	44020c00 	.word	0x44020c00
 8002650:	20000004 	.word	0x20000004
 8002654:	44020800 	.word	0x44020800
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b85      	cmp	r3, #133	@ 0x85
 800265e:	d118      	bne.n	8002692 <HAL_RCC_OscConfig+0x522>
 8002660:	4ba2      	ldr	r3, [pc, #648]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002666:	4aa1      	ldr	r2, [pc, #644]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002670:	4b9e      	ldr	r3, [pc, #632]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002676:	4a9d      	ldr	r2, [pc, #628]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002680:	4b9a      	ldr	r3, [pc, #616]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002686:	4a99      	ldr	r2, [pc, #612]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002690:	e017      	b.n	80026c2 <HAL_RCC_OscConfig+0x552>
 8002692:	4b96      	ldr	r3, [pc, #600]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002698:	4a94      	ldr	r2, [pc, #592]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026a2:	4b92      	ldr	r3, [pc, #584]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80026a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026a8:	4a90      	ldr	r2, [pc, #576]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026b2:	4b8e      	ldr	r3, [pc, #568]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80026b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026b8:	4a8c      	ldr	r2, [pc, #560]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80026ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7fe fe8b 	bl	80013e4 <HAL_GetTick>
 80026ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe fe87 	bl	80013e4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e175      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e8:	4b80      	ldr	r3, [pc, #512]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80026ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ed      	beq.n	80026d2 <HAL_RCC_OscConfig+0x562>
 80026f6:	e015      	b.n	8002724 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fe fe74 	bl	80013e4 <HAL_GetTick>
 80026fc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe fe70 	bl	80013e4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e15e      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002716:	4b75      	ldr	r3, [pc, #468]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ed      	bne.n	8002700 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d036      	beq.n	800279e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d019      	beq.n	800276c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002738:	4b6c      	ldr	r3, [pc, #432]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6b      	ldr	r2, [pc, #428]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 800273e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002742:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fe4e 	bl	80013e4 <HAL_GetTick>
 8002748:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800274c:	f7fe fe4a 	bl	80013e4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e13a      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800275e:	4b63      	ldr	r3, [pc, #396]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x5dc>
 800276a:	e018      	b.n	800279e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800276c:	4b5f      	ldr	r3, [pc, #380]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5e      	ldr	r2, [pc, #376]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002776:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe fe34 	bl	80013e4 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002780:	f7fe fe30 	bl	80013e4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e120      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002792:	4b56      	ldr	r3, [pc, #344]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8115 	beq.w	80029d2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b18      	cmp	r3, #24
 80027ac:	f000 80af 	beq.w	800290e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	f040 8086 	bne.w	80028c6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80027ba:	4b4c      	ldr	r3, [pc, #304]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a4b      	ldr	r2, [pc, #300]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80027c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fe0d 	bl	80013e4 <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80027ce:	f7fe fe09 	bl	80013e4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0f9      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027e0:	4b42      	ldr	r3, [pc, #264]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80027ec:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80027f4:	f023 0303 	bic.w	r3, r3, #3
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002800:	0212      	lsls	r2, r2, #8
 8002802:	430a      	orrs	r2, r1
 8002804:	4939      	ldr	r1, [pc, #228]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	628b      	str	r3, [r1, #40]	@ 0x28
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280e:	3b01      	subs	r3, #1
 8002810:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002818:	3b01      	subs	r3, #1
 800281a:	025b      	lsls	r3, r3, #9
 800281c:	b29b      	uxth	r3, r3
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002824:	3b01      	subs	r3, #1
 8002826:	041b      	lsls	r3, r3, #16
 8002828:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	3b01      	subs	r3, #1
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800283a:	492c      	ldr	r1, [pc, #176]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002840:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	4a29      	ldr	r2, [pc, #164]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002846:	f023 0310 	bic.w	r3, r3, #16
 800284a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002850:	4a26      	ldr	r2, [pc, #152]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002856:	4b25      	ldr	r3, [pc, #148]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	4a24      	ldr	r2, [pc, #144]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 800285c:	f043 0310 	orr.w	r3, r3, #16
 8002860:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002862:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	f023 020c 	bic.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	491f      	ldr	r1, [pc, #124]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002870:	4313      	orrs	r3, r2
 8002872:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002874:	4b1d      	ldr	r3, [pc, #116]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	f023 0220 	bic.w	r2, r3, #32
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002880:	491a      	ldr	r1, [pc, #104]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002882:	4313      	orrs	r3, r2
 8002884:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002886:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	4a18      	ldr	r2, [pc, #96]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002892:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 8002898:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800289c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fda1 	bl	80013e4 <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80028a6:	f7fe fd9d 	bl	80013e4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e08d      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x736>
 80028c4:	e085      	b.n	80029d2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80028c6:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a08      	ldr	r2, [pc, #32]	@ (80028ec <HAL_RCC_OscConfig+0x77c>)
 80028cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fd87 	bl	80013e4 <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80028da:	f7fe fd83 	bl	80013e4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d903      	bls.n	80028f0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e073      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
 80028ec:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028f0:	4b3a      	ldr	r3, [pc, #232]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ee      	bne.n	80028da <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80028fc:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	4a36      	ldr	r2, [pc, #216]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 8002902:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	6293      	str	r3, [r2, #40]	@ 0x28
 800290c:	e061      	b.n	80029d2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800290e:	4b33      	ldr	r3, [pc, #204]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002914:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 8002916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002918:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	2b01      	cmp	r3, #1
 8002920:	d031      	beq.n	8002986 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f003 0203 	and.w	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d12a      	bne.n	8002986 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d122      	bne.n	8002986 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d11a      	bne.n	8002986 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	0a5b      	lsrs	r3, r3, #9
 8002954:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d111      	bne.n	8002986 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d108      	bne.n	8002986 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0e1b      	lsrs	r3, r3, #24
 8002978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e024      	b.n	80029d4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800298a:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 800298c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298e:	08db      	lsrs	r3, r3, #3
 8002990:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002998:	429a      	cmp	r2, r3
 800299a:	d01a      	beq.n	80029d2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	4a0e      	ldr	r2, [pc, #56]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 80029a2:	f023 0310 	bic.w	r3, r3, #16
 80029a6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fd1c 	bl	80013e4 <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80029ae:	bf00      	nop
 80029b0:	f7fe fd18 	bl	80013e4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d0f9      	beq.n	80029b0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	4a06      	ldr	r2, [pc, #24]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80029c6:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <HAL_RCC_OscConfig+0x86c>)
 80029cc:	f043 0310 	orr.w	r3, r3, #16
 80029d0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	44020c00 	.word	0x44020c00

080029e0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e19e      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b83      	ldr	r3, [pc, #524]	@ (8002c04 <HAL_RCC_ClockConfig+0x224>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b80      	ldr	r3, [pc, #512]	@ (8002c04 <HAL_RCC_ClockConfig+0x224>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 020f 	bic.w	r2, r3, #15
 8002a0a:	497e      	ldr	r1, [pc, #504]	@ (8002c04 <HAL_RCC_ClockConfig+0x224>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b7c      	ldr	r3, [pc, #496]	@ (8002c04 <HAL_RCC_ClockConfig+0x224>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e186      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	4b74      	ldr	r3, [pc, #464]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d909      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002a42:	4b71      	ldr	r3, [pc, #452]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	496d      	ldr	r1, [pc, #436]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	4b68      	ldr	r3, [pc, #416]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d909      	bls.n	8002a88 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002a74:	4b64      	ldr	r3, [pc, #400]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	4961      	ldr	r1, [pc, #388]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	4b5b      	ldr	r3, [pc, #364]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d908      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002aa4:	4b58      	ldr	r3, [pc, #352]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4955      	ldr	r1, [pc, #340]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	4b50      	ldr	r3, [pc, #320]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d908      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002ad2:	4b4d      	ldr	r3, [pc, #308]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f023 020f 	bic.w	r2, r3, #15
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	494a      	ldr	r1, [pc, #296]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8093 	beq.w	8002c18 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002afa:	4b43      	ldr	r3, [pc, #268]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d121      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e113      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b12:	4b3d      	ldr	r3, [pc, #244]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d115      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e107      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002b2a:	4b37      	ldr	r3, [pc, #220]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0fb      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b3a:	4b33      	ldr	r3, [pc, #204]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0f3      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f023 0203 	bic.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	492c      	ldr	r1, [pc, #176]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fc42 	bl	80013e4 <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d112      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6c:	f7fe fc3a 	bl	80013e4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0d7      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b82:	4b21      	ldr	r3, [pc, #132]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 0318 	and.w	r3, r3, #24
 8002b8a:	2b18      	cmp	r3, #24
 8002b8c:	d1ee      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x18c>
 8002b8e:	e043      	b.n	8002c18 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d112      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9a:	f7fe fc23 	bl	80013e4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0c0      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb0:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f003 0318 	and.w	r3, r3, #24
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d1ee      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x1ba>
 8002bbc:	e02c      	b.n	8002c18 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d122      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fe fc0c 	bl	80013e4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0a9      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <HAL_RCC_ClockConfig+0x228>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0318 	and.w	r3, r3, #24
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x1e8>
 8002bea:	e015      	b.n	8002c18 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fe fbfa 	bl	80013e4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d906      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e097      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000
 8002c08:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f003 0318 	and.w	r3, r3, #24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e9      	bne.n	8002bec <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b44      	ldr	r3, [pc, #272]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d208      	bcs.n	8002c46 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002c34:	4b41      	ldr	r3, [pc, #260]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f023 020f 	bic.w	r2, r3, #15
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	493e      	ldr	r1, [pc, #248]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c46:	4b3e      	ldr	r3, [pc, #248]	@ (8002d40 <HAL_RCC_ClockConfig+0x360>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d210      	bcs.n	8002c76 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c54:	4b3a      	ldr	r3, [pc, #232]	@ (8002d40 <HAL_RCC_ClockConfig+0x360>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 020f 	bic.w	r2, r3, #15
 8002c5c:	4938      	ldr	r1, [pc, #224]	@ (8002d40 <HAL_RCC_ClockConfig+0x360>)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c64:	4b36      	ldr	r3, [pc, #216]	@ (8002d40 <HAL_RCC_ClockConfig+0x360>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e05d      	b.n	8002d32 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d208      	bcs.n	8002ca4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002c92:	4b2a      	ldr	r3, [pc, #168]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4927      	ldr	r1, [pc, #156]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	4b21      	ldr	r3, [pc, #132]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d209      	bcs.n	8002cd6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	491a      	ldr	r1, [pc, #104]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d012      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d209      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	490e      	ldr	r1, [pc, #56]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d08:	f000 f822 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_RCC_ClockConfig+0x35c>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	490b      	ldr	r1, [pc, #44]	@ (8002d44 <HAL_RCC_ClockConfig+0x364>)
 8002d18:	5ccb      	ldrb	r3, [r1, r3]
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <HAL_RCC_ClockConfig+0x368>)
 8002d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <HAL_RCC_ClockConfig+0x36c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fad2 	bl	80012d0 <HAL_InitTick>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002d30:	7afb      	ldrb	r3, [r7, #11]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	44020c00 	.word	0x44020c00
 8002d40:	40022000 	.word	0x40022000
 8002d44:	0800a3ac 	.word	0x0800a3ac
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000004 	.word	0x20000004

08002d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	@ 0x24
 8002d54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002d56:	4b8c      	ldr	r3, [pc, #560]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 0318 	and.w	r3, r3, #24
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d102      	bne.n	8002d68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d62:	4b8a      	ldr	r3, [pc, #552]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x23c>)
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e107      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d68:	4b87      	ldr	r3, [pc, #540]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f003 0318 	and.w	r3, r3, #24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d112      	bne.n	8002d9a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002d74:	4b84      	ldr	r3, [pc, #528]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d80:	4b81      	ldr	r3, [pc, #516]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	08db      	lsrs	r3, r3, #3
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	4a81      	ldr	r2, [pc, #516]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	e0f1      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002d94:	4b7e      	ldr	r3, [pc, #504]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	e0ee      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 0318 	and.w	r3, r3, #24
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002da6:	4b7b      	ldr	r3, [pc, #492]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x244>)
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e0e5      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dac:	4b76      	ldr	r3, [pc, #472]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 0318 	and.w	r3, r3, #24
 8002db4:	2b18      	cmp	r3, #24
 8002db6:	f040 80dd 	bne.w	8002f74 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002dba:	4b73      	ldr	r3, [pc, #460]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002dc4:	4b70      	ldr	r3, [pc, #448]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002dd0:	4b6d      	ldr	r3, [pc, #436]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002de0:	08db      	lsrs	r3, r3, #3
 8002de2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80b7 	beq.w	8002f6e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0xbe>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d056      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x16a>
 8002e0c:	e077      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e0e:	4b5e      	ldr	r3, [pc, #376]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d02d      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	08db      	lsrs	r3, r3, #3
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	4a5a      	ldr	r2, [pc, #360]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e26:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e44:	4b50      	ldr	r3, [pc, #320]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e54:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e58:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002f98 <HAL_RCC_GetSysClockFreq+0x248>
 8002e5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e68:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e70:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002e74:	e065      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	ee07 3a90 	vmov	s15, r3
 8002e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e80:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002f9c <HAL_RCC_GetSysClockFreq+0x24c>
 8002e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e88:	4b3f      	ldr	r3, [pc, #252]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e98:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002f98 <HAL_RCC_GetSysClockFreq+0x248>
 8002ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ea8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002eb8:	e043      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002fa0 <HAL_RCC_GetSysClockFreq+0x250>
 8002ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002edc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ee0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002f98 <HAL_RCC_GetSysClockFreq+0x248>
 8002ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002efc:	e021      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f08:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002fa4 <HAL_RCC_GetSysClockFreq+0x254>
 8002f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f10:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f20:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f24:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002f98 <HAL_RCC_GetSysClockFreq+0x248>
 8002f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002f40:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002f42:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f46:	0a5b      	lsrs	r3, r3, #9
 8002f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f5a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f66:	ee17 3a90 	vmov	r3, s15
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	e004      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e001      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f76:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002f78:	69fb      	ldr	r3, [r7, #28]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	@ 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	44020c00 	.word	0x44020c00
 8002f8c:	003d0900 	.word	0x003d0900
 8002f90:	03d09000 	.word	0x03d09000
 8002f94:	017d7840 	.word	0x017d7840
 8002f98:	46000000 	.word	0x46000000
 8002f9c:	4c742400 	.word	0x4c742400
 8002fa0:	4bbebc20 	.word	0x4bbebc20
 8002fa4:	4a742400 	.word	0x4a742400

08002fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002fac:	f7ff fed0 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002fb6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002fba:	4907      	ldr	r1, [pc, #28]	@ (8002fd8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002fbc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002fbe:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <HAL_RCC_GetHCLKFreq+0x34>)
 8002fc8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002fca:	4b04      	ldr	r3, [pc, #16]	@ (8002fdc <HAL_RCC_GetHCLKFreq+0x34>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	44020c00 	.word	0x44020c00
 8002fd8:	0800a3ac 	.word	0x0800a3ac
 8002fdc:	20000000 	.word	0x20000000

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002fe4:	f7ff ffe0 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4904      	ldr	r1, [pc, #16]	@ (8003008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	44020c00 	.word	0x44020c00
 8003008:	0800a3bc 	.word	0x0800a3bc

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003010:	f7ff ffca 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4904      	ldr	r1, [pc, #16]	@ (8003034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	44020c00 	.word	0x44020c00
 8003034:	0800a3bc 	.word	0x0800a3bc

08003038 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800303c:	f7ff ffb4 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	0b1b      	lsrs	r3, r3, #12
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4904      	ldr	r1, [pc, #16]	@ (8003060 <HAL_RCC_GetPCLK3Freq+0x28>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	44020c00 	.word	0x44020c00
 8003060:	0800a3bc 	.word	0x0800a3bc

08003064 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003068:	b0d8      	sub	sp, #352	@ 0x160
 800306a:	af00      	add	r7, sp, #0
 800306c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003070:	2300      	movs	r3, #0
 8003072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003076:	2300      	movs	r3, #0
 8003078:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800307c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003088:	2500      	movs	r5, #0
 800308a:	ea54 0305 	orrs.w	r3, r4, r5
 800308e:	d00b      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003090:	4bcd      	ldr	r3, [pc, #820]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003096:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800309a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a0:	4ac9      	ldr	r2, [pc, #804]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030a2:	430b      	orrs	r3, r1
 80030a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f002 0801 	and.w	r8, r2, #1
 80030b4:	f04f 0900 	mov.w	r9, #0
 80030b8:	ea58 0309 	orrs.w	r3, r8, r9
 80030bc:	d042      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80030be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d823      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80030c8:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	08003119 	.word	0x08003119
 80030d4:	080030e9 	.word	0x080030e9
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	08003119 	.word	0x08003119
 80030e0:	08003119 	.word	0x08003119
 80030e4:	08003119 	.word	0x08003119
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030ec:	3308      	adds	r3, #8
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 feda 	bl	8007ea8 <RCCEx_PLL2_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80030fa:	e00e      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003100:	3330      	adds	r3, #48	@ 0x30
 8003102:	4618      	mov	r0, r3
 8003104:	f004 ff68 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800310e:	e004      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003116:	e000      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10c      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003122:	4ba9      	ldr	r3, [pc, #676]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003128:	f023 0107 	bic.w	r1, r3, #7
 800312c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003132:	4aa5      	ldr	r2, [pc, #660]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003134:	430b      	orrs	r3, r1
 8003136:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800313a:	e003      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003140:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003144:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f002 0a02 	and.w	sl, r2, #2
 8003150:	f04f 0b00 	mov.w	fp, #0
 8003154:	ea5a 030b 	orrs.w	r3, sl, fp
 8003158:	f000 8088 	beq.w	800326c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800315c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	2b28      	cmp	r3, #40	@ 0x28
 8003164:	d868      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003166:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	08003241 	.word	0x08003241
 8003170:	08003239 	.word	0x08003239
 8003174:	08003239 	.word	0x08003239
 8003178:	08003239 	.word	0x08003239
 800317c:	08003239 	.word	0x08003239
 8003180:	08003239 	.word	0x08003239
 8003184:	08003239 	.word	0x08003239
 8003188:	08003239 	.word	0x08003239
 800318c:	08003211 	.word	0x08003211
 8003190:	08003239 	.word	0x08003239
 8003194:	08003239 	.word	0x08003239
 8003198:	08003239 	.word	0x08003239
 800319c:	08003239 	.word	0x08003239
 80031a0:	08003239 	.word	0x08003239
 80031a4:	08003239 	.word	0x08003239
 80031a8:	08003239 	.word	0x08003239
 80031ac:	08003225 	.word	0x08003225
 80031b0:	08003239 	.word	0x08003239
 80031b4:	08003239 	.word	0x08003239
 80031b8:	08003239 	.word	0x08003239
 80031bc:	08003239 	.word	0x08003239
 80031c0:	08003239 	.word	0x08003239
 80031c4:	08003239 	.word	0x08003239
 80031c8:	08003239 	.word	0x08003239
 80031cc:	08003241 	.word	0x08003241
 80031d0:	08003239 	.word	0x08003239
 80031d4:	08003239 	.word	0x08003239
 80031d8:	08003239 	.word	0x08003239
 80031dc:	08003239 	.word	0x08003239
 80031e0:	08003239 	.word	0x08003239
 80031e4:	08003239 	.word	0x08003239
 80031e8:	08003239 	.word	0x08003239
 80031ec:	08003241 	.word	0x08003241
 80031f0:	08003239 	.word	0x08003239
 80031f4:	08003239 	.word	0x08003239
 80031f8:	08003239 	.word	0x08003239
 80031fc:	08003239 	.word	0x08003239
 8003200:	08003239 	.word	0x08003239
 8003204:	08003239 	.word	0x08003239
 8003208:	08003239 	.word	0x08003239
 800320c:	08003241 	.word	0x08003241
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003210:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003214:	3308      	adds	r3, #8
 8003216:	4618      	mov	r0, r3
 8003218:	f004 fe46 	bl	8007ea8 <RCCEx_PLL2_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003222:	e00e      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003224:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003228:	3330      	adds	r3, #48	@ 0x30
 800322a:	4618      	mov	r0, r3
 800322c:	f004 fed4 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003236:	e004      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800323e:	e000      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003242:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800324a:	4b5f      	ldr	r3, [pc, #380]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800324c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003250:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003254:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325a:	4a5b      	ldr	r2, [pc, #364]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800325c:	430b      	orrs	r3, r1
 800325e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003262:	e003      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003264:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003268:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800326c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f002 0304 	and.w	r3, r2, #4
 8003278:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003282:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8003286:	460b      	mov	r3, r1
 8003288:	4313      	orrs	r3, r2
 800328a:	d04e      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800328c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003292:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003296:	d02c      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003298:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800329c:	d825      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x286>
 800329e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a2:	d028      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80032a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a8:	d81f      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80032ac:	d025      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x296>
 80032ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80032b0:	d81b      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032b2:	2b80      	cmp	r3, #128	@ 0x80
 80032b4:	d00f      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80032b6:	2b80      	cmp	r3, #128	@ 0x80
 80032b8:	d817      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01f      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80032be:	2b40      	cmp	r3, #64	@ 0x40
 80032c0:	d113      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032c6:	3308      	adds	r3, #8
 80032c8:	4618      	mov	r0, r3
 80032ca:	f004 fded 	bl	8007ea8 <RCCEx_PLL2_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80032d4:	e014      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032da:	3330      	adds	r3, #48	@ 0x30
 80032dc:	4618      	mov	r0, r3
 80032de:	f004 fe7b 	bl	8007fd8 <RCCEx_PLL3_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80032e8:	e00a      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80032f0:	e006      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80032f2:	bf00      	nop
 80032f4:	e004      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80032f6:	bf00      	nop
 80032f8:	e002      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80032fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003300:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10c      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003308:	4b2f      	ldr	r3, [pc, #188]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800330a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800330e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003312:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003318:	4a2b      	ldr	r2, [pc, #172]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800331a:	430b      	orrs	r3, r1
 800331c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003320:	e003      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003322:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003326:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800332a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f002 0308 	and.w	r3, r2, #8
 8003336:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800333a:	2300      	movs	r3, #0
 800333c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003340:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003344:	460b      	mov	r3, r1
 8003346:	4313      	orrs	r3, r2
 8003348:	d056      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800334a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800334e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003350:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003354:	d031      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003356:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800335a:	d82a      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003360:	d02d      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003366:	d824      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003368:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800336c:	d029      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800336e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003372:	d81e      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003378:	d011      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337e:	d818      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d023      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003388:	d113      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800338a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800338e:	3308      	adds	r3, #8
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fd89 	bl	8007ea8 <RCCEx_PLL2_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800339c:	e017      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800339e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033a2:	3330      	adds	r3, #48	@ 0x30
 80033a4:	4618      	mov	r0, r3
 80033a6:	f004 fe17 	bl	8007fd8 <RCCEx_PLL3_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80033b0:	e00d      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80033b8:	e009      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80033ba:	bf00      	nop
 80033bc:	e007      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80033be:	bf00      	nop
 80033c0:	e005      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80033c2:	bf00      	nop
 80033c4:	e003      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80033c6:	bf00      	nop
 80033c8:	44020c00 	.word	0x44020c00
        break;
 80033cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80033d6:	4bbb      	ldr	r3, [pc, #748]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033dc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80033e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033e6:	4ab7      	ldr	r2, [pc, #732]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033e8:	430b      	orrs	r3, r1
 80033ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80033ee:	e003      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f002 0310 	and.w	r3, r2, #16
 8003404:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800340e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	d053      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800341c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800341e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003422:	d031      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003424:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003428:	d82a      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800342a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800342e:	d02d      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003434:	d824      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003436:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800343a:	d029      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800343c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003440:	d81e      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003446:	d011      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344c:	d818      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d020      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003456:	d113      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003458:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800345c:	3308      	adds	r3, #8
 800345e:	4618      	mov	r0, r3
 8003460:	f004 fd22 	bl	8007ea8 <RCCEx_PLL2_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800346a:	e014      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800346c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003470:	3330      	adds	r3, #48	@ 0x30
 8003472:	4618      	mov	r0, r3
 8003474:	f004 fdb0 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800347e:	e00a      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003486:	e006      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003488:	bf00      	nop
 800348a:	e004      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800348c:	bf00      	nop
 800348e:	e002      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003496:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10c      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800349e:	4b89      	ldr	r3, [pc, #548]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ae:	4a85      	ldr	r2, [pc, #532]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034b0:	430b      	orrs	r3, r1
 80034b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034b6:	e003      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f002 0320 	and.w	r3, r2, #32
 80034cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80034d6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d053      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80034e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80034ea:	d031      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80034ec:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80034f0:	d82a      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80034f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034f6:	d02d      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80034f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034fc:	d824      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80034fe:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003502:	d029      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003504:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003508:	d81e      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800350a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800350e:	d011      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003514:	d818      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003516:	2b00      	cmp	r3, #0
 8003518:	d020      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800351a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800351e:	d113      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003524:	3308      	adds	r3, #8
 8003526:	4618      	mov	r0, r3
 8003528:	f004 fcbe 	bl	8007ea8 <RCCEx_PLL2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003532:	e014      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003538:	3330      	adds	r3, #48	@ 0x30
 800353a:	4618      	mov	r0, r3
 800353c:	f004 fd4c 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003546:	e00a      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800354e:	e006      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003550:	bf00      	nop
 8003552:	e004      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003554:	bf00      	nop
 8003556:	e002      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800355c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003566:	4b57      	ldr	r3, [pc, #348]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800356c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003570:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003576:	4a53      	ldr	r2, [pc, #332]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003578:	430b      	orrs	r3, r1
 800357a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800357e:	e003      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003584:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003588:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003594:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800359e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80035a2:	460b      	mov	r3, r1
 80035a4:	4313      	orrs	r3, r2
 80035a6:	d053      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80035a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ae:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80035b2:	d031      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80035b4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80035b8:	d82a      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80035ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035be:	d02d      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80035c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035c4:	d824      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80035c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035ca:	d029      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80035cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035d0:	d81e      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80035d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035d6:	d011      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80035d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035dc:	d818      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d020      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035e6:	d113      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ec:	3308      	adds	r3, #8
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 fc5a 	bl	8007ea8 <RCCEx_PLL2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80035fa:	e014      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003600:	3330      	adds	r3, #48	@ 0x30
 8003602:	4618      	mov	r0, r3
 8003604:	f004 fce8 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800360e:	e00a      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003616:	e006      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003618:	bf00      	nop
 800361a:	e004      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800361c:	bf00      	nop
 800361e:	e002      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003626:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10c      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800362e:	4b25      	ldr	r3, [pc, #148]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003630:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003634:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003638:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800363c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800363e:	4a21      	ldr	r2, [pc, #132]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003640:	430b      	orrs	r3, r1
 8003642:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003646:	e003      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800364c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003650:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800365c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003666:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800366a:	460b      	mov	r3, r1
 800366c:	4313      	orrs	r3, r2
 800366e:	d055      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003670:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003676:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800367a:	d033      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800367c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003680:	d82c      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003682:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003686:	d02f      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003688:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800368c:	d826      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800368e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003692:	d02b      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003694:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003698:	d820      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800369a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800369e:	d013      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80036a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036a4:	d81a      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x678>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d022      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80036aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036ae:	d115      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036b4:	3308      	adds	r3, #8
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 fbf6 	bl	8007ea8 <RCCEx_PLL2_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80036c2:	e016      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80036c4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036cc:	3330      	adds	r3, #48	@ 0x30
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fc82 	bl	8007fd8 <RCCEx_PLL3_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80036da:	e00a      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80036e2:	e006      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80036e4:	bf00      	nop
 80036e6:	e004      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80036e8:	bf00      	nop
 80036ea:	e002      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80036f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10c      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80036fa:	4bbb      	ldr	r3, [pc, #748]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80036fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003700:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003704:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003708:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800370a:	4ab7      	ldr	r2, [pc, #732]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800370c:	430b      	orrs	r3, r1
 800370e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003712:	e003      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003714:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003718:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800371c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003728:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800372c:	2300      	movs	r3, #0
 800372e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003732:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d053      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800373c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003742:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003746:	d031      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003748:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800374c:	d82a      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800374e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003752:	d02d      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003754:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003758:	d824      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800375a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800375e:	d029      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003760:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003764:	d81e      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003766:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800376a:	d011      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800376c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003770:	d818      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003772:	2b00      	cmp	r3, #0
 8003774:	d020      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003776:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800377a:	d113      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800377c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003780:	3308      	adds	r3, #8
 8003782:	4618      	mov	r0, r3
 8003784:	f004 fb90 	bl	8007ea8 <RCCEx_PLL2_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800378e:	e014      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003790:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003794:	3330      	adds	r3, #48	@ 0x30
 8003796:	4618      	mov	r0, r3
 8003798:	f004 fc1e 	bl	8007fd8 <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80037a2:	e00a      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037aa:	e006      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037ac:	bf00      	nop
 80037ae:	e004      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037b0:	bf00      	nop
 80037b2:	e002      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037b4:	bf00      	nop
 80037b6:	e000      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80037c2:	4b89      	ldr	r3, [pc, #548]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80037cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037d2:	4a85      	ldr	r2, [pc, #532]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037da:	e003      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80037e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80037f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80037fa:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80037fe:	460b      	mov	r3, r1
 8003800:	4313      	orrs	r3, r2
 8003802:	d055      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003810:	d031      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003812:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003816:	d82a      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800381c:	d02d      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800381e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003822:	d824      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003824:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003828:	d029      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800382a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800382e:	d81e      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003834:	d011      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800383a:	d818      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003844:	d113      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003846:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800384a:	3308      	adds	r3, #8
 800384c:	4618      	mov	r0, r3
 800384e:	f004 fb2b 	bl	8007ea8 <RCCEx_PLL2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003858:	e014      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800385a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800385e:	3330      	adds	r3, #48	@ 0x30
 8003860:	4618      	mov	r0, r3
 8003862:	f004 fbb9 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800386c:	e00a      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003876:	bf00      	nop
 8003878:	e004      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003884:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10d      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800388c:	4b56      	ldr	r3, [pc, #344]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800388e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003892:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003896:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800389e:	4a52      	ldr	r2, [pc, #328]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038a0:	430b      	orrs	r3, r1
 80038a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038a6:	e003      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80038b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80038bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038c6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d044      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80038d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d823      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80038dc:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	0800392d 	.word	0x0800392d
 80038e8:	080038fd 	.word	0x080038fd
 80038ec:	08003911 	.word	0x08003911
 80038f0:	0800392d 	.word	0x0800392d
 80038f4:	0800392d 	.word	0x0800392d
 80038f8:	0800392d 	.word	0x0800392d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003900:	3308      	adds	r3, #8
 8003902:	4618      	mov	r0, r3
 8003904:	f004 fad0 	bl	8007ea8 <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800390e:	e00e      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003914:	3330      	adds	r3, #48	@ 0x30
 8003916:	4618      	mov	r0, r3
 8003918:	f004 fb5e 	bl	8007fd8 <RCCEx_PLL3_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003922:	e004      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800392a:	e000      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800392c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003936:	4b2c      	ldr	r3, [pc, #176]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003938:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800393c:	f023 0107 	bic.w	r1, r3, #7
 8003940:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003948:	4a27      	ldr	r2, [pc, #156]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800394a:	430b      	orrs	r3, r1
 800394c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003950:	e003      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003952:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003956:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800395a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003966:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003970:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003974:	460b      	mov	r3, r1
 8003976:	4313      	orrs	r3, r2
 8003978:	d04f      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800397a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003982:	2b50      	cmp	r3, #80	@ 0x50
 8003984:	d029      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003986:	2b50      	cmp	r3, #80	@ 0x50
 8003988:	d823      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d027      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800398e:	2b40      	cmp	r3, #64	@ 0x40
 8003990:	d81f      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003992:	2b30      	cmp	r3, #48	@ 0x30
 8003994:	d025      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003996:	2b30      	cmp	r3, #48	@ 0x30
 8003998:	d81b      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800399a:	2b20      	cmp	r3, #32
 800399c:	d00f      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d817      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d022      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x988>
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d113      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039ae:	3308      	adds	r3, #8
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 fa79 	bl	8007ea8 <RCCEx_PLL2_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80039bc:	e017      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039c2:	3330      	adds	r3, #48	@ 0x30
 80039c4:	4618      	mov	r0, r3
 80039c6:	f004 fb07 	bl	8007fd8 <RCCEx_PLL3_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80039d0:	e00d      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80039d8:	e009      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80039da:	bf00      	nop
 80039dc:	e007      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80039de:	bf00      	nop
 80039e0:	e005      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80039e2:	bf00      	nop
 80039e4:	e003      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80039e6:	bf00      	nop
 80039e8:	44020c00 	.word	0x44020c00
        break;
 80039ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80039f6:	4baf      	ldr	r3, [pc, #700]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80039fc:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003a00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a08:	4aaa      	ldr	r2, [pc, #680]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003a10:	e003      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a16:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	d055      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003a3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a42:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a46:	d031      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003a48:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a4c:	d82a      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a52:	d02d      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003a54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a58:	d824      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a5e:	d029      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003a60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a64:	d81e      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a6a:	d011      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a70:	d818      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d020      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003a76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a7a:	d113      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a80:	3308      	adds	r3, #8
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 fa10 	bl	8007ea8 <RCCEx_PLL2_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003a8e:	e014      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a94:	3330      	adds	r3, #48	@ 0x30
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 fa9e 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003aa2:	e00a      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003aaa:	e006      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003aac:	bf00      	nop
 8003aae:	e004      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003ab0:	bf00      	nop
 8003ab2:	e002      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10d      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ac8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003acc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad4:	4a77      	ldr	r2, [pc, #476]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003adc:	e003      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ade:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ae2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003af2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003afc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b00:	460b      	mov	r3, r1
 8003b02:	4313      	orrs	r3, r2
 8003b04:	d03d      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b12:	d01b      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003b14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b18:	d814      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b1e:	d017      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b24:	d80e      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d014      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b2e:	d109      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b34:	3330      	adds	r3, #48	@ 0x30
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 fa4e 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003b42:	e008      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b4a:	e004      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003b4c:	bf00      	nop
 8003b4e:	e002      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003b50:	bf00      	nop
 8003b52:	e000      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b5e:	4b55      	ldr	r3, [pc, #340]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b64:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b70:	4a50      	ldr	r2, [pc, #320]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b78:	e003      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b92:	2300      	movs	r3, #0
 8003b94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b98:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	d03d      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003baa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bae:	d01b      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003bb0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bb4:	d814      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003bb6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bba:	d017      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003bbc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bc0:	d80e      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d014      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003bc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bca:	d109      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bd0:	3330      	adds	r3, #48	@ 0x30
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 fa00 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003bde:	e008      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003be6:	e004      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003be8:	bf00      	nop
 8003bea:	e002      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003bec:	bf00      	nop
 8003bee:	e000      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c00:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c0c:	4a29      	ldr	r2, [pc, #164]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c14:	e003      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c34:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	d040      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c4a:	d01b      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003c4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c50:	d814      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003c52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c56:	d017      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003c58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c5c:	d80e      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c66:	d109      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c6c:	3330      	adds	r3, #48	@ 0x30
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f004 f9b2 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003c7a:	e008      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c82:	e004      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003c84:	bf00      	nop
 8003c86:	e002      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003c88:	bf00      	nop
 8003c8a:	e000      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d110      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003c96:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c9c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ca8:	4a02      	ldr	r2, [pc, #8]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003caa:	430b      	orrs	r3, r1
 8003cac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003cb0:	e006      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003cb2:	bf00      	nop
 8003cb4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	2100      	movs	r1, #0
 8003cca:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003cd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	d03d      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ce8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cec:	d01b      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003cee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cf2:	d814      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003cf4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cf8:	d017      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003cfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cfe:	d80e      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d014      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d08:	d109      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d0e:	3330      	adds	r3, #48	@ 0x30
 8003d10:	4618      	mov	r0, r3
 8003d12:	f004 f961 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003d1c:	e008      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d24:	e004      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003d26:	bf00      	nop
 8003d28:	e002      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d30:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003d38:	4bbe      	ldr	r3, [pc, #760]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d3e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d4a:	4aba      	ldr	r2, [pc, #744]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d52:	e003      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d58:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d035      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d88:	d015      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003d8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d8e:	d80e      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d012      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d98:	d109      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d9e:	3330      	adds	r3, #48	@ 0x30
 8003da0:	4618      	mov	r0, r3
 8003da2:	f004 f919 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003db4:	e002      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10d      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003dc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dca:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003dd6:	4a97      	ldr	r2, [pc, #604]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003dde:	e003      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003de4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	2100      	movs	r1, #0
 8003df2:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003e08:	4b8a      	ldr	r3, [pc, #552]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4a89      	ldr	r2, [pc, #548]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e12:	61d3      	str	r3, [r2, #28]
 8003e14:	4b87      	ldr	r3, [pc, #540]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e16:	69d9      	ldr	r1, [r3, #28]
 8003e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e1c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003e20:	4a84      	ldr	r2, [pc, #528]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e22:	430b      	orrs	r3, r1
 8003e24:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e36:	2300      	movs	r3, #0
 8003e38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e3c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e40:	460b      	mov	r3, r1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	d055      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e4e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003e52:	d031      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003e54:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003e58:	d82a      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e5e:	d02d      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e64:	d824      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003e66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e6a:	d029      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003e6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e70:	d81e      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e76:	d011      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e7c:	d818      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d020      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e86:	d113      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 f80a 	bl	8007ea8 <RCCEx_PLL2_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003e9a:	e014      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ea0:	3330      	adds	r3, #48	@ 0x30
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f004 f898 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003eb6:	e006      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003eb8:	bf00      	nop
 8003eba:	e004      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ebc:	bf00      	nop
 8003ebe:	e002      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ec0:	bf00      	nop
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10d      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003ece:	4b59      	ldr	r3, [pc, #356]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ed0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003ed4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003edc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ee0:	4a54      	ldr	r2, [pc, #336]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003ee8:	e003      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003eee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ef2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f02:	2300      	movs	r3, #0
 8003f04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f08:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	d055      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f1a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003f1e:	d031      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003f20:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003f24:	d82a      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f2a:	d02d      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f30:	d824      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f36:	d029      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003f38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f3c:	d81e      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f42:	d011      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f48:	d818      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d020      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f52:	d113      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f58:	3308      	adds	r3, #8
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f003 ffa4 	bl	8007ea8 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003f66:	e014      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f6c:	3330      	adds	r3, #48	@ 0x30
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f004 f832 	bl	8007fd8 <RCCEx_PLL3_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f82:	e006      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003f84:	bf00      	nop
 8003f86:	e004      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003f88:	bf00      	nop
 8003f8a:	e002      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003f8c:	bf00      	nop
 8003f8e:	e000      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003f9a:	4b26      	ldr	r3, [pc, #152]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003fa0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fac:	4a21      	ldr	r2, [pc, #132]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003fb4:	e003      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	d057      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003fde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fe2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003fe6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fea:	d033      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff0:	d82c      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003ff2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ff6:	d02f      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003ff8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ffc:	d826      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003ffe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004002:	d02b      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004004:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004008:	d820      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800400a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800400e:	d013      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004014:	d81a      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d022      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800401a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401e:	d115      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004020:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004024:	3308      	adds	r3, #8
 8004026:	4618      	mov	r0, r3
 8004028:	f003 ff3e 	bl	8007ea8 <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004032:	e016      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004034:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800403c:	3330      	adds	r3, #48	@ 0x30
 800403e:	4618      	mov	r0, r3
 8004040:	f003 ffca 	bl	8007fd8 <RCCEx_PLL3_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800404a:	e00a      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004052:	e006      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004054:	bf00      	nop
 8004056:	e004      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004058:	bf00      	nop
 800405a:	e002      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800405c:	bf00      	nop
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004062:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800406a:	4bbb      	ldr	r3, [pc, #748]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800406c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004070:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004074:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004078:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800407c:	4ab6      	ldr	r2, [pc, #728]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800407e:	430b      	orrs	r3, r1
 8004080:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004084:	e003      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004086:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800408a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800408e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	2100      	movs	r1, #0
 8004098:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800409c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	d055      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80040ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040b6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80040ba:	d031      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80040bc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80040c0:	d82a      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80040c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040c6:	d02d      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80040c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040cc:	d824      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80040ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040d2:	d029      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80040d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040d8:	d81e      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80040da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040de:	d011      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80040e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040e4:	d818      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d020      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80040ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ee:	d113      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040f4:	3308      	adds	r3, #8
 80040f6:	4618      	mov	r0, r3
 80040f8:	f003 fed6 	bl	8007ea8 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004102:	e014      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004104:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004108:	3330      	adds	r3, #48	@ 0x30
 800410a:	4618      	mov	r0, r3
 800410c:	f003 ff64 	bl	8007fd8 <RCCEx_PLL3_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004116:	e00a      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800411e:	e006      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004120:	bf00      	nop
 8004122:	e004      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004124:	bf00      	nop
 8004126:	e002      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004128:	bf00      	nop
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800412c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10d      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004136:	4b88      	ldr	r3, [pc, #544]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004138:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800413c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004140:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004148:	4a83      	ldr	r2, [pc, #524]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800414a:	430b      	orrs	r3, r1
 800414c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004150:	e003      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004156:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800415a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	2100      	movs	r1, #0
 8004164:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004170:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004174:	460b      	mov	r3, r1
 8004176:	4313      	orrs	r3, r2
 8004178:	d055      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800417a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800417e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004182:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004186:	d031      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004188:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800418c:	d82a      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800418e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004192:	d02d      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004194:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004198:	d824      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800419a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800419e:	d029      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80041a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041a4:	d81e      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041aa:	d011      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80041ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041b0:	d818      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d020      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80041b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041ba:	d113      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041c0:	3308      	adds	r3, #8
 80041c2:	4618      	mov	r0, r3
 80041c4:	f003 fe70 	bl	8007ea8 <RCCEx_PLL2_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80041ce:	e014      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041d4:	3330      	adds	r3, #48	@ 0x30
 80041d6:	4618      	mov	r0, r3
 80041d8:	f003 fefe 	bl	8007fd8 <RCCEx_PLL3_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80041e2:	e00a      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80041ea:	e006      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80041ec:	bf00      	nop
 80041ee:	e004      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80041f0:	bf00      	nop
 80041f2:	e002      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80041f4:	bf00      	nop
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80041f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10d      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004202:	4b55      	ldr	r3, [pc, #340]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004204:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004208:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800420c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004210:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004214:	4a50      	ldr	r2, [pc, #320]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004216:	430b      	orrs	r3, r1
 8004218:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800421c:	e003      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004222:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	2100      	movs	r1, #0
 8004230:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004238:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800423c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004240:	460b      	mov	r3, r1
 8004242:	4313      	orrs	r3, r2
 8004244:	d055      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004246:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800424a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800424e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004252:	d031      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004254:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004258:	d82a      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425e:	d02d      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004264:	d824      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004266:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800426a:	d029      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800426c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004270:	d81e      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004276:	d011      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800427c:	d818      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d020      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004286:	d113      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004288:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800428c:	3308      	adds	r3, #8
 800428e:	4618      	mov	r0, r3
 8004290:	f003 fe0a 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800429a:	e014      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800429c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042a0:	3330      	adds	r3, #48	@ 0x30
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fe98 	bl	8007fd8 <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80042ae:	e00a      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042b6:	e006      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80042b8:	bf00      	nop
 80042ba:	e004      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80042c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10d      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80042ce:	4b22      	ldr	r3, [pc, #136]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80042d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80042d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80042e8:	e003      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80042fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004308:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800430c:	460b      	mov	r3, r1
 800430e:	4313      	orrs	r3, r2
 8004310:	d055      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004312:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004316:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800431a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800431e:	d035      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004320:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004324:	d82e      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004326:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800432a:	d031      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800432c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004330:	d828      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004336:	d01b      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800433c:	d822      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004346:	d009      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004348:	e01c      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800434a:	4b03      	ldr	r3, [pc, #12]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800434c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434e:	4a02      	ldr	r2, [pc, #8]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004354:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004356:	e01c      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004358:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800435c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004360:	3308      	adds	r3, #8
 8004362:	4618      	mov	r0, r3
 8004364:	f003 fda0 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800436e:	e010      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004370:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004374:	3330      	adds	r3, #48	@ 0x30
 8004376:	4618      	mov	r0, r3
 8004378:	f003 fe2e 	bl	8007fd8 <RCCEx_PLL3_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004382:	e006      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800438a:	e002      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800438c:	bf00      	nop
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004392:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10d      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800439a:	4bc3      	ldr	r3, [pc, #780]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800439c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80043a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80043ac:	4abe      	ldr	r2, [pc, #760]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043ae:	430b      	orrs	r3, r1
 80043b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80043b4:	e003      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80043be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80043ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043d8:	460b      	mov	r3, r1
 80043da:	4313      	orrs	r3, r2
 80043dc:	d051      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80043de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80043e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ea:	d033      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80043ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043f0:	d82c      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80043f2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80043f6:	d02d      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80043f8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80043fc:	d826      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80043fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004402:	d019      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004408:	d820      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800440e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004412:	d007      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004414:	e01a      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004416:	4ba4      	ldr	r3, [pc, #656]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441a:	4aa3      	ldr	r2, [pc, #652]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800441c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004420:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004422:	e018      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004428:	3308      	adds	r3, #8
 800442a:	4618      	mov	r0, r3
 800442c:	f003 fd3c 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004436:	e00e      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004438:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800443c:	3330      	adds	r3, #48	@ 0x30
 800443e:	4618      	mov	r0, r3
 8004440:	f003 fdca 	bl	8007fd8 <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800444a:	e004      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004456:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800445e:	4b92      	ldr	r3, [pc, #584]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004464:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800446c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004470:	4a8d      	ldr	r2, [pc, #564]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004472:	430b      	orrs	r3, r1
 8004474:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004478:	e003      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800447e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004482:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800448e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004490:	2300      	movs	r3, #0
 8004492:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004494:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004498:	460b      	mov	r3, r1
 800449a:	4313      	orrs	r3, r2
 800449c:	d032      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800449e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d80f      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d211      	bcs.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d911      	bls.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d109      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ba:	3308      	adds	r3, #8
 80044bc:	4618      	mov	r0, r3
 80044be:	f003 fcf3 	bl	8007ea8 <RCCEx_PLL2_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044c8:	e006      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80044d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10d      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80044e0:	4b71      	ldr	r3, [pc, #452]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044e6:	f023 0107 	bic.w	r1, r3, #7
 80044ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80044f2:	4a6d      	ldr	r2, [pc, #436]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044fa:	e003      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004500:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	2100      	movs	r1, #0
 800450e:	6739      	str	r1, [r7, #112]	@ 0x70
 8004510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004514:	677b      	str	r3, [r7, #116]	@ 0x74
 8004516:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800451a:	460b      	mov	r3, r1
 800451c:	4313      	orrs	r3, r2
 800451e:	d024      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800452c:	2b08      	cmp	r3, #8
 800452e:	d005      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004536:	e002      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004538:	bf00      	nop
 800453a:	e000      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800453c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800453e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10d      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004546:	4b58      	ldr	r3, [pc, #352]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800454c:	f023 0108 	bic.w	r1, r3, #8
 8004550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004558:	4a53      	ldr	r2, [pc, #332]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800455a:	430b      	orrs	r3, r1
 800455c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004560:	e003      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004562:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004566:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800456a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004576:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004578:	2300      	movs	r3, #0
 800457a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800457c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004580:	460b      	mov	r3, r1
 8004582:	4313      	orrs	r3, r2
 8004584:	f000 80b9 	beq.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004588:	4b48      	ldr	r3, [pc, #288]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	4a47      	ldr	r2, [pc, #284]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004594:	f7fc ff26 	bl	80013e4 <HAL_GetTick>
 8004598:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800459c:	e00b      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fc ff21 	bl	80013e4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d903      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045b4:	e005      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045b6:	4b3d      	ldr	r3, [pc, #244]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0ed      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80045c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f040 8093 	bne.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045cc:	4b36      	ldr	r3, [pc, #216]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80045da:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d023      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80045e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045e6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80045ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01b      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045f2:	4b2d      	ldr	r3, [pc, #180]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045fc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004600:	4b29      	ldr	r3, [pc, #164]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004606:	4a28      	ldr	r2, [pc, #160]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800460c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004610:	4b25      	ldr	r3, [pc, #148]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004616:	4a24      	ldr	r2, [pc, #144]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800461c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004620:	4a21      	ldr	r2, [pc, #132]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004622:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004626:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800462a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d019      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fc fed5 	bl	80013e4 <HAL_GetTick>
 800463a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463e:	e00d      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fc fed0 	bl	80013e4 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800464a:	1ad2      	subs	r2, r2, r3
 800464c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004650:	429a      	cmp	r2, r3
 8004652:	d903      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800465a:	e006      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465c:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800465e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ea      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800466a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800466e:	2b00      	cmp	r3, #0
 8004670:	d13a      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004672:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004676:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800467a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800467e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004682:	d115      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004684:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800468c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004690:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800469a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800469e:	4a02      	ldr	r2, [pc, #8]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046a0:	430b      	orrs	r3, r1
 80046a2:	61d3      	str	r3, [r2, #28]
 80046a4:	e00a      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80046a6:	bf00      	nop
 80046a8:	44020c00 	.word	0x44020c00
 80046ac:	44020800 	.word	0x44020800
 80046b0:	4b9f      	ldr	r3, [pc, #636]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	4a9e      	ldr	r2, [pc, #632]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046ba:	61d3      	str	r3, [r2, #28]
 80046bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c2:	4a9b      	ldr	r2, [pc, #620]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046cc:	4b98      	ldr	r3, [pc, #608]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046ce:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80046d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046d6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80046da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046de:	4a94      	ldr	r2, [pc, #592]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046e0:	430b      	orrs	r3, r1
 80046e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80046f0:	e003      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004706:	663b      	str	r3, [r7, #96]	@ 0x60
 8004708:	2300      	movs	r3, #0
 800470a:	667b      	str	r3, [r7, #100]	@ 0x64
 800470c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004710:	460b      	mov	r3, r1
 8004712:	4313      	orrs	r3, r2
 8004714:	d035      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004716:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800471a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800471e:	2b30      	cmp	r3, #48	@ 0x30
 8004720:	d014      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004722:	2b30      	cmp	r3, #48	@ 0x30
 8004724:	d80e      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004726:	2b20      	cmp	r3, #32
 8004728:	d012      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800472a:	2b20      	cmp	r3, #32
 800472c:	d80a      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004732:	2b10      	cmp	r3, #16
 8004734:	d106      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004736:	4b7e      	ldr	r3, [pc, #504]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473a:	4a7d      	ldr	r2, [pc, #500]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800473c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004740:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004742:	e008      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800474a:	e004      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800474c:	bf00      	nop
 800474e:	e002      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004756:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10d      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800475e:	4b74      	ldr	r3, [pc, #464]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004764:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004768:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800476c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004770:	4a6f      	ldr	r2, [pc, #444]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004772:	430b      	orrs	r3, r1
 8004774:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004778:	e003      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800477e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004782:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800478e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004790:	2300      	movs	r3, #0
 8004792:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004794:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004798:	460b      	mov	r3, r1
 800479a:	4313      	orrs	r3, r2
 800479c:	d033      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800479e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80047aa:	2b40      	cmp	r3, #64	@ 0x40
 80047ac:	d007      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80047ae:	e010      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	4a5e      	ldr	r2, [pc, #376]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ba:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80047bc:	e00d      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047c2:	3308      	adds	r3, #8
 80047c4:	4618      	mov	r0, r3
 80047c6:	f003 fb6f 	bl	8007ea8 <RCCEx_PLL2_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80047d0:	e003      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10d      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80047e2:	4b53      	ldr	r3, [pc, #332]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047e8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80047ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80047f4:	4a4e      	ldr	r2, [pc, #312]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047f6:	430b      	orrs	r3, r1
 80047f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004802:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004806:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004812:	653b      	str	r3, [r7, #80]	@ 0x50
 8004814:	2300      	movs	r3, #0
 8004816:	657b      	str	r3, [r7, #84]	@ 0x54
 8004818:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d033      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004822:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004826:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800482e:	2b80      	cmp	r3, #128	@ 0x80
 8004830:	d007      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004832:	e010      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004834:	4b3e      	ldr	r3, [pc, #248]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	4a3d      	ldr	r2, [pc, #244]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800483a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800483e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004840:	e00d      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004842:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004846:	3308      	adds	r3, #8
 8004848:	4618      	mov	r0, r3
 800484a:	f003 fb2d 	bl	8007ea8 <RCCEx_PLL2_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004854:	e003      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800485c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004866:	4b32      	ldr	r3, [pc, #200]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800486c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004870:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004874:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004878:	4a2d      	ldr	r2, [pc, #180]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800487a:	430b      	orrs	r3, r1
 800487c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004880:	e003      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004882:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004886:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800488a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004896:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004898:	2300      	movs	r3, #0
 800489a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800489c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80048a0:	460b      	mov	r3, r1
 80048a2:	4313      	orrs	r3, r2
 80048a4:	d04a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80048a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d827      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80048b2:	a201      	add	r2, pc, #4	@ (adr r2, 80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048cd 	.word	0x080048cd
 80048bc:	080048db 	.word	0x080048db
 80048c0:	080048ef 	.word	0x080048ef
 80048c4:	0800490b 	.word	0x0800490b
 80048c8:	0800490b 	.word	0x0800490b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048cc:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d0:	4a17      	ldr	r2, [pc, #92]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80048d8:	e018      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048de:	3308      	adds	r3, #8
 80048e0:	4618      	mov	r0, r3
 80048e2:	f003 fae1 	bl	8007ea8 <RCCEx_PLL2_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80048ec:	e00e      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048f2:	3330      	adds	r3, #48	@ 0x30
 80048f4:	4618      	mov	r0, r3
 80048f6:	f003 fb6f 	bl	8007fd8 <RCCEx_PLL3_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004900:	e004      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004908:	e000      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800490a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800491a:	f023 0107 	bic.w	r1, r3, #7
 800491e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004926:	4a02      	ldr	r2, [pc, #8]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800492e:	e005      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004930:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004938:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800493c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004948:	643b      	str	r3, [r7, #64]	@ 0x40
 800494a:	2300      	movs	r3, #0
 800494c:	647b      	str	r3, [r7, #68]	@ 0x44
 800494e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	f000 8081 	beq.w	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800495a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800495e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004962:	2b20      	cmp	r3, #32
 8004964:	d85f      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004966:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	080049f1 	.word	0x080049f1
 8004970:	08004a27 	.word	0x08004a27
 8004974:	08004a27 	.word	0x08004a27
 8004978:	08004a27 	.word	0x08004a27
 800497c:	08004a27 	.word	0x08004a27
 8004980:	08004a27 	.word	0x08004a27
 8004984:	08004a27 	.word	0x08004a27
 8004988:	08004a27 	.word	0x08004a27
 800498c:	080049ff 	.word	0x080049ff
 8004990:	08004a27 	.word	0x08004a27
 8004994:	08004a27 	.word	0x08004a27
 8004998:	08004a27 	.word	0x08004a27
 800499c:	08004a27 	.word	0x08004a27
 80049a0:	08004a27 	.word	0x08004a27
 80049a4:	08004a27 	.word	0x08004a27
 80049a8:	08004a27 	.word	0x08004a27
 80049ac:	08004a13 	.word	0x08004a13
 80049b0:	08004a27 	.word	0x08004a27
 80049b4:	08004a27 	.word	0x08004a27
 80049b8:	08004a27 	.word	0x08004a27
 80049bc:	08004a27 	.word	0x08004a27
 80049c0:	08004a27 	.word	0x08004a27
 80049c4:	08004a27 	.word	0x08004a27
 80049c8:	08004a27 	.word	0x08004a27
 80049cc:	08004a2f 	.word	0x08004a2f
 80049d0:	08004a27 	.word	0x08004a27
 80049d4:	08004a27 	.word	0x08004a27
 80049d8:	08004a27 	.word	0x08004a27
 80049dc:	08004a27 	.word	0x08004a27
 80049e0:	08004a27 	.word	0x08004a27
 80049e4:	08004a27 	.word	0x08004a27
 80049e8:	08004a27 	.word	0x08004a27
 80049ec:	08004a2f 	.word	0x08004a2f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f0:	4bab      	ldr	r3, [pc, #684]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	4aaa      	ldr	r2, [pc, #680]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049fa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80049fc:	e018      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a02:	3308      	adds	r3, #8
 8004a04:	4618      	mov	r0, r3
 8004a06:	f003 fa4f 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a10:	e00e      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a16:	3330      	adds	r3, #48	@ 0x30
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f003 fadd 	bl	8007fd8 <RCCEx_PLL3_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a24:	e004      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a30:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10d      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004a38:	4b99      	ldr	r3, [pc, #612]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a3e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a4a:	4a95      	ldr	r2, [pc, #596]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a52:	e003      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a58:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004a5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004a72:	460b      	mov	r3, r1
 8004a74:	4313      	orrs	r3, r2
 8004a76:	d04e      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a84:	d02e      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a8a:	d827      	bhi.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004a8c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a8e:	d02b      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004a90:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a92:	d823      	bhi.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004a94:	2b80      	cmp	r3, #128	@ 0x80
 8004a96:	d017      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004a98:	2b80      	cmp	r3, #128	@ 0x80
 8004a9a:	d81f      	bhi.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d007      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004aa4:	e01a      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa6:	4b7e      	ldr	r3, [pc, #504]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	4a7d      	ldr	r2, [pc, #500]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ab2:	e01a      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ab8:	3308      	adds	r3, #8
 8004aba:	4618      	mov	r0, r3
 8004abc:	f003 f9f4 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ac6:	e010      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004acc:	3330      	adds	r3, #48	@ 0x30
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 fa82 	bl	8007fd8 <RCCEx_PLL3_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ada:	e006      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ae2:	e002      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10d      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004af2:	4b6b      	ldr	r3, [pc, #428]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004af8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b04:	4a66      	ldr	r2, [pc, #408]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b0c:	e003      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b24:	2300      	movs	r3, #0
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b28:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d055      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004b3a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b3e:	d031      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004b40:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b44:	d82a      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b4a:	d02d      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b50:	d824      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004b52:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b56:	d029      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004b58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b5c:	d81e      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b62:	d011      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b68:	d818      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d020      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004b6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b72:	d113      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b78:	3308      	adds	r3, #8
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f003 f994 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004b86:	e014      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b8c:	3330      	adds	r3, #48	@ 0x30
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f003 fa22 	bl	8007fd8 <RCCEx_PLL3_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ba2:	e006      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ba4:	bf00      	nop
 8004ba6:	e004      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ba8:	bf00      	nop
 8004baa:	e002      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10d      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004bba:	4b39      	ldr	r3, [pc, #228]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004bcc:	4a34      	ldr	r2, [pc, #208]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bd4:	e003      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bda:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bec:	2300      	movs	r3, #0
 8004bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	d058      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004bfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c06:	d031      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004c08:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c0c:	d82a      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c12:	d02d      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c18:	d824      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c1e:	d029      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004c20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c24:	d81e      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c2a:	d011      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c30:	d818      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d020      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3a:	d113      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c40:	3308      	adds	r3, #8
 8004c42:	4618      	mov	r0, r3
 8004c44:	f003 f930 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004c4e:	e014      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c54:	3330      	adds	r3, #48	@ 0x30
 8004c56:	4618      	mov	r0, r3
 8004c58:	f003 f9be 	bl	8007fd8 <RCCEx_PLL3_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004c62:	e00a      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c6a:	e006      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004c6c:	bf00      	nop
 8004c6e:	e004      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004c70:	bf00      	nop
 8004c72:	e002      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d110      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004c82:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c88:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c94:	4902      	ldr	r1, [pc, #8]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004c9c:	e006      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004c9e:	bf00      	nop
 8004ca0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ca8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	6239      	str	r1, [r7, #32]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	d055      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004cc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cd0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004cd4:	d031      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004cd6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004cda:	d82a      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce0:	d02d      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004ce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce6:	d824      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004ce8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004cec:	d029      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004cee:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004cf2:	d81e      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf8:	d011      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfe:	d818      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d08:	d113      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d0e:	3308      	adds	r3, #8
 8004d10:	4618      	mov	r0, r3
 8004d12:	f003 f8c9 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d1c:	e014      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d22:	3330      	adds	r3, #48	@ 0x30
 8004d24:	4618      	mov	r0, r3
 8004d26:	f003 f957 	bl	8007fd8 <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d30:	e00a      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e004      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d48:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004d50:	4b88      	ldr	r3, [pc, #544]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d56:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004d5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d62:	4984      	ldr	r1, [pc, #528]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004d6a:	e003      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d70:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	61b9      	str	r1, [r7, #24]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d03d      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d81c      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004ddf 	.word	0x08004ddf
 8004da8:	08004db5 	.word	0x08004db5
 8004dac:	08004dc3 	.word	0x08004dc3
 8004db0:	08004ddf 	.word	0x08004ddf
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db4:	4b6f      	ldr	r3, [pc, #444]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	4a6e      	ldr	r2, [pc, #440]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dbe:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004dc0:	e00e      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f003 f86d 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004dd4:	e004      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ddc:	e000      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10d      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004de8:	4b62      	ldr	r3, [pc, #392]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004dfa:	495e      	ldr	r1, [pc, #376]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004e02:	e003      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	2100      	movs	r1, #0
 8004e16:	6139      	str	r1, [r7, #16]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e22:	460b      	mov	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d03a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004e28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e34:	d00e      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004e36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3a:	d815      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d017      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e44:	d110      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e46:	4b4b      	ldr	r3, [pc, #300]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e50:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004e52:	e00e      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e58:	3308      	adds	r3, #8
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f003 f824 	bl	8007ea8 <RCCEx_PLL2_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004e66:	e004      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e6e:	e000      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e8c:	4939      	ldr	r1, [pc, #228]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004e94:	e003      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e9a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	d038      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004eba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ebe:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004ec2:	2b30      	cmp	r3, #48	@ 0x30
 8004ec4:	d01b      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004ec6:	2b30      	cmp	r3, #48	@ 0x30
 8004ec8:	d815      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d002      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d007      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004ed2:	e010      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed4:	4b27      	ldr	r3, [pc, #156]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	4a26      	ldr	r2, [pc, #152]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ede:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ee0:	e00e      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ee6:	3330      	adds	r3, #48	@ 0x30
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f003 f875 	bl	8007fd8 <RCCEx_PLL3_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004ef4:	e004      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10d      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004f08:	4b1a      	ldr	r3, [pc, #104]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f0e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f16:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f1a:	4916      	ldr	r1, [pc, #88]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	2100      	movs	r1, #0
 8004f36:	6039      	str	r1, [r7, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f42:	460b      	mov	r3, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	d00c      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004f48:	4b0a      	ldr	r3, [pc, #40]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f56:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004f5a:	4906      	ldr	r1, [pc, #24]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004f62:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f72:	bf00      	nop
 8004f74:	44020c00 	.word	0x44020c00

08004f78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b08b      	sub	sp, #44	@ 0x2c
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004f80:	4bad      	ldr	r3, [pc, #692]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f88:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f8a:	4bab      	ldr	r3, [pc, #684]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004f94:	4ba8      	ldr	r3, [pc, #672]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f9e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004fa0:	4ba5      	ldr	r3, [pc, #660]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004faa:	4ba3      	ldr	r3, [pc, #652]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	08db      	lsrs	r3, r3, #3
 8004fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8126 	beq.w	800521a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d053      	beq.n	800507c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d86f      	bhi.n	80050ba <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d003      	beq.n	8004fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d02b      	beq.n	800503e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004fe6:	e068      	b.n	80050ba <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fe8:	4b93      	ldr	r3, [pc, #588]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	08db      	lsrs	r3, r3, #3
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	4a92      	ldr	r2, [pc, #584]	@ (800523c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005020:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005240 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005038:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800503c:	e068      	b.n	8005110 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005048:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005244 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800504c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505a:	ed97 6a04 	vldr	s12, [r7, #16]
 800505e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005240 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800506e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005076:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800507a:	e049      	b.n	8005110 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005086:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005248 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800508a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	ee07 3a90 	vmov	s15, r3
 8005094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005098:	ed97 6a04 	vldr	s12, [r7, #16]
 800509c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005240 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80050a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80050b8:	e02a      	b.n	8005110 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	08db      	lsrs	r3, r3, #3
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	4a5d      	ldr	r2, [pc, #372]	@ (800523c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80050c6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ca:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80050f2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005240 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800510e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005110:	4b49      	ldr	r3, [pc, #292]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800511c:	d121      	bne.n	8005162 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800511e:	4b46      	ldr	r3, [pc, #280]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800512a:	4b43      	ldr	r3, [pc, #268]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800512c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512e:	0a5b      	lsrs	r3, r3, #9
 8005130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005134:	ee07 3a90 	vmov	s15, r3
 8005138:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800513c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005140:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005144:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800514c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005150:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e006      	b.n	8005168 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e002      	b.n	8005168 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005168:	4b33      	ldr	r3, [pc, #204]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005170:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005174:	d121      	bne.n	80051ba <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005176:	4b30      	ldr	r3, [pc, #192]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d017      	beq.n	80051b2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005182:	4b2d      	ldr	r3, [pc, #180]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005194:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005198:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800519c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80051a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	605a      	str	r2, [r3, #4]
 80051b0:	e006      	b.n	80051c0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	605a      	str	r2, [r3, #4]
 80051b8:	e002      	b.n	80051c0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051cc:	d121      	bne.n	8005212 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80051ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d017      	beq.n	800520a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80051da:	4b17      	ldr	r3, [pc, #92]	@ (8005238 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051de:	0e1b      	lsrs	r3, r3, #24
 80051e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e4:	ee07 3a90 	vmov	s15, r3
 80051e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80051ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051f0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80051f4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80051f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005200:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005208:	e010      	b.n	800522c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	609a      	str	r2, [r3, #8]
}
 8005210:	e00c      	b.n	800522c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	609a      	str	r2, [r3, #8]
}
 8005218:	e008      	b.n	800522c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
}
 800522c:	bf00      	nop
 800522e:	372c      	adds	r7, #44	@ 0x2c
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	44020c00 	.word	0x44020c00
 800523c:	03d09000 	.word	0x03d09000
 8005240:	46000000 	.word	0x46000000
 8005244:	4a742400 	.word	0x4a742400
 8005248:	4bbebc20 	.word	0x4bbebc20

0800524c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800524c:	b480      	push	{r7}
 800524e:	b08b      	sub	sp, #44	@ 0x2c
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005254:	4bad      	ldr	r3, [pc, #692]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800525e:	4bab      	ldr	r3, [pc, #684]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005268:	4ba8      	ldr	r3, [pc, #672]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005272:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005274:	4ba5      	ldr	r3, [pc, #660]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800527e:	4ba3      	ldr	r3, [pc, #652]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	08db      	lsrs	r3, r3, #3
 8005284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	fb02 f303 	mul.w	r3, r2, r3
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8126 	beq.w	80054ee <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d053      	beq.n	8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d86f      	bhi.n	800538e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d003      	beq.n	80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d02b      	beq.n	8005312 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80052ba:	e068      	b.n	800538e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052bc:	4b93      	ldr	r3, [pc, #588]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	08db      	lsrs	r3, r3, #3
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	4a92      	ldr	r2, [pc, #584]	@ (8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
 80052cc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f0:	ed97 6a04 	vldr	s12, [r7, #16]
 80052f4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80052f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005300:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005310:	e068      	b.n	80053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	ee07 3a90 	vmov	s15, r3
 8005318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005518 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005332:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800533a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800534e:	e049      	b.n	80053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800551c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800535e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005370:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005388:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800538c:	e02a      	b.n	80053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800538e:	4b5f      	ldr	r3, [pc, #380]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	08db      	lsrs	r3, r3, #3
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	4a5d      	ldr	r2, [pc, #372]	@ (8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800539a:	fa22 f303 	lsr.w	r3, r2, r3
 800539e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c2:	ed97 6a04 	vldr	s12, [r7, #16]
 80053c6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80053e2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053e4:	4b49      	ldr	r3, [pc, #292]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053f0:	d121      	bne.n	8005436 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80053f2:	4b46      	ldr	r3, [pc, #280]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d017      	beq.n	800542e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80053fe:	4b43      	ldr	r3, [pc, #268]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005402:	0a5b      	lsrs	r3, r3, #9
 8005404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005410:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005414:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005418:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800541c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005424:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e006      	b.n	800543c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e002      	b.n	800543c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800543c:	4b33      	ldr	r3, [pc, #204]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005448:	d121      	bne.n	800548e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800544a:	4b30      	ldr	r3, [pc, #192]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800544c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d017      	beq.n	8005486 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005456:	4b2d      	ldr	r3, [pc, #180]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	0c1b      	lsrs	r3, r3, #16
 800545c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005468:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800546c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005470:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800547c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	e006      	b.n	8005494 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	605a      	str	r2, [r3, #4]
 800548c:	e002      	b.n	8005494 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005494:	4b1d      	ldr	r3, [pc, #116]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800549c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054a0:	d121      	bne.n	80054e6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80054a2:	4b1a      	ldr	r3, [pc, #104]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d017      	beq.n	80054de <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054ae:	4b17      	ldr	r3, [pc, #92]	@ (800550c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	0e1b      	lsrs	r3, r3, #24
 80054b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80054c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054c4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80054c8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80054cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80054dc:	e010      	b.n	8005500 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	609a      	str	r2, [r3, #8]
}
 80054e4:	e00c      	b.n	8005500 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	e008      	b.n	8005500 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	372c      	adds	r7, #44	@ 0x2c
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	44020c00 	.word	0x44020c00
 8005510:	03d09000 	.word	0x03d09000
 8005514:	46000000 	.word	0x46000000
 8005518:	4a742400 	.word	0x4a742400
 800551c:	4bbebc20 	.word	0x4bbebc20

08005520 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005520:	b480      	push	{r7}
 8005522:	b08b      	sub	sp, #44	@ 0x2c
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005528:	4bad      	ldr	r3, [pc, #692]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800552a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005530:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005532:	4bab      	ldr	r3, [pc, #684]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800553c:	4ba8      	ldr	r3, [pc, #672]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800553e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005546:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005548:	4ba5      	ldr	r3, [pc, #660]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005552:	4ba3      	ldr	r3, [pc, #652]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005556:	08db      	lsrs	r3, r3, #3
 8005558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8126 	beq.w	80057c2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d053      	beq.n	8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	2b03      	cmp	r3, #3
 8005580:	d86f      	bhi.n	8005662 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d003      	beq.n	8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d02b      	beq.n	80055e6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800558e:	e068      	b.n	8005662 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005590:	4b93      	ldr	r3, [pc, #588]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	08db      	lsrs	r3, r3, #3
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	4a92      	ldr	r2, [pc, #584]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
 80055a0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	ee07 3a90 	vmov	s15, r3
 80055a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80055c8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80055cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80055e4:	e068      	b.n	80056b8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	ee07 3a90 	vmov	s15, r3
 80055ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80055f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005602:	ed97 6a04 	vldr	s12, [r7, #16]
 8005606:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800560a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005622:	e049      	b.n	80056b8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	ee07 3a90 	vmov	s15, r3
 800563c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005640:	ed97 6a04 	vldr	s12, [r7, #16]
 8005644:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005650:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005660:	e02a      	b.n	80056b8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005662:	4b5f      	ldr	r3, [pc, #380]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	08db      	lsrs	r3, r3, #3
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	4a5d      	ldr	r2, [pc, #372]	@ (80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005696:	ed97 6a04 	vldr	s12, [r7, #16]
 800569a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800569e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80056b6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056b8:	4b49      	ldr	r3, [pc, #292]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056c4:	d121      	bne.n	800570a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80056c6:	4b46      	ldr	r3, [pc, #280]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d017      	beq.n	8005702 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80056d2:	4b43      	ldr	r3, [pc, #268]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d6:	0a5b      	lsrs	r3, r3, #9
 80056d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80056e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056e8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80056ec:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80056f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e006      	b.n	8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	e002      	b.n	8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005710:	4b33      	ldr	r3, [pc, #204]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800571c:	d121      	bne.n	8005762 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800571e:	4b30      	ldr	r3, [pc, #192]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d017      	beq.n	800575a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800572a:	4b2d      	ldr	r3, [pc, #180]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800572c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800573c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005740:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005744:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005750:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	605a      	str	r2, [r3, #4]
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005768:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005774:	d121      	bne.n	80057ba <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005776:	4b1a      	ldr	r3, [pc, #104]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d017      	beq.n	80057b2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005782:	4b17      	ldr	r3, [pc, #92]	@ (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	0e1b      	lsrs	r3, r3, #24
 8005788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800578c:	ee07 3a90 	vmov	s15, r3
 8005790:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005794:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005798:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800579c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80057a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80057b0:	e010      	b.n	80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	609a      	str	r2, [r3, #8]
}
 80057b8:	e00c      	b.n	80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	e008      	b.n	80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	372c      	adds	r7, #44	@ 0x2c
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	44020c00 	.word	0x44020c00
 80057e4:	03d09000 	.word	0x03d09000
 80057e8:	46000000 	.word	0x46000000
 80057ec:	4a742400 	.word	0x4a742400
 80057f0:	4bbebc20 	.word	0x4bbebc20

080057f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80057f4:	b590      	push	{r4, r7, lr}
 80057f6:	b08f      	sub	sp, #60	@ 0x3c
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80057fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005802:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005806:	4321      	orrs	r1, r4
 8005808:	d150      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800580a:	4b26      	ldr	r3, [pc, #152]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800580c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005810:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005814:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005816:	4b23      	ldr	r3, [pc, #140]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b02      	cmp	r3, #2
 8005822:	d108      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800582a:	d104      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800582c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005830:	637b      	str	r3, [r7, #52]	@ 0x34
 8005832:	f002 bb2a 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005836:	4b1b      	ldr	r3, [pc, #108]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800583c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005844:	d108      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584c:	d104      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800584e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005852:	637b      	str	r3, [r7, #52]	@ 0x34
 8005854:	f002 bb19 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005858:	4b12      	ldr	r3, [pc, #72]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005860:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005864:	d119      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800586c:	d115      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800586e:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800587a:	d30a      	bcc.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800587c:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005886:	4a08      	ldr	r2, [pc, #32]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005888:	fbb2 f3f3 	udiv	r3, r2, r3
 800588c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800588e:	f002 bafc 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005896:	f002 baf8 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	637b      	str	r3, [r7, #52]	@ 0x34
 800589e:	f002 baf4 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80058a2:	bf00      	nop
 80058a4:	44020c00 	.word	0x44020c00
 80058a8:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80058ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058b0:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80058b4:	ea50 0104 	orrs.w	r1, r0, r4
 80058b8:	f001 8275 	beq.w	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80058bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058c0:	2801      	cmp	r0, #1
 80058c2:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80058c6:	f082 82dd 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ce:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80058d2:	ea50 0104 	orrs.w	r1, r0, r4
 80058d6:	f001 816c 	beq.w	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80058da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058de:	2801      	cmp	r0, #1
 80058e0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80058e4:	f082 82ce 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ec:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80058f0:	ea50 0104 	orrs.w	r1, r0, r4
 80058f4:	f001 8602 	beq.w	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80058f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058fc:	2801      	cmp	r0, #1
 80058fe:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8005902:	f082 82bf 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800590a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800590e:	ea50 0104 	orrs.w	r1, r0, r4
 8005912:	f001 854c 	beq.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005916:	e9d7 0100 	ldrd	r0, r1, [r7]
 800591a:	2801      	cmp	r0, #1
 800591c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8005920:	f082 82b0 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005924:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005928:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800592c:	ea50 0104 	orrs.w	r1, r0, r4
 8005930:	f001 849e 	beq.w	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005934:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005938:	2801      	cmp	r0, #1
 800593a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800593e:	f082 82a1 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005942:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005946:	f1a1 0420 	sub.w	r4, r1, #32
 800594a:	ea50 0104 	orrs.w	r1, r0, r4
 800594e:	f001 83e8 	beq.w	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005956:	2801      	cmp	r0, #1
 8005958:	f171 0120 	sbcs.w	r1, r1, #32
 800595c:	f082 8292 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005964:	f1a1 0410 	sub.w	r4, r1, #16
 8005968:	ea50 0104 	orrs.w	r1, r0, r4
 800596c:	f002 8256 	beq.w	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005974:	2801      	cmp	r0, #1
 8005976:	f171 0110 	sbcs.w	r1, r1, #16
 800597a:	f082 8283 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800597e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005982:	f1a1 0408 	sub.w	r4, r1, #8
 8005986:	ea50 0104 	orrs.w	r1, r0, r4
 800598a:	f002 81cc 	beq.w	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800598e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005992:	2801      	cmp	r0, #1
 8005994:	f171 0108 	sbcs.w	r1, r1, #8
 8005998:	f082 8274 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800599c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059a0:	1f0c      	subs	r4, r1, #4
 80059a2:	ea50 0104 	orrs.w	r1, r0, r4
 80059a6:	f001 8648 	beq.w	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80059aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ae:	2801      	cmp	r0, #1
 80059b0:	f171 0104 	sbcs.w	r1, r1, #4
 80059b4:	f082 8266 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059bc:	1e8c      	subs	r4, r1, #2
 80059be:	ea50 0104 	orrs.w	r1, r0, r4
 80059c2:	f002 8143 	beq.w	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80059c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ca:	2801      	cmp	r0, #1
 80059cc:	f171 0102 	sbcs.w	r1, r1, #2
 80059d0:	f082 8258 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059d8:	1e4c      	subs	r4, r1, #1
 80059da:	ea50 0104 	orrs.w	r1, r0, r4
 80059de:	f002 80ce 	beq.w	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80059e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e6:	2801      	cmp	r0, #1
 80059e8:	f171 0101 	sbcs.w	r1, r1, #1
 80059ec:	f082 824a 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059f4:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80059f8:	4321      	orrs	r1, r4
 80059fa:	f002 8059 	beq.w	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80059fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a02:	4cd9      	ldr	r4, [pc, #868]	@ (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005a04:	42a0      	cmp	r0, r4
 8005a06:	f171 0100 	sbcs.w	r1, r1, #0
 8005a0a:	f082 823b 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a12:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005a16:	4321      	orrs	r1, r4
 8005a18:	f001 87d9 	beq.w	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a20:	4cd2      	ldr	r4, [pc, #840]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005a22:	42a0      	cmp	r0, r4
 8005a24:	f171 0100 	sbcs.w	r1, r1, #0
 8005a28:	f082 822c 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a30:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005a34:	4321      	orrs	r1, r4
 8005a36:	f001 8751 	beq.w	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a3e:	4ccc      	ldr	r4, [pc, #816]	@ (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005a40:	42a0      	cmp	r0, r4
 8005a42:	f171 0100 	sbcs.w	r1, r1, #0
 8005a46:	f082 821d 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a4e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005a52:	4321      	orrs	r1, r4
 8005a54:	f001 869a 	beq.w	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a5c:	4cc5      	ldr	r4, [pc, #788]	@ (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005a5e:	42a0      	cmp	r0, r4
 8005a60:	f171 0100 	sbcs.w	r1, r1, #0
 8005a64:	f082 820e 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a6c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005a70:	4321      	orrs	r1, r4
 8005a72:	f001 8612 	beq.w	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a7a:	4cbf      	ldr	r4, [pc, #764]	@ (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005a7c:	42a0      	cmp	r0, r4
 8005a7e:	f171 0100 	sbcs.w	r1, r1, #0
 8005a82:	f082 81ff 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a8a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005a8e:	4321      	orrs	r1, r4
 8005a90:	f002 817e 	beq.w	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a98:	4cb8      	ldr	r4, [pc, #736]	@ (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005a9a:	42a0      	cmp	r0, r4
 8005a9c:	f171 0100 	sbcs.w	r1, r1, #0
 8005aa0:	f082 81f0 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa8:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8005aac:	4321      	orrs	r1, r4
 8005aae:	f000 829e 	beq.w	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab6:	4cb2      	ldr	r4, [pc, #712]	@ (8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ab8:	42a0      	cmp	r0, r4
 8005aba:	f171 0100 	sbcs.w	r1, r1, #0
 8005abe:	f082 81e1 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac6:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005aca:	4321      	orrs	r1, r4
 8005acc:	f000 826d 	beq.w	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ad4:	4cab      	ldr	r4, [pc, #684]	@ (8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ad6:	42a0      	cmp	r0, r4
 8005ad8:	f171 0100 	sbcs.w	r1, r1, #0
 8005adc:	f082 81d2 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ae4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005ae8:	4321      	orrs	r1, r4
 8005aea:	f001 800d 	beq.w	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005af2:	4ca5      	ldr	r4, [pc, #660]	@ (8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	f171 0100 	sbcs.w	r1, r1, #0
 8005afa:	f082 81c3 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005afe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b02:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8005b06:	4321      	orrs	r1, r4
 8005b08:	f000 81d0 	beq.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b10:	4c9e      	ldr	r4, [pc, #632]	@ (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b12:	42a0      	cmp	r0, r4
 8005b14:	f171 0100 	sbcs.w	r1, r1, #0
 8005b18:	f082 81b4 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b20:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8005b24:	4321      	orrs	r1, r4
 8005b26:	f000 8142 	beq.w	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005b2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b2e:	4c98      	ldr	r4, [pc, #608]	@ (8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b30:	42a0      	cmp	r0, r4
 8005b32:	f171 0100 	sbcs.w	r1, r1, #0
 8005b36:	f082 81a5 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b3e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005b42:	4321      	orrs	r1, r4
 8005b44:	f001 824e 	beq.w	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b4c:	4c91      	ldr	r4, [pc, #580]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005b4e:	42a0      	cmp	r0, r4
 8005b50:	f171 0100 	sbcs.w	r1, r1, #0
 8005b54:	f082 8196 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b5c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005b60:	4321      	orrs	r1, r4
 8005b62:	f001 8197 	beq.w	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b6a:	4c8b      	ldr	r4, [pc, #556]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005b6c:	42a0      	cmp	r0, r4
 8005b6e:	f171 0100 	sbcs.w	r1, r1, #0
 8005b72:	f082 8187 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b7a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005b7e:	4321      	orrs	r1, r4
 8005b80:	f001 8154 	beq.w	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b88:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005b8c:	f171 0100 	sbcs.w	r1, r1, #0
 8005b90:	f082 8178 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b98:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005b9c:	4321      	orrs	r1, r4
 8005b9e:	f001 80b7 	beq.w	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005ba2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba6:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005baa:	42a0      	cmp	r0, r4
 8005bac:	f171 0100 	sbcs.w	r1, r1, #0
 8005bb0:	f082 8168 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bb8:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005bbc:	4321      	orrs	r1, r4
 8005bbe:	f001 8064 	beq.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bc6:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005bca:	42a0      	cmp	r0, r4
 8005bcc:	f171 0100 	sbcs.w	r1, r1, #0
 8005bd0:	f082 8158 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd8:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005bdc:	4321      	orrs	r1, r4
 8005bde:	f001 8011 	beq.w	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be6:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005bea:	42a0      	cmp	r0, r4
 8005bec:	f171 0100 	sbcs.w	r1, r1, #0
 8005bf0:	f082 8148 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf8:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8005bfc:	4321      	orrs	r1, r4
 8005bfe:	f000 871e 	beq.w	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c06:	f241 0401 	movw	r4, #4097	@ 0x1001
 8005c0a:	42a0      	cmp	r0, r4
 8005c0c:	f171 0100 	sbcs.w	r1, r1, #0
 8005c10:	f082 8138 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c18:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8005c1c:	4321      	orrs	r1, r4
 8005c1e:	f000 86a8 	beq.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c26:	f640 0401 	movw	r4, #2049	@ 0x801
 8005c2a:	42a0      	cmp	r0, r4
 8005c2c:	f171 0100 	sbcs.w	r1, r1, #0
 8005c30:	f082 8128 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c38:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005c3c:	4321      	orrs	r1, r4
 8005c3e:	f000 8632 	beq.w	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c46:	f240 4401 	movw	r4, #1025	@ 0x401
 8005c4a:	42a0      	cmp	r0, r4
 8005c4c:	f171 0100 	sbcs.w	r1, r1, #0
 8005c50:	f082 8118 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c58:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005c5c:	4321      	orrs	r1, r4
 8005c5e:	f000 85b0 	beq.w	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c66:	f240 2401 	movw	r4, #513	@ 0x201
 8005c6a:	42a0      	cmp	r0, r4
 8005c6c:	f171 0100 	sbcs.w	r1, r1, #0
 8005c70:	f082 8108 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c78:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005c7c:	4321      	orrs	r1, r4
 8005c7e:	f000 8535 	beq.w	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c86:	f240 1401 	movw	r4, #257	@ 0x101
 8005c8a:	42a0      	cmp	r0, r4
 8005c8c:	f171 0100 	sbcs.w	r1, r1, #0
 8005c90:	f082 80f8 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c98:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005c9c:	4321      	orrs	r1, r4
 8005c9e:	f000 84ba 	beq.w	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca6:	2881      	cmp	r0, #129	@ 0x81
 8005ca8:	f171 0100 	sbcs.w	r1, r1, #0
 8005cac:	f082 80ea 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cb4:	2821      	cmp	r0, #33	@ 0x21
 8005cb6:	f171 0100 	sbcs.w	r1, r1, #0
 8005cba:	d26f      	bcs.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc0:	4301      	orrs	r1, r0
 8005cc2:	f002 80df 	beq.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cca:	1e42      	subs	r2, r0, #1
 8005ccc:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005cd0:	2a20      	cmp	r2, #32
 8005cd2:	f173 0100 	sbcs.w	r1, r3, #0
 8005cd6:	f082 80d5 	bcs.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cda:	2a1f      	cmp	r2, #31
 8005cdc:	f202 80d2 	bhi.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ce0:	a101      	add	r1, pc, #4	@ (adr r1, 8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005ce2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08006049 	.word	0x08006049
 8005cec:	08006115 	.word	0x08006115
 8005cf0:	08007e85 	.word	0x08007e85
 8005cf4:	080061d5 	.word	0x080061d5
 8005cf8:	08007e85 	.word	0x08007e85
 8005cfc:	08007e85 	.word	0x08007e85
 8005d00:	08007e85 	.word	0x08007e85
 8005d04:	080062a5 	.word	0x080062a5
 8005d08:	08007e85 	.word	0x08007e85
 8005d0c:	08007e85 	.word	0x08007e85
 8005d10:	08007e85 	.word	0x08007e85
 8005d14:	08007e85 	.word	0x08007e85
 8005d18:	08007e85 	.word	0x08007e85
 8005d1c:	08007e85 	.word	0x08007e85
 8005d20:	08007e85 	.word	0x08007e85
 8005d24:	08006387 	.word	0x08006387
 8005d28:	08007e85 	.word	0x08007e85
 8005d2c:	08007e85 	.word	0x08007e85
 8005d30:	08007e85 	.word	0x08007e85
 8005d34:	08007e85 	.word	0x08007e85
 8005d38:	08007e85 	.word	0x08007e85
 8005d3c:	08007e85 	.word	0x08007e85
 8005d40:	08007e85 	.word	0x08007e85
 8005d44:	08007e85 	.word	0x08007e85
 8005d48:	08007e85 	.word	0x08007e85
 8005d4c:	08007e85 	.word	0x08007e85
 8005d50:	08007e85 	.word	0x08007e85
 8005d54:	08007e85 	.word	0x08007e85
 8005d58:	08007e85 	.word	0x08007e85
 8005d5c:	08007e85 	.word	0x08007e85
 8005d60:	08007e85 	.word	0x08007e85
 8005d64:	0800645d 	.word	0x0800645d
 8005d68:	80000001 	.word	0x80000001
 8005d6c:	40000001 	.word	0x40000001
 8005d70:	20000001 	.word	0x20000001
 8005d74:	10000001 	.word	0x10000001
 8005d78:	08000001 	.word	0x08000001
 8005d7c:	04000001 	.word	0x04000001
 8005d80:	00800001 	.word	0x00800001
 8005d84:	00400001 	.word	0x00400001
 8005d88:	00200001 	.word	0x00200001
 8005d8c:	00100001 	.word	0x00100001
 8005d90:	00080001 	.word	0x00080001
 8005d94:	00040001 	.word	0x00040001
 8005d98:	00020001 	.word	0x00020001
 8005d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005da0:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005da4:	430b      	orrs	r3, r1
 8005da6:	f000 83c4 	beq.w	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005daa:	f002 b86b 	b.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005dae:	4ba1      	ldr	r3, [pc, #644]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005db4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dc0:	d036      	beq.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dc8:	d86b      	bhi.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dd0:	d02b      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dd8:	d863      	bhi.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de0:	d01b      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de8:	d85b      	bhi.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df6:	d008      	beq.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005df8:	e053      	b.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dfa:	f107 0320 	add.w	r3, r7, #32
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff f8ba 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e08:	e04e      	b.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fa1c 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e18:	e046      	b.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e1a:	f107 0308 	add.w	r3, r7, #8
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff fb7e 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e28:	e03e      	b.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005e2a:	4b83      	ldr	r3, [pc, #524]	@ (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005e2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e2e:	e03b      	b.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e30:	4b80      	ldr	r3, [pc, #512]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e36:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e3c:	4b7d      	ldr	r3, [pc, #500]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d10c      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e4e:	4b79      	ldr	r3, [pc, #484]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	08db      	lsrs	r3, r3, #3
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	4a78      	ldr	r2, [pc, #480]	@ (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e60:	e01e      	b.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e62:	4b74      	ldr	r3, [pc, #464]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e6e:	d106      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e76:	d102      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005e78:	4b71      	ldr	r3, [pc, #452]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e7c:	e010      	b.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e8a:	d106      	bne.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e92:	d102      	bne.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005e94:	4b6b      	ldr	r3, [pc, #428]	@ (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e98:	e002      	b.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005e9e:	e003      	b.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005ea0:	e002      	b.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005ea6:	bf00      	nop
          }
        }
        break;
 8005ea8:	f001 bfef 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005eac:	4b61      	ldr	r3, [pc, #388]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005eb2:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8005eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ebe:	d036      	beq.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ec6:	d86b      	bhi.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ece:	d02b      	beq.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ed6:	d863      	bhi.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ede:	d01b      	beq.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ee6:	d85b      	bhi.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ef4:	d008      	beq.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005ef6:	e053      	b.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ef8:	f107 0320 	add.w	r3, r7, #32
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff f83b 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005f06:	e04e      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f08:	f107 0314 	add.w	r3, r7, #20
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff f99d 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005f16:	e046      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f18:	f107 0308 	add.w	r3, r7, #8
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff faff 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005f26:	e03e      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005f28:	4b43      	ldr	r3, [pc, #268]	@ (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005f2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005f2c:	e03b      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f2e:	4b41      	ldr	r3, [pc, #260]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005f38:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f4c:	4b39      	ldr	r3, [pc, #228]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	08db      	lsrs	r3, r3, #3
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	4a39      	ldr	r2, [pc, #228]	@ (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f5e:	e01e      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f60:	4b34      	ldr	r3, [pc, #208]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6c:	d106      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f74:	d102      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005f76:	4b32      	ldr	r3, [pc, #200]	@ (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7a:	e010      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f88:	d106      	bne.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f90:	d102      	bne.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005f92:	4b2c      	ldr	r3, [pc, #176]	@ (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f96:	e002      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005f9e:	e002      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005fa4:	bf00      	nop
          }
        }
        break;
 8005fa6:	f001 bf70 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005faa:	4b22      	ldr	r3, [pc, #136]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d108      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fbc:	f107 0320 	add.w	r3, r7, #32
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe ffd9 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fca:	f001 bf5e 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	2b40      	cmp	r3, #64	@ 0x40
 8005fd2:	d108      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fd4:	f107 0314 	add.w	r3, r7, #20
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff f937 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fe2:	f001 bf52 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fea:	f001 bf4e 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005fee:	4b11      	ldr	r3, [pc, #68]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ff0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d108      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006000:	f107 0320 	add.w	r3, r7, #32
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe ffb7 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800600e:	f001 bf3c 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	2b80      	cmp	r3, #128	@ 0x80
 8006016:	d108      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff f915 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006026:	f001 bf30 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800602e:	f001 bf2c 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006032:	bf00      	nop
 8006034:	44020c00 	.word	0x44020c00
 8006038:	00bb8000 	.word	0x00bb8000
 800603c:	03d09000 	.word	0x03d09000
 8006040:	003d0900 	.word	0x003d0900
 8006044:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006048:	4b9d      	ldr	r3, [pc, #628]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800604a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800605a:	f7fc ffd7 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 800605e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006060:	f001 bf13 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006064:	4b96      	ldr	r3, [pc, #600]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800606c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006070:	d10a      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2b01      	cmp	r3, #1
 8006076:	d107      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006078:	f107 0314 	add.w	r3, r7, #20
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff f8e5 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	637b      	str	r3, [r7, #52]	@ 0x34
 8006086:	e043      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006088:	4b8d      	ldr	r3, [pc, #564]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006094:	d10a      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	2b02      	cmp	r3, #2
 800609a:	d107      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800609c:	f107 0308 	add.w	r3, r7, #8
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fa3d 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060aa:	e031      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80060ac:	4b84      	ldr	r3, [pc, #528]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d10c      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d109      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060be:	4b80      	ldr	r3, [pc, #512]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	08db      	lsrs	r3, r3, #3
 80060c4:	f003 0303 	and.w	r3, r3, #3
 80060c8:	4a7e      	ldr	r2, [pc, #504]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80060ca:	fa22 f303 	lsr.w	r3, r2, r3
 80060ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80060d0:	e01e      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80060d2:	4b7b      	ldr	r3, [pc, #492]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060de:	d105      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d102      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80060e6:	4b78      	ldr	r3, [pc, #480]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80060e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ea:	e011      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80060ec:	4b74      	ldr	r3, [pc, #464]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d106      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d103      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006100:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006104:	637b      	str	r3, [r7, #52]	@ 0x34
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800610c:	f001 bebd 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006110:	f001 bebb 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006114:	4b6a      	ldr	r3, [pc, #424]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800611a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800611e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006126:	f7fc ff5b 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 800612a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800612c:	f001 bead 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006130:	4b63      	ldr	r3, [pc, #396]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800613c:	d10a      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	2b08      	cmp	r3, #8
 8006142:	d107      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006144:	f107 0314 	add.w	r3, r7, #20
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff f87f 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
 8006152:	e03d      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	2b10      	cmp	r3, #16
 8006158:	d108      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff f9de 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006168:	f001 be8f 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800616c:	4b54      	ldr	r3, [pc, #336]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d10c      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	2b18      	cmp	r3, #24
 800617c:	d109      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800617e:	4b50      	ldr	r3, [pc, #320]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	08db      	lsrs	r3, r3, #3
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	4a4e      	ldr	r2, [pc, #312]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800618a:	fa22 f303 	lsr.w	r3, r2, r3
 800618e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006190:	e01e      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006192:	4b4b      	ldr	r3, [pc, #300]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800619a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800619e:	d105      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d102      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80061a6:	4b48      	ldr	r3, [pc, #288]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80061a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80061aa:	e011      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80061ac:	4b44      	ldr	r3, [pc, #272]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d106      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	2b28      	cmp	r3, #40	@ 0x28
 80061be:	d103      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80061c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c6:	e003      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061cc:	f001 be5d 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061d0:	f001 be5b 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80061d4:	4b3a      	ldr	r3, [pc, #232]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80061da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80061de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d104      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80061e6:	f7fc fefb 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80061ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80061ec:	f001 be4d 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80061f0:	4b33      	ldr	r3, [pc, #204]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061fc:	d10a      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	2b40      	cmp	r3, #64	@ 0x40
 8006202:	d107      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006204:	f107 0314 	add.w	r3, r7, #20
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff f81f 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	637b      	str	r3, [r7, #52]	@ 0x34
 8006212:	e045      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006214:	4b2a      	ldr	r3, [pc, #168]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800621c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006220:	d10a      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	2b80      	cmp	r3, #128	@ 0x80
 8006226:	d107      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff f977 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	637b      	str	r3, [r7, #52]	@ 0x34
 8006236:	e033      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006238:	4b21      	ldr	r3, [pc, #132]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b02      	cmp	r3, #2
 8006242:	d10c      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	2bc0      	cmp	r3, #192	@ 0xc0
 8006248:	d109      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800624a:	4b1d      	ldr	r3, [pc, #116]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	4a1b      	ldr	r2, [pc, #108]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	637b      	str	r3, [r7, #52]	@ 0x34
 800625c:	e020      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800625e:	4b18      	ldr	r3, [pc, #96]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626a:	d106      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006272:	d102      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006274:	4b14      	ldr	r3, [pc, #80]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006276:	637b      	str	r3, [r7, #52]	@ 0x34
 8006278:	e012      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800627a:	4b11      	ldr	r3, [pc, #68]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800627c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	d107      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800628e:	d103      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34
 8006296:	e003      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800629c:	f001 bdf5 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062a0:	f001 bdf3 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80062a4:	4b06      	ldr	r3, [pc, #24]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062aa:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80062ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062b6:	f7fc fe93 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80062ba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80062bc:	f001 bde5 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062c0:	44020c00 	.word	0x44020c00
 80062c4:	03d09000 	.word	0x03d09000
 80062c8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80062cc:	4ba0      	ldr	r3, [pc, #640]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062d8:	d10b      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e0:	d107      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e2:	f107 0314 	add.w	r3, r7, #20
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe ffb0 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f0:	e047      	b.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80062f2:	4b97      	ldr	r3, [pc, #604]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fe:	d10b      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006306:	d107      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006308:	f107 0308 	add.w	r3, r7, #8
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff f907 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	637b      	str	r3, [r7, #52]	@ 0x34
 8006316:	e034      	b.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006318:	4b8d      	ldr	r3, [pc, #564]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d10d      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800632a:	d109      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800632c:	4b88      	ldr	r3, [pc, #544]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	08db      	lsrs	r3, r3, #3
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	4a87      	ldr	r2, [pc, #540]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
 800633c:	637b      	str	r3, [r7, #52]	@ 0x34
 800633e:	e020      	b.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006340:	4b83      	ldr	r3, [pc, #524]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800634c:	d106      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006354:	d102      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8006356:	4b80      	ldr	r3, [pc, #512]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34
 800635a:	e012      	b.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800635c:	4b7c      	ldr	r3, [pc, #496]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800635e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d107      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006370:	d103      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006376:	637b      	str	r3, [r7, #52]	@ 0x34
 8006378:	e003      	b.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800637e:	f001 bd84 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006382:	f001 bd82 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006386:	4b72      	ldr	r3, [pc, #456]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800638c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006390:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006398:	f7fc fe22 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 800639c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800639e:	f001 bd74 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80063a2:	4b6b      	ldr	r3, [pc, #428]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063ae:	d10b      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063b6:	d107      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063b8:	f107 0314 	add.w	r3, r7, #20
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe ff45 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c6:	e047      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80063c8:	4b61      	ldr	r3, [pc, #388]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d4:	d10b      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063dc:	d107      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063de:	f107 0308 	add.w	r3, r7, #8
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff f89c 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ec:	e034      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80063ee:	4b58      	ldr	r3, [pc, #352]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d10d      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006400:	d109      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006402:	4b53      	ldr	r3, [pc, #332]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	08db      	lsrs	r3, r3, #3
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	4a51      	ldr	r2, [pc, #324]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800640e:	fa22 f303 	lsr.w	r3, r2, r3
 8006412:	637b      	str	r3, [r7, #52]	@ 0x34
 8006414:	e020      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006416:	4b4e      	ldr	r3, [pc, #312]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800641e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006422:	d106      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800642a:	d102      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800642c:	4b4a      	ldr	r3, [pc, #296]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006430:	e012      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006432:	4b47      	ldr	r3, [pc, #284]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b02      	cmp	r3, #2
 800643e:	d107      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006446:	d103      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006448:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800644c:	637b      	str	r3, [r7, #52]	@ 0x34
 800644e:	e003      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006454:	f001 bd19 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006458:	f001 bd17 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800645c:	4b3c      	ldr	r3, [pc, #240]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800645e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006462:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006466:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800646e:	f7fc fdb7 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8006472:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006474:	f001 bd09 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006478:	4b35      	ldr	r3, [pc, #212]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006484:	d10b      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800648c:	d107      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800648e:	f107 0314 	add.w	r3, r7, #20
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe feda 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	637b      	str	r3, [r7, #52]	@ 0x34
 800649c:	e047      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800649e:	4b2c      	ldr	r3, [pc, #176]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064aa:	d10b      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b2:	d107      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064b4:	f107 0308 	add.w	r3, r7, #8
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff f831 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064c2:	e034      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80064c4:	4b22      	ldr	r3, [pc, #136]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d10d      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80064d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80064d6:	d109      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	08db      	lsrs	r3, r3, #3
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80064e4:	fa22 f303 	lsr.w	r3, r2, r3
 80064e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ea:	e020      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80064ec:	4b18      	ldr	r3, [pc, #96]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f8:	d106      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006500:	d102      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8006502:	4b15      	ldr	r3, [pc, #84]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006504:	637b      	str	r3, [r7, #52]	@ 0x34
 8006506:	e012      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006508:	4b11      	ldr	r3, [pc, #68]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800650a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b02      	cmp	r3, #2
 8006514:	d107      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800651c:	d103      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800651e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006522:	637b      	str	r3, [r7, #52]	@ 0x34
 8006524:	e003      	b.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800652a:	f001 bcae 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800652e:	f001 bcac 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006532:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006538:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800653c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006544:	f7fc fd4c 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8006548:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800654a:	f001 bc9e 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800654e:	bf00      	nop
 8006550:	44020c00 	.word	0x44020c00
 8006554:	03d09000 	.word	0x03d09000
 8006558:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800655c:	4ba0      	ldr	r3, [pc, #640]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006568:	d10b      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006570:	d107      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006572:	f107 0314 	add.w	r3, r7, #20
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fe68 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006580:	e047      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8006582:	4b97      	ldr	r3, [pc, #604]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800658a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800658e:	d10b      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006596:	d107      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006598:	f107 0308 	add.w	r3, r7, #8
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe ffbf 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a6:	e034      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80065a8:	4b8d      	ldr	r3, [pc, #564]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d10d      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80065ba:	d109      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065bc:	4b88      	ldr	r3, [pc, #544]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	08db      	lsrs	r3, r3, #3
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	4a87      	ldr	r2, [pc, #540]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ce:	e020      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80065d0:	4b83      	ldr	r3, [pc, #524]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065dc:	d106      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065e4:	d102      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80065e6:	4b80      	ldr	r3, [pc, #512]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80065e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ea:	e012      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80065ec:	4b7c      	ldr	r3, [pc, #496]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d107      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006600:	d103      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8006602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006606:	637b      	str	r3, [r7, #52]	@ 0x34
 8006608:	e003      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800660e:	f001 bc3c 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006612:	f001 bc3a 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8006616:	4b72      	ldr	r3, [pc, #456]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800661c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006620:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006628:	f7fc fcda 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 800662c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800662e:	f001 bc2c 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8006632:	4b6b      	ldr	r3, [pc, #428]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800663a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800663e:	d10b      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006646:	d107      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006648:	f107 0314 	add.w	r3, r7, #20
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fdfd 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	637b      	str	r3, [r7, #52]	@ 0x34
 8006656:	e047      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006658:	4b61      	ldr	r3, [pc, #388]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006664:	d10b      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800666c:	d107      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800666e:	f107 0308 	add.w	r3, r7, #8
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe ff54 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	637b      	str	r3, [r7, #52]	@ 0x34
 800667c:	e034      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800667e:	4b58      	ldr	r3, [pc, #352]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b02      	cmp	r3, #2
 8006688:	d10d      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006690:	d109      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006692:	4b53      	ldr	r3, [pc, #332]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	08db      	lsrs	r3, r3, #3
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	4a51      	ldr	r2, [pc, #324]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800669e:	fa22 f303 	lsr.w	r3, r2, r3
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a4:	e020      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80066a6:	4b4e      	ldr	r3, [pc, #312]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b2:	d106      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066ba:	d102      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80066bc:	4b4a      	ldr	r3, [pc, #296]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c0:	e012      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80066c2:	4b47      	ldr	r3, [pc, #284]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d107      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80066d6:	d103      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80066d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066de:	e003      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066e4:	f001 bbd1 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066e8:	f001 bbcf 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80066ec:	4b3c      	ldr	r3, [pc, #240]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066f2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80066f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d104      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066fe:	f7fc fc6f 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8006702:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006704:	f001 bbc1 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006708:	4b35      	ldr	r3, [pc, #212]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006714:	d10b      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800671c:	d107      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800671e:	f107 0314 	add.w	r3, r7, #20
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fd92 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	637b      	str	r3, [r7, #52]	@ 0x34
 800672c:	e047      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800672e:	4b2c      	ldr	r3, [pc, #176]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800673a:	d10b      	bne.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006742:	d107      	bne.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fee9 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
 8006752:	e034      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006754:	4b22      	ldr	r3, [pc, #136]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b02      	cmp	r3, #2
 800675e:	d10d      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006766:	d109      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006768:	4b1d      	ldr	r3, [pc, #116]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	08db      	lsrs	r3, r3, #3
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	4a1c      	ldr	r2, [pc, #112]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	637b      	str	r3, [r7, #52]	@ 0x34
 800677a:	e020      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800677c:	4b18      	ldr	r3, [pc, #96]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006788:	d106      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006790:	d102      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8006792:	4b15      	ldr	r3, [pc, #84]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
 8006796:	e012      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8006798:	4b11      	ldr	r3, [pc, #68]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800679a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d107      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80067ac:	d103      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80067ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b4:	e003      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ba:	f001 bb66 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067be:	f001 bb64 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80067c2:	4b07      	ldr	r3, [pc, #28]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80067c8:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80067cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067d4:	f7fc fc04 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80067d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80067da:	f001 bb56 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067de:	bf00      	nop
 80067e0:	44020c00 	.word	0x44020c00
 80067e4:	03d09000 	.word	0x03d09000
 80067e8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80067ec:	4ba1      	ldr	r3, [pc, #644]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067f8:	d10b      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006800:	d107      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006802:	f107 0314 	add.w	r3, r7, #20
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fd20 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006810:	e047      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006812:	4b98      	ldr	r3, [pc, #608]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800681a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800681e:	d10b      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006826:	d107      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006828:	f107 0308 	add.w	r3, r7, #8
 800682c:	4618      	mov	r0, r3
 800682e:	f7fe fe77 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	637b      	str	r3, [r7, #52]	@ 0x34
 8006836:	e034      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006838:	4b8e      	ldr	r3, [pc, #568]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b02      	cmp	r3, #2
 8006842:	d10d      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800684a:	d109      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800684c:	4b89      	ldr	r3, [pc, #548]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	08db      	lsrs	r3, r3, #3
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	4a88      	ldr	r2, [pc, #544]	@ (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006858:	fa22 f303 	lsr.w	r3, r2, r3
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
 800685e:	e020      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006860:	4b84      	ldr	r3, [pc, #528]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800686c:	d106      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006874:	d102      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006876:	4b81      	ldr	r3, [pc, #516]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
 800687a:	e012      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800687c:	4b7d      	ldr	r3, [pc, #500]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800687e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d107      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006890:	d103      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006896:	637b      	str	r3, [r7, #52]	@ 0x34
 8006898:	e003      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800689e:	f001 baf4 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068a2:	f001 baf2 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80068a6:	4b73      	ldr	r3, [pc, #460]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068b8:	f7fc fb92 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80068bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80068be:	f001 bae4 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80068c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ce:	d10a      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d107      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068d6:	f107 0314 	add.w	r3, r7, #20
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fcb6 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e4:	e043      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80068e6:	4b63      	ldr	r3, [pc, #396]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068f2:	d10a      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d107      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068fa:	f107 0308 	add.w	r3, r7, #8
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fe0e 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	637b      	str	r3, [r7, #52]	@ 0x34
 8006908:	e031      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800690a:	4b5a      	ldr	r3, [pc, #360]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b02      	cmp	r3, #2
 8006914:	d10c      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	2b03      	cmp	r3, #3
 800691a:	d109      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800691c:	4b55      	ldr	r3, [pc, #340]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	08db      	lsrs	r3, r3, #3
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	4a54      	ldr	r2, [pc, #336]	@ (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
 800692e:	e01e      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006930:	4b50      	ldr	r3, [pc, #320]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800693c:	d105      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	2b04      	cmp	r3, #4
 8006942:	d102      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006944:	4b4d      	ldr	r3, [pc, #308]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
 8006948:	e011      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800694a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800694c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b02      	cmp	r3, #2
 8006956:	d106      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	2b05      	cmp	r3, #5
 800695c:	d103      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800695e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006962:	637b      	str	r3, [r7, #52]	@ 0x34
 8006964:	e003      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800696a:	f001 ba8e 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800696e:	f001 ba8c 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006972:	4b40      	ldr	r3, [pc, #256]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006974:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006978:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800697c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006984:	f7fc fb2c 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8006988:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800698a:	f001 ba7e 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800698e:	4b39      	ldr	r3, [pc, #228]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800699a:	d10a      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699e:	2b10      	cmp	r3, #16
 80069a0:	d107      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a2:	f107 0314 	add.w	r3, r7, #20
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fc50 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b0:	e043      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80069b2:	4b30      	ldr	r3, [pc, #192]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069be:	d10a      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d107      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe fda8 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d4:	e031      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80069d6:	4b27      	ldr	r3, [pc, #156]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d10c      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	2b30      	cmp	r3, #48	@ 0x30
 80069e6:	d109      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069e8:	4b22      	ldr	r3, [pc, #136]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	08db      	lsrs	r3, r3, #3
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	4a21      	ldr	r2, [pc, #132]	@ (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
 80069f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069fa:	e01e      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80069fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a08:	d105      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	2b40      	cmp	r3, #64	@ 0x40
 8006a0e:	d102      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006a10:	4b1a      	ldr	r3, [pc, #104]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a14:	e011      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006a16:	4b17      	ldr	r3, [pc, #92]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d106      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	2b50      	cmp	r3, #80	@ 0x50
 8006a28:	d103      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a30:	e003      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a36:	f001 ba28 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a3a:	f001 ba26 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a44:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006a48:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a50:	f7fc faf2 	bl	8003038 <HAL_RCC_GetPCLK3Freq>
 8006a54:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a56:	f001 ba18 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a60:	d10e      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a62:	f107 0314 	add.w	r3, r7, #20
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fbf0 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a70:	f001 ba0b 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a74:	44020c00 	.word	0x44020c00
 8006a78:	03d09000 	.word	0x03d09000
 8006a7c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a86:	d108      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fd47 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a96:	f001 b9f8 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006a9a:	4ba4      	ldr	r3, [pc, #656]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d10d      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006aac:	d109      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006aae:	4b9f      	ldr	r3, [pc, #636]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	08db      	lsrs	r3, r3, #3
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	4a9d      	ldr	r2, [pc, #628]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006aba:	fa22 f303 	lsr.w	r3, r2, r3
 8006abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac0:	e020      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006ac2:	4b9a      	ldr	r3, [pc, #616]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ace:	d106      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ad6:	d102      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006ad8:	4b96      	ldr	r3, [pc, #600]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8006adc:	e012      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006ade:	4b93      	ldr	r3, [pc, #588]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d107      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006af2:	d103      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006af4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afa:	e003      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b00:	f001 b9c3 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b04:	f001 b9c1 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006b08:	4b88      	ldr	r3, [pc, #544]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006b1a:	f7fc fa45 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8006b1e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006b20:	f001 b9b3 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d104      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b2a:	f7fc f911 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8006b2e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b30:	f001 b9ab 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d108      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fb84 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b48:	f001 b99f 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006b4c:	4b77      	ldr	r3, [pc, #476]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b58:	d105      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d102      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006b60:	4b75      	ldr	r3, [pc, #468]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b64:	e023      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006b66:	4b71      	ldr	r3, [pc, #452]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d10c      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d109      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b78:	4b6c      	ldr	r3, [pc, #432]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	08db      	lsrs	r3, r3, #3
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	4a6b      	ldr	r2, [pc, #428]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
 8006b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b8a:	e010      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006b8c:	4b67      	ldr	r3, [pc, #412]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b98:	d105      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d102      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006ba0:	4b64      	ldr	r3, [pc, #400]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba4:	e003      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006baa:	f001 b96e 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bae:	f001 b96c 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d106      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd8:	e012      	b.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006bda:	4b54      	ldr	r3, [pc, #336]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006be4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006be8:	d106      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d103      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006bf0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf6:	e003      	b.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006bfc:	f001 b945 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c00:	f001 b943 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006c04:	4b49      	ldr	r3, [pc, #292]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c16:	f7fc f9e3 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8006c1a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c1c:	f001 b935 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c26:	d108      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c28:	f107 0308 	add.w	r3, r7, #8
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fe fc77 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c36:	f001 b928 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d10d      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c4c:	d109      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c4e:	4b37      	ldr	r3, [pc, #220]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	08db      	lsrs	r3, r3, #3
 8006c54:	f003 0303 	and.w	r3, r3, #3
 8006c58:	4a35      	ldr	r2, [pc, #212]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c60:	e011      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006c62:	4b32      	ldr	r3, [pc, #200]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c6e:	d106      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c76:	d102      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006c78:	4b2e      	ldr	r3, [pc, #184]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7c:	e003      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c82:	f001 b902 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c86:	f001 b900 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006c8a:	4b28      	ldr	r3, [pc, #160]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c90:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006c94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c9c:	f7fc f9a0 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8006ca0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ca2:	f001 b8f2 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cac:	d108      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cae:	f107 0308 	add.w	r3, r7, #8
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fc34 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cbc:	f001 b8e5 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d10d      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006cd2:	d109      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cd4:	4b15      	ldr	r3, [pc, #84]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	08db      	lsrs	r3, r3, #3
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	4a14      	ldr	r2, [pc, #80]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce6:	e011      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006ce8:	4b10      	ldr	r3, [pc, #64]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cf4:	d106      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006cfc:	d102      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d02:	e003      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d08:	f001 b8bf 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d0c:	f001 b8bd 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006d10:	4b06      	ldr	r3, [pc, #24]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d16:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006d1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10c      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006d22:	f7fc f989 	bl	8003038 <HAL_RCC_GetPCLK3Freq>
 8006d26:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d28:	f001 b8af 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d2c:	44020c00 	.word	0x44020c00
 8006d30:	03d09000 	.word	0x03d09000
 8006d34:	003d0900 	.word	0x003d0900
 8006d38:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d42:	d108      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d44:	f107 0308 	add.w	r3, r7, #8
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe fbe9 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d52:	f001 b89a 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006d56:	4b9f      	ldr	r3, [pc, #636]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d10d      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d68:	d109      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d6a:	4b9a      	ldr	r3, [pc, #616]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	08db      	lsrs	r3, r3, #3
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	4a98      	ldr	r2, [pc, #608]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006d76:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d7c:	e011      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006d7e:	4b95      	ldr	r3, [pc, #596]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d8a:	d106      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d92:	d102      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006d94:	4b91      	ldr	r3, [pc, #580]	@ (8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d98:	e003      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d9e:	f001 b874 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006da2:	f001 b872 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006da6:	4b8b      	ldr	r3, [pc, #556]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006da8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006db0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006db8:	f7fc f93e 	bl	8003038 <HAL_RCC_GetPCLK3Freq>
 8006dbc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006dbe:	f001 b864 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dc8:	d108      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dca:	f107 0308 	add.w	r3, r7, #8
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fba6 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dd8:	f001 b857 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006ddc:	4b7d      	ldr	r3, [pc, #500]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d10d      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dee:	d109      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006df0:	4b78      	ldr	r3, [pc, #480]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	08db      	lsrs	r3, r3, #3
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	4a77      	ldr	r2, [pc, #476]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e02:	e011      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006e04:	4b73      	ldr	r3, [pc, #460]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e10:	d106      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e18:	d102      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006e1a:	4b70      	ldr	r3, [pc, #448]	@ (8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1e:	e003      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e24:	f001 b831 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e28:	f001 b82f 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006e2c:	4b69      	ldr	r3, [pc, #420]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e32:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006e36:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e3e:	f7fc f8cf 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8006e42:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e44:	f001 b821 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e4e:	d108      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e50:	f107 0308 	add.w	r3, r7, #8
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe fb63 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e5e:	f001 b814 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006e62:	4b5c      	ldr	r3, [pc, #368]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d10e      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e74:	d10a      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e76:	4b57      	ldr	r3, [pc, #348]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	08db      	lsrs	r3, r3, #3
 8006e7c:	f003 0303 	and.w	r3, r3, #3
 8006e80:	4a55      	ldr	r2, [pc, #340]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006e82:	fa22 f303 	lsr.w	r3, r2, r3
 8006e86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e88:	f000 bfff 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e90:	f000 bffb 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006e94:	4b4f      	ldr	r3, [pc, #316]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e9a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ea6:	d056      	beq.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006eae:	f200 808b 	bhi.w	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb8:	d03e      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ec0:	f200 8082 	bhi.w	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eca:	d027      	beq.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ed2:	d879      	bhi.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eda:	d017      	beq.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ee2:	d871      	bhi.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ef0:	d004      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006ef2:	e069      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006ef4:	f7fc f8a0 	bl	8003038 <HAL_RCC_GetPCLK3Freq>
 8006ef8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006efa:	e068      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006efc:	f107 0314 	add.w	r3, r7, #20
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe f9a3 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f0a:	e060      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f0c:	f107 0308 	add.w	r3, r7, #8
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fb05 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f1a:	e058      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d103      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f30:	e04d      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f36:	e04a      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006f38:	4b26      	ldr	r3, [pc, #152]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f46:	d103      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006f48:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f4e:	e03e      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f54:	e03b      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f56:	4b1f      	ldr	r3, [pc, #124]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f5c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f60:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f62:	4b1c      	ldr	r3, [pc, #112]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d10c      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f74:	4b17      	ldr	r3, [pc, #92]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	08db      	lsrs	r3, r3, #3
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	4a16      	ldr	r2, [pc, #88]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
 8006f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f86:	e01e      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f88:	4b12      	ldr	r3, [pc, #72]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9c:	d102      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa2:	e010      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fb8:	d102      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fba:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fbe:	e002      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006fc4:	e003      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006fc6:	e002      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fcc:	bf00      	nop
          }
        }
        break;
 8006fce:	f000 bf5c 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006fd2:	bf00      	nop
 8006fd4:	44020c00 	.word	0x44020c00
 8006fd8:	03d09000 	.word	0x03d09000
 8006fdc:	003d0900 	.word	0x003d0900
 8006fe0:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006fe4:	4b9e      	ldr	r3, [pc, #632]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fe6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006fea:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006fee:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006ff6:	d056      	beq.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006ffe:	f200 808b 	bhi.w	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007008:	d03e      	beq.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007010:	f200 8082 	bhi.w	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800701a:	d027      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007022:	d879      	bhi.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800702a:	d017      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007032:	d871      	bhi.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007040:	d004      	beq.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007042:	e069      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007044:	f7fb ffcc 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8007048:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800704a:	e068      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704c:	f107 0314 	add.w	r3, r7, #20
 8007050:	4618      	mov	r0, r3
 8007052:	f7fe f8fb 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800705a:	e060      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800705c:	f107 0308 	add.w	r3, r7, #8
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fa5d 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800706a:	e058      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800706c:	4b7c      	ldr	r3, [pc, #496]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800706e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d103      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800707a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800707e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007080:	e04d      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007086:	e04a      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007088:	4b75      	ldr	r3, [pc, #468]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800708a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800708e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007096:	d103      	bne.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007098:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800709c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800709e:	e03e      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070a4:	e03b      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070a6:	4b6e      	ldr	r3, [pc, #440]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80070b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070b2:	4b6b      	ldr	r3, [pc, #428]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d10c      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070c4:	4b66      	ldr	r3, [pc, #408]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	4a65      	ldr	r2, [pc, #404]	@ (8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d6:	e01e      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070d8:	4b61      	ldr	r3, [pc, #388]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070e4:	d106      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ec:	d102      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80070ee:	4b5e      	ldr	r3, [pc, #376]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80070f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f2:	e010      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007100:	d106      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007108:	d102      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800710a:	4b58      	ldr	r3, [pc, #352]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800710c:	637b      	str	r3, [r7, #52]	@ 0x34
 800710e:	e002      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007114:	e003      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8007116:	e002      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800711c:	bf00      	nop
          }
        }
        break;
 800711e:	f000 beb4 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007122:	4b4f      	ldr	r3, [pc, #316]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007124:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007128:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800712c:	633b      	str	r3, [r7, #48]	@ 0x30
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007134:	d056      	beq.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800713c:	f200 808b 	bhi.w	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007146:	d03e      	beq.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800714e:	f200 8082 	bhi.w	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007158:	d027      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007160:	d879      	bhi.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007168:	d017      	beq.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007170:	d871      	bhi.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800717e:	d004      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007180:	e069      	b.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007182:	f7fb ff59 	bl	8003038 <HAL_RCC_GetPCLK3Freq>
 8007186:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007188:	e068      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800718a:	f107 0314 	add.w	r3, r7, #20
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe f85c 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007198:	e060      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800719a:	f107 0308 	add.w	r3, r7, #8
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe f9be 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071a8:	e058      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d103      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80071b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80071be:	e04d      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071c4:	e04a      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80071c6:	4b26      	ldr	r3, [pc, #152]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071d4:	d103      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80071d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80071da:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80071dc:	e03e      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071e2:	e03b      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80071ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d10c      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80071fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d109      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007202:	4b17      	ldr	r3, [pc, #92]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	08db      	lsrs	r3, r3, #3
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	4a15      	ldr	r2, [pc, #84]	@ (8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800720e:	fa22 f303 	lsr.w	r3, r2, r3
 8007212:	637b      	str	r3, [r7, #52]	@ 0x34
 8007214:	e01e      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007216:	4b12      	ldr	r3, [pc, #72]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800721e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007222:	d106      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722a:	d102      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800722c:	4b0e      	ldr	r3, [pc, #56]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007230:	e010      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007232:	4b0b      	ldr	r3, [pc, #44]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800723a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800723e:	d106      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007242:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007246:	d102      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007248:	4b08      	ldr	r3, [pc, #32]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800724a:	637b      	str	r3, [r7, #52]	@ 0x34
 800724c:	e002      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007252:	e003      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007254:	e002      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800725a:	bf00      	nop
          }
        }
        break;
 800725c:	f000 be15 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007260:	44020c00 	.word	0x44020c00
 8007264:	03d09000 	.word	0x03d09000
 8007268:	003d0900 	.word	0x003d0900
 800726c:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007270:	4b9e      	ldr	r3, [pc, #632]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007272:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007276:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800727a:	633b      	str	r3, [r7, #48]	@ 0x30
 800727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007282:	d056      	beq.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800728a:	f200 808b 	bhi.w	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800728e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007294:	d03e      	beq.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800729c:	f200 8082 	bhi.w	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072a6:	d027      	beq.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072ae:	d879      	bhi.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072b6:	d017      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072be:	d871      	bhi.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072cc:	d004      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80072ce:	e069      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80072d0:	f7fb feb2 	bl	8003038 <HAL_RCC_GetPCLK3Freq>
 80072d4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80072d6:	e068      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072d8:	f107 0314 	add.w	r3, r7, #20
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fd ffb5 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072e6:	e060      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072e8:	f107 0308 	add.w	r3, r7, #8
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe f917 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072f6:	e058      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80072f8:	4b7c      	ldr	r3, [pc, #496]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b02      	cmp	r3, #2
 8007304:	d103      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8007306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800730a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800730c:	e04d      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007312:	e04a      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007314:	4b75      	ldr	r3, [pc, #468]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800731a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800731e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007322:	d103      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007324:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800732a:	e03e      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007330:	e03b      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007332:	4b6e      	ldr	r3, [pc, #440]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007338:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800733c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800733e:	4b6b      	ldr	r3, [pc, #428]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b02      	cmp	r3, #2
 8007348:	d10c      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d109      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007350:	4b66      	ldr	r3, [pc, #408]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	08db      	lsrs	r3, r3, #3
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	4a65      	ldr	r2, [pc, #404]	@ (80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800735c:	fa22 f303 	lsr.w	r3, r2, r3
 8007360:	637b      	str	r3, [r7, #52]	@ 0x34
 8007362:	e01e      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007364:	4b61      	ldr	r3, [pc, #388]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800736c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007370:	d106      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007378:	d102      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800737a:	4b5e      	ldr	r3, [pc, #376]	@ (80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800737c:	637b      	str	r3, [r7, #52]	@ 0x34
 800737e:	e010      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007380:	4b5a      	ldr	r3, [pc, #360]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800738c:	d106      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800738e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007394:	d102      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007396:	4b58      	ldr	r3, [pc, #352]	@ (80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007398:	637b      	str	r3, [r7, #52]	@ 0x34
 800739a:	e002      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80073a0:	e003      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80073a2:	e002      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073a8:	bf00      	nop
          }
        }
        break;
 80073aa:	f000 bd6e 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80073ae:	4b4f      	ldr	r3, [pc, #316]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80073b4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80073b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80073c0:	d056      	beq.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80073c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80073c8:	f200 808b 	bhi.w	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073d2:	d03e      	beq.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073da:	f200 8082 	bhi.w	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80073de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80073e4:	d027      	beq.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80073ec:	d879      	bhi.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073f4:	d017      	beq.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80073f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073fc:	d871      	bhi.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800740a:	d004      	beq.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800740c:	e069      	b.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800740e:	f7fb fe13 	bl	8003038 <HAL_RCC_GetPCLK3Freq>
 8007412:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007414:	e068      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007416:	f107 0314 	add.w	r3, r7, #20
 800741a:	4618      	mov	r0, r3
 800741c:	f7fd ff16 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007424:	e060      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007426:	f107 0308 	add.w	r3, r7, #8
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe f878 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007434:	e058      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007436:	4b2d      	ldr	r3, [pc, #180]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b02      	cmp	r3, #2
 8007442:	d103      	bne.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8007444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007448:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800744a:	e04d      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007450:	e04a      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007452:	4b26      	ldr	r3, [pc, #152]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800745c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007460:	d103      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8007462:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007468:	e03e      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800746e:	e03b      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007470:	4b1e      	ldr	r3, [pc, #120]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007476:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800747a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800747c:	4b1b      	ldr	r3, [pc, #108]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b02      	cmp	r3, #2
 8007486:	d10c      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800748e:	4b17      	ldr	r3, [pc, #92]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	08db      	lsrs	r3, r3, #3
 8007494:	f003 0303 	and.w	r3, r3, #3
 8007498:	4a15      	ldr	r2, [pc, #84]	@ (80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800749a:	fa22 f303 	lsr.w	r3, r2, r3
 800749e:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a0:	e01e      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074a2:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ae:	d106      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80074b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b6:	d102      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80074b8:	4b0e      	ldr	r3, [pc, #56]	@ (80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80074bc:	e010      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074be:	4b0b      	ldr	r3, [pc, #44]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ca:	d106      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80074cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074d2:	d102      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80074d4:	4b08      	ldr	r3, [pc, #32]	@ (80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80074d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d8:	e002      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80074de:	e003      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80074e0:	e002      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074e6:	bf00      	nop
          }
        }
        break;
 80074e8:	f000 bccf 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074ec:	44020c00 	.word	0x44020c00
 80074f0:	03d09000 	.word	0x03d09000
 80074f4:	003d0900 	.word	0x003d0900
 80074f8:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80074fc:	4b9e      	ldr	r3, [pc, #632]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80074fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007502:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007506:	633b      	str	r3, [r7, #48]	@ 0x30
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800750e:	d056      	beq.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007512:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007516:	f200 808b 	bhi.w	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007520:	d03e      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007528:	f200 8082 	bhi.w	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800752c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007532:	d027      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800753a:	d879      	bhi.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800753c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007542:	d017      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8007544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800754a:	d871      	bhi.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800754c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007558:	d004      	beq.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800755a:	e069      	b.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800755c:	f7fb fd6c 	bl	8003038 <HAL_RCC_GetPCLK3Freq>
 8007560:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007562:	e068      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4618      	mov	r0, r3
 800756a:	f7fd fe6f 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007572:	e060      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007574:	f107 0308 	add.w	r3, r7, #8
 8007578:	4618      	mov	r0, r3
 800757a:	f7fd ffd1 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007582:	e058      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007584:	4b7c      	ldr	r3, [pc, #496]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b02      	cmp	r3, #2
 8007590:	d103      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8007592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007596:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007598:	e04d      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800759e:	e04a      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80075a0:	4b75      	ldr	r3, [pc, #468]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075ae:	d103      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80075b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80075b4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80075b6:	e03e      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075bc:	e03b      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075be:	4b6e      	ldr	r3, [pc, #440]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80075c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075ca:	4b6b      	ldr	r3, [pc, #428]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d10c      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80075d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075dc:	4b66      	ldr	r3, [pc, #408]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	08db      	lsrs	r3, r3, #3
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	4a65      	ldr	r2, [pc, #404]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ee:	e01e      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075f0:	4b61      	ldr	r3, [pc, #388]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075fc:	d106      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80075fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007604:	d102      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007606:	4b5e      	ldr	r3, [pc, #376]	@ (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34
 800760a:	e010      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800760c:	4b5a      	ldr	r3, [pc, #360]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007618:	d106      	bne.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800761a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007620:	d102      	bne.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007622:	4b58      	ldr	r3, [pc, #352]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007624:	637b      	str	r3, [r7, #52]	@ 0x34
 8007626:	e002      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800762c:	e003      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800762e:	e002      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007634:	bf00      	nop
          }
        }
        break;
 8007636:	f000 bc28 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800763a:	4b4f      	ldr	r3, [pc, #316]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800763c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007644:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007646:	4b4c      	ldr	r3, [pc, #304]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800764e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007652:	d106      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007656:	2b00      	cmp	r3, #0
 8007658:	d103      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800765a:	4b4a      	ldr	r3, [pc, #296]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800765e:	f000 bc14 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007668:	d108      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800766a:	f107 0320 	add.w	r3, r7, #32
 800766e:	4618      	mov	r0, r3
 8007670:	f7fd fc82 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007678:	f000 bc07 	b.w	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007682:	d107      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007684:	f107 0314 	add.w	r3, r7, #20
 8007688:	4618      	mov	r0, r3
 800768a:	f7fd fddf 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007692:	e3fa      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007698:	e3f7      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800769a:	4b37      	ldr	r3, [pc, #220]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800769c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d861      	bhi.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80076ac:	a201      	add	r2, pc, #4	@ (adr r2, 80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	080076c9 	.word	0x080076c9
 80076b8:	080076d9 	.word	0x080076d9
 80076bc:	080076e9 	.word	0x080076e9
 80076c0:	080076f9 	.word	0x080076f9
 80076c4:	080076ff 	.word	0x080076ff
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076c8:	f107 0320 	add.w	r3, r7, #32
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fd fc53 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076d6:	e04e      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d8:	f107 0314 	add.w	r3, r7, #20
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd fdb5 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076e6:	e046      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e8:	f107 0308 	add.w	r3, r7, #8
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fd ff17 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076f6:	e03e      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80076f8:	4b23      	ldr	r3, [pc, #140]	@ (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80076fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076fc:	e03b      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007704:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007708:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800770a:	4b1b      	ldr	r3, [pc, #108]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b02      	cmp	r3, #2
 8007714:	d10c      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8007716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d109      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800771c:	4b16      	ldr	r3, [pc, #88]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	08db      	lsrs	r3, r3, #3
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	4a15      	ldr	r2, [pc, #84]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007728:	fa22 f303 	lsr.w	r3, r2, r3
 800772c:	637b      	str	r3, [r7, #52]	@ 0x34
 800772e:	e01e      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007730:	4b11      	ldr	r3, [pc, #68]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800773c:	d106      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800773e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007744:	d102      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007746:	4b0e      	ldr	r3, [pc, #56]	@ (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007748:	637b      	str	r3, [r7, #52]	@ 0x34
 800774a:	e010      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800774c:	4b0a      	ldr	r3, [pc, #40]	@ (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007758:	d106      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007760:	d102      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007762:	4b08      	ldr	r3, [pc, #32]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34
 8007766:	e002      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800776c:	e003      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800776e:	e002      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007774:	bf00      	nop
          }
        }
        break;
 8007776:	e388      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007778:	44020c00 	.word	0x44020c00
 800777c:	03d09000 	.word	0x03d09000
 8007780:	003d0900 	.word	0x003d0900
 8007784:	017d7840 	.word	0x017d7840
 8007788:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800778c:	4ba9      	ldr	r3, [pc, #676]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800778e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007796:	633b      	str	r3, [r7, #48]	@ 0x30
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	2b20      	cmp	r3, #32
 800779c:	f200 809a 	bhi.w	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80077a0:	a201      	add	r2, pc, #4	@ (adr r2, 80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	0800782d 	.word	0x0800782d
 80077ac:	080078d5 	.word	0x080078d5
 80077b0:	080078d5 	.word	0x080078d5
 80077b4:	080078d5 	.word	0x080078d5
 80077b8:	080078d5 	.word	0x080078d5
 80077bc:	080078d5 	.word	0x080078d5
 80077c0:	080078d5 	.word	0x080078d5
 80077c4:	080078d5 	.word	0x080078d5
 80077c8:	0800783d 	.word	0x0800783d
 80077cc:	080078d5 	.word	0x080078d5
 80077d0:	080078d5 	.word	0x080078d5
 80077d4:	080078d5 	.word	0x080078d5
 80077d8:	080078d5 	.word	0x080078d5
 80077dc:	080078d5 	.word	0x080078d5
 80077e0:	080078d5 	.word	0x080078d5
 80077e4:	080078d5 	.word	0x080078d5
 80077e8:	0800784d 	.word	0x0800784d
 80077ec:	080078d5 	.word	0x080078d5
 80077f0:	080078d5 	.word	0x080078d5
 80077f4:	080078d5 	.word	0x080078d5
 80077f8:	080078d5 	.word	0x080078d5
 80077fc:	080078d5 	.word	0x080078d5
 8007800:	080078d5 	.word	0x080078d5
 8007804:	080078d5 	.word	0x080078d5
 8007808:	0800785d 	.word	0x0800785d
 800780c:	080078d5 	.word	0x080078d5
 8007810:	080078d5 	.word	0x080078d5
 8007814:	080078d5 	.word	0x080078d5
 8007818:	080078d5 	.word	0x080078d5
 800781c:	080078d5 	.word	0x080078d5
 8007820:	080078d5 	.word	0x080078d5
 8007824:	080078d5 	.word	0x080078d5
 8007828:	08007863 	.word	0x08007863
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800782c:	f107 0320 	add.w	r3, r7, #32
 8007830:	4618      	mov	r0, r3
 8007832:	f7fd fba1 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007838:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800783a:	e04e      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800783c:	f107 0314 	add.w	r3, r7, #20
 8007840:	4618      	mov	r0, r3
 8007842:	f7fd fd03 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800784a:	e046      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd fe65 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800785a:	e03e      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800785c:	4b76      	ldr	r3, [pc, #472]	@ (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007860:	e03b      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007862:	4b74      	ldr	r3, [pc, #464]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007868:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800786c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800786e:	4b71      	ldr	r3, [pc, #452]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b02      	cmp	r3, #2
 8007878:	d10c      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800787a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787c:	2b00      	cmp	r3, #0
 800787e:	d109      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007880:	4b6c      	ldr	r3, [pc, #432]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	08db      	lsrs	r3, r3, #3
 8007886:	f003 0303 	and.w	r3, r3, #3
 800788a:	4a6c      	ldr	r2, [pc, #432]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800788c:	fa22 f303 	lsr.w	r3, r2, r3
 8007890:	637b      	str	r3, [r7, #52]	@ 0x34
 8007892:	e01e      	b.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007894:	4b67      	ldr	r3, [pc, #412]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800789c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a0:	d106      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80078a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a8:	d102      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80078aa:	4b65      	ldr	r3, [pc, #404]	@ (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80078ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ae:	e010      	b.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078b0:	4b60      	ldr	r3, [pc, #384]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078bc:	d106      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80078be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078c4:	d102      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80078c6:	4b5f      	ldr	r3, [pc, #380]	@ (8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80078c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ca:	e002      	b.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80078d0:	e003      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80078d2:	e002      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078d8:	bf00      	nop
          }
        }
        break;
 80078da:	e2d6      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80078dc:	4b55      	ldr	r3, [pc, #340]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078e2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80078e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ee:	d031      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078f6:	d866      	bhi.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80078fc:	d027      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	2bc0      	cmp	r3, #192	@ 0xc0
 8007902:	d860      	bhi.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	2b80      	cmp	r3, #128	@ 0x80
 8007908:	d019      	beq.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800790a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790c:	2b80      	cmp	r3, #128	@ 0x80
 800790e:	d85a      	bhi.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	2b40      	cmp	r3, #64	@ 0x40
 800791a:	d008      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800791c:	e053      	b.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800791e:	f107 0320 	add.w	r3, r7, #32
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd fb28 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800792c:	e04e      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800792e:	f107 0314 	add.w	r3, r7, #20
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd fc8a 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800793c:	e046      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800793e:	f107 0308 	add.w	r3, r7, #8
 8007942:	4618      	mov	r0, r3
 8007944:	f7fd fdec 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800794c:	e03e      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800794e:	4b3a      	ldr	r3, [pc, #232]	@ (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007950:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007952:	e03b      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007954:	4b37      	ldr	r3, [pc, #220]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800795a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800795e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007960:	4b34      	ldr	r3, [pc, #208]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b02      	cmp	r3, #2
 800796a:	d10c      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800796c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007972:	4b30      	ldr	r3, [pc, #192]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	08db      	lsrs	r3, r3, #3
 8007978:	f003 0303 	and.w	r3, r3, #3
 800797c:	4a2f      	ldr	r2, [pc, #188]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800797e:	fa22 f303 	lsr.w	r3, r2, r3
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
 8007984:	e01e      	b.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007986:	4b2b      	ldr	r3, [pc, #172]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800798e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007992:	d106      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800799a:	d102      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800799c:	4b28      	ldr	r3, [pc, #160]	@ (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a0:	e010      	b.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079a2:	4b24      	ldr	r3, [pc, #144]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ae:	d106      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80079b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079b6:	d102      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80079b8:	4b22      	ldr	r3, [pc, #136]	@ (8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80079bc:	e002      	b.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80079c2:	e003      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80079c4:	e002      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079ca:	bf00      	nop
          }
        }
        break;
 80079cc:	e25d      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80079ce:	4b19      	ldr	r3, [pc, #100]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079d4:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80079d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d103      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80079e0:	f7fb fb14 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 80079e4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80079e6:	e250      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80079e8:	4b12      	ldr	r3, [pc, #72]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079f4:	d10b      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079fc:	d107      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079fe:	f107 0314 	add.w	r3, r7, #20
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fd fc22 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a0c:	e04f      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007a0e:	4b09      	ldr	r3, [pc, #36]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a1a:	d115      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a22:	d111      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a24:	f107 0308 	add.w	r3, r7, #8
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fd fd79 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a32:	e03c      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007a34:	44020c00 	.word	0x44020c00
 8007a38:	00bb8000 	.word	0x00bb8000
 8007a3c:	03d09000 	.word	0x03d09000
 8007a40:	003d0900 	.word	0x003d0900
 8007a44:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007a48:	4b94      	ldr	r3, [pc, #592]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d10d      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007a5a:	d109      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a5c:	4b8f      	ldr	r3, [pc, #572]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	08db      	lsrs	r3, r3, #3
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	4a8e      	ldr	r2, [pc, #568]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a6e:	e01e      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007a70:	4b8a      	ldr	r3, [pc, #552]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a7c:	d106      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a84:	d102      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007a86:	4b87      	ldr	r3, [pc, #540]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a8a:	e010      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007a8c:	4b83      	ldr	r3, [pc, #524]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a98:	d106      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007aa0:	d102      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007aa2:	4b81      	ldr	r3, [pc, #516]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa6:	e002      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aac:	e1ed      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007aae:	e1ec      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ab6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007aba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007ac2:	f7fb fab9 	bl	8003038 <HAL_RCC_GetPCLK3Freq>
 8007ac6:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007ac8:	e1df      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007aca:	4b74      	ldr	r3, [pc, #464]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ad6:	d10b      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ade:	d107      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae0:	f107 0314 	add.w	r3, r7, #20
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fd fbb1 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aee:	e045      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007af0:	4b6a      	ldr	r3, [pc, #424]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007af8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007afc:	d10b      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b04:	d107      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fd fd08 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b14:	e032      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007b16:	4b61      	ldr	r3, [pc, #388]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d10d      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b28:	d109      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	08db      	lsrs	r3, r3, #3
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	4a5a      	ldr	r2, [pc, #360]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007b36:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3c:	e01e      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007b3e:	4b57      	ldr	r3, [pc, #348]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b4a:	d106      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b52:	d102      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007b54:	4b53      	ldr	r3, [pc, #332]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b58:	e010      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007b5a:	4b50      	ldr	r3, [pc, #320]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b66:	d106      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007b6e:	d102      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007b70:	4b4d      	ldr	r3, [pc, #308]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b74:	e002      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b7a:	e186      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b7c:	e185      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007b7e:	4b47      	ldr	r3, [pc, #284]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b84:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007b88:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d103      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b90:	f7fb fa3c 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8007b94:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007b96:	e178      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007b98:	4b40      	ldr	r3, [pc, #256]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ba4:	d10b      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bac:	d107      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bae:	f107 0314 	add.w	r3, r7, #20
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fd fb4a 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bbc:	e045      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007bbe:	4b37      	ldr	r3, [pc, #220]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bca:	d10b      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bd2:	d107      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd4:	f107 0308 	add.w	r3, r7, #8
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fd fca1 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be2:	e032      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007be4:	4b2d      	ldr	r3, [pc, #180]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d10d      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007bf6:	d109      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bf8:	4b28      	ldr	r3, [pc, #160]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	08db      	lsrs	r3, r3, #3
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	4a27      	ldr	r2, [pc, #156]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007c04:	fa22 f303 	lsr.w	r3, r2, r3
 8007c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c0a:	e01e      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007c0c:	4b23      	ldr	r3, [pc, #140]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c18:	d106      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c20:	d102      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007c22:	4b20      	ldr	r3, [pc, #128]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c26:	e010      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007c28:	4b1c      	ldr	r3, [pc, #112]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c34:	d106      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c38:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007c3c:	d102      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c42:	e002      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c48:	e11f      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c4a:	e11e      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007c4c:	4b13      	ldr	r3, [pc, #76]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d85f      	bhi.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007c75 	.word	0x08007c75
 8007c68:	08007c7d 	.word	0x08007c7d
 8007c6c:	08007c8d 	.word	0x08007c8d
 8007c70:	08007cad 	.word	0x08007cad

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007c74:	f7fb f998 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8007c78:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007c7a:	e053      	b.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c7c:	f107 0320 	add.w	r3, r7, #32
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fd f979 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c8a:	e04b      	b.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c8c:	f107 0314 	add.w	r3, r7, #20
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fadb 	bl	800524c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c9a:	e043      	b.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007c9c:	44020c00 	.word	0x44020c00
 8007ca0:	03d09000 	.word	0x03d09000
 8007ca4:	003d0900 	.word	0x003d0900
 8007ca8:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cac:	4b79      	ldr	r3, [pc, #484]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007cae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cb2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cb8:	4b76      	ldr	r3, [pc, #472]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d10c      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d109      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cca:	4b72      	ldr	r3, [pc, #456]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	08db      	lsrs	r3, r3, #3
 8007cd0:	f003 0303 	and.w	r3, r3, #3
 8007cd4:	4a70      	ldr	r2, [pc, #448]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cdc:	e01e      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cde:	4b6d      	ldr	r3, [pc, #436]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cea:	d106      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf2:	d102      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007cf4:	4b69      	ldr	r3, [pc, #420]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf8:	e010      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cfa:	4b66      	ldr	r3, [pc, #408]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d06:	d106      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d0e:	d102      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d10:	4b63      	ldr	r3, [pc, #396]	@ (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d14:	e002      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007d1a:	e003      	b.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007d1c:	e002      	b.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d22:	bf00      	nop
          }
        }
        break;
 8007d24:	e0b1      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007d26:	4b5b      	ldr	r3, [pc, #364]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d2c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d30:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007d32:	4b58      	ldr	r3, [pc, #352]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d106      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d103      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4c:	e01f      	b.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007d4e:	4b51      	ldr	r3, [pc, #324]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d5c:	d106      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	2b40      	cmp	r3, #64	@ 0x40
 8007d62:	d103      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007d64:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d6a:	e010      	b.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007d6c:	4b49      	ldr	r3, [pc, #292]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d78:	d106      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7c:	2b80      	cmp	r3, #128	@ 0x80
 8007d7e:	d103      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007d80:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d86:	e002      	b.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007d8c:	e07d      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d8e:	e07c      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007d90:	4b40      	ldr	r3, [pc, #256]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d96:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d9a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da8:	d105      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007db0:	4b3c      	ldr	r3, [pc, #240]	@ (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db4:	e031      	b.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007db6:	4b37      	ldr	r3, [pc, #220]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dc2:	d10a      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	d107      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dca:	f107 0320 	add.w	r3, r7, #32
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fd f8d2 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd8:	e01f      	b.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007dda:	4b2e      	ldr	r3, [pc, #184]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d106      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d103      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df4:	e011      	b.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007df6:	4b27      	ldr	r3, [pc, #156]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e04:	d106      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	2b30      	cmp	r3, #48	@ 0x30
 8007e0a:	d103      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007e0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e12:	e002      	b.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007e18:	e037      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e1a:	e036      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2a:	2b10      	cmp	r3, #16
 8007e2c:	d107      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e2e:	f107 0320 	add.w	r3, r7, #32
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd f8a0 	bl	8004f78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007e3c:	e025      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007e3e:	4b15      	ldr	r3, [pc, #84]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e4a:	d10a      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d107      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e52:	f107 0308 	add.w	r3, r7, #8
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fd fb62 	bl	8005520 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e60:	e00f      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007e62:	4b0c      	ldr	r3, [pc, #48]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e6e:	d105      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	2b30      	cmp	r3, #48	@ 0x30
 8007e74:	d102      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007e76:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e7a:	e002      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007e80:	e003      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e82:	e002      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e88:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	373c      	adds	r7, #60	@ 0x3c
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd90      	pop	{r4, r7, pc}
 8007e94:	44020c00 	.word	0x44020c00
 8007e98:	03d09000 	.word	0x03d09000
 8007e9c:	003d0900 	.word	0x003d0900
 8007ea0:	017d7840 	.word	0x017d7840
 8007ea4:	02dc6c00 	.word	0x02dc6c00

08007ea8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007eb0:	4b48      	ldr	r3, [pc, #288]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a47      	ldr	r2, [pc, #284]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007eb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007eba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ebc:	f7f9 fa92 	bl	80013e4 <HAL_GetTick>
 8007ec0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ec2:	e008      	b.n	8007ed6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ec4:	f7f9 fa8e 	bl	80013e4 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e07a      	b.n	8007fcc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f0      	bne.n	8007ec4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007eea:	f023 0303 	bic.w	r3, r3, #3
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6811      	ldr	r1, [r2, #0]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6852      	ldr	r2, [r2, #4]
 8007ef6:	0212      	lsls	r2, r2, #8
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	4936      	ldr	r1, [pc, #216]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	025b      	lsls	r3, r3, #9
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	041b      	lsls	r3, r3, #16
 8007f1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	061b      	lsls	r3, r3, #24
 8007f2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f30:	4928      	ldr	r1, [pc, #160]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007f36:	4b27      	ldr	r3, [pc, #156]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	f023 020c 	bic.w	r2, r3, #12
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	4924      	ldr	r1, [pc, #144]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007f48:	4b22      	ldr	r3, [pc, #136]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	f023 0220 	bic.w	r2, r3, #32
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	491f      	ldr	r1, [pc, #124]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f62:	491c      	ldr	r1, [pc, #112]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007f68:	4b1a      	ldr	r3, [pc, #104]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6c:	4a19      	ldr	r2, [pc, #100]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f6e:	f023 0310 	bic.w	r3, r3, #16
 8007f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007f74:	4b17      	ldr	r3, [pc, #92]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f7c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6a12      	ldr	r2, [r2, #32]
 8007f84:	00d2      	lsls	r2, r2, #3
 8007f86:	4913      	ldr	r1, [pc, #76]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007f8c:	4b11      	ldr	r3, [pc, #68]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	4a10      	ldr	r2, [pc, #64]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f92:	f043 0310 	orr.w	r3, r3, #16
 8007f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007f98:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007f9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fa2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fa4:	f7f9 fa1e 	bl	80013e4 <HAL_GetTick>
 8007fa8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007faa:	e008      	b.n	8007fbe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fac:	f7f9 fa1a 	bl	80013e4 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d901      	bls.n	8007fbe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e006      	b.n	8007fcc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fbe:	4b05      	ldr	r3, [pc, #20]	@ (8007fd4 <RCCEx_PLL2_Config+0x12c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0f0      	beq.n	8007fac <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007fca:	2300      	movs	r3, #0

}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	44020c00 	.word	0x44020c00

08007fd8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007fe0:	4b48      	ldr	r3, [pc, #288]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a47      	ldr	r2, [pc, #284]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 8007fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fec:	f7f9 f9fa 	bl	80013e4 <HAL_GetTick>
 8007ff0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ff2:	e008      	b.n	8008006 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ff4:	f7f9 f9f6 	bl	80013e4 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e07a      	b.n	80080fc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008006:	4b3f      	ldr	r3, [pc, #252]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1f0      	bne.n	8007ff4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008012:	4b3c      	ldr	r3, [pc, #240]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 8008014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008016:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6811      	ldr	r1, [r2, #0]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6852      	ldr	r2, [r2, #4]
 8008026:	0212      	lsls	r2, r2, #8
 8008028:	430a      	orrs	r2, r1
 800802a:	4936      	ldr	r1, [pc, #216]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 800802c:	4313      	orrs	r3, r2
 800802e:	630b      	str	r3, [r1, #48]	@ 0x30
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	3b01      	subs	r3, #1
 8008036:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	3b01      	subs	r3, #1
 8008040:	025b      	lsls	r3, r3, #9
 8008042:	b29b      	uxth	r3, r3
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	3b01      	subs	r3, #1
 800804c:	041b      	lsls	r3, r3, #16
 800804e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	3b01      	subs	r3, #1
 800805a:	061b      	lsls	r3, r3, #24
 800805c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008060:	4928      	ldr	r1, [pc, #160]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 8008062:	4313      	orrs	r3, r2
 8008064:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008066:	4b27      	ldr	r3, [pc, #156]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 8008068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806a:	f023 020c 	bic.w	r2, r3, #12
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	4924      	ldr	r1, [pc, #144]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 8008074:	4313      	orrs	r3, r2
 8008076:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008078:	4b22      	ldr	r3, [pc, #136]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 800807a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807c:	f023 0220 	bic.w	r2, r3, #32
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	491f      	ldr	r1, [pc, #124]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 8008086:	4313      	orrs	r3, r2
 8008088:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800808a:	4b1e      	ldr	r3, [pc, #120]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 800808c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008092:	491c      	ldr	r1, [pc, #112]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 8008094:	4313      	orrs	r3, r2
 8008096:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008098:	4b1a      	ldr	r3, [pc, #104]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 800809a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809c:	4a19      	ldr	r2, [pc, #100]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 800809e:	f023 0310 	bic.w	r3, r3, #16
 80080a2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80080a4:	4b17      	ldr	r3, [pc, #92]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 80080a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080ac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6a12      	ldr	r2, [r2, #32]
 80080b4:	00d2      	lsls	r2, r2, #3
 80080b6:	4913      	ldr	r1, [pc, #76]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80080bc:	4b11      	ldr	r3, [pc, #68]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 80080be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c0:	4a10      	ldr	r2, [pc, #64]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 80080c2:	f043 0310 	orr.w	r3, r3, #16
 80080c6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80080c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 80080ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080d4:	f7f9 f986 	bl	80013e4 <HAL_GetTick>
 80080d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080da:	e008      	b.n	80080ee <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080dc:	f7f9 f982 	bl	80013e4 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d901      	bls.n	80080ee <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e006      	b.n	80080fc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080ee:	4b05      	ldr	r3, [pc, #20]	@ (8008104 <RCCEx_PLL3_Config+0x12c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0f0      	beq.n	80080dc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	44020c00 	.word	0x44020c00

08008108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e042      	b.n	80081a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008120:	2b00      	cmp	r3, #0
 8008122:	d106      	bne.n	8008132 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7f8 fcf1 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2224      	movs	r2, #36	@ 0x24
 8008136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0201 	bic.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fe24 	bl	8008da0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fc33 	bl	80089c4 <UART_SetConfig>
 800815e:	4603      	mov	r3, r0
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e01b      	b.n	80081a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fea3 	bl	8008ee4 <UART_CheckIdleState>
 800819e:	4603      	mov	r3, r0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	@ 0x28
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081be:	2b20      	cmp	r3, #32
 80081c0:	f040 808b 	bne.w	80082da <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <HAL_UART_Transmit+0x28>
 80081ca:	88fb      	ldrh	r3, [r7, #6]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e083      	b.n	80082dc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081de:	2b80      	cmp	r3, #128	@ 0x80
 80081e0:	d107      	bne.n	80081f2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081f0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2221      	movs	r2, #33	@ 0x21
 80081fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008202:	f7f9 f8ef 	bl	80013e4 <HAL_GetTick>
 8008206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	88fa      	ldrh	r2, [r7, #6]
 8008214:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008220:	d108      	bne.n	8008234 <HAL_UART_Transmit+0x8c>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d104      	bne.n	8008234 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	e003      	b.n	800823c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008238:	2300      	movs	r3, #0
 800823a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800823c:	e030      	b.n	80082a0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2200      	movs	r2, #0
 8008246:	2180      	movs	r1, #128	@ 0x80
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 fef5 	bl	8009038 <UART_WaitOnFlagUntilTimeout>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e03d      	b.n	80082dc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10b      	bne.n	800827e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008274:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	3302      	adds	r3, #2
 800827a:	61bb      	str	r3, [r7, #24]
 800827c:	e007      	b.n	800828e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	781a      	ldrb	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	3301      	adds	r3, #1
 800828c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1c8      	bne.n	800823e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2200      	movs	r2, #0
 80082b4:	2140      	movs	r1, #64	@ 0x40
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 febe 	bl	8009038 <UART_WaitOnFlagUntilTimeout>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2220      	movs	r2, #32
 80082c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e006      	b.n	80082dc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	e000      	b.n	80082dc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80082da:	2302      	movs	r3, #2
  }
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3720      	adds	r7, #32
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08a      	sub	sp, #40	@ 0x28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	4613      	mov	r3, r2
 80082f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	d14b      	bne.n	8008394 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <HAL_UART_Receive_IT+0x24>
 8008302:	88fb      	ldrh	r3, [r7, #6]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e044      	b.n	8008396 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831c:	2b40      	cmp	r3, #64	@ 0x40
 800831e:	d107      	bne.n	8008330 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800832e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a1a      	ldr	r2, [pc, #104]	@ (80083a0 <HAL_UART_Receive_IT+0xbc>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d024      	beq.n	8008384 <HAL_UART_Receive_IT+0xa0>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a19      	ldr	r2, [pc, #100]	@ (80083a4 <HAL_UART_Receive_IT+0xc0>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d01f      	beq.n	8008384 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d018      	beq.n	8008384 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	613b      	str	r3, [r7, #16]
   return(result);
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008366:	627b      	str	r3, [r7, #36]	@ 0x24
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008370:	623b      	str	r3, [r7, #32]
 8008372:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	69f9      	ldr	r1, [r7, #28]
 8008376:	6a3a      	ldr	r2, [r7, #32]
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	61bb      	str	r3, [r7, #24]
   return(result);
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e6      	bne.n	8008352 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	461a      	mov	r2, r3
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fec2 	bl	8009114 <UART_Start_Receive_IT>
 8008390:	4603      	mov	r3, r0
 8008392:	e000      	b.n	8008396 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008394:	2302      	movs	r3, #2
  }
}
 8008396:	4618      	mov	r0, r3
 8008398:	3728      	adds	r7, #40	@ 0x28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	44002400 	.word	0x44002400
 80083a4:	54002400 	.word	0x54002400

080083a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b0ae      	sub	sp, #184	@ 0xb8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80083d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80083d6:	4013      	ands	r3, r2
 80083d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80083dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d11b      	bne.n	800841c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083e8:	f003 0320 	and.w	r3, r3, #32
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d015      	beq.n	800841c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d105      	bne.n	8008408 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d009      	beq.n	800841c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 82ac 	beq.w	800896a <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	4798      	blx	r3
      }
      return;
 800841a:	e2a6      	b.n	800896a <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800841c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 80fd 	beq.w	8008620 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008426:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800842a:	4b7a      	ldr	r3, [pc, #488]	@ (8008614 <HAL_UART_IRQHandler+0x26c>)
 800842c:	4013      	ands	r3, r2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d106      	bne.n	8008440 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008436:	4b78      	ldr	r3, [pc, #480]	@ (8008618 <HAL_UART_IRQHandler+0x270>)
 8008438:	4013      	ands	r3, r2
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80f0 	beq.w	8008620 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008440:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d011      	beq.n	8008470 <HAL_UART_IRQHandler+0xc8>
 800844c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00b      	beq.n	8008470 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2201      	movs	r2, #1
 800845e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008466:	f043 0201 	orr.w	r2, r3, #1
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008470:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d011      	beq.n	80084a0 <HAL_UART_IRQHandler+0xf8>
 800847c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2202      	movs	r2, #2
 800848e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008496:	f043 0204 	orr.w	r2, r3, #4
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d011      	beq.n	80084d0 <HAL_UART_IRQHandler+0x128>
 80084ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00b      	beq.n	80084d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2204      	movs	r2, #4
 80084be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c6:	f043 0202 	orr.w	r2, r3, #2
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084d4:	f003 0308 	and.w	r3, r3, #8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d017      	beq.n	800850c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80084e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80084ec:	4b49      	ldr	r3, [pc, #292]	@ (8008614 <HAL_UART_IRQHandler+0x26c>)
 80084ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2208      	movs	r2, #8
 80084fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008502:	f043 0208 	orr.w	r2, r3, #8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800850c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008514:	2b00      	cmp	r3, #0
 8008516:	d012      	beq.n	800853e <HAL_UART_IRQHandler+0x196>
 8008518:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800851c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00c      	beq.n	800853e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800852c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008534:	f043 0220 	orr.w	r2, r3, #32
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8212 	beq.w	800896e <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800854a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	d013      	beq.n	800857e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008556:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	d105      	bne.n	800856e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d007      	beq.n	800857e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008584:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008592:	2b40      	cmp	r3, #64	@ 0x40
 8008594:	d005      	beq.n	80085a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008596:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800859a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d02e      	beq.n	8008600 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fed8 	bl	8009358 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b2:	2b40      	cmp	r3, #64	@ 0x40
 80085b4:	d120      	bne.n	80085f8 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d017      	beq.n	80085f0 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c6:	4a15      	ldr	r2, [pc, #84]	@ (800861c <HAL_UART_IRQHandler+0x274>)
 80085c8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7f9 f943 	bl	800185c <HAL_DMA_Abort_IT>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d019      	beq.n	8008610 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80085ea:	4610      	mov	r0, r2
 80085ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ee:	e00f      	b.n	8008610 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f9d1 	bl	8008998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f6:	e00b      	b.n	8008610 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f9cd 	bl	8008998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085fe:	e007      	b.n	8008610 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f9c9 	bl	8008998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800860e:	e1ae      	b.n	800896e <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008610:	bf00      	nop
    return;
 8008612:	e1ac      	b.n	800896e <HAL_UART_IRQHandler+0x5c6>
 8008614:	10000001 	.word	0x10000001
 8008618:	04000120 	.word	0x04000120
 800861c:	08009425 	.word	0x08009425

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008624:	2b01      	cmp	r3, #1
 8008626:	f040 8142 	bne.w	80088ae <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800862a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800862e:	f003 0310 	and.w	r3, r3, #16
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 813b 	beq.w	80088ae <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008638:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8134 	beq.w	80088ae <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2210      	movs	r2, #16
 800864c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008658:	2b40      	cmp	r3, #64	@ 0x40
 800865a:	f040 80aa 	bne.w	80087b2 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008668:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800866c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 8084 	beq.w	800877e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800867c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008680:	429a      	cmp	r2, r3
 8008682:	d27c      	bcs.n	800877e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800868a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008696:	2b81      	cmp	r3, #129	@ 0x81
 8008698:	d060      	beq.n	800875c <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80086a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086c0:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80086c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80086ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e2      	bne.n	800869a <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3308      	adds	r3, #8
 80086da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086de:	e853 3f00 	ldrex	r3, [r3]
 80086e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3308      	adds	r3, #8
 80086f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80086f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e3      	bne.n	80086d4 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2220      	movs	r2, #32
 8008710:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008722:	e853 3f00 	ldrex	r3, [r3]
 8008726:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800872a:	f023 0310 	bic.w	r3, r3, #16
 800872e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800873c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800873e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008742:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800874a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e4      	bne.n	800871a <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008756:	4618      	mov	r0, r3
 8008758:	f7f9 f804 	bl	8001764 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800876e:	b29b      	uxth	r3, r3
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	b29b      	uxth	r3, r3
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f918 	bl	80089ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800877c:	e0f9      	b.n	8008972 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008784:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008788:	429a      	cmp	r2, r3
 800878a:	f040 80f2 	bne.w	8008972 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008796:	2b81      	cmp	r3, #129	@ 0x81
 8008798:	f040 80eb 	bne.w	8008972 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f8fe 	bl	80089ac <HAL_UARTEx_RxEventCallback>
      return;
 80087b0:	e0df      	b.n	8008972 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087be:	b29b      	uxth	r3, r3
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 80d1 	beq.w	8008976 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 80087d4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 80cc 	beq.w	8008976 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008800:	647b      	str	r3, [r7, #68]	@ 0x44
 8008802:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800880e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e4      	bne.n	80087de <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3308      	adds	r3, #8
 800881a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	623b      	str	r3, [r7, #32]
   return(result);
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800882a:	f023 0301 	bic.w	r3, r3, #1
 800882e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3308      	adds	r3, #8
 8008838:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800883c:	633a      	str	r2, [r7, #48]	@ 0x30
 800883e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800884a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e1      	bne.n	8008814 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	60fb      	str	r3, [r7, #12]
   return(result);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f023 0310 	bic.w	r3, r3, #16
 8008878:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	461a      	mov	r2, r3
 8008882:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	69b9      	ldr	r1, [r7, #24]
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	617b      	str	r3, [r7, #20]
   return(result);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e4      	bne.n	8008864 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2202      	movs	r2, #2
 800889e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088a0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f880 	bl	80089ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088ac:	e063      	b.n	8008976 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00e      	beq.n	80088d8 <HAL_UART_IRQHandler+0x530>
 80088ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d008      	beq.n	80088d8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80088ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fb21 	bl	8009f18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088d6:	e051      	b.n	800897c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80088d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d014      	beq.n	800890e <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80088e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d105      	bne.n	80088fc <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d008      	beq.n	800890e <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008900:	2b00      	cmp	r3, #0
 8008902:	d03a      	beq.n	800897a <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
    }
    return;
 800890c:	e035      	b.n	800897a <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800890e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <HAL_UART_IRQHandler+0x586>
 800891a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800891e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fd92 	bl	8009450 <UART_EndTransmit_IT>
    return;
 800892c:	e026      	b.n	800897c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800892e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <HAL_UART_IRQHandler+0x5a6>
 800893a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800893e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 fafa 	bl	8009f40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800894c:	e016      	b.n	800897c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800894e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008952:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d010      	beq.n	800897c <HAL_UART_IRQHandler+0x5d4>
 800895a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800895e:	2b00      	cmp	r3, #0
 8008960:	da0c      	bge.n	800897c <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 fae2 	bl	8009f2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008968:	e008      	b.n	800897c <HAL_UART_IRQHandler+0x5d4>
      return;
 800896a:	bf00      	nop
 800896c:	e006      	b.n	800897c <HAL_UART_IRQHandler+0x5d4>
    return;
 800896e:	bf00      	nop
 8008970:	e004      	b.n	800897c <HAL_UART_IRQHandler+0x5d4>
      return;
 8008972:	bf00      	nop
 8008974:	e002      	b.n	800897c <HAL_UART_IRQHandler+0x5d4>
      return;
 8008976:	bf00      	nop
 8008978:	e000      	b.n	800897c <HAL_UART_IRQHandler+0x5d4>
    return;
 800897a:	bf00      	nop
  }
}
 800897c:	37b8      	adds	r7, #184	@ 0xb8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop

08008984 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089c8:	b094      	sub	sp, #80	@ 0x50
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80089d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	4b78      	ldr	r3, [pc, #480]	@ (8008bbc <UART_SetConfig+0x1f8>)
 80089da:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	431a      	orrs	r2, r3
 80089ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4971      	ldr	r1, [pc, #452]	@ (8008bc0 <UART_SetConfig+0x1fc>)
 80089fc:	4019      	ands	r1, r3
 80089fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a04:	430b      	orrs	r3, r1
 8008a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a14:	68d9      	ldr	r1, [r3, #12]
 8008a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	ea40 0301 	orr.w	r3, r0, r1
 8008a1e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	4b64      	ldr	r3, [pc, #400]	@ (8008bbc <UART_SetConfig+0x1f8>)
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d009      	beq.n	8008a44 <UART_SetConfig+0x80>
 8008a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	4b63      	ldr	r3, [pc, #396]	@ (8008bc4 <UART_SetConfig+0x200>)
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d004      	beq.n	8008a44 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3c:	6a1a      	ldr	r2, [r3, #32]
 8008a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a40:	4313      	orrs	r3, r2
 8008a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008a4e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	f023 000f 	bic.w	r0, r3, #15
 8008a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	ea40 0301 	orr.w	r3, r0, r1
 8008a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	4b53      	ldr	r3, [pc, #332]	@ (8008bc8 <UART_SetConfig+0x204>)
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d102      	bne.n	8008a84 <UART_SetConfig+0xc0>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a82:	e066      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	4b50      	ldr	r3, [pc, #320]	@ (8008bcc <UART_SetConfig+0x208>)
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d102      	bne.n	8008a94 <UART_SetConfig+0xd0>
 8008a8e:	2302      	movs	r3, #2
 8008a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a92:	e05e      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	4b4d      	ldr	r3, [pc, #308]	@ (8008bd0 <UART_SetConfig+0x20c>)
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d102      	bne.n	8008aa4 <UART_SetConfig+0xe0>
 8008a9e:	2304      	movs	r3, #4
 8008aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aa2:	e056      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8008bd4 <UART_SetConfig+0x210>)
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d102      	bne.n	8008ab4 <UART_SetConfig+0xf0>
 8008aae:	2308      	movs	r3, #8
 8008ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ab2:	e04e      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	4b47      	ldr	r3, [pc, #284]	@ (8008bd8 <UART_SetConfig+0x214>)
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d102      	bne.n	8008ac4 <UART_SetConfig+0x100>
 8008abe:	2310      	movs	r3, #16
 8008ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ac2:	e046      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	4b44      	ldr	r3, [pc, #272]	@ (8008bdc <UART_SetConfig+0x218>)
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d102      	bne.n	8008ad4 <UART_SetConfig+0x110>
 8008ace:	2320      	movs	r3, #32
 8008ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad2:	e03e      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	4b41      	ldr	r3, [pc, #260]	@ (8008be0 <UART_SetConfig+0x21c>)
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d102      	bne.n	8008ae4 <UART_SetConfig+0x120>
 8008ade:	2340      	movs	r3, #64	@ 0x40
 8008ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae2:	e036      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8008be4 <UART_SetConfig+0x220>)
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d102      	bne.n	8008af4 <UART_SetConfig+0x130>
 8008aee:	2380      	movs	r3, #128	@ 0x80
 8008af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008af2:	e02e      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	4b3b      	ldr	r3, [pc, #236]	@ (8008be8 <UART_SetConfig+0x224>)
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d103      	bne.n	8008b06 <UART_SetConfig+0x142>
 8008afe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b04:	e025      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	4b38      	ldr	r3, [pc, #224]	@ (8008bec <UART_SetConfig+0x228>)
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d103      	bne.n	8008b18 <UART_SetConfig+0x154>
 8008b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b16:	e01c      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b34      	ldr	r3, [pc, #208]	@ (8008bf0 <UART_SetConfig+0x22c>)
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d103      	bne.n	8008b2a <UART_SetConfig+0x166>
 8008b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b28:	e013      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	4b31      	ldr	r3, [pc, #196]	@ (8008bf4 <UART_SetConfig+0x230>)
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d103      	bne.n	8008b3c <UART_SetConfig+0x178>
 8008b34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b3a:	e00a      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	4b1e      	ldr	r3, [pc, #120]	@ (8008bbc <UART_SetConfig+0x1f8>)
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d103      	bne.n	8008b4e <UART_SetConfig+0x18a>
 8008b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b4c:	e001      	b.n	8008b52 <UART_SetConfig+0x18e>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	4b19      	ldr	r3, [pc, #100]	@ (8008bbc <UART_SetConfig+0x1f8>)
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d005      	beq.n	8008b68 <UART_SetConfig+0x1a4>
 8008b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	4b18      	ldr	r3, [pc, #96]	@ (8008bc4 <UART_SetConfig+0x200>)
 8008b62:	429a      	cmp	r2, r3
 8008b64:	f040 8094 	bne.w	8008c90 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	623b      	str	r3, [r7, #32]
 8008b6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b74:	f7fc fe3e 	bl	80057f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b78:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80f7 	beq.w	8008d70 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf8 <UART_SetConfig+0x234>)
 8008b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b94:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	4413      	add	r3, r2
 8008ba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d305      	bcc.n	8008bb2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d924      	bls.n	8008bfc <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008bb8:	e069      	b.n	8008c8e <UART_SetConfig+0x2ca>
 8008bba:	bf00      	nop
 8008bbc:	44002400 	.word	0x44002400
 8008bc0:	cfff69f3 	.word	0xcfff69f3
 8008bc4:	54002400 	.word	0x54002400
 8008bc8:	40013800 	.word	0x40013800
 8008bcc:	40004400 	.word	0x40004400
 8008bd0:	40004800 	.word	0x40004800
 8008bd4:	40004c00 	.word	0x40004c00
 8008bd8:	40005000 	.word	0x40005000
 8008bdc:	40006400 	.word	0x40006400
 8008be0:	40007800 	.word	0x40007800
 8008be4:	40007c00 	.word	0x40007c00
 8008be8:	40008000 	.word	0x40008000
 8008bec:	40006800 	.word	0x40006800
 8008bf0:	40006c00 	.word	0x40006c00
 8008bf4:	40008400 	.word	0x40008400
 8008bf8:	0800a3c4 	.word	0x0800a3c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bfe:	2200      	movs	r2, #0
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	61fa      	str	r2, [r7, #28]
 8008c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c08:	4a64      	ldr	r2, [pc, #400]	@ (8008d9c <UART_SetConfig+0x3d8>)
 8008c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2200      	movs	r2, #0
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	617a      	str	r2, [r7, #20]
 8008c16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c1e:	f7f7 fb35 	bl	800028c <__aeabi_uldivmod>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4610      	mov	r0, r2
 8008c28:	4619      	mov	r1, r3
 8008c2a:	f04f 0200 	mov.w	r2, #0
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	020b      	lsls	r3, r1, #8
 8008c34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c38:	0202      	lsls	r2, r0, #8
 8008c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c3c:	6849      	ldr	r1, [r1, #4]
 8008c3e:	0849      	lsrs	r1, r1, #1
 8008c40:	2000      	movs	r0, #0
 8008c42:	460c      	mov	r4, r1
 8008c44:	4605      	mov	r5, r0
 8008c46:	eb12 0804 	adds.w	r8, r2, r4
 8008c4a:	eb43 0905 	adc.w	r9, r3, r5
 8008c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	60bb      	str	r3, [r7, #8]
 8008c56:	60fa      	str	r2, [r7, #12]
 8008c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	4649      	mov	r1, r9
 8008c60:	f7f7 fb14 	bl	800028c <__aeabi_uldivmod>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4613      	mov	r3, r2
 8008c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c72:	d308      	bcc.n	8008c86 <UART_SetConfig+0x2c2>
 8008c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c7a:	d204      	bcs.n	8008c86 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c82:	60da      	str	r2, [r3, #12]
 8008c84:	e003      	b.n	8008c8e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008c8c:	e070      	b.n	8008d70 <UART_SetConfig+0x3ac>
 8008c8e:	e06f      	b.n	8008d70 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c98:	d13c      	bne.n	8008d14 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	607a      	str	r2, [r7, #4]
 8008ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ca6:	f7fc fda5 	bl	80057f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008caa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d05e      	beq.n	8008d70 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb6:	4a39      	ldr	r2, [pc, #228]	@ (8008d9c <UART_SetConfig+0x3d8>)
 8008cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cc4:	005a      	lsls	r2, r3, #1
 8008cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	441a      	add	r2, r3
 8008cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cda:	2b0f      	cmp	r3, #15
 8008cdc:	d916      	bls.n	8008d0c <UART_SetConfig+0x348>
 8008cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ce4:	d212      	bcs.n	8008d0c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f023 030f 	bic.w	r3, r3, #15
 8008cee:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf2:	085b      	lsrs	r3, r3, #1
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008d08:	60da      	str	r2, [r3, #12]
 8008d0a:	e031      	b.n	8008d70 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008d12:	e02d      	b.n	8008d70 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d16:	2200      	movs	r2, #0
 8008d18:	469a      	mov	sl, r3
 8008d1a:	4693      	mov	fp, r2
 8008d1c:	4650      	mov	r0, sl
 8008d1e:	4659      	mov	r1, fp
 8008d20:	f7fc fd68 	bl	80057f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d24:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d021      	beq.n	8008d70 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d30:	4a1a      	ldr	r2, [pc, #104]	@ (8008d9c <UART_SetConfig+0x3d8>)
 8008d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d36:	461a      	mov	r2, r3
 8008d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	441a      	add	r2, r3
 8008d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d52:	2b0f      	cmp	r3, #15
 8008d54:	d909      	bls.n	8008d6a <UART_SetConfig+0x3a6>
 8008d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d5c:	d205      	bcs.n	8008d6a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60da      	str	r2, [r3, #12]
 8008d68:	e002      	b.n	8008d70 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d72:	2201      	movs	r2, #1
 8008d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d82:	2200      	movs	r2, #0
 8008d84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	2200      	movs	r2, #0
 8008d8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3750      	adds	r7, #80	@ 0x50
 8008d94:	46bd      	mov	sp, r7
 8008d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0800a3c4 	.word	0x0800a3c4

08008da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dac:	f003 0308 	and.w	r3, r3, #8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00a      	beq.n	8008dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00a      	beq.n	8008e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e12:	f003 0304 	and.w	r3, r3, #4
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e34:	f003 0310 	and.w	r3, r3, #16
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01a      	beq.n	8008eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e9e:	d10a      	bne.n	8008eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	605a      	str	r2, [r3, #4]
  }
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b098      	sub	sp, #96	@ 0x60
 8008ee8:	af02      	add	r7, sp, #8
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ef4:	f7f8 fa76 	bl	80013e4 <HAL_GetTick>
 8008ef8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	d12f      	bne.n	8008f68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f10:	2200      	movs	r2, #0
 8008f12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f88e 	bl	8009038 <UART_WaitOnFlagUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d022      	beq.n	8008f68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2a:	e853 3f00 	ldrex	r3, [r3]
 8008f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f48:	e841 2300 	strex	r3, r2, [r1]
 8008f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e6      	bne.n	8008f22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2220      	movs	r2, #32
 8008f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e063      	b.n	8009030 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	d149      	bne.n	800900a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f857 	bl	8009038 <UART_WaitOnFlagUntilTimeout>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d03c      	beq.n	800900a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e6      	bne.n	8008f90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f023 0301 	bic.w	r3, r3, #1
 8008fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3308      	adds	r3, #8
 8008fe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fe2:	61fa      	str	r2, [r7, #28]
 8008fe4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	69b9      	ldr	r1, [r7, #24]
 8008fe8:	69fa      	ldr	r2, [r7, #28]
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	617b      	str	r3, [r7, #20]
   return(result);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e5      	bne.n	8008fc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e012      	b.n	8009030 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2220      	movs	r2, #32
 800900e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2220      	movs	r2, #32
 8009016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3758      	adds	r7, #88	@ 0x58
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	4613      	mov	r3, r2
 8009046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009048:	e04f      	b.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009050:	d04b      	beq.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009052:	f7f8 f9c7 	bl	80013e4 <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	429a      	cmp	r2, r3
 8009060:	d302      	bcc.n	8009068 <UART_WaitOnFlagUntilTimeout+0x30>
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e04e      	b.n	800910a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d037      	beq.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b80      	cmp	r3, #128	@ 0x80
 800907e:	d034      	beq.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b40      	cmp	r3, #64	@ 0x40
 8009084:	d031      	beq.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	f003 0308 	and.w	r3, r3, #8
 8009090:	2b08      	cmp	r3, #8
 8009092:	d110      	bne.n	80090b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2208      	movs	r2, #8
 800909a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 f95b 	bl	8009358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2208      	movs	r2, #8
 80090a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e029      	b.n	800910a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090c4:	d111      	bne.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 f941 	bl	8009358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2220      	movs	r2, #32
 80090da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e00f      	b.n	800910a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69da      	ldr	r2, [r3, #28]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4013      	ands	r3, r2
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	bf0c      	ite	eq
 80090fa:	2301      	moveq	r3, #1
 80090fc:	2300      	movne	r3, #0
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	429a      	cmp	r2, r3
 8009106:	d0a0      	beq.n	800904a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009114:	b480      	push	{r7}
 8009116:	b0a3      	sub	sp, #140	@ 0x8c
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	4613      	mov	r3, r2
 8009120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	88fa      	ldrh	r2, [r7, #6]
 800912c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	88fa      	ldrh	r2, [r7, #6]
 8009134:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009146:	d10e      	bne.n	8009166 <UART_Start_Receive_IT+0x52>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <UART_Start_Receive_IT+0x48>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009156:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800915a:	e02d      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	22ff      	movs	r2, #255	@ 0xff
 8009160:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009164:	e028      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10d      	bne.n	800918a <UART_Start_Receive_IT+0x76>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d104      	bne.n	8009180 <UART_Start_Receive_IT+0x6c>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	22ff      	movs	r2, #255	@ 0xff
 800917a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800917e:	e01b      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	227f      	movs	r2, #127	@ 0x7f
 8009184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009188:	e016      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009192:	d10d      	bne.n	80091b0 <UART_Start_Receive_IT+0x9c>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <UART_Start_Receive_IT+0x92>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	227f      	movs	r2, #127	@ 0x7f
 80091a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091a4:	e008      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	223f      	movs	r2, #63	@ 0x3f
 80091aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091ae:	e003      	b.n	80091b8 <UART_Start_Receive_IT+0xa4>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2222      	movs	r2, #34	@ 0x22
 80091c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80091d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091da:	f043 0301 	orr.w	r3, r3, #1
 80091de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3308      	adds	r3, #8
 80091e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80091ec:	673a      	str	r2, [r7, #112]	@ 0x70
 80091ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80091f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80091fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e3      	bne.n	80091c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009208:	d14f      	bne.n	80092aa <UART_Start_Receive_IT+0x196>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009210:	88fa      	ldrh	r2, [r7, #6]
 8009212:	429a      	cmp	r2, r3
 8009214:	d349      	bcc.n	80092aa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800921e:	d107      	bne.n	8009230 <UART_Start_Receive_IT+0x11c>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d103      	bne.n	8009230 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4a47      	ldr	r2, [pc, #284]	@ (8009348 <UART_Start_Receive_IT+0x234>)
 800922c:	675a      	str	r2, [r3, #116]	@ 0x74
 800922e:	e002      	b.n	8009236 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4a46      	ldr	r2, [pc, #280]	@ (800934c <UART_Start_Receive_IT+0x238>)
 8009234:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d01a      	beq.n	8009274 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800924c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800924e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009252:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009262:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009266:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800926e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e4      	bne.n	800923e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3308      	adds	r3, #8
 800927a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800928a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3308      	adds	r3, #8
 8009292:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009294:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009296:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800929a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80092a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e5      	bne.n	8009274 <UART_Start_Receive_IT+0x160>
 80092a8:	e046      	b.n	8009338 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092b2:	d107      	bne.n	80092c4 <UART_Start_Receive_IT+0x1b0>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d103      	bne.n	80092c4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4a24      	ldr	r2, [pc, #144]	@ (8009350 <UART_Start_Receive_IT+0x23c>)
 80092c0:	675a      	str	r2, [r3, #116]	@ 0x74
 80092c2:	e002      	b.n	80092ca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4a23      	ldr	r2, [pc, #140]	@ (8009354 <UART_Start_Receive_IT+0x240>)
 80092c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d019      	beq.n	8009306 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80092e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80092fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e6      	bne.n	80092d2 <UART_Start_Receive_IT+0x1be>
 8009304:	e018      	b.n	8009338 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	613b      	str	r3, [r7, #16]
   return(result);
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f043 0320 	orr.w	r3, r3, #32
 800931a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	461a      	mov	r2, r3
 8009322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009324:	623b      	str	r3, [r7, #32]
 8009326:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009328:	69f9      	ldr	r1, [r7, #28]
 800932a:	6a3a      	ldr	r2, [r7, #32]
 800932c:	e841 2300 	strex	r3, r2, [r1]
 8009330:	61bb      	str	r3, [r7, #24]
   return(result);
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e6      	bne.n	8009306 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	378c      	adds	r7, #140	@ 0x8c
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	08009ba1 	.word	0x08009ba1
 800934c:	08009831 	.word	0x08009831
 8009350:	0800966d 	.word	0x0800966d
 8009354:	080094a9 	.word	0x080094a9

08009358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b095      	sub	sp, #84	@ 0x54
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800937e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009380:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800938c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e6      	bne.n	8009360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093a8:	f023 0301 	bic.w	r3, r3, #1
 80093ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e3      	bne.n	8009392 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d118      	bne.n	8009404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f023 0310 	bic.w	r3, r3, #16
 80093e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093f0:	61bb      	str	r3, [r7, #24]
 80093f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	6979      	ldr	r1, [r7, #20]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	e841 2300 	strex	r3, r2, [r1]
 80093fc:	613b      	str	r3, [r7, #16]
   return(result);
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e6      	bne.n	80093d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2220      	movs	r2, #32
 8009408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009418:	bf00      	nop
 800941a:	3754      	adds	r7, #84	@ 0x54
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f7ff faa8 	bl	8008998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009448:	bf00      	nop
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	60bb      	str	r3, [r7, #8]
   return(result);
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800946c:	61fb      	str	r3, [r7, #28]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	61bb      	str	r3, [r7, #24]
 8009478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	6979      	ldr	r1, [r7, #20]
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	613b      	str	r3, [r7, #16]
   return(result);
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e6      	bne.n	8009458 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7ff fa73 	bl	8008984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800949e:	bf00      	nop
 80094a0:	3720      	adds	r7, #32
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b09c      	sub	sp, #112	@ 0x70
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094c0:	2b22      	cmp	r3, #34	@ 0x22
 80094c2:	f040 80c3 	bne.w	800964c <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80094d4:	b2d9      	uxtb	r1, r3
 80094d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094e0:	400a      	ands	r2, r1
 80094e2:	b2d2      	uxtb	r2, r2
 80094e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ea:	1c5a      	adds	r2, r3, #1
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	3b01      	subs	r3, #1
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009508:	b29b      	uxth	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	f040 80a6 	bne.w	800965c <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800951e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800952e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009530:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009534:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800953c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e6      	bne.n	8009510 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3308      	adds	r3, #8
 8009548:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009554:	f023 0301 	bic.w	r3, r3, #1
 8009558:	667b      	str	r3, [r7, #100]	@ 0x64
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3308      	adds	r3, #8
 8009560:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009562:	647a      	str	r2, [r7, #68]	@ 0x44
 8009564:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e5      	bne.n	8009542 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a35      	ldr	r2, [pc, #212]	@ (8009664 <UART_RxISR_8BIT+0x1bc>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d024      	beq.n	80095de <UART_RxISR_8BIT+0x136>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a33      	ldr	r2, [pc, #204]	@ (8009668 <UART_RxISR_8BIT+0x1c0>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d01f      	beq.n	80095de <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d018      	beq.n	80095de <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	623b      	str	r3, [r7, #32]
   return(result);
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80095cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095d2:	e841 2300 	strex	r3, r2, [r1]
 80095d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1e6      	bne.n	80095ac <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d12e      	bne.n	8009644 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f023 0310 	bic.w	r3, r3, #16
 8009600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800960a:	61fb      	str	r3, [r7, #28]
 800960c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	69b9      	ldr	r1, [r7, #24]
 8009610:	69fa      	ldr	r2, [r7, #28]
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	617b      	str	r3, [r7, #20]
   return(result);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e6      	bne.n	80095ec <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	f003 0310 	and.w	r3, r3, #16
 8009628:	2b10      	cmp	r3, #16
 800962a:	d103      	bne.n	8009634 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2210      	movs	r2, #16
 8009632:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff f9b5 	bl	80089ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009642:	e00b      	b.n	800965c <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7f7 f9ed 	bl	8000a24 <HAL_UART_RxCpltCallback>
}
 800964a:	e007      	b.n	800965c <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699a      	ldr	r2, [r3, #24]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0208 	orr.w	r2, r2, #8
 800965a:	619a      	str	r2, [r3, #24]
}
 800965c:	bf00      	nop
 800965e:	3770      	adds	r7, #112	@ 0x70
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	44002400 	.word	0x44002400
 8009668:	54002400 	.word	0x54002400

0800966c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b09c      	sub	sp, #112	@ 0x70
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800967a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009684:	2b22      	cmp	r3, #34	@ 0x22
 8009686:	f040 80c3 	bne.w	8009810 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009690:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009698:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800969a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800969e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80096a2:	4013      	ands	r3, r2
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ae:	1c9a      	adds	r2, r3, #2
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	3b01      	subs	r3, #1
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f040 80a6 	bne.w	8009820 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80096f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e6      	bne.n	80096d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009718:	f023 0301 	bic.w	r3, r3, #1
 800971c:	663b      	str	r3, [r7, #96]	@ 0x60
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3308      	adds	r3, #8
 8009724:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009726:	643a      	str	r2, [r7, #64]	@ 0x40
 8009728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800972c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e5      	bne.n	8009706 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a35      	ldr	r2, [pc, #212]	@ (8009828 <UART_RxISR_16BIT+0x1bc>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d024      	beq.n	80097a2 <UART_RxISR_16BIT+0x136>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a33      	ldr	r2, [pc, #204]	@ (800982c <UART_RxISR_16BIT+0x1c0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d01f      	beq.n	80097a2 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d018      	beq.n	80097a2 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	61fb      	str	r3, [r7, #28]
   return(result);
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009784:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800978e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009790:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800979c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e6      	bne.n	8009770 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d12e      	bne.n	8009808 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f023 0310 	bic.w	r3, r3, #16
 80097c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80097ce:	61bb      	str	r3, [r7, #24]
 80097d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6979      	ldr	r1, [r7, #20]
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	613b      	str	r3, [r7, #16]
   return(result);
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e6      	bne.n	80097b0 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b10      	cmp	r3, #16
 80097ee:	d103      	bne.n	80097f8 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2210      	movs	r2, #16
 80097f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff f8d3 	bl	80089ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009806:	e00b      	b.n	8009820 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7f7 f90b 	bl	8000a24 <HAL_UART_RxCpltCallback>
}
 800980e:	e007      	b.n	8009820 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	699a      	ldr	r2, [r3, #24]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f042 0208 	orr.w	r2, r2, #8
 800981e:	619a      	str	r2, [r3, #24]
}
 8009820:	bf00      	nop
 8009822:	3770      	adds	r7, #112	@ 0x70
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	44002400 	.word	0x44002400
 800982c:	54002400 	.word	0x54002400

08009830 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b0ac      	sub	sp, #176	@ 0xb0
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800983e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009866:	2b22      	cmp	r3, #34	@ 0x22
 8009868:	f040 8188 	bne.w	8009b7c <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009872:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009876:	e12b      	b.n	8009ad0 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009882:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009886:	b2d9      	uxtb	r1, r3
 8009888:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800988c:	b2da      	uxtb	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009892:	400a      	ands	r2, r1
 8009894:	b2d2      	uxtb	r2, r2
 8009896:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	3b01      	subs	r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80098be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098c2:	f003 0307 	and.w	r3, r3, #7
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d053      	beq.n	8009972 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d011      	beq.n	80098fa <UART_RxISR_8BIT_FIFOEN+0xca>
 80098d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00b      	beq.n	80098fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2201      	movs	r2, #1
 80098e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f0:	f043 0201 	orr.w	r2, r3, #1
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098fe:	f003 0302 	and.w	r3, r3, #2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d011      	beq.n	800992a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00b      	beq.n	800992a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2202      	movs	r2, #2
 8009918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009920:	f043 0204 	orr.w	r2, r3, #4
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800992a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800992e:	f003 0304 	and.w	r3, r3, #4
 8009932:	2b00      	cmp	r3, #0
 8009934:	d011      	beq.n	800995a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2204      	movs	r2, #4
 8009948:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009950:	f043 0202 	orr.w	r2, r3, #2
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009960:	2b00      	cmp	r3, #0
 8009962:	d006      	beq.n	8009972 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7ff f817 	bl	8008998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009978:	b29b      	uxth	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	f040 80a8 	bne.w	8009ad0 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009986:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800998e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099a4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80099a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80099aa:	e841 2300 	strex	r3, r2, [r1]
 80099ae:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80099b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e4      	bne.n	8009980 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099c0:	e853 3f00 	ldrex	r3, [r3]
 80099c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80099c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80099c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099cc:	f023 0301 	bic.w	r3, r3, #1
 80099d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3308      	adds	r3, #8
 80099da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099de:	66ba      	str	r2, [r7, #104]	@ 0x68
 80099e0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80099e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80099e6:	e841 2300 	strex	r3, r2, [r1]
 80099ea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80099ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1e1      	bne.n	80099b6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a62      	ldr	r2, [pc, #392]	@ (8009b94 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d026      	beq.n	8009a5e <UART_RxISR_8BIT_FIFOEN+0x22e>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a60      	ldr	r2, [pc, #384]	@ (8009b98 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d021      	beq.n	8009a5e <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01a      	beq.n	8009a5e <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	461a      	mov	r2, r3
 8009a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a4c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e4      	bne.n	8009a28 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d130      	bne.n	8009ac8 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7c:	f023 0310 	bic.w	r3, r3, #16
 8009a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e4      	bne.n	8009a6c <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b10      	cmp	r3, #16
 8009aae:	d103      	bne.n	8009ab8 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2210      	movs	r2, #16
 8009ab6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7fe ff73 	bl	80089ac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009ac6:	e00e      	b.n	8009ae6 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7f6 ffab 	bl	8000a24 <HAL_UART_RxCpltCallback>
        break;
 8009ace:	e00a      	b.n	8009ae6 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ad0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d006      	beq.n	8009ae6 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8009ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009adc:	f003 0320 	and.w	r3, r3, #32
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f47f aec9 	bne.w	8009878 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009af0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d049      	beq.n	8009b8c <UART_RxISR_8BIT_FIFOEN+0x35c>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009afe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d242      	bcs.n	8009b8c <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3308      	adds	r3, #8
 8009b26:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b32:	e841 2300 	strex	r3, r2, [r1]
 8009b36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e3      	bne.n	8009b06 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a16      	ldr	r2, [pc, #88]	@ (8009b9c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8009b42:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f043 0320 	orr.w	r3, r3, #32
 8009b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b66:	61bb      	str	r3, [r7, #24]
 8009b68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6a:	6979      	ldr	r1, [r7, #20]
 8009b6c:	69ba      	ldr	r2, [r7, #24]
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	613b      	str	r3, [r7, #16]
   return(result);
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e4      	bne.n	8009b44 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b7a:	e007      	b.n	8009b8c <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f042 0208 	orr.w	r2, r2, #8
 8009b8a:	619a      	str	r2, [r3, #24]
}
 8009b8c:	bf00      	nop
 8009b8e:	37b0      	adds	r7, #176	@ 0xb0
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	44002400 	.word	0x44002400
 8009b98:	54002400 	.word	0x54002400
 8009b9c:	080094a9 	.word	0x080094a9

08009ba0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b0ae      	sub	sp, #184	@ 0xb8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009bae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bd6:	2b22      	cmp	r3, #34	@ 0x22
 8009bd8:	f040 818c 	bne.w	8009ef4 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009be2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009be6:	e12f      	b.n	8009e48 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bee:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009bfa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009bfe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009c02:	4013      	ands	r3, r2
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c10:	1c9a      	adds	r2, r3, #2
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d053      	beq.n	8009ce6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d011      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00b      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c64:	f043 0201 	orr.w	r2, r3, #1
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d011      	beq.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c94:	f043 0204 	orr.w	r2, r3, #4
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ca2:	f003 0304 	and.w	r3, r3, #4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d011      	beq.n	8009cce <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2204      	movs	r2, #4
 8009cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cc4:	f043 0202 	orr.w	r2, r3, #2
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d006      	beq.n	8009ce6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7fe fe5d 	bl	8008998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f040 80aa 	bne.w	8009e48 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	461a      	mov	r2, r3
 8009d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d22:	e841 2300 	strex	r3, r2, [r1]
 8009d26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1e2      	bne.n	8009cf4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3308      	adds	r3, #8
 8009d34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3308      	adds	r3, #8
 8009d52:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e1      	bne.n	8009d2e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a62      	ldr	r2, [pc, #392]	@ (8009f0c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d026      	beq.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x236>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a60      	ldr	r2, [pc, #384]	@ (8009f10 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d021      	beq.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01a      	beq.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009db4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009dc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009dc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e4      	bne.n	8009da0 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d130      	bne.n	8009e40 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dec:	e853 3f00 	ldrex	r3, [r3]
 8009df0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df4:	f023 0310 	bic.w	r3, r3, #16
 8009df8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	461a      	mov	r2, r3
 8009e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e08:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e0e:	e841 2300 	strex	r3, r2, [r1]
 8009e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e4      	bne.n	8009de4 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b10      	cmp	r3, #16
 8009e26:	d103      	bne.n	8009e30 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2210      	movs	r2, #16
 8009e2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7fe fdb7 	bl	80089ac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009e3e:	e00e      	b.n	8009e5e <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7f6 fdef 	bl	8000a24 <HAL_UART_RxCpltCallback>
        break;
 8009e46:	e00a      	b.n	8009e5e <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e48:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d006      	beq.n	8009e5e <UART_RxISR_16BIT_FIFOEN+0x2be>
 8009e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e54:	f003 0320 	and.w	r3, r3, #32
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f47f aec5 	bne.w	8009be8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e64:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e68:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d049      	beq.n	8009f04 <UART_RxISR_16BIT_FIFOEN+0x364>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e76:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d242      	bcs.n	8009f04 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3308      	adds	r3, #8
 8009e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e88:	e853 3f00 	ldrex	r3, [r3]
 8009e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009ea2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e3      	bne.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a16      	ldr	r2, [pc, #88]	@ (8009f14 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009eba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f043 0320 	orr.w	r3, r3, #32
 8009ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ede:	61fb      	str	r3, [r7, #28]
 8009ee0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	69b9      	ldr	r1, [r7, #24]
 8009ee4:	69fa      	ldr	r2, [r7, #28]
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	617b      	str	r3, [r7, #20]
   return(result);
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e4      	bne.n	8009ebc <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ef2:	e007      	b.n	8009f04 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	699a      	ldr	r2, [r3, #24]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f042 0208 	orr.w	r2, r2, #8
 8009f02:	619a      	str	r2, [r3, #24]
}
 8009f04:	bf00      	nop
 8009f06:	37b8      	adds	r7, #184	@ 0xb8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	44002400 	.word	0x44002400
 8009f10:	54002400 	.word	0x54002400
 8009f14:	0800966d 	.word	0x0800966d

08009f18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d101      	bne.n	8009f6a <HAL_UARTEx_DisableFifoMode+0x16>
 8009f66:	2302      	movs	r3, #2
 8009f68:	e027      	b.n	8009fba <HAL_UARTEx_DisableFifoMode+0x66>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2224      	movs	r2, #36	@ 0x24
 8009f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 0201 	bic.w	r2, r2, #1
 8009f90:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e02d      	b.n	800a03a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2224      	movs	r2, #36	@ 0x24
 8009fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0201 	bic.w	r2, r2, #1
 800a004:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f850 	bl	800a0c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2220      	movs	r2, #32
 800a02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a052:	2b01      	cmp	r3, #1
 800a054:	d101      	bne.n	800a05a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a056:	2302      	movs	r3, #2
 800a058:	e02d      	b.n	800a0b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2224      	movs	r2, #36	@ 0x24
 800a066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 0201 	bic.w	r2, r2, #1
 800a080:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f812 	bl	800a0c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d108      	bne.n	800a0e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0e0:	e031      	b.n	800a146 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0e2:	2308      	movs	r3, #8
 800a0e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0e6:	2308      	movs	r3, #8
 800a0e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	0e5b      	lsrs	r3, r3, #25
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f003 0307 	and.w	r3, r3, #7
 800a0f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	0f5b      	lsrs	r3, r3, #29
 800a102:	b2db      	uxtb	r3, r3
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a10a:	7bbb      	ldrb	r3, [r7, #14]
 800a10c:	7b3a      	ldrb	r2, [r7, #12]
 800a10e:	4911      	ldr	r1, [pc, #68]	@ (800a154 <UARTEx_SetNbDataToProcess+0x94>)
 800a110:	5c8a      	ldrb	r2, [r1, r2]
 800a112:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a116:	7b3a      	ldrb	r2, [r7, #12]
 800a118:	490f      	ldr	r1, [pc, #60]	@ (800a158 <UARTEx_SetNbDataToProcess+0x98>)
 800a11a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a11c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a120:	b29a      	uxth	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	7b7a      	ldrb	r2, [r7, #13]
 800a12c:	4909      	ldr	r1, [pc, #36]	@ (800a154 <UARTEx_SetNbDataToProcess+0x94>)
 800a12e:	5c8a      	ldrb	r2, [r1, r2]
 800a130:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a134:	7b7a      	ldrb	r2, [r7, #13]
 800a136:	4908      	ldr	r1, [pc, #32]	@ (800a158 <UARTEx_SetNbDataToProcess+0x98>)
 800a138:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a13a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a146:	bf00      	nop
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	0800a3dc 	.word	0x0800a3dc
 800a158:	0800a3e4 	.word	0x0800a3e4

0800a15c <memset>:
 800a15c:	4402      	add	r2, r0
 800a15e:	4603      	mov	r3, r0
 800a160:	4293      	cmp	r3, r2
 800a162:	d100      	bne.n	800a166 <memset+0xa>
 800a164:	4770      	bx	lr
 800a166:	f803 1b01 	strb.w	r1, [r3], #1
 800a16a:	e7f9      	b.n	800a160 <memset+0x4>

0800a16c <__libc_init_array>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	4d0d      	ldr	r5, [pc, #52]	@ (800a1a4 <__libc_init_array+0x38>)
 800a170:	2600      	movs	r6, #0
 800a172:	4c0d      	ldr	r4, [pc, #52]	@ (800a1a8 <__libc_init_array+0x3c>)
 800a174:	1b64      	subs	r4, r4, r5
 800a176:	10a4      	asrs	r4, r4, #2
 800a178:	42a6      	cmp	r6, r4
 800a17a:	d109      	bne.n	800a190 <__libc_init_array+0x24>
 800a17c:	4d0b      	ldr	r5, [pc, #44]	@ (800a1ac <__libc_init_array+0x40>)
 800a17e:	2600      	movs	r6, #0
 800a180:	4c0b      	ldr	r4, [pc, #44]	@ (800a1b0 <__libc_init_array+0x44>)
 800a182:	f000 f825 	bl	800a1d0 <_init>
 800a186:	1b64      	subs	r4, r4, r5
 800a188:	10a4      	asrs	r4, r4, #2
 800a18a:	42a6      	cmp	r6, r4
 800a18c:	d105      	bne.n	800a19a <__libc_init_array+0x2e>
 800a18e:	bd70      	pop	{r4, r5, r6, pc}
 800a190:	f855 3b04 	ldr.w	r3, [r5], #4
 800a194:	3601      	adds	r6, #1
 800a196:	4798      	blx	r3
 800a198:	e7ee      	b.n	800a178 <__libc_init_array+0xc>
 800a19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19e:	3601      	adds	r6, #1
 800a1a0:	4798      	blx	r3
 800a1a2:	e7f2      	b.n	800a18a <__libc_init_array+0x1e>
 800a1a4:	0800a3f4 	.word	0x0800a3f4
 800a1a8:	0800a3f4 	.word	0x0800a3f4
 800a1ac:	0800a3f4 	.word	0x0800a3f4
 800a1b0:	0800a3f8 	.word	0x0800a3f8

0800a1b4 <memcpy>:
 800a1b4:	440a      	add	r2, r1
 800a1b6:	1e43      	subs	r3, r0, #1
 800a1b8:	4291      	cmp	r1, r2
 800a1ba:	d100      	bne.n	800a1be <memcpy+0xa>
 800a1bc:	4770      	bx	lr
 800a1be:	b510      	push	{r4, lr}
 800a1c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c4:	4291      	cmp	r1, r2
 800a1c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1ca:	d1f9      	bne.n	800a1c0 <memcpy+0xc>
 800a1cc:	bd10      	pop	{r4, pc}
	...

0800a1d0 <_init>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr

0800a1dc <_fini>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	bf00      	nop
 800a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e2:	bc08      	pop	{r3}
 800a1e4:	469e      	mov	lr, r3
 800a1e6:	4770      	bx	lr
