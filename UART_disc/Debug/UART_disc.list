
UART_disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800a4a4  0800a4a4  0001a4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a610  0800a610  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a610  0800a610  0001a610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a618  0800a618  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a618  0800a618  0001a618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a61c  0800a61c  0001a61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000c60  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000cf0  20000cf0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000200e7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004316  00000000  00000000  000401a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  000444c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001320  00000000  00000000  00045940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002584e  00000000  00000000  00046c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b821  00000000  00000000  0006c4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf0cc  00000000  00000000  00087ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00156d9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006068  00000000  00000000  00156df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a48c 	.word	0x0800a48c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a48c 	.word	0x0800a48c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
	 */
	//memset(UartBuf,0,10);
	HAL_UART_Receive_IT(&huart2, UartBuf, 6);
 8000570:	2206      	movs	r2, #6
 8000572:	4904      	ldr	r1, [pc, #16]	; (8000584 <HAL_UART_RxCpltCallback+0x1c>)
 8000574:	4804      	ldr	r0, [pc, #16]	; (8000588 <HAL_UART_RxCpltCallback+0x20>)
 8000576:	f004 fb53 	bl	8004c20 <HAL_UART_Receive_IT>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000bc 	.word	0x200000bc
 8000588:	20000570 	.word	0x20000570

0800058c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b09e      	sub	sp, #120	; 0x78
 8000590:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000592:	f000 fd77 	bl	8001084 <HAL_Init>

	/* USER CODE BEGIN Init */
	FILE *fsptr;
	char WrDat[]="hello there";
 8000596:	4a3e      	ldr	r2, [pc, #248]	; (8000690 <main+0x104>)
 8000598:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800059c:	ca07      	ldmia	r2, {r0, r1, r2}
 800059e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char RdDat[100];
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a2:	f000 f88f 	bl	80006c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a6:	f000 f9b5 	bl	8000914 <MX_GPIO_Init>
	MX_I2C1_Init();
 80005aa:	f000 f8f5 	bl	8000798 <MX_I2C1_Init>
	MX_I2S3_Init();
 80005ae:	f000 f921 	bl	80007f4 <MX_I2S3_Init>
	MX_SPI1_Init();
 80005b2:	f000 f94f 	bl	8000854 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 80005b6:	f008 f859 	bl	800866c <MX_USB_HOST_Init>
	MX_USART2_UART_Init();
 80005ba:	f000 f981 	bl	80008c0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, UartBuf, 6);
 80005be:	2206      	movs	r2, #6
 80005c0:	4934      	ldr	r1, [pc, #208]	; (8000694 <main+0x108>)
 80005c2:	4835      	ldr	r0, [pc, #212]	; (8000698 <main+0x10c>)
 80005c4:	f004 fb2c 	bl	8004c20 <HAL_UART_Receive_IT>
	// Open a file for writing
	fsptr = fopen("example.txt", "w");
 80005c8:	4934      	ldr	r1, [pc, #208]	; (800069c <main+0x110>)
 80005ca:	4835      	ldr	r0, [pc, #212]	; (80006a0 <main+0x114>)
 80005cc:	f008 fe52 	bl	8009274 <fopen>
 80005d0:	6778      	str	r0, [r7, #116]	; 0x74
	if (fsptr == NULL) {
 80005d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d104      	bne.n	80005e2 <main+0x56>
		printf("Error opening file for writing!\n");
 80005d8:	4832      	ldr	r0, [pc, #200]	; (80006a4 <main+0x118>)
 80005da:	f009 fa0f 	bl	80099fc <puts>
		return 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	e052      	b.n	8000688 <main+0xfc>
	}

	// Write data to the file
	if (fputs(WrDat, fsptr) == EOF) {
 80005e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005e6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80005e8:	4618      	mov	r0, r3
 80005ea:	f008 feb1 	bl	8009350 <fputs>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f4:	d107      	bne.n	8000606 <main+0x7a>
		printf("Error writing to file!\n");
 80005f6:	482c      	ldr	r0, [pc, #176]	; (80006a8 <main+0x11c>)
 80005f8:	f009 fa00 	bl	80099fc <puts>
		fclose(fsptr);
 80005fc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80005fe:	f008 fbaf 	bl	8008d60 <fclose>
		return 1;
 8000602:	2301      	movs	r3, #1
 8000604:	e040      	b.n	8000688 <main+0xfc>
	}

	// Close the file
	fclose(fsptr);
 8000606:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000608:	f008 fbaa 	bl	8008d60 <fclose>

	// Open the file for reading
	fsptr = fopen("example.txt", "r");
 800060c:	4927      	ldr	r1, [pc, #156]	; (80006ac <main+0x120>)
 800060e:	4824      	ldr	r0, [pc, #144]	; (80006a0 <main+0x114>)
 8000610:	f008 fe30 	bl	8009274 <fopen>
 8000614:	6778      	str	r0, [r7, #116]	; 0x74
	if (fsptr == NULL) {
 8000616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000618:	2b00      	cmp	r3, #0
 800061a:	d104      	bne.n	8000626 <main+0x9a>
		printf("Error opening file for reading!\n");
 800061c:	4824      	ldr	r0, [pc, #144]	; (80006b0 <main+0x124>)
 800061e:	f009 f9ed 	bl	80099fc <puts>
		return 1;
 8000622:	2301      	movs	r3, #1
 8000624:	e030      	b.n	8000688 <main+0xfc>
	}

	// Read data from the file
	if (fgets(RdDat, sizeof(RdDat), fsptr) == NULL) {
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800062a:	2164      	movs	r1, #100	; 0x64
 800062c:	4618      	mov	r0, r3
 800062e:	f008 fced 	bl	800900c <fgets>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d107      	bne.n	8000648 <main+0xbc>
		printf("Error reading from file!\n");
 8000638:	481e      	ldr	r0, [pc, #120]	; (80006b4 <main+0x128>)
 800063a:	f009 f9df 	bl	80099fc <puts>
		fclose(fsptr);
 800063e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000640:	f008 fb8e 	bl	8008d60 <fclose>
		return 1;
 8000644:	2301      	movs	r3, #1
 8000646:	e01f      	b.n	8000688 <main+0xfc>
	}

	// Close the file
	fclose(fsptr);
 8000648:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800064a:	f008 fb89 	bl	8008d60 <fclose>

	// Print the data read from the file
	printf("Data read from file: %s\n", RdDat);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4819      	ldr	r0, [pc, #100]	; (80006b8 <main+0x12c>)
 8000654:	f009 f94c 	bl	80098f0 <iprintf>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000658:	f008 f82e 	bl	80086b8 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		if(!(memcmp(UartBuf,"led on",6)))
 800065c:	2206      	movs	r2, #6
 800065e:	4917      	ldr	r1, [pc, #92]	; (80006bc <main+0x130>)
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <main+0x108>)
 8000662:	f009 f865 	bl	8009730 <memcmp>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d106      	bne.n	800067a <main+0xee>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000672:	4813      	ldr	r0, [pc, #76]	; (80006c0 <main+0x134>)
 8000674:	f001 f8dc 	bl	8001830 <HAL_GPIO_WritePin>
 8000678:	e7ee      	b.n	8000658 <main+0xcc>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	480f      	ldr	r0, [pc, #60]	; (80006c0 <main+0x134>)
 8000682:	f001 f8d5 	bl	8001830 <HAL_GPIO_WritePin>
		MX_USB_HOST_Process();
 8000686:	e7e7      	b.n	8000658 <main+0xcc>

		}
	}
	/* USER CODE END 3 */
}
 8000688:	4618      	mov	r0, r3
 800068a:	3778      	adds	r7, #120	; 0x78
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	0800a550 	.word	0x0800a550
 8000694:	200000bc 	.word	0x200000bc
 8000698:	20000570 	.word	0x20000570
 800069c:	0800a4a4 	.word	0x0800a4a4
 80006a0:	0800a4a8 	.word	0x0800a4a8
 80006a4:	0800a4b4 	.word	0x0800a4b4
 80006a8:	0800a4d4 	.word	0x0800a4d4
 80006ac:	0800a4ec 	.word	0x0800a4ec
 80006b0:	0800a4f0 	.word	0x0800a4f0
 80006b4:	0800a510 	.word	0x0800a510
 80006b8:	0800a52c 	.word	0x0800a52c
 80006bc:	0800a548 	.word	0x0800a548
 80006c0:	40020c00 	.word	0x40020c00

080006c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f009 f848 	bl	8009768 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000738:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000742:	2307      	movs	r3, #7
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fbde 	bl	8003f0c <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000756:	f000 f9db 	bl	8000b10 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2105      	movs	r1, #5
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fe3f 	bl	80043fc <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000784:	f000 f9c4 	bl	8000b10 <Error_Handler>
	}
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x50>)
 800079e:	4a13      	ldr	r2, [pc, #76]	; (80007ec <MX_I2C1_Init+0x54>)
 80007a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2C1_Init+0x50>)
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x58>)
 80007a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_I2C1_Init+0x50>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_I2C1_Init+0x50>)
 80007d6:	f002 fdb5 	bl	8003344 <HAL_I2C_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80007e0:	f000 f996 	bl	8000b10 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000c4 	.word	0x200000c4
 80007ec:	40005400 	.word	0x40005400
 80007f0:	000186a0 	.word	0x000186a0

080007f4 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_I2S3_Init+0x54>)
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <MX_I2S3_Init+0x58>)
 80007fc:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2S3_Init+0x54>)
 8000800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000804:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_I2S3_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_I2S3_Init+0x54>)
 8000814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000818:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_I2S3_Init+0x54>)
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <MX_I2S3_Init+0x5c>)
 800081e:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_I2S3_Init+0x54>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_I2S3_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_I2S3_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_I2S3_Init+0x54>)
 8000834:	f002 feca 	bl	80035cc <HAL_I2S_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 800083e:	f000 f967 	bl	8000b10 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200005b8 	.word	0x200005b8
 800084c:	40003c00 	.word	0x40003c00
 8000850:	00017700 	.word	0x00017700

08000854 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_SPI1_Init+0x64>)
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <MX_SPI1_Init+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000864:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_SPI1_Init+0x64>)
 80008a0:	220a      	movs	r2, #10
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_SPI1_Init+0x64>)
 80008a6:	f004 f8e5 	bl	8004a74 <HAL_SPI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80008b0:	f000 f92e 	bl	8000b10 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000518 	.word	0x20000518
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART2_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f8:	f004 f945 	bl	8004b86 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000902:	f000 f905 	bl	8000b10 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000570 	.word	0x20000570
 8000910:	40004400 	.word	0x40004400

08000914 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	4b72      	ldr	r3, [pc, #456]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a71      	ldr	r2, [pc, #452]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b6f      	ldr	r3, [pc, #444]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b68      	ldr	r3, [pc, #416]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a63      	ldr	r2, [pc, #396]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b61      	ldr	r3, [pc, #388]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b5d      	ldr	r3, [pc, #372]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a5c      	ldr	r2, [pc, #368]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b5a      	ldr	r3, [pc, #360]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b56      	ldr	r3, [pc, #344]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a55      	ldr	r2, [pc, #340]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b4f      	ldr	r3, [pc, #316]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a4e      	ldr	r2, [pc, #312]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2108      	movs	r1, #8
 80009d6:	4849      	ldr	r0, [pc, #292]	; (8000afc <MX_GPIO_Init+0x1e8>)
 80009d8:	f000 ff2a 	bl	8001830 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2101      	movs	r1, #1
 80009e0:	4847      	ldr	r0, [pc, #284]	; (8000b00 <MX_GPIO_Init+0x1ec>)
 80009e2:	f000 ff25 	bl	8001830 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009e6:	2200      	movs	r2, #0
 80009e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009ec:	4845      	ldr	r0, [pc, #276]	; (8000b04 <MX_GPIO_Init+0x1f0>)
 80009ee:	f000 ff1f 	bl	8001830 <HAL_GPIO_WritePin>
			|Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009f2:	2308      	movs	r3, #8
 80009f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	483c      	ldr	r0, [pc, #240]	; (8000afc <MX_GPIO_Init+0x1e8>)
 8000a0a:	f000 fd75 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4836      	ldr	r0, [pc, #216]	; (8000b00 <MX_GPIO_Init+0x1ec>)
 8000a26:	f000 fd67 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	482e      	ldr	r0, [pc, #184]	; (8000b00 <MX_GPIO_Init+0x1ec>)
 8000a46:	f000 fd57 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a4e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a52:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	482a      	ldr	r0, [pc, #168]	; (8000b08 <MX_GPIO_Init+0x1f4>)
 8000a60:	f000 fd4a 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a64:	2304      	movs	r3, #4
 8000a66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4825      	ldr	r0, [pc, #148]	; (8000b0c <MX_GPIO_Init+0x1f8>)
 8000a78:	f000 fd3e 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a8e:	2305      	movs	r3, #5
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	481c      	ldr	r0, [pc, #112]	; (8000b0c <MX_GPIO_Init+0x1f8>)
 8000a9a:	f000 fd2d 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a9e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000aa2:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_GPIO_Init+0x1f0>)
 8000ab8:	f000 fd1e 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000abc:	2320      	movs	r3, #32
 8000abe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_GPIO_Init+0x1f0>)
 8000ad0:	f000 fd12 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000adc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_GPIO_Init+0x1e8>)
 8000aea:	f000 fd05 	bl	80014f8 <HAL_GPIO_Init>

}
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400

08000b10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f000 fbf8 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_I2C_MspInit+0x84>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12c      	bne.n	8000be8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000baa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb0:	2312      	movs	r3, #18
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <HAL_I2C_MspInit+0x8c>)
 8000bc8:	f000 fc96 	bl	80014f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_I2C_MspInit+0x88>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020400 	.word	0x40020400

08000bfc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a31      	ldr	r2, [pc, #196]	; (8000cec <HAL_I2S_MspInit+0xf0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d15a      	bne.n	8000ce2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fdd9 	bl	80047f4 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c48:	f7ff ff62 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_I2S_MspInit+0xf4>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <HAL_I2S_MspInit+0xf8>)
 8000cbc:	f000 fc1c 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cc0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <HAL_I2S_MspInit+0xfc>)
 8000cde:	f000 fc0b 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40003c00 	.word	0x40003c00
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020800 	.word	0x40020800

08000cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_SPI_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12b      	bne.n	8000d76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d56:	23e0      	movs	r3, #224	; 0xe0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d66:	2305      	movs	r3, #5
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_SPI_MspInit+0x8c>)
 8000d72:	f000 fbc1 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40013000 	.word	0x40013000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <HAL_UART_MspInit+0x94>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d133      	bne.n	8000e16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000de6:	230c      	movs	r3, #12
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df6:	2307      	movs	r3, #7
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <HAL_UART_MspInit+0x9c>)
 8000e02:	f000 fb79 	bl	80014f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2026      	movs	r0, #38	; 0x26
 8000e0c:	f000 faab 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e10:	2026      	movs	r0, #38	; 0x26
 8000e12:	f000 fac4 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40004400 	.word	0x40004400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f956 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <USART2_IRQHandler+0x10>)
 8000e86:	f003 fefb 	bl	8004c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000570 	.word	0x20000570

08000e94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <OTG_FS_IRQHandler+0x10>)
 8000e9a:	f000 ff4d 	bl	8001d38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200009dc 	.word	0x200009dc

08000ea8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e00a      	b.n	8000ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eba:	f3af 8000 	nop.w
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	60ba      	str	r2, [r7, #8]
 8000ec6:	b2ca      	uxtb	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf0      	blt.n	8000eba <_read+0x12>
	}

return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e009      	b.n	8000f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf1      	blt.n	8000ef4 <_write+0x12>
	}
	return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:

int _close(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return -1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
	return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
	return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_open>:

int _open(char *path, int flags, ...)
{
 8000f82:	b40e      	push	{r1, r2, r3}
 8000f84:	b480      	push	{r7}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	b003      	add	sp, #12
 8000f9c:	4770      	bx	lr
	...

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f007 fe54 	bl	8008c7c <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20020000 	.word	0x20020000
 8001000:	00000400 	.word	0x00000400
 8001004:	200000ac 	.word	0x200000ac
 8001008:	20000cf0 	.word	0x20000cf0

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800104c:	4c0b      	ldr	r4, [pc, #44]	; (800107c <LoopFillZerobss+0x26>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800105a:	f7ff ffd7 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f008 facb 	bl	80095f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fa93 	bl	800058c <main>
  bx  lr    
 8001066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001074:	0800a620 	.word	0x0800a620
  ldr r2, =_sbss
 8001078:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800107c:	20000cf0 	.word	0x20000cf0

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <HAL_Init+0x40>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_Init+0x40>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x40>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f94f 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fd30 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023c00 	.word	0x40023c00

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f967 	bl	80013ba <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 f92f 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x20>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_IncTick+0x24>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008
 800114c:	20000600 	.word	0x20000600

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000600 	.word	0x20000600

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff ffee 	bl	8001150 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_Delay+0x44>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118e:	bf00      	nop
 8001190:	f7ff ffde 	bl	8001150 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff3e 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff31 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa2 	bl	800130c <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff feb6 	bl	8001150 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d008      	beq.n	8001404 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e052      	b.n	80014aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0216 	bic.w	r2, r2, #22
 8001412:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001422:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <HAL_DMA_Abort+0x62>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0208 	bic.w	r2, r2, #8
 8001442:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001454:	e013      	b.n	800147e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001456:	f7ff fe7b 	bl	8001150 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b05      	cmp	r3, #5
 8001462:	d90c      	bls.n	800147e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e015      	b.n	80014aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e4      	bne.n	8001456 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	223f      	movs	r2, #63	; 0x3f
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d004      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e00c      	b.n	80014ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2205      	movs	r2, #5
 80014d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e16b      	b.n	80017ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 815a 	bne.w	80017e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d005      	beq.n	800154a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001546:	2b02      	cmp	r3, #2
 8001548:	d130      	bne.n	80015ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 0201 	and.w	r2, r3, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d017      	beq.n	80015e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d123      	bne.n	800163c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	69b9      	ldr	r1, [r7, #24]
 8001638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80b4 	beq.w	80017e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b60      	ldr	r3, [pc, #384]	; (8001804 <HAL_GPIO_Init+0x30c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a5f      	ldr	r2, [pc, #380]	; (8001804 <HAL_GPIO_Init+0x30c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_GPIO_Init+0x30c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a5b      	ldr	r2, [pc, #364]	; (8001808 <HAL_GPIO_Init+0x310>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_GPIO_Init+0x314>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d02b      	beq.n	800171e <HAL_GPIO_Init+0x226>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a51      	ldr	r2, [pc, #324]	; (8001810 <HAL_GPIO_Init+0x318>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d025      	beq.n	800171a <HAL_GPIO_Init+0x222>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a50      	ldr	r2, [pc, #320]	; (8001814 <HAL_GPIO_Init+0x31c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01f      	beq.n	8001716 <HAL_GPIO_Init+0x21e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4f      	ldr	r2, [pc, #316]	; (8001818 <HAL_GPIO_Init+0x320>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0x21a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4e      	ldr	r2, [pc, #312]	; (800181c <HAL_GPIO_Init+0x324>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x216>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4d      	ldr	r2, [pc, #308]	; (8001820 <HAL_GPIO_Init+0x328>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x212>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4c      	ldr	r2, [pc, #304]	; (8001824 <HAL_GPIO_Init+0x32c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x20e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4b      	ldr	r2, [pc, #300]	; (8001828 <HAL_GPIO_Init+0x330>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x20a>
 80016fe:	2307      	movs	r3, #7
 8001700:	e00e      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001702:	2308      	movs	r3, #8
 8001704:	e00c      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001706:	2306      	movs	r3, #6
 8001708:	e00a      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800170a:	2305      	movs	r3, #5
 800170c:	e008      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800170e:	2304      	movs	r3, #4
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001712:	2303      	movs	r3, #3
 8001714:	e004      	b.n	8001720 <HAL_GPIO_Init+0x228>
 8001716:	2302      	movs	r3, #2
 8001718:	e002      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x228>
 800171e:	2300      	movs	r3, #0
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	f002 0203 	and.w	r2, r2, #3
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	4093      	lsls	r3, r2
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001730:	4935      	ldr	r1, [pc, #212]	; (8001808 <HAL_GPIO_Init+0x310>)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_GPIO_Init+0x334>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001762:	4a32      	ldr	r2, [pc, #200]	; (800182c <HAL_GPIO_Init+0x334>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_GPIO_Init+0x334>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800178c:	4a27      	ldr	r2, [pc, #156]	; (800182c <HAL_GPIO_Init+0x334>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_GPIO_Init+0x334>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_GPIO_Init+0x334>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_GPIO_Init+0x334>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_GPIO_Init+0x334>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3301      	adds	r3, #1
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	f67f ae90 	bls.w	8001514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40013800 	.word	0x40013800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400
 8001814:	40020800 	.word	0x40020800
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40021000 	.word	0x40021000
 8001820:	40021400 	.word	0x40021400
 8001824:	40021800 	.word	0x40021800
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800184c:	e003      	b.n	8001856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	041a      	lsls	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	619a      	str	r2, [r3, #24]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001864:	b08f      	sub	sp, #60	; 0x3c
 8001866:	af0a      	add	r7, sp, #40	; 0x28
 8001868:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e054      	b.n	800191e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f006 ff4a 	bl	8008728 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2203      	movs	r2, #3
 8001898:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f004 f8a0 	bl	80059f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	687e      	ldr	r6, [r7, #4]
 80018c0:	466d      	mov	r5, sp
 80018c2:	f106 0410 	add.w	r4, r6, #16
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80018d6:	1d33      	adds	r3, r6, #4
 80018d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f004 f81a 	bl	8005914 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2101      	movs	r1, #1
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 f897 	bl	8005a1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	687e      	ldr	r6, [r7, #4]
 80018f4:	466d      	mov	r5, sp
 80018f6:	f106 0410 	add.w	r4, r6, #16
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001906:	e885 0003 	stmia.w	r5, {r0, r1}
 800190a:	1d33      	adds	r3, r6, #4
 800190c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f004 f9fe 	bl	8005d10 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001926 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001926:	b590      	push	{r4, r7, lr}
 8001928:	b089      	sub	sp, #36	; 0x24
 800192a:	af04      	add	r7, sp, #16
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	4608      	mov	r0, r1
 8001930:	4611      	mov	r1, r2
 8001932:	461a      	mov	r2, r3
 8001934:	4603      	mov	r3, r0
 8001936:	70fb      	strb	r3, [r7, #3]
 8001938:	460b      	mov	r3, r1
 800193a:	70bb      	strb	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_HCD_HC_Init+0x28>
 800194a:	2302      	movs	r3, #2
 800194c:	e076      	b.n	8001a3c <HAL_HCD_HC_Init+0x116>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	333d      	adds	r3, #61	; 0x3d
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3338      	adds	r3, #56	; 0x38
 8001976:	787a      	ldrb	r2, [r7, #1]
 8001978:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3340      	adds	r3, #64	; 0x40
 8001988:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800198a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3339      	adds	r3, #57	; 0x39
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	333f      	adds	r3, #63	; 0x3f
 80019ac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	78ba      	ldrb	r2, [r7, #2]
 80019b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ba:	b2d0      	uxtb	r0, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	333a      	adds	r3, #58	; 0x3a
 80019c8:	4602      	mov	r2, r0
 80019ca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	da09      	bge.n	80019e8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	333b      	adds	r3, #59	; 0x3b
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e008      	b.n	80019fa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	333b      	adds	r3, #59	; 0x3b
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	333c      	adds	r3, #60	; 0x3c
 8001a08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a0c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	787c      	ldrb	r4, [r7, #1]
 8001a14:	78ba      	ldrb	r2, [r7, #2]
 8001a16:	78f9      	ldrb	r1, [r7, #3]
 8001a18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	4623      	mov	r3, r4
 8001a2a:	f004 faeb 	bl	8006004 <USB_HC_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}

08001a44 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_HCD_HC_Halt+0x1e>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e00f      	b.n	8001a82 <HAL_HCD_HC_Halt+0x3e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 fd27 	bl	80064c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	4608      	mov	r0, r1
 8001a96:	4611      	mov	r1, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	70fb      	strb	r3, [r7, #3]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70bb      	strb	r3, [r7, #2]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	333b      	adds	r3, #59	; 0x3b
 8001ab4:	78ba      	ldrb	r2, [r7, #2]
 8001ab6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	333f      	adds	r3, #63	; 0x3f
 8001ac6:	787a      	ldrb	r2, [r7, #1]
 8001ac8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001aca:	7c3b      	ldrb	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d112      	bne.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	212c      	movs	r1, #44	; 0x2c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3342      	adds	r3, #66	; 0x42
 8001ade:	2203      	movs	r2, #3
 8001ae0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	333d      	adds	r3, #61	; 0x3d
 8001af0:	7f3a      	ldrb	r2, [r7, #28]
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e008      	b.n	8001b08 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3342      	adds	r3, #66	; 0x42
 8001b04:	2202      	movs	r2, #2
 8001b06:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	f200 80c6 	bhi.w	8001c9c <HAL_HCD_HC_SubmitRequest+0x210>
 8001b10:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001c89 	.word	0x08001c89
 8001b20:	08001b8d 	.word	0x08001b8d
 8001b24:	08001c0b 	.word	0x08001c0b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b28:	7c3b      	ldrb	r3, [r7, #16]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	f040 80b8 	bne.w	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b30:	78bb      	ldrb	r3, [r7, #2]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 80b4 	bne.w	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b38:	8b3b      	ldrh	r3, [r7, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d108      	bne.n	8001b50 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	3355      	adds	r3, #85	; 0x55
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3355      	adds	r3, #85	; 0x55
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3342      	adds	r3, #66	; 0x42
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b76:	e093      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3342      	adds	r3, #66	; 0x42
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
      break;
 8001b8a:	e089      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b8c:	78bb      	ldrb	r3, [r7, #2]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11d      	bne.n	8001bce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3355      	adds	r3, #85	; 0x55
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3342      	adds	r3, #66	; 0x42
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bb8:	e073      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3342      	adds	r3, #66	; 0x42
 8001bc8:	2202      	movs	r2, #2
 8001bca:	701a      	strb	r2, [r3, #0]
      break;
 8001bcc:	e069      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3354      	adds	r3, #84	; 0x54
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	3342      	adds	r3, #66	; 0x42
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
      break;
 8001bf4:	e055      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	2202      	movs	r2, #2
 8001c06:	701a      	strb	r2, [r3, #0]
      break;
 8001c08:	e04b      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c0a:	78bb      	ldrb	r3, [r7, #2]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d11d      	bne.n	8001c4c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3355      	adds	r3, #85	; 0x55
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	212c      	movs	r1, #44	; 0x2c
 8001c2a:	fb01 f303 	mul.w	r3, r1, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3342      	adds	r3, #66	; 0x42
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c36:	e034      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	212c      	movs	r1, #44	; 0x2c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3342      	adds	r3, #66	; 0x42
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
      break;
 8001c4a:	e02a      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	212c      	movs	r1, #44	; 0x2c
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	3354      	adds	r3, #84	; 0x54
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3342      	adds	r3, #66	; 0x42
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
      break;
 8001c72:	e016      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3342      	adds	r3, #66	; 0x42
 8001c82:	2202      	movs	r2, #2
 8001c84:	701a      	strb	r2, [r3, #0]
      break;
 8001c86:	e00c      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c9c:	bf00      	nop
 8001c9e:	e000      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ca0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	212c      	movs	r1, #44	; 0x2c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	3344      	adds	r3, #68	; 0x44
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	8b3a      	ldrh	r2, [r7, #24]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	202c      	movs	r0, #44	; 0x2c
 8001cbc:	fb00 f303 	mul.w	r3, r0, r3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	334c      	adds	r3, #76	; 0x4c
 8001cc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3360      	adds	r3, #96	; 0x60
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3350      	adds	r3, #80	; 0x50
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3339      	adds	r3, #57	; 0x39
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	212c      	movs	r1, #44	; 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3361      	adds	r3, #97	; 0x61
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	222c      	movs	r2, #44	; 0x2c
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	3338      	adds	r3, #56	; 0x38
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	18d1      	adds	r1, r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	f004 fa7a 	bl	8006220 <USB_HC_StartXfer>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop

08001d38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 ff9d 	bl	8005c8e <USB_GetMode>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	f040 80f6 	bne.w	8001f48 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 ff81 	bl	8005c68 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80ec 	beq.w	8001f46 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 ff78 	bl	8005c68 <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d82:	d104      	bne.n	8001d8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 ff68 	bl	8005c68 <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da2:	d104      	bne.n	8001dae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 ff58 	bl	8005c68 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dc2:	d104      	bne.n	8001dce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 ff48 	bl	8005c68 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d103      	bne.n	8001dea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 ff3a 	bl	8005c68 <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dfe:	d11c      	bne.n	8001e3a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10f      	bne.n	8001e3a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	6938      	ldr	r0, [r7, #16]
 8001e1e:	f003 fe49 	bl	8005ab4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e22:	6938      	ldr	r0, [r7, #16]
 8001e24:	f003 fe6a 	bl	8005afc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 f822 	bl	8005e78 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f006 fcf5 	bl	8008824 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 ff12 	bl	8005c68 <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4e:	d102      	bne.n	8001e56 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f001 fa03 	bl	800325c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 ff04 	bl	8005c68 <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d106      	bne.n	8001e78 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f006 fcbe 	bl	80087ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2208      	movs	r2, #8
 8001e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fef3 	bl	8005c68 <USB_ReadInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d101      	bne.n	8001e90 <HAL_HCD_IRQHandler+0x158>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_HCD_IRQHandler+0x15a>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d012      	beq.n	8001ebc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0210 	bic.w	r2, r2, #16
 8001ea4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f001 f906 	bl	80030b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0210 	orr.w	r2, r2, #16
 8001eba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 fed1 	bl	8005c68 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ed0:	d13a      	bne.n	8001f48 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 fae4 	bl	80064a4 <USB_HC_ReadInterrupt>
 8001edc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e025      	b.n	8001f30 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d018      	beq.n	8001f2a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0e:	d106      	bne.n	8001f1e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8ab 	bl	8002072 <HCD_HC_IN_IRQHandler>
 8001f1c:	e005      	b.n	8001f2a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fcc6 	bl	80028b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3d4      	bcc.n	8001ee4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f42:	615a      	str	r2, [r3, #20]
 8001f44:	e000      	b.n	8001f48 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f46:	bf00      	nop
    }
  }
}
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_HCD_Start+0x16>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e013      	b.n	8001f8c <HAL_HCD_Start+0x3e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 ffe4 	bl	8005f40 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fd2a 	bl	80059d6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_HCD_Stop+0x16>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e00d      	b.n	8001fc6 <HAL_HCD_Stop+0x32>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 fbde 	bl	8006778 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 ff86 	bl	8005eec <USB_ResetPort>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3360      	adds	r3, #96	; 0x60
 8002004:	781b      	ldrb	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3350      	adds	r3, #80	; 0x50
 800202c:	681b      	ldr	r3, [r3, #0]
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 ffca 	bl	8005fe0 <USB_GetCurrentFrame>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f003 ffa5 	bl	8005fb2 <USB_GetHostSpeed>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d119      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	461a      	mov	r2, r3
 80020b0:	2304      	movs	r3, #4
 80020b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	0151      	lsls	r1, r2, #5
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	440a      	add	r2, r1
 80020ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	60d3      	str	r3, [r2, #12]
 80020d4:	e101      	b.n	80022da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ec:	d12b      	bne.n	8002146 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	461a      	mov	r2, r3
 80020fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002100:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	3361      	adds	r3, #97	; 0x61
 8002110:	2207      	movs	r2, #7
 8002112:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	0151      	lsls	r1, r2, #5
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	440a      	add	r2, r1
 800212a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f004 f9c1 	bl	80064c6 <USB_HC_Halt>
 8002144:	e0c9      	b.n	80022da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b20      	cmp	r3, #32
 800215a:	d109      	bne.n	8002170 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	461a      	mov	r2, r3
 800216a:	2320      	movs	r3, #32
 800216c:	6093      	str	r3, [r2, #8]
 800216e:	e0b4      	b.n	80022da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b08      	cmp	r3, #8
 8002184:	d133      	bne.n	80021ee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	0151      	lsls	r1, r2, #5
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	440a      	add	r2, r1
 800219c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3361      	adds	r3, #97	; 0x61
 80021b4:	2205      	movs	r2, #5
 80021b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	461a      	mov	r2, r3
 80021c6:	2310      	movs	r3, #16
 80021c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2308      	movs	r3, #8
 80021da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 f96d 	bl	80064c6 <USB_HC_Halt>
 80021ec:	e075      	b.n	80022da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002204:	d134      	bne.n	8002270 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	0151      	lsls	r1, r2, #5
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	440a      	add	r2, r1
 800221c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3361      	adds	r3, #97	; 0x61
 8002234:	2208      	movs	r2, #8
 8002236:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	461a      	mov	r2, r3
 8002246:	2310      	movs	r3, #16
 8002248:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002256:	461a      	mov	r2, r3
 8002258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800225c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f004 f92c 	bl	80064c6 <USB_HC_Halt>
 800226e:	e034      	b.n	80022da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	2b80      	cmp	r3, #128	; 0x80
 8002284:	d129      	bne.n	80022da <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	0151      	lsls	r1, r2, #5
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	440a      	add	r2, r1
 800229c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3361      	adds	r3, #97	; 0x61
 80022b4:	2206      	movs	r2, #6
 80022b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 f8ff 	bl	80064c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	461a      	mov	r2, r3
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f0:	d122      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	0151      	lsls	r1, r2, #5
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	440a      	add	r2, r1
 8002308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f004 f8d2 	bl	80064c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	461a      	mov	r2, r3
 8002330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002334:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002336:	e2ba      	b.n	80028ae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	f040 811b 	bne.w	8002586 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d019      	beq.n	800238c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3348      	adds	r3, #72	; 0x48
 8002366:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	0159      	lsls	r1, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	440b      	add	r3, r1
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800237a:	1ad2      	subs	r2, r2, r3
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	202c      	movs	r0, #44	; 0x2c
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	440b      	add	r3, r1
 8002388:	3350      	adds	r3, #80	; 0x50
 800238a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3361      	adds	r3, #97	; 0x61
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	335c      	adds	r3, #92	; 0x5c
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	461a      	mov	r2, r3
 80023be:	2301      	movs	r3, #1
 80023c0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	333f      	adds	r3, #63	; 0x3f
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	333f      	adds	r3, #63	; 0x3f
 80023e4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d121      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	0151      	lsls	r1, r2, #5
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	440a      	add	r2, r1
 8002400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f004 f856 	bl	80064c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	461a      	mov	r2, r3
 8002428:	2310      	movs	r3, #16
 800242a:	6093      	str	r3, [r2, #8]
 800242c:	e066      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	333f      	adds	r3, #63	; 0x3f
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d127      	bne.n	8002492 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	0151      	lsls	r1, r2, #5
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	440a      	add	r2, r1
 8002458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800245c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002460:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3360      	adds	r3, #96	; 0x60
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	b2d9      	uxtb	r1, r3
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	202c      	movs	r0, #44	; 0x2c
 800247e:	fb00 f303 	mul.w	r3, r0, r3
 8002482:	4413      	add	r3, r2
 8002484:	3360      	adds	r3, #96	; 0x60
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f006 f9d8 	bl	8008840 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002490:	e034      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	333f      	adds	r3, #63	; 0x3f
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d12a      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3360      	adds	r3, #96	; 0x60
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3354      	adds	r3, #84	; 0x54
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	f083 0301 	eor.w	r3, r3, #1
 80024cc:	b2d8      	uxtb	r0, r3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3354      	adds	r3, #84	; 0x54
 80024dc:	4602      	mov	r2, r0
 80024de:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	b2d9      	uxtb	r1, r3
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	202c      	movs	r0, #44	; 0x2c
 80024ea:	fb00 f303 	mul.w	r3, r0, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3360      	adds	r3, #96	; 0x60
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f006 f9a2 	bl	8008840 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d12b      	bne.n	800255c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3348      	adds	r3, #72	; 0x48
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	202c      	movs	r0, #44	; 0x2c
 800251a:	fb00 f202 	mul.w	r2, r0, r2
 800251e:	440a      	add	r2, r1
 8002520:	3240      	adds	r2, #64	; 0x40
 8002522:	8812      	ldrh	r2, [r2, #0]
 8002524:	fbb3 f3f2 	udiv	r3, r3, r2
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 81be 	beq.w	80028ae <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	3354      	adds	r3, #84	; 0x54
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	f083 0301 	eor.w	r3, r3, #1
 8002546:	b2d8      	uxtb	r0, r3
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	3354      	adds	r3, #84	; 0x54
 8002556:	4602      	mov	r2, r0
 8002558:	701a      	strb	r2, [r3, #0]
}
 800255a:	e1a8      	b.n	80028ae <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3354      	adds	r3, #84	; 0x54
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2d8      	uxtb	r0, r3
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	3354      	adds	r3, #84	; 0x54
 8002580:	4602      	mov	r2, r0
 8002582:	701a      	strb	r2, [r3, #0]
}
 8002584:	e193      	b.n	80028ae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b02      	cmp	r3, #2
 800259a:	f040 8106 	bne.w	80027aa <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	0151      	lsls	r1, r2, #5
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	440a      	add	r2, r1
 80025b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b8:	f023 0302 	bic.w	r3, r3, #2
 80025bc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3361      	adds	r3, #97	; 0x61
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d109      	bne.n	80025e6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3360      	adds	r3, #96	; 0x60
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e0c9      	b.n	800277a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3361      	adds	r3, #97	; 0x61
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d109      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3360      	adds	r3, #96	; 0x60
 8002608:	2205      	movs	r2, #5
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e0b5      	b.n	800277a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3361      	adds	r3, #97	; 0x61
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b06      	cmp	r3, #6
 8002620:	d009      	beq.n	8002636 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	3361      	adds	r3, #97	; 0x61
 8002630:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002632:	2b08      	cmp	r3, #8
 8002634:	d150      	bne.n	80026d8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	335c      	adds	r3, #92	; 0x5c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	202c      	movs	r0, #44	; 0x2c
 800264e:	fb00 f303 	mul.w	r3, r0, r3
 8002652:	440b      	add	r3, r1
 8002654:	335c      	adds	r3, #92	; 0x5c
 8002656:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	335c      	adds	r3, #92	; 0x5c
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d912      	bls.n	8002692 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	335c      	adds	r3, #92	; 0x5c
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3360      	adds	r3, #96	; 0x60
 800268c:	2204      	movs	r2, #4
 800268e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002690:	e073      	b.n	800277a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3360      	adds	r3, #96	; 0x60
 80026a0:	2202      	movs	r2, #2
 80026a2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ba:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026c2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026d6:	e050      	b.n	800277a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3361      	adds	r3, #97	; 0x61
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d122      	bne.n	8002732 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	3360      	adds	r3, #96	; 0x60
 80026fa:	2202      	movs	r2, #2
 80026fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002714:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800271c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	461a      	mov	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e023      	b.n	800277a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3361      	adds	r3, #97	; 0x61
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b07      	cmp	r3, #7
 8002744:	d119      	bne.n	800277a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	335c      	adds	r3, #92	; 0x5c
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	202c      	movs	r0, #44	; 0x2c
 800275e:	fb00 f303 	mul.w	r3, r0, r3
 8002762:	440b      	add	r3, r1
 8002764:	335c      	adds	r3, #92	; 0x5c
 8002766:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3360      	adds	r3, #96	; 0x60
 8002776:	2204      	movs	r2, #4
 8002778:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	461a      	mov	r2, r3
 8002788:	2302      	movs	r3, #2
 800278a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	b2d9      	uxtb	r1, r3
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	202c      	movs	r0, #44	; 0x2c
 8002796:	fb00 f303 	mul.w	r3, r0, r3
 800279a:	4413      	add	r3, r2
 800279c:	3360      	adds	r3, #96	; 0x60
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f006 f84c 	bl	8008840 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027a8:	e081      	b.n	80028ae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d176      	bne.n	80028ae <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	333f      	adds	r3, #63	; 0x3f
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d121      	bne.n	8002818 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	335c      	adds	r3, #92	; 0x5c
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	0151      	lsls	r1, r2, #5
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	440a      	add	r2, r1
 80027fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f003 fe58 	bl	80064c6 <USB_HC_Halt>
 8002816:	e041      	b.n	800289c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	333f      	adds	r3, #63	; 0x3f
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	333f      	adds	r3, #63	; 0x3f
 800283a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800283c:	2b02      	cmp	r3, #2
 800283e:	d12d      	bne.n	800289c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	335c      	adds	r3, #92	; 0x5c
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d120      	bne.n	800289c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3361      	adds	r3, #97	; 0x61
 8002868:	2203      	movs	r2, #3
 800286a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	0151      	lsls	r1, r2, #5
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	440a      	add	r2, r1
 8002882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002886:	f043 0302 	orr.w	r3, r3, #2
 800288a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fe15 	bl	80064c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	2310      	movs	r3, #16
 80028ac:	6093      	str	r3, [r2, #8]
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b088      	sub	sp, #32
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d119      	bne.n	800291a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	461a      	mov	r2, r3
 80028f4:	2304      	movs	r3, #4
 80028f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	0151      	lsls	r1, r2, #5
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	440a      	add	r2, r1
 800290e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002912:	f043 0302 	orr.w	r3, r3, #2
 8002916:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002918:	e3ca      	b.n	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b20      	cmp	r3, #32
 800292e:	d13e      	bne.n	80029ae <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	461a      	mov	r2, r3
 800293e:	2320      	movs	r3, #32
 8002940:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	333d      	adds	r3, #61	; 0x3d
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	f040 83ac 	bne.w	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	333d      	adds	r3, #61	; 0x3d
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3360      	adds	r3, #96	; 0x60
 8002978:	2202      	movs	r2, #2
 800297a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	0151      	lsls	r1, r2, #5
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	440a      	add	r2, r1
 8002992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002996:	f043 0302 	orr.w	r3, r3, #2
 800299a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 fd8d 	bl	80064c6 <USB_HC_Halt>
}
 80029ac:	e380      	b.n	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c4:	d122      	bne.n	8002a0c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	0151      	lsls	r1, r2, #5
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	440a      	add	r2, r1
 80029dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 fd68 	bl	80064c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	461a      	mov	r2, r3
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	6093      	str	r3, [r2, #8]
}
 8002a0a:	e351      	b.n	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d150      	bne.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	335c      	adds	r3, #92	; 0x5c
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d111      	bne.n	8002a6e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	333d      	adds	r3, #61	; 0x3d
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2340      	movs	r3, #64	; 0x40
 8002a6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	0151      	lsls	r1, r2, #5
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	440a      	add	r2, r1
 8002a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fd14 	bl	80064c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2301      	movs	r3, #1
 8002aae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3361      	adds	r3, #97	; 0x61
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
}
 8002ac2:	e2f5      	b.n	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d13c      	bne.n	8002b54 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3361      	adds	r3, #97	; 0x61
 8002ae8:	2204      	movs	r2, #4
 8002aea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	333d      	adds	r3, #61	; 0x3d
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	335c      	adds	r3, #92	; 0x5c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fcc3 	bl	80064c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2340      	movs	r3, #64	; 0x40
 8002b50:	6093      	str	r3, [r2, #8]
}
 8002b52:	e2ad      	b.n	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d12a      	bne.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	2308      	movs	r3, #8
 8002b7a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	0151      	lsls	r1, r2, #5
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	440a      	add	r2, r1
 8002b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 fc8d 	bl	80064c6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	2205      	movs	r2, #5
 8002bbc:	701a      	strb	r2, [r3, #0]
}
 8002bbe:	e277      	b.n	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d150      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	335c      	adds	r3, #92	; 0x5c
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3361      	adds	r3, #97	; 0x61
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	333d      	adds	r3, #61	; 0x3d
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d112      	bne.n	8002c34 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	333c      	adds	r3, #60	; 0x3c
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d108      	bne.n	8002c34 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	333d      	adds	r3, #61	; 0x3d
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	0151      	lsls	r1, r2, #5
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	440a      	add	r2, r1
 8002c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fc31 	bl	80064c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	461a      	mov	r2, r3
 8002c72:	2310      	movs	r3, #16
 8002c74:	6093      	str	r3, [r2, #8]
}
 8002c76:	e21b      	b.n	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b80      	cmp	r3, #128	; 0x80
 8002c8c:	d174      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d121      	bne.n	8002cda <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3361      	adds	r3, #97	; 0x61
 8002ca4:	2206      	movs	r2, #6
 8002ca6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	0151      	lsls	r1, r2, #5
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fbf7 	bl	80064c6 <USB_HC_Halt>
 8002cd8:	e044      	b.n	8002d64 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	335c      	adds	r3, #92	; 0x5c
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	202c      	movs	r0, #44	; 0x2c
 8002cf2:	fb00 f303 	mul.w	r3, r0, r3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	335c      	adds	r3, #92	; 0x5c
 8002cfa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	335c      	adds	r3, #92	; 0x5c
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d920      	bls.n	8002d52 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	335c      	adds	r3, #92	; 0x5c
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3360      	adds	r3, #96	; 0x60
 8002d30:	2204      	movs	r2, #4
 8002d32:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	b2d9      	uxtb	r1, r3
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	202c      	movs	r0, #44	; 0x2c
 8002d3e:	fb00 f303 	mul.w	r3, r0, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3360      	adds	r3, #96	; 0x60
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f005 fd78 	bl	8008840 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d50:	e008      	b.n	8002d64 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3360      	adds	r3, #96	; 0x60
 8002d60:	2202      	movs	r2, #2
 8002d62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	461a      	mov	r2, r3
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	6093      	str	r3, [r2, #8]
}
 8002d76:	e19b      	b.n	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d134      	bne.n	8002dfa <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	0151      	lsls	r1, r2, #5
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	440a      	add	r2, r1
 8002da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002daa:	f043 0302 	orr.w	r3, r3, #2
 8002dae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 fb83 	bl	80064c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2310      	movs	r3, #16
 8002dd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	461a      	mov	r2, r3
 8002de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002de4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3361      	adds	r3, #97	; 0x61
 8002df4:	2208      	movs	r2, #8
 8002df6:	701a      	strb	r2, [r3, #0]
}
 8002df8:	e15a      	b.n	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	f040 814f 	bne.w	80030b0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	0151      	lsls	r1, r2, #5
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	440a      	add	r2, r1
 8002e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e2c:	f023 0302 	bic.w	r3, r3, #2
 8002e30:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3361      	adds	r3, #97	; 0x61
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d17d      	bne.n	8002f42 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3360      	adds	r3, #96	; 0x60
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	333f      	adds	r3, #63	; 0x3f
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d00a      	beq.n	8002e82 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	333f      	adds	r3, #63	; 0x3f
 8002e7a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	f040 8100 	bne.w	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d113      	bne.n	8002eb2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3355      	adds	r3, #85	; 0x55
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	f083 0301 	eor.w	r3, r3, #1
 8002e9e:	b2d8      	uxtb	r0, r3
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3355      	adds	r3, #85	; 0x55
 8002eae:	4602      	mov	r2, r0
 8002eb0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	f040 80e3 	bne.w	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	334c      	adds	r3, #76	; 0x4c
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80d8 	beq.w	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	334c      	adds	r3, #76	; 0x4c
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	202c      	movs	r0, #44	; 0x2c
 8002ee8:	fb00 f202 	mul.w	r2, r0, r2
 8002eec:	440a      	add	r2, r1
 8002eee:	3240      	adds	r2, #64	; 0x40
 8002ef0:	8812      	ldrh	r2, [r2, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	202c      	movs	r0, #44	; 0x2c
 8002efc:	fb00 f202 	mul.w	r2, r0, r2
 8002f00:	440a      	add	r2, r1
 8002f02:	3240      	adds	r2, #64	; 0x40
 8002f04:	8812      	ldrh	r2, [r2, #0]
 8002f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80b5 	beq.w	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3355      	adds	r3, #85	; 0x55
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	f083 0301 	eor.w	r3, r3, #1
 8002f2c:	b2d8      	uxtb	r0, r3
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3355      	adds	r3, #85	; 0x55
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e09f      	b.n	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3361      	adds	r3, #97	; 0x61
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d109      	bne.n	8002f6a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3360      	adds	r3, #96	; 0x60
 8002f64:	2202      	movs	r2, #2
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e08b      	b.n	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	3361      	adds	r3, #97	; 0x61
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d109      	bne.n	8002f92 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3360      	adds	r3, #96	; 0x60
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e077      	b.n	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3361      	adds	r3, #97	; 0x61
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d109      	bne.n	8002fba <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3360      	adds	r3, #96	; 0x60
 8002fb4:	2205      	movs	r2, #5
 8002fb6:	701a      	strb	r2, [r3, #0]
 8002fb8:	e063      	b.n	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3361      	adds	r3, #97	; 0x61
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d009      	beq.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3361      	adds	r3, #97	; 0x61
 8002fdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d14f      	bne.n	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	335c      	adds	r3, #92	; 0x5c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	202c      	movs	r0, #44	; 0x2c
 8002ffa:	fb00 f303 	mul.w	r3, r0, r3
 8002ffe:	440b      	add	r3, r1
 8003000:	335c      	adds	r3, #92	; 0x5c
 8003002:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	335c      	adds	r3, #92	; 0x5c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d912      	bls.n	800303e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	335c      	adds	r3, #92	; 0x5c
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3360      	adds	r3, #96	; 0x60
 8003038:	2204      	movs	r2, #4
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e021      	b.n	8003082 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3360      	adds	r3, #96	; 0x60
 800304c:	2202      	movs	r2, #2
 800304e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003066:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800306e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	461a      	mov	r2, r3
 8003090:	2302      	movs	r3, #2
 8003092:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	b2d9      	uxtb	r1, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	202c      	movs	r0, #44	; 0x2c
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3360      	adds	r3, #96	; 0x60
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f005 fbc8 	bl	8008840 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030b0:	bf00      	nop
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	0c5b      	lsrs	r3, r3, #17
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d004      	beq.n	80030fe <HCD_RXQLVL_IRQHandler+0x46>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	f000 80a9 	beq.w	800324e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030fc:	e0aa      	b.n	8003254 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a6 	beq.w	8003252 <HCD_RXQLVL_IRQHandler+0x19a>
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	3344      	adds	r3, #68	; 0x44
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 809b 	beq.w	8003252 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3350      	adds	r3, #80	; 0x50
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	441a      	add	r2, r3
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	202c      	movs	r0, #44	; 0x2c
 8003136:	fb00 f303 	mul.w	r3, r0, r3
 800313a:	440b      	add	r3, r1
 800313c:	334c      	adds	r3, #76	; 0x4c
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d87a      	bhi.n	800323a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3344      	adds	r3, #68	; 0x44
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	b292      	uxth	r2, r2
 800315c:	4619      	mov	r1, r3
 800315e:	f002 fd2b 	bl	8005bb8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3344      	adds	r3, #68	; 0x44
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	441a      	add	r2, r3
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	202c      	movs	r0, #44	; 0x2c
 800317c:	fb00 f303 	mul.w	r3, r0, r3
 8003180:	440b      	add	r3, r1
 8003182:	3344      	adds	r3, #68	; 0x44
 8003184:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3350      	adds	r3, #80	; 0x50
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	441a      	add	r2, r3
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	202c      	movs	r0, #44	; 0x2c
 80031a0:	fb00 f303 	mul.w	r3, r0, r3
 80031a4:	440b      	add	r3, r1
 80031a6:	3350      	adds	r3, #80	; 0x50
 80031a8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	0cdb      	lsrs	r3, r3, #19
 80031ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3340      	adds	r3, #64	; 0x40
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d13c      	bne.n	8003252 <HCD_RXQLVL_IRQHandler+0x19a>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d039      	beq.n	8003252 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031f4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031fc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3354      	adds	r3, #84	; 0x54
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	f083 0301 	eor.w	r3, r3, #1
 8003224:	b2d8      	uxtb	r0, r3
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3354      	adds	r3, #84	; 0x54
 8003234:	4602      	mov	r2, r0
 8003236:	701a      	strb	r2, [r3, #0]
      break;
 8003238:	e00b      	b.n	8003252 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3360      	adds	r3, #96	; 0x60
 8003248:	2204      	movs	r2, #4
 800324a:	701a      	strb	r2, [r3, #0]
      break;
 800324c:	e001      	b.n	8003252 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800324e:	bf00      	nop
 8003250:	e000      	b.n	8003254 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003252:	bf00      	nop
  }
}
 8003254:	bf00      	nop
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003288:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d10b      	bne.n	80032ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d102      	bne.n	80032a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f005 fab2 	bl	8008808 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d132      	bne.n	800331c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d126      	bne.n	8003316 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d113      	bne.n	80032f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80032d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032da:	d106      	bne.n	80032ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 fdc8 	bl	8005e78 <USB_InitFSLSPClkSel>
 80032e8:	e011      	b.n	800330e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f002 fdc1 	bl	8005e78 <USB_InitFSLSPClkSel>
 80032f6:	e00a      	b.n	800330e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d106      	bne.n	800330e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003306:	461a      	mov	r2, r3
 8003308:	f64e 2360 	movw	r3, #60000	; 0xea60
 800330c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f005 faa4 	bl	800885c <HAL_HCD_PortEnabled_Callback>
 8003314:	e002      	b.n	800331c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f005 faae 	bl	8008878 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b20      	cmp	r3, #32
 8003324:	d103      	bne.n	800332e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f043 0320 	orr.w	r3, r3, #32
 800332c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003334:	461a      	mov	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6013      	str	r3, [r2, #0]
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e12b      	b.n	80035ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fbfe 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	; 0x24
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a8:	f001 f9fc 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 80033ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a81      	ldr	r2, [pc, #516]	; (80035b8 <HAL_I2C_Init+0x274>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d807      	bhi.n	80033c8 <HAL_I2C_Init+0x84>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a80      	ldr	r2, [pc, #512]	; (80035bc <HAL_I2C_Init+0x278>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	bf94      	ite	ls
 80033c0:	2301      	movls	r3, #1
 80033c2:	2300      	movhi	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e006      	b.n	80033d6 <HAL_I2C_Init+0x92>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a7d      	ldr	r2, [pc, #500]	; (80035c0 <HAL_I2C_Init+0x27c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bf94      	ite	ls
 80033d0:	2301      	movls	r3, #1
 80033d2:	2300      	movhi	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0e7      	b.n	80035ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a78      	ldr	r2, [pc, #480]	; (80035c4 <HAL_I2C_Init+0x280>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0c9b      	lsrs	r3, r3, #18
 80033e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a6a      	ldr	r2, [pc, #424]	; (80035b8 <HAL_I2C_Init+0x274>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d802      	bhi.n	8003418 <HAL_I2C_Init+0xd4>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3301      	adds	r3, #1
 8003416:	e009      	b.n	800342c <HAL_I2C_Init+0xe8>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	4a69      	ldr	r2, [pc, #420]	; (80035c8 <HAL_I2C_Init+0x284>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	3301      	adds	r3, #1
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	430b      	orrs	r3, r1
 8003432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800343e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	495c      	ldr	r1, [pc, #368]	; (80035b8 <HAL_I2C_Init+0x274>)
 8003448:	428b      	cmp	r3, r1
 800344a:	d819      	bhi.n	8003480 <HAL_I2C_Init+0x13c>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e59      	subs	r1, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	fbb1 f3f3 	udiv	r3, r1, r3
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003460:	400b      	ands	r3, r1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_I2C_Init+0x138>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1e59      	subs	r1, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fbb1 f3f3 	udiv	r3, r1, r3
 8003474:	3301      	adds	r3, #1
 8003476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347a:	e051      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 800347c:	2304      	movs	r3, #4
 800347e:	e04f      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d111      	bne.n	80034ac <HAL_I2C_Init+0x168>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1e58      	subs	r0, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	440b      	add	r3, r1
 8003496:	fbb0 f3f3 	udiv	r3, r0, r3
 800349a:	3301      	adds	r3, #1
 800349c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e012      	b.n	80034d2 <HAL_I2C_Init+0x18e>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1e58      	subs	r0, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	0099      	lsls	r1, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Init+0x196>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e022      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10e      	bne.n	8003500 <HAL_I2C_Init+0x1bc>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1e58      	subs	r0, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	440b      	add	r3, r1
 80034f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034fe:	e00f      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e58      	subs	r0, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	0099      	lsls	r1, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	6809      	ldr	r1, [r1, #0]
 8003524:	4313      	orrs	r3, r2
 8003526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800354e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6911      	ldr	r1, [r2, #16]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68d2      	ldr	r2, [r2, #12]
 800355a:	4311      	orrs	r1, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	430b      	orrs	r3, r1
 8003562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	000186a0 	.word	0x000186a0
 80035bc:	001e847f 	.word	0x001e847f
 80035c0:	003d08ff 	.word	0x003d08ff
 80035c4:	431bde83 	.word	0x431bde83
 80035c8:	10624dd3 	.word	0x10624dd3

080035cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e128      	b.n	8003830 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a90      	ldr	r2, [pc, #576]	; (8003838 <HAL_I2S_Init+0x26c>)
 80035f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fd faff 	bl	8000bfc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003614:	f023 030f 	bic.w	r3, r3, #15
 8003618:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2202      	movs	r2, #2
 8003620:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d060      	beq.n	80036ec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003632:	2310      	movs	r3, #16
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e001      	b.n	800363c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003638:	2320      	movs	r3, #32
 800363a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b20      	cmp	r3, #32
 8003642:	d802      	bhi.n	800364a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800364a:	2001      	movs	r0, #1
 800364c:	f001 f9b4 	bl	80049b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003650:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365a:	d125      	bne.n	80036a8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d010      	beq.n	8003686 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	fbb2 f2f3 	udiv	r2, r2, r3
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	461a      	mov	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	3305      	adds	r3, #5
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	e01f      	b.n	80036c6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	3305      	adds	r3, #5
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	e00e      	b.n	80036c6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	461a      	mov	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c2:	3305      	adds	r3, #5
 80036c4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4a5c      	ldr	r2, [pc, #368]	; (800383c <HAL_I2S_Init+0x270>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	08db      	lsrs	r3, r3, #3
 80036d0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	e003      	b.n	80036f4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80036ec:	2302      	movs	r3, #2
 80036ee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d902      	bls.n	8003700 <HAL_I2S_Init+0x134>
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	2bff      	cmp	r3, #255	; 0xff
 80036fe:	d907      	bls.n	8003710 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f043 0210 	orr.w	r2, r3, #16
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e08f      	b.n	8003830 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	ea42 0103 	orr.w	r1, r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	430a      	orrs	r2, r1
 8003722:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800372e:	f023 030f 	bic.w	r3, r3, #15
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6851      	ldr	r1, [r2, #4]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6892      	ldr	r2, [r2, #8]
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	68d2      	ldr	r2, [r2, #12]
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6992      	ldr	r2, [r2, #24]
 8003746:	430a      	orrs	r2, r1
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003752:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d161      	bne.n	8003820 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_I2S_Init+0x274>)
 8003760:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a37      	ldr	r2, [pc, #220]	; (8003844 <HAL_I2S_Init+0x278>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_I2S_Init+0x1a4>
 800376c:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_I2S_Init+0x27c>)
 800376e:	e001      	b.n	8003774 <HAL_I2S_Init+0x1a8>
 8003770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	4932      	ldr	r1, [pc, #200]	; (8003844 <HAL_I2S_Init+0x278>)
 800377c:	428a      	cmp	r2, r1
 800377e:	d101      	bne.n	8003784 <HAL_I2S_Init+0x1b8>
 8003780:	4a31      	ldr	r2, [pc, #196]	; (8003848 <HAL_I2S_Init+0x27c>)
 8003782:	e001      	b.n	8003788 <HAL_I2S_Init+0x1bc>
 8003784:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003788:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800378c:	f023 030f 	bic.w	r3, r3, #15
 8003790:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <HAL_I2S_Init+0x278>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d101      	bne.n	80037a0 <HAL_I2S_Init+0x1d4>
 800379c:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_I2S_Init+0x27c>)
 800379e:	e001      	b.n	80037a4 <HAL_I2S_Init+0x1d8>
 80037a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a4:	2202      	movs	r2, #2
 80037a6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a25      	ldr	r2, [pc, #148]	; (8003844 <HAL_I2S_Init+0x278>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_I2S_Init+0x1ea>
 80037b2:	4b25      	ldr	r3, [pc, #148]	; (8003848 <HAL_I2S_Init+0x27c>)
 80037b4:	e001      	b.n	80037ba <HAL_I2S_Init+0x1ee>
 80037b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c6:	d003      	beq.n	80037d0 <HAL_I2S_Init+0x204>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80037d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	e001      	b.n	80037dc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037e6:	4313      	orrs	r3, r2
 80037e8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	4313      	orrs	r3, r2
 8003802:	b29b      	uxth	r3, r3
 8003804:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003808:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <HAL_I2S_Init+0x278>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_I2S_Init+0x24c>
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <HAL_I2S_Init+0x27c>)
 8003816:	e001      	b.n	800381c <HAL_I2S_Init+0x250>
 8003818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381c:	897a      	ldrh	r2, [r7, #10]
 800381e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	08003943 	.word	0x08003943
 800383c:	cccccccd 	.word	0xcccccccd
 8003840:	08003a59 	.word	0x08003a59
 8003844:	40003800 	.word	0x40003800
 8003848:	40003400 	.word	0x40003400

0800384c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10e      	bne.n	80038dc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ffb8 	bl	800384c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	b292      	uxth	r2, r2
 80038f8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	1c9a      	adds	r2, r3, #2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10e      	bne.n	800393a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800392a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ff93 	bl	8003860 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b04      	cmp	r3, #4
 800395c:	d13a      	bne.n	80039d4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d109      	bne.n	800397c <I2S_IRQHandler+0x3a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d102      	bne.n	800397c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffb4 	bl	80038e4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d126      	bne.n	80039d4 <I2S_IRQHandler+0x92>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b20      	cmp	r3, #32
 8003992:	d11f      	bne.n	80039d4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ff50 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d136      	bne.n	8003a4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d109      	bne.n	80039fe <I2S_IRQHandler+0xbc>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	2b80      	cmp	r3, #128	; 0x80
 80039f6:	d102      	bne.n	80039fe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff45 	bl	8003888 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d122      	bne.n	8003a4e <I2S_IRQHandler+0x10c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d11b      	bne.n	8003a4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff13 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4aa2      	ldr	r2, [pc, #648]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a72:	4ba2      	ldr	r3, [pc, #648]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a74:	e001      	b.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a9b      	ldr	r2, [pc, #620]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a90:	4b9a      	ldr	r3, [pc, #616]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a92:	e001      	b.n	8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa4:	d004      	beq.n	8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f040 8099 	bne.w	8003be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d107      	bne.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f925 	bl	8003d14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9c8 	bl	8003e74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d13a      	bne.n	8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d035      	beq.n	8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a7e      	ldr	r2, [pc, #504]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b02:	4b7e      	ldr	r3, [pc, #504]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b04:	e001      	b.n	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4979      	ldr	r1, [pc, #484]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d101      	bne.n	8003b1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b16:	4b79      	ldr	r3, [pc, #484]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b18:	e001      	b.n	8003b1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fe88 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	f040 80be 	bne.w	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80b8 	beq.w	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a59      	ldr	r2, [pc, #356]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b96:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b98:	e001      	b.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4954      	ldr	r1, [pc, #336]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ba6:	428b      	cmp	r3, r1
 8003ba8:	d101      	bne.n	8003bae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003baa:	4b54      	ldr	r3, [pc, #336]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bac:	e001      	b.n	8003bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bb6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f043 0204 	orr.w	r2, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fe4a 	bl	8003874 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003be0:	e084      	b.n	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d107      	bne.n	8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8be 	bl	8003d78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d107      	bne.n	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8fd 	bl	8003e10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d12f      	bne.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02a      	beq.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c44:	4b2d      	ldr	r3, [pc, #180]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c46:	e001      	b.n	8003c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4929      	ldr	r1, [pc, #164]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d101      	bne.n	8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c5a:	e001      	b.n	8003c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f043 0202 	orr.w	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fdfa 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d131      	bne.n	8003cee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02c      	beq.n	8003cee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ca0:	e001      	b.n	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4912      	ldr	r1, [pc, #72]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cae:	428b      	cmp	r3, r1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cb4:	e001      	b.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	f043 0204 	orr.w	r2, r3, #4
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fdc5 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cea:	e000      	b.n	8003cee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cec:	bf00      	nop
}
 8003cee:	bf00      	nop
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40003800 	.word	0x40003800
 8003cfc:	40003400 	.word	0x40003400

08003d00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	1c99      	adds	r1, r3, #2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6251      	str	r1, [r2, #36]	; 0x24
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d113      	bne.n	8003d6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ffc9 	bl	8003d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c99      	adds	r1, r3, #2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6251      	str	r1, [r2, #36]	; 0x24
 8003d8a:	8819      	ldrh	r1, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <I2SEx_TxISR_I2SExt+0x90>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <I2SEx_TxISR_I2SExt+0x22>
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <I2SEx_TxISR_I2SExt+0x94>)
 8003d98:	e001      	b.n	8003d9e <I2SEx_TxISR_I2SExt+0x26>
 8003d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9e:	460a      	mov	r2, r1
 8003da0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d121      	bne.n	8003dfe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <I2SEx_TxISR_I2SExt+0x90>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <I2SEx_TxISR_I2SExt+0x50>
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <I2SEx_TxISR_I2SExt+0x94>)
 8003dc6:	e001      	b.n	8003dcc <I2SEx_TxISR_I2SExt+0x54>
 8003dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	490d      	ldr	r1, [pc, #52]	; (8003e08 <I2SEx_TxISR_I2SExt+0x90>)
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	d101      	bne.n	8003ddc <I2SEx_TxISR_I2SExt+0x64>
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <I2SEx_TxISR_I2SExt+0x94>)
 8003dda:	e001      	b.n	8003de0 <I2SEx_TxISR_I2SExt+0x68>
 8003ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003de4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff81 	bl	8003d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40003800 	.word	0x40003800
 8003e0c:	40003400 	.word	0x40003400

08003e10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68d8      	ldr	r0, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	1c99      	adds	r1, r3, #2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e28:	b282      	uxth	r2, r0
 8003e2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d113      	bne.n	8003e6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff4a 	bl	8003d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <I2SEx_RxISR_I2SExt+0x90>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <I2SEx_RxISR_I2SExt+0x16>
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <I2SEx_RxISR_I2SExt+0x94>)
 8003e88:	e001      	b.n	8003e8e <I2SEx_RxISR_I2SExt+0x1a>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8e:	68d8      	ldr	r0, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	1c99      	adds	r1, r3, #2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e9a:	b282      	uxth	r2, r0
 8003e9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d121      	bne.n	8003efa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <I2SEx_RxISR_I2SExt+0x90>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <I2SEx_RxISR_I2SExt+0x50>
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <I2SEx_RxISR_I2SExt+0x94>)
 8003ec2:	e001      	b.n	8003ec8 <I2SEx_RxISR_I2SExt+0x54>
 8003ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	490d      	ldr	r1, [pc, #52]	; (8003f04 <I2SEx_RxISR_I2SExt+0x90>)
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	d101      	bne.n	8003ed8 <I2SEx_RxISR_I2SExt+0x64>
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <I2SEx_RxISR_I2SExt+0x94>)
 8003ed6:	e001      	b.n	8003edc <I2SEx_RxISR_I2SExt+0x68>
 8003ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003edc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ee0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ff03 	bl	8003d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40003800 	.word	0x40003800
 8003f08:	40003400 	.word	0x40003400

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e264      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d075      	beq.n	8004016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2a:	4ba3      	ldr	r3, [pc, #652]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d00c      	beq.n	8003f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f36:	4ba0      	ldr	r3, [pc, #640]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d112      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f42:	4b9d      	ldr	r3, [pc, #628]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	4b99      	ldr	r3, [pc, #612]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05b      	beq.n	8004014 <HAL_RCC_OscConfig+0x108>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d157      	bne.n	8004014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e23f      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d106      	bne.n	8003f80 <HAL_RCC_OscConfig+0x74>
 8003f72:	4b91      	ldr	r3, [pc, #580]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a90      	ldr	r2, [pc, #576]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e01d      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x98>
 8003f8a:	4b8b      	ldr	r3, [pc, #556]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a8a      	ldr	r2, [pc, #552]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a87      	ldr	r2, [pc, #540]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003fa4:	4b84      	ldr	r3, [pc, #528]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a83      	ldr	r2, [pc, #524]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a80      	ldr	r2, [pc, #512]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d013      	beq.n	8003fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fd f8c4 	bl	8001150 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7fd f8c0 	bl	8001150 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e204      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	4b76      	ldr	r3, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0xc0>
 8003fea:	e014      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd f8b0 	bl	8001150 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fd f8ac 	bl	8001150 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1f0      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xe8>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004022:	4b65      	ldr	r3, [pc, #404]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402e:	4b62      	ldr	r3, [pc, #392]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004036:	2b08      	cmp	r3, #8
 8004038:	d11c      	bne.n	8004074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d116      	bne.n	8004074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_RCC_OscConfig+0x152>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e1c4      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405e:	4b56      	ldr	r3, [pc, #344]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4952      	ldr	r1, [pc, #328]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	e03a      	b.n	80040ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407c:	4b4f      	ldr	r3, [pc, #316]	; (80041bc <HAL_RCC_OscConfig+0x2b0>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fd f865 	bl	8001150 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800408a:	f7fd f861 	bl	8001150 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e1a5      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409c:	4b46      	ldr	r3, [pc, #280]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a8:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4940      	ldr	r1, [pc, #256]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
 80040bc:	e015      	b.n	80040ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040be:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <HAL_RCC_OscConfig+0x2b0>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd f844 	bl	8001150 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040cc:	f7fd f840 	bl	8001150 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e184      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d030      	beq.n	8004158 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fe:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCC_OscConfig+0x2b4>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fd f824 	bl	8001150 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410c:	f7fd f820 	bl	8001150 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e164      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x200>
 800412a:	e015      	b.n	8004158 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412c:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCC_OscConfig+0x2b4>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fd f80d 	bl	8001150 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413a:	f7fd f809 	bl	8001150 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e14d      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800414e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80a0 	beq.w	80042a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004166:	2300      	movs	r3, #0
 8004168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10f      	bne.n	8004196 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	6413      	str	r3, [r2, #64]	; 0x40
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_OscConfig+0x2b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d121      	bne.n	80041e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <HAL_RCC_OscConfig+0x2b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <HAL_RCC_OscConfig+0x2b8>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ae:	f7fc ffcf 	bl	8001150 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	e011      	b.n	80041da <HAL_RCC_OscConfig+0x2ce>
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	42470000 	.word	0x42470000
 80041c0:	42470e80 	.word	0x42470e80
 80041c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fc ffc2 	bl	8001150 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e106      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	4b85      	ldr	r3, [pc, #532]	; (80043f0 <HAL_RCC_OscConfig+0x4e4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x2f0>
 80041ee:	4b81      	ldr	r3, [pc, #516]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	4a80      	ldr	r2, [pc, #512]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	; 0x70
 80041fa:	e01c      	b.n	8004236 <HAL_RCC_OscConfig+0x32a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b05      	cmp	r3, #5
 8004202:	d10c      	bne.n	800421e <HAL_RCC_OscConfig+0x312>
 8004204:	4b7b      	ldr	r3, [pc, #492]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a7a      	ldr	r2, [pc, #488]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
 8004210:	4b78      	ldr	r3, [pc, #480]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a77      	ldr	r2, [pc, #476]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	e00b      	b.n	8004236 <HAL_RCC_OscConfig+0x32a>
 800421e:	4b75      	ldr	r3, [pc, #468]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a74      	ldr	r2, [pc, #464]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	4b72      	ldr	r3, [pc, #456]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a71      	ldr	r2, [pc, #452]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 8004230:	f023 0304 	bic.w	r3, r3, #4
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d015      	beq.n	800426a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423e:	f7fc ff87 	bl	8001150 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	e00a      	b.n	800425c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fc ff83 	bl	8001150 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0c5      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ee      	beq.n	8004246 <HAL_RCC_OscConfig+0x33a>
 8004268:	e014      	b.n	8004294 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426a:	f7fc ff71 	bl	8001150 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fc ff6d 	bl	8001150 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e0af      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	4b5a      	ldr	r3, [pc, #360]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ee      	bne.n	8004272 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429a:	4b56      	ldr	r3, [pc, #344]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a55      	ldr	r2, [pc, #340]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 80042a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 809b 	beq.w	80043e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d05c      	beq.n	8004376 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d141      	bne.n	8004348 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c4:	4b4c      	ldr	r3, [pc, #304]	; (80043f8 <HAL_RCC_OscConfig+0x4ec>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fc ff41 	bl	8001150 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fc ff3d 	bl	8001150 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e081      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e4:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	019b      	lsls	r3, r3, #6
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	3b01      	subs	r3, #1
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	061b      	lsls	r3, r3, #24
 8004314:	4937      	ldr	r1, [pc, #220]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431a:	4b37      	ldr	r3, [pc, #220]	; (80043f8 <HAL_RCC_OscConfig+0x4ec>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fc ff16 	bl	8001150 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fc ff12 	bl	8001150 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e056      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x41c>
 8004346:	e04e      	b.n	80043e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_RCC_OscConfig+0x4ec>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fc feff 	bl	8001150 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004356:	f7fc fefb 	bl	8001150 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e03f      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004368:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCC_OscConfig+0x44a>
 8004374:	e037      	b.n	80043e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e032      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004382:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <HAL_RCC_OscConfig+0x4e8>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d028      	beq.n	80043e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d121      	bne.n	80043e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d11a      	bne.n	80043e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d111      	bne.n	80043e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	3b01      	subs	r3, #1
 80043cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d001      	beq.n	80043e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40007000 	.word	0x40007000
 80043f4:	40023800 	.word	0x40023800
 80043f8:	42470060 	.word	0x42470060

080043fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0cc      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004410:	4b68      	ldr	r3, [pc, #416]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d90c      	bls.n	8004438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b63      	ldr	r3, [pc, #396]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0b8      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d020      	beq.n	8004486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004450:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	4a58      	ldr	r2, [pc, #352]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800445a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004468:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a52      	ldr	r2, [pc, #328]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004474:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	494d      	ldr	r1, [pc, #308]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d044      	beq.n	800451c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d119      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e07f      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ba:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e06f      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ca:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e067      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 0203 	bic.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4934      	ldr	r1, [pc, #208]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ec:	f7fc fe30 	bl	8001150 <HAL_GetTick>
 80044f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	e00a      	b.n	800450a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fc fe2c 	bl	8001150 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e04f      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 020c 	and.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	d1eb      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800451c:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d20c      	bcs.n	8004544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e032      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4916      	ldr	r1, [pc, #88]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	490e      	ldr	r1, [pc, #56]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004582:	f000 f821 	bl	80045c8 <HAL_RCC_GetSysClockFreq>
 8004586:	4602      	mov	r2, r0
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	490a      	ldr	r1, [pc, #40]	; (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	5ccb      	ldrb	r3, [r1, r3]
 8004596:	fa22 f303 	lsr.w	r3, r2, r3
 800459a:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800459c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fc fd90 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40023c00 	.word	0x40023c00
 80045b8:	40023800 	.word	0x40023800
 80045bc:	0800a560 	.word	0x0800a560
 80045c0:	20000000 	.word	0x20000000
 80045c4:	20000004 	.word	0x20000004

080045c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	2300      	movs	r3, #0
 80045da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e0:	4b67      	ldr	r3, [pc, #412]	; (8004780 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d00d      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x40>
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	f200 80bd 	bhi.w	800476c <HAL_RCC_GetSysClockFreq+0x1a4>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x34>
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d003      	beq.n	8004602 <HAL_RCC_GetSysClockFreq+0x3a>
 80045fa:	e0b7      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b61      	ldr	r3, [pc, #388]	; (8004784 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045fe:	60bb      	str	r3, [r7, #8]
       break;
 8004600:	e0b7      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004602:	4b61      	ldr	r3, [pc, #388]	; (8004788 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004604:	60bb      	str	r3, [r7, #8]
      break;
 8004606:	e0b4      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004608:	4b5d      	ldr	r3, [pc, #372]	; (8004780 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004610:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004612:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d04d      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461e:	4b58      	ldr	r3, [pc, #352]	; (8004780 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	099b      	lsrs	r3, r3, #6
 8004624:	461a      	mov	r2, r3
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800462e:	f04f 0100 	mov.w	r1, #0
 8004632:	ea02 0800 	and.w	r8, r2, r0
 8004636:	ea03 0901 	and.w	r9, r3, r1
 800463a:	4640      	mov	r0, r8
 800463c:	4649      	mov	r1, r9
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	014b      	lsls	r3, r1, #5
 8004648:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800464c:	0142      	lsls	r2, r0, #5
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	ebb0 0008 	subs.w	r0, r0, r8
 8004656:	eb61 0109 	sbc.w	r1, r1, r9
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	018b      	lsls	r3, r1, #6
 8004664:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004668:	0182      	lsls	r2, r0, #6
 800466a:	1a12      	subs	r2, r2, r0
 800466c:	eb63 0301 	sbc.w	r3, r3, r1
 8004670:	f04f 0000 	mov.w	r0, #0
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	00d9      	lsls	r1, r3, #3
 800467a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800467e:	00d0      	lsls	r0, r2, #3
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	eb12 0208 	adds.w	r2, r2, r8
 8004688:	eb43 0309 	adc.w	r3, r3, r9
 800468c:	f04f 0000 	mov.w	r0, #0
 8004690:	f04f 0100 	mov.w	r1, #0
 8004694:	0259      	lsls	r1, r3, #9
 8004696:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800469a:	0250      	lsls	r0, r2, #9
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	f7fb fde0 	bl	8000270 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e04a      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	461a      	mov	r2, r3
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	ea02 0400 	and.w	r4, r2, r0
 80046d2:	ea03 0501 	and.w	r5, r3, r1
 80046d6:	4620      	mov	r0, r4
 80046d8:	4629      	mov	r1, r5
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	014b      	lsls	r3, r1, #5
 80046e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046e8:	0142      	lsls	r2, r0, #5
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	1b00      	subs	r0, r0, r4
 80046f0:	eb61 0105 	sbc.w	r1, r1, r5
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	018b      	lsls	r3, r1, #6
 80046fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004702:	0182      	lsls	r2, r0, #6
 8004704:	1a12      	subs	r2, r2, r0
 8004706:	eb63 0301 	sbc.w	r3, r3, r1
 800470a:	f04f 0000 	mov.w	r0, #0
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	00d9      	lsls	r1, r3, #3
 8004714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004718:	00d0      	lsls	r0, r2, #3
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	1912      	adds	r2, r2, r4
 8004720:	eb45 0303 	adc.w	r3, r5, r3
 8004724:	f04f 0000 	mov.w	r0, #0
 8004728:	f04f 0100 	mov.w	r1, #0
 800472c:	0299      	lsls	r1, r3, #10
 800472e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004732:	0290      	lsls	r0, r2, #10
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	461a      	mov	r2, r3
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	f7fb fd94 	bl	8000270 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4613      	mov	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	3301      	adds	r3, #1
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	60bb      	str	r3, [r7, #8]
      break;
 800476a:	e002      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800476e:	60bb      	str	r3, [r7, #8]
      break;
 8004770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004772:	68bb      	ldr	r3, [r7, #8]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800
 8004784:	00f42400 	.word	0x00f42400
 8004788:	007a1200 	.word	0x007a1200

0800478c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000000 	.word	0x20000000

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047a8:	f7ff fff0 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	0a9b      	lsrs	r3, r3, #10
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4903      	ldr	r1, [pc, #12]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40023800 	.word	0x40023800
 80047c8:	0800a570 	.word	0x0800a570

080047cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047d0:	f7ff ffdc 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	0b5b      	lsrs	r3, r3, #13
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4903      	ldr	r1, [pc, #12]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40023800 	.word	0x40023800
 80047f0:	0800a570 	.word	0x0800a570

080047f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d105      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004818:	2b00      	cmp	r3, #0
 800481a:	d035      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800481c:	4b62      	ldr	r3, [pc, #392]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004822:	f7fc fc95 	bl	8001150 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004828:	e008      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800482a:	f7fc fc91 	bl	8001150 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e0b0      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800483c:	4b5b      	ldr	r3, [pc, #364]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f0      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	019a      	lsls	r2, r3, #6
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	071b      	lsls	r3, r3, #28
 8004854:	4955      	ldr	r1, [pc, #340]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800485c:	4b52      	ldr	r3, [pc, #328]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004862:	f7fc fc75 	bl	8001150 <HAL_GetTick>
 8004866:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800486a:	f7fc fc71 	bl	8001150 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e090      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800487c:	4b4b      	ldr	r3, [pc, #300]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8083 	beq.w	800499c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	4b44      	ldr	r3, [pc, #272]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	4a43      	ldr	r2, [pc, #268]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6413      	str	r3, [r2, #64]	; 0x40
 80048a6:	4b41      	ldr	r3, [pc, #260]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048b2:	4b3f      	ldr	r3, [pc, #252]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3e      	ldr	r2, [pc, #248]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048be:	f7fc fc47 	bl	8001150 <HAL_GetTick>
 80048c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048c6:	f7fc fc43 	bl	8001150 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e062      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048d8:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048e4:	4b31      	ldr	r3, [pc, #196]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d02f      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d028      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004902:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800490c:	4b29      	ldr	r3, [pc, #164]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004912:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d114      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800492a:	f7fc fc11 	bl	8001150 <HAL_GetTick>
 800492e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fc fc0d 	bl	8001150 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e02a      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	4b18      	ldr	r3, [pc, #96]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ee      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004960:	d10d      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004976:	490d      	ldr	r1, [pc, #52]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]
 800497c:	e005      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004984:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004988:	6093      	str	r3, [r2, #8]
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800498c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004996:	4905      	ldr	r1, [pc, #20]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004998:	4313      	orrs	r3, r2
 800499a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	42470068 	.word	0x42470068
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40007000 	.word	0x40007000
 80049b4:	42470e40 	.word	0x42470e40

080049b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d13e      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80049d6:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d12f      	bne.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80049ec:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049ee:	617b      	str	r3, [r7, #20]
          break;
 80049f0:	e02f      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049f2:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fe:	d108      	bne.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a00:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a08:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	e007      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1a:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a22:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	fb02 f303 	mul.w	r3, r2, r3
 8004a34:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3c:	0f1b      	lsrs	r3, r3, #28
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
          break;
 8004a4a:	e002      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
          break;
 8004a50:	bf00      	nop
        }
      }
      break;
 8004a52:	bf00      	nop
    }
  }
  return frequency;
 8004a54:	697b      	ldr	r3, [r7, #20]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800
 8004a68:	00bb8000 	.word	0x00bb8000
 8004a6c:	007a1200 	.word	0x007a1200
 8004a70:	00f42400 	.word	0x00f42400

08004a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e07b      	b.n	8004b7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a96:	d009      	beq.n	8004aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	61da      	str	r2, [r3, #28]
 8004a9e:	e005      	b.n	8004aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc f918 	bl	8000cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	ea42 0103 	orr.w	r1, r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	f003 0104 	and.w	r1, r3, #4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	f003 0210 	and.w	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e03f      	b.n	8004c18 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fc f8ed 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2224      	movs	r2, #36	; 0x24
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fcda 	bl	8005584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d11d      	bne.n	8004c76 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_UART_Receive_IT+0x26>
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e016      	b.n	8004c78 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_UART_Receive_IT+0x38>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e00f      	b.n	8004c78 <HAL_UART_Receive_IT+0x58>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fab5 	bl	80051dc <UART_Start_Receive_IT>
 8004c72:	4603      	mov	r3, r0
 8004c74:	e000      	b.n	8004c78 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b0ba      	sub	sp, #232	; 0xe8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x66>
 8004cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fb95 	bl	800540e <UART_Receive_IT>
      return;
 8004ce4:	e256      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80de 	beq.w	8004eac <HAL_UART_IRQHandler+0x22c>
 8004cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 80d1 	beq.w	8004eac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <HAL_UART_IRQHandler+0xae>
 8004d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_UART_IRQHandler+0xd2>
 8004d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f043 0202 	orr.w	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_UART_IRQHandler+0xf6>
 8004d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0204 	orr.w	r2, r3, #4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d011      	beq.n	8004da6 <HAL_UART_IRQHandler+0x126>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d105      	bne.n	8004d9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f043 0208 	orr.w	r2, r3, #8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 81ed 	beq.w	800518a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_UART_IRQHandler+0x14e>
 8004dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fb20 	bl	800540e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <HAL_UART_IRQHandler+0x17a>
 8004df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d04f      	beq.n	8004e9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa28 	bl	8005250 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d141      	bne.n	8004e92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3314      	adds	r3, #20
 8004e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3314      	adds	r3, #20
 8004e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1d9      	bne.n	8004e0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d013      	beq.n	8004e8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	4a7d      	ldr	r2, [pc, #500]	; (800505c <HAL_UART_IRQHandler+0x3dc>)
 8004e68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fc fb1f 	bl	80014b2 <HAL_DMA_Abort_IT>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e84:	4610      	mov	r0, r2
 8004e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	e00e      	b.n	8004ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f990 	bl	80051b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	e00a      	b.n	8004ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f98c 	bl	80051b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	e006      	b.n	8004ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f988 	bl	80051b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ea6:	e170      	b.n	800518a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	bf00      	nop
    return;
 8004eaa:	e16e      	b.n	800518a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	f040 814a 	bne.w	800514a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8143 	beq.w	800514a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 813c 	beq.w	800514a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	f040 80b4 	bne.w	8005060 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8140 	beq.w	800518e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f16:	429a      	cmp	r2, r3
 8004f18:	f080 8139 	bcs.w	800518e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2e:	f000 8088 	beq.w	8005042 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	330c      	adds	r3, #12
 8004f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1d9      	bne.n	8004f32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3314      	adds	r3, #20
 8004f84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3314      	adds	r3, #20
 8004f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e1      	bne.n	8004f7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3314      	adds	r3, #20
 8004fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e3      	bne.n	8004fba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005012:	f023 0310 	bic.w	r3, r3, #16
 8005016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005024:	65ba      	str	r2, [r7, #88]	; 0x58
 8005026:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800502a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e3      	bne.n	8005000 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	4618      	mov	r0, r3
 800503e:	f7fc f9c8 	bl	80013d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800504a:	b29b      	uxth	r3, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	b29b      	uxth	r3, r3
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8b6 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005058:	e099      	b.n	800518e <HAL_UART_IRQHandler+0x50e>
 800505a:	bf00      	nop
 800505c:	08005317 	.word	0x08005317
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005068:	b29b      	uxth	r3, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 808b 	beq.w	8005192 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800507c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8086 	beq.w	8005192 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050aa:	647a      	str	r2, [r7, #68]	; 0x44
 80050ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e3      	bne.n	8005086 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	623b      	str	r3, [r7, #32]
   return(result);
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3314      	adds	r3, #20
 80050de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050e2:	633a      	str	r2, [r7, #48]	; 0x30
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e3      	bne.n	80050be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	60fb      	str	r3, [r7, #12]
   return(result);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0310 	bic.w	r3, r3, #16
 800511a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005128:	61fa      	str	r2, [r7, #28]
 800512a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	617b      	str	r3, [r7, #20]
   return(result);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e3      	bne.n	8005104 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f83e 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005148:	e023      	b.n	8005192 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_UART_IRQHandler+0x4ea>
 8005156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f8eb 	bl	800533e <UART_Transmit_IT>
    return;
 8005168:	e014      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800516a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00e      	beq.n	8005194 <HAL_UART_IRQHandler+0x514>
 8005176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f92b 	bl	80053de <UART_EndTransmit_IT>
    return;
 8005188:	e004      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
    return;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
      return;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
      return;
 8005192:	bf00      	nop
  }
}
 8005194:	37e8      	adds	r7, #232	; 0xe8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop

0800519c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	88fa      	ldrh	r2, [r7, #6]
 80051fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2222      	movs	r2, #34	; 0x22
 8005206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005220:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695a      	ldr	r2, [r3, #20]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0220 	orr.w	r2, r2, #32
 8005240:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b095      	sub	sp, #84	; 0x54
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800526e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005278:	643a      	str	r2, [r7, #64]	; 0x40
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800527e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	61fb      	str	r3, [r7, #28]
   return(result);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d119      	bne.n	80052fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f023 0310 	bic.w	r3, r3, #16
 80052de:	647b      	str	r3, [r7, #68]	; 0x44
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e8:	61ba      	str	r2, [r7, #24]
 80052ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6979      	ldr	r1, [r7, #20]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	613b      	str	r3, [r7, #16]
   return(result);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
}
 800530a:	bf00      	nop
 800530c:	3754      	adds	r7, #84	; 0x54
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff ff3d 	bl	80051b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b21      	cmp	r3, #33	; 0x21
 8005350:	d13e      	bne.n	80053d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535a:	d114      	bne.n	8005386 <UART_Transmit_IT+0x48>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d110      	bne.n	8005386 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005378:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	621a      	str	r2, [r3, #32]
 8005384:	e008      	b.n	8005398 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6211      	str	r1, [r2, #32]
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4619      	mov	r1, r3
 80053a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff fecc 	bl	800519c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b08c      	sub	sp, #48	; 0x30
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b22      	cmp	r3, #34	; 0x22
 8005420:	f040 80ab 	bne.w	800557a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542c:	d117      	bne.n	800545e <UART_Receive_IT+0x50>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d113      	bne.n	800545e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544c:	b29a      	uxth	r2, r3
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	1c9a      	adds	r2, r3, #2
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	629a      	str	r2, [r3, #40]	; 0x28
 800545c:	e026      	b.n	80054ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005470:	d007      	beq.n	8005482 <UART_Receive_IT+0x74>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <UART_Receive_IT+0x82>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e008      	b.n	80054a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800549c:	b2da      	uxtb	r2, r3
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	4619      	mov	r1, r3
 80054ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d15a      	bne.n	8005576 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0220 	bic.w	r2, r2, #32
 80054ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d135      	bne.n	800556c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	330c      	adds	r3, #12
 800550c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	613b      	str	r3, [r7, #16]
   return(result);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f023 0310 	bic.w	r3, r3, #16
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005526:	623a      	str	r2, [r7, #32]
 8005528:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	69f9      	ldr	r1, [r7, #28]
 800552c:	6a3a      	ldr	r2, [r7, #32]
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	61bb      	str	r3, [r7, #24]
   return(result);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e5      	bne.n	8005506 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b10      	cmp	r3, #16
 8005546:	d10a      	bne.n	800555e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff fe2d 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
 800556a:	e002      	b.n	8005572 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fa fffb 	bl	8000568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	e002      	b.n	800557c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	e000      	b.n	800557c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800557a:	2302      	movs	r3, #2
  }
}
 800557c:	4618      	mov	r0, r3
 800557e:	3730      	adds	r7, #48	; 0x30
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	b09f      	sub	sp, #124	; 0x7c
 800558a:	af00      	add	r7, sp, #0
 800558c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800558e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559a:	68d9      	ldr	r1, [r3, #12]
 800559c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	ea40 0301 	orr.w	r3, r0, r1
 80055a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80055be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055c8:	f021 010c 	bic.w	r1, r1, #12
 80055cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055d2:	430b      	orrs	r3, r1
 80055d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e2:	6999      	ldr	r1, [r3, #24]
 80055e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	ea40 0301 	orr.w	r3, r0, r1
 80055ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4bc5      	ldr	r3, [pc, #788]	; (8005908 <UART_SetConfig+0x384>)
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d004      	beq.n	8005602 <UART_SetConfig+0x7e>
 80055f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4bc3      	ldr	r3, [pc, #780]	; (800590c <UART_SetConfig+0x388>)
 80055fe:	429a      	cmp	r2, r3
 8005600:	d103      	bne.n	800560a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005602:	f7ff f8e3 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 8005606:	6778      	str	r0, [r7, #116]	; 0x74
 8005608:	e002      	b.n	8005610 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800560a:	f7ff f8cb 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 800560e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005618:	f040 80b6 	bne.w	8005788 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800561c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800561e:	461c      	mov	r4, r3
 8005620:	f04f 0500 	mov.w	r5, #0
 8005624:	4622      	mov	r2, r4
 8005626:	462b      	mov	r3, r5
 8005628:	1891      	adds	r1, r2, r2
 800562a:	6439      	str	r1, [r7, #64]	; 0x40
 800562c:	415b      	adcs	r3, r3
 800562e:	647b      	str	r3, [r7, #68]	; 0x44
 8005630:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005634:	1912      	adds	r2, r2, r4
 8005636:	eb45 0303 	adc.w	r3, r5, r3
 800563a:	f04f 0000 	mov.w	r0, #0
 800563e:	f04f 0100 	mov.w	r1, #0
 8005642:	00d9      	lsls	r1, r3, #3
 8005644:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005648:	00d0      	lsls	r0, r2, #3
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	1911      	adds	r1, r2, r4
 8005650:	6639      	str	r1, [r7, #96]	; 0x60
 8005652:	416b      	adcs	r3, r5
 8005654:	667b      	str	r3, [r7, #100]	; 0x64
 8005656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	461a      	mov	r2, r3
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	1891      	adds	r1, r2, r2
 8005662:	63b9      	str	r1, [r7, #56]	; 0x38
 8005664:	415b      	adcs	r3, r3
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800566c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005670:	f7fa fdfe 	bl	8000270 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4ba5      	ldr	r3, [pc, #660]	; (8005910 <UART_SetConfig+0x38c>)
 800567a:	fba3 2302 	umull	r2, r3, r3, r2
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	011e      	lsls	r6, r3, #4
 8005682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005684:	461c      	mov	r4, r3
 8005686:	f04f 0500 	mov.w	r5, #0
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	1891      	adds	r1, r2, r2
 8005690:	6339      	str	r1, [r7, #48]	; 0x30
 8005692:	415b      	adcs	r3, r3
 8005694:	637b      	str	r3, [r7, #52]	; 0x34
 8005696:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800569a:	1912      	adds	r2, r2, r4
 800569c:	eb45 0303 	adc.w	r3, r5, r3
 80056a0:	f04f 0000 	mov.w	r0, #0
 80056a4:	f04f 0100 	mov.w	r1, #0
 80056a8:	00d9      	lsls	r1, r3, #3
 80056aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056ae:	00d0      	lsls	r0, r2, #3
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	1911      	adds	r1, r2, r4
 80056b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80056b8:	416b      	adcs	r3, r5
 80056ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	461a      	mov	r2, r3
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	1891      	adds	r1, r2, r2
 80056c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80056ca:	415b      	adcs	r3, r3
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056d6:	f7fa fdcb 	bl	8000270 <__aeabi_uldivmod>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4b8c      	ldr	r3, [pc, #560]	; (8005910 <UART_SetConfig+0x38c>)
 80056e0:	fba3 1302 	umull	r1, r3, r3, r2
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	2164      	movs	r1, #100	; 0x64
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	3332      	adds	r3, #50	; 0x32
 80056f2:	4a87      	ldr	r2, [pc, #540]	; (8005910 <UART_SetConfig+0x38c>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005700:	441e      	add	r6, r3
 8005702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005704:	4618      	mov	r0, r3
 8005706:	f04f 0100 	mov.w	r1, #0
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	1894      	adds	r4, r2, r2
 8005710:	623c      	str	r4, [r7, #32]
 8005712:	415b      	adcs	r3, r3
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
 8005716:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800571a:	1812      	adds	r2, r2, r0
 800571c:	eb41 0303 	adc.w	r3, r1, r3
 8005720:	f04f 0400 	mov.w	r4, #0
 8005724:	f04f 0500 	mov.w	r5, #0
 8005728:	00dd      	lsls	r5, r3, #3
 800572a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800572e:	00d4      	lsls	r4, r2, #3
 8005730:	4622      	mov	r2, r4
 8005732:	462b      	mov	r3, r5
 8005734:	1814      	adds	r4, r2, r0
 8005736:	653c      	str	r4, [r7, #80]	; 0x50
 8005738:	414b      	adcs	r3, r1
 800573a:	657b      	str	r3, [r7, #84]	; 0x54
 800573c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	461a      	mov	r2, r3
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	1891      	adds	r1, r2, r2
 8005748:	61b9      	str	r1, [r7, #24]
 800574a:	415b      	adcs	r3, r3
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005752:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005756:	f7fa fd8b 	bl	8000270 <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4b6c      	ldr	r3, [pc, #432]	; (8005910 <UART_SetConfig+0x38c>)
 8005760:	fba3 1302 	umull	r1, r3, r3, r2
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	2164      	movs	r1, #100	; 0x64
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	3332      	adds	r3, #50	; 0x32
 8005772:	4a67      	ldr	r2, [pc, #412]	; (8005910 <UART_SetConfig+0x38c>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	f003 0207 	and.w	r2, r3, #7
 800577e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4432      	add	r2, r6
 8005784:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005786:	e0b9      	b.n	80058fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800578a:	461c      	mov	r4, r3
 800578c:	f04f 0500 	mov.w	r5, #0
 8005790:	4622      	mov	r2, r4
 8005792:	462b      	mov	r3, r5
 8005794:	1891      	adds	r1, r2, r2
 8005796:	6139      	str	r1, [r7, #16]
 8005798:	415b      	adcs	r3, r3
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057a0:	1912      	adds	r2, r2, r4
 80057a2:	eb45 0303 	adc.w	r3, r5, r3
 80057a6:	f04f 0000 	mov.w	r0, #0
 80057aa:	f04f 0100 	mov.w	r1, #0
 80057ae:	00d9      	lsls	r1, r3, #3
 80057b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057b4:	00d0      	lsls	r0, r2, #3
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	eb12 0804 	adds.w	r8, r2, r4
 80057be:	eb43 0905 	adc.w	r9, r3, r5
 80057c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f04f 0100 	mov.w	r1, #0
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	008b      	lsls	r3, r1, #2
 80057d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057da:	0082      	lsls	r2, r0, #2
 80057dc:	4640      	mov	r0, r8
 80057de:	4649      	mov	r1, r9
 80057e0:	f7fa fd46 	bl	8000270 <__aeabi_uldivmod>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4b49      	ldr	r3, [pc, #292]	; (8005910 <UART_SetConfig+0x38c>)
 80057ea:	fba3 2302 	umull	r2, r3, r3, r2
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	011e      	lsls	r6, r3, #4
 80057f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f4:	4618      	mov	r0, r3
 80057f6:	f04f 0100 	mov.w	r1, #0
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	1894      	adds	r4, r2, r2
 8005800:	60bc      	str	r4, [r7, #8]
 8005802:	415b      	adcs	r3, r3
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800580a:	1812      	adds	r2, r2, r0
 800580c:	eb41 0303 	adc.w	r3, r1, r3
 8005810:	f04f 0400 	mov.w	r4, #0
 8005814:	f04f 0500 	mov.w	r5, #0
 8005818:	00dd      	lsls	r5, r3, #3
 800581a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800581e:	00d4      	lsls	r4, r2, #3
 8005820:	4622      	mov	r2, r4
 8005822:	462b      	mov	r3, r5
 8005824:	1814      	adds	r4, r2, r0
 8005826:	64bc      	str	r4, [r7, #72]	; 0x48
 8005828:	414b      	adcs	r3, r1
 800582a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	f04f 0100 	mov.w	r1, #0
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	008b      	lsls	r3, r1, #2
 8005840:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005844:	0082      	lsls	r2, r0, #2
 8005846:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800584a:	f7fa fd11 	bl	8000270 <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4b2f      	ldr	r3, [pc, #188]	; (8005910 <UART_SetConfig+0x38c>)
 8005854:	fba3 1302 	umull	r1, r3, r3, r2
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	2164      	movs	r1, #100	; 0x64
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	3332      	adds	r3, #50	; 0x32
 8005866:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <UART_SetConfig+0x38c>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005872:	441e      	add	r6, r3
 8005874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005876:	4618      	mov	r0, r3
 8005878:	f04f 0100 	mov.w	r1, #0
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	1894      	adds	r4, r2, r2
 8005882:	603c      	str	r4, [r7, #0]
 8005884:	415b      	adcs	r3, r3
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800588c:	1812      	adds	r2, r2, r0
 800588e:	eb41 0303 	adc.w	r3, r1, r3
 8005892:	f04f 0400 	mov.w	r4, #0
 8005896:	f04f 0500 	mov.w	r5, #0
 800589a:	00dd      	lsls	r5, r3, #3
 800589c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058a0:	00d4      	lsls	r4, r2, #3
 80058a2:	4622      	mov	r2, r4
 80058a4:	462b      	mov	r3, r5
 80058a6:	eb12 0a00 	adds.w	sl, r2, r0
 80058aa:	eb43 0b01 	adc.w	fp, r3, r1
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	008b      	lsls	r3, r1, #2
 80058c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058c6:	0082      	lsls	r2, r0, #2
 80058c8:	4650      	mov	r0, sl
 80058ca:	4659      	mov	r1, fp
 80058cc:	f7fa fcd0 	bl	8000270 <__aeabi_uldivmod>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <UART_SetConfig+0x38c>)
 80058d6:	fba3 1302 	umull	r1, r3, r3, r2
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	2164      	movs	r1, #100	; 0x64
 80058de:	fb01 f303 	mul.w	r3, r1, r3
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	3332      	adds	r3, #50	; 0x32
 80058e8:	4a09      	ldr	r2, [pc, #36]	; (8005910 <UART_SetConfig+0x38c>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	f003 020f 	and.w	r2, r3, #15
 80058f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4432      	add	r2, r6
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	377c      	adds	r7, #124	; 0x7c
 8005900:	46bd      	mov	sp, r7
 8005902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005906:	bf00      	nop
 8005908:	40011000 	.word	0x40011000
 800590c:	40011400 	.word	0x40011400
 8005910:	51eb851f 	.word	0x51eb851f

08005914 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005914:	b084      	sub	sp, #16
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	f107 001c 	add.w	r0, r7, #28
 8005922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	2b01      	cmp	r3, #1
 800592a:	d122      	bne.n	8005972 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d105      	bne.n	8005966 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f9a0 	bl	8005cac <USB_CoreReset>
 800596c:	4603      	mov	r3, r0
 800596e:	73fb      	strb	r3, [r7, #15]
 8005970:	e01a      	b.n	80059a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f994 	bl	8005cac <USB_CoreReset>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
 800599a:	e005      	b.n	80059a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10b      	bne.n	80059c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f043 0206 	orr.w	r2, r3, #6
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059d2:	b004      	add	sp, #16
 80059d4:	4770      	bx	lr

080059d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f043 0201 	orr.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f023 0201 	bic.w	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d115      	bne.n	8005a68 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a48:	2001      	movs	r0, #1
 8005a4a:	f7fb fb8d 	bl	8001168 <HAL_Delay>
      ms++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f91a 	bl	8005c8e <USB_GetMode>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d01e      	beq.n	8005a9e <USB_SetCurrentMode+0x84>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b31      	cmp	r3, #49	; 0x31
 8005a64:	d9f0      	bls.n	8005a48 <USB_SetCurrentMode+0x2e>
 8005a66:	e01a      	b.n	8005a9e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d115      	bne.n	8005a9a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	f7fb fb74 	bl	8001168 <HAL_Delay>
      ms++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f901 	bl	8005c8e <USB_GetMode>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <USB_SetCurrentMode+0x84>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b31      	cmp	r3, #49	; 0x31
 8005a96:	d9f0      	bls.n	8005a7a <USB_SetCurrentMode+0x60>
 8005a98:	e001      	b.n	8005a9e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e005      	b.n	8005aaa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b32      	cmp	r3, #50	; 0x32
 8005aa2:	d101      	bne.n	8005aa8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	019b      	lsls	r3, r3, #6
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <USB_FlushTxFifo+0x44>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d901      	bls.n	8005ade <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e006      	b.n	8005aec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d0f1      	beq.n	8005ace <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	00030d40 	.word	0x00030d40

08005afc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2210      	movs	r2, #16
 8005b0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	4a08      	ldr	r2, [pc, #32]	; (8005b38 <USB_FlushRxFifo+0x3c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e006      	b.n	8005b2c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d0f1      	beq.n	8005b0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	00030d40 	.word	0x00030d40

08005b3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4611      	mov	r1, r2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	71fb      	strb	r3, [r7, #7]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d123      	bne.n	8005baa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b62:	88bb      	ldrh	r3, [r7, #4]
 8005b64:	3303      	adds	r3, #3
 8005b66:	089b      	lsrs	r3, r3, #2
 8005b68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	e018      	b.n	8005ba2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	031a      	lsls	r2, r3, #12
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d3e2      	bcc.n	8005b70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3724      	adds	r7, #36	; 0x24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b08b      	sub	sp, #44	; 0x2c
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	089b      	lsrs	r3, r3, #2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	e014      	b.n	8005c0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	3301      	adds	r3, #1
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	3301      	adds	r3, #1
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	623b      	str	r3, [r7, #32]
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d3e6      	bcc.n	8005be4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c16:	8bfb      	ldrh	r3, [r7, #30]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01e      	beq.n	8005c5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c26:	461a      	mov	r2, r3
 8005c28:	f107 0310 	add.w	r3, r7, #16
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	701a      	strb	r2, [r3, #0]
      i++;
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	3301      	adds	r3, #1
 8005c46:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c4e:	8bfb      	ldrh	r3, [r7, #30]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c54:	8bfb      	ldrh	r3, [r7, #30]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1ea      	bne.n	8005c30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	372c      	adds	r7, #44	; 0x2c
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c80:	68fb      	ldr	r3, [r7, #12]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <USB_CoreReset+0x60>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e01a      	b.n	8005cfe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	daf3      	bge.n	8005cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f043 0201 	orr.w	r2, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <USB_CoreReset+0x60>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e006      	b.n	8005cfe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d0f1      	beq.n	8005ce0 <USB_CoreReset+0x34>

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	00030d40 	.word	0x00030d40

08005d10 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d10:	b084      	sub	sp, #16
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	f107 001c 	add.w	r0, r7, #28
 8005d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d018      	beq.n	8005d94 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d10a      	bne.n	8005d7e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d76:	f043 0304 	orr.w	r3, r3, #4
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	e014      	b.n	8005da8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d8c:	f023 0304 	bic.w	r3, r3, #4
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e009      	b.n	8005da8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005da2:	f023 0304 	bic.w	r3, r3, #4
 8005da6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005da8:	2110      	movs	r1, #16
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fe82 	bl	8005ab4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff fea3 	bl	8005afc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e015      	b.n	8005de8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	461a      	mov	r2, r3
 8005dde:	2300      	movs	r3, #0
 8005de0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d3e5      	bcc.n	8005dbc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e10:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <USB_HostInit+0x154>)
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a13      	ldr	r2, [pc, #76]	; (8005e68 <USB_HostInit+0x158>)
 8005e1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005e20:	e009      	b.n	8005e36 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2280      	movs	r2, #128	; 0x80
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a10      	ldr	r2, [pc, #64]	; (8005e6c <USB_HostInit+0x15c>)
 8005e2c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a0f      	ldr	r2, [pc, #60]	; (8005e70 <USB_HostInit+0x160>)
 8005e32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d105      	bne.n	8005e48 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	f043 0210 	orr.w	r2, r3, #16
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <USB_HostInit+0x164>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e60:	b004      	add	sp, #16
 8005e62:	4770      	bx	lr
 8005e64:	01000200 	.word	0x01000200
 8005e68:	00e00300 	.word	0x00e00300
 8005e6c:	00600080 	.word	0x00600080
 8005e70:	004000e0 	.word	0x004000e0
 8005e74:	a3200008 	.word	0xa3200008

08005e78 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d107      	bne.n	8005eca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005ec6:	6053      	str	r3, [r2, #4]
 8005ec8:	e009      	b.n	8005ede <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d106      	bne.n	8005ede <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005edc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f1c:	2064      	movs	r0, #100	; 0x64
 8005f1e:	f7fb f923 	bl	8001168 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f2e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f30:	200a      	movs	r0, #10
 8005f32:	f7fb f919 	bl	8001168 <HAL_Delay>

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d109      	bne.n	8005f84 <USB_DriveVbus+0x44>
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d106      	bne.n	8005f84 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f82:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8e:	d109      	bne.n	8005fa4 <USB_DriveVbus+0x64>
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	0c5b      	lsrs	r3, r3, #17
 8005fd0:	f003 0303 	and.w	r3, r3, #3
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	b29b      	uxth	r3, r3
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	4608      	mov	r0, r1
 800600e:	4611      	mov	r1, r2
 8006010:	461a      	mov	r2, r3
 8006012:	4603      	mov	r3, r0
 8006014:	70fb      	strb	r3, [r7, #3]
 8006016:	460b      	mov	r3, r1
 8006018:	70bb      	strb	r3, [r7, #2]
 800601a:	4613      	mov	r3, r2
 800601c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	4413      	add	r3, r2
 800602e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006032:	461a      	mov	r2, r3
 8006034:	f04f 33ff 	mov.w	r3, #4294967295
 8006038:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800603a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800603e:	2b03      	cmp	r3, #3
 8006040:	d87e      	bhi.n	8006140 <USB_HC_Init+0x13c>
 8006042:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <USB_HC_Init+0x44>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	08006059 	.word	0x08006059
 800604c:	08006103 	.word	0x08006103
 8006050:	08006059 	.word	0x08006059
 8006054:	080060c5 	.word	0x080060c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	4413      	add	r3, r2
 8006060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006064:	461a      	mov	r2, r3
 8006066:	f240 439d 	movw	r3, #1181	; 0x49d
 800606a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800606c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006070:	2b00      	cmp	r3, #0
 8006072:	da10      	bge.n	8006096 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	440a      	add	r2, r1
 800608a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006092:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006094:	e057      	b.n	8006146 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d051      	beq.n	8006146 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060c0:	60d3      	str	r3, [r2, #12]
      break;
 80060c2:	e040      	b.n	8006146 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d0:	461a      	mov	r2, r3
 80060d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80060d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	da34      	bge.n	800614a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006100:	e023      	b.n	800614a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	461a      	mov	r2, r3
 8006110:	f240 2325 	movw	r3, #549	; 0x225
 8006114:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006116:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800611a:	2b00      	cmp	r3, #0
 800611c:	da17      	bge.n	800614e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4413      	add	r3, r2
 8006126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	440a      	add	r2, r1
 8006134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006138:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800613c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800613e:	e006      	b.n	800614e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	77fb      	strb	r3, [r7, #31]
      break;
 8006144:	e004      	b.n	8006150 <USB_HC_Init+0x14c>
      break;
 8006146:	bf00      	nop
 8006148:	e002      	b.n	8006150 <USB_HC_Init+0x14c>
      break;
 800614a:	bf00      	nop
 800614c:	e000      	b.n	8006150 <USB_HC_Init+0x14c>
      break;
 800614e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	2101      	movs	r1, #1
 8006160:	fa01 f303 	lsl.w	r3, r1, r3
 8006164:	6939      	ldr	r1, [r7, #16]
 8006166:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800616a:	4313      	orrs	r3, r2
 800616c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800617a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da03      	bge.n	800618a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	e001      	b.n	800618e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff ff0f 	bl	8005fb2 <USB_GetHostSpeed>
 8006194:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006196:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800619a:	2b02      	cmp	r3, #2
 800619c:	d106      	bne.n	80061ac <USB_HC_Init+0x1a8>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d003      	beq.n	80061ac <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80061a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e001      	b.n	80061b0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061b0:	787b      	ldrb	r3, [r7, #1]
 80061b2:	059b      	lsls	r3, r3, #22
 80061b4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061b8:	78bb      	ldrb	r3, [r7, #2]
 80061ba:	02db      	lsls	r3, r3, #11
 80061bc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061c0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061c6:	049b      	lsls	r3, r3, #18
 80061c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	0159      	lsls	r1, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	440b      	add	r3, r1
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061ec:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80061ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d10f      	bne.n	8006216 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	78fa      	ldrb	r2, [r7, #3]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	440a      	add	r2, r1
 800620c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006210:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006214:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006216:	7ffb      	ldrb	r3, [r7, #31]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3720      	adds	r7, #32
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08c      	sub	sp, #48	; 0x30
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	4613      	mov	r3, r2
 800622c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800623c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d02d      	beq.n	80062a6 <USB_HC_StartXfer+0x86>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	791b      	ldrb	r3, [r3, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d129      	bne.n	80062a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d117      	bne.n	8006288 <USB_HC_StartXfer+0x68>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	79db      	ldrb	r3, [r3, #7]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <USB_HC_StartXfer+0x48>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	79db      	ldrb	r3, [r3, #7]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d10f      	bne.n	8006288 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	0151      	lsls	r1, r2, #5
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	440a      	add	r2, r1
 800627e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10b      	bne.n	80062a6 <USB_HC_StartXfer+0x86>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	795b      	ldrb	r3, [r3, #5]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	4619      	mov	r1, r3
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fa2f 	bl	8006700 <USB_DoPing>
      return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e0f8      	b.n	8006498 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d018      	beq.n	80062e0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	8912      	ldrh	r2, [r2, #8]
 80062b6:	4413      	add	r3, r2
 80062b8:	3b01      	subs	r3, #1
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	8912      	ldrh	r2, [r2, #8]
 80062be:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80062c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062c6:	8b7b      	ldrh	r3, [r7, #26]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d90b      	bls.n	80062e4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80062cc:	8b7b      	ldrh	r3, [r7, #26]
 80062ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	8912      	ldrh	r2, [r2, #8]
 80062d6:	fb02 f203 	mul.w	r2, r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	611a      	str	r2, [r3, #16]
 80062de:	e001      	b.n	80062e4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80062e0:	2301      	movs	r3, #1
 80062e2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	78db      	ldrb	r3, [r3, #3]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	8912      	ldrh	r2, [r2, #8]
 80062f2:	fb02 f203 	mul.w	r2, r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	611a      	str	r2, [r3, #16]
 80062fa:	e003      	b.n	8006304 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800630c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800630e:	04d9      	lsls	r1, r3, #19
 8006310:	4b63      	ldr	r3, [pc, #396]	; (80064a0 <USB_HC_StartXfer+0x280>)
 8006312:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006314:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	7a9b      	ldrb	r3, [r3, #10]
 800631a:	075b      	lsls	r3, r3, #29
 800631c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006320:	69f9      	ldr	r1, [r7, #28]
 8006322:	0148      	lsls	r0, r1, #5
 8006324:	6a39      	ldr	r1, [r7, #32]
 8006326:	4401      	add	r1, r0
 8006328:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800632c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800632e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	68d9      	ldr	r1, [r3, #12]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	460a      	mov	r2, r1
 8006348:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	bf0c      	ite	eq
 800635a:	2301      	moveq	r3, #1
 800635c:	2300      	movne	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	6a3a      	ldr	r2, [r7, #32]
 8006376:	440a      	add	r2, r1
 8006378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006380:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	7e7b      	ldrb	r3, [r7, #25]
 8006392:	075b      	lsls	r3, r3, #29
 8006394:	69f9      	ldr	r1, [r7, #28]
 8006396:	0148      	lsls	r0, r1, #5
 8006398:	6a39      	ldr	r1, [r7, #32]
 800639a:	4401      	add	r1, r0
 800639c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80063a0:	4313      	orrs	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	78db      	ldrb	r3, [r3, #3]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d004      	beq.n	80063ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	e003      	b.n	80063d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ea:	461a      	mov	r2, r3
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e04e      	b.n	8006498 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	78db      	ldrb	r3, [r3, #3]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d149      	bne.n	8006496 <USB_HC_StartXfer+0x276>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d045      	beq.n	8006496 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	79db      	ldrb	r3, [r3, #7]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d830      	bhi.n	8006474 <USB_HC_StartXfer+0x254>
 8006412:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <USB_HC_StartXfer+0x1f8>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	08006429 	.word	0x08006429
 800641c:	0800644d 	.word	0x0800644d
 8006420:	08006429 	.word	0x08006429
 8006424:	0800644d 	.word	0x0800644d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	3303      	adds	r3, #3
 800642e:	089b      	lsrs	r3, r3, #2
 8006430:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006432:	8afa      	ldrh	r2, [r7, #22]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	b29b      	uxth	r3, r3
 800643a:	429a      	cmp	r2, r3
 800643c:	d91c      	bls.n	8006478 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	619a      	str	r2, [r3, #24]
        }
        break;
 800644a:	e015      	b.n	8006478 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	3303      	adds	r3, #3
 8006452:	089b      	lsrs	r3, r3, #2
 8006454:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006456:	8afa      	ldrh	r2, [r7, #22]
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	b29b      	uxth	r3, r3
 8006462:	429a      	cmp	r2, r3
 8006464:	d90a      	bls.n	800647c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	619a      	str	r2, [r3, #24]
        }
        break;
 8006472:	e003      	b.n	800647c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006474:	bf00      	nop
 8006476:	e002      	b.n	800647e <USB_HC_StartXfer+0x25e>
        break;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <USB_HC_StartXfer+0x25e>
        break;
 800647c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	68d9      	ldr	r1, [r3, #12]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	785a      	ldrb	r2, [r3, #1]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	b29b      	uxth	r3, r3
 800648c:	2000      	movs	r0, #0
 800648e:	9000      	str	r0, [sp, #0]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff fb53 	bl	8005b3c <USB_WritePacket>
  }

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3728      	adds	r7, #40	; 0x28
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	1ff80000 	.word	0x1ff80000

080064a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	b29b      	uxth	r3, r3
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b089      	sub	sp, #36	; 0x24
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	0c9b      	lsrs	r3, r3, #18
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	0fdb      	lsrs	r3, r3, #31
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b20      	cmp	r3, #32
 8006514:	d104      	bne.n	8006520 <USB_HC_Halt+0x5a>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	e0e8      	b.n	80066f2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <USB_HC_Halt+0x66>
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d173      	bne.n	8006614 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	4413      	add	r3, r2
 8006534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	440a      	add	r2, r1
 8006542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800654a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	f040 80cb 	bne.w	80066f0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d143      	bne.n	80065ee <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	440a      	add	r2, r1
 800657c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006584:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	440a      	add	r2, r1
 800659c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065c4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	3301      	adds	r3, #1
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065d2:	d81d      	bhi.n	8006610 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ea:	d0ec      	beq.n	80065c6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ec:	e080      	b.n	80066f0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	440a      	add	r2, r1
 8006604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800660c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800660e:	e06f      	b.n	80066f0 <USB_HC_Halt+0x22a>
            break;
 8006610:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006612:	e06d      	b.n	80066f0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	4413      	add	r3, r2
 800661c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	440a      	add	r2, r1
 800662a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006632:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d143      	bne.n	80066cc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	440a      	add	r2, r1
 800665a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006662:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	4413      	add	r3, r2
 800666c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	440a      	add	r2, r1
 800667a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006682:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	4413      	add	r3, r2
 800668c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	440a      	add	r2, r1
 800669a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800669e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066a2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	3301      	adds	r3, #1
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066b0:	d81d      	bhi.n	80066ee <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c8:	d0ec      	beq.n	80066a4 <USB_HC_Halt+0x1de>
 80066ca:	e011      	b.n	80066f0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	e000      	b.n	80066f0 <USB_HC_Halt+0x22a>
          break;
 80066ee:	bf00      	nop
    }
  }

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3724      	adds	r7, #36	; 0x24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
	...

08006700 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006714:	2301      	movs	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	04da      	lsls	r2, r3, #19
 800671c:	4b15      	ldr	r3, [pc, #84]	; (8006774 <USB_DoPing+0x74>)
 800671e:	4013      	ands	r3, r2
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	0151      	lsls	r1, r2, #5
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	440a      	add	r2, r1
 8006728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800672c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006730:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	4413      	add	r3, r2
 800673a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006748:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006750:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675e:	461a      	mov	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	1ff80000 	.word	0x1ff80000

08006778 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff f935 	bl	80059f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800678e:	2110      	movs	r1, #16
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff f98f 	bl	8005ab4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff f9b0 	bl	8005afc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	e01f      	b.n	80067e2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d6:	461a      	mov	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	3301      	adds	r3, #1
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b0f      	cmp	r3, #15
 80067e6:	d9dc      	bls.n	80067a2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	e034      	b.n	8006858 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006804:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800680c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006814:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	461a      	mov	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	3301      	adds	r3, #1
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006834:	d80c      	bhi.n	8006850 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800684c:	d0ec      	beq.n	8006828 <USB_StopHost+0xb0>
 800684e:	e000      	b.n	8006852 <USB_StopHost+0xda>
        break;
 8006850:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3301      	adds	r3, #1
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b0f      	cmp	r3, #15
 800685c:	d9c7      	bls.n	80067ee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006864:	461a      	mov	r2, r3
 8006866:	f04f 33ff 	mov.w	r3, #4294967295
 800686a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f04f 32ff 	mov.w	r2, #4294967295
 8006872:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff f8ae 	bl	80059d6 <USB_EnableGlobalInt>

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b089      	sub	sp, #36	; 0x24
 8006888:	af04      	add	r7, sp, #16
 800688a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800688c:	2301      	movs	r3, #1
 800688e:	2202      	movs	r2, #2
 8006890:	2102      	movs	r1, #2
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fc66 	bl	8007164 <USBH_FindInterface>
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	2bff      	cmp	r3, #255	; 0xff
 80068a0:	d002      	beq.n	80068a8 <USBH_CDC_InterfaceInit+0x24>
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d901      	bls.n	80068ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068a8:	2302      	movs	r3, #2
 80068aa:	e13d      	b.n	8006b28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fc3b 	bl	800712c <USBH_SelectInterface>
 80068b6:	4603      	mov	r3, r0
 80068b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80068c0:	2302      	movs	r3, #2
 80068c2:	e131      	b.n	8006b28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80068ca:	2050      	movs	r0, #80	; 0x50
 80068cc:	f002 ff20 	bl	8009710 <malloc>
 80068d0:	4603      	mov	r3, r0
 80068d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068e4:	2302      	movs	r3, #2
 80068e6:	e11f      	b.n	8006b28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068e8:	2250      	movs	r2, #80	; 0x50
 80068ea:	2100      	movs	r1, #0
 80068ec:	68b8      	ldr	r0, [r7, #8]
 80068ee:	f002 ff3b 	bl	8009768 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	211a      	movs	r1, #26
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	4413      	add	r3, r2
 80068fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	b25b      	sxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	da15      	bge.n	8006936 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	211a      	movs	r1, #26
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	4413      	add	r3, r2
 8006916:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800691a:	781a      	ldrb	r2, [r3, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	211a      	movs	r1, #26
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	4413      	add	r3, r2
 800692c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006930:	881a      	ldrh	r2, [r3, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fe32 	bl	80085a6 <USBH_AllocPipe>
 8006942:	4603      	mov	r3, r0
 8006944:	461a      	mov	r2, r3
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	7819      	ldrb	r1, [r3, #0]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	7858      	ldrb	r0, [r3, #1]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	8952      	ldrh	r2, [r2, #10]
 8006962:	9202      	str	r2, [sp, #8]
 8006964:	2203      	movs	r2, #3
 8006966:	9201      	str	r2, [sp, #4]
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	4623      	mov	r3, r4
 800696c:	4602      	mov	r2, r0
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fdea 	bl	8008548 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2200      	movs	r2, #0
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f002 f8f9 	bl	8008b74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006982:	2300      	movs	r3, #0
 8006984:	2200      	movs	r2, #0
 8006986:	210a      	movs	r1, #10
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fbeb 	bl	8007164 <USBH_FindInterface>
 800698e:	4603      	mov	r3, r0
 8006990:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2bff      	cmp	r3, #255	; 0xff
 8006996:	d002      	beq.n	800699e <USBH_CDC_InterfaceInit+0x11a>
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d901      	bls.n	80069a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800699e:	2302      	movs	r3, #2
 80069a0:	e0c2      	b.n	8006b28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	211a      	movs	r1, #26
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	4413      	add	r3, r2
 80069ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	b25b      	sxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da16      	bge.n	80069e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	211a      	movs	r1, #26
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069ca:	781a      	ldrb	r2, [r3, #0]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	211a      	movs	r1, #26
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	4413      	add	r3, r2
 80069dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069e0:	881a      	ldrh	r2, [r3, #0]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	835a      	strh	r2, [r3, #26]
 80069e6:	e015      	b.n	8006a14 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	211a      	movs	r1, #26
 80069ee:	fb01 f303 	mul.w	r3, r1, r3
 80069f2:	4413      	add	r3, r2
 80069f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	211a      	movs	r1, #26
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a0e:	881a      	ldrh	r2, [r3, #0]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	211a      	movs	r1, #26
 8006a1a:	fb01 f303 	mul.w	r3, r1, r3
 8006a1e:	4413      	add	r3, r2
 8006a20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	b25b      	sxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	da16      	bge.n	8006a5a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	211a      	movs	r1, #26
 8006a32:	fb01 f303 	mul.w	r3, r1, r3
 8006a36:	4413      	add	r3, r2
 8006a38:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	211a      	movs	r1, #26
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a52:	881a      	ldrh	r2, [r3, #0]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	835a      	strh	r2, [r3, #26]
 8006a58:	e015      	b.n	8006a86 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	211a      	movs	r1, #26
 8006a60:	fb01 f303 	mul.w	r3, r1, r3
 8006a64:	4413      	add	r3, r2
 8006a66:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a6a:	781a      	ldrb	r2, [r3, #0]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	211a      	movs	r1, #26
 8006a76:	fb01 f303 	mul.w	r3, r1, r3
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a80:	881a      	ldrh	r2, [r3, #0]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	7b9b      	ldrb	r3, [r3, #14]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 fd8a 	bl	80085a6 <USBH_AllocPipe>
 8006a92:	4603      	mov	r3, r0
 8006a94:	461a      	mov	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	7bdb      	ldrb	r3, [r3, #15]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 fd80 	bl	80085a6 <USBH_AllocPipe>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	7b59      	ldrb	r1, [r3, #13]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	7b98      	ldrb	r0, [r3, #14]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	8b12      	ldrh	r2, [r2, #24]
 8006ac6:	9202      	str	r2, [sp, #8]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	9201      	str	r2, [sp, #4]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	4623      	mov	r3, r4
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fd38 	bl	8008548 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	7b19      	ldrb	r1, [r3, #12]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	7bd8      	ldrb	r0, [r3, #15]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	8b52      	ldrh	r2, [r2, #26]
 8006af0:	9202      	str	r2, [sp, #8]
 8006af2:	2202      	movs	r2, #2
 8006af4:	9201      	str	r2, [sp, #4]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	4623      	mov	r3, r4
 8006afa:	4602      	mov	r2, r0
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fd23 	bl	8008548 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	7b5b      	ldrb	r3, [r3, #13]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f002 f82e 	bl	8008b74 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	7b1b      	ldrb	r3, [r3, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f002 f827 	bl	8008b74 <USBH_LL_SetToggle>

  return USBH_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd90      	pop	{r4, r7, pc}

08006b30 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00e      	beq.n	8006b68 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 fd18 	bl	8008586 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 fd43 	bl	80085e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	7b1b      	ldrb	r3, [r3, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00e      	beq.n	8006b8e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	7b1b      	ldrb	r3, [r3, #12]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 fd05 	bl	8008586 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	7b1b      	ldrb	r3, [r3, #12]
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fd30 	bl	80085e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	7b5b      	ldrb	r3, [r3, #13]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00e      	beq.n	8006bb4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	7b5b      	ldrb	r3, [r3, #13]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fcf2 	bl	8008586 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	7b5b      	ldrb	r3, [r3, #13]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fd1d 	bl	80085e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f002 fda9 	bl	8009720 <free>
    phost->pActiveClass->pData = 0U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3340      	adds	r3, #64	; 0x40
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f8b1 	bl	8006d62 <GetLineCoding>
 8006c00:	4603      	mov	r3, r0
 8006c02:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006c04:	7afb      	ldrb	r3, [r7, #11]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c10:	2102      	movs	r1, #2
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006c16:	7afb      	ldrb	r3, [r7, #11]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d877      	bhi.n	8006d34 <USBH_CDC_Process+0x114>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <USBH_CDC_Process+0x2c>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c61 	.word	0x08006c61
 8006c50:	08006c67 	.word	0x08006c67
 8006c54:	08006c97 	.word	0x08006c97
 8006c58:	08006d0b 	.word	0x08006d0b
 8006c5c:	08006d19 	.word	0x08006d19
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]
      break;
 8006c64:	e06d      	b.n	8006d42 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f897 	bl	8006da0 <SetLineCoding>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c84:	e058      	b.n	8006d38 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d055      	beq.n	8006d38 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2204      	movs	r2, #4
 8006c90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c94:	e050      	b.n	8006d38 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	3340      	adds	r3, #64	; 0x40
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f860 	bl	8006d62 <GetLineCoding>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d126      	bne.n	8006cfa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cbe:	791b      	ldrb	r3, [r3, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d13b      	bne.n	8006d3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d133      	bne.n	8006d3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cde:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d12b      	bne.n	8006d3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d124      	bne.n	8006d3c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f958 	bl	8006fa8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cf8:	e020      	b.n	8006d3c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d01d      	beq.n	8006d3c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2204      	movs	r2, #4
 8006d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d08:	e018      	b.n	8006d3c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f867 	bl	8006dde <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f8da 	bl	8006eca <CDC_ProcessReception>
      break;
 8006d16:	e014      	b.n	8006d42 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 ffe3 	bl	8007ce6 <USBH_ClrFeature>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10a      	bne.n	8006d40 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006d32:	e005      	b.n	8006d40 <USBH_CDC_Process+0x120>

    default:
      break;
 8006d34:	bf00      	nop
 8006d36:	e004      	b.n	8006d42 <USBH_CDC_Process+0x122>
      break;
 8006d38:	bf00      	nop
 8006d3a:	e002      	b.n	8006d42 <USBH_CDC_Process+0x122>
      break;
 8006d3c:	bf00      	nop
 8006d3e:	e000      	b.n	8006d42 <USBH_CDC_Process+0x122>
      break;
 8006d40:	bf00      	nop

  }

  return status;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	22a1      	movs	r2, #161	; 0xa1
 8006d70:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2221      	movs	r2, #33	; 0x21
 8006d76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2207      	movs	r2, #7
 8006d88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2207      	movs	r2, #7
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f988 	bl	80080a6 <USBH_CtlReq>
 8006d96:	4603      	mov	r3, r0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2221      	movs	r2, #33	; 0x21
 8006dae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2207      	movs	r2, #7
 8006dc6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2207      	movs	r2, #7
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f969 	bl	80080a6 <USBH_CtlReq>
 8006dd4:	4603      	mov	r3, r0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b086      	sub	sp, #24
 8006de2:	af02      	add	r7, sp, #8
 8006de4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d002      	beq.n	8006e04 <CDC_ProcessTransmission+0x26>
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d023      	beq.n	8006e4a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006e02:	e05e      	b.n	8006ec2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	8b12      	ldrh	r2, [r2, #24]
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d90b      	bls.n	8006e28 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	69d9      	ldr	r1, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8b1a      	ldrh	r2, [r3, #24]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	7b5b      	ldrb	r3, [r3, #13]
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	9000      	str	r0, [sp, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fb4e 	bl	80084c2 <USBH_BulkSendData>
 8006e26:	e00b      	b.n	8006e40 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	7b5b      	ldrb	r3, [r3, #13]
 8006e36:	2001      	movs	r0, #1
 8006e38:	9000      	str	r0, [sp, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fb41 	bl	80084c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e48:	e03b      	b.n	8006ec2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	7b5b      	ldrb	r3, [r3, #13]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fe65 	bl	8008b20 <USBH_LL_GetURBState>
 8006e56:	4603      	mov	r3, r0
 8006e58:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d128      	bne.n	8006eb2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	8b12      	ldrh	r2, [r2, #24]
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d90e      	bls.n	8006e8a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	8b12      	ldrh	r2, [r2, #24]
 8006e74:	1a9a      	subs	r2, r3, r2
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	8b12      	ldrh	r2, [r2, #24]
 8006e82:	441a      	add	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	61da      	str	r2, [r3, #28]
 8006e88:	e002      	b.n	8006e90 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d004      	beq.n	8006ea2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ea0:	e00e      	b.n	8006ec0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f868 	bl	8006f80 <USBH_CDC_TransmitCallback>
      break;
 8006eb0:	e006      	b.n	8006ec0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006eb2:	7afb      	ldrb	r3, [r7, #11]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d103      	bne.n	8006ec0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ec0:	bf00      	nop
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d002      	beq.n	8006ef0 <CDC_ProcessReception+0x26>
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d00e      	beq.n	8006f0c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006eee:	e043      	b.n	8006f78 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	6a19      	ldr	r1, [r3, #32]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	8b5a      	ldrh	r2, [r3, #26]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	7b1b      	ldrb	r3, [r3, #12]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fb05 	bl	800850c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2204      	movs	r2, #4
 8006f06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f0a:	e035      	b.n	8006f78 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	7b1b      	ldrb	r3, [r3, #12]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fe04 	bl	8008b20 <USBH_LL_GetURBState>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f1c:	7cfb      	ldrb	r3, [r7, #19]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d129      	bne.n	8006f76 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	7b1b      	ldrb	r3, [r3, #12]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fd67 	bl	80089fc <USBH_LL_GetLastXferSize>
 8006f2e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d016      	beq.n	8006f68 <CDC_ProcessReception+0x9e>
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	8b5b      	ldrh	r3, [r3, #26]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d910      	bls.n	8006f68 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1ad2      	subs	r2, r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	6a1a      	ldr	r2, [r3, #32]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	441a      	add	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2203      	movs	r2, #3
 8006f62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f66:	e006      	b.n	8006f76 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f80f 	bl	8006f94 <USBH_CDC_ReceiveCallback>
      break;
 8006f76:	bf00      	nop
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e029      	b.n	8007028 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	79fa      	ldrb	r2, [r7, #7]
 8006fd8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f81f 	bl	8007030 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f001 fc37 	bl	8008894 <USBH_LL_Init>

  return USBH_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e009      	b.n	8007056 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	33e0      	adds	r3, #224	; 0xe0
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	2200      	movs	r2, #0
 800704e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b0e      	cmp	r3, #14
 800705a:	d9f2      	bls.n	8007042 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	e009      	b.n	8007076 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800707c:	d3f1      	bcc.n	8007062 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2240      	movs	r2, #64	; 0x40
 80070a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d016      	beq.n	800711a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10e      	bne.n	8007114 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070fc:	1c59      	adds	r1, r3, #1
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	33de      	adds	r3, #222	; 0xde
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
 8007112:	e004      	b.n	800711e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007114:	2302      	movs	r3, #2
 8007116:	73fb      	strb	r3, [r7, #15]
 8007118:	e001      	b.n	800711e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800711a:	2302      	movs	r3, #2
 800711c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	429a      	cmp	r2, r3
 8007146:	d204      	bcs.n	8007152 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	78fa      	ldrb	r2, [r7, #3]
 800714c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007150:	e001      	b.n	8007156 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007152:	2302      	movs	r3, #2
 8007154:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	461a      	mov	r2, r3
 8007172:	4603      	mov	r3, r0
 8007174:	70fb      	strb	r3, [r7, #3]
 8007176:	460b      	mov	r3, r1
 8007178:	70bb      	strb	r3, [r7, #2]
 800717a:	4613      	mov	r3, r2
 800717c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800718c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800718e:	e025      	b.n	80071dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	221a      	movs	r2, #26
 8007194:	fb02 f303 	mul.w	r3, r2, r3
 8007198:	3308      	adds	r3, #8
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	3302      	adds	r3, #2
 80071a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	795b      	ldrb	r3, [r3, #5]
 80071a6:	78fa      	ldrb	r2, [r7, #3]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d002      	beq.n	80071b2 <USBH_FindInterface+0x4e>
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	2bff      	cmp	r3, #255	; 0xff
 80071b0:	d111      	bne.n	80071d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071b6:	78ba      	ldrb	r2, [r7, #2]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d002      	beq.n	80071c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071bc:	78bb      	ldrb	r3, [r7, #2]
 80071be:	2bff      	cmp	r3, #255	; 0xff
 80071c0:	d109      	bne.n	80071d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071c6:	787a      	ldrb	r2, [r7, #1]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d002      	beq.n	80071d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071cc:	787b      	ldrb	r3, [r7, #1]
 80071ce:	2bff      	cmp	r3, #255	; 0xff
 80071d0:	d101      	bne.n	80071d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	e006      	b.n	80071e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	3301      	adds	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d9d6      	bls.n	8007190 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071e2:	23ff      	movs	r3, #255	; 0xff
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 fb87 	bl	800890c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80071fe:	2101      	movs	r1, #1
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 fca0 	bl	8008b46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af04      	add	r7, sp, #16
 8007216:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007218:	2302      	movs	r3, #2
 800721a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b01      	cmp	r3, #1
 800722a:	d102      	bne.n	8007232 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2203      	movs	r2, #3
 8007230:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b0b      	cmp	r3, #11
 800723a:	f200 81b3 	bhi.w	80075a4 <USBH_Process+0x394>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <USBH_Process+0x34>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007275 	.word	0x08007275
 8007248:	080072a7 	.word	0x080072a7
 800724c:	0800730f 	.word	0x0800730f
 8007250:	0800753f 	.word	0x0800753f
 8007254:	080075a5 	.word	0x080075a5
 8007258:	080073b3 	.word	0x080073b3
 800725c:	080074e5 	.word	0x080074e5
 8007260:	080073e9 	.word	0x080073e9
 8007264:	08007409 	.word	0x08007409
 8007268:	08007429 	.word	0x08007429
 800726c:	08007457 	.word	0x08007457
 8007270:	08007527 	.word	0x08007527
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8193 	beq.w	80075a8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007288:	20c8      	movs	r0, #200	; 0xc8
 800728a:	f001 fca3 	bl	8008bd4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fb99 	bl	80089c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072a4:	e180      	b.n	80075a8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d107      	bne.n	80072c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072be:	e182      	b.n	80075c6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072ca:	d914      	bls.n	80072f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072d2:	3301      	adds	r3, #1
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d903      	bls.n	80072ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	220d      	movs	r2, #13
 80072ea:	701a      	strb	r2, [r3, #0]
      break;
 80072ec:	e16b      	b.n	80075c6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
      break;
 80072f4:	e167      	b.n	80075c6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072fc:	f103 020a 	add.w	r2, r3, #10
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007306:	200a      	movs	r0, #10
 8007308:	f001 fc64 	bl	8008bd4 <USBH_Delay>
      break;
 800730c:	e15b      	b.n	80075c6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800731e:	2104      	movs	r1, #4
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007324:	2064      	movs	r0, #100	; 0x64
 8007326:	f001 fc55 	bl	8008bd4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fb24 	bl	8008978 <USBH_LL_GetSpeed>
 8007330:	4603      	mov	r3, r0
 8007332:	461a      	mov	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2205      	movs	r2, #5
 800733e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007340:	2100      	movs	r1, #0
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 f92f 	bl	80085a6 <USBH_AllocPipe>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007350:	2180      	movs	r1, #128	; 0x80
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 f927 	bl	80085a6 <USBH_AllocPipe>
 8007358:	4603      	mov	r3, r0
 800735a:	461a      	mov	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7919      	ldrb	r1, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007374:	b292      	uxth	r2, r2
 8007376:	9202      	str	r2, [sp, #8]
 8007378:	2200      	movs	r2, #0
 800737a:	9201      	str	r2, [sp, #4]
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	4603      	mov	r3, r0
 8007380:	2280      	movs	r2, #128	; 0x80
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 f8e0 	bl	8008548 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	7959      	ldrb	r1, [r3, #5]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800739c:	b292      	uxth	r2, r2
 800739e:	9202      	str	r2, [sp, #8]
 80073a0:	2200      	movs	r2, #0
 80073a2:	9201      	str	r2, [sp, #4]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	4603      	mov	r3, r0
 80073a8:	2200      	movs	r2, #0
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 f8cc 	bl	8008548 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073b0:	e109      	b.n	80075c6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f90c 	bl	80075d0 <USBH_HandleEnum>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f040 80f3 	bne.w	80075ac <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d103      	bne.n	80073e0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2208      	movs	r2, #8
 80073dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073de:	e0e5      	b.n	80075ac <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2207      	movs	r2, #7
 80073e4:	701a      	strb	r2, [r3, #0]
      break;
 80073e6:	e0e1      	b.n	80075ac <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 80de 	beq.w	80075b0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073fa:	2101      	movs	r1, #1
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2208      	movs	r2, #8
 8007404:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007406:	e0d3      	b.n	80075b0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800740e:	b29b      	uxth	r3, r3
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fc20 	bl	8007c58 <USBH_SetCfg>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 80ca 	bne.w	80075b4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2209      	movs	r2, #9
 8007424:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007426:	e0c5      	b.n	80075b4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00b      	beq.n	800744e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007436:	2101      	movs	r1, #1
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fc30 	bl	8007c9e <USBH_SetFeature>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	f040 80b9 	bne.w	80075b8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	220a      	movs	r2, #10
 800744a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800744c:	e0b4      	b.n	80075b8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	220a      	movs	r2, #10
 8007452:	701a      	strb	r2, [r3, #0]
      break;
 8007454:	e0b0      	b.n	80075b8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80ad 	beq.w	80075bc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	e016      	b.n	800749e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007470:	7bfa      	ldrb	r2, [r7, #15]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32de      	adds	r2, #222	; 0xde
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	791a      	ldrb	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007482:	429a      	cmp	r2, r3
 8007484:	d108      	bne.n	8007498 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007486:	7bfa      	ldrb	r2, [r7, #15]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	32de      	adds	r2, #222	; 0xde
 800748c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007496:	e005      	b.n	80074a4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	3301      	adds	r3, #1
 800749c:	73fb      	strb	r3, [r7, #15]
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0e5      	beq.n	8007470 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d016      	beq.n	80074dc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d109      	bne.n	80074d4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2206      	movs	r2, #6
 80074c4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074cc:	2103      	movs	r1, #3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074d2:	e073      	b.n	80075bc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	220d      	movs	r2, #13
 80074d8:	701a      	strb	r2, [r3, #0]
      break;
 80074da:	e06f      	b.n	80075bc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	220d      	movs	r2, #13
 80074e0:	701a      	strb	r2, [r3, #0]
      break;
 80074e2:	e06b      	b.n	80075bc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d017      	beq.n	800751e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	220b      	movs	r2, #11
 800750a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800750c:	e058      	b.n	80075c0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d154      	bne.n	80075c0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	220d      	movs	r2, #13
 800751a:	701a      	strb	r2, [r3, #0]
      break;
 800751c:	e050      	b.n	80075c0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	220d      	movs	r2, #13
 8007522:	701a      	strb	r2, [r3, #0]
      break;
 8007524:	e04c      	b.n	80075c0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d049      	beq.n	80075c4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
      }
      break;
 800753c:	e042      	b.n	80075c4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fd72 	bl	8007030 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800757a:	2105      	movs	r1, #5
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	d107      	bne.n	800759c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff fe2b 	bl	80071f0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800759a:	e014      	b.n	80075c6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 f9b5 	bl	800890c <USBH_LL_Start>
      break;
 80075a2:	e010      	b.n	80075c6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80075a4:	bf00      	nop
 80075a6:	e00e      	b.n	80075c6 <USBH_Process+0x3b6>
      break;
 80075a8:	bf00      	nop
 80075aa:	e00c      	b.n	80075c6 <USBH_Process+0x3b6>
      break;
 80075ac:	bf00      	nop
 80075ae:	e00a      	b.n	80075c6 <USBH_Process+0x3b6>
    break;
 80075b0:	bf00      	nop
 80075b2:	e008      	b.n	80075c6 <USBH_Process+0x3b6>
      break;
 80075b4:	bf00      	nop
 80075b6:	e006      	b.n	80075c6 <USBH_Process+0x3b6>
      break;
 80075b8:	bf00      	nop
 80075ba:	e004      	b.n	80075c6 <USBH_Process+0x3b6>
      break;
 80075bc:	bf00      	nop
 80075be:	e002      	b.n	80075c6 <USBH_Process+0x3b6>
      break;
 80075c0:	bf00      	nop
 80075c2:	e000      	b.n	80075c6 <USBH_Process+0x3b6>
      break;
 80075c4:	bf00      	nop
  }
  return USBH_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af04      	add	r7, sp, #16
 80075d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075dc:	2301      	movs	r3, #1
 80075de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b07      	cmp	r3, #7
 80075e6:	f200 81c1 	bhi.w	800796c <USBH_HandleEnum+0x39c>
 80075ea:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <USBH_HandleEnum+0x20>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007611 	.word	0x08007611
 80075f4:	080076cf 	.word	0x080076cf
 80075f8:	08007739 	.word	0x08007739
 80075fc:	080077c7 	.word	0x080077c7
 8007600:	08007831 	.word	0x08007831
 8007604:	080078a1 	.word	0x080078a1
 8007608:	080078e7 	.word	0x080078e7
 800760c:	0800792d 	.word	0x0800792d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007610:	2108      	movs	r1, #8
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa50 	bl	8007ab8 <USBH_Get_DevDesc>
 8007618:	4603      	mov	r3, r0
 800761a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d130      	bne.n	8007684 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	7919      	ldrb	r1, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007646:	b292      	uxth	r2, r2
 8007648:	9202      	str	r2, [sp, #8]
 800764a:	2200      	movs	r2, #0
 800764c:	9201      	str	r2, [sp, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4603      	mov	r3, r0
 8007652:	2280      	movs	r2, #128	; 0x80
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 ff77 	bl	8008548 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	7959      	ldrb	r1, [r3, #5]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800766e:	b292      	uxth	r2, r2
 8007670:	9202      	str	r2, [sp, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	9201      	str	r2, [sp, #4]
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	4603      	mov	r3, r0
 800767a:	2200      	movs	r2, #0
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 ff63 	bl	8008548 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007682:	e175      	b.n	8007970 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b03      	cmp	r3, #3
 8007688:	f040 8172 	bne.w	8007970 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007692:	3301      	adds	r3, #1
 8007694:	b2da      	uxtb	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d903      	bls.n	80076ae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	220d      	movs	r2, #13
 80076aa:	701a      	strb	r2, [r3, #0]
      break;
 80076ac:	e160      	b.n	8007970 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	795b      	ldrb	r3, [r3, #5]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 ff97 	bl	80085e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	791b      	ldrb	r3, [r3, #4]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 ff91 	bl	80085e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]
      break;
 80076cc:	e150      	b.n	8007970 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076ce:	2112      	movs	r1, #18
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f9f1 	bl	8007ab8 <USBH_Get_DevDesc>
 80076d6:	4603      	mov	r3, r0
 80076d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d103      	bne.n	80076e8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076e6:	e145      	b.n	8007974 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	f040 8142 	bne.w	8007974 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076f6:	3301      	adds	r3, #1
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007706:	2b03      	cmp	r3, #3
 8007708:	d903      	bls.n	8007712 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	220d      	movs	r2, #13
 800770e:	701a      	strb	r2, [r3, #0]
      break;
 8007710:	e130      	b.n	8007974 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	795b      	ldrb	r3, [r3, #5]
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 ff65 	bl	80085e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 ff5f 	bl	80085e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
      break;
 8007736:	e11d      	b.n	8007974 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007738:	2101      	movs	r1, #1
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa68 	bl	8007c10 <USBH_SetAddress>
 8007740:	4603      	mov	r3, r0
 8007742:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d132      	bne.n	80077b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800774a:	2002      	movs	r0, #2
 800774c:	f001 fa42 	bl	8008bd4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2203      	movs	r2, #3
 800775c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	7919      	ldrb	r1, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007772:	b292      	uxth	r2, r2
 8007774:	9202      	str	r2, [sp, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	9201      	str	r2, [sp, #4]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	4603      	mov	r3, r0
 800777e:	2280      	movs	r2, #128	; 0x80
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fee1 	bl	8008548 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	7959      	ldrb	r1, [r3, #5]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800779a:	b292      	uxth	r2, r2
 800779c:	9202      	str	r2, [sp, #8]
 800779e:	2200      	movs	r2, #0
 80077a0:	9201      	str	r2, [sp, #4]
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	4603      	mov	r3, r0
 80077a6:	2200      	movs	r2, #0
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fecd 	bl	8008548 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077ae:	e0e3      	b.n	8007978 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	f040 80e0 	bne.w	8007978 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	220d      	movs	r2, #13
 80077bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	705a      	strb	r2, [r3, #1]
      break;
 80077c4:	e0d8      	b.n	8007978 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077c6:	2109      	movs	r1, #9
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f99d 	bl	8007b08 <USBH_Get_CfgDesc>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2204      	movs	r2, #4
 80077dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077de:	e0cd      	b.n	800797c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	f040 80ca 	bne.w	800797c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ee:	3301      	adds	r3, #1
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d903      	bls.n	800780a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	220d      	movs	r2, #13
 8007806:	701a      	strb	r2, [r3, #0]
      break;
 8007808:	e0b8      	b.n	800797c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	795b      	ldrb	r3, [r3, #5]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fee9 	bl	80085e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	791b      	ldrb	r3, [r3, #4]
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fee3 	bl	80085e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	701a      	strb	r2, [r3, #0]
      break;
 800782e:	e0a5      	b.n	800797c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f965 	bl	8007b08 <USBH_Get_CfgDesc>
 800783e:	4603      	mov	r3, r0
 8007840:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d103      	bne.n	8007850 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2205      	movs	r2, #5
 800784c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800784e:	e097      	b.n	8007980 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b03      	cmp	r3, #3
 8007854:	f040 8094 	bne.w	8007980 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800785e:	3301      	adds	r3, #1
 8007860:	b2da      	uxtb	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800786e:	2b03      	cmp	r3, #3
 8007870:	d903      	bls.n	800787a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	220d      	movs	r2, #13
 8007876:	701a      	strb	r2, [r3, #0]
      break;
 8007878:	e082      	b.n	8007980 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	795b      	ldrb	r3, [r3, #5]
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 feb1 	bl	80085e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	791b      	ldrb	r3, [r3, #4]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 feab 	bl	80085e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
      break;
 800789e:	e06f      	b.n	8007980 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d019      	beq.n	80078de <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078b6:	23ff      	movs	r3, #255	; 0xff
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f949 	bl	8007b50 <USBH_Get_StringDesc>
 80078be:	4603      	mov	r3, r0
 80078c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d103      	bne.n	80078d0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2206      	movs	r2, #6
 80078cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078ce:	e059      	b.n	8007984 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d156      	bne.n	8007984 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2206      	movs	r2, #6
 80078da:	705a      	strb	r2, [r3, #1]
      break;
 80078dc:	e052      	b.n	8007984 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2206      	movs	r2, #6
 80078e2:	705a      	strb	r2, [r3, #1]
      break;
 80078e4:	e04e      	b.n	8007984 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d019      	beq.n	8007924 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078fc:	23ff      	movs	r3, #255	; 0xff
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f926 	bl	8007b50 <USBH_Get_StringDesc>
 8007904:	4603      	mov	r3, r0
 8007906:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d103      	bne.n	8007916 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2207      	movs	r2, #7
 8007912:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007914:	e038      	b.n	8007988 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d135      	bne.n	8007988 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2207      	movs	r2, #7
 8007920:	705a      	strb	r2, [r3, #1]
      break;
 8007922:	e031      	b.n	8007988 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2207      	movs	r2, #7
 8007928:	705a      	strb	r2, [r3, #1]
      break;
 800792a:	e02d      	b.n	8007988 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007932:	2b00      	cmp	r3, #0
 8007934:	d017      	beq.n	8007966 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007942:	23ff      	movs	r3, #255	; 0xff
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f903 	bl	8007b50 <USBH_Get_StringDesc>
 800794a:	4603      	mov	r3, r0
 800794c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007958:	e018      	b.n	800798c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b03      	cmp	r3, #3
 800795e:	d115      	bne.n	800798c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	73fb      	strb	r3, [r7, #15]
      break;
 8007964:	e012      	b.n	800798c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
      break;
 800796a:	e00f      	b.n	800798c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800796c:	bf00      	nop
 800796e:	e00e      	b.n	800798e <USBH_HandleEnum+0x3be>
      break;
 8007970:	bf00      	nop
 8007972:	e00c      	b.n	800798e <USBH_HandleEnum+0x3be>
      break;
 8007974:	bf00      	nop
 8007976:	e00a      	b.n	800798e <USBH_HandleEnum+0x3be>
      break;
 8007978:	bf00      	nop
 800797a:	e008      	b.n	800798e <USBH_HandleEnum+0x3be>
      break;
 800797c:	bf00      	nop
 800797e:	e006      	b.n	800798e <USBH_HandleEnum+0x3be>
      break;
 8007980:	bf00      	nop
 8007982:	e004      	b.n	800798e <USBH_HandleEnum+0x3be>
      break;
 8007984:	bf00      	nop
 8007986:	e002      	b.n	800798e <USBH_HandleEnum+0x3be>
      break;
 8007988:	bf00      	nop
 800798a:	e000      	b.n	800798e <USBH_HandleEnum+0x3be>
      break;
 800798c:	bf00      	nop
  }
  return Status;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f804 	bl	80079da <USBH_HandleSof>
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b0b      	cmp	r3, #11
 80079ea:	d10a      	bne.n	8007a02 <USBH_HandleSof+0x28>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
  }
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007a1a:	bf00      	nop
}
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a36:	bf00      	nop
}
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 ff56 	bl	8008942 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	791b      	ldrb	r3, [r3, #4]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fda3 	bl	80085e8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	795b      	ldrb	r3, [r3, #5]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fd9d 	bl	80085e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007aca:	78fb      	ldrb	r3, [r7, #3]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f864 	bl	8007ba6 <USBH_GetDescriptor>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	73fb      	strb	r3, [r7, #15]
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007af4:	78fa      	ldrb	r2, [r7, #3]
 8007af6:	b292      	uxth	r2, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	f000 f918 	bl	8007d2e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	331c      	adds	r3, #28
 8007b18:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b1a:	887b      	ldrh	r3, [r7, #2]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b24:	2100      	movs	r1, #0
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f83d 	bl	8007ba6 <USBH_GetDescriptor>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	72fb      	strb	r3, [r7, #11]
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d107      	bne.n	8007b46 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b3c:	887a      	ldrh	r2, [r7, #2]
 8007b3e:	68f9      	ldr	r1, [r7, #12]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 f964 	bl	8007e0e <USBH_ParseCfgDesc>
  }

  return status;
 8007b46:	7afb      	ldrb	r3, [r7, #11]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	607a      	str	r2, [r7, #4]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	72fb      	strb	r3, [r7, #11]
 8007b60:	4613      	mov	r3, r2
 8007b62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b6c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b74:	893b      	ldrh	r3, [r7, #8]
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f812 	bl	8007ba6 <USBH_GetDescriptor>
 8007b82:	4603      	mov	r3, r0
 8007b84:	75fb      	strb	r3, [r7, #23]
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d107      	bne.n	8007b9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b92:	893a      	ldrh	r2, [r7, #8]
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 fa37 	bl	800800a <USBH_ParseStringDesc>
  }

  return status;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	607b      	str	r3, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	72fb      	strb	r3, [r7, #11]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	789b      	ldrb	r3, [r3, #2]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d11c      	bne.n	8007bfa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2206      	movs	r2, #6
 8007bd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	893a      	ldrh	r2, [r7, #8]
 8007bd6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bd8:	893b      	ldrh	r3, [r7, #8]
 8007bda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be2:	d104      	bne.n	8007bee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f240 4209 	movw	r2, #1033	; 0x409
 8007bea:	829a      	strh	r2, [r3, #20]
 8007bec:	e002      	b.n	8007bf4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8b3a      	ldrh	r2, [r7, #24]
 8007bf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007bfa:	8b3b      	ldrh	r3, [r7, #24]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fa50 	bl	80080a6 <USBH_CtlReq>
 8007c06:	4603      	mov	r3, r0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	789b      	ldrb	r3, [r3, #2]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d10f      	bne.n	8007c44 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2205      	movs	r2, #5
 8007c2e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c44:	2200      	movs	r2, #0
 8007c46:	2100      	movs	r1, #0
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fa2c 	bl	80080a6 <USBH_CtlReq>
 8007c4e:	4603      	mov	r3, r0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	789b      	ldrb	r3, [r3, #2]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d10e      	bne.n	8007c8a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2209      	movs	r2, #9
 8007c76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	887a      	ldrh	r2, [r7, #2]
 8007c7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa09 	bl	80080a6 <USBH_CtlReq>
 8007c94:	4603      	mov	r3, r0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	789b      	ldrb	r3, [r3, #2]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d10f      	bne.n	8007cd2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2203      	movs	r2, #3
 8007cbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f9e5 	bl	80080a6 <USBH_CtlReq>
 8007cdc:	4603      	mov	r3, r0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	789b      	ldrb	r3, [r3, #2]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d10f      	bne.n	8007d1a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f9c1 	bl	80080a6 <USBH_CtlReq>
 8007d24:	4603      	mov	r3, r0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	781a      	ldrb	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	785a      	ldrb	r2, [r3, #1]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	3302      	adds	r3, #2
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	3303      	adds	r3, #3
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	4313      	orrs	r3, r2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	791a      	ldrb	r2, [r3, #4]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	795a      	ldrb	r2, [r3, #5]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	799a      	ldrb	r2, [r3, #6]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	79da      	ldrb	r2, [r3, #7]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	2b08      	cmp	r3, #8
 8007d8c:	d939      	bls.n	8007e02 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	3308      	adds	r3, #8
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	3309      	adds	r3, #9
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	021b      	lsls	r3, r3, #8
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	4313      	orrs	r3, r2
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	330a      	adds	r3, #10
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	330b      	adds	r3, #11
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	330d      	adds	r3, #13
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	7b9a      	ldrb	r2, [r3, #14]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	7bda      	ldrb	r2, [r3, #15]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	7c1a      	ldrb	r2, [r3, #16]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	7c5a      	ldrb	r2, [r3, #17]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	745a      	strb	r2, [r3, #17]
  }
}
 8007e02:	bf00      	nop
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b08a      	sub	sp, #40	; 0x28
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	781a      	ldrb	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	785a      	ldrb	r2, [r3, #1]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	3302      	adds	r3, #2
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	3303      	adds	r3, #3
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	4313      	orrs	r3, r2
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	791a      	ldrb	r2, [r3, #4]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	795a      	ldrb	r2, [r3, #5]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	799a      	ldrb	r2, [r3, #6]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	79da      	ldrb	r2, [r3, #7]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	7a1a      	ldrb	r2, [r3, #8]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d95f      	bls.n	8007f4a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e8a:	2309      	movs	r3, #9
 8007e8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e92:	e051      	b.n	8007f38 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e94:	f107 0316 	add.w	r3, r7, #22
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e9c:	f000 f8e8 	bl	8008070 <USBH_GetNextDesc>
 8007ea0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d146      	bne.n	8007f38 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007eaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eae:	221a      	movs	r2, #26
 8007eb0:	fb02 f303 	mul.w	r3, r2, r3
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	3302      	adds	r3, #2
 8007ebc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ec0:	69f8      	ldr	r0, [r7, #28]
 8007ec2:	f000 f846 	bl	8007f52 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ed0:	e022      	b.n	8007f18 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ed2:	f107 0316 	add.w	r3, r7, #22
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eda:	f000 f8c9 	bl	8008070 <USBH_GetNextDesc>
 8007ede:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	2b05      	cmp	r3, #5
 8007ee6:	d117      	bne.n	8007f18 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ef0:	3201      	adds	r2, #1
 8007ef2:	00d2      	lsls	r2, r2, #3
 8007ef4:	211a      	movs	r1, #26
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	3308      	adds	r3, #8
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	3304      	adds	r3, #4
 8007f04:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f08:	69b8      	ldr	r0, [r7, #24]
 8007f0a:	f000 f851 	bl	8007fb0 <USBH_ParseEPDesc>
            ep_ix++;
 8007f0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f12:	3301      	adds	r3, #1
 8007f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	791b      	ldrb	r3, [r3, #4]
 8007f1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d204      	bcs.n	8007f2e <USBH_ParseCfgDesc+0x120>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	885a      	ldrh	r2, [r3, #2]
 8007f28:	8afb      	ldrh	r3, [r7, #22]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d8d1      	bhi.n	8007ed2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007f2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f32:	3301      	adds	r3, #1
 8007f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d804      	bhi.n	8007f4a <USBH_ParseCfgDesc+0x13c>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	885a      	ldrh	r2, [r3, #2]
 8007f44:	8afb      	ldrh	r3, [r7, #22]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d8a4      	bhi.n	8007e94 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007f4a:	bf00      	nop
 8007f4c:	3728      	adds	r7, #40	; 0x28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781a      	ldrb	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	785a      	ldrb	r2, [r3, #1]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	789a      	ldrb	r2, [r3, #2]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	78da      	ldrb	r2, [r3, #3]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	791a      	ldrb	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	795a      	ldrb	r2, [r3, #5]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	799a      	ldrb	r2, [r3, #6]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	79da      	ldrb	r2, [r3, #7]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	7a1a      	ldrb	r2, [r3, #8]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	721a      	strb	r2, [r3, #8]
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	785a      	ldrb	r2, [r3, #1]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	789a      	ldrb	r2, [r3, #2]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	78da      	ldrb	r2, [r3, #3]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	3305      	adds	r3, #5
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	021b      	lsls	r3, r3, #8
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	799a      	ldrb	r2, [r3, #6]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	719a      	strb	r2, [r3, #6]
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800800a:	b480      	push	{r7}
 800800c:	b087      	sub	sp, #28
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	4613      	mov	r3, r2
 8008016:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b03      	cmp	r3, #3
 8008020:	d120      	bne.n	8008064 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	1e9a      	subs	r2, r3, #2
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	4293      	cmp	r3, r2
 800802c:	bf28      	it	cs
 800802e:	4613      	movcs	r3, r2
 8008030:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3302      	adds	r3, #2
 8008036:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008038:	2300      	movs	r3, #0
 800803a:	82fb      	strh	r3, [r7, #22]
 800803c:	e00b      	b.n	8008056 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800803e:	8afb      	ldrh	r3, [r7, #22]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	781a      	ldrb	r2, [r3, #0]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	701a      	strb	r2, [r3, #0]
      pdest++;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	3301      	adds	r3, #1
 800804e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008050:	8afb      	ldrh	r3, [r7, #22]
 8008052:	3302      	adds	r3, #2
 8008054:	82fb      	strh	r3, [r7, #22]
 8008056:	8afa      	ldrh	r2, [r7, #22]
 8008058:	8abb      	ldrh	r3, [r7, #20]
 800805a:	429a      	cmp	r2, r3
 800805c:	d3ef      	bcc.n	800803e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]
  }
}
 8008064:	bf00      	nop
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	881a      	ldrh	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	b29b      	uxth	r3, r3
 8008084:	4413      	add	r3, r2
 8008086:	b29a      	uxth	r2, r3
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4413      	add	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008098:	68fb      	ldr	r3, [r7, #12]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	4613      	mov	r3, r2
 80080b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80080b4:	2301      	movs	r3, #1
 80080b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	789b      	ldrb	r3, [r3, #2]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d002      	beq.n	80080c6 <USBH_CtlReq+0x20>
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d00f      	beq.n	80080e4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80080c4:	e027      	b.n	8008116 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	88fa      	ldrh	r2, [r7, #6]
 80080d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2202      	movs	r2, #2
 80080dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80080de:	2301      	movs	r3, #1
 80080e0:	75fb      	strb	r3, [r7, #23]
      break;
 80080e2:	e018      	b.n	8008116 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f81b 	bl	8008120 <USBH_HandleControl>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <USBH_CtlReq+0x54>
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d106      	bne.n	8008108 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	761a      	strb	r2, [r3, #24]
      break;
 8008106:	e005      	b.n	8008114 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d102      	bne.n	8008114 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	709a      	strb	r2, [r3, #2]
      break;
 8008114:	bf00      	nop
  }
  return status;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af02      	add	r7, sp, #8
 8008126:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008128:	2301      	movs	r3, #1
 800812a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800812c:	2300      	movs	r3, #0
 800812e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7e1b      	ldrb	r3, [r3, #24]
 8008134:	3b01      	subs	r3, #1
 8008136:	2b0a      	cmp	r3, #10
 8008138:	f200 8156 	bhi.w	80083e8 <USBH_HandleControl+0x2c8>
 800813c:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <USBH_HandleControl+0x24>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	08008171 	.word	0x08008171
 8008148:	0800818b 	.word	0x0800818b
 800814c:	080081f5 	.word	0x080081f5
 8008150:	0800821b 	.word	0x0800821b
 8008154:	08008253 	.word	0x08008253
 8008158:	0800827d 	.word	0x0800827d
 800815c:	080082cf 	.word	0x080082cf
 8008160:	080082f1 	.word	0x080082f1
 8008164:	0800832d 	.word	0x0800832d
 8008168:	08008353 	.word	0x08008353
 800816c:	08008391 	.word	0x08008391
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f103 0110 	add.w	r1, r3, #16
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	795b      	ldrb	r3, [r3, #5]
 800817a:	461a      	mov	r2, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f943 	bl	8008408 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2202      	movs	r2, #2
 8008186:	761a      	strb	r2, [r3, #24]
      break;
 8008188:	e139      	b.n	80083fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	795b      	ldrb	r3, [r3, #5]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fcc5 	bl	8008b20 <USBH_LL_GetURBState>
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d11e      	bne.n	80081de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	7c1b      	ldrb	r3, [r3, #16]
 80081a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	8adb      	ldrh	r3, [r3, #22]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80081b2:	7b7b      	ldrb	r3, [r7, #13]
 80081b4:	2b80      	cmp	r3, #128	; 0x80
 80081b6:	d103      	bne.n	80081c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2203      	movs	r2, #3
 80081bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081be:	e115      	b.n	80083ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2205      	movs	r2, #5
 80081c4:	761a      	strb	r2, [r3, #24]
      break;
 80081c6:	e111      	b.n	80083ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80081c8:	7b7b      	ldrb	r3, [r7, #13]
 80081ca:	2b80      	cmp	r3, #128	; 0x80
 80081cc:	d103      	bne.n	80081d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2209      	movs	r2, #9
 80081d2:	761a      	strb	r2, [r3, #24]
      break;
 80081d4:	e10a      	b.n	80083ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2207      	movs	r2, #7
 80081da:	761a      	strb	r2, [r3, #24]
      break;
 80081dc:	e106      	b.n	80083ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d003      	beq.n	80081ec <USBH_HandleControl+0xcc>
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	f040 8100 	bne.w	80083ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	220b      	movs	r2, #11
 80081f0:	761a      	strb	r2, [r3, #24]
      break;
 80081f2:	e0fb      	b.n	80083ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6899      	ldr	r1, [r3, #8]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	899a      	ldrh	r2, [r3, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	791b      	ldrb	r3, [r3, #4]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f93a 	bl	8008486 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2204      	movs	r2, #4
 8008216:	761a      	strb	r2, [r3, #24]
      break;
 8008218:	e0f1      	b.n	80083fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	791b      	ldrb	r3, [r3, #4]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fc7d 	bl	8008b20 <USBH_LL_GetURBState>
 8008226:	4603      	mov	r3, r0
 8008228:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d102      	bne.n	8008236 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2209      	movs	r2, #9
 8008234:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b05      	cmp	r3, #5
 800823a:	d102      	bne.n	8008242 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800823c:	2303      	movs	r3, #3
 800823e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008240:	e0d6      	b.n	80083f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b04      	cmp	r3, #4
 8008246:	f040 80d3 	bne.w	80083f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	220b      	movs	r2, #11
 800824e:	761a      	strb	r2, [r3, #24]
      break;
 8008250:	e0ce      	b.n	80083f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6899      	ldr	r1, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	899a      	ldrh	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	795b      	ldrb	r3, [r3, #5]
 800825e:	2001      	movs	r0, #1
 8008260:	9000      	str	r0, [sp, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f8ea 	bl	800843c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800826e:	b29a      	uxth	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2206      	movs	r2, #6
 8008278:	761a      	strb	r2, [r3, #24]
      break;
 800827a:	e0c0      	b.n	80083fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	795b      	ldrb	r3, [r3, #5]
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fc4c 	bl	8008b20 <USBH_LL_GetURBState>
 8008288:	4603      	mov	r3, r0
 800828a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d103      	bne.n	800829a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2207      	movs	r2, #7
 8008296:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008298:	e0ac      	b.n	80083f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b05      	cmp	r3, #5
 800829e:	d105      	bne.n	80082ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	220c      	movs	r2, #12
 80082a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80082a6:	2303      	movs	r3, #3
 80082a8:	73fb      	strb	r3, [r7, #15]
      break;
 80082aa:	e0a3      	b.n	80083f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d103      	bne.n	80082ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2205      	movs	r2, #5
 80082b6:	761a      	strb	r2, [r3, #24]
      break;
 80082b8:	e09c      	b.n	80083f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b04      	cmp	r3, #4
 80082be:	f040 8099 	bne.w	80083f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	220b      	movs	r2, #11
 80082c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80082c8:	2302      	movs	r3, #2
 80082ca:	73fb      	strb	r3, [r7, #15]
      break;
 80082cc:	e092      	b.n	80083f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	791b      	ldrb	r3, [r3, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f8d5 	bl	8008486 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2208      	movs	r2, #8
 80082ec:	761a      	strb	r2, [r3, #24]

      break;
 80082ee:	e086      	b.n	80083fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fc12 	bl	8008b20 <USBH_LL_GetURBState>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d105      	bne.n	8008312 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	220d      	movs	r2, #13
 800830a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008310:	e072      	b.n	80083f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b04      	cmp	r3, #4
 8008316:	d103      	bne.n	8008320 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	220b      	movs	r2, #11
 800831c:	761a      	strb	r2, [r3, #24]
      break;
 800831e:	e06b      	b.n	80083f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b05      	cmp	r3, #5
 8008324:	d168      	bne.n	80083f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008326:	2303      	movs	r3, #3
 8008328:	73fb      	strb	r3, [r7, #15]
      break;
 800832a:	e065      	b.n	80083f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	795b      	ldrb	r3, [r3, #5]
 8008330:	2201      	movs	r2, #1
 8008332:	9200      	str	r2, [sp, #0]
 8008334:	2200      	movs	r2, #0
 8008336:	2100      	movs	r1, #0
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f87f 	bl	800843c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008344:	b29a      	uxth	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	220a      	movs	r2, #10
 800834e:	761a      	strb	r2, [r3, #24]
      break;
 8008350:	e055      	b.n	80083fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	795b      	ldrb	r3, [r3, #5]
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fbe1 	bl	8008b20 <USBH_LL_GetURBState>
 800835e:	4603      	mov	r3, r0
 8008360:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d105      	bne.n	8008374 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	220d      	movs	r2, #13
 8008370:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008372:	e043      	b.n	80083fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d103      	bne.n	8008382 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2209      	movs	r2, #9
 800837e:	761a      	strb	r2, [r3, #24]
      break;
 8008380:	e03c      	b.n	80083fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b04      	cmp	r3, #4
 8008386:	d139      	bne.n	80083fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	220b      	movs	r2, #11
 800838c:	761a      	strb	r2, [r3, #24]
      break;
 800838e:	e035      	b.n	80083fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7e5b      	ldrb	r3, [r3, #25]
 8008394:	3301      	adds	r3, #1
 8008396:	b2da      	uxtb	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	765a      	strb	r2, [r3, #25]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7e5b      	ldrb	r3, [r3, #25]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d806      	bhi.n	80083b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80083b0:	e025      	b.n	80083fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083b8:	2106      	movs	r1, #6
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	795b      	ldrb	r3, [r3, #5]
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f90c 	bl	80085e8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	791b      	ldrb	r3, [r3, #4]
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f906 	bl	80085e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80083e2:	2302      	movs	r3, #2
 80083e4:	73fb      	strb	r3, [r7, #15]
      break;
 80083e6:	e00a      	b.n	80083fe <USBH_HandleControl+0x2de>

    default:
      break;
 80083e8:	bf00      	nop
 80083ea:	e008      	b.n	80083fe <USBH_HandleControl+0x2de>
      break;
 80083ec:	bf00      	nop
 80083ee:	e006      	b.n	80083fe <USBH_HandleControl+0x2de>
      break;
 80083f0:	bf00      	nop
 80083f2:	e004      	b.n	80083fe <USBH_HandleControl+0x2de>
      break;
 80083f4:	bf00      	nop
 80083f6:	e002      	b.n	80083fe <USBH_HandleControl+0x2de>
      break;
 80083f8:	bf00      	nop
 80083fa:	e000      	b.n	80083fe <USBH_HandleControl+0x2de>
      break;
 80083fc:	bf00      	nop
  }

  return status;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af04      	add	r7, sp, #16
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	4613      	mov	r3, r2
 8008414:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008416:	79f9      	ldrb	r1, [r7, #7]
 8008418:	2300      	movs	r3, #0
 800841a:	9303      	str	r3, [sp, #12]
 800841c:	2308      	movs	r3, #8
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	2300      	movs	r3, #0
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	2300      	movs	r3, #0
 800842a:	2200      	movs	r2, #0
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fb46 	bl	8008abe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af04      	add	r7, sp, #16
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4611      	mov	r1, r2
 8008448:	461a      	mov	r2, r3
 800844a:	460b      	mov	r3, r1
 800844c:	80fb      	strh	r3, [r7, #6]
 800844e:	4613      	mov	r3, r2
 8008450:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800845c:	2300      	movs	r3, #0
 800845e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008460:	7979      	ldrb	r1, [r7, #5]
 8008462:	7e3b      	ldrb	r3, [r7, #24]
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	2301      	movs	r3, #1
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	2200      	movs	r2, #0
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 fb21 	bl	8008abe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b088      	sub	sp, #32
 800848a:	af04      	add	r7, sp, #16
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	4611      	mov	r1, r2
 8008492:	461a      	mov	r2, r3
 8008494:	460b      	mov	r3, r1
 8008496:	80fb      	strh	r3, [r7, #6]
 8008498:	4613      	mov	r3, r2
 800849a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800849c:	7979      	ldrb	r1, [r7, #5]
 800849e:	2300      	movs	r3, #0
 80084a0:	9303      	str	r3, [sp, #12]
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	9302      	str	r3, [sp, #8]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	2301      	movs	r3, #1
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	2300      	movs	r3, #0
 80084b0:	2201      	movs	r2, #1
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f000 fb03 	bl	8008abe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80084b8:	2300      	movs	r3, #0

}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b088      	sub	sp, #32
 80084c6:	af04      	add	r7, sp, #16
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	4611      	mov	r1, r2
 80084ce:	461a      	mov	r2, r3
 80084d0:	460b      	mov	r3, r1
 80084d2:	80fb      	strh	r3, [r7, #6]
 80084d4:	4613      	mov	r3, r2
 80084d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084e6:	7979      	ldrb	r1, [r7, #5]
 80084e8:	7e3b      	ldrb	r3, [r7, #24]
 80084ea:	9303      	str	r3, [sp, #12]
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	9302      	str	r3, [sp, #8]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	2301      	movs	r3, #1
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	2302      	movs	r3, #2
 80084fa:	2200      	movs	r2, #0
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fade 	bl	8008abe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af04      	add	r7, sp, #16
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4611      	mov	r1, r2
 8008518:	461a      	mov	r2, r3
 800851a:	460b      	mov	r3, r1
 800851c:	80fb      	strh	r3, [r7, #6]
 800851e:	4613      	mov	r3, r2
 8008520:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008522:	7979      	ldrb	r1, [r7, #5]
 8008524:	2300      	movs	r3, #0
 8008526:	9303      	str	r3, [sp, #12]
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	9302      	str	r3, [sp, #8]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	2301      	movs	r3, #1
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	2302      	movs	r3, #2
 8008536:	2201      	movs	r2, #1
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fac0 	bl	8008abe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af04      	add	r7, sp, #16
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	461a      	mov	r2, r3
 8008556:	4603      	mov	r3, r0
 8008558:	70fb      	strb	r3, [r7, #3]
 800855a:	460b      	mov	r3, r1
 800855c:	70bb      	strb	r3, [r7, #2]
 800855e:	4613      	mov	r3, r2
 8008560:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008562:	7878      	ldrb	r0, [r7, #1]
 8008564:	78ba      	ldrb	r2, [r7, #2]
 8008566:	78f9      	ldrb	r1, [r7, #3]
 8008568:	8b3b      	ldrh	r3, [r7, #24]
 800856a:	9302      	str	r3, [sp, #8]
 800856c:	7d3b      	ldrb	r3, [r7, #20]
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	7c3b      	ldrb	r3, [r7, #16]
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	4603      	mov	r3, r0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa53 	bl	8008a22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008592:	78fb      	ldrb	r3, [r7, #3]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa72 	bl	8008a80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f836 	bl	8008624 <USBH_GetFreePipe>
 80085b8:	4603      	mov	r3, r0
 80085ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00a      	beq.n	80085dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	89fb      	ldrh	r3, [r7, #14]
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	33e0      	adds	r3, #224	; 0xe0
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80085dc:	89fb      	ldrh	r3, [r7, #14]
 80085de:	b2db      	uxtb	r3, r3
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	2b0a      	cmp	r3, #10
 80085f8:	d80d      	bhi.n	8008616 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	33e0      	adds	r3, #224	; 0xe0
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800860c:	6879      	ldr	r1, [r7, #4]
 800860e:	33e0      	adds	r3, #224	; 0xe0
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	440b      	add	r3, r1
 8008614:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
 8008634:	e00f      	b.n	8008656 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	33e0      	adds	r3, #224	; 0xe0
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d102      	bne.n	8008650 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	b29b      	uxth	r3, r3
 800864e:	e007      	b.n	8008660 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	3301      	adds	r3, #1
 8008654:	73fb      	strb	r3, [r7, #15]
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	2b0a      	cmp	r3, #10
 800865a:	d9ec      	bls.n	8008636 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800865c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008670:	2201      	movs	r2, #1
 8008672:	490e      	ldr	r1, [pc, #56]	; (80086ac <MX_USB_HOST_Init+0x40>)
 8008674:	480e      	ldr	r0, [pc, #56]	; (80086b0 <MX_USB_HOST_Init+0x44>)
 8008676:	f7fe fca1 	bl	8006fbc <USBH_Init>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008680:	f7f8 fa46 	bl	8000b10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008684:	490b      	ldr	r1, [pc, #44]	; (80086b4 <MX_USB_HOST_Init+0x48>)
 8008686:	480a      	ldr	r0, [pc, #40]	; (80086b0 <MX_USB_HOST_Init+0x44>)
 8008688:	f7fe fd26 	bl	80070d8 <USBH_RegisterClass>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008692:	f7f8 fa3d 	bl	8000b10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008696:	4806      	ldr	r0, [pc, #24]	; (80086b0 <MX_USB_HOST_Init+0x44>)
 8008698:	f7fe fdaa 	bl	80071f0 <USBH_Start>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80086a2:	f7f8 fa35 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80086a6:	bf00      	nop
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	080086cd 	.word	0x080086cd
 80086b0:	20000604 	.word	0x20000604
 80086b4:	2000000c 	.word	0x2000000c

080086b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80086bc:	4802      	ldr	r0, [pc, #8]	; (80086c8 <MX_USB_HOST_Process+0x10>)
 80086be:	f7fe fda7 	bl	8007210 <USBH_Process>
}
 80086c2:	bf00      	nop
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000604 	.word	0x20000604

080086cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	3b01      	subs	r3, #1
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d819      	bhi.n	8008714 <USBH_UserProcess+0x48>
 80086e0:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <USBH_UserProcess+0x1c>)
 80086e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e6:	bf00      	nop
 80086e8:	08008715 	.word	0x08008715
 80086ec:	08008705 	.word	0x08008705
 80086f0:	08008715 	.word	0x08008715
 80086f4:	0800870d 	.word	0x0800870d
 80086f8:	080086fd 	.word	0x080086fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80086fc:	4b09      	ldr	r3, [pc, #36]	; (8008724 <USBH_UserProcess+0x58>)
 80086fe:	2203      	movs	r2, #3
 8008700:	701a      	strb	r2, [r3, #0]
  break;
 8008702:	e008      	b.n	8008716 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <USBH_UserProcess+0x58>)
 8008706:	2202      	movs	r2, #2
 8008708:	701a      	strb	r2, [r3, #0]
  break;
 800870a:	e004      	b.n	8008716 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <USBH_UserProcess+0x58>)
 800870e:	2201      	movs	r2, #1
 8008710:	701a      	strb	r2, [r3, #0]
  break;
 8008712:	e000      	b.n	8008716 <USBH_UserProcess+0x4a>

  default:
  break;
 8008714:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	200000b0 	.word	0x200000b0

08008728 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008730:	f107 0314 	add.w	r3, r7, #20
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	609a      	str	r2, [r3, #8]
 800873c:	60da      	str	r2, [r3, #12]
 800873e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008748:	d147      	bne.n	80087da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800874a:	2300      	movs	r3, #0
 800874c:	613b      	str	r3, [r7, #16]
 800874e:	4b25      	ldr	r3, [pc, #148]	; (80087e4 <HAL_HCD_MspInit+0xbc>)
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	4a24      	ldr	r2, [pc, #144]	; (80087e4 <HAL_HCD_MspInit+0xbc>)
 8008754:	f043 0301 	orr.w	r3, r3, #1
 8008758:	6313      	str	r3, [r2, #48]	; 0x30
 800875a:	4b22      	ldr	r3, [pc, #136]	; (80087e4 <HAL_HCD_MspInit+0xbc>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	613b      	str	r3, [r7, #16]
 8008764:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800876a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800876c:	2300      	movs	r3, #0
 800876e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008770:	2300      	movs	r3, #0
 8008772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008774:	f107 0314 	add.w	r3, r7, #20
 8008778:	4619      	mov	r1, r3
 800877a:	481b      	ldr	r0, [pc, #108]	; (80087e8 <HAL_HCD_MspInit+0xc0>)
 800877c:	f7f8 febc 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008780:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008786:	2302      	movs	r3, #2
 8008788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800878e:	2300      	movs	r3, #0
 8008790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008792:	230a      	movs	r3, #10
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008796:	f107 0314 	add.w	r3, r7, #20
 800879a:	4619      	mov	r1, r3
 800879c:	4812      	ldr	r0, [pc, #72]	; (80087e8 <HAL_HCD_MspInit+0xc0>)
 800879e:	f7f8 feab 	bl	80014f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087a2:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <HAL_HCD_MspInit+0xbc>)
 80087a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a6:	4a0f      	ldr	r2, [pc, #60]	; (80087e4 <HAL_HCD_MspInit+0xbc>)
 80087a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ac:	6353      	str	r3, [r2, #52]	; 0x34
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <HAL_HCD_MspInit+0xbc>)
 80087b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b6:	4a0b      	ldr	r2, [pc, #44]	; (80087e4 <HAL_HCD_MspInit+0xbc>)
 80087b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087bc:	6453      	str	r3, [r2, #68]	; 0x44
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <HAL_HCD_MspInit+0xbc>)
 80087c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087ca:	2200      	movs	r2, #0
 80087cc:	2100      	movs	r1, #0
 80087ce:	2043      	movs	r0, #67	; 0x43
 80087d0:	f7f8 fdc9 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087d4:	2043      	movs	r0, #67	; 0x43
 80087d6:	f7f8 fde2 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087da:	bf00      	nop
 80087dc:	3728      	adds	r7, #40	; 0x28
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	40023800 	.word	0x40023800
 80087e8:	40020000 	.word	0x40020000

080087ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff f8db 	bl	80079b6 <USBH_LL_IncTimer>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff f913 	bl	8007a42 <USBH_LL_Connect>
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff f91c 	bl	8007a70 <USBH_LL_Disconnect>
}
 8008838:	bf00      	nop
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
 800884c:	4613      	mov	r3, r2
 800884e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff f8cd 	bl	8007a0a <USBH_LL_PortEnabled>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff f8cd 	bl	8007a26 <USBH_LL_PortDisabled>
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d12a      	bne.n	80088fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80088a6:	4a18      	ldr	r2, [pc, #96]	; (8008908 <USBH_LL_Init+0x74>)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a15      	ldr	r2, [pc, #84]	; (8008908 <USBH_LL_Init+0x74>)
 80088b2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088b6:	4b14      	ldr	r3, [pc, #80]	; (8008908 <USBH_LL_Init+0x74>)
 80088b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80088be:	4b12      	ldr	r3, [pc, #72]	; (8008908 <USBH_LL_Init+0x74>)
 80088c0:	2208      	movs	r2, #8
 80088c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80088c4:	4b10      	ldr	r3, [pc, #64]	; (8008908 <USBH_LL_Init+0x74>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088ca:	4b0f      	ldr	r3, [pc, #60]	; (8008908 <USBH_LL_Init+0x74>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80088d0:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <USBH_LL_Init+0x74>)
 80088d2:	2202      	movs	r2, #2
 80088d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <USBH_LL_Init+0x74>)
 80088d8:	2200      	movs	r2, #0
 80088da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80088dc:	480a      	ldr	r0, [pc, #40]	; (8008908 <USBH_LL_Init+0x74>)
 80088de:	f7f8 ffc0 	bl	8001862 <HAL_HCD_Init>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80088e8:	f7f8 f912 	bl	8000b10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80088ec:	4806      	ldr	r0, [pc, #24]	; (8008908 <USBH_LL_Init+0x74>)
 80088ee:	f7f9 fba4 	bl	800203a <HAL_HCD_GetCurrentFrame>
 80088f2:	4603      	mov	r3, r0
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff f84e 	bl	8007998 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	200009dc 	.word	0x200009dc

0800890c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008922:	4618      	mov	r0, r3
 8008924:	f7f9 fb13 	bl	8001f4e <HAL_HCD_Start>
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	4618      	mov	r0, r3
 8008930:	f000 f95c 	bl	8008bec <USBH_Get_USB_Status>
 8008934:	4603      	mov	r3, r0
 8008936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008938:	7bbb      	ldrb	r3, [r7, #14]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008958:	4618      	mov	r0, r3
 800895a:	f7f9 fb1b 	bl	8001f94 <HAL_HCD_Stop>
 800895e:	4603      	mov	r3, r0
 8008960:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 f941 	bl	8008bec <USBH_Get_USB_Status>
 800896a:	4603      	mov	r3, r0
 800896c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008980:	2301      	movs	r3, #1
 8008982:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800898a:	4618      	mov	r0, r3
 800898c:	f7f9 fb63 	bl	8002056 <HAL_HCD_GetCurrentSpeed>
 8008990:	4603      	mov	r3, r0
 8008992:	2b02      	cmp	r3, #2
 8008994:	d00c      	beq.n	80089b0 <USBH_LL_GetSpeed+0x38>
 8008996:	2b02      	cmp	r3, #2
 8008998:	d80d      	bhi.n	80089b6 <USBH_LL_GetSpeed+0x3e>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <USBH_LL_GetSpeed+0x2c>
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d003      	beq.n	80089aa <USBH_LL_GetSpeed+0x32>
 80089a2:	e008      	b.n	80089b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
    break;
 80089a8:	e008      	b.n	80089bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80089aa:	2301      	movs	r3, #1
 80089ac:	73fb      	strb	r3, [r7, #15]
    break;
 80089ae:	e005      	b.n	80089bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80089b0:	2302      	movs	r3, #2
 80089b2:	73fb      	strb	r3, [r7, #15]
    break;
 80089b4:	e002      	b.n	80089bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80089b6:	2301      	movs	r3, #1
 80089b8:	73fb      	strb	r3, [r7, #15]
    break;
 80089ba:	bf00      	nop
  }
  return  speed;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089dc:	4618      	mov	r0, r3
 80089de:	f7f9 faf6 	bl	8001fce <HAL_HCD_ResetPort>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 f8ff 	bl	8008bec <USBH_Get_USB_Status>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f9 fafd 	bl	8002012 <HAL_HCD_HC_GetXferCount>
 8008a18:	4603      	mov	r3, r0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a22:	b590      	push	{r4, r7, lr}
 8008a24:	b089      	sub	sp, #36	; 0x24
 8008a26:	af04      	add	r7, sp, #16
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4603      	mov	r3, r0
 8008a32:	70fb      	strb	r3, [r7, #3]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70bb      	strb	r3, [r7, #2]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a4a:	787c      	ldrb	r4, [r7, #1]
 8008a4c:	78ba      	ldrb	r2, [r7, #2]
 8008a4e:	78f9      	ldrb	r1, [r7, #3]
 8008a50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a52:	9302      	str	r3, [sp, #8]
 8008a54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	4623      	mov	r3, r4
 8008a62:	f7f8 ff60 	bl	8001926 <HAL_HCD_HC_Init>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 f8bd 	bl	8008bec <USBH_Get_USB_Status>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd90      	pop	{r4, r7, pc}

08008a80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7f8 ffd0 	bl	8001a44 <HAL_HCD_HC_Halt>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f89e 	bl	8008bec <USBH_Get_USB_Status>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008abe:	b590      	push	{r4, r7, lr}
 8008ac0:	b089      	sub	sp, #36	; 0x24
 8008ac2:	af04      	add	r7, sp, #16
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	4611      	mov	r1, r2
 8008aca:	461a      	mov	r2, r3
 8008acc:	4603      	mov	r3, r0
 8008ace:	70fb      	strb	r3, [r7, #3]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70bb      	strb	r3, [r7, #2]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008ae6:	787c      	ldrb	r4, [r7, #1]
 8008ae8:	78ba      	ldrb	r2, [r7, #2]
 8008aea:	78f9      	ldrb	r1, [r7, #3]
 8008aec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008af0:	9303      	str	r3, [sp, #12]
 8008af2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008af4:	9302      	str	r3, [sp, #8]
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	4623      	mov	r3, r4
 8008b02:	f7f8 ffc3 	bl	8001a8c <HAL_HCD_HC_SubmitRequest>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f86d 	bl	8008bec <USBH_Get_USB_Status>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd90      	pop	{r4, r7, pc}

08008b20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7f9 fa57 	bl	8001fea <HAL_HCD_HC_GetURBState>
 8008b3c:	4603      	mov	r3, r0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d103      	bne.n	8008b64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 f870 	bl	8008c44 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008b64:	20c8      	movs	r0, #200	; 0xc8
 8008b66:	f7f8 faff 	bl	8001168 <HAL_Delay>
  return USBH_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
 8008b80:	4613      	mov	r3, r2
 8008b82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	212c      	movs	r1, #44	; 0x2c
 8008b92:	fb01 f303 	mul.w	r3, r1, r3
 8008b96:	4413      	add	r3, r2
 8008b98:	333b      	adds	r3, #59	; 0x3b
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d009      	beq.n	8008bb4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	212c      	movs	r1, #44	; 0x2c
 8008ba6:	fb01 f303 	mul.w	r3, r1, r3
 8008baa:	4413      	add	r3, r2
 8008bac:	3354      	adds	r3, #84	; 0x54
 8008bae:	78ba      	ldrb	r2, [r7, #2]
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e008      	b.n	8008bc6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	212c      	movs	r1, #44	; 0x2c
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3355      	adds	r3, #85	; 0x55
 8008bc2:	78ba      	ldrb	r2, [r7, #2]
 8008bc4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7f8 fac3 	bl	8001168 <HAL_Delay>
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d817      	bhi.n	8008c30 <USBH_Get_USB_Status+0x44>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <USBH_Get_USB_Status+0x1c>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c1f 	.word	0x08008c1f
 8008c10:	08008c25 	.word	0x08008c25
 8008c14:	08008c2b 	.word	0x08008c2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c1c:	e00b      	b.n	8008c36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	73fb      	strb	r3, [r7, #15]
    break;
 8008c22:	e008      	b.n	8008c36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
    break;
 8008c28:	e005      	b.n	8008c36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2e:	e002      	b.n	8008c36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008c30:	2302      	movs	r3, #2
 8008c32:	73fb      	strb	r3, [r7, #15]
    break;
 8008c34:	bf00      	nop
  }
  return usb_status;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d102      	bne.n	8008c5e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	73fb      	strb	r3, [r7, #15]
 8008c5c:	e001      	b.n	8008c62 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	461a      	mov	r2, r3
 8008c66:	2101      	movs	r1, #1
 8008c68:	4803      	ldr	r0, [pc, #12]	; (8008c78 <MX_DriverVbusFS+0x34>)
 8008c6a:	f7f8 fde1 	bl	8001830 <HAL_GPIO_WritePin>
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	40020800 	.word	0x40020800

08008c7c <__errno>:
 8008c7c:	4b01      	ldr	r3, [pc, #4]	; (8008c84 <__errno+0x8>)
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	2000002c 	.word	0x2000002c

08008c88 <_fclose_r>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	b911      	cbnz	r1, 8008c96 <_fclose_r+0xe>
 8008c90:	2600      	movs	r6, #0
 8008c92:	4630      	mov	r0, r6
 8008c94:	bd70      	pop	{r4, r5, r6, pc}
 8008c96:	b118      	cbz	r0, 8008ca0 <_fclose_r+0x18>
 8008c98:	6983      	ldr	r3, [r0, #24]
 8008c9a:	b90b      	cbnz	r3, 8008ca0 <_fclose_r+0x18>
 8008c9c:	f000 fa18 	bl	80090d0 <__sinit>
 8008ca0:	4b2c      	ldr	r3, [pc, #176]	; (8008d54 <_fclose_r+0xcc>)
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	d114      	bne.n	8008cd0 <_fclose_r+0x48>
 8008ca6:	686c      	ldr	r4, [r5, #4]
 8008ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008caa:	07d8      	lsls	r0, r3, #31
 8008cac:	d405      	bmi.n	8008cba <_fclose_r+0x32>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	0599      	lsls	r1, r3, #22
 8008cb2:	d402      	bmi.n	8008cba <_fclose_r+0x32>
 8008cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb6:	f000 fcc5 	bl	8009644 <__retarget_lock_acquire_recursive>
 8008cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cbe:	b98b      	cbnz	r3, 8008ce4 <_fclose_r+0x5c>
 8008cc0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8008cc2:	f016 0601 	ands.w	r6, r6, #1
 8008cc6:	d1e3      	bne.n	8008c90 <_fclose_r+0x8>
 8008cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cca:	f000 fcbc 	bl	8009646 <__retarget_lock_release_recursive>
 8008cce:	e7e0      	b.n	8008c92 <_fclose_r+0xa>
 8008cd0:	4b21      	ldr	r3, [pc, #132]	; (8008d58 <_fclose_r+0xd0>)
 8008cd2:	429c      	cmp	r4, r3
 8008cd4:	d101      	bne.n	8008cda <_fclose_r+0x52>
 8008cd6:	68ac      	ldr	r4, [r5, #8]
 8008cd8:	e7e6      	b.n	8008ca8 <_fclose_r+0x20>
 8008cda:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <_fclose_r+0xd4>)
 8008cdc:	429c      	cmp	r4, r3
 8008cde:	bf08      	it	eq
 8008ce0:	68ec      	ldreq	r4, [r5, #12]
 8008ce2:	e7e1      	b.n	8008ca8 <_fclose_r+0x20>
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f000 f842 	bl	8008d70 <__sflush_r>
 8008cec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008cee:	4606      	mov	r6, r0
 8008cf0:	b133      	cbz	r3, 8008d00 <_fclose_r+0x78>
 8008cf2:	6a21      	ldr	r1, [r4, #32]
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	4798      	blx	r3
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	bfb8      	it	lt
 8008cfc:	f04f 36ff 	movlt.w	r6, #4294967295
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	061a      	lsls	r2, r3, #24
 8008d04:	d503      	bpl.n	8008d0e <_fclose_r+0x86>
 8008d06:	6921      	ldr	r1, [r4, #16]
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f000 fd35 	bl	8009778 <_free_r>
 8008d0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d10:	b141      	cbz	r1, 8008d24 <_fclose_r+0x9c>
 8008d12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d16:	4299      	cmp	r1, r3
 8008d18:	d002      	beq.n	8008d20 <_fclose_r+0x98>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f000 fd2c 	bl	8009778 <_free_r>
 8008d20:	2300      	movs	r3, #0
 8008d22:	6363      	str	r3, [r4, #52]	; 0x34
 8008d24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008d26:	b121      	cbz	r1, 8008d32 <_fclose_r+0xaa>
 8008d28:	4628      	mov	r0, r5
 8008d2a:	f000 fd25 	bl	8009778 <_free_r>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	64a3      	str	r3, [r4, #72]	; 0x48
 8008d32:	f000 f9b5 	bl	80090a0 <__sfp_lock_acquire>
 8008d36:	2300      	movs	r3, #0
 8008d38:	81a3      	strh	r3, [r4, #12]
 8008d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d3c:	07db      	lsls	r3, r3, #31
 8008d3e:	d402      	bmi.n	8008d46 <_fclose_r+0xbe>
 8008d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d42:	f000 fc80 	bl	8009646 <__retarget_lock_release_recursive>
 8008d46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d48:	f000 fc7b 	bl	8009642 <__retarget_lock_close_recursive>
 8008d4c:	f000 f9ae 	bl	80090ac <__sfp_lock_release>
 8008d50:	e79f      	b.n	8008c92 <_fclose_r+0xa>
 8008d52:	bf00      	nop
 8008d54:	0800a598 	.word	0x0800a598
 8008d58:	0800a5b8 	.word	0x0800a5b8
 8008d5c:	0800a578 	.word	0x0800a578

08008d60 <fclose>:
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <fclose+0xc>)
 8008d62:	4601      	mov	r1, r0
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	f7ff bf8f 	b.w	8008c88 <_fclose_r>
 8008d6a:	bf00      	nop
 8008d6c:	2000002c 	.word	0x2000002c

08008d70 <__sflush_r>:
 8008d70:	898a      	ldrh	r2, [r1, #12]
 8008d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d76:	4605      	mov	r5, r0
 8008d78:	0710      	lsls	r0, r2, #28
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	d458      	bmi.n	8008e30 <__sflush_r+0xc0>
 8008d7e:	684b      	ldr	r3, [r1, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dc05      	bgt.n	8008d90 <__sflush_r+0x20>
 8008d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	dc02      	bgt.n	8008d90 <__sflush_r+0x20>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	d0f9      	beq.n	8008d8a <__sflush_r+0x1a>
 8008d96:	2300      	movs	r3, #0
 8008d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d9c:	682f      	ldr	r7, [r5, #0]
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	d032      	beq.n	8008e08 <__sflush_r+0x98>
 8008da2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	075a      	lsls	r2, r3, #29
 8008da8:	d505      	bpl.n	8008db6 <__sflush_r+0x46>
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	1ac0      	subs	r0, r0, r3
 8008dae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008db0:	b10b      	cbz	r3, 8008db6 <__sflush_r+0x46>
 8008db2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008db4:	1ac0      	subs	r0, r0, r3
 8008db6:	2300      	movs	r3, #0
 8008db8:	4602      	mov	r2, r0
 8008dba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dbc:	6a21      	ldr	r1, [r4, #32]
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	47b0      	blx	r6
 8008dc2:	1c43      	adds	r3, r0, #1
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	d106      	bne.n	8008dd6 <__sflush_r+0x66>
 8008dc8:	6829      	ldr	r1, [r5, #0]
 8008dca:	291d      	cmp	r1, #29
 8008dcc:	d82c      	bhi.n	8008e28 <__sflush_r+0xb8>
 8008dce:	4a2a      	ldr	r2, [pc, #168]	; (8008e78 <__sflush_r+0x108>)
 8008dd0:	40ca      	lsrs	r2, r1
 8008dd2:	07d6      	lsls	r6, r2, #31
 8008dd4:	d528      	bpl.n	8008e28 <__sflush_r+0xb8>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	6062      	str	r2, [r4, #4]
 8008dda:	04d9      	lsls	r1, r3, #19
 8008ddc:	6922      	ldr	r2, [r4, #16]
 8008dde:	6022      	str	r2, [r4, #0]
 8008de0:	d504      	bpl.n	8008dec <__sflush_r+0x7c>
 8008de2:	1c42      	adds	r2, r0, #1
 8008de4:	d101      	bne.n	8008dea <__sflush_r+0x7a>
 8008de6:	682b      	ldr	r3, [r5, #0]
 8008de8:	b903      	cbnz	r3, 8008dec <__sflush_r+0x7c>
 8008dea:	6560      	str	r0, [r4, #84]	; 0x54
 8008dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dee:	602f      	str	r7, [r5, #0]
 8008df0:	2900      	cmp	r1, #0
 8008df2:	d0ca      	beq.n	8008d8a <__sflush_r+0x1a>
 8008df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	d002      	beq.n	8008e02 <__sflush_r+0x92>
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f000 fcbb 	bl	8009778 <_free_r>
 8008e02:	2000      	movs	r0, #0
 8008e04:	6360      	str	r0, [r4, #52]	; 0x34
 8008e06:	e7c1      	b.n	8008d8c <__sflush_r+0x1c>
 8008e08:	6a21      	ldr	r1, [r4, #32]
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	47b0      	blx	r6
 8008e10:	1c41      	adds	r1, r0, #1
 8008e12:	d1c7      	bne.n	8008da4 <__sflush_r+0x34>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0c4      	beq.n	8008da4 <__sflush_r+0x34>
 8008e1a:	2b1d      	cmp	r3, #29
 8008e1c:	d001      	beq.n	8008e22 <__sflush_r+0xb2>
 8008e1e:	2b16      	cmp	r3, #22
 8008e20:	d101      	bne.n	8008e26 <__sflush_r+0xb6>
 8008e22:	602f      	str	r7, [r5, #0]
 8008e24:	e7b1      	b.n	8008d8a <__sflush_r+0x1a>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	e7ad      	b.n	8008d8c <__sflush_r+0x1c>
 8008e30:	690f      	ldr	r7, [r1, #16]
 8008e32:	2f00      	cmp	r7, #0
 8008e34:	d0a9      	beq.n	8008d8a <__sflush_r+0x1a>
 8008e36:	0793      	lsls	r3, r2, #30
 8008e38:	680e      	ldr	r6, [r1, #0]
 8008e3a:	bf08      	it	eq
 8008e3c:	694b      	ldreq	r3, [r1, #20]
 8008e3e:	600f      	str	r7, [r1, #0]
 8008e40:	bf18      	it	ne
 8008e42:	2300      	movne	r3, #0
 8008e44:	eba6 0807 	sub.w	r8, r6, r7
 8008e48:	608b      	str	r3, [r1, #8]
 8008e4a:	f1b8 0f00 	cmp.w	r8, #0
 8008e4e:	dd9c      	ble.n	8008d8a <__sflush_r+0x1a>
 8008e50:	6a21      	ldr	r1, [r4, #32]
 8008e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e54:	4643      	mov	r3, r8
 8008e56:	463a      	mov	r2, r7
 8008e58:	4628      	mov	r0, r5
 8008e5a:	47b0      	blx	r6
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	dc06      	bgt.n	8008e6e <__sflush_r+0xfe>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	e78e      	b.n	8008d8c <__sflush_r+0x1c>
 8008e6e:	4407      	add	r7, r0
 8008e70:	eba8 0800 	sub.w	r8, r8, r0
 8008e74:	e7e9      	b.n	8008e4a <__sflush_r+0xda>
 8008e76:	bf00      	nop
 8008e78:	20400001 	.word	0x20400001

08008e7c <_fflush_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	690b      	ldr	r3, [r1, #16]
 8008e80:	4605      	mov	r5, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	b913      	cbnz	r3, 8008e8c <_fflush_r+0x10>
 8008e86:	2500      	movs	r5, #0
 8008e88:	4628      	mov	r0, r5
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	b118      	cbz	r0, 8008e96 <_fflush_r+0x1a>
 8008e8e:	6983      	ldr	r3, [r0, #24]
 8008e90:	b90b      	cbnz	r3, 8008e96 <_fflush_r+0x1a>
 8008e92:	f000 f91d 	bl	80090d0 <__sinit>
 8008e96:	4b14      	ldr	r3, [pc, #80]	; (8008ee8 <_fflush_r+0x6c>)
 8008e98:	429c      	cmp	r4, r3
 8008e9a:	d11b      	bne.n	8008ed4 <_fflush_r+0x58>
 8008e9c:	686c      	ldr	r4, [r5, #4]
 8008e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0ef      	beq.n	8008e86 <_fflush_r+0xa>
 8008ea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ea8:	07d0      	lsls	r0, r2, #31
 8008eaa:	d404      	bmi.n	8008eb6 <_fflush_r+0x3a>
 8008eac:	0599      	lsls	r1, r3, #22
 8008eae:	d402      	bmi.n	8008eb6 <_fflush_r+0x3a>
 8008eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb2:	f000 fbc7 	bl	8009644 <__retarget_lock_acquire_recursive>
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	4621      	mov	r1, r4
 8008eba:	f7ff ff59 	bl	8008d70 <__sflush_r>
 8008ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ec0:	07da      	lsls	r2, r3, #31
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	d4e0      	bmi.n	8008e88 <_fflush_r+0xc>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	059b      	lsls	r3, r3, #22
 8008eca:	d4dd      	bmi.n	8008e88 <_fflush_r+0xc>
 8008ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ece:	f000 fbba 	bl	8009646 <__retarget_lock_release_recursive>
 8008ed2:	e7d9      	b.n	8008e88 <_fflush_r+0xc>
 8008ed4:	4b05      	ldr	r3, [pc, #20]	; (8008eec <_fflush_r+0x70>)
 8008ed6:	429c      	cmp	r4, r3
 8008ed8:	d101      	bne.n	8008ede <_fflush_r+0x62>
 8008eda:	68ac      	ldr	r4, [r5, #8]
 8008edc:	e7df      	b.n	8008e9e <_fflush_r+0x22>
 8008ede:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <_fflush_r+0x74>)
 8008ee0:	429c      	cmp	r4, r3
 8008ee2:	bf08      	it	eq
 8008ee4:	68ec      	ldreq	r4, [r5, #12]
 8008ee6:	e7da      	b.n	8008e9e <_fflush_r+0x22>
 8008ee8:	0800a598 	.word	0x0800a598
 8008eec:	0800a5b8 	.word	0x0800a5b8
 8008ef0:	0800a578 	.word	0x0800a578

08008ef4 <fflush>:
 8008ef4:	4601      	mov	r1, r0
 8008ef6:	b920      	cbnz	r0, 8008f02 <fflush+0xe>
 8008ef8:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <fflush+0x18>)
 8008efa:	4905      	ldr	r1, [pc, #20]	; (8008f10 <fflush+0x1c>)
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	f000 bb5c 	b.w	80095ba <_fwalk_reent>
 8008f02:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <fflush+0x20>)
 8008f04:	6818      	ldr	r0, [r3, #0]
 8008f06:	f7ff bfb9 	b.w	8008e7c <_fflush_r>
 8008f0a:	bf00      	nop
 8008f0c:	0800a5d8 	.word	0x0800a5d8
 8008f10:	08008e7d 	.word	0x08008e7d
 8008f14:	2000002c 	.word	0x2000002c

08008f18 <_fgets_r>:
 8008f18:	2a01      	cmp	r2, #1
 8008f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1e:	4680      	mov	r8, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	4617      	mov	r7, r2
 8008f24:	461c      	mov	r4, r3
 8008f26:	dc03      	bgt.n	8008f30 <_fgets_r+0x18>
 8008f28:	2500      	movs	r5, #0
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f30:	b118      	cbz	r0, 8008f3a <_fgets_r+0x22>
 8008f32:	6983      	ldr	r3, [r0, #24]
 8008f34:	b90b      	cbnz	r3, 8008f3a <_fgets_r+0x22>
 8008f36:	f000 f8cb 	bl	80090d0 <__sinit>
 8008f3a:	4b31      	ldr	r3, [pc, #196]	; (8009000 <_fgets_r+0xe8>)
 8008f3c:	429c      	cmp	r4, r3
 8008f3e:	d120      	bne.n	8008f82 <_fgets_r+0x6a>
 8008f40:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f46:	07de      	lsls	r6, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_fgets_r+0x3e>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	0598      	lsls	r0, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_fgets_r+0x3e>
 8008f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f52:	f000 fb77 	bl	8009644 <__retarget_lock_acquire_recursive>
 8008f56:	3f01      	subs	r7, #1
 8008f58:	46a9      	mov	r9, r5
 8008f5a:	6866      	ldr	r6, [r4, #4]
 8008f5c:	b9f6      	cbnz	r6, 8008f9c <_fgets_r+0x84>
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4640      	mov	r0, r8
 8008f62:	f000 fd5d 	bl	8009a20 <__srefill_r>
 8008f66:	b1c0      	cbz	r0, 8008f9a <_fgets_r+0x82>
 8008f68:	45a9      	cmp	r9, r5
 8008f6a:	d145      	bne.n	8008ff8 <_fgets_r+0xe0>
 8008f6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f6e:	07d9      	lsls	r1, r3, #31
 8008f70:	d4da      	bmi.n	8008f28 <_fgets_r+0x10>
 8008f72:	89a5      	ldrh	r5, [r4, #12]
 8008f74:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 8008f78:	d1d6      	bne.n	8008f28 <_fgets_r+0x10>
 8008f7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f7c:	f000 fb63 	bl	8009646 <__retarget_lock_release_recursive>
 8008f80:	e7d3      	b.n	8008f2a <_fgets_r+0x12>
 8008f82:	4b20      	ldr	r3, [pc, #128]	; (8009004 <_fgets_r+0xec>)
 8008f84:	429c      	cmp	r4, r3
 8008f86:	d102      	bne.n	8008f8e <_fgets_r+0x76>
 8008f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f8c:	e7da      	b.n	8008f44 <_fgets_r+0x2c>
 8008f8e:	4b1e      	ldr	r3, [pc, #120]	; (8009008 <_fgets_r+0xf0>)
 8008f90:	429c      	cmp	r4, r3
 8008f92:	bf08      	it	eq
 8008f94:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 8008f98:	e7d4      	b.n	8008f44 <_fgets_r+0x2c>
 8008f9a:	6866      	ldr	r6, [r4, #4]
 8008f9c:	f8d4 a000 	ldr.w	sl, [r4]
 8008fa0:	42be      	cmp	r6, r7
 8008fa2:	bf28      	it	cs
 8008fa4:	463e      	movcs	r6, r7
 8008fa6:	4632      	mov	r2, r6
 8008fa8:	210a      	movs	r1, #10
 8008faa:	4650      	mov	r0, sl
 8008fac:	f7f7 f910 	bl	80001d0 <memchr>
 8008fb0:	6863      	ldr	r3, [r4, #4]
 8008fb2:	b1a0      	cbz	r0, 8008fde <_fgets_r+0xc6>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	eba0 060a 	sub.w	r6, r0, sl
 8008fba:	1b9b      	subs	r3, r3, r6
 8008fbc:	e9c4 0300 	strd	r0, r3, [r4]
 8008fc0:	4632      	mov	r2, r6
 8008fc2:	4651      	mov	r1, sl
 8008fc4:	4648      	mov	r0, r9
 8008fc6:	f000 fbc1 	bl	800974c <memcpy>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f809 3006 	strb.w	r3, [r9, r6]
 8008fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fd2:	07da      	lsls	r2, r3, #31
 8008fd4:	d4a9      	bmi.n	8008f2a <_fgets_r+0x12>
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	059b      	lsls	r3, r3, #22
 8008fda:	d4a6      	bmi.n	8008f2a <_fgets_r+0x12>
 8008fdc:	e7cd      	b.n	8008f7a <_fgets_r+0x62>
 8008fde:	1b9b      	subs	r3, r3, r6
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	4433      	add	r3, r6
 8008fe6:	4648      	mov	r0, r9
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	4632      	mov	r2, r6
 8008fec:	4651      	mov	r1, sl
 8008fee:	f000 fbad 	bl	800974c <memcpy>
 8008ff2:	1bbf      	subs	r7, r7, r6
 8008ff4:	44b1      	add	r9, r6
 8008ff6:	d1b0      	bne.n	8008f5a <_fgets_r+0x42>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f889 3000 	strb.w	r3, [r9]
 8008ffe:	e7e7      	b.n	8008fd0 <_fgets_r+0xb8>
 8009000:	0800a598 	.word	0x0800a598
 8009004:	0800a5b8 	.word	0x0800a5b8
 8009008:	0800a578 	.word	0x0800a578

0800900c <fgets>:
 800900c:	4613      	mov	r3, r2
 800900e:	460a      	mov	r2, r1
 8009010:	4601      	mov	r1, r0
 8009012:	4802      	ldr	r0, [pc, #8]	; (800901c <fgets+0x10>)
 8009014:	6800      	ldr	r0, [r0, #0]
 8009016:	f7ff bf7f 	b.w	8008f18 <_fgets_r>
 800901a:	bf00      	nop
 800901c:	2000002c 	.word	0x2000002c

08009020 <std>:
 8009020:	2300      	movs	r3, #0
 8009022:	b510      	push	{r4, lr}
 8009024:	4604      	mov	r4, r0
 8009026:	e9c0 3300 	strd	r3, r3, [r0]
 800902a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800902e:	6083      	str	r3, [r0, #8]
 8009030:	8181      	strh	r1, [r0, #12]
 8009032:	6643      	str	r3, [r0, #100]	; 0x64
 8009034:	81c2      	strh	r2, [r0, #14]
 8009036:	6183      	str	r3, [r0, #24]
 8009038:	4619      	mov	r1, r3
 800903a:	2208      	movs	r2, #8
 800903c:	305c      	adds	r0, #92	; 0x5c
 800903e:	f000 fb93 	bl	8009768 <memset>
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <std+0x38>)
 8009044:	6263      	str	r3, [r4, #36]	; 0x24
 8009046:	4b05      	ldr	r3, [pc, #20]	; (800905c <std+0x3c>)
 8009048:	62a3      	str	r3, [r4, #40]	; 0x28
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <std+0x40>)
 800904c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <std+0x44>)
 8009050:	6224      	str	r4, [r4, #32]
 8009052:	6323      	str	r3, [r4, #48]	; 0x30
 8009054:	bd10      	pop	{r4, pc}
 8009056:	bf00      	nop
 8009058:	08009b55 	.word	0x08009b55
 800905c:	08009b77 	.word	0x08009b77
 8009060:	08009baf 	.word	0x08009baf
 8009064:	08009bd3 	.word	0x08009bd3

08009068 <_cleanup_r>:
 8009068:	4901      	ldr	r1, [pc, #4]	; (8009070 <_cleanup_r+0x8>)
 800906a:	f000 baa6 	b.w	80095ba <_fwalk_reent>
 800906e:	bf00      	nop
 8009070:	08008e7d 	.word	0x08008e7d

08009074 <__sfmoreglue>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	1e4a      	subs	r2, r1, #1
 8009078:	2568      	movs	r5, #104	; 0x68
 800907a:	4355      	muls	r5, r2
 800907c:	460e      	mov	r6, r1
 800907e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009082:	f000 fbc9 	bl	8009818 <_malloc_r>
 8009086:	4604      	mov	r4, r0
 8009088:	b140      	cbz	r0, 800909c <__sfmoreglue+0x28>
 800908a:	2100      	movs	r1, #0
 800908c:	e9c0 1600 	strd	r1, r6, [r0]
 8009090:	300c      	adds	r0, #12
 8009092:	60a0      	str	r0, [r4, #8]
 8009094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009098:	f000 fb66 	bl	8009768 <memset>
 800909c:	4620      	mov	r0, r4
 800909e:	bd70      	pop	{r4, r5, r6, pc}

080090a0 <__sfp_lock_acquire>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sfp_lock_acquire+0x8>)
 80090a2:	f000 bacf 	b.w	8009644 <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	20000ce8 	.word	0x20000ce8

080090ac <__sfp_lock_release>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__sfp_lock_release+0x8>)
 80090ae:	f000 baca 	b.w	8009646 <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	20000ce8 	.word	0x20000ce8

080090b8 <__sinit_lock_acquire>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__sinit_lock_acquire+0x8>)
 80090ba:	f000 bac3 	b.w	8009644 <__retarget_lock_acquire_recursive>
 80090be:	bf00      	nop
 80090c0:	20000ce3 	.word	0x20000ce3

080090c4 <__sinit_lock_release>:
 80090c4:	4801      	ldr	r0, [pc, #4]	; (80090cc <__sinit_lock_release+0x8>)
 80090c6:	f000 babe 	b.w	8009646 <__retarget_lock_release_recursive>
 80090ca:	bf00      	nop
 80090cc:	20000ce3 	.word	0x20000ce3

080090d0 <__sinit>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	4604      	mov	r4, r0
 80090d4:	f7ff fff0 	bl	80090b8 <__sinit_lock_acquire>
 80090d8:	69a3      	ldr	r3, [r4, #24]
 80090da:	b11b      	cbz	r3, 80090e4 <__sinit+0x14>
 80090dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e0:	f7ff bff0 	b.w	80090c4 <__sinit_lock_release>
 80090e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090e8:	6523      	str	r3, [r4, #80]	; 0x50
 80090ea:	4b13      	ldr	r3, [pc, #76]	; (8009138 <__sinit+0x68>)
 80090ec:	4a13      	ldr	r2, [pc, #76]	; (800913c <__sinit+0x6c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80090f2:	42a3      	cmp	r3, r4
 80090f4:	bf04      	itt	eq
 80090f6:	2301      	moveq	r3, #1
 80090f8:	61a3      	streq	r3, [r4, #24]
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 f820 	bl	8009140 <__sfp>
 8009100:	6060      	str	r0, [r4, #4]
 8009102:	4620      	mov	r0, r4
 8009104:	f000 f81c 	bl	8009140 <__sfp>
 8009108:	60a0      	str	r0, [r4, #8]
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f818 	bl	8009140 <__sfp>
 8009110:	2200      	movs	r2, #0
 8009112:	60e0      	str	r0, [r4, #12]
 8009114:	2104      	movs	r1, #4
 8009116:	6860      	ldr	r0, [r4, #4]
 8009118:	f7ff ff82 	bl	8009020 <std>
 800911c:	68a0      	ldr	r0, [r4, #8]
 800911e:	2201      	movs	r2, #1
 8009120:	2109      	movs	r1, #9
 8009122:	f7ff ff7d 	bl	8009020 <std>
 8009126:	68e0      	ldr	r0, [r4, #12]
 8009128:	2202      	movs	r2, #2
 800912a:	2112      	movs	r1, #18
 800912c:	f7ff ff78 	bl	8009020 <std>
 8009130:	2301      	movs	r3, #1
 8009132:	61a3      	str	r3, [r4, #24]
 8009134:	e7d2      	b.n	80090dc <__sinit+0xc>
 8009136:	bf00      	nop
 8009138:	0800a5d8 	.word	0x0800a5d8
 800913c:	08009069 	.word	0x08009069

08009140 <__sfp>:
 8009140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009142:	4607      	mov	r7, r0
 8009144:	f7ff ffac 	bl	80090a0 <__sfp_lock_acquire>
 8009148:	4b1e      	ldr	r3, [pc, #120]	; (80091c4 <__sfp+0x84>)
 800914a:	681e      	ldr	r6, [r3, #0]
 800914c:	69b3      	ldr	r3, [r6, #24]
 800914e:	b913      	cbnz	r3, 8009156 <__sfp+0x16>
 8009150:	4630      	mov	r0, r6
 8009152:	f7ff ffbd 	bl	80090d0 <__sinit>
 8009156:	3648      	adds	r6, #72	; 0x48
 8009158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800915c:	3b01      	subs	r3, #1
 800915e:	d503      	bpl.n	8009168 <__sfp+0x28>
 8009160:	6833      	ldr	r3, [r6, #0]
 8009162:	b30b      	cbz	r3, 80091a8 <__sfp+0x68>
 8009164:	6836      	ldr	r6, [r6, #0]
 8009166:	e7f7      	b.n	8009158 <__sfp+0x18>
 8009168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800916c:	b9d5      	cbnz	r5, 80091a4 <__sfp+0x64>
 800916e:	4b16      	ldr	r3, [pc, #88]	; (80091c8 <__sfp+0x88>)
 8009170:	60e3      	str	r3, [r4, #12]
 8009172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009176:	6665      	str	r5, [r4, #100]	; 0x64
 8009178:	f000 fa62 	bl	8009640 <__retarget_lock_init_recursive>
 800917c:	f7ff ff96 	bl	80090ac <__sfp_lock_release>
 8009180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009188:	6025      	str	r5, [r4, #0]
 800918a:	61a5      	str	r5, [r4, #24]
 800918c:	2208      	movs	r2, #8
 800918e:	4629      	mov	r1, r5
 8009190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009194:	f000 fae8 	bl	8009768 <memset>
 8009198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800919c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091a0:	4620      	mov	r0, r4
 80091a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a4:	3468      	adds	r4, #104	; 0x68
 80091a6:	e7d9      	b.n	800915c <__sfp+0x1c>
 80091a8:	2104      	movs	r1, #4
 80091aa:	4638      	mov	r0, r7
 80091ac:	f7ff ff62 	bl	8009074 <__sfmoreglue>
 80091b0:	4604      	mov	r4, r0
 80091b2:	6030      	str	r0, [r6, #0]
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d1d5      	bne.n	8009164 <__sfp+0x24>
 80091b8:	f7ff ff78 	bl	80090ac <__sfp_lock_release>
 80091bc:	230c      	movs	r3, #12
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	e7ee      	b.n	80091a0 <__sfp+0x60>
 80091c2:	bf00      	nop
 80091c4:	0800a5d8 	.word	0x0800a5d8
 80091c8:	ffff0001 	.word	0xffff0001

080091cc <_fopen_r>:
 80091cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ce:	460f      	mov	r7, r1
 80091d0:	4611      	mov	r1, r2
 80091d2:	aa01      	add	r2, sp, #4
 80091d4:	4605      	mov	r5, r0
 80091d6:	f000 fde3 	bl	8009da0 <__sflags>
 80091da:	4606      	mov	r6, r0
 80091dc:	b918      	cbnz	r0, 80091e6 <_fopen_r+0x1a>
 80091de:	2400      	movs	r4, #0
 80091e0:	4620      	mov	r0, r4
 80091e2:	b003      	add	sp, #12
 80091e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e6:	4628      	mov	r0, r5
 80091e8:	f7ff ffaa 	bl	8009140 <__sfp>
 80091ec:	4604      	mov	r4, r0
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d0f5      	beq.n	80091de <_fopen_r+0x12>
 80091f2:	4639      	mov	r1, r7
 80091f4:	9a01      	ldr	r2, [sp, #4]
 80091f6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80091fa:	4628      	mov	r0, r5
 80091fc:	f000 fb66 	bl	80098cc <_open_r>
 8009200:	1e07      	subs	r7, r0, #0
 8009202:	da09      	bge.n	8009218 <_fopen_r+0x4c>
 8009204:	2500      	movs	r5, #0
 8009206:	f7ff ff4b 	bl	80090a0 <__sfp_lock_acquire>
 800920a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800920c:	81a5      	strh	r5, [r4, #12]
 800920e:	f000 fa18 	bl	8009642 <__retarget_lock_close_recursive>
 8009212:	f7ff ff4b 	bl	80090ac <__sfp_lock_release>
 8009216:	e7e2      	b.n	80091de <_fopen_r+0x12>
 8009218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800921a:	07db      	lsls	r3, r3, #31
 800921c:	d405      	bmi.n	800922a <_fopen_r+0x5e>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	0598      	lsls	r0, r3, #22
 8009222:	d402      	bmi.n	800922a <_fopen_r+0x5e>
 8009224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009226:	f000 fa0d 	bl	8009644 <__retarget_lock_acquire_recursive>
 800922a:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <_fopen_r+0x98>)
 800922c:	6263      	str	r3, [r4, #36]	; 0x24
 800922e:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <_fopen_r+0x9c>)
 8009230:	62a3      	str	r3, [r4, #40]	; 0x28
 8009232:	4b0e      	ldr	r3, [pc, #56]	; (800926c <_fopen_r+0xa0>)
 8009234:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009236:	05f1      	lsls	r1, r6, #23
 8009238:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <_fopen_r+0xa4>)
 800923a:	81e7      	strh	r7, [r4, #14]
 800923c:	81a6      	strh	r6, [r4, #12]
 800923e:	6224      	str	r4, [r4, #32]
 8009240:	6323      	str	r3, [r4, #48]	; 0x30
 8009242:	d505      	bpl.n	8009250 <_fopen_r+0x84>
 8009244:	2302      	movs	r3, #2
 8009246:	2200      	movs	r2, #0
 8009248:	4621      	mov	r1, r4
 800924a:	4628      	mov	r0, r5
 800924c:	f000 f888 	bl	8009360 <_fseek_r>
 8009250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009252:	07da      	lsls	r2, r3, #31
 8009254:	d4c4      	bmi.n	80091e0 <_fopen_r+0x14>
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	059b      	lsls	r3, r3, #22
 800925a:	d4c1      	bmi.n	80091e0 <_fopen_r+0x14>
 800925c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800925e:	f000 f9f2 	bl	8009646 <__retarget_lock_release_recursive>
 8009262:	e7bd      	b.n	80091e0 <_fopen_r+0x14>
 8009264:	08009b55 	.word	0x08009b55
 8009268:	08009b77 	.word	0x08009b77
 800926c:	08009baf 	.word	0x08009baf
 8009270:	08009bd3 	.word	0x08009bd3

08009274 <fopen>:
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <fopen+0xc>)
 8009276:	460a      	mov	r2, r1
 8009278:	4601      	mov	r1, r0
 800927a:	6818      	ldr	r0, [r3, #0]
 800927c:	f7ff bfa6 	b.w	80091cc <_fopen_r>
 8009280:	2000002c 	.word	0x2000002c

08009284 <_fputs_r>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	460e      	mov	r6, r1
 8009288:	4614      	mov	r4, r2
 800928a:	4605      	mov	r5, r0
 800928c:	b118      	cbz	r0, 8009296 <_fputs_r+0x12>
 800928e:	6983      	ldr	r3, [r0, #24]
 8009290:	b90b      	cbnz	r3, 8009296 <_fputs_r+0x12>
 8009292:	f7ff ff1d 	bl	80090d0 <__sinit>
 8009296:	4b2b      	ldr	r3, [pc, #172]	; (8009344 <_fputs_r+0xc0>)
 8009298:	429c      	cmp	r4, r3
 800929a:	d11e      	bne.n	80092da <_fputs_r+0x56>
 800929c:	686c      	ldr	r4, [r5, #4]
 800929e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092a0:	07da      	lsls	r2, r3, #31
 80092a2:	d405      	bmi.n	80092b0 <_fputs_r+0x2c>
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	059b      	lsls	r3, r3, #22
 80092a8:	d402      	bmi.n	80092b0 <_fputs_r+0x2c>
 80092aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ac:	f000 f9ca 	bl	8009644 <__retarget_lock_acquire_recursive>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	0718      	lsls	r0, r3, #28
 80092b4:	d51b      	bpl.n	80092ee <_fputs_r+0x6a>
 80092b6:	6923      	ldr	r3, [r4, #16]
 80092b8:	b1cb      	cbz	r3, 80092ee <_fputs_r+0x6a>
 80092ba:	3e01      	subs	r6, #1
 80092bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092c0:	bb39      	cbnz	r1, 8009312 <_fputs_r+0x8e>
 80092c2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80092c4:	f015 0501 	ands.w	r5, r5, #1
 80092c8:	d139      	bne.n	800933e <_fputs_r+0xba>
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	0599      	lsls	r1, r3, #22
 80092ce:	d402      	bmi.n	80092d6 <_fputs_r+0x52>
 80092d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092d2:	f000 f9b8 	bl	8009646 <__retarget_lock_release_recursive>
 80092d6:	4628      	mov	r0, r5
 80092d8:	bd70      	pop	{r4, r5, r6, pc}
 80092da:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <_fputs_r+0xc4>)
 80092dc:	429c      	cmp	r4, r3
 80092de:	d101      	bne.n	80092e4 <_fputs_r+0x60>
 80092e0:	68ac      	ldr	r4, [r5, #8]
 80092e2:	e7dc      	b.n	800929e <_fputs_r+0x1a>
 80092e4:	4b19      	ldr	r3, [pc, #100]	; (800934c <_fputs_r+0xc8>)
 80092e6:	429c      	cmp	r4, r3
 80092e8:	bf08      	it	eq
 80092ea:	68ec      	ldreq	r4, [r5, #12]
 80092ec:	e7d7      	b.n	800929e <_fputs_r+0x1a>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4628      	mov	r0, r5
 80092f2:	f000 fcd7 	bl	8009ca4 <__swsetup_r>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d0df      	beq.n	80092ba <_fputs_r+0x36>
 80092fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092fc:	07da      	lsls	r2, r3, #31
 80092fe:	d405      	bmi.n	800930c <_fputs_r+0x88>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	059b      	lsls	r3, r3, #22
 8009304:	d402      	bmi.n	800930c <_fputs_r+0x88>
 8009306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009308:	f000 f99d 	bl	8009646 <__retarget_lock_release_recursive>
 800930c:	f04f 35ff 	mov.w	r5, #4294967295
 8009310:	e7e1      	b.n	80092d6 <_fputs_r+0x52>
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	3b01      	subs	r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	60a3      	str	r3, [r4, #8]
 800931a:	da04      	bge.n	8009326 <_fputs_r+0xa2>
 800931c:	69a2      	ldr	r2, [r4, #24]
 800931e:	4293      	cmp	r3, r2
 8009320:	db06      	blt.n	8009330 <_fputs_r+0xac>
 8009322:	290a      	cmp	r1, #10
 8009324:	d004      	beq.n	8009330 <_fputs_r+0xac>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	6022      	str	r2, [r4, #0]
 800932c:	7019      	strb	r1, [r3, #0]
 800932e:	e7c5      	b.n	80092bc <_fputs_r+0x38>
 8009330:	4622      	mov	r2, r4
 8009332:	4628      	mov	r0, r5
 8009334:	f000 fc52 	bl	8009bdc <__swbuf_r>
 8009338:	3001      	adds	r0, #1
 800933a:	d1bf      	bne.n	80092bc <_fputs_r+0x38>
 800933c:	e7dd      	b.n	80092fa <_fputs_r+0x76>
 800933e:	460d      	mov	r5, r1
 8009340:	e7c9      	b.n	80092d6 <_fputs_r+0x52>
 8009342:	bf00      	nop
 8009344:	0800a598 	.word	0x0800a598
 8009348:	0800a5b8 	.word	0x0800a5b8
 800934c:	0800a578 	.word	0x0800a578

08009350 <fputs>:
 8009350:	4b02      	ldr	r3, [pc, #8]	; (800935c <fputs+0xc>)
 8009352:	460a      	mov	r2, r1
 8009354:	4601      	mov	r1, r0
 8009356:	6818      	ldr	r0, [r3, #0]
 8009358:	f7ff bf94 	b.w	8009284 <_fputs_r>
 800935c:	2000002c 	.word	0x2000002c

08009360 <_fseek_r>:
 8009360:	f000 b800 	b.w	8009364 <_fseeko_r>

08009364 <_fseeko_r>:
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	460c      	mov	r4, r1
 800936a:	4617      	mov	r7, r2
 800936c:	461e      	mov	r6, r3
 800936e:	4605      	mov	r5, r0
 8009370:	b118      	cbz	r0, 800937a <_fseeko_r+0x16>
 8009372:	6983      	ldr	r3, [r0, #24]
 8009374:	b90b      	cbnz	r3, 800937a <_fseeko_r+0x16>
 8009376:	f7ff feab 	bl	80090d0 <__sinit>
 800937a:	4b44      	ldr	r3, [pc, #272]	; (800948c <_fseeko_r+0x128>)
 800937c:	429c      	cmp	r4, r3
 800937e:	d122      	bne.n	80093c6 <_fseeko_r+0x62>
 8009380:	686c      	ldr	r4, [r5, #4]
 8009382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009384:	07d9      	lsls	r1, r3, #31
 8009386:	d405      	bmi.n	8009394 <_fseeko_r+0x30>
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	059a      	lsls	r2, r3, #22
 800938c:	d402      	bmi.n	8009394 <_fseeko_r+0x30>
 800938e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009390:	f000 f958 	bl	8009644 <__retarget_lock_acquire_recursive>
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800939a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800939e:	d103      	bne.n	80093a8 <_fseeko_r+0x44>
 80093a0:	4621      	mov	r1, r4
 80093a2:	4628      	mov	r0, r5
 80093a4:	f7ff fd6a 	bl	8008e7c <_fflush_r>
 80093a8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80093ac:	f1b8 0f00 	cmp.w	r8, #0
 80093b0:	d113      	bne.n	80093da <_fseeko_r+0x76>
 80093b2:	231d      	movs	r3, #29
 80093b4:	602b      	str	r3, [r5, #0]
 80093b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093b8:	07d9      	lsls	r1, r3, #31
 80093ba:	d55d      	bpl.n	8009478 <_fseeko_r+0x114>
 80093bc:	f04f 36ff 	mov.w	r6, #4294967295
 80093c0:	4630      	mov	r0, r6
 80093c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c6:	4b32      	ldr	r3, [pc, #200]	; (8009490 <_fseeko_r+0x12c>)
 80093c8:	429c      	cmp	r4, r3
 80093ca:	d101      	bne.n	80093d0 <_fseeko_r+0x6c>
 80093cc:	68ac      	ldr	r4, [r5, #8]
 80093ce:	e7d8      	b.n	8009382 <_fseeko_r+0x1e>
 80093d0:	4b30      	ldr	r3, [pc, #192]	; (8009494 <_fseeko_r+0x130>)
 80093d2:	429c      	cmp	r4, r3
 80093d4:	bf08      	it	eq
 80093d6:	68ec      	ldreq	r4, [r5, #12]
 80093d8:	e7d3      	b.n	8009382 <_fseeko_r+0x1e>
 80093da:	2e01      	cmp	r6, #1
 80093dc:	d036      	beq.n	800944c <_fseeko_r+0xe8>
 80093de:	f036 0302 	bics.w	r3, r6, #2
 80093e2:	d147      	bne.n	8009474 <_fseeko_r+0x110>
 80093e4:	6923      	ldr	r3, [r4, #16]
 80093e6:	b91b      	cbnz	r3, 80093f0 <_fseeko_r+0x8c>
 80093e8:	4621      	mov	r1, r4
 80093ea:	4628      	mov	r0, r5
 80093ec:	f000 f950 	bl	8009690 <__smakebuf_r>
 80093f0:	4621      	mov	r1, r4
 80093f2:	4628      	mov	r0, r5
 80093f4:	f7ff fd42 	bl	8008e7c <_fflush_r>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d1dc      	bne.n	80093b6 <_fseeko_r+0x52>
 80093fc:	6a21      	ldr	r1, [r4, #32]
 80093fe:	4633      	mov	r3, r6
 8009400:	463a      	mov	r2, r7
 8009402:	4628      	mov	r0, r5
 8009404:	47c0      	blx	r8
 8009406:	3001      	adds	r0, #1
 8009408:	d0d5      	beq.n	80093b6 <_fseeko_r+0x52>
 800940a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800940c:	b141      	cbz	r1, 8009420 <_fseeko_r+0xbc>
 800940e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009412:	4299      	cmp	r1, r3
 8009414:	d002      	beq.n	800941c <_fseeko_r+0xb8>
 8009416:	4628      	mov	r0, r5
 8009418:	f000 f9ae 	bl	8009778 <_free_r>
 800941c:	2300      	movs	r3, #0
 800941e:	6363      	str	r3, [r4, #52]	; 0x34
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	2500      	movs	r5, #0
 8009428:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800942c:	6065      	str	r5, [r4, #4]
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	2208      	movs	r2, #8
 8009432:	4629      	mov	r1, r5
 8009434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009438:	f000 f996 	bl	8009768 <memset>
 800943c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800943e:	f016 0601 	ands.w	r6, r6, #1
 8009442:	d120      	bne.n	8009486 <_fseeko_r+0x122>
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	059b      	lsls	r3, r3, #22
 8009448:	d4ba      	bmi.n	80093c0 <_fseeko_r+0x5c>
 800944a:	e00c      	b.n	8009466 <_fseeko_r+0x102>
 800944c:	4621      	mov	r1, r4
 800944e:	4628      	mov	r0, r5
 8009450:	f000 f822 	bl	8009498 <_ftello_r>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	4606      	mov	r6, r0
 8009458:	d109      	bne.n	800946e <_fseeko_r+0x10a>
 800945a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800945c:	07dd      	lsls	r5, r3, #31
 800945e:	d4ad      	bmi.n	80093bc <_fseeko_r+0x58>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	0598      	lsls	r0, r3, #22
 8009464:	d4aa      	bmi.n	80093bc <_fseeko_r+0x58>
 8009466:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009468:	f000 f8ed 	bl	8009646 <__retarget_lock_release_recursive>
 800946c:	e7a8      	b.n	80093c0 <_fseeko_r+0x5c>
 800946e:	4407      	add	r7, r0
 8009470:	2600      	movs	r6, #0
 8009472:	e7b7      	b.n	80093e4 <_fseeko_r+0x80>
 8009474:	2316      	movs	r3, #22
 8009476:	e79d      	b.n	80093b4 <_fseeko_r+0x50>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	059a      	lsls	r2, r3, #22
 800947c:	d49e      	bmi.n	80093bc <_fseeko_r+0x58>
 800947e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009480:	f000 f8e1 	bl	8009646 <__retarget_lock_release_recursive>
 8009484:	e79a      	b.n	80093bc <_fseeko_r+0x58>
 8009486:	462e      	mov	r6, r5
 8009488:	e79a      	b.n	80093c0 <_fseeko_r+0x5c>
 800948a:	bf00      	nop
 800948c:	0800a598 	.word	0x0800a598
 8009490:	0800a5b8 	.word	0x0800a5b8
 8009494:	0800a578 	.word	0x0800a578

08009498 <_ftello_r>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	460c      	mov	r4, r1
 800949c:	4605      	mov	r5, r0
 800949e:	b118      	cbz	r0, 80094a8 <_ftello_r+0x10>
 80094a0:	6983      	ldr	r3, [r0, #24]
 80094a2:	b90b      	cbnz	r3, 80094a8 <_ftello_r+0x10>
 80094a4:	f7ff fe14 	bl	80090d0 <__sinit>
 80094a8:	4b32      	ldr	r3, [pc, #200]	; (8009574 <_ftello_r+0xdc>)
 80094aa:	429c      	cmp	r4, r3
 80094ac:	d114      	bne.n	80094d8 <_ftello_r+0x40>
 80094ae:	686c      	ldr	r4, [r5, #4]
 80094b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094b2:	07da      	lsls	r2, r3, #31
 80094b4:	d405      	bmi.n	80094c2 <_ftello_r+0x2a>
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	059b      	lsls	r3, r3, #22
 80094ba:	d402      	bmi.n	80094c2 <_ftello_r+0x2a>
 80094bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094be:	f000 f8c1 	bl	8009644 <__retarget_lock_acquire_recursive>
 80094c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094c4:	b9ce      	cbnz	r6, 80094fa <_ftello_r+0x62>
 80094c6:	231d      	movs	r3, #29
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094cc:	07de      	lsls	r6, r3, #31
 80094ce:	d50d      	bpl.n	80094ec <_ftello_r+0x54>
 80094d0:	f04f 35ff 	mov.w	r5, #4294967295
 80094d4:	4628      	mov	r0, r5
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	4b27      	ldr	r3, [pc, #156]	; (8009578 <_ftello_r+0xe0>)
 80094da:	429c      	cmp	r4, r3
 80094dc:	d101      	bne.n	80094e2 <_ftello_r+0x4a>
 80094de:	68ac      	ldr	r4, [r5, #8]
 80094e0:	e7e6      	b.n	80094b0 <_ftello_r+0x18>
 80094e2:	4b26      	ldr	r3, [pc, #152]	; (800957c <_ftello_r+0xe4>)
 80094e4:	429c      	cmp	r4, r3
 80094e6:	bf08      	it	eq
 80094e8:	68ec      	ldreq	r4, [r5, #12]
 80094ea:	e7e1      	b.n	80094b0 <_ftello_r+0x18>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	059d      	lsls	r5, r3, #22
 80094f0:	d4ee      	bmi.n	80094d0 <_ftello_r+0x38>
 80094f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094f4:	f000 f8a7 	bl	8009646 <__retarget_lock_release_recursive>
 80094f8:	e7ea      	b.n	80094d0 <_ftello_r+0x38>
 80094fa:	89a2      	ldrh	r2, [r4, #12]
 80094fc:	f002 030c 	and.w	r3, r2, #12
 8009500:	2b08      	cmp	r3, #8
 8009502:	d119      	bne.n	8009538 <_ftello_r+0xa0>
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	b1bb      	cbz	r3, 8009538 <_ftello_r+0xa0>
 8009508:	6921      	ldr	r1, [r4, #16]
 800950a:	1a5b      	subs	r3, r3, r1
 800950c:	2b00      	cmp	r3, #0
 800950e:	dd13      	ble.n	8009538 <_ftello_r+0xa0>
 8009510:	05d0      	lsls	r0, r2, #23
 8009512:	d511      	bpl.n	8009538 <_ftello_r+0xa0>
 8009514:	2302      	movs	r3, #2
 8009516:	2200      	movs	r2, #0
 8009518:	6a21      	ldr	r1, [r4, #32]
 800951a:	4628      	mov	r0, r5
 800951c:	47b0      	blx	r6
 800951e:	1c41      	adds	r1, r0, #1
 8009520:	4605      	mov	r5, r0
 8009522:	d10d      	bne.n	8009540 <_ftello_r+0xa8>
 8009524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009526:	07da      	lsls	r2, r3, #31
 8009528:	d4d2      	bmi.n	80094d0 <_ftello_r+0x38>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	059b      	lsls	r3, r3, #22
 800952e:	d4cf      	bmi.n	80094d0 <_ftello_r+0x38>
 8009530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009532:	f000 f888 	bl	8009646 <__retarget_lock_release_recursive>
 8009536:	e7cd      	b.n	80094d4 <_ftello_r+0x3c>
 8009538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800953c:	d00f      	beq.n	800955e <_ftello_r+0xc6>
 800953e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8009540:	89a2      	ldrh	r2, [r4, #12]
 8009542:	0756      	lsls	r6, r2, #29
 8009544:	d50d      	bpl.n	8009562 <_ftello_r+0xca>
 8009546:	6863      	ldr	r3, [r4, #4]
 8009548:	1aed      	subs	r5, r5, r3
 800954a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800954c:	b10b      	cbz	r3, 8009552 <_ftello_r+0xba>
 800954e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009550:	1aed      	subs	r5, r5, r3
 8009552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009554:	07d9      	lsls	r1, r3, #31
 8009556:	d4bd      	bmi.n	80094d4 <_ftello_r+0x3c>
 8009558:	0593      	lsls	r3, r2, #22
 800955a:	d4bb      	bmi.n	80094d4 <_ftello_r+0x3c>
 800955c:	e7e8      	b.n	8009530 <_ftello_r+0x98>
 800955e:	2301      	movs	r3, #1
 8009560:	e7da      	b.n	8009518 <_ftello_r+0x80>
 8009562:	0710      	lsls	r0, r2, #28
 8009564:	d5f5      	bpl.n	8009552 <_ftello_r+0xba>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0f2      	beq.n	8009552 <_ftello_r+0xba>
 800956c:	6921      	ldr	r1, [r4, #16]
 800956e:	1a5b      	subs	r3, r3, r1
 8009570:	441d      	add	r5, r3
 8009572:	e7ee      	b.n	8009552 <_ftello_r+0xba>
 8009574:	0800a598 	.word	0x0800a598
 8009578:	0800a5b8 	.word	0x0800a5b8
 800957c:	0800a578 	.word	0x0800a578

08009580 <_fwalk>:
 8009580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009584:	460f      	mov	r7, r1
 8009586:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800958a:	2600      	movs	r6, #0
 800958c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8009590:	f1b8 0801 	subs.w	r8, r8, #1
 8009594:	d505      	bpl.n	80095a2 <_fwalk+0x22>
 8009596:	6824      	ldr	r4, [r4, #0]
 8009598:	2c00      	cmp	r4, #0
 800959a:	d1f7      	bne.n	800958c <_fwalk+0xc>
 800959c:	4630      	mov	r0, r6
 800959e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a2:	89ab      	ldrh	r3, [r5, #12]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d906      	bls.n	80095b6 <_fwalk+0x36>
 80095a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095ac:	3301      	adds	r3, #1
 80095ae:	d002      	beq.n	80095b6 <_fwalk+0x36>
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	4306      	orrs	r6, r0
 80095b6:	3568      	adds	r5, #104	; 0x68
 80095b8:	e7ea      	b.n	8009590 <_fwalk+0x10>

080095ba <_fwalk_reent>:
 80095ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095be:	4606      	mov	r6, r0
 80095c0:	4688      	mov	r8, r1
 80095c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095c6:	2700      	movs	r7, #0
 80095c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095cc:	f1b9 0901 	subs.w	r9, r9, #1
 80095d0:	d505      	bpl.n	80095de <_fwalk_reent+0x24>
 80095d2:	6824      	ldr	r4, [r4, #0]
 80095d4:	2c00      	cmp	r4, #0
 80095d6:	d1f7      	bne.n	80095c8 <_fwalk_reent+0xe>
 80095d8:	4638      	mov	r0, r7
 80095da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095de:	89ab      	ldrh	r3, [r5, #12]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d907      	bls.n	80095f4 <_fwalk_reent+0x3a>
 80095e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095e8:	3301      	adds	r3, #1
 80095ea:	d003      	beq.n	80095f4 <_fwalk_reent+0x3a>
 80095ec:	4629      	mov	r1, r5
 80095ee:	4630      	mov	r0, r6
 80095f0:	47c0      	blx	r8
 80095f2:	4307      	orrs	r7, r0
 80095f4:	3568      	adds	r5, #104	; 0x68
 80095f6:	e7e9      	b.n	80095cc <_fwalk_reent+0x12>

080095f8 <__libc_init_array>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4d0d      	ldr	r5, [pc, #52]	; (8009630 <__libc_init_array+0x38>)
 80095fc:	4c0d      	ldr	r4, [pc, #52]	; (8009634 <__libc_init_array+0x3c>)
 80095fe:	1b64      	subs	r4, r4, r5
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	2600      	movs	r6, #0
 8009604:	42a6      	cmp	r6, r4
 8009606:	d109      	bne.n	800961c <__libc_init_array+0x24>
 8009608:	4d0b      	ldr	r5, [pc, #44]	; (8009638 <__libc_init_array+0x40>)
 800960a:	4c0c      	ldr	r4, [pc, #48]	; (800963c <__libc_init_array+0x44>)
 800960c:	f000 ff3e 	bl	800a48c <_init>
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	2600      	movs	r6, #0
 8009616:	42a6      	cmp	r6, r4
 8009618:	d105      	bne.n	8009626 <__libc_init_array+0x2e>
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009620:	4798      	blx	r3
 8009622:	3601      	adds	r6, #1
 8009624:	e7ee      	b.n	8009604 <__libc_init_array+0xc>
 8009626:	f855 3b04 	ldr.w	r3, [r5], #4
 800962a:	4798      	blx	r3
 800962c:	3601      	adds	r6, #1
 800962e:	e7f2      	b.n	8009616 <__libc_init_array+0x1e>
 8009630:	0800a618 	.word	0x0800a618
 8009634:	0800a618 	.word	0x0800a618
 8009638:	0800a618 	.word	0x0800a618
 800963c:	0800a61c 	.word	0x0800a61c

08009640 <__retarget_lock_init_recursive>:
 8009640:	4770      	bx	lr

08009642 <__retarget_lock_close_recursive>:
 8009642:	4770      	bx	lr

08009644 <__retarget_lock_acquire_recursive>:
 8009644:	4770      	bx	lr

08009646 <__retarget_lock_release_recursive>:
 8009646:	4770      	bx	lr

08009648 <__swhatbuf_r>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	460e      	mov	r6, r1
 800964c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009650:	2900      	cmp	r1, #0
 8009652:	b096      	sub	sp, #88	; 0x58
 8009654:	4614      	mov	r4, r2
 8009656:	461d      	mov	r5, r3
 8009658:	da07      	bge.n	800966a <__swhatbuf_r+0x22>
 800965a:	2300      	movs	r3, #0
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	89b3      	ldrh	r3, [r6, #12]
 8009660:	061a      	lsls	r2, r3, #24
 8009662:	d410      	bmi.n	8009686 <__swhatbuf_r+0x3e>
 8009664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009668:	e00e      	b.n	8009688 <__swhatbuf_r+0x40>
 800966a:	466a      	mov	r2, sp
 800966c:	f000 fbce 	bl	8009e0c <_fstat_r>
 8009670:	2800      	cmp	r0, #0
 8009672:	dbf2      	blt.n	800965a <__swhatbuf_r+0x12>
 8009674:	9a01      	ldr	r2, [sp, #4]
 8009676:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800967a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800967e:	425a      	negs	r2, r3
 8009680:	415a      	adcs	r2, r3
 8009682:	602a      	str	r2, [r5, #0]
 8009684:	e7ee      	b.n	8009664 <__swhatbuf_r+0x1c>
 8009686:	2340      	movs	r3, #64	; 0x40
 8009688:	2000      	movs	r0, #0
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	b016      	add	sp, #88	; 0x58
 800968e:	bd70      	pop	{r4, r5, r6, pc}

08009690 <__smakebuf_r>:
 8009690:	898b      	ldrh	r3, [r1, #12]
 8009692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009694:	079d      	lsls	r5, r3, #30
 8009696:	4606      	mov	r6, r0
 8009698:	460c      	mov	r4, r1
 800969a:	d507      	bpl.n	80096ac <__smakebuf_r+0x1c>
 800969c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	6123      	str	r3, [r4, #16]
 80096a4:	2301      	movs	r3, #1
 80096a6:	6163      	str	r3, [r4, #20]
 80096a8:	b002      	add	sp, #8
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
 80096ac:	ab01      	add	r3, sp, #4
 80096ae:	466a      	mov	r2, sp
 80096b0:	f7ff ffca 	bl	8009648 <__swhatbuf_r>
 80096b4:	9900      	ldr	r1, [sp, #0]
 80096b6:	4605      	mov	r5, r0
 80096b8:	4630      	mov	r0, r6
 80096ba:	f000 f8ad 	bl	8009818 <_malloc_r>
 80096be:	b948      	cbnz	r0, 80096d4 <__smakebuf_r+0x44>
 80096c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c4:	059a      	lsls	r2, r3, #22
 80096c6:	d4ef      	bmi.n	80096a8 <__smakebuf_r+0x18>
 80096c8:	f023 0303 	bic.w	r3, r3, #3
 80096cc:	f043 0302 	orr.w	r3, r3, #2
 80096d0:	81a3      	strh	r3, [r4, #12]
 80096d2:	e7e3      	b.n	800969c <__smakebuf_r+0xc>
 80096d4:	4b0d      	ldr	r3, [pc, #52]	; (800970c <__smakebuf_r+0x7c>)
 80096d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	6020      	str	r0, [r4, #0]
 80096dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e0:	81a3      	strh	r3, [r4, #12]
 80096e2:	9b00      	ldr	r3, [sp, #0]
 80096e4:	6163      	str	r3, [r4, #20]
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	6120      	str	r0, [r4, #16]
 80096ea:	b15b      	cbz	r3, 8009704 <__smakebuf_r+0x74>
 80096ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096f0:	4630      	mov	r0, r6
 80096f2:	f000 fb9d 	bl	8009e30 <_isatty_r>
 80096f6:	b128      	cbz	r0, 8009704 <__smakebuf_r+0x74>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f023 0303 	bic.w	r3, r3, #3
 80096fe:	f043 0301 	orr.w	r3, r3, #1
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	89a0      	ldrh	r0, [r4, #12]
 8009706:	4305      	orrs	r5, r0
 8009708:	81a5      	strh	r5, [r4, #12]
 800970a:	e7cd      	b.n	80096a8 <__smakebuf_r+0x18>
 800970c:	08009069 	.word	0x08009069

08009710 <malloc>:
 8009710:	4b02      	ldr	r3, [pc, #8]	; (800971c <malloc+0xc>)
 8009712:	4601      	mov	r1, r0
 8009714:	6818      	ldr	r0, [r3, #0]
 8009716:	f000 b87f 	b.w	8009818 <_malloc_r>
 800971a:	bf00      	nop
 800971c:	2000002c 	.word	0x2000002c

08009720 <free>:
 8009720:	4b02      	ldr	r3, [pc, #8]	; (800972c <free+0xc>)
 8009722:	4601      	mov	r1, r0
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	f000 b827 	b.w	8009778 <_free_r>
 800972a:	bf00      	nop
 800972c:	2000002c 	.word	0x2000002c

08009730 <memcmp>:
 8009730:	b530      	push	{r4, r5, lr}
 8009732:	3901      	subs	r1, #1
 8009734:	2400      	movs	r4, #0
 8009736:	42a2      	cmp	r2, r4
 8009738:	d101      	bne.n	800973e <memcmp+0xe>
 800973a:	2000      	movs	r0, #0
 800973c:	e005      	b.n	800974a <memcmp+0x1a>
 800973e:	5d03      	ldrb	r3, [r0, r4]
 8009740:	3401      	adds	r4, #1
 8009742:	5d0d      	ldrb	r5, [r1, r4]
 8009744:	42ab      	cmp	r3, r5
 8009746:	d0f6      	beq.n	8009736 <memcmp+0x6>
 8009748:	1b58      	subs	r0, r3, r5
 800974a:	bd30      	pop	{r4, r5, pc}

0800974c <memcpy>:
 800974c:	440a      	add	r2, r1
 800974e:	4291      	cmp	r1, r2
 8009750:	f100 33ff 	add.w	r3, r0, #4294967295
 8009754:	d100      	bne.n	8009758 <memcpy+0xc>
 8009756:	4770      	bx	lr
 8009758:	b510      	push	{r4, lr}
 800975a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009762:	4291      	cmp	r1, r2
 8009764:	d1f9      	bne.n	800975a <memcpy+0xe>
 8009766:	bd10      	pop	{r4, pc}

08009768 <memset>:
 8009768:	4402      	add	r2, r0
 800976a:	4603      	mov	r3, r0
 800976c:	4293      	cmp	r3, r2
 800976e:	d100      	bne.n	8009772 <memset+0xa>
 8009770:	4770      	bx	lr
 8009772:	f803 1b01 	strb.w	r1, [r3], #1
 8009776:	e7f9      	b.n	800976c <memset+0x4>

08009778 <_free_r>:
 8009778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977a:	2900      	cmp	r1, #0
 800977c:	d048      	beq.n	8009810 <_free_r+0x98>
 800977e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009782:	9001      	str	r0, [sp, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f1a1 0404 	sub.w	r4, r1, #4
 800978a:	bfb8      	it	lt
 800978c:	18e4      	addlt	r4, r4, r3
 800978e:	f000 fb71 	bl	8009e74 <__malloc_lock>
 8009792:	4a20      	ldr	r2, [pc, #128]	; (8009814 <_free_r+0x9c>)
 8009794:	9801      	ldr	r0, [sp, #4]
 8009796:	6813      	ldr	r3, [r2, #0]
 8009798:	4615      	mov	r5, r2
 800979a:	b933      	cbnz	r3, 80097aa <_free_r+0x32>
 800979c:	6063      	str	r3, [r4, #4]
 800979e:	6014      	str	r4, [r2, #0]
 80097a0:	b003      	add	sp, #12
 80097a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097a6:	f000 bb6b 	b.w	8009e80 <__malloc_unlock>
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	d90b      	bls.n	80097c6 <_free_r+0x4e>
 80097ae:	6821      	ldr	r1, [r4, #0]
 80097b0:	1862      	adds	r2, r4, r1
 80097b2:	4293      	cmp	r3, r2
 80097b4:	bf04      	itt	eq
 80097b6:	681a      	ldreq	r2, [r3, #0]
 80097b8:	685b      	ldreq	r3, [r3, #4]
 80097ba:	6063      	str	r3, [r4, #4]
 80097bc:	bf04      	itt	eq
 80097be:	1852      	addeq	r2, r2, r1
 80097c0:	6022      	streq	r2, [r4, #0]
 80097c2:	602c      	str	r4, [r5, #0]
 80097c4:	e7ec      	b.n	80097a0 <_free_r+0x28>
 80097c6:	461a      	mov	r2, r3
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	b10b      	cbz	r3, 80097d0 <_free_r+0x58>
 80097cc:	42a3      	cmp	r3, r4
 80097ce:	d9fa      	bls.n	80097c6 <_free_r+0x4e>
 80097d0:	6811      	ldr	r1, [r2, #0]
 80097d2:	1855      	adds	r5, r2, r1
 80097d4:	42a5      	cmp	r5, r4
 80097d6:	d10b      	bne.n	80097f0 <_free_r+0x78>
 80097d8:	6824      	ldr	r4, [r4, #0]
 80097da:	4421      	add	r1, r4
 80097dc:	1854      	adds	r4, r2, r1
 80097de:	42a3      	cmp	r3, r4
 80097e0:	6011      	str	r1, [r2, #0]
 80097e2:	d1dd      	bne.n	80097a0 <_free_r+0x28>
 80097e4:	681c      	ldr	r4, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	6053      	str	r3, [r2, #4]
 80097ea:	4421      	add	r1, r4
 80097ec:	6011      	str	r1, [r2, #0]
 80097ee:	e7d7      	b.n	80097a0 <_free_r+0x28>
 80097f0:	d902      	bls.n	80097f8 <_free_r+0x80>
 80097f2:	230c      	movs	r3, #12
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	e7d3      	b.n	80097a0 <_free_r+0x28>
 80097f8:	6825      	ldr	r5, [r4, #0]
 80097fa:	1961      	adds	r1, r4, r5
 80097fc:	428b      	cmp	r3, r1
 80097fe:	bf04      	itt	eq
 8009800:	6819      	ldreq	r1, [r3, #0]
 8009802:	685b      	ldreq	r3, [r3, #4]
 8009804:	6063      	str	r3, [r4, #4]
 8009806:	bf04      	itt	eq
 8009808:	1949      	addeq	r1, r1, r5
 800980a:	6021      	streq	r1, [r4, #0]
 800980c:	6054      	str	r4, [r2, #4]
 800980e:	e7c7      	b.n	80097a0 <_free_r+0x28>
 8009810:	b003      	add	sp, #12
 8009812:	bd30      	pop	{r4, r5, pc}
 8009814:	200000b4 	.word	0x200000b4

08009818 <_malloc_r>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	1ccd      	adds	r5, r1, #3
 800981c:	f025 0503 	bic.w	r5, r5, #3
 8009820:	3508      	adds	r5, #8
 8009822:	2d0c      	cmp	r5, #12
 8009824:	bf38      	it	cc
 8009826:	250c      	movcc	r5, #12
 8009828:	2d00      	cmp	r5, #0
 800982a:	4606      	mov	r6, r0
 800982c:	db01      	blt.n	8009832 <_malloc_r+0x1a>
 800982e:	42a9      	cmp	r1, r5
 8009830:	d903      	bls.n	800983a <_malloc_r+0x22>
 8009832:	230c      	movs	r3, #12
 8009834:	6033      	str	r3, [r6, #0]
 8009836:	2000      	movs	r0, #0
 8009838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800983a:	f000 fb1b 	bl	8009e74 <__malloc_lock>
 800983e:	4921      	ldr	r1, [pc, #132]	; (80098c4 <_malloc_r+0xac>)
 8009840:	680a      	ldr	r2, [r1, #0]
 8009842:	4614      	mov	r4, r2
 8009844:	b99c      	cbnz	r4, 800986e <_malloc_r+0x56>
 8009846:	4f20      	ldr	r7, [pc, #128]	; (80098c8 <_malloc_r+0xb0>)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	b923      	cbnz	r3, 8009856 <_malloc_r+0x3e>
 800984c:	4621      	mov	r1, r4
 800984e:	4630      	mov	r0, r6
 8009850:	f000 f970 	bl	8009b34 <_sbrk_r>
 8009854:	6038      	str	r0, [r7, #0]
 8009856:	4629      	mov	r1, r5
 8009858:	4630      	mov	r0, r6
 800985a:	f000 f96b 	bl	8009b34 <_sbrk_r>
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	d123      	bne.n	80098aa <_malloc_r+0x92>
 8009862:	230c      	movs	r3, #12
 8009864:	6033      	str	r3, [r6, #0]
 8009866:	4630      	mov	r0, r6
 8009868:	f000 fb0a 	bl	8009e80 <__malloc_unlock>
 800986c:	e7e3      	b.n	8009836 <_malloc_r+0x1e>
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	1b5b      	subs	r3, r3, r5
 8009872:	d417      	bmi.n	80098a4 <_malloc_r+0x8c>
 8009874:	2b0b      	cmp	r3, #11
 8009876:	d903      	bls.n	8009880 <_malloc_r+0x68>
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	441c      	add	r4, r3
 800987c:	6025      	str	r5, [r4, #0]
 800987e:	e004      	b.n	800988a <_malloc_r+0x72>
 8009880:	6863      	ldr	r3, [r4, #4]
 8009882:	42a2      	cmp	r2, r4
 8009884:	bf0c      	ite	eq
 8009886:	600b      	streq	r3, [r1, #0]
 8009888:	6053      	strne	r3, [r2, #4]
 800988a:	4630      	mov	r0, r6
 800988c:	f000 faf8 	bl	8009e80 <__malloc_unlock>
 8009890:	f104 000b 	add.w	r0, r4, #11
 8009894:	1d23      	adds	r3, r4, #4
 8009896:	f020 0007 	bic.w	r0, r0, #7
 800989a:	1ac2      	subs	r2, r0, r3
 800989c:	d0cc      	beq.n	8009838 <_malloc_r+0x20>
 800989e:	1a1b      	subs	r3, r3, r0
 80098a0:	50a3      	str	r3, [r4, r2]
 80098a2:	e7c9      	b.n	8009838 <_malloc_r+0x20>
 80098a4:	4622      	mov	r2, r4
 80098a6:	6864      	ldr	r4, [r4, #4]
 80098a8:	e7cc      	b.n	8009844 <_malloc_r+0x2c>
 80098aa:	1cc4      	adds	r4, r0, #3
 80098ac:	f024 0403 	bic.w	r4, r4, #3
 80098b0:	42a0      	cmp	r0, r4
 80098b2:	d0e3      	beq.n	800987c <_malloc_r+0x64>
 80098b4:	1a21      	subs	r1, r4, r0
 80098b6:	4630      	mov	r0, r6
 80098b8:	f000 f93c 	bl	8009b34 <_sbrk_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	d1dd      	bne.n	800987c <_malloc_r+0x64>
 80098c0:	e7cf      	b.n	8009862 <_malloc_r+0x4a>
 80098c2:	bf00      	nop
 80098c4:	200000b4 	.word	0x200000b4
 80098c8:	200000b8 	.word	0x200000b8

080098cc <_open_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4d07      	ldr	r5, [pc, #28]	; (80098ec <_open_r+0x20>)
 80098d0:	4604      	mov	r4, r0
 80098d2:	4608      	mov	r0, r1
 80098d4:	4611      	mov	r1, r2
 80098d6:	2200      	movs	r2, #0
 80098d8:	602a      	str	r2, [r5, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	f7f7 fb51 	bl	8000f82 <_open>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d102      	bne.n	80098ea <_open_r+0x1e>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	b103      	cbz	r3, 80098ea <_open_r+0x1e>
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	20000cec 	.word	0x20000cec

080098f0 <iprintf>:
 80098f0:	b40f      	push	{r0, r1, r2, r3}
 80098f2:	4b0a      	ldr	r3, [pc, #40]	; (800991c <iprintf+0x2c>)
 80098f4:	b513      	push	{r0, r1, r4, lr}
 80098f6:	681c      	ldr	r4, [r3, #0]
 80098f8:	b124      	cbz	r4, 8009904 <iprintf+0x14>
 80098fa:	69a3      	ldr	r3, [r4, #24]
 80098fc:	b913      	cbnz	r3, 8009904 <iprintf+0x14>
 80098fe:	4620      	mov	r0, r4
 8009900:	f7ff fbe6 	bl	80090d0 <__sinit>
 8009904:	ab05      	add	r3, sp, #20
 8009906:	9a04      	ldr	r2, [sp, #16]
 8009908:	68a1      	ldr	r1, [r4, #8]
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	4620      	mov	r0, r4
 800990e:	f000 fae7 	bl	8009ee0 <_vfiprintf_r>
 8009912:	b002      	add	sp, #8
 8009914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009918:	b004      	add	sp, #16
 800991a:	4770      	bx	lr
 800991c:	2000002c 	.word	0x2000002c

08009920 <_puts_r>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	460e      	mov	r6, r1
 8009924:	4605      	mov	r5, r0
 8009926:	b118      	cbz	r0, 8009930 <_puts_r+0x10>
 8009928:	6983      	ldr	r3, [r0, #24]
 800992a:	b90b      	cbnz	r3, 8009930 <_puts_r+0x10>
 800992c:	f7ff fbd0 	bl	80090d0 <__sinit>
 8009930:	69ab      	ldr	r3, [r5, #24]
 8009932:	68ac      	ldr	r4, [r5, #8]
 8009934:	b913      	cbnz	r3, 800993c <_puts_r+0x1c>
 8009936:	4628      	mov	r0, r5
 8009938:	f7ff fbca 	bl	80090d0 <__sinit>
 800993c:	4b2c      	ldr	r3, [pc, #176]	; (80099f0 <_puts_r+0xd0>)
 800993e:	429c      	cmp	r4, r3
 8009940:	d120      	bne.n	8009984 <_puts_r+0x64>
 8009942:	686c      	ldr	r4, [r5, #4]
 8009944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009946:	07db      	lsls	r3, r3, #31
 8009948:	d405      	bmi.n	8009956 <_puts_r+0x36>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	0598      	lsls	r0, r3, #22
 800994e:	d402      	bmi.n	8009956 <_puts_r+0x36>
 8009950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009952:	f7ff fe77 	bl	8009644 <__retarget_lock_acquire_recursive>
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	0719      	lsls	r1, r3, #28
 800995a:	d51d      	bpl.n	8009998 <_puts_r+0x78>
 800995c:	6923      	ldr	r3, [r4, #16]
 800995e:	b1db      	cbz	r3, 8009998 <_puts_r+0x78>
 8009960:	3e01      	subs	r6, #1
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009968:	3b01      	subs	r3, #1
 800996a:	60a3      	str	r3, [r4, #8]
 800996c:	bb39      	cbnz	r1, 80099be <_puts_r+0x9e>
 800996e:	2b00      	cmp	r3, #0
 8009970:	da38      	bge.n	80099e4 <_puts_r+0xc4>
 8009972:	4622      	mov	r2, r4
 8009974:	210a      	movs	r1, #10
 8009976:	4628      	mov	r0, r5
 8009978:	f000 f930 	bl	8009bdc <__swbuf_r>
 800997c:	3001      	adds	r0, #1
 800997e:	d011      	beq.n	80099a4 <_puts_r+0x84>
 8009980:	250a      	movs	r5, #10
 8009982:	e011      	b.n	80099a8 <_puts_r+0x88>
 8009984:	4b1b      	ldr	r3, [pc, #108]	; (80099f4 <_puts_r+0xd4>)
 8009986:	429c      	cmp	r4, r3
 8009988:	d101      	bne.n	800998e <_puts_r+0x6e>
 800998a:	68ac      	ldr	r4, [r5, #8]
 800998c:	e7da      	b.n	8009944 <_puts_r+0x24>
 800998e:	4b1a      	ldr	r3, [pc, #104]	; (80099f8 <_puts_r+0xd8>)
 8009990:	429c      	cmp	r4, r3
 8009992:	bf08      	it	eq
 8009994:	68ec      	ldreq	r4, [r5, #12]
 8009996:	e7d5      	b.n	8009944 <_puts_r+0x24>
 8009998:	4621      	mov	r1, r4
 800999a:	4628      	mov	r0, r5
 800999c:	f000 f982 	bl	8009ca4 <__swsetup_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d0dd      	beq.n	8009960 <_puts_r+0x40>
 80099a4:	f04f 35ff 	mov.w	r5, #4294967295
 80099a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099aa:	07da      	lsls	r2, r3, #31
 80099ac:	d405      	bmi.n	80099ba <_puts_r+0x9a>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	059b      	lsls	r3, r3, #22
 80099b2:	d402      	bmi.n	80099ba <_puts_r+0x9a>
 80099b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099b6:	f7ff fe46 	bl	8009646 <__retarget_lock_release_recursive>
 80099ba:	4628      	mov	r0, r5
 80099bc:	bd70      	pop	{r4, r5, r6, pc}
 80099be:	2b00      	cmp	r3, #0
 80099c0:	da04      	bge.n	80099cc <_puts_r+0xac>
 80099c2:	69a2      	ldr	r2, [r4, #24]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	dc06      	bgt.n	80099d6 <_puts_r+0xb6>
 80099c8:	290a      	cmp	r1, #10
 80099ca:	d004      	beq.n	80099d6 <_puts_r+0xb6>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	6022      	str	r2, [r4, #0]
 80099d2:	7019      	strb	r1, [r3, #0]
 80099d4:	e7c5      	b.n	8009962 <_puts_r+0x42>
 80099d6:	4622      	mov	r2, r4
 80099d8:	4628      	mov	r0, r5
 80099da:	f000 f8ff 	bl	8009bdc <__swbuf_r>
 80099de:	3001      	adds	r0, #1
 80099e0:	d1bf      	bne.n	8009962 <_puts_r+0x42>
 80099e2:	e7df      	b.n	80099a4 <_puts_r+0x84>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	250a      	movs	r5, #10
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	6022      	str	r2, [r4, #0]
 80099ec:	701d      	strb	r5, [r3, #0]
 80099ee:	e7db      	b.n	80099a8 <_puts_r+0x88>
 80099f0:	0800a598 	.word	0x0800a598
 80099f4:	0800a5b8 	.word	0x0800a5b8
 80099f8:	0800a578 	.word	0x0800a578

080099fc <puts>:
 80099fc:	4b02      	ldr	r3, [pc, #8]	; (8009a08 <puts+0xc>)
 80099fe:	4601      	mov	r1, r0
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	f7ff bf8d 	b.w	8009920 <_puts_r>
 8009a06:	bf00      	nop
 8009a08:	2000002c 	.word	0x2000002c

08009a0c <lflush>:
 8009a0c:	8983      	ldrh	r3, [r0, #12]
 8009a0e:	f003 0309 	and.w	r3, r3, #9
 8009a12:	2b09      	cmp	r3, #9
 8009a14:	d101      	bne.n	8009a1a <lflush+0xe>
 8009a16:	f7ff ba6d 	b.w	8008ef4 <fflush>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	4770      	bx	lr
	...

08009a20 <__srefill_r>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	460c      	mov	r4, r1
 8009a24:	4605      	mov	r5, r0
 8009a26:	b118      	cbz	r0, 8009a30 <__srefill_r+0x10>
 8009a28:	6983      	ldr	r3, [r0, #24]
 8009a2a:	b90b      	cbnz	r3, 8009a30 <__srefill_r+0x10>
 8009a2c:	f7ff fb50 	bl	80090d0 <__sinit>
 8009a30:	4b3b      	ldr	r3, [pc, #236]	; (8009b20 <__srefill_r+0x100>)
 8009a32:	429c      	cmp	r4, r3
 8009a34:	d10a      	bne.n	8009a4c <__srefill_r+0x2c>
 8009a36:	686c      	ldr	r4, [r5, #4]
 8009a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	6063      	str	r3, [r4, #4]
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	069e      	lsls	r6, r3, #26
 8009a44:	d50c      	bpl.n	8009a60 <__srefill_r+0x40>
 8009a46:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4a:	e066      	b.n	8009b1a <__srefill_r+0xfa>
 8009a4c:	4b35      	ldr	r3, [pc, #212]	; (8009b24 <__srefill_r+0x104>)
 8009a4e:	429c      	cmp	r4, r3
 8009a50:	d101      	bne.n	8009a56 <__srefill_r+0x36>
 8009a52:	68ac      	ldr	r4, [r5, #8]
 8009a54:	e7f0      	b.n	8009a38 <__srefill_r+0x18>
 8009a56:	4b34      	ldr	r3, [pc, #208]	; (8009b28 <__srefill_r+0x108>)
 8009a58:	429c      	cmp	r4, r3
 8009a5a:	bf08      	it	eq
 8009a5c:	68ec      	ldreq	r4, [r5, #12]
 8009a5e:	e7eb      	b.n	8009a38 <__srefill_r+0x18>
 8009a60:	0758      	lsls	r0, r3, #29
 8009a62:	d448      	bmi.n	8009af6 <__srefill_r+0xd6>
 8009a64:	06d9      	lsls	r1, r3, #27
 8009a66:	d405      	bmi.n	8009a74 <__srefill_r+0x54>
 8009a68:	2309      	movs	r3, #9
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	e7e8      	b.n	8009a46 <__srefill_r+0x26>
 8009a74:	071a      	lsls	r2, r3, #28
 8009a76:	d50b      	bpl.n	8009a90 <__srefill_r+0x70>
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f7ff f9fe 	bl	8008e7c <_fflush_r>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d1e0      	bne.n	8009a46 <__srefill_r+0x26>
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	60a0      	str	r0, [r4, #8]
 8009a88:	f023 0308 	bic.w	r3, r3, #8
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	61a0      	str	r0, [r4, #24]
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	f043 0304 	orr.w	r3, r3, #4
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	b91b      	cbnz	r3, 8009aa4 <__srefill_r+0x84>
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f7ff fdf6 	bl	8009690 <__smakebuf_r>
 8009aa4:	89a6      	ldrh	r6, [r4, #12]
 8009aa6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009aaa:	07b3      	lsls	r3, r6, #30
 8009aac:	d00f      	beq.n	8009ace <__srefill_r+0xae>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	4b1e      	ldr	r3, [pc, #120]	; (8009b2c <__srefill_r+0x10c>)
 8009ab4:	491e      	ldr	r1, [pc, #120]	; (8009b30 <__srefill_r+0x110>)
 8009ab6:	6818      	ldr	r0, [r3, #0]
 8009ab8:	f006 0609 	and.w	r6, r6, #9
 8009abc:	f7ff fd60 	bl	8009580 <_fwalk>
 8009ac0:	2e09      	cmp	r6, #9
 8009ac2:	81a7      	strh	r7, [r4, #12]
 8009ac4:	d103      	bne.n	8009ace <__srefill_r+0xae>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f7ff f951 	bl	8008d70 <__sflush_r>
 8009ace:	6922      	ldr	r2, [r4, #16]
 8009ad0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ad2:	6963      	ldr	r3, [r4, #20]
 8009ad4:	6a21      	ldr	r1, [r4, #32]
 8009ad6:	6022      	str	r2, [r4, #0]
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b0      	blx	r6
 8009adc:	2800      	cmp	r0, #0
 8009ade:	6060      	str	r0, [r4, #4]
 8009ae0:	dc1c      	bgt.n	8009b1c <__srefill_r+0xfc>
 8009ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae6:	bf17      	itett	ne
 8009ae8:	2200      	movne	r2, #0
 8009aea:	f043 0320 	orreq.w	r3, r3, #32
 8009aee:	6062      	strne	r2, [r4, #4]
 8009af0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009af4:	e7bc      	b.n	8009a70 <__srefill_r+0x50>
 8009af6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009af8:	2900      	cmp	r1, #0
 8009afa:	d0cd      	beq.n	8009a98 <__srefill_r+0x78>
 8009afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b00:	4299      	cmp	r1, r3
 8009b02:	d002      	beq.n	8009b0a <__srefill_r+0xea>
 8009b04:	4628      	mov	r0, r5
 8009b06:	f7ff fe37 	bl	8009778 <_free_r>
 8009b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b0c:	6063      	str	r3, [r4, #4]
 8009b0e:	2000      	movs	r0, #0
 8009b10:	6360      	str	r0, [r4, #52]	; 0x34
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0c0      	beq.n	8009a98 <__srefill_r+0x78>
 8009b16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	e7fc      	b.n	8009b1a <__srefill_r+0xfa>
 8009b20:	0800a598 	.word	0x0800a598
 8009b24:	0800a5b8 	.word	0x0800a5b8
 8009b28:	0800a578 	.word	0x0800a578
 8009b2c:	0800a5d8 	.word	0x0800a5d8
 8009b30:	08009a0d 	.word	0x08009a0d

08009b34 <_sbrk_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d06      	ldr	r5, [pc, #24]	; (8009b50 <_sbrk_r+0x1c>)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	602b      	str	r3, [r5, #0]
 8009b40:	f7f7 fa2e 	bl	8000fa0 <_sbrk>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_sbrk_r+0x1a>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_sbrk_r+0x1a>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	20000cec 	.word	0x20000cec

08009b54 <__sread>:
 8009b54:	b510      	push	{r4, lr}
 8009b56:	460c      	mov	r4, r1
 8009b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5c:	f000 fc84 	bl	800a468 <_read_r>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	bfab      	itete	ge
 8009b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b66:	89a3      	ldrhlt	r3, [r4, #12]
 8009b68:	181b      	addge	r3, r3, r0
 8009b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b6e:	bfac      	ite	ge
 8009b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b72:	81a3      	strhlt	r3, [r4, #12]
 8009b74:	bd10      	pop	{r4, pc}

08009b76 <__swrite>:
 8009b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7a:	461f      	mov	r7, r3
 8009b7c:	898b      	ldrh	r3, [r1, #12]
 8009b7e:	05db      	lsls	r3, r3, #23
 8009b80:	4605      	mov	r5, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	4616      	mov	r6, r2
 8009b86:	d505      	bpl.n	8009b94 <__swrite+0x1e>
 8009b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f000 f95e 	bl	8009e50 <_lseek_r>
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b9e:	81a3      	strh	r3, [r4, #12]
 8009ba0:	4632      	mov	r2, r6
 8009ba2:	463b      	mov	r3, r7
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009baa:	f000 b869 	b.w	8009c80 <_write_r>

08009bae <__sseek>:
 8009bae:	b510      	push	{r4, lr}
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb6:	f000 f94b 	bl	8009e50 <_lseek_r>
 8009bba:	1c43      	adds	r3, r0, #1
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	bf15      	itete	ne
 8009bc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bca:	81a3      	strheq	r3, [r4, #12]
 8009bcc:	bf18      	it	ne
 8009bce:	81a3      	strhne	r3, [r4, #12]
 8009bd0:	bd10      	pop	{r4, pc}

08009bd2 <__sclose>:
 8009bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd6:	f000 b8d3 	b.w	8009d80 <_close_r>
	...

08009bdc <__swbuf_r>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	460e      	mov	r6, r1
 8009be0:	4614      	mov	r4, r2
 8009be2:	4605      	mov	r5, r0
 8009be4:	b118      	cbz	r0, 8009bee <__swbuf_r+0x12>
 8009be6:	6983      	ldr	r3, [r0, #24]
 8009be8:	b90b      	cbnz	r3, 8009bee <__swbuf_r+0x12>
 8009bea:	f7ff fa71 	bl	80090d0 <__sinit>
 8009bee:	4b21      	ldr	r3, [pc, #132]	; (8009c74 <__swbuf_r+0x98>)
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	d12b      	bne.n	8009c4c <__swbuf_r+0x70>
 8009bf4:	686c      	ldr	r4, [r5, #4]
 8009bf6:	69a3      	ldr	r3, [r4, #24]
 8009bf8:	60a3      	str	r3, [r4, #8]
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	071a      	lsls	r2, r3, #28
 8009bfe:	d52f      	bpl.n	8009c60 <__swbuf_r+0x84>
 8009c00:	6923      	ldr	r3, [r4, #16]
 8009c02:	b36b      	cbz	r3, 8009c60 <__swbuf_r+0x84>
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	6820      	ldr	r0, [r4, #0]
 8009c08:	1ac0      	subs	r0, r0, r3
 8009c0a:	6963      	ldr	r3, [r4, #20]
 8009c0c:	b2f6      	uxtb	r6, r6
 8009c0e:	4283      	cmp	r3, r0
 8009c10:	4637      	mov	r7, r6
 8009c12:	dc04      	bgt.n	8009c1e <__swbuf_r+0x42>
 8009c14:	4621      	mov	r1, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	f7ff f930 	bl	8008e7c <_fflush_r>
 8009c1c:	bb30      	cbnz	r0, 8009c6c <__swbuf_r+0x90>
 8009c1e:	68a3      	ldr	r3, [r4, #8]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	60a3      	str	r3, [r4, #8]
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	6022      	str	r2, [r4, #0]
 8009c2a:	701e      	strb	r6, [r3, #0]
 8009c2c:	6963      	ldr	r3, [r4, #20]
 8009c2e:	3001      	adds	r0, #1
 8009c30:	4283      	cmp	r3, r0
 8009c32:	d004      	beq.n	8009c3e <__swbuf_r+0x62>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	07db      	lsls	r3, r3, #31
 8009c38:	d506      	bpl.n	8009c48 <__swbuf_r+0x6c>
 8009c3a:	2e0a      	cmp	r6, #10
 8009c3c:	d104      	bne.n	8009c48 <__swbuf_r+0x6c>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4628      	mov	r0, r5
 8009c42:	f7ff f91b 	bl	8008e7c <_fflush_r>
 8009c46:	b988      	cbnz	r0, 8009c6c <__swbuf_r+0x90>
 8009c48:	4638      	mov	r0, r7
 8009c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <__swbuf_r+0x9c>)
 8009c4e:	429c      	cmp	r4, r3
 8009c50:	d101      	bne.n	8009c56 <__swbuf_r+0x7a>
 8009c52:	68ac      	ldr	r4, [r5, #8]
 8009c54:	e7cf      	b.n	8009bf6 <__swbuf_r+0x1a>
 8009c56:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <__swbuf_r+0xa0>)
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	bf08      	it	eq
 8009c5c:	68ec      	ldreq	r4, [r5, #12]
 8009c5e:	e7ca      	b.n	8009bf6 <__swbuf_r+0x1a>
 8009c60:	4621      	mov	r1, r4
 8009c62:	4628      	mov	r0, r5
 8009c64:	f000 f81e 	bl	8009ca4 <__swsetup_r>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d0cb      	beq.n	8009c04 <__swbuf_r+0x28>
 8009c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8009c70:	e7ea      	b.n	8009c48 <__swbuf_r+0x6c>
 8009c72:	bf00      	nop
 8009c74:	0800a598 	.word	0x0800a598
 8009c78:	0800a5b8 	.word	0x0800a5b8
 8009c7c:	0800a578 	.word	0x0800a578

08009c80 <_write_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d07      	ldr	r5, [pc, #28]	; (8009ca0 <_write_r+0x20>)
 8009c84:	4604      	mov	r4, r0
 8009c86:	4608      	mov	r0, r1
 8009c88:	4611      	mov	r1, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	602a      	str	r2, [r5, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f7f7 f927 	bl	8000ee2 <_write>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_write_r+0x1e>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_write_r+0x1e>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20000cec 	.word	0x20000cec

08009ca4 <__swsetup_r>:
 8009ca4:	4b32      	ldr	r3, [pc, #200]	; (8009d70 <__swsetup_r+0xcc>)
 8009ca6:	b570      	push	{r4, r5, r6, lr}
 8009ca8:	681d      	ldr	r5, [r3, #0]
 8009caa:	4606      	mov	r6, r0
 8009cac:	460c      	mov	r4, r1
 8009cae:	b125      	cbz	r5, 8009cba <__swsetup_r+0x16>
 8009cb0:	69ab      	ldr	r3, [r5, #24]
 8009cb2:	b913      	cbnz	r3, 8009cba <__swsetup_r+0x16>
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f7ff fa0b 	bl	80090d0 <__sinit>
 8009cba:	4b2e      	ldr	r3, [pc, #184]	; (8009d74 <__swsetup_r+0xd0>)
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	d10f      	bne.n	8009ce0 <__swsetup_r+0x3c>
 8009cc0:	686c      	ldr	r4, [r5, #4]
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cc8:	0719      	lsls	r1, r3, #28
 8009cca:	d42c      	bmi.n	8009d26 <__swsetup_r+0x82>
 8009ccc:	06dd      	lsls	r5, r3, #27
 8009cce:	d411      	bmi.n	8009cf4 <__swsetup_r+0x50>
 8009cd0:	2309      	movs	r3, #9
 8009cd2:	6033      	str	r3, [r6, #0]
 8009cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295
 8009cde:	e03e      	b.n	8009d5e <__swsetup_r+0xba>
 8009ce0:	4b25      	ldr	r3, [pc, #148]	; (8009d78 <__swsetup_r+0xd4>)
 8009ce2:	429c      	cmp	r4, r3
 8009ce4:	d101      	bne.n	8009cea <__swsetup_r+0x46>
 8009ce6:	68ac      	ldr	r4, [r5, #8]
 8009ce8:	e7eb      	b.n	8009cc2 <__swsetup_r+0x1e>
 8009cea:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <__swsetup_r+0xd8>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	bf08      	it	eq
 8009cf0:	68ec      	ldreq	r4, [r5, #12]
 8009cf2:	e7e6      	b.n	8009cc2 <__swsetup_r+0x1e>
 8009cf4:	0758      	lsls	r0, r3, #29
 8009cf6:	d512      	bpl.n	8009d1e <__swsetup_r+0x7a>
 8009cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cfa:	b141      	cbz	r1, 8009d0e <__swsetup_r+0x6a>
 8009cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d00:	4299      	cmp	r1, r3
 8009d02:	d002      	beq.n	8009d0a <__swsetup_r+0x66>
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7ff fd37 	bl	8009778 <_free_r>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d14:	81a3      	strh	r3, [r4, #12]
 8009d16:	2300      	movs	r3, #0
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f043 0308 	orr.w	r3, r3, #8
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	b94b      	cbnz	r3, 8009d3e <__swsetup_r+0x9a>
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d34:	d003      	beq.n	8009d3e <__swsetup_r+0x9a>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff fca9 	bl	8009690 <__smakebuf_r>
 8009d3e:	89a0      	ldrh	r0, [r4, #12]
 8009d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d44:	f010 0301 	ands.w	r3, r0, #1
 8009d48:	d00a      	beq.n	8009d60 <__swsetup_r+0xbc>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	6963      	ldr	r3, [r4, #20]
 8009d50:	425b      	negs	r3, r3
 8009d52:	61a3      	str	r3, [r4, #24]
 8009d54:	6923      	ldr	r3, [r4, #16]
 8009d56:	b943      	cbnz	r3, 8009d6a <__swsetup_r+0xc6>
 8009d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d5c:	d1ba      	bne.n	8009cd4 <__swsetup_r+0x30>
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	0781      	lsls	r1, r0, #30
 8009d62:	bf58      	it	pl
 8009d64:	6963      	ldrpl	r3, [r4, #20]
 8009d66:	60a3      	str	r3, [r4, #8]
 8009d68:	e7f4      	b.n	8009d54 <__swsetup_r+0xb0>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e7f7      	b.n	8009d5e <__swsetup_r+0xba>
 8009d6e:	bf00      	nop
 8009d70:	2000002c 	.word	0x2000002c
 8009d74:	0800a598 	.word	0x0800a598
 8009d78:	0800a5b8 	.word	0x0800a5b8
 8009d7c:	0800a578 	.word	0x0800a578

08009d80 <_close_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d06      	ldr	r5, [pc, #24]	; (8009d9c <_close_r+0x1c>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	602b      	str	r3, [r5, #0]
 8009d8c:	f7f7 f8c5 	bl	8000f1a <_close>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_close_r+0x1a>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_close_r+0x1a>
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	20000cec 	.word	0x20000cec

08009da0 <__sflags>:
 8009da0:	780b      	ldrb	r3, [r1, #0]
 8009da2:	2b72      	cmp	r3, #114	; 0x72
 8009da4:	b530      	push	{r4, r5, lr}
 8009da6:	d022      	beq.n	8009dee <__sflags+0x4e>
 8009da8:	2b77      	cmp	r3, #119	; 0x77
 8009daa:	d024      	beq.n	8009df6 <__sflags+0x56>
 8009dac:	2b61      	cmp	r3, #97	; 0x61
 8009dae:	d027      	beq.n	8009e00 <__sflags+0x60>
 8009db0:	2316      	movs	r3, #22
 8009db2:	6003      	str	r3, [r0, #0]
 8009db4:	2000      	movs	r0, #0
 8009db6:	bd30      	pop	{r4, r5, pc}
 8009db8:	2d62      	cmp	r5, #98	; 0x62
 8009dba:	d012      	beq.n	8009de2 <__sflags+0x42>
 8009dbc:	2d78      	cmp	r5, #120	; 0x78
 8009dbe:	d013      	beq.n	8009de8 <__sflags+0x48>
 8009dc0:	2d2b      	cmp	r5, #43	; 0x2b
 8009dc2:	d107      	bne.n	8009dd4 <__sflags+0x34>
 8009dc4:	f020 001c 	bic.w	r0, r0, #28
 8009dc8:	f023 0303 	bic.w	r3, r3, #3
 8009dcc:	f040 0010 	orr.w	r0, r0, #16
 8009dd0:	f043 0302 	orr.w	r3, r3, #2
 8009dd4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009dd8:	2d00      	cmp	r5, #0
 8009dda:	d1ed      	bne.n	8009db8 <__sflags+0x18>
 8009ddc:	4323      	orrs	r3, r4
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	e7e9      	b.n	8009db6 <__sflags+0x16>
 8009de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009de6:	e7f5      	b.n	8009dd4 <__sflags+0x34>
 8009de8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009dec:	e7f2      	b.n	8009dd4 <__sflags+0x34>
 8009dee:	2400      	movs	r4, #0
 8009df0:	4623      	mov	r3, r4
 8009df2:	2004      	movs	r0, #4
 8009df4:	e7ee      	b.n	8009dd4 <__sflags+0x34>
 8009df6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	2008      	movs	r0, #8
 8009dfe:	e7e9      	b.n	8009dd4 <__sflags+0x34>
 8009e00:	f44f 7402 	mov.w	r4, #520	; 0x208
 8009e04:	2301      	movs	r3, #1
 8009e06:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009e0a:	e7e3      	b.n	8009dd4 <__sflags+0x34>

08009e0c <_fstat_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d07      	ldr	r5, [pc, #28]	; (8009e2c <_fstat_r+0x20>)
 8009e10:	2300      	movs	r3, #0
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	4611      	mov	r1, r2
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	f7f7 f88a 	bl	8000f32 <_fstat>
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	d102      	bne.n	8009e28 <_fstat_r+0x1c>
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	b103      	cbz	r3, 8009e28 <_fstat_r+0x1c>
 8009e26:	6023      	str	r3, [r4, #0]
 8009e28:	bd38      	pop	{r3, r4, r5, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20000cec 	.word	0x20000cec

08009e30 <_isatty_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d06      	ldr	r5, [pc, #24]	; (8009e4c <_isatty_r+0x1c>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7f7 f889 	bl	8000f52 <_isatty>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_isatty_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_isatty_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	20000cec 	.word	0x20000cec

08009e50 <_lseek_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d07      	ldr	r5, [pc, #28]	; (8009e70 <_lseek_r+0x20>)
 8009e54:	4604      	mov	r4, r0
 8009e56:	4608      	mov	r0, r1
 8009e58:	4611      	mov	r1, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f7f7 f882 	bl	8000f68 <_lseek>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_lseek_r+0x1e>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_lseek_r+0x1e>
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	20000cec 	.word	0x20000cec

08009e74 <__malloc_lock>:
 8009e74:	4801      	ldr	r0, [pc, #4]	; (8009e7c <__malloc_lock+0x8>)
 8009e76:	f7ff bbe5 	b.w	8009644 <__retarget_lock_acquire_recursive>
 8009e7a:	bf00      	nop
 8009e7c:	20000ce4 	.word	0x20000ce4

08009e80 <__malloc_unlock>:
 8009e80:	4801      	ldr	r0, [pc, #4]	; (8009e88 <__malloc_unlock+0x8>)
 8009e82:	f7ff bbe0 	b.w	8009646 <__retarget_lock_release_recursive>
 8009e86:	bf00      	nop
 8009e88:	20000ce4 	.word	0x20000ce4

08009e8c <__sfputc_r>:
 8009e8c:	6893      	ldr	r3, [r2, #8]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	b410      	push	{r4}
 8009e94:	6093      	str	r3, [r2, #8]
 8009e96:	da08      	bge.n	8009eaa <__sfputc_r+0x1e>
 8009e98:	6994      	ldr	r4, [r2, #24]
 8009e9a:	42a3      	cmp	r3, r4
 8009e9c:	db01      	blt.n	8009ea2 <__sfputc_r+0x16>
 8009e9e:	290a      	cmp	r1, #10
 8009ea0:	d103      	bne.n	8009eaa <__sfputc_r+0x1e>
 8009ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ea6:	f7ff be99 	b.w	8009bdc <__swbuf_r>
 8009eaa:	6813      	ldr	r3, [r2, #0]
 8009eac:	1c58      	adds	r0, r3, #1
 8009eae:	6010      	str	r0, [r2, #0]
 8009eb0:	7019      	strb	r1, [r3, #0]
 8009eb2:	4608      	mov	r0, r1
 8009eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <__sfputs_r>:
 8009eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460f      	mov	r7, r1
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	18d5      	adds	r5, r2, r3
 8009ec4:	42ac      	cmp	r4, r5
 8009ec6:	d101      	bne.n	8009ecc <__sfputs_r+0x12>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e007      	b.n	8009edc <__sfputs_r+0x22>
 8009ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed0:	463a      	mov	r2, r7
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7ff ffda 	bl	8009e8c <__sfputc_r>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d1f3      	bne.n	8009ec4 <__sfputs_r+0xa>
 8009edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ee0 <_vfiprintf_r>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	460d      	mov	r5, r1
 8009ee6:	b09d      	sub	sp, #116	; 0x74
 8009ee8:	4614      	mov	r4, r2
 8009eea:	4698      	mov	r8, r3
 8009eec:	4606      	mov	r6, r0
 8009eee:	b118      	cbz	r0, 8009ef8 <_vfiprintf_r+0x18>
 8009ef0:	6983      	ldr	r3, [r0, #24]
 8009ef2:	b90b      	cbnz	r3, 8009ef8 <_vfiprintf_r+0x18>
 8009ef4:	f7ff f8ec 	bl	80090d0 <__sinit>
 8009ef8:	4b89      	ldr	r3, [pc, #548]	; (800a120 <_vfiprintf_r+0x240>)
 8009efa:	429d      	cmp	r5, r3
 8009efc:	d11b      	bne.n	8009f36 <_vfiprintf_r+0x56>
 8009efe:	6875      	ldr	r5, [r6, #4]
 8009f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f02:	07d9      	lsls	r1, r3, #31
 8009f04:	d405      	bmi.n	8009f12 <_vfiprintf_r+0x32>
 8009f06:	89ab      	ldrh	r3, [r5, #12]
 8009f08:	059a      	lsls	r2, r3, #22
 8009f0a:	d402      	bmi.n	8009f12 <_vfiprintf_r+0x32>
 8009f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f0e:	f7ff fb99 	bl	8009644 <__retarget_lock_acquire_recursive>
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	071b      	lsls	r3, r3, #28
 8009f16:	d501      	bpl.n	8009f1c <_vfiprintf_r+0x3c>
 8009f18:	692b      	ldr	r3, [r5, #16]
 8009f1a:	b9eb      	cbnz	r3, 8009f58 <_vfiprintf_r+0x78>
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7ff fec0 	bl	8009ca4 <__swsetup_r>
 8009f24:	b1c0      	cbz	r0, 8009f58 <_vfiprintf_r+0x78>
 8009f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f28:	07dc      	lsls	r4, r3, #31
 8009f2a:	d50e      	bpl.n	8009f4a <_vfiprintf_r+0x6a>
 8009f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f30:	b01d      	add	sp, #116	; 0x74
 8009f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f36:	4b7b      	ldr	r3, [pc, #492]	; (800a124 <_vfiprintf_r+0x244>)
 8009f38:	429d      	cmp	r5, r3
 8009f3a:	d101      	bne.n	8009f40 <_vfiprintf_r+0x60>
 8009f3c:	68b5      	ldr	r5, [r6, #8]
 8009f3e:	e7df      	b.n	8009f00 <_vfiprintf_r+0x20>
 8009f40:	4b79      	ldr	r3, [pc, #484]	; (800a128 <_vfiprintf_r+0x248>)
 8009f42:	429d      	cmp	r5, r3
 8009f44:	bf08      	it	eq
 8009f46:	68f5      	ldreq	r5, [r6, #12]
 8009f48:	e7da      	b.n	8009f00 <_vfiprintf_r+0x20>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	0598      	lsls	r0, r3, #22
 8009f4e:	d4ed      	bmi.n	8009f2c <_vfiprintf_r+0x4c>
 8009f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f52:	f7ff fb78 	bl	8009646 <__retarget_lock_release_recursive>
 8009f56:	e7e9      	b.n	8009f2c <_vfiprintf_r+0x4c>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f66:	2330      	movs	r3, #48	; 0x30
 8009f68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a12c <_vfiprintf_r+0x24c>
 8009f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f70:	f04f 0901 	mov.w	r9, #1
 8009f74:	4623      	mov	r3, r4
 8009f76:	469a      	mov	sl, r3
 8009f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f7c:	b10a      	cbz	r2, 8009f82 <_vfiprintf_r+0xa2>
 8009f7e:	2a25      	cmp	r2, #37	; 0x25
 8009f80:	d1f9      	bne.n	8009f76 <_vfiprintf_r+0x96>
 8009f82:	ebba 0b04 	subs.w	fp, sl, r4
 8009f86:	d00b      	beq.n	8009fa0 <_vfiprintf_r+0xc0>
 8009f88:	465b      	mov	r3, fp
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7ff ff93 	bl	8009eba <__sfputs_r>
 8009f94:	3001      	adds	r0, #1
 8009f96:	f000 80aa 	beq.w	800a0ee <_vfiprintf_r+0x20e>
 8009f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f9c:	445a      	add	r2, fp
 8009f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 80a2 	beq.w	800a0ee <_vfiprintf_r+0x20e>
 8009faa:	2300      	movs	r3, #0
 8009fac:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb4:	f10a 0a01 	add.w	sl, sl, #1
 8009fb8:	9304      	str	r3, [sp, #16]
 8009fba:	9307      	str	r3, [sp, #28]
 8009fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8009fc2:	4654      	mov	r4, sl
 8009fc4:	2205      	movs	r2, #5
 8009fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fca:	4858      	ldr	r0, [pc, #352]	; (800a12c <_vfiprintf_r+0x24c>)
 8009fcc:	f7f6 f900 	bl	80001d0 <memchr>
 8009fd0:	9a04      	ldr	r2, [sp, #16]
 8009fd2:	b9d8      	cbnz	r0, 800a00c <_vfiprintf_r+0x12c>
 8009fd4:	06d1      	lsls	r1, r2, #27
 8009fd6:	bf44      	itt	mi
 8009fd8:	2320      	movmi	r3, #32
 8009fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fde:	0713      	lsls	r3, r2, #28
 8009fe0:	bf44      	itt	mi
 8009fe2:	232b      	movmi	r3, #43	; 0x2b
 8009fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fec:	2b2a      	cmp	r3, #42	; 0x2a
 8009fee:	d015      	beq.n	800a01c <_vfiprintf_r+0x13c>
 8009ff0:	9a07      	ldr	r2, [sp, #28]
 8009ff2:	4654      	mov	r4, sl
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	f04f 0c0a 	mov.w	ip, #10
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a000:	3b30      	subs	r3, #48	; 0x30
 800a002:	2b09      	cmp	r3, #9
 800a004:	d94e      	bls.n	800a0a4 <_vfiprintf_r+0x1c4>
 800a006:	b1b0      	cbz	r0, 800a036 <_vfiprintf_r+0x156>
 800a008:	9207      	str	r2, [sp, #28]
 800a00a:	e014      	b.n	800a036 <_vfiprintf_r+0x156>
 800a00c:	eba0 0308 	sub.w	r3, r0, r8
 800a010:	fa09 f303 	lsl.w	r3, r9, r3
 800a014:	4313      	orrs	r3, r2
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	46a2      	mov	sl, r4
 800a01a:	e7d2      	b.n	8009fc2 <_vfiprintf_r+0xe2>
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	1d19      	adds	r1, r3, #4
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	9103      	str	r1, [sp, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	bfbb      	ittet	lt
 800a028:	425b      	neglt	r3, r3
 800a02a:	f042 0202 	orrlt.w	r2, r2, #2
 800a02e:	9307      	strge	r3, [sp, #28]
 800a030:	9307      	strlt	r3, [sp, #28]
 800a032:	bfb8      	it	lt
 800a034:	9204      	strlt	r2, [sp, #16]
 800a036:	7823      	ldrb	r3, [r4, #0]
 800a038:	2b2e      	cmp	r3, #46	; 0x2e
 800a03a:	d10c      	bne.n	800a056 <_vfiprintf_r+0x176>
 800a03c:	7863      	ldrb	r3, [r4, #1]
 800a03e:	2b2a      	cmp	r3, #42	; 0x2a
 800a040:	d135      	bne.n	800a0ae <_vfiprintf_r+0x1ce>
 800a042:	9b03      	ldr	r3, [sp, #12]
 800a044:	1d1a      	adds	r2, r3, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	9203      	str	r2, [sp, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	bfb8      	it	lt
 800a04e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a052:	3402      	adds	r4, #2
 800a054:	9305      	str	r3, [sp, #20]
 800a056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a13c <_vfiprintf_r+0x25c>
 800a05a:	7821      	ldrb	r1, [r4, #0]
 800a05c:	2203      	movs	r2, #3
 800a05e:	4650      	mov	r0, sl
 800a060:	f7f6 f8b6 	bl	80001d0 <memchr>
 800a064:	b140      	cbz	r0, 800a078 <_vfiprintf_r+0x198>
 800a066:	2340      	movs	r3, #64	; 0x40
 800a068:	eba0 000a 	sub.w	r0, r0, sl
 800a06c:	fa03 f000 	lsl.w	r0, r3, r0
 800a070:	9b04      	ldr	r3, [sp, #16]
 800a072:	4303      	orrs	r3, r0
 800a074:	3401      	adds	r4, #1
 800a076:	9304      	str	r3, [sp, #16]
 800a078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a07c:	482c      	ldr	r0, [pc, #176]	; (800a130 <_vfiprintf_r+0x250>)
 800a07e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a082:	2206      	movs	r2, #6
 800a084:	f7f6 f8a4 	bl	80001d0 <memchr>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d03f      	beq.n	800a10c <_vfiprintf_r+0x22c>
 800a08c:	4b29      	ldr	r3, [pc, #164]	; (800a134 <_vfiprintf_r+0x254>)
 800a08e:	bb1b      	cbnz	r3, 800a0d8 <_vfiprintf_r+0x1f8>
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	3307      	adds	r3, #7
 800a094:	f023 0307 	bic.w	r3, r3, #7
 800a098:	3308      	adds	r3, #8
 800a09a:	9303      	str	r3, [sp, #12]
 800a09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09e:	443b      	add	r3, r7
 800a0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a2:	e767      	b.n	8009f74 <_vfiprintf_r+0x94>
 800a0a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	e7a5      	b.n	8009ffa <_vfiprintf_r+0x11a>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	3401      	adds	r4, #1
 800a0b2:	9305      	str	r3, [sp, #20]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f04f 0c0a 	mov.w	ip, #10
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c0:	3a30      	subs	r2, #48	; 0x30
 800a0c2:	2a09      	cmp	r2, #9
 800a0c4:	d903      	bls.n	800a0ce <_vfiprintf_r+0x1ee>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0c5      	beq.n	800a056 <_vfiprintf_r+0x176>
 800a0ca:	9105      	str	r1, [sp, #20]
 800a0cc:	e7c3      	b.n	800a056 <_vfiprintf_r+0x176>
 800a0ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e7f0      	b.n	800a0ba <_vfiprintf_r+0x1da>
 800a0d8:	ab03      	add	r3, sp, #12
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	462a      	mov	r2, r5
 800a0de:	4b16      	ldr	r3, [pc, #88]	; (800a138 <_vfiprintf_r+0x258>)
 800a0e0:	a904      	add	r1, sp, #16
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f3af 8000 	nop.w
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	1c78      	adds	r0, r7, #1
 800a0ec:	d1d6      	bne.n	800a09c <_vfiprintf_r+0x1bc>
 800a0ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f0:	07d9      	lsls	r1, r3, #31
 800a0f2:	d405      	bmi.n	800a100 <_vfiprintf_r+0x220>
 800a0f4:	89ab      	ldrh	r3, [r5, #12]
 800a0f6:	059a      	lsls	r2, r3, #22
 800a0f8:	d402      	bmi.n	800a100 <_vfiprintf_r+0x220>
 800a0fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0fc:	f7ff faa3 	bl	8009646 <__retarget_lock_release_recursive>
 800a100:	89ab      	ldrh	r3, [r5, #12]
 800a102:	065b      	lsls	r3, r3, #25
 800a104:	f53f af12 	bmi.w	8009f2c <_vfiprintf_r+0x4c>
 800a108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a10a:	e711      	b.n	8009f30 <_vfiprintf_r+0x50>
 800a10c:	ab03      	add	r3, sp, #12
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	462a      	mov	r2, r5
 800a112:	4b09      	ldr	r3, [pc, #36]	; (800a138 <_vfiprintf_r+0x258>)
 800a114:	a904      	add	r1, sp, #16
 800a116:	4630      	mov	r0, r6
 800a118:	f000 f880 	bl	800a21c <_printf_i>
 800a11c:	e7e4      	b.n	800a0e8 <_vfiprintf_r+0x208>
 800a11e:	bf00      	nop
 800a120:	0800a598 	.word	0x0800a598
 800a124:	0800a5b8 	.word	0x0800a5b8
 800a128:	0800a578 	.word	0x0800a578
 800a12c:	0800a5dc 	.word	0x0800a5dc
 800a130:	0800a5e6 	.word	0x0800a5e6
 800a134:	00000000 	.word	0x00000000
 800a138:	08009ebb 	.word	0x08009ebb
 800a13c:	0800a5e2 	.word	0x0800a5e2

0800a140 <_printf_common>:
 800a140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a144:	4616      	mov	r6, r2
 800a146:	4699      	mov	r9, r3
 800a148:	688a      	ldr	r2, [r1, #8]
 800a14a:	690b      	ldr	r3, [r1, #16]
 800a14c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a150:	4293      	cmp	r3, r2
 800a152:	bfb8      	it	lt
 800a154:	4613      	movlt	r3, r2
 800a156:	6033      	str	r3, [r6, #0]
 800a158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a15c:	4607      	mov	r7, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	b10a      	cbz	r2, 800a166 <_printf_common+0x26>
 800a162:	3301      	adds	r3, #1
 800a164:	6033      	str	r3, [r6, #0]
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	0699      	lsls	r1, r3, #26
 800a16a:	bf42      	ittt	mi
 800a16c:	6833      	ldrmi	r3, [r6, #0]
 800a16e:	3302      	addmi	r3, #2
 800a170:	6033      	strmi	r3, [r6, #0]
 800a172:	6825      	ldr	r5, [r4, #0]
 800a174:	f015 0506 	ands.w	r5, r5, #6
 800a178:	d106      	bne.n	800a188 <_printf_common+0x48>
 800a17a:	f104 0a19 	add.w	sl, r4, #25
 800a17e:	68e3      	ldr	r3, [r4, #12]
 800a180:	6832      	ldr	r2, [r6, #0]
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	42ab      	cmp	r3, r5
 800a186:	dc26      	bgt.n	800a1d6 <_printf_common+0x96>
 800a188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a18c:	1e13      	subs	r3, r2, #0
 800a18e:	6822      	ldr	r2, [r4, #0]
 800a190:	bf18      	it	ne
 800a192:	2301      	movne	r3, #1
 800a194:	0692      	lsls	r2, r2, #26
 800a196:	d42b      	bmi.n	800a1f0 <_printf_common+0xb0>
 800a198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a19c:	4649      	mov	r1, r9
 800a19e:	4638      	mov	r0, r7
 800a1a0:	47c0      	blx	r8
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	d01e      	beq.n	800a1e4 <_printf_common+0xa4>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	68e5      	ldr	r5, [r4, #12]
 800a1aa:	6832      	ldr	r2, [r6, #0]
 800a1ac:	f003 0306 	and.w	r3, r3, #6
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	bf08      	it	eq
 800a1b4:	1aad      	subeq	r5, r5, r2
 800a1b6:	68a3      	ldr	r3, [r4, #8]
 800a1b8:	6922      	ldr	r2, [r4, #16]
 800a1ba:	bf0c      	ite	eq
 800a1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1c0:	2500      	movne	r5, #0
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	bfc4      	itt	gt
 800a1c6:	1a9b      	subgt	r3, r3, r2
 800a1c8:	18ed      	addgt	r5, r5, r3
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	341a      	adds	r4, #26
 800a1ce:	42b5      	cmp	r5, r6
 800a1d0:	d11a      	bne.n	800a208 <_printf_common+0xc8>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	e008      	b.n	800a1e8 <_printf_common+0xa8>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	4652      	mov	r2, sl
 800a1da:	4649      	mov	r1, r9
 800a1dc:	4638      	mov	r0, r7
 800a1de:	47c0      	blx	r8
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d103      	bne.n	800a1ec <_printf_common+0xac>
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	e7c6      	b.n	800a17e <_printf_common+0x3e>
 800a1f0:	18e1      	adds	r1, r4, r3
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	2030      	movs	r0, #48	; 0x30
 800a1f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1fa:	4422      	add	r2, r4
 800a1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a204:	3302      	adds	r3, #2
 800a206:	e7c7      	b.n	800a198 <_printf_common+0x58>
 800a208:	2301      	movs	r3, #1
 800a20a:	4622      	mov	r2, r4
 800a20c:	4649      	mov	r1, r9
 800a20e:	4638      	mov	r0, r7
 800a210:	47c0      	blx	r8
 800a212:	3001      	adds	r0, #1
 800a214:	d0e6      	beq.n	800a1e4 <_printf_common+0xa4>
 800a216:	3601      	adds	r6, #1
 800a218:	e7d9      	b.n	800a1ce <_printf_common+0x8e>
	...

0800a21c <_printf_i>:
 800a21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	460c      	mov	r4, r1
 800a222:	4691      	mov	r9, r2
 800a224:	7e27      	ldrb	r7, [r4, #24]
 800a226:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a228:	2f78      	cmp	r7, #120	; 0x78
 800a22a:	4680      	mov	r8, r0
 800a22c:	469a      	mov	sl, r3
 800a22e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a232:	d807      	bhi.n	800a244 <_printf_i+0x28>
 800a234:	2f62      	cmp	r7, #98	; 0x62
 800a236:	d80a      	bhi.n	800a24e <_printf_i+0x32>
 800a238:	2f00      	cmp	r7, #0
 800a23a:	f000 80d8 	beq.w	800a3ee <_printf_i+0x1d2>
 800a23e:	2f58      	cmp	r7, #88	; 0x58
 800a240:	f000 80a3 	beq.w	800a38a <_printf_i+0x16e>
 800a244:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a24c:	e03a      	b.n	800a2c4 <_printf_i+0xa8>
 800a24e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a252:	2b15      	cmp	r3, #21
 800a254:	d8f6      	bhi.n	800a244 <_printf_i+0x28>
 800a256:	a001      	add	r0, pc, #4	; (adr r0, 800a25c <_printf_i+0x40>)
 800a258:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a25c:	0800a2b5 	.word	0x0800a2b5
 800a260:	0800a2c9 	.word	0x0800a2c9
 800a264:	0800a245 	.word	0x0800a245
 800a268:	0800a245 	.word	0x0800a245
 800a26c:	0800a245 	.word	0x0800a245
 800a270:	0800a245 	.word	0x0800a245
 800a274:	0800a2c9 	.word	0x0800a2c9
 800a278:	0800a245 	.word	0x0800a245
 800a27c:	0800a245 	.word	0x0800a245
 800a280:	0800a245 	.word	0x0800a245
 800a284:	0800a245 	.word	0x0800a245
 800a288:	0800a3d5 	.word	0x0800a3d5
 800a28c:	0800a2f9 	.word	0x0800a2f9
 800a290:	0800a3b7 	.word	0x0800a3b7
 800a294:	0800a245 	.word	0x0800a245
 800a298:	0800a245 	.word	0x0800a245
 800a29c:	0800a3f7 	.word	0x0800a3f7
 800a2a0:	0800a245 	.word	0x0800a245
 800a2a4:	0800a2f9 	.word	0x0800a2f9
 800a2a8:	0800a245 	.word	0x0800a245
 800a2ac:	0800a245 	.word	0x0800a245
 800a2b0:	0800a3bf 	.word	0x0800a3bf
 800a2b4:	680b      	ldr	r3, [r1, #0]
 800a2b6:	1d1a      	adds	r2, r3, #4
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	600a      	str	r2, [r1, #0]
 800a2bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a2c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e0a3      	b.n	800a410 <_printf_i+0x1f4>
 800a2c8:	6825      	ldr	r5, [r4, #0]
 800a2ca:	6808      	ldr	r0, [r1, #0]
 800a2cc:	062e      	lsls	r6, r5, #24
 800a2ce:	f100 0304 	add.w	r3, r0, #4
 800a2d2:	d50a      	bpl.n	800a2ea <_printf_i+0xce>
 800a2d4:	6805      	ldr	r5, [r0, #0]
 800a2d6:	600b      	str	r3, [r1, #0]
 800a2d8:	2d00      	cmp	r5, #0
 800a2da:	da03      	bge.n	800a2e4 <_printf_i+0xc8>
 800a2dc:	232d      	movs	r3, #45	; 0x2d
 800a2de:	426d      	negs	r5, r5
 800a2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2e4:	485e      	ldr	r0, [pc, #376]	; (800a460 <_printf_i+0x244>)
 800a2e6:	230a      	movs	r3, #10
 800a2e8:	e019      	b.n	800a31e <_printf_i+0x102>
 800a2ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a2ee:	6805      	ldr	r5, [r0, #0]
 800a2f0:	600b      	str	r3, [r1, #0]
 800a2f2:	bf18      	it	ne
 800a2f4:	b22d      	sxthne	r5, r5
 800a2f6:	e7ef      	b.n	800a2d8 <_printf_i+0xbc>
 800a2f8:	680b      	ldr	r3, [r1, #0]
 800a2fa:	6825      	ldr	r5, [r4, #0]
 800a2fc:	1d18      	adds	r0, r3, #4
 800a2fe:	6008      	str	r0, [r1, #0]
 800a300:	0628      	lsls	r0, r5, #24
 800a302:	d501      	bpl.n	800a308 <_printf_i+0xec>
 800a304:	681d      	ldr	r5, [r3, #0]
 800a306:	e002      	b.n	800a30e <_printf_i+0xf2>
 800a308:	0669      	lsls	r1, r5, #25
 800a30a:	d5fb      	bpl.n	800a304 <_printf_i+0xe8>
 800a30c:	881d      	ldrh	r5, [r3, #0]
 800a30e:	4854      	ldr	r0, [pc, #336]	; (800a460 <_printf_i+0x244>)
 800a310:	2f6f      	cmp	r7, #111	; 0x6f
 800a312:	bf0c      	ite	eq
 800a314:	2308      	moveq	r3, #8
 800a316:	230a      	movne	r3, #10
 800a318:	2100      	movs	r1, #0
 800a31a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a31e:	6866      	ldr	r6, [r4, #4]
 800a320:	60a6      	str	r6, [r4, #8]
 800a322:	2e00      	cmp	r6, #0
 800a324:	bfa2      	ittt	ge
 800a326:	6821      	ldrge	r1, [r4, #0]
 800a328:	f021 0104 	bicge.w	r1, r1, #4
 800a32c:	6021      	strge	r1, [r4, #0]
 800a32e:	b90d      	cbnz	r5, 800a334 <_printf_i+0x118>
 800a330:	2e00      	cmp	r6, #0
 800a332:	d04d      	beq.n	800a3d0 <_printf_i+0x1b4>
 800a334:	4616      	mov	r6, r2
 800a336:	fbb5 f1f3 	udiv	r1, r5, r3
 800a33a:	fb03 5711 	mls	r7, r3, r1, r5
 800a33e:	5dc7      	ldrb	r7, [r0, r7]
 800a340:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a344:	462f      	mov	r7, r5
 800a346:	42bb      	cmp	r3, r7
 800a348:	460d      	mov	r5, r1
 800a34a:	d9f4      	bls.n	800a336 <_printf_i+0x11a>
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d10b      	bne.n	800a368 <_printf_i+0x14c>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	07df      	lsls	r7, r3, #31
 800a354:	d508      	bpl.n	800a368 <_printf_i+0x14c>
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	6861      	ldr	r1, [r4, #4]
 800a35a:	4299      	cmp	r1, r3
 800a35c:	bfde      	ittt	le
 800a35e:	2330      	movle	r3, #48	; 0x30
 800a360:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a364:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a368:	1b92      	subs	r2, r2, r6
 800a36a:	6122      	str	r2, [r4, #16]
 800a36c:	f8cd a000 	str.w	sl, [sp]
 800a370:	464b      	mov	r3, r9
 800a372:	aa03      	add	r2, sp, #12
 800a374:	4621      	mov	r1, r4
 800a376:	4640      	mov	r0, r8
 800a378:	f7ff fee2 	bl	800a140 <_printf_common>
 800a37c:	3001      	adds	r0, #1
 800a37e:	d14c      	bne.n	800a41a <_printf_i+0x1fe>
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	b004      	add	sp, #16
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38a:	4835      	ldr	r0, [pc, #212]	; (800a460 <_printf_i+0x244>)
 800a38c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	680e      	ldr	r6, [r1, #0]
 800a394:	061f      	lsls	r7, r3, #24
 800a396:	f856 5b04 	ldr.w	r5, [r6], #4
 800a39a:	600e      	str	r6, [r1, #0]
 800a39c:	d514      	bpl.n	800a3c8 <_printf_i+0x1ac>
 800a39e:	07d9      	lsls	r1, r3, #31
 800a3a0:	bf44      	itt	mi
 800a3a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3a6:	6023      	strmi	r3, [r4, #0]
 800a3a8:	b91d      	cbnz	r5, 800a3b2 <_printf_i+0x196>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	f023 0320 	bic.w	r3, r3, #32
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	2310      	movs	r3, #16
 800a3b4:	e7b0      	b.n	800a318 <_printf_i+0xfc>
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	f043 0320 	orr.w	r3, r3, #32
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	2378      	movs	r3, #120	; 0x78
 800a3c0:	4828      	ldr	r0, [pc, #160]	; (800a464 <_printf_i+0x248>)
 800a3c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3c6:	e7e3      	b.n	800a390 <_printf_i+0x174>
 800a3c8:	065e      	lsls	r6, r3, #25
 800a3ca:	bf48      	it	mi
 800a3cc:	b2ad      	uxthmi	r5, r5
 800a3ce:	e7e6      	b.n	800a39e <_printf_i+0x182>
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	e7bb      	b.n	800a34c <_printf_i+0x130>
 800a3d4:	680b      	ldr	r3, [r1, #0]
 800a3d6:	6826      	ldr	r6, [r4, #0]
 800a3d8:	6960      	ldr	r0, [r4, #20]
 800a3da:	1d1d      	adds	r5, r3, #4
 800a3dc:	600d      	str	r5, [r1, #0]
 800a3de:	0635      	lsls	r5, r6, #24
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	d501      	bpl.n	800a3e8 <_printf_i+0x1cc>
 800a3e4:	6018      	str	r0, [r3, #0]
 800a3e6:	e002      	b.n	800a3ee <_printf_i+0x1d2>
 800a3e8:	0671      	lsls	r1, r6, #25
 800a3ea:	d5fb      	bpl.n	800a3e4 <_printf_i+0x1c8>
 800a3ec:	8018      	strh	r0, [r3, #0]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	4616      	mov	r6, r2
 800a3f4:	e7ba      	b.n	800a36c <_printf_i+0x150>
 800a3f6:	680b      	ldr	r3, [r1, #0]
 800a3f8:	1d1a      	adds	r2, r3, #4
 800a3fa:	600a      	str	r2, [r1, #0]
 800a3fc:	681e      	ldr	r6, [r3, #0]
 800a3fe:	6862      	ldr	r2, [r4, #4]
 800a400:	2100      	movs	r1, #0
 800a402:	4630      	mov	r0, r6
 800a404:	f7f5 fee4 	bl	80001d0 <memchr>
 800a408:	b108      	cbz	r0, 800a40e <_printf_i+0x1f2>
 800a40a:	1b80      	subs	r0, r0, r6
 800a40c:	6060      	str	r0, [r4, #4]
 800a40e:	6863      	ldr	r3, [r4, #4]
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	2300      	movs	r3, #0
 800a414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a418:	e7a8      	b.n	800a36c <_printf_i+0x150>
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	4632      	mov	r2, r6
 800a41e:	4649      	mov	r1, r9
 800a420:	4640      	mov	r0, r8
 800a422:	47d0      	blx	sl
 800a424:	3001      	adds	r0, #1
 800a426:	d0ab      	beq.n	800a380 <_printf_i+0x164>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	079b      	lsls	r3, r3, #30
 800a42c:	d413      	bmi.n	800a456 <_printf_i+0x23a>
 800a42e:	68e0      	ldr	r0, [r4, #12]
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	4298      	cmp	r0, r3
 800a434:	bfb8      	it	lt
 800a436:	4618      	movlt	r0, r3
 800a438:	e7a4      	b.n	800a384 <_printf_i+0x168>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4632      	mov	r2, r6
 800a43e:	4649      	mov	r1, r9
 800a440:	4640      	mov	r0, r8
 800a442:	47d0      	blx	sl
 800a444:	3001      	adds	r0, #1
 800a446:	d09b      	beq.n	800a380 <_printf_i+0x164>
 800a448:	3501      	adds	r5, #1
 800a44a:	68e3      	ldr	r3, [r4, #12]
 800a44c:	9903      	ldr	r1, [sp, #12]
 800a44e:	1a5b      	subs	r3, r3, r1
 800a450:	42ab      	cmp	r3, r5
 800a452:	dcf2      	bgt.n	800a43a <_printf_i+0x21e>
 800a454:	e7eb      	b.n	800a42e <_printf_i+0x212>
 800a456:	2500      	movs	r5, #0
 800a458:	f104 0619 	add.w	r6, r4, #25
 800a45c:	e7f5      	b.n	800a44a <_printf_i+0x22e>
 800a45e:	bf00      	nop
 800a460:	0800a5ed 	.word	0x0800a5ed
 800a464:	0800a5fe 	.word	0x0800a5fe

0800a468 <_read_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d07      	ldr	r5, [pc, #28]	; (800a488 <_read_r+0x20>)
 800a46c:	4604      	mov	r4, r0
 800a46e:	4608      	mov	r0, r1
 800a470:	4611      	mov	r1, r2
 800a472:	2200      	movs	r2, #0
 800a474:	602a      	str	r2, [r5, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	f7f6 fd16 	bl	8000ea8 <_read>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_read_r+0x1e>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	b103      	cbz	r3, 800a486 <_read_r+0x1e>
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	20000cec 	.word	0x20000cec

0800a48c <_init>:
 800a48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48e:	bf00      	nop
 800a490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a492:	bc08      	pop	{r3}
 800a494:	469e      	mov	lr, r3
 800a496:	4770      	bx	lr

0800a498 <_fini>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	bf00      	nop
 800a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	4770      	bx	lr
