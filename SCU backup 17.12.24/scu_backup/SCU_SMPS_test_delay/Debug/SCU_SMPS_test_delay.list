
SCU_SMPS_test_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012dec  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08013040  08013040  00014040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013690  08013690  00015290  2**0
                  CONTENTS
  4 .ARM          00000008  08013690  08013690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013698  08013698  00015290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013698  08013698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801369c  0801369c  0001469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  080136a0  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ab0  20000290  08013930  00015290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d40  08013930  00015d40  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00015290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b47f  00000000  00000000  000152c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c5  00000000  00000000  00030745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00033c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d63  00000000  00000000  00034d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034b6f  00000000  00000000  00035ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b510  00000000  00000000  0006a652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141b03  00000000  00000000  00085b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c7665  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f8  00000000  00000000  001c76a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001cd0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000290 	.word	0x20000290
 800026c:	00000000 	.word	0x00000000
 8000270:	08013024 	.word	0x08013024

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000294 	.word	0x20000294
 800028c:	08013024 	.word	0x08013024

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b97e 	b.w	8000f7c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14d      	bne.n	8000d40 <__udivmoddi4+0xa8>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	460f      	mov	r7, r1
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4696      	mov	lr, r2
 8000cac:	fab2 f382 	clz	r3, r2
 8000cb0:	d960      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cb2:	b14b      	cbz	r3, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000cc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000ccc:	fa1f f48e 	uxth.w	r4, lr
 8000cd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cd4:	fbb7 f1f6 	udiv	r1, r7, r6
 8000cd8:	fb06 7711 	mls	r7, r6, r1, r7
 8000cdc:	fb01 f004 	mul.w	r0, r1, r4
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce8:	eb1e 0202 	adds.w	r2, lr, r2
 8000cec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x60>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f200 812d 	bhi.w	8000f52 <__udivmoddi4+0x2ba>
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	fa1f fc8c 	uxth.w	ip, ip
 8000d00:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d04:	fb06 2210 	mls	r2, r6, r0, r2
 8000d08:	fb00 f404 	mul.w	r4, r0, r4
 8000d0c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d10:	4564      	cmp	r4, ip
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d14:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x8c>
 8000d1e:	4564      	cmp	r4, ip
 8000d20:	f200 811a 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	ebac 0c04 	sub.w	ip, ip, r4
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b125      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d32:	fa2c f303 	lsr.w	r3, ip, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0xb8>
 8000d44:	b10d      	cbz	r5, 8000d4a <__udivmoddi4+0xb2>
 8000d46:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7f5      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0x15c>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	f0c0 80f2 	bcc.w	8000f42 <__udivmoddi4+0x2aa>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f080 80ef 	bcs.w	8000f42 <__udivmoddi4+0x2aa>
 8000d64:	4606      	mov	r6, r0
 8000d66:	4623      	mov	r3, r4
 8000d68:	4608      	mov	r0, r1
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e6      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d6e:	e9c5 6300 	strd	r6, r3, [r5]
 8000d72:	e7e3      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80a2 	bne.w	8000ebe <__udivmoddi4+0x226>
 8000d7a:	1a8a      	subs	r2, r1, r2
 8000d7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d80:	fa1f f68e 	uxth.w	r6, lr
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d8a:	fb07 2014 	mls	r0, r7, r4, r2
 8000d8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb06 f004 	mul.w	r0, r6, r4
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d90f      	bls.n	8000dbe <__udivmoddi4+0x126>
 8000d9e:	eb1e 0202 	adds.w	r2, lr, r2
 8000da2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0901 	movcs.w	r9, #1
 8000dac:	f04f 0900 	movcc.w	r9, #0
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000db4:	f1b9 0f00 	cmp.w	r9, #0
 8000db8:	f000 80c8 	beq.w	8000f4c <__udivmoddi4+0x2b4>
 8000dbc:	4644      	mov	r4, r8
 8000dbe:	1a12      	subs	r2, r2, r0
 8000dc0:	fa1f fc8c 	uxth.w	ip, ip
 8000dc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dcc:	fb00 f606 	mul.w	r6, r0, r6
 8000dd0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd4:	4566      	cmp	r6, ip
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x152>
 8000dd8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ddc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x150>
 8000de2:	4566      	cmp	r6, ip
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000de8:	4610      	mov	r0, r2
 8000dea:	ebac 0c06 	sub.w	ip, ip, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	e79d      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa04 fe01 	lsl.w	lr, r4, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e06:	40f4      	lsrs	r4, r6
 8000e08:	408a      	lsls	r2, r1
 8000e0a:	431f      	orrs	r7, r3
 8000e0c:	ea4e 030c 	orr.w	r3, lr, ip
 8000e10:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e24:	fb08 4410 	mls	r4, r8, r0, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb00 f90c 	mul.w	r9, r0, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x1ba>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0b01 	movcs.w	fp, #1
 8000e40:	f04f 0b00 	movcc.w	fp, #0
 8000e44:	45a1      	cmp	r9, r4
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e48:	f1bb 0f00 	cmp.w	fp, #0
 8000e4c:	f000 8093 	beq.w	8000f76 <__udivmoddi4+0x2de>
 8000e50:	4650      	mov	r0, sl
 8000e52:	eba4 0409 	sub.w	r4, r4, r9
 8000e56:	fa1f f983 	uxth.w	r9, r3
 8000e5a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e5e:	fb08 4413 	mls	r4, r8, r3, r4
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d906      	bls.n	8000e7c <__udivmoddi4+0x1e4>
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x1e2>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d87a      	bhi.n	8000f70 <__udivmoddi4+0x2d8>
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e80:	eba4 040c 	sub.w	r4, r4, ip
 8000e84:	fba0 9802 	umull	r9, r8, r0, r2
 8000e88:	4544      	cmp	r4, r8
 8000e8a:	46cc      	mov	ip, r9
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	d302      	bcc.n	8000e96 <__udivmoddi4+0x1fe>
 8000e90:	d106      	bne.n	8000ea0 <__udivmoddi4+0x208>
 8000e92:	45ce      	cmp	lr, r9
 8000e94:	d204      	bcs.n	8000ea0 <__udivmoddi4+0x208>
 8000e96:	3801      	subs	r0, #1
 8000e98:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e9c:	eb68 0307 	sbc.w	r3, r8, r7
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x222>
 8000ea2:	ebbe 020c 	subs.w	r2, lr, ip
 8000ea6:	eb64 0403 	sbc.w	r4, r4, r3
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	fa22 f301 	lsr.w	r3, r2, r1
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	431e      	orrs	r6, r3
 8000eb6:	e9c5 6400 	strd	r6, r4, [r5]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e73e      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000ebe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000ec2:	f1c3 0120 	rsb	r1, r3, #32
 8000ec6:	fa04 f203 	lsl.w	r2, r4, r3
 8000eca:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ed4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed8:	fa1f f68e 	uxth.w	r6, lr
 8000edc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fb07 4410 	mls	r4, r7, r0, r4
 8000ee6:	0c11      	lsrs	r1, r2, #16
 8000ee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000eec:	fb00 f406 	mul.w	r4, r0, r6
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	d90e      	bls.n	8000f12 <__udivmoddi4+0x27a>
 8000ef4:	eb1e 0101 	adds.w	r1, lr, r1
 8000ef8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efc:	bf2c      	ite	cs
 8000efe:	f04f 0901 	movcs.w	r9, #1
 8000f02:	f04f 0900 	movcc.w	r9, #0
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d902      	bls.n	8000f10 <__udivmoddi4+0x278>
 8000f0a:	f1b9 0f00 	cmp.w	r9, #0
 8000f0e:	d02c      	beq.n	8000f6a <__udivmoddi4+0x2d2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	1b09      	subs	r1, r1, r4
 8000f14:	b292      	uxth	r2, r2
 8000f16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f22:	fb04 f106 	mul.w	r1, r4, r6
 8000f26:	4291      	cmp	r1, r2
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x2a2>
 8000f2a:	eb1e 0202 	adds.w	r2, lr, r2
 8000f2e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f32:	d201      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d815      	bhi.n	8000f64 <__udivmoddi4+0x2cc>
 8000f38:	4644      	mov	r4, r8
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f40:	e721      	b.n	8000d86 <__udivmoddi4+0xee>
 8000f42:	1a86      	subs	r6, r0, r2
 8000f44:	eb64 0303 	sbc.w	r3, r4, r3
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e70e      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f4c:	3c02      	subs	r4, #2
 8000f4e:	4472      	add	r2, lr
 8000f50:	e735      	b.n	8000dbe <__udivmoddi4+0x126>
 8000f52:	3902      	subs	r1, #2
 8000f54:	4472      	add	r2, lr
 8000f56:	e6d0      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f58:	44f4      	add	ip, lr
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	e6e3      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000f5e:	44f4      	add	ip, lr
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x152>
 8000f64:	3c02      	subs	r4, #2
 8000f66:	4472      	add	r2, lr
 8000f68:	e7e7      	b.n	8000f3a <__udivmoddi4+0x2a2>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4471      	add	r1, lr
 8000f6e:	e7d0      	b.n	8000f12 <__udivmoddi4+0x27a>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	e782      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f76:	3802      	subs	r0, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	e76a      	b.n	8000e52 <__udivmoddi4+0x1ba>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <ADC_operation>:
const float A = 3.9083e-3;
const float B = -5.775e-7;
float temperature;

// Function to handle ADC operations
uint8_t ADC_operation() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
#if 1
	// Loop through each ADC and channel
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e017      	b.n	8000fbc <ADC_operation+0x3c>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	71bb      	strb	r3, [r7, #6]
 8000f90:	e008      	b.n	8000fa4 <ADC_operation+0x24>
		{
			ADC_READ(ADC_idx, Chn_idx);  // Read ADC value
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f81d 	bl	8000fd8 <ADC_READ>
		for (uint8_t Chn_idx = 0; Chn_idx < 4; Chn_idx++)
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	71bb      	strb	r3, [r7, #6]
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d9f3      	bls.n	8000f92 <ADC_operation+0x12>
		}

		if(SRAM_check)
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <ADC_operation+0x54>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <ADC_operation+0x36>
			SRAM_operation();
 8000fb2:	f001 ffb9 	bl	8002f28 <SRAM_operation>
	for (uint8_t ADC_idx = 0; ADC_idx < 3; ADC_idx++) {
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d9e4      	bls.n	8000f8c <ADC_operation+0xc>
	}
	SRAM_check  = 1;
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <ADC_operation+0x54>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		}
		if(ADC_idx == 2)
			SRAM_operation();
	}
#endif
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000030c 	.word	0x2000030c

08000fd8 <ADC_READ>:
#endif

#if 1

uint16_t ADC_READ(uint8_t adc_num,uint8_t channel)
{
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b092      	sub	sp, #72	@ 0x48
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
	//	uint8_t txd_buf[30]={0};
	//	uint8_t status;
	//	uint16_t sensor_value = 0x7FFF;

	uint8_t rxd_buf[30]={0};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	831a      	strh	r2, [r3, #24]
	uint8_t wirestatus=0;
 8001000:	2300      	movs	r3, #0
 8001002:	72fb      	strb	r3, [r7, #11]
	float resistance = 0;
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t sum = 0;           // Sum for averaging
 800100a:	2300      	movs	r3, #0
 800100c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint16_t adchex=0;
 800100e:	2300      	movs	r3, #0
 8001010:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	float average = 0.0;        // Average value
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c


	txd_buf[0] = 0x40; // To write data from 0 register
 800101a:	4b94      	ldr	r3, [pc, #592]	@ (800126c <ADC_READ+0x294>)
 800101c:	2240      	movs	r2, #64	@ 0x40
 800101e:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x11;	//	Number of register to write
 8001020:	4b92      	ldr	r3, [pc, #584]	@ (800126c <ADC_READ+0x294>)
 8001022:	2211      	movs	r2, #17
 8001024:	705a      	strb	r2, [r3, #1]
	// Register 0x00: Device ID (read-only, value is reserved or device-specific)
	txd_buf[2] = 0x0C; // Device ID
 8001026:	4b91      	ldr	r3, [pc, #580]	@ (800126c <ADC_READ+0x294>)
 8001028:	220c      	movs	r2, #12
 800102a:	709a      	strb	r2, [r3, #2]

	// Register 0x01: STATUS (status flags and ready indicator, typically read-only)
	txd_buf[3] = 0x00; // Placeholder, this is usually not written as it’s read-only
 800102c:	4b8f      	ldr	r3, [pc, #572]	@ (800126c <ADC_READ+0x294>)
 800102e:	2200      	movs	r2, #0
 8001030:	70da      	strb	r2, [r3, #3]

	// Register 0x02: INPMUX (input multiplexer configuration for RTD leg selection)
	txd_buf[4] = 0x76; // Configures the input multiplexer (MUXP and MUXN) for specific RTD connections
 8001032:	4b8e      	ldr	r3, [pc, #568]	@ (800126c <ADC_READ+0x294>)
 8001034:	2276      	movs	r2, #118	@ 0x76
 8001036:	711a      	strb	r2, [r3, #4]

	// Register 0x03: PGA (programmable gain amplifier configuration)
	txd_buf[5] = 0xEA; // Sets PGA gain = 1, enabling precise low-signal measurement
 8001038:	4b8c      	ldr	r3, [pc, #560]	@ (800126c <ADC_READ+0x294>)
 800103a:	22ea      	movs	r2, #234	@ 0xea
 800103c:	715a      	strb	r2, [r3, #5]

	// Register 0x04: DATARATE (data rate and conversion settings)
	txd_buf[6] = 0x1E; // Sets data rate to 4000 SPS and other configurations
 800103e:	4b8b      	ldr	r3, [pc, #556]	@ (800126c <ADC_READ+0x294>)
 8001040:	221e      	movs	r2, #30
 8001042:	719a      	strb	r2, [r3, #6]

	// Register 0x05: REF (reference voltage configuration)
	txd_buf[7] = 0x82; // Reference configuration (enable internal/external reference, etc.)
 8001044:	4b89      	ldr	r3, [pc, #548]	@ (800126c <ADC_READ+0x294>)
 8001046:	2282      	movs	r2, #130	@ 0x82
 8001048:	71da      	strb	r2, [r3, #7]

	// Register 0x06: IDACMAG (IDAC magnitude configuration)
	txd_buf[8] = 0x87; // Configures excitation current for RTD measurement
 800104a:	4b88      	ldr	r3, [pc, #544]	@ (800126c <ADC_READ+0x294>)
 800104c:	2287      	movs	r2, #135	@ 0x87
 800104e:	721a      	strb	r2, [r3, #8]

	// Register 0x07: IDACMUX (routes IDAC currents to specific pins)
	txd_buf[9] = 0xFB; // Routes IDAC currents to appropriate RTD pins
 8001050:	4b86      	ldr	r3, [pc, #536]	@ (800126c <ADC_READ+0x294>)
 8001052:	22fb      	movs	r2, #251	@ 0xfb
 8001054:	725a      	strb	r2, [r3, #9]

	// Register 0x08: VBIAS (voltage bias configuration)
	txd_buf[10] = 0x00; // Disables voltage bias
 8001056:	4b85      	ldr	r3, [pc, #532]	@ (800126c <ADC_READ+0x294>)
 8001058:	2200      	movs	r2, #0
 800105a:	729a      	strb	r2, [r3, #10]

	// Register 0x09: SYS (system configuration, including timeout and calibration settings)
	txd_buf[11] = 0x10; // Configures timeout and calibration sample averaging
 800105c:	4b83      	ldr	r3, [pc, #524]	@ (800126c <ADC_READ+0x294>)
 800105e:	2210      	movs	r2, #16
 8001060:	72da      	strb	r2, [r3, #11]

	// Registers 0x0A to 0x0F: Reserved or calibration-related (placeholders in this code)
	txd_buf[12] = 0x00; // Placeholder
 8001062:	4b82      	ldr	r3, [pc, #520]	@ (800126c <ADC_READ+0x294>)
 8001064:	2200      	movs	r2, #0
 8001066:	731a      	strb	r2, [r3, #12]
	txd_buf[13] = 0x00; // Placeholder
 8001068:	4b80      	ldr	r3, [pc, #512]	@ (800126c <ADC_READ+0x294>)
 800106a:	2200      	movs	r2, #0
 800106c:	735a      	strb	r2, [r3, #13]
	txd_buf[14] = 0x00; // Placeholder
 800106e:	4b7f      	ldr	r3, [pc, #508]	@ (800126c <ADC_READ+0x294>)
 8001070:	2200      	movs	r2, #0
 8001072:	739a      	strb	r2, [r3, #14]
	txd_buf[15] = 0x00; // Placeholder
 8001074:	4b7d      	ldr	r3, [pc, #500]	@ (800126c <ADC_READ+0x294>)
 8001076:	2200      	movs	r2, #0
 8001078:	73da      	strb	r2, [r3, #15]
	txd_buf[16] = 0x00; // Placeholder
 800107a:	4b7c      	ldr	r3, [pc, #496]	@ (800126c <ADC_READ+0x294>)
 800107c:	2200      	movs	r2, #0
 800107e:	741a      	strb	r2, [r3, #16]

	// Register 0x10: GPIODAT (GPIO data configuration)
	txd_buf[17] = 0x40; // Configures GPIO pin states
 8001080:	4b7a      	ldr	r3, [pc, #488]	@ (800126c <ADC_READ+0x294>)
 8001082:	2240      	movs	r2, #64	@ 0x40
 8001084:	745a      	strb	r2, [r3, #17]

	// Registers 0x11 to 0x14: Placeholder or unused
	txd_buf[18] = 0x00; // Placeholder
 8001086:	4b79      	ldr	r3, [pc, #484]	@ (800126c <ADC_READ+0x294>)
 8001088:	2200      	movs	r2, #0
 800108a:	749a      	strb	r2, [r3, #18]
	txd_buf[19] = 0x00; // Placeholder
 800108c:	4b77      	ldr	r3, [pc, #476]	@ (800126c <ADC_READ+0x294>)
 800108e:	2200      	movs	r2, #0
 8001090:	74da      	strb	r2, [r3, #19]
	txd_buf[20] = 0x00; // Placeholder
 8001092:	4b76      	ldr	r3, [pc, #472]	@ (800126c <ADC_READ+0x294>)
 8001094:	2200      	movs	r2, #0
 8001096:	751a      	strb	r2, [r3, #20]

	// Note: txd_buf[18] is redundantly assigned. The last assignment will overwrite earlier ones.
	txd_buf[18] = 0x00; // Redundant; ensure this matches intended use.
 8001098:	4b74      	ldr	r3, [pc, #464]	@ (800126c <ADC_READ+0x294>)
 800109a:	2200      	movs	r2, #0
 800109c:	749a      	strb	r2, [r3, #18]

	switch(channel)
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d827      	bhi.n	80010f4 <ADC_READ+0x11c>
 80010a4:	a201      	add	r2, pc, #4	@ (adr r2, 80010ac <ADC_READ+0xd4>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010cb 	.word	0x080010cb
 80010b4:	080010d9 	.word	0x080010d9
 80010b8:	080010e7 	.word	0x080010e7
	{
	case CHANNEL_1:
		txd_buf[4] = 0x43;// Input MUX for RTD legs selection (MUX configuration)
 80010bc:	4b6b      	ldr	r3, [pc, #428]	@ (800126c <ADC_READ+0x294>)
 80010be:	2243      	movs	r2, #67	@ 0x43
 80010c0:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf5; // IDAC MUX
 80010c2:	4b6a      	ldr	r3, [pc, #424]	@ (800126c <ADC_READ+0x294>)
 80010c4:	22f5      	movs	r2, #245	@ 0xf5
 80010c6:	725a      	strb	r2, [r3, #9]
		break;
 80010c8:	e014      	b.n	80010f4 <ADC_READ+0x11c>

	case CHANNEL_2:
		txd_buf[4] = 0x10; // Input MUX for RTD legs selection (MUX configuration)
 80010ca:	4b68      	ldr	r3, [pc, #416]	@ (800126c <ADC_READ+0x294>)
 80010cc:	2210      	movs	r2, #16
 80010ce:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf2; // IDAC MUX
 80010d0:	4b66      	ldr	r3, [pc, #408]	@ (800126c <ADC_READ+0x294>)
 80010d2:	22f2      	movs	r2, #242	@ 0xf2
 80010d4:	725a      	strb	r2, [r3, #9]
		break;
 80010d6:	e00d      	b.n	80010f4 <ADC_READ+0x11c>

	case CHANNEL_3:
		txd_buf[4] = 0x9A; // Input MUX for RTD legs selection (MUX configuration)
 80010d8:	4b64      	ldr	r3, [pc, #400]	@ (800126c <ADC_READ+0x294>)
 80010da:	229a      	movs	r2, #154	@ 0x9a
 80010dc:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xf8; // IDAC MUX
 80010de:	4b63      	ldr	r3, [pc, #396]	@ (800126c <ADC_READ+0x294>)
 80010e0:	22f8      	movs	r2, #248	@ 0xf8
 80010e2:	725a      	strb	r2, [r3, #9]
		break;
 80010e4:	e006      	b.n	80010f4 <ADC_READ+0x11c>
	case CHANNEL_4:
		txd_buf[4] = 0x76; // Input MUX for RTD legs selection (MUX configuration)
 80010e6:	4b61      	ldr	r3, [pc, #388]	@ (800126c <ADC_READ+0x294>)
 80010e8:	2276      	movs	r2, #118	@ 0x76
 80010ea:	711a      	strb	r2, [r3, #4]
		txd_buf[9] = 0xfb;// IDAC MUX
 80010ec:	4b5f      	ldr	r3, [pc, #380]	@ (800126c <ADC_READ+0x294>)
 80010ee:	22fb      	movs	r2, #251	@ 0xfb
 80010f0:	725a      	strb	r2, [r3, #9]
		break;
 80010f2:	bf00      	nop
	}

	switch(adc_num)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	f000 83ec 	beq.w	80018d4 <ADC_READ+0x8fc>
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	f300 85b1 	bgt.w	8001c64 <ADC_READ+0xc8c>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <ADC_READ+0x138>
 8001106:	2b01      	cmp	r3, #1
 8001108:	f000 81e8 	beq.w	80014dc <ADC_READ+0x504>
 800110c:	f000 bdaa 	b.w	8001c64 <ADC_READ+0xc8c>
	{
	case ADC_1:

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	4856      	ldr	r0, [pc, #344]	@ (8001270 <ADC_READ+0x298>)
 8001116:	f004 fd9f 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001120:	4853      	ldr	r0, [pc, #332]	@ (8001270 <ADC_READ+0x298>)
 8001122:	f004 fd99 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2104      	movs	r1, #4
 800112a:	4852      	ldr	r0, [pc, #328]	@ (8001274 <ADC_READ+0x29c>)
 800112c:	f004 fd94 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RESET_1_Pin, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	2104      	movs	r1, #4
 8001134:	484f      	ldr	r0, [pc, #316]	@ (8001274 <ADC_READ+0x29c>)
 8001136:	f004 fd8f 	bl	8005c58 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2140      	movs	r1, #64	@ 0x40
 800113e:	484c      	ldr	r0, [pc, #304]	@ (8001270 <ADC_READ+0x298>)
 8001140:	f004 fd8a 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	2213      	movs	r2, #19
 800114a:	4948      	ldr	r1, [pc, #288]	@ (800126c <ADC_READ+0x294>)
 800114c:	484a      	ldr	r0, [pc, #296]	@ (8001278 <ADC_READ+0x2a0>)
 800114e:	f00b fe27 	bl	800cda0 <HAL_SPI_Transmit>
		HAL_Delay(1); // don't touch
 8001152:	2001      	movs	r0, #1
 8001154:	f004 f9bc 	bl	80054d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	2140      	movs	r1, #64	@ 0x40
 800115c:	4844      	ldr	r0, [pc, #272]	@ (8001270 <ADC_READ+0x298>)
 800115e:	f004 fd7b 	bl	8005c58 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOF, START_1_Pin, 1);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001168:	4841      	ldr	r0, [pc, #260]	@ (8001270 <ADC_READ+0x298>)
 800116a:	f004 fd75 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_Delay(1); // don't touch
 800116e:	2001      	movs	r0, #1
 8001170:	f004 f9ae 	bl	80054d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2140      	movs	r1, #64	@ 0x40
 8001178:	483d      	ldr	r0, [pc, #244]	@ (8001270 <ADC_READ+0x298>)
 800117a:	f004 fd6d 	bl	8005c58 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19; // self offset calibration
 800117e:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <ADC_READ+0x294>)
 8001180:	2219      	movs	r2, #25
 8001182:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2201      	movs	r2, #1
 800118a:	4938      	ldr	r1, [pc, #224]	@ (800126c <ADC_READ+0x294>)
 800118c:	483a      	ldr	r0, [pc, #232]	@ (8001278 <ADC_READ+0x2a0>)
 800118e:	f00b fe07 	bl	800cda0 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	2140      	movs	r1, #64	@ 0x40
 8001196:	4836      	ldr	r0, [pc, #216]	@ (8001270 <ADC_READ+0x298>)
 8001198:	f004 fd5e 	bl	8005c58 <HAL_GPIO_WritePin>

		HAL_Delay(wait_time);
 800119c:	4b37      	ldr	r3, [pc, #220]	@ (800127c <ADC_READ+0x2a4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 f995 	bl	80054d0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2140      	movs	r1, #64	@ 0x40
 80011aa:	4831      	ldr	r0, [pc, #196]	@ (8001270 <ADC_READ+0x298>)
 80011ac:	f004 fd54 	bl	8005c58 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 80011b0:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <ADC_READ+0x294>)
 80011b2:	2213      	movs	r2, #19
 80011b4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 10; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011ba:	e070      	b.n	800129e <ADC_READ+0x2c6>
		{
			HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 1, 0xFFFF);
 80011bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c0:	2201      	movs	r2, #1
 80011c2:	492a      	ldr	r1, [pc, #168]	@ (800126c <ADC_READ+0x294>)
 80011c4:	482c      	ldr	r0, [pc, #176]	@ (8001278 <ADC_READ+0x2a0>)
 80011c6:	f00b fdeb 	bl	800cda0 <HAL_SPI_Transmit>
			HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f004 f980 	bl	80054d0 <HAL_Delay>
			HAL_SPI_Receive(&hspi5, (uint8_t*) &reg_data_ADC_1[i], 0x2, 0xFFFF);
 80011d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001280 <ADC_READ+0x2a8>)
 80011d6:	1899      	adds	r1, r3, r2
 80011d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011dc:	2202      	movs	r2, #2
 80011de:	4826      	ldr	r0, [pc, #152]	@ (8001278 <ADC_READ+0x2a0>)
 80011e0:	f00b fff4 	bl	800d1cc <HAL_SPI_Receive>
			HAL_Delay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f004 f973 	bl	80054d0 <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_1[i] = (reg_data_ADC_1[i] >> 8) | (reg_data_ADC_1[i] << 8);
 80011ea:	4a25      	ldr	r2, [pc, #148]	@ (8001280 <ADC_READ+0x2a8>)
 80011ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4921      	ldr	r1, [pc, #132]	@ (8001280 <ADC_READ+0x2a8>)
 80011fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	b299      	uxth	r1, r3
 800120a:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <ADC_READ+0x2a8>)
 800120c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800120e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

#ifdef RAND_VAL_CHK
			if(i > 0)
 8001212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd37      	ble.n	8001288 <ADC_READ+0x2b0>
			{
				if(((reg_data_ADC_1[i]-reg_data_ADC_1[i-1])<2)||((reg_data_ADC_1[i-1]-reg_data_ADC_1[i])<2))
 8001218:	4a19      	ldr	r2, [pc, #100]	@ (8001280 <ADC_READ+0x2a8>)
 800121a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800121c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001220:	4619      	mov	r1, r3
 8001222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001224:	3b01      	subs	r3, #1
 8001226:	4a16      	ldr	r2, [pc, #88]	@ (8001280 <ADC_READ+0x2a8>)
 8001228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800122c:	1acb      	subs	r3, r1, r3
 800122e:	2b01      	cmp	r3, #1
 8001230:	dd0c      	ble.n	800124c <ADC_READ+0x274>
 8001232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001234:	3b01      	subs	r3, #1
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <ADC_READ+0x2a8>)
 8001238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123c:	4619      	mov	r1, r3
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <ADC_READ+0x2a8>)
 8001240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001246:	1acb      	subs	r3, r1, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	dc08      	bgt.n	800125e <ADC_READ+0x286>
				{
					sum += reg_data_ADC_1[i];
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <ADC_READ+0x2a8>)
 800124e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001254:	461a      	mov	r2, r3
 8001256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001258:	4413      	add	r3, r2
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
 800125c:	e01c      	b.n	8001298 <ADC_READ+0x2c0>
				}
				else
				{
					diff_count++;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <ADC_READ+0x2ac>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <ADC_READ+0x2ac>)
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e015      	b.n	8001298 <ADC_READ+0x2c0>
 800126c:	200002ac 	.word	0x200002ac
 8001270:	42021400 	.word	0x42021400
 8001274:	42020800 	.word	0x42020800
 8001278:	20005840 	.word	0x20005840
 800127c:	20000000 	.word	0x20000000
 8001280:	200002d0 	.word	0x200002d0
 8001284:	2000030d 	.word	0x2000030d
				}
			}
			else
			{
				sum += reg_data_ADC_1[i];
 8001288:	4ac5      	ldr	r2, [pc, #788]	@ (80015a0 <ADC_READ+0x5c8>)
 800128a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800128c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001290:	461a      	mov	r2, r3
 8001292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001294:	4413      	add	r3, r2
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 8001298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800129a:	3301      	adds	r3, #1
 800129c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800129e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	dd8b      	ble.n	80011bc <ADC_READ+0x1e4>
			}

		}

		if(diff_count > 5) sum =0;
 80012a4:	4bbf      	ldr	r3, [pc, #764]	@ (80015a4 <ADC_READ+0x5cc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d901      	bls.n	80012b0 <ADC_READ+0x2d8>
 80012ac:	2300      	movs	r3, #0
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
		diff_count=0;
 80012b0:	4bbc      	ldr	r3, [pc, #752]	@ (80015a4 <ADC_READ+0x5cc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]

		sum += reg_data_ADC_1[i];  // Add to sum for averaging
	}
#endif

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2140      	movs	r1, #64	@ 0x40
 80012ba:	48bb      	ldr	r0, [pc, #748]	@ (80015a8 <ADC_READ+0x5d0>)
 80012bc:	f004 fccc 	bl	8005c58 <HAL_GPIO_WritePin>

	average = sum / 10.0;
 80012c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80012c2:	f7ff f92f 	bl	8000524 <__aeabi_ui2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4bb8      	ldr	r3, [pc, #736]	@ (80015ac <ADC_READ+0x5d4>)
 80012cc:	f7ff face 	bl	800086c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc76 	bl	8000bc8 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	adchex  = sum / 10;
 80012e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012e2:	4ab3      	ldr	r2, [pc, #716]	@ (80015b0 <ADC_READ+0x5d8>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 80012ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012f2:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 80015b4 <ADC_READ+0x5dc>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80012fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001302:	eddf 6aad 	vldr	s13, [pc, #692]	@ 80015b8 <ADC_READ+0x5e0>
 8001306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	//Callendar-Van Dusen Equation
	if (resistance >= R0) {  // Above 0°C
 800130e:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80015bc <ADC_READ+0x5e4>
 8001312:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	db50      	blt.n	80013c2 <ADC_READ+0x3ea>
		temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 8001320:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 80015c0 <ADC_READ+0x5e8>
 8001324:	eef1 7a67 	vneg.f32	s15, s15
 8001328:	ee17 3a90 	vmov	r3, s15
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f91b 	bl	8000568 <__aeabi_f2d>
 8001332:	4604      	mov	r4, r0
 8001334:	460d      	mov	r5, r1
 8001336:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80015c0 <ADC_READ+0x5e8>
 800133a:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 80015c0 <ADC_READ+0x5e8>
 800133e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001342:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 80015c4 <ADC_READ+0x5ec>
 8001346:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800134a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800134e:	eddf 5a9b 	vldr	s11, [pc, #620]	@ 80015bc <ADC_READ+0x5e4>
 8001352:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8001356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800135a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800135e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136a:	ee17 0a90 	vmov	r0, s15
 800136e:	f7ff f8fb 	bl	8000568 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	ec43 2b10 	vmov	d0, r2, r3
 800137a:	f011 fd49 	bl	8012e10 <sqrt>
 800137e:	ec53 2b10 	vmov	r2, r3, d0
 8001382:	4620      	mov	r0, r4
 8001384:	4629      	mov	r1, r5
 8001386:	f7fe ff91 	bl	80002ac <__adddf3>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4614      	mov	r4, r2
 8001390:	461d      	mov	r5, r3
 8001392:	eddf 7a8c 	vldr	s15, [pc, #560]	@ 80015c4 <ADC_READ+0x5ec>
 8001396:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800139a:	ee17 0a90 	vmov	r0, s15
 800139e:	f7ff f8e3 	bl	8000568 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7ff fa5f 	bl	800086c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fc07 	bl	8000bc8 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a82      	ldr	r2, [pc, #520]	@ (80015c8 <ADC_READ+0x5f0>)
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e017      	b.n	80013f2 <ADC_READ+0x41a>
	}
	else
	{  // Below 0°C, use simpler approximation
		temperature = (resistance - R0) / 0.385;
 80013c2:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80015bc <ADC_READ+0x5e4>
 80013c6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ce:	ee17 0a90 	vmov	r0, s15
 80013d2:	f7ff f8c9 	bl	8000568 <__aeabi_f2d>
 80013d6:	a370      	add	r3, pc, #448	@ (adr r3, 8001598 <ADC_READ+0x5c0>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff fa46 	bl	800086c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbee 	bl	8000bc8 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a76      	ldr	r2, [pc, #472]	@ (80015c8 <ADC_READ+0x5f0>)
 80013f0:	6013      	str	r3, [r2, #0]
	}

	if(rxd_buf[7]==txd_buf[9])
 80013f2:	7cfa      	ldrb	r2, [r7, #19]
 80013f4:	4b75      	ldr	r3, [pc, #468]	@ (80015cc <ADC_READ+0x5f4>)
 80013f6:	7a5b      	ldrb	r3, [r3, #9]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10e      	bne.n	800141a <ADC_READ+0x442>
	{
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 1); // Toggle LED for visual feedback
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001402:	4873      	ldr	r0, [pc, #460]	@ (80015d0 <ADC_READ+0x5f8>)
 8001404:	f004 fc28 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f004 f861 	bl	80054d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001414:	486e      	ldr	r0, [pc, #440]	@ (80015d0 <ADC_READ+0x5f8>)
 8001416:	f004 fc1f 	bl	8005c58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
#endif

#ifdef WIREBREAK

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2140      	movs	r1, #64	@ 0x40
 800141e:	4862      	ldr	r0, [pc, #392]	@ (80015a8 <ADC_READ+0x5d0>)
 8001420:	f004 fc1a 	bl	8005c58 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x21;
 8001424:	4b69      	ldr	r3, [pc, #420]	@ (80015cc <ADC_READ+0x5f4>)
 8001426:	2221      	movs	r2, #33	@ 0x21
 8001428:	701a      	strb	r2, [r3, #0]
	txd_buf[1] = 0x00;
 800142a:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <ADC_READ+0x5f4>)
 800142c:	2200      	movs	r2, #0
 800142e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5, (uint8_t*) &txd_buf, 2, 0xFFFF);
 8001430:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001434:	2202      	movs	r2, #2
 8001436:	4965      	ldr	r1, [pc, #404]	@ (80015cc <ADC_READ+0x5f4>)
 8001438:	4866      	ldr	r0, [pc, #408]	@ (80015d4 <ADC_READ+0x5fc>)
 800143a:	f00b fcb1 	bl	800cda0 <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_SPI_Receive(&hspi5, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 800143e:	f107 010b 	add.w	r1, r7, #11
 8001442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001446:	2201      	movs	r2, #1
 8001448:	4862      	ldr	r0, [pc, #392]	@ (80015d4 <ADC_READ+0x5fc>)
 800144a:	f00b febf 	bl	800d1cc <HAL_SPI_Receive>
//	HAL_Delay(1);

	HAL_GPIO_WritePin(GPIOF, CS_1_Pin, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	2140      	movs	r1, #64	@ 0x40
 8001452:	4855      	ldr	r0, [pc, #340]	@ (80015a8 <ADC_READ+0x5d0>)
 8001454:	f004 fc00 	bl	8005c58 <HAL_GPIO_WritePin>

	if (wire_break(wirestatus))
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fc28 	bl	8001cb0 <wire_break>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00e      	beq.n	8001484 <ADC_READ+0x4ac>
	{
		wirestatus=0;
 8001466:	2300      	movs	r3, #0
 8001468:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 800146a:	4b57      	ldr	r3, [pc, #348]	@ (80015c8 <ADC_READ+0x5f0>)
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
		adchex =0;
 8001472:	2300      	movs	r3, #0
 8001474:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 8001478:	2214      	movs	r2, #20
 800147a:	2100      	movs	r1, #0
 800147c:	4848      	ldr	r0, [pc, #288]	@ (80015a0 <ADC_READ+0x5c8>)
 800147e:	f00f fbd0 	bl	8010c22 <memset>
 8001482:	e015      	b.n	80014b0 <ADC_READ+0x4d8>
	}
	else if(check_sensor_validity(adchex))
 8001484:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fbf9 	bl	8001c80 <check_sensor_validity>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00d      	beq.n	80014b0 <ADC_READ+0x4d8>
	{
		wirestatus=0;
 8001494:	2300      	movs	r3, #0
 8001496:	72fb      	strb	r3, [r7, #11]
		temperature = 0;
 8001498:	4b4b      	ldr	r3, [pc, #300]	@ (80015c8 <ADC_READ+0x5f0>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
		adchex =0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		memset(&reg_data_ADC_1,0,sizeof(reg_data_ADC_1));
 80014a6:	2214      	movs	r2, #20
 80014a8:	2100      	movs	r1, #0
 80014aa:	483d      	ldr	r0, [pc, #244]	@ (80015a0 <ADC_READ+0x5c8>)
 80014ac:	f00f fbb9 	bl	8010c22 <memset>
	}
	wirestatus=0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	72fb      	strb	r3, [r7, #11]

#endif
	temp_sensor[adc_num][channel] = temperature ;
 80014b4:	79f9      	ldrb	r1, [r7, #7]
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	4a43      	ldr	r2, [pc, #268]	@ (80015c8 <ADC_READ+0x5f0>)
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	4846      	ldr	r0, [pc, #280]	@ (80015d8 <ADC_READ+0x600>)
 80014be:	0089      	lsls	r1, r1, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4403      	add	r3, r0
 80014c6:	601a      	str	r2, [r3, #0]
	sensor_hex[adc_num][channel] = 	adchex ;
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	4943      	ldr	r1, [pc, #268]	@ (80015dc <ADC_READ+0x604>)
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80014d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	//		sensor_value =	sum / 10;
	break;
 80014da:	e3c3      	b.n	8001c64 <ADC_READ+0xc8c>

	case ADC_2:

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014e2:	483f      	ldr	r0, [pc, #252]	@ (80015e0 <ADC_READ+0x608>)
 80014e4:	f004 fbb8 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2140      	movs	r1, #64	@ 0x40
 80014ec:	483d      	ldr	r0, [pc, #244]	@ (80015e4 <ADC_READ+0x60c>)
 80014ee:	f004 fbb3 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014f8:	483a      	ldr	r0, [pc, #232]	@ (80015e4 <ADC_READ+0x60c>)
 80014fa:	f004 fbad 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, RESET_2_Pin, 1);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001504:	4837      	ldr	r0, [pc, #220]	@ (80015e4 <ADC_READ+0x60c>)
 8001506:	f004 fba7 	bl	8005c58 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001510:	4833      	ldr	r0, [pc, #204]	@ (80015e0 <ADC_READ+0x608>)
 8001512:	f004 fba1 	bl	8005c58 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	2213      	movs	r2, #19
 800151c:	492b      	ldr	r1, [pc, #172]	@ (80015cc <ADC_READ+0x5f4>)
 800151e:	4832      	ldr	r0, [pc, #200]	@ (80015e8 <ADC_READ+0x610>)
 8001520:	f00b fc3e 	bl	800cda0 <HAL_SPI_Transmit>
		HAL_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f003 ffd3 	bl	80054d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001530:	482b      	ldr	r0, [pc, #172]	@ (80015e0 <ADC_READ+0x608>)
 8001532:	f004 fb91 	bl	8005c58 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOG, START_2_Pin, 1);
 8001536:	2201      	movs	r2, #1
 8001538:	2140      	movs	r1, #64	@ 0x40
 800153a:	482a      	ldr	r0, [pc, #168]	@ (80015e4 <ADC_READ+0x60c>)
 800153c:	f004 fb8c 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f003 ffc5 	bl	80054d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800154c:	4824      	ldr	r0, [pc, #144]	@ (80015e0 <ADC_READ+0x608>)
 800154e:	f004 fb83 	bl	8005c58 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x19;
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <ADC_READ+0x5f4>)
 8001554:	2219      	movs	r2, #25
 8001556:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	2201      	movs	r2, #1
 800155e:	491b      	ldr	r1, [pc, #108]	@ (80015cc <ADC_READ+0x5f4>)
 8001560:	4821      	ldr	r0, [pc, #132]	@ (80015e8 <ADC_READ+0x610>)
 8001562:	f00b fc1d 	bl	800cda0 <HAL_SPI_Transmit>
//		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800156c:	481c      	ldr	r0, [pc, #112]	@ (80015e0 <ADC_READ+0x608>)
 800156e:	f004 fb73 	bl	8005c58 <HAL_GPIO_WritePin>


		HAL_Delay(wait_time);
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <ADC_READ+0x614>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f003 ffaa 	bl	80054d0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001582:	4817      	ldr	r0, [pc, #92]	@ (80015e0 <ADC_READ+0x608>)
 8001584:	f004 fb68 	bl	8005c58 <HAL_GPIO_WritePin>
		txd_buf[0] = 0x13;
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <ADC_READ+0x5f4>)
 800158a:	2213      	movs	r2, #19
 800158c:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < 10; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001592:	e063      	b.n	800165c <ADC_READ+0x684>
 8001594:	f3af 8000 	nop.w
 8001598:	0a3d70a4 	.word	0x0a3d70a4
 800159c:	3fd8a3d7 	.word	0x3fd8a3d7
 80015a0:	200002d0 	.word	0x200002d0
 80015a4:	2000030d 	.word	0x2000030d
 80015a8:	42021400 	.word	0x42021400
 80015ac:	40240000 	.word	0x40240000
 80015b0:	cccccccd 	.word	0xcccccccd
 80015b4:	44fa0000 	.word	0x44fa0000
 80015b8:	477fff00 	.word	0x477fff00
 80015bc:	42c80000 	.word	0x42c80000
 80015c0:	3b801132 	.word	0x3b801132
 80015c4:	b51b057f 	.word	0xb51b057f
 80015c8:	200002cc 	.word	0x200002cc
 80015cc:	200002ac 	.word	0x200002ac
 80015d0:	42021000 	.word	0x42021000
 80015d4:	20005840 	.word	0x20005840
 80015d8:	20000310 	.word	0x20000310
 80015dc:	20000340 	.word	0x20000340
 80015e0:	42020400 	.word	0x42020400
 80015e4:	42021800 	.word	0x42021800
 80015e8:	20005720 	.word	0x20005720
 80015ec:	20000000 	.word	0x20000000
		{
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 1, 0xFFFF);
 80015f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f4:	2201      	movs	r2, #1
 80015f6:	49a8      	ldr	r1, [pc, #672]	@ (8001898 <ADC_READ+0x8c0>)
 80015f8:	48a8      	ldr	r0, [pc, #672]	@ (800189c <ADC_READ+0x8c4>)
 80015fa:	f00b fbd1 	bl	800cda0 <HAL_SPI_Transmit>
			HAL_Delay(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f003 ff66 	bl	80054d0 <HAL_Delay>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &reg_data_ADC_2[i], 0x2, 0xFFFF);
 8001604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4aa5      	ldr	r2, [pc, #660]	@ (80018a0 <ADC_READ+0x8c8>)
 800160a:	1899      	adds	r1, r3, r2
 800160c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001610:	2202      	movs	r2, #2
 8001612:	48a2      	ldr	r0, [pc, #648]	@ (800189c <ADC_READ+0x8c4>)
 8001614:	f00b fdda 	bl	800d1cc <HAL_SPI_Receive>
			HAL_Delay(1);
 8001618:	2001      	movs	r0, #1
 800161a:	f003 ff59 	bl	80054d0 <HAL_Delay>
			// Byte-wise flip
			reg_data_ADC_2[i] = (reg_data_ADC_2[i] >> 8) | (reg_data_ADC_2[i] << 8);
 800161e:	4aa0      	ldr	r2, [pc, #640]	@ (80018a0 <ADC_READ+0x8c8>)
 8001620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21a      	sxth	r2, r3
 800162c:	499c      	ldr	r1, [pc, #624]	@ (80018a0 <ADC_READ+0x8c8>)
 800162e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001630:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	b299      	uxth	r1, r3
 800163e:	4a98      	ldr	r2, [pc, #608]	@ (80018a0 <ADC_READ+0x8c8>)
 8001640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if(diff_count > 5) sum =0;
		diff_count=0;
#else

		sum += reg_data_ADC_2[i];  // Add to sum for averaging
 8001646:	4a96      	ldr	r2, [pc, #600]	@ (80018a0 <ADC_READ+0x8c8>)
 8001648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800164a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164e:	461a      	mov	r2, r3
 8001650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001652:	4413      	add	r3, r2
 8001654:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 10; i++)
 8001656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001658:	3301      	adds	r3, #1
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800165c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800165e:	2b09      	cmp	r3, #9
 8001660:	ddc6      	ble.n	80015f0 <ADC_READ+0x618>
}
#endif

adchex =  sum / 10;
 8001662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001664:	4a8f      	ldr	r2, [pc, #572]	@ (80018a4 <ADC_READ+0x8cc>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 8001670:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001672:	f7fe ff57 	bl	8000524 <__aeabi_ui2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b8b      	ldr	r3, [pc, #556]	@ (80018a8 <ADC_READ+0x8d0>)
 800167c:	f7ff f8f6 	bl	800086c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa9e 	bl	8000bc8 <__aeabi_d2f>
 800168c:	4603      	mov	r3, r0
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001696:	4885      	ldr	r0, [pc, #532]	@ (80018ac <ADC_READ+0x8d4>)
 8001698:	f004 fade 	bl	8005c58 <HAL_GPIO_WritePin>

resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 800169c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016a0:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80018b0 <ADC_READ+0x8d8>
 80016a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80016ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016b0:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80018b4 <ADC_READ+0x8dc>
 80016b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 80016bc:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80018b8 <ADC_READ+0x8e0>
 80016c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80016c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	db50      	blt.n	8001770 <ADC_READ+0x798>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 80016ce:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 80018bc <ADC_READ+0x8e4>
 80016d2:	eef1 7a67 	vneg.f32	s15, s15
 80016d6:	ee17 3a90 	vmov	r3, s15
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff44 	bl	8000568 <__aeabi_f2d>
 80016e0:	4604      	mov	r4, r0
 80016e2:	460d      	mov	r5, r1
 80016e4:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80018bc <ADC_READ+0x8e4>
 80016e8:	eddf 7a74 	vldr	s15, [pc, #464]	@ 80018bc <ADC_READ+0x8e4>
 80016ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80018c0 <ADC_READ+0x8e8>
 80016f4:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80016f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016fc:	eddf 5a6e 	vldr	s11, [pc, #440]	@ 80018b8 <ADC_READ+0x8e0>
 8001700:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8001704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001708:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800170c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001718:	ee17 0a90 	vmov	r0, s15
 800171c:	f7fe ff24 	bl	8000568 <__aeabi_f2d>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	ec43 2b10 	vmov	d0, r2, r3
 8001728:	f011 fb72 	bl	8012e10 <sqrt>
 800172c:	ec53 2b10 	vmov	r2, r3, d0
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fdba 	bl	80002ac <__adddf3>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4614      	mov	r4, r2
 800173e:	461d      	mov	r5, r3
 8001740:	eddf 7a5f 	vldr	s15, [pc, #380]	@ 80018c0 <ADC_READ+0x8e8>
 8001744:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001748:	ee17 0a90 	vmov	r0, s15
 800174c:	f7fe ff0c 	bl	8000568 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	f7ff f888 	bl	800086c <__aeabi_ddiv>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff fa30 	bl	8000bc8 <__aeabi_d2f>
 8001768:	4603      	mov	r3, r0
 800176a:	4a56      	ldr	r2, [pc, #344]	@ (80018c4 <ADC_READ+0x8ec>)
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e017      	b.n	80017a0 <ADC_READ+0x7c8>
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 8001770:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80018b8 <ADC_READ+0x8e0>
 8001774:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800177c:	ee17 0a90 	vmov	r0, s15
 8001780:	f7fe fef2 	bl	8000568 <__aeabi_f2d>
 8001784:	a342      	add	r3, pc, #264	@ (adr r3, 8001890 <ADC_READ+0x8b8>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7ff f86f 	bl	800086c <__aeabi_ddiv>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff fa17 	bl	8000bc8 <__aeabi_d2f>
 800179a:	4603      	mov	r3, r0
 800179c:	4a49      	ldr	r2, [pc, #292]	@ (80018c4 <ADC_READ+0x8ec>)
 800179e:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9] )
 80017a0:	7cfa      	ldrb	r2, [r7, #19]
 80017a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001898 <ADC_READ+0x8c0>)
 80017a4:	7a5b      	ldrb	r3, [r3, #9]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d10e      	bne.n	80017c8 <ADC_READ+0x7f0>
{
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 1); // Toggle LED for visual feedback
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017b0:	4845      	ldr	r0, [pc, #276]	@ (80018c8 <ADC_READ+0x8f0>)
 80017b2:	f004 fa51 	bl	8005c58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f003 fe8a 	bl	80054d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED2_Pin, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017c2:	4841      	ldr	r0, [pc, #260]	@ (80018c8 <ADC_READ+0x8f0>)
 80017c4:	f004 fa48 	bl	8005c58 <HAL_GPIO_WritePin>
HAL_Delay(20);
#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ce:	4837      	ldr	r0, [pc, #220]	@ (80018ac <ADC_READ+0x8d4>)
 80017d0:	f004 fa42 	bl	8005c58 <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <ADC_READ+0x8c0>)
 80017d6:	2221      	movs	r2, #33	@ 0x21
 80017d8:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 80017da:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <ADC_READ+0x8c0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	705a      	strb	r2, [r3, #1]

HAL_SPI_Transmit(&hspi2, (uint8_t*) &txd_buf, 2, 0xFFFF);
 80017e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017e4:	2202      	movs	r2, #2
 80017e6:	492c      	ldr	r1, [pc, #176]	@ (8001898 <ADC_READ+0x8c0>)
 80017e8:	482c      	ldr	r0, [pc, #176]	@ (800189c <ADC_READ+0x8c4>)
 80017ea:	f00b fad9 	bl	800cda0 <HAL_SPI_Transmit>
//HAL_Delay(1);
HAL_SPI_Receive(&hspi2, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 80017ee:	f107 010b 	add.w	r1, r7, #11
 80017f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017f6:	2201      	movs	r2, #1
 80017f8:	4828      	ldr	r0, [pc, #160]	@ (800189c <ADC_READ+0x8c4>)
 80017fa:	f00b fce7 	bl	800d1cc <HAL_SPI_Receive>
//HAL_Delay(1);

HAL_GPIO_WritePin(GPIOB, CS_2_Pin, 1);
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001804:	4829      	ldr	r0, [pc, #164]	@ (80018ac <ADC_READ+0x8d4>)
 8001806:	f004 fa27 	bl	8005c58 <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 800180a:	7afb      	ldrb	r3, [r7, #11]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fa4f 	bl	8001cb0 <wire_break>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <ADC_READ+0x85e>
{
	wirestatus=0;
 8001818:	2300      	movs	r3, #0
 800181a:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800181c:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <ADC_READ+0x8ec>)
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
	adchex=0;
 8001824:	2300      	movs	r3, #0
 8001826:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 800182a:	2214      	movs	r2, #20
 800182c:	2100      	movs	r1, #0
 800182e:	481c      	ldr	r0, [pc, #112]	@ (80018a0 <ADC_READ+0x8c8>)
 8001830:	f00f f9f7 	bl	8010c22 <memset>
 8001834:	e015      	b.n	8001862 <ADC_READ+0x88a>
}
else if(check_sensor_validity(adchex))
 8001836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fa20 	bl	8001c80 <check_sensor_validity>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <ADC_READ+0x88a>
{
	wirestatus=0;
 8001846:	2300      	movs	r3, #0
 8001848:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <ADC_READ+0x8ec>)
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
	adchex =0;
 8001852:	2300      	movs	r3, #0
 8001854:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_2,0,sizeof(reg_data_ADC_2));
 8001858:	2214      	movs	r2, #20
 800185a:	2100      	movs	r1, #0
 800185c:	4810      	ldr	r0, [pc, #64]	@ (80018a0 <ADC_READ+0x8c8>)
 800185e:	f00f f9e0 	bl	8010c22 <memset>
}
wirestatus=0;
 8001862:	2300      	movs	r3, #0
 8001864:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 8001866:	79f9      	ldrb	r1, [r7, #7]
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	4a16      	ldr	r2, [pc, #88]	@ (80018c4 <ADC_READ+0x8ec>)
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4817      	ldr	r0, [pc, #92]	@ (80018cc <ADC_READ+0x8f4>)
 8001870:	0089      	lsls	r1, r1, #2
 8001872:	440b      	add	r3, r1
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4403      	add	r3, r0
 8001878:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	4914      	ldr	r1, [pc, #80]	@ (80018d0 <ADC_READ+0x8f8>)
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	4413      	add	r3, r2
 8001884:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8001888:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 800188c:	e1ea      	b.n	8001c64 <ADC_READ+0xc8c>
 800188e:	bf00      	nop
 8001890:	0a3d70a4 	.word	0x0a3d70a4
 8001894:	3fd8a3d7 	.word	0x3fd8a3d7
 8001898:	200002ac 	.word	0x200002ac
 800189c:	20005720 	.word	0x20005720
 80018a0:	200002e4 	.word	0x200002e4
 80018a4:	cccccccd 	.word	0xcccccccd
 80018a8:	40240000 	.word	0x40240000
 80018ac:	42020400 	.word	0x42020400
 80018b0:	44fa0000 	.word	0x44fa0000
 80018b4:	477fff00 	.word	0x477fff00
 80018b8:	42c80000 	.word	0x42c80000
 80018bc:	3b801132 	.word	0x3b801132
 80018c0:	b51b057f 	.word	0xb51b057f
 80018c4:	200002cc 	.word	0x200002cc
 80018c8:	42021000 	.word	0x42021000
 80018cc:	20000310 	.word	0x20000310
 80018d0:	20000340 	.word	0x20000340

case ADC_3:

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2110      	movs	r1, #16
 80018d8:	48bd      	ldr	r0, [pc, #756]	@ (8001bd0 <ADC_READ+0xbf8>)
 80018da:	f004 f9bd 	bl	8005c58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018e4:	48bb      	ldr	r0, [pc, #748]	@ (8001bd4 <ADC_READ+0xbfc>)
 80018e6:	f004 f9b7 	bl	8005c58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f0:	48b8      	ldr	r0, [pc, #736]	@ (8001bd4 <ADC_READ+0xbfc>)
 80018f2:	f004 f9b1 	bl	8005c58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RESET_3_Pin, 1);
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018fc:	48b5      	ldr	r0, [pc, #724]	@ (8001bd4 <ADC_READ+0xbfc>)
 80018fe:	f004 f9ab 	bl	8005c58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2110      	movs	r1, #16
 8001906:	48b2      	ldr	r0, [pc, #712]	@ (8001bd0 <ADC_READ+0xbf8>)
 8001908:	f004 f9a6 	bl	8005c58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf,0x13, HAL_MAX_DELAY);
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	2213      	movs	r2, #19
 8001912:	49b1      	ldr	r1, [pc, #708]	@ (8001bd8 <ADC_READ+0xc00>)
 8001914:	48b1      	ldr	r0, [pc, #708]	@ (8001bdc <ADC_READ+0xc04>)
 8001916:	f00b fa43 	bl	800cda0 <HAL_SPI_Transmit>
	HAL_Delay(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f003 fdd8 	bl	80054d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	2110      	movs	r1, #16
 8001924:	48aa      	ldr	r0, [pc, #680]	@ (8001bd0 <ADC_READ+0xbf8>)
 8001926:	f004 f997 	bl	8005c58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, START_3_Pin, 1);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001930:	48a8      	ldr	r0, [pc, #672]	@ (8001bd4 <ADC_READ+0xbfc>)
 8001932:	f004 f991 	bl	8005c58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001936:	2001      	movs	r0, #1
 8001938:	f003 fdca 	bl	80054d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2110      	movs	r1, #16
 8001940:	48a3      	ldr	r0, [pc, #652]	@ (8001bd0 <ADC_READ+0xbf8>)
 8001942:	f004 f989 	bl	8005c58 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x19;
 8001946:	4ba4      	ldr	r3, [pc, #656]	@ (8001bd8 <ADC_READ+0xc00>)
 8001948:	2219      	movs	r2, #25
 800194a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, HAL_MAX_DELAY);
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	2201      	movs	r2, #1
 8001952:	49a1      	ldr	r1, [pc, #644]	@ (8001bd8 <ADC_READ+0xc00>)
 8001954:	48a1      	ldr	r0, [pc, #644]	@ (8001bdc <ADC_READ+0xc04>)
 8001956:	f00b fa23 	bl	800cda0 <HAL_SPI_Transmit>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 800195a:	2201      	movs	r2, #1
 800195c:	2110      	movs	r1, #16
 800195e:	489c      	ldr	r0, [pc, #624]	@ (8001bd0 <ADC_READ+0xbf8>)
 8001960:	f004 f97a 	bl	8005c58 <HAL_GPIO_WritePin>

	HAL_Delay(wait_time);
 8001964:	4b9e      	ldr	r3, [pc, #632]	@ (8001be0 <ADC_READ+0xc08>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fdb1 	bl	80054d0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2110      	movs	r1, #16
 8001972:	4897      	ldr	r0, [pc, #604]	@ (8001bd0 <ADC_READ+0xbf8>)
 8001974:	f004 f970 	bl	8005c58 <HAL_GPIO_WritePin>
	txd_buf[0] = 0x13;
 8001978:	4b97      	ldr	r3, [pc, #604]	@ (8001bd8 <ADC_READ+0xc00>)
 800197a:	2213      	movs	r2, #19
 800197c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	637b      	str	r3, [r7, #52]	@ 0x34
 8001982:	e035      	b.n	80019f0 <ADC_READ+0xa18>
	{
		HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 1, 0xFFFF);
 8001984:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001988:	2201      	movs	r2, #1
 800198a:	4993      	ldr	r1, [pc, #588]	@ (8001bd8 <ADC_READ+0xc00>)
 800198c:	4893      	ldr	r0, [pc, #588]	@ (8001bdc <ADC_READ+0xc04>)
 800198e:	f00b fa07 	bl	800cda0 <HAL_SPI_Transmit>
		HAL_Delay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f003 fd9c 	bl	80054d0 <HAL_Delay>
		HAL_SPI_Receive(&hspi3, (uint8_t*) &reg_data_ADC_3[i], 0x2, 0xFFFF);
 8001998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4a91      	ldr	r2, [pc, #580]	@ (8001be4 <ADC_READ+0xc0c>)
 800199e:	1899      	adds	r1, r3, r2
 80019a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019a4:	2202      	movs	r2, #2
 80019a6:	488d      	ldr	r0, [pc, #564]	@ (8001bdc <ADC_READ+0xc04>)
 80019a8:	f00b fc10 	bl	800d1cc <HAL_SPI_Receive>
		HAL_Delay(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f003 fd8f 	bl	80054d0 <HAL_Delay>
		// Byte-wise flip
		reg_data_ADC_3[i] = (reg_data_ADC_3[i] >> 8) | (reg_data_ADC_3[i] << 8);
 80019b2:	4a8c      	ldr	r2, [pc, #560]	@ (8001be4 <ADC_READ+0xc0c>)
 80019b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b21a      	sxth	r2, r3
 80019c0:	4988      	ldr	r1, [pc, #544]	@ (8001be4 <ADC_READ+0xc0c>)
 80019c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b21b      	sxth	r3, r3
 80019d0:	b299      	uxth	r1, r3
 80019d2:	4a84      	ldr	r2, [pc, #528]	@ (8001be4 <ADC_READ+0xc0c>)
 80019d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if(diff_count > 5) sum =0;
	diff_count=0;
#else

	sum += reg_data_ADC_3[i];  // Add to sum for averaging
 80019da:	4a82      	ldr	r2, [pc, #520]	@ (8001be4 <ADC_READ+0xc0c>)
 80019dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e2:	461a      	mov	r2, r3
 80019e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e6:	4413      	add	r3, r2
 80019e8:	647b      	str	r3, [r7, #68]	@ 0x44
	for (int i = 0; i < 10; i++)
 80019ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ec:	3301      	adds	r3, #1
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f2:	2b09      	cmp	r3, #9
 80019f4:	ddc6      	ble.n	8001984 <ADC_READ+0x9ac>
}
#endif
adchex = sum / 10;
 80019f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f8:	4a7b      	ldr	r2, [pc, #492]	@ (8001be8 <ADC_READ+0xc10>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
average = sum / 10.0;
 8001a04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a06:	f7fe fd8d 	bl	8000524 <__aeabi_ui2d>
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	4b77      	ldr	r3, [pc, #476]	@ (8001bec <ADC_READ+0xc14>)
 8001a10:	f7fe ff2c 	bl	800086c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f8d4 	bl	8000bc8 <__aeabi_d2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001a24:	2201      	movs	r2, #1
 8001a26:	2110      	movs	r1, #16
 8001a28:	4869      	ldr	r0, [pc, #420]	@ (8001bd0 <ADC_READ+0xbf8>)
 8001a2a:	f004 f915 	bl	8005c58 <HAL_GPIO_WritePin>
resistance = ((2*1000*(float)average)/4) / 0xFFFF;
 8001a2e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a32:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001bf0 <ADC_READ+0xc18>
 8001a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001a3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a42:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8001bf4 <ADC_READ+0xc1c>
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

//Callendar-Van Dusen Equation
if (resistance >= R0) {  // Above 0°C
 8001a4e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001bf8 <ADC_READ+0xc20>
 8001a52:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	db50      	blt.n	8001b02 <ADC_READ+0xb2a>
	temperature = (-A + sqrt(A * A - 4 * B * (1 - (resistance / R0)))) / (2 * B);
 8001a60:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8001bfc <ADC_READ+0xc24>
 8001a64:	eef1 7a67 	vneg.f32	s15, s15
 8001a68:	ee17 3a90 	vmov	r3, s15
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd7b 	bl	8000568 <__aeabi_f2d>
 8001a72:	4604      	mov	r4, r0
 8001a74:	460d      	mov	r5, r1
 8001a76:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001bfc <ADC_READ+0xc24>
 8001a7a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8001bfc <ADC_READ+0xc24>
 8001a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001c00 <ADC_READ+0xc28>
 8001a86:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8001a8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a8e:	eddf 5a5a 	vldr	s11, [pc, #360]	@ 8001bf8 <ADC_READ+0xc20>
 8001a92:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8001a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a9a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001a9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aaa:	ee17 0a90 	vmov	r0, s15
 8001aae:	f7fe fd5b 	bl	8000568 <__aeabi_f2d>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	ec43 2b10 	vmov	d0, r2, r3
 8001aba:	f011 f9a9 	bl	8012e10 <sqrt>
 8001abe:	ec53 2b10 	vmov	r2, r3, d0
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fbf1 	bl	80002ac <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8001c00 <ADC_READ+0xc28>
 8001ad6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fd43 	bl	8000568 <__aeabi_f2d>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4629      	mov	r1, r5
 8001aea:	f7fe febf 	bl	800086c <__aeabi_ddiv>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff f867 	bl	8000bc8 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a41      	ldr	r2, [pc, #260]	@ (8001c04 <ADC_READ+0xc2c>)
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e017      	b.n	8001b32 <ADC_READ+0xb5a>
}
else
{  // Below 0°C, use simpler approximation
	temperature = (resistance - R0) / 0.385;
 8001b02:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001bf8 <ADC_READ+0xc20>
 8001b06:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b0e:	ee17 0a90 	vmov	r0, s15
 8001b12:	f7fe fd29 	bl	8000568 <__aeabi_f2d>
 8001b16:	a32c      	add	r3, pc, #176	@ (adr r3, 8001bc8 <ADC_READ+0xbf0>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fea6 	bl	800086c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f84e 	bl	8000bc8 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a35      	ldr	r2, [pc, #212]	@ (8001c04 <ADC_READ+0xc2c>)
 8001b30:	6013      	str	r3, [r2, #0]
}
if(rxd_buf[7]==txd_buf[9])
 8001b32:	7cfa      	ldrb	r2, [r7, #19]
 8001b34:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <ADC_READ+0xc00>)
 8001b36:	7a5b      	ldrb	r3, [r3, #9]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d10e      	bne.n	8001b5a <ADC_READ+0xb82>
{
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 1); // Toggle LED for visual feedback
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b42:	4831      	ldr	r0, [pc, #196]	@ (8001c08 <ADC_READ+0xc30>)
 8001b44:	f004 f888 	bl	8005c58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f003 fcc1 	bl	80054d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LED3_Pin, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b54:	482c      	ldr	r0, [pc, #176]	@ (8001c08 <ADC_READ+0xc30>)
 8001b56:	f004 f87f 	bl	8005c58 <HAL_GPIO_WritePin>

#endif

#ifdef WIREBREAK

HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	481c      	ldr	r0, [pc, #112]	@ (8001bd0 <ADC_READ+0xbf8>)
 8001b60:	f004 f87a 	bl	8005c58 <HAL_GPIO_WritePin>
txd_buf[0] = 0x21;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <ADC_READ+0xc00>)
 8001b66:	2221      	movs	r2, #33	@ 0x21
 8001b68:	701a      	strb	r2, [r3, #0]
txd_buf[1] = 0x00;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <ADC_READ+0xc00>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	705a      	strb	r2, [r3, #1]
HAL_SPI_Transmit(&hspi3, (uint8_t*) &txd_buf, 2, 0xFFFF);
 8001b70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b74:	2202      	movs	r2, #2
 8001b76:	4918      	ldr	r1, [pc, #96]	@ (8001bd8 <ADC_READ+0xc00>)
 8001b78:	4818      	ldr	r0, [pc, #96]	@ (8001bdc <ADC_READ+0xc04>)
 8001b7a:	f00b f911 	bl	800cda0 <HAL_SPI_Transmit>

HAL_SPI_Receive(&hspi3, (uint8_t*) &wirestatus, 0x01, 0xFFFF);
 8001b7e:	f107 010b 	add.w	r1, r7, #11
 8001b82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b86:	2201      	movs	r2, #1
 8001b88:	4814      	ldr	r0, [pc, #80]	@ (8001bdc <ADC_READ+0xc04>)
 8001b8a:	f00b fb1f 	bl	800d1cc <HAL_SPI_Receive>
HAL_GPIO_WritePin(GPIOD, CS_3_Pin, 1);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2110      	movs	r1, #16
 8001b92:	480f      	ldr	r0, [pc, #60]	@ (8001bd0 <ADC_READ+0xbf8>)
 8001b94:	f004 f860 	bl	8005c58 <HAL_GPIO_WritePin>

if (wire_break(wirestatus))
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f888 	bl	8001cb0 <wire_break>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d032      	beq.n	8001c0c <ADC_READ+0xc34>
{
	wirestatus=0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <ADC_READ+0xc2c>)
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
	adchex=0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 8001bb8:	2214      	movs	r2, #20
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4809      	ldr	r0, [pc, #36]	@ (8001be4 <ADC_READ+0xc0c>)
 8001bbe:	f00f f830 	bl	8010c22 <memset>
 8001bc2:	e039      	b.n	8001c38 <ADC_READ+0xc60>
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	0a3d70a4 	.word	0x0a3d70a4
 8001bcc:	3fd8a3d7 	.word	0x3fd8a3d7
 8001bd0:	42020c00 	.word	0x42020c00
 8001bd4:	42020000 	.word	0x42020000
 8001bd8:	200002ac 	.word	0x200002ac
 8001bdc:	200057b0 	.word	0x200057b0
 8001be0:	20000000 	.word	0x20000000
 8001be4:	200002f8 	.word	0x200002f8
 8001be8:	cccccccd 	.word	0xcccccccd
 8001bec:	40240000 	.word	0x40240000
 8001bf0:	44fa0000 	.word	0x44fa0000
 8001bf4:	477fff00 	.word	0x477fff00
 8001bf8:	42c80000 	.word	0x42c80000
 8001bfc:	3b801132 	.word	0x3b801132
 8001c00:	b51b057f 	.word	0xb51b057f
 8001c04:	200002cc 	.word	0x200002cc
 8001c08:	42021000 	.word	0x42021000
}
else if(check_sensor_validity(adchex))
 8001c0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 f835 	bl	8001c80 <check_sensor_validity>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00d      	beq.n	8001c38 <ADC_READ+0xc60>
{
	wirestatus=0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	72fb      	strb	r3, [r7, #11]
	temperature = 0;
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <ADC_READ+0xc98>)
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
	adchex =0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	memset(&reg_data_ADC_3,0,sizeof(reg_data_ADC_3));
 8001c2e:	2214      	movs	r2, #20
 8001c30:	2100      	movs	r1, #0
 8001c32:	4810      	ldr	r0, [pc, #64]	@ (8001c74 <ADC_READ+0xc9c>)
 8001c34:	f00e fff5 	bl	8010c22 <memset>
}
wirestatus=0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	72fb      	strb	r3, [r7, #11]
#endif
temp_sensor[adc_num][channel] = temperature ;
 8001c3c:	79f9      	ldrb	r1, [r7, #7]
 8001c3e:	79bb      	ldrb	r3, [r7, #6]
 8001c40:	4a0b      	ldr	r2, [pc, #44]	@ (8001c70 <ADC_READ+0xc98>)
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <ADC_READ+0xca0>)
 8001c46:	0089      	lsls	r1, r1, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4403      	add	r3, r0
 8001c4e:	601a      	str	r2, [r3, #0]
sensor_hex[adc_num][channel] = adchex ;
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	4909      	ldr	r1, [pc, #36]	@ (8001c7c <ADC_READ+0xca4>)
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8001c5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//		sensor_value = sum / 10;
break;
 8001c62:	bf00      	nop
}
//	return sensor_value;
return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3748      	adds	r7, #72	@ 0x48
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200002cc 	.word	0x200002cc
 8001c74:	200002f8 	.word	0x200002f8
 8001c78:	20000310 	.word	0x20000310
 8001c7c:	20000340 	.word	0x20000340

08001c80 <check_sensor_validity>:
	check_channel = 0 ;
}
#endif

uint8_t check_sensor_validity(uint16_t data)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]

	if(data<ADC_MIN_VAL || data>ADC_MAX_VAL)
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	f242 32d6 	movw	r2, #9174	@ 0x23d6
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d904      	bls.n	8001c9e <check_sensor_validity+0x1e>
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	f246 6266 	movw	r2, #26214	@ 0x6666
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <check_sensor_validity+0x22>
		return 1 ;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <check_sensor_validity+0x24>

	else
		return 0 ;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <wire_break>:

uint8_t wire_break(uint8_t flag)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t FL_REF =0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]

	if(txd_buf[7] == 0xC2)//0xC2
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <wire_break+0x7c>)
 8001cc0:	79db      	ldrb	r3, [r3, #7]
 8001cc2:	2bc2      	cmp	r3, #194	@ 0xc2
 8001cc4:	d102      	bne.n	8001ccc <wire_break+0x1c>
	{
		FL_REF= 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e008      	b.n	8001cde <wire_break+0x2e>
	}
	else if(txd_buf[7] == 0x82)//0x82
 8001ccc:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <wire_break+0x7c>)
 8001cce:	79db      	ldrb	r3, [r3, #7]
 8001cd0:	2b82      	cmp	r3, #130	@ 0x82
 8001cd2:	d102      	bne.n	8001cda <wire_break+0x2a>
	{
		FL_REF= 2;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e001      	b.n	8001cde <wire_break+0x2e>
	}
	else
	{
		FL_REF=0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
	}

	switch(FL_REF)
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d002      	beq.n	8001cea <wire_break+0x3a>
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d00a      	beq.n	8001cfe <wire_break+0x4e>
 8001ce8:	e013      	b.n	8001d12 <wire_break+0x62>
	{
	case 1:
		if(0x01 == flag)  //0x29 w/o interface card :  0x01  with interface card
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <wire_break+0x44>
			return 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e014      	b.n	8001d1e <wire_break+0x6e>

		else if(0x00 == flag) //0x00 w/o interface card :  0x00  with interface card
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <wire_break+0x66>
			return 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e00f      	b.n	8001d1e <wire_break+0x6e>

		break;
	case 2:
		if(0x3 == flag) //0x2b w/o interface card :  0x03  with interface card
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d101      	bne.n	8001d08 <wire_break+0x58>
			return 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e00a      	b.n	8001d1e <wire_break+0x6e>

		else if(0x2 == flag) //0x2 w/o interface card :  0x02  with interface card
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d105      	bne.n	8001d1a <wire_break+0x6a>
			return 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e005      	b.n	8001d1e <wire_break+0x6e>

		break;
	default:
		return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e003      	b.n	8001d1e <wire_break+0x6e>
		break;
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <wire_break+0x6c>
		break;
 8001d1a:	bf00      	nop
		break;
	}
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	200002ac 	.word	0x200002ac

08001d30 <ATP_operation>:

void ATP_operation();


void ATP_operation()
{
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af04      	add	r7, sp, #16
	HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 8001d36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d3a:	48a3      	ldr	r0, [pc, #652]	@ (8001fc8 <ATP_operation+0x298>)
 8001d3c:	f003 ffa4 	bl	8005c88 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8001d40:	20c8      	movs	r0, #200	@ 0xc8
 8001d42:	f003 fbc5 	bl	80054d0 <HAL_Delay>
	//ATP_test = 1;
	if(ATP_test)
 8001d46:	4ba1      	ldr	r3, [pc, #644]	@ (8001fcc <ATP_operation+0x29c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8686 	beq.w	8002a5c <ATP_operation+0xd2c>
	{
		ATP_test = 0 ;
 8001d50:	4b9e      	ldr	r3, [pc, #632]	@ (8001fcc <ATP_operation+0x29c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]

		if (strstr(command_str, test_nbr_1))
 8001d56:	4b9e      	ldr	r3, [pc, #632]	@ (8001fd0 <ATP_operation+0x2a0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	489d      	ldr	r0, [pc, #628]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001d5e:	f00e ff68 	bl	8010c32 <strstr>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <ATP_operation+0x40>
		{
			ATP_test_number = POWER_CTRL_1;
 8001d68:	4b9b      	ldr	r3, [pc, #620]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e1e6      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_2))
 8001d70:	4b9a      	ldr	r3, [pc, #616]	@ (8001fdc <ATP_operation+0x2ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4897      	ldr	r0, [pc, #604]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001d78:	f00e ff5b 	bl	8010c32 <strstr>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <ATP_operation+0x5a>
		{
			ATP_test_number = POWER_CTRL_2;
 8001d82:	4b95      	ldr	r3, [pc, #596]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001d84:	2202      	movs	r2, #2
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e1d9      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_3))
 8001d8a:	4b95      	ldr	r3, [pc, #596]	@ (8001fe0 <ATP_operation+0x2b0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4890      	ldr	r0, [pc, #576]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001d92:	f00e ff4e 	bl	8010c32 <strstr>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <ATP_operation+0x74>
		{
			ATP_test_number = INPUT_GPIO_1;
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001d9e:	2203      	movs	r2, #3
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e1cc      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_4))
 8001da4:	4b8f      	ldr	r3, [pc, #572]	@ (8001fe4 <ATP_operation+0x2b4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	488a      	ldr	r0, [pc, #552]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001dac:	f00e ff41 	bl	8010c32 <strstr>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <ATP_operation+0x8e>
		{
			ATP_test_number = INPUT_GPIO_2;
 8001db6:	4b88      	ldr	r3, [pc, #544]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001db8:	2204      	movs	r2, #4
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e1bf      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_5))
 8001dbe:	4b8a      	ldr	r3, [pc, #552]	@ (8001fe8 <ATP_operation+0x2b8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4883      	ldr	r0, [pc, #524]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001dc6:	f00e ff34 	bl	8010c32 <strstr>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <ATP_operation+0xa8>
		{
			ATP_test_number = INPUT_GPIO_3;
 8001dd0:	4b81      	ldr	r3, [pc, #516]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001dd2:	2205      	movs	r2, #5
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e1b2      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_6))
 8001dd8:	4b84      	ldr	r3, [pc, #528]	@ (8001fec <ATP_operation+0x2bc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	487d      	ldr	r0, [pc, #500]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001de0:	f00e ff27 	bl	8010c32 <strstr>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <ATP_operation+0xc2>
		{
			ATP_test_number = INPUT_GPIO_4;
 8001dea:	4b7b      	ldr	r3, [pc, #492]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001dec:	2206      	movs	r2, #6
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e1a5      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_7))
 8001df2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff0 <ATP_operation+0x2c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	4876      	ldr	r0, [pc, #472]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001dfa:	f00e ff1a 	bl	8010c32 <strstr>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <ATP_operation+0xdc>
		{
			ATP_test_number = INPUT_GPIO_5;
 8001e04:	4b74      	ldr	r3, [pc, #464]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001e06:	2207      	movs	r2, #7
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e198      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_8))
 8001e0c:	4b79      	ldr	r3, [pc, #484]	@ (8001ff4 <ATP_operation+0x2c4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4870      	ldr	r0, [pc, #448]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001e14:	f00e ff0d 	bl	8010c32 <strstr>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <ATP_operation+0xf6>
		{
			ATP_test_number = OUTPUT_GPIO_1;
 8001e1e:	4b6e      	ldr	r3, [pc, #440]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001e20:	2208      	movs	r2, #8
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e18b      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_9))
 8001e26:	4b74      	ldr	r3, [pc, #464]	@ (8001ff8 <ATP_operation+0x2c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4869      	ldr	r0, [pc, #420]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001e2e:	f00e ff00 	bl	8010c32 <strstr>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <ATP_operation+0x110>
		{
			ATP_test_number = OUTPUT_GPIO_2;
 8001e38:	4b67      	ldr	r3, [pc, #412]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001e3a:	2209      	movs	r2, #9
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e17e      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_10))
 8001e40:	4b6e      	ldr	r3, [pc, #440]	@ (8001ffc <ATP_operation+0x2cc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	4863      	ldr	r0, [pc, #396]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001e48:	f00e fef3 	bl	8010c32 <strstr>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <ATP_operation+0x12a>
		{
			ATP_test_number = TS_1;
 8001e52:	4b61      	ldr	r3, [pc, #388]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001e54:	220a      	movs	r2, #10
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e171      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_11))
 8001e5a:	4b69      	ldr	r3, [pc, #420]	@ (8002000 <ATP_operation+0x2d0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	485c      	ldr	r0, [pc, #368]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001e62:	f00e fee6 	bl	8010c32 <strstr>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <ATP_operation+0x144>
		{
			ATP_test_number = TS_2;
 8001e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001e6e:	220b      	movs	r2, #11
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e164      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_12))
 8001e74:	4b63      	ldr	r3, [pc, #396]	@ (8002004 <ATP_operation+0x2d4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4856      	ldr	r0, [pc, #344]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001e7c:	f00e fed9 	bl	8010c32 <strstr>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <ATP_operation+0x15e>
		{
			ATP_test_number = TS_3;
 8001e86:	4b54      	ldr	r3, [pc, #336]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001e88:	220c      	movs	r2, #12
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	e157      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_13))
 8001e8e:	4b5e      	ldr	r3, [pc, #376]	@ (8002008 <ATP_operation+0x2d8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4619      	mov	r1, r3
 8001e94:	484f      	ldr	r0, [pc, #316]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001e96:	f00e fecc 	bl	8010c32 <strstr>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <ATP_operation+0x178>
		{
			ATP_test_number = TS_4;
 8001ea0:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001ea2:	220d      	movs	r2, #13
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	e14a      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_14))
 8001ea8:	4b58      	ldr	r3, [pc, #352]	@ (800200c <ATP_operation+0x2dc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4849      	ldr	r0, [pc, #292]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001eb0:	f00e febf 	bl	8010c32 <strstr>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <ATP_operation+0x192>
		{
			ATP_test_number = TS_5;
 8001eba:	4b47      	ldr	r3, [pc, #284]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001ebc:	220e      	movs	r2, #14
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	e13d      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_15))
 8001ec2:	4b53      	ldr	r3, [pc, #332]	@ (8002010 <ATP_operation+0x2e0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4842      	ldr	r0, [pc, #264]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001eca:	f00e feb2 	bl	8010c32 <strstr>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <ATP_operation+0x1ac>
		{
			ATP_test_number = TS_6;
 8001ed4:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e130      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_16))
 8001edc:	4b4d      	ldr	r3, [pc, #308]	@ (8002014 <ATP_operation+0x2e4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	483c      	ldr	r0, [pc, #240]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001ee4:	f00e fea5 	bl	8010c32 <strstr>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <ATP_operation+0x1c6>
		{
			ATP_test_number = TS_7;
 8001eee:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e123      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_17))
 8001ef6:	4b48      	ldr	r3, [pc, #288]	@ (8002018 <ATP_operation+0x2e8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	4835      	ldr	r0, [pc, #212]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001efe:	f00e fe98 	bl	8010c32 <strstr>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <ATP_operation+0x1e0>
		{
			ATP_test_number = TS_8;
 8001f08:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001f0a:	2211      	movs	r2, #17
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	e116      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_18))
 8001f10:	4b42      	ldr	r3, [pc, #264]	@ (800201c <ATP_operation+0x2ec>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	482f      	ldr	r0, [pc, #188]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001f18:	f00e fe8b 	bl	8010c32 <strstr>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <ATP_operation+0x1fa>
		{
			ATP_test_number = TS_9;
 8001f22:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001f24:	2212      	movs	r2, #18
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e109      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_19))
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002020 <ATP_operation+0x2f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4828      	ldr	r0, [pc, #160]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001f32:	f00e fe7e 	bl	8010c32 <strstr>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <ATP_operation+0x214>
		{
			ATP_test_number = TS_10;
 8001f3c:	4b26      	ldr	r3, [pc, #152]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001f3e:	2213      	movs	r2, #19
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	e0fc      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_20))
 8001f44:	4b37      	ldr	r3, [pc, #220]	@ (8002024 <ATP_operation+0x2f4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4822      	ldr	r0, [pc, #136]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001f4c:	f00e fe71 	bl	8010c32 <strstr>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <ATP_operation+0x22e>
		{
			ATP_test_number = TS_11;
 8001f56:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001f58:	2214      	movs	r2, #20
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	e0ef      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_21))
 8001f5e:	4b32      	ldr	r3, [pc, #200]	@ (8002028 <ATP_operation+0x2f8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4619      	mov	r1, r3
 8001f64:	481b      	ldr	r0, [pc, #108]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001f66:	f00e fe64 	bl	8010c32 <strstr>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <ATP_operation+0x248>
		{
			ATP_test_number = TS_12;
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001f72:	2215      	movs	r2, #21
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e0e2      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_22))
 8001f78:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <ATP_operation+0x2fc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4815      	ldr	r0, [pc, #84]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001f80:	f00e fe57 	bl	8010c32 <strstr>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <ATP_operation+0x262>
		{
			ATP_test_number = RTC_CHECK;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001f8c:	2216      	movs	r2, #22
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e0d5      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_23))
 8001f92:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <ATP_operation+0x300>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	480e      	ldr	r0, [pc, #56]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001f9a:	f00e fe4a 	bl	8010c32 <strstr>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <ATP_operation+0x27c>
		{
			ATP_test_number = NAND_FLASH_WRITE;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001fa6:	2217      	movs	r2, #23
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	e0c8      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr(command_str, test_nbr_24))
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <ATP_operation+0x304>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4808      	ldr	r0, [pc, #32]	@ (8001fd4 <ATP_operation+0x2a4>)
 8001fb4:	f00e fe3d 	bl	8010c32 <strstr>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03c      	beq.n	8002038 <ATP_operation+0x308>
		{
			ATP_test_number = NAND_FLASH_READ;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <ATP_operation+0x2a8>)
 8001fc0:	2218      	movs	r2, #24
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e0bb      	b.n	800213e <ATP_operation+0x40e>
 8001fc6:	bf00      	nop
 8001fc8:	42021000 	.word	0x42021000
 8001fcc:	2000036d 	.word	0x2000036d
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	20000358 	.word	0x20000358
 8001fd8:	2000036e 	.word	0x2000036e
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	2000000c 	.word	0x2000000c
 8001fe4:	20000010 	.word	0x20000010
 8001fe8:	20000014 	.word	0x20000014
 8001fec:	20000018 	.word	0x20000018
 8001ff0:	2000001c 	.word	0x2000001c
 8001ff4:	20000020 	.word	0x20000020
 8001ff8:	20000024 	.word	0x20000024
 8001ffc:	20000028 	.word	0x20000028
 8002000:	2000002c 	.word	0x2000002c
 8002004:	20000030 	.word	0x20000030
 8002008:	20000034 	.word	0x20000034
 800200c:	20000038 	.word	0x20000038
 8002010:	2000003c 	.word	0x2000003c
 8002014:	20000040 	.word	0x20000040
 8002018:	20000044 	.word	0x20000044
 800201c:	20000048 	.word	0x20000048
 8002020:	2000004c 	.word	0x2000004c
 8002024:	20000050 	.word	0x20000050
 8002028:	20000054 	.word	0x20000054
 800202c:	20000058 	.word	0x20000058
 8002030:	2000005c 	.word	0x2000005c
 8002034:	20000060 	.word	0x20000060
		}
		else if (strstr(command_str, test_nbr_25))
 8002038:	4bb5      	ldr	r3, [pc, #724]	@ (8002310 <ATP_operation+0x5e0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	48b5      	ldr	r0, [pc, #724]	@ (8002314 <ATP_operation+0x5e4>)
 8002040:	f00e fdf7 	bl	8010c32 <strstr>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01a      	beq.n	8002080 <ATP_operation+0x350>
		{
			if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)== 1)
 800204a:	2104      	movs	r1, #4
 800204c:	48b2      	ldr	r0, [pc, #712]	@ (8002318 <ATP_operation+0x5e8>)
 800204e:	f003 fdeb 	bl	8005c28 <HAL_GPIO_ReadPin>
 8002052:	4603      	mov	r3, r0
 8002054:	2b01      	cmp	r3, #1
 8002056:	d103      	bne.n	8002060 <ATP_operation+0x330>
				ATP_test_number = NAND_FLASH_ERASE;
 8002058:	4bb0      	ldr	r3, [pc, #704]	@ (800231c <ATP_operation+0x5ec>)
 800205a:	2219      	movs	r2, #25
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e06e      	b.n	800213e <ATP_operation+0x40e>
			else{
				HAL_UART_Transmit_IT(&huart5,(uint8_t *)GpStatus, strlen("Is GPIO HIGH..?"));
 8002060:	4baf      	ldr	r3, [pc, #700]	@ (8002320 <ATP_operation+0x5f0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	220f      	movs	r2, #15
 8002066:	4619      	mov	r1, r3
 8002068:	48ae      	ldr	r0, [pc, #696]	@ (8002324 <ATP_operation+0x5f4>)
 800206a:	f00b fd1f 	bl	800daac <HAL_UART_Transmit_IT>
				memset(ATP_buffer,0,sizeof(ATP_buffer));
 800206e:	2264      	movs	r2, #100	@ 0x64
 8002070:	2100      	movs	r1, #0
 8002072:	48ad      	ldr	r0, [pc, #692]	@ (8002328 <ATP_operation+0x5f8>)
 8002074:	f00e fdd5 	bl	8010c22 <memset>
				HAL_Delay(100);
 8002078:	2064      	movs	r0, #100	@ 0x64
 800207a:	f003 fa29 	bl	80054d0 <HAL_Delay>
 800207e:	e05e      	b.n	800213e <ATP_operation+0x40e>
			}
		}
		else if (strstr((char *)command_str, test_nbr_26))
 8002080:	4baa      	ldr	r3, [pc, #680]	@ (800232c <ATP_operation+0x5fc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	48a3      	ldr	r0, [pc, #652]	@ (8002314 <ATP_operation+0x5e4>)
 8002088:	f00e fdd3 	bl	8010c32 <strstr>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00d      	beq.n	80020ae <ATP_operation+0x37e>
		{
			//			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 8002092:	48a0      	ldr	r0, [pc, #640]	@ (8002314 <ATP_operation+0x5e4>)
 8002094:	f7fe f8fc 	bl	8000290 <strlen>
 8002098:	4603      	mov	r3, r0
 800209a:	3b04      	subs	r3, #4
 800209c:	461a      	mov	r2, r3
 800209e:	49a4      	ldr	r1, [pc, #656]	@ (8002330 <ATP_operation+0x600>)
 80020a0:	48a4      	ldr	r0, [pc, #656]	@ (8002334 <ATP_operation+0x604>)
 80020a2:	f00e fe62 	bl	8010d6a <memcpy>
			ATP_test_number = LoopBack_RS232;
 80020a6:	4b9d      	ldr	r3, [pc, #628]	@ (800231c <ATP_operation+0x5ec>)
 80020a8:	221a      	movs	r2, #26
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	e047      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr((char *)command_str, test_nbr_27))
 80020ae:	4ba2      	ldr	r3, [pc, #648]	@ (8002338 <ATP_operation+0x608>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4619      	mov	r1, r3
 80020b4:	4897      	ldr	r0, [pc, #604]	@ (8002314 <ATP_operation+0x5e4>)
 80020b6:	f00e fdbc 	bl	8010c32 <strstr>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <ATP_operation+0x3ac>
		{
			//			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 80020c0:	4894      	ldr	r0, [pc, #592]	@ (8002314 <ATP_operation+0x5e4>)
 80020c2:	f7fe f8e5 	bl	8000290 <strlen>
 80020c6:	4603      	mov	r3, r0
 80020c8:	3b04      	subs	r3, #4
 80020ca:	461a      	mov	r2, r3
 80020cc:	4998      	ldr	r1, [pc, #608]	@ (8002330 <ATP_operation+0x600>)
 80020ce:	4899      	ldr	r0, [pc, #612]	@ (8002334 <ATP_operation+0x604>)
 80020d0:	f00e fe4b 	bl	8010d6a <memcpy>
			ATP_test_number = LoopBack_RS422;
 80020d4:	4b91      	ldr	r3, [pc, #580]	@ (800231c <ATP_operation+0x5ec>)
 80020d6:	221b      	movs	r2, #27
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e030      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr((char *)command_str, test_nbr_28))
 80020dc:	4b97      	ldr	r3, [pc, #604]	@ (800233c <ATP_operation+0x60c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	488c      	ldr	r0, [pc, #560]	@ (8002314 <ATP_operation+0x5e4>)
 80020e4:	f00e fda5 	bl	8010c32 <strstr>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00d      	beq.n	800210a <ATP_operation+0x3da>
		{
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 80020ee:	4889      	ldr	r0, [pc, #548]	@ (8002314 <ATP_operation+0x5e4>)
 80020f0:	f7fe f8ce 	bl	8000290 <strlen>
 80020f4:	4603      	mov	r3, r0
 80020f6:	3b04      	subs	r3, #4
 80020f8:	461a      	mov	r2, r3
 80020fa:	498d      	ldr	r1, [pc, #564]	@ (8002330 <ATP_operation+0x600>)
 80020fc:	488d      	ldr	r0, [pc, #564]	@ (8002334 <ATP_operation+0x604>)
 80020fe:	f00e fe34 	bl	8010d6a <memcpy>
			ATP_test_number = LoopBack1_RS485;
 8002102:	4b86      	ldr	r3, [pc, #536]	@ (800231c <ATP_operation+0x5ec>)
 8002104:	221c      	movs	r2, #28
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e019      	b.n	800213e <ATP_operation+0x40e>
		}
		else if (strstr((char *)command_str, test_nbr_29))
 800210a:	4b8d      	ldr	r3, [pc, #564]	@ (8002340 <ATP_operation+0x610>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4619      	mov	r1, r3
 8002110:	4880      	ldr	r0, [pc, #512]	@ (8002314 <ATP_operation+0x5e4>)
 8002112:	f00e fd8e 	bl	8010c32 <strstr>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <ATP_operation+0x408>
		{
			memcpy(LOOPBACK_BUF,&command_str[3],(strlen((char *)(command_str))-4));
 800211c:	487d      	ldr	r0, [pc, #500]	@ (8002314 <ATP_operation+0x5e4>)
 800211e:	f7fe f8b7 	bl	8000290 <strlen>
 8002122:	4603      	mov	r3, r0
 8002124:	3b04      	subs	r3, #4
 8002126:	461a      	mov	r2, r3
 8002128:	4981      	ldr	r1, [pc, #516]	@ (8002330 <ATP_operation+0x600>)
 800212a:	4882      	ldr	r0, [pc, #520]	@ (8002334 <ATP_operation+0x604>)
 800212c:	f00e fe1d 	bl	8010d6a <memcpy>
			ATP_test_number = LoopBack2_RS485;
 8002130:	4b7a      	ldr	r3, [pc, #488]	@ (800231c <ATP_operation+0x5ec>)
 8002132:	221d      	movs	r2, #29
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e002      	b.n	800213e <ATP_operation+0x40e>
		}
		else
		{
			ATP_test_number = 0 ;
 8002138:	4b78      	ldr	r3, [pc, #480]	@ (800231c <ATP_operation+0x5ec>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
		}

		memset(command_str,0,sizeof(command_str));
 800213e:	2214      	movs	r2, #20
 8002140:	2100      	movs	r1, #0
 8002142:	4874      	ldr	r0, [pc, #464]	@ (8002314 <ATP_operation+0x5e4>)
 8002144:	f00e fd6d 	bl	8010c22 <memset>

		switch(ATP_test_number)
 8002148:	4b74      	ldr	r3, [pc, #464]	@ (800231c <ATP_operation+0x5ec>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	3b01      	subs	r3, #1
 800214e:	2b1c      	cmp	r3, #28
 8002150:	f200 8480 	bhi.w	8002a54 <ATP_operation+0xd24>
 8002154:	a201      	add	r2, pc, #4	@ (adr r2, 800215c <ATP_operation+0x42c>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	080021d1 	.word	0x080021d1
 8002160:	0800221b 	.word	0x0800221b
 8002164:	08002263 	.word	0x08002263
 8002168:	0800229d 	.word	0x0800229d
 800216c:	080022d7 	.word	0x080022d7
 8002170:	08002351 	.word	0x08002351
 8002174:	0800238b 	.word	0x0800238b
 8002178:	080023c5 	.word	0x080023c5
 800217c:	0800240d 	.word	0x0800240d
 8002180:	08002455 	.word	0x08002455
 8002184:	080024a1 	.word	0x080024a1
 8002188:	080024ed 	.word	0x080024ed
 800218c:	08002539 	.word	0x08002539
 8002190:	08002585 	.word	0x08002585
 8002194:	080025d1 	.word	0x080025d1
 8002198:	08002649 	.word	0x08002649
 800219c:	08002695 	.word	0x08002695
 80021a0:	080026e1 	.word	0x080026e1
 80021a4:	08002721 	.word	0x08002721
 80021a8:	0800276d 	.word	0x0800276d
 80021ac:	080027b9 	.word	0x080027b9
 80021b0:	08002805 	.word	0x08002805
 80021b4:	0800288f 	.word	0x0800288f
 80021b8:	08002897 	.word	0x08002897
 80021bc:	080028a3 	.word	0x080028a3
 80021c0:	08002963 	.word	0x08002963
 80021c4:	0800298f 	.word	0x0800298f
 80021c8:	080029d5 	.word	0x080029d5
 80021cc:	08002a15 	.word	0x08002a15
		{
		case  POWER_CTRL_1 		:
			ATP_test_number=0;
 80021d0:	4b52      	ldr	r3, [pc, #328]	@ (800231c <ATP_operation+0x5ec>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 80021d6:	2264      	movs	r2, #100	@ 0x64
 80021d8:	2100      	movs	r1, #0
 80021da:	4853      	ldr	r0, [pc, #332]	@ (8002328 <ATP_operation+0x5f8>)
 80021dc:	f00e fd21 	bl	8010c22 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl1_Pin));
 80021e0:	2120      	movs	r1, #32
 80021e2:	4858      	ldr	r0, [pc, #352]	@ (8002344 <ATP_operation+0x614>)
 80021e4:	f003 fd20 	bl	8005c28 <HAL_GPIO_ReadPin>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	4956      	ldr	r1, [pc, #344]	@ (8002348 <ATP_operation+0x618>)
 80021ee:	484e      	ldr	r0, [pc, #312]	@ (8002328 <ATP_operation+0x5f8>)
 80021f0:	f00e fcb4 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5,ATP_buffer, strlen((char *)(ATP_buffer)));
 80021f4:	484c      	ldr	r0, [pc, #304]	@ (8002328 <ATP_operation+0x5f8>)
 80021f6:	f7fe f84b 	bl	8000290 <strlen>
 80021fa:	4603      	mov	r3, r0
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	4949      	ldr	r1, [pc, #292]	@ (8002328 <ATP_operation+0x5f8>)
 8002202:	4848      	ldr	r0, [pc, #288]	@ (8002324 <ATP_operation+0x5f4>)
 8002204:	f00b fc52 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOA,Pwr_Ctrl1_Pin);
 8002208:	2120      	movs	r1, #32
 800220a:	484e      	ldr	r0, [pc, #312]	@ (8002344 <ATP_operation+0x614>)
 800220c:	f003 fd3c 	bl	8005c88 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 8002210:	2005      	movs	r0, #5
 8002212:	f003 f95d 	bl	80054d0 <HAL_Delay>
//			memset(ATP_buffer,0,sizeof(ATP_buffer));
//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl1_Pin));
//			HAL_UART_Transmit_IT(&huart5,ATP_buffer, strlen((char *)(ATP_buffer)));
			break;
 8002216:	f000 bc21 	b.w	8002a5c <ATP_operation+0xd2c>
		case  POWER_CTRL_2 		:
			ATP_test_number=0;
 800221a:	4b40      	ldr	r3, [pc, #256]	@ (800231c <ATP_operation+0x5ec>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 8002220:	2264      	movs	r2, #100	@ 0x64
 8002222:	2100      	movs	r1, #0
 8002224:	4840      	ldr	r0, [pc, #256]	@ (8002328 <ATP_operation+0x5f8>)
 8002226:	f00e fcfc 	bl	8010c22 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl2_Pin));
 800222a:	2140      	movs	r1, #64	@ 0x40
 800222c:	4845      	ldr	r0, [pc, #276]	@ (8002344 <ATP_operation+0x614>)
 800222e:	f003 fcfb 	bl	8005c28 <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4944      	ldr	r1, [pc, #272]	@ (8002348 <ATP_operation+0x618>)
 8002238:	483b      	ldr	r0, [pc, #236]	@ (8002328 <ATP_operation+0x5f8>)
 800223a:	f00e fc8f 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 800223e:	483a      	ldr	r0, [pc, #232]	@ (8002328 <ATP_operation+0x5f8>)
 8002240:	f7fe f826 	bl	8000290 <strlen>
 8002244:	4603      	mov	r3, r0
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	4937      	ldr	r1, [pc, #220]	@ (8002328 <ATP_operation+0x5f8>)
 800224c:	4835      	ldr	r0, [pc, #212]	@ (8002324 <ATP_operation+0x5f4>)
 800224e:	f00b fc2d 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOA,Pwr_Ctrl2_Pin);
 8002252:	2140      	movs	r1, #64	@ 0x40
 8002254:	483b      	ldr	r0, [pc, #236]	@ (8002344 <ATP_operation+0x614>)
 8002256:	f003 fd17 	bl	8005c88 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800225a:	2005      	movs	r0, #5
 800225c:	f003 f938 	bl	80054d0 <HAL_Delay>
//			memset(ATP_buffer,0,sizeof(ATP_buffer));
//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOA,Pwr_Ctrl2_Pin));
//			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
			break;
 8002260:	e3fc      	b.n	8002a5c <ATP_operation+0xd2c>
		case  INPUT_GPIO_1 		:
			ATP_test_number=0;
 8002262:	4b2e      	ldr	r3, [pc, #184]	@ (800231c <ATP_operation+0x5ec>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 8002268:	2264      	movs	r2, #100	@ 0x64
 800226a:	2100      	movs	r1, #0
 800226c:	482e      	ldr	r0, [pc, #184]	@ (8002328 <ATP_operation+0x5f8>)
 800226e:	f00e fcd8 	bl	8010c22 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOD,GPI_1_Pin));
 8002272:	2104      	movs	r1, #4
 8002274:	4828      	ldr	r0, [pc, #160]	@ (8002318 <ATP_operation+0x5e8>)
 8002276:	f003 fcd7 	bl	8005c28 <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	4932      	ldr	r1, [pc, #200]	@ (8002348 <ATP_operation+0x618>)
 8002280:	4829      	ldr	r0, [pc, #164]	@ (8002328 <ATP_operation+0x5f8>)
 8002282:	f00e fc6b 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 8002286:	4828      	ldr	r0, [pc, #160]	@ (8002328 <ATP_operation+0x5f8>)
 8002288:	f7fe f802 	bl	8000290 <strlen>
 800228c:	4603      	mov	r3, r0
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	4925      	ldr	r1, [pc, #148]	@ (8002328 <ATP_operation+0x5f8>)
 8002294:	4823      	ldr	r0, [pc, #140]	@ (8002324 <ATP_operation+0x5f4>)
 8002296:	f00b fc09 	bl	800daac <HAL_UART_Transmit_IT>
			break;
 800229a:	e3df      	b.n	8002a5c <ATP_operation+0xd2c>
		case  INPUT_GPIO_2 		:
			ATP_test_number=0;
 800229c:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <ATP_operation+0x5ec>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 80022a2:	2264      	movs	r2, #100	@ 0x64
 80022a4:	2100      	movs	r1, #0
 80022a6:	4820      	ldr	r0, [pc, #128]	@ (8002328 <ATP_operation+0x5f8>)
 80022a8:	f00e fcbb 	bl	8010c22 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOD,GPI_2_Pin));
 80022ac:	2108      	movs	r1, #8
 80022ae:	481a      	ldr	r0, [pc, #104]	@ (8002318 <ATP_operation+0x5e8>)
 80022b0:	f003 fcba 	bl	8005c28 <HAL_GPIO_ReadPin>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	4923      	ldr	r1, [pc, #140]	@ (8002348 <ATP_operation+0x618>)
 80022ba:	481b      	ldr	r0, [pc, #108]	@ (8002328 <ATP_operation+0x5f8>)
 80022bc:	f00e fc4e 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 80022c0:	4819      	ldr	r0, [pc, #100]	@ (8002328 <ATP_operation+0x5f8>)
 80022c2:	f7fd ffe5 	bl	8000290 <strlen>
 80022c6:	4603      	mov	r3, r0
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	4916      	ldr	r1, [pc, #88]	@ (8002328 <ATP_operation+0x5f8>)
 80022ce:	4815      	ldr	r0, [pc, #84]	@ (8002324 <ATP_operation+0x5f4>)
 80022d0:	f00b fbec 	bl	800daac <HAL_UART_Transmit_IT>
			break;
 80022d4:	e3c2      	b.n	8002a5c <ATP_operation+0xd2c>
		case  INPUT_GPIO_3 		:
			ATP_test_number=0;
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <ATP_operation+0x5ec>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 80022dc:	2264      	movs	r2, #100	@ 0x64
 80022de:	2100      	movs	r1, #0
 80022e0:	4811      	ldr	r0, [pc, #68]	@ (8002328 <ATP_operation+0x5f8>)
 80022e2:	f00e fc9e 	bl	8010c22 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin));
 80022e6:	2110      	movs	r1, #16
 80022e8:	4818      	ldr	r0, [pc, #96]	@ (800234c <ATP_operation+0x61c>)
 80022ea:	f003 fc9d 	bl	8005c28 <HAL_GPIO_ReadPin>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	4915      	ldr	r1, [pc, #84]	@ (8002348 <ATP_operation+0x618>)
 80022f4:	480c      	ldr	r0, [pc, #48]	@ (8002328 <ATP_operation+0x5f8>)
 80022f6:	f00e fc31 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 80022fa:	480b      	ldr	r0, [pc, #44]	@ (8002328 <ATP_operation+0x5f8>)
 80022fc:	f7fd ffc8 	bl	8000290 <strlen>
 8002300:	4603      	mov	r3, r0
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	@ (8002328 <ATP_operation+0x5f8>)
 8002308:	4806      	ldr	r0, [pc, #24]	@ (8002324 <ATP_operation+0x5f4>)
 800230a:	f00b fbcf 	bl	800daac <HAL_UART_Transmit_IT>
			break;
 800230e:	e3a5      	b.n	8002a5c <ATP_operation+0xd2c>
 8002310:	20000064 	.word	0x20000064
 8002314:	20000358 	.word	0x20000358
 8002318:	42020c00 	.word	0x42020c00
 800231c:	2000036e 	.word	0x2000036e
 8002320:	20000078 	.word	0x20000078
 8002324:	20005964 	.word	0x20005964
 8002328:	20000384 	.word	0x20000384
 800232c:	20000068 	.word	0x20000068
 8002330:	2000035b 	.word	0x2000035b
 8002334:	20000370 	.word	0x20000370
 8002338:	2000006c 	.word	0x2000006c
 800233c:	20000070 	.word	0x20000070
 8002340:	20000074 	.word	0x20000074
 8002344:	42020000 	.word	0x42020000
 8002348:	080130f8 	.word	0x080130f8
 800234c:	42021000 	.word	0x42021000
		case  INPUT_GPIO_4 		:
			ATP_test_number=0;
 8002350:	4bb2      	ldr	r3, [pc, #712]	@ (800261c <ATP_operation+0x8ec>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 8002356:	2264      	movs	r2, #100	@ 0x64
 8002358:	2100      	movs	r1, #0
 800235a:	48b1      	ldr	r0, [pc, #708]	@ (8002620 <ATP_operation+0x8f0>)
 800235c:	f00e fc61 	bl	8010c22 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOE,GPI_4_Pin));
 8002360:	2120      	movs	r1, #32
 8002362:	48b0      	ldr	r0, [pc, #704]	@ (8002624 <ATP_operation+0x8f4>)
 8002364:	f003 fc60 	bl	8005c28 <HAL_GPIO_ReadPin>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	49ae      	ldr	r1, [pc, #696]	@ (8002628 <ATP_operation+0x8f8>)
 800236e:	48ac      	ldr	r0, [pc, #688]	@ (8002620 <ATP_operation+0x8f0>)
 8002370:	f00e fbf4 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 8002374:	48aa      	ldr	r0, [pc, #680]	@ (8002620 <ATP_operation+0x8f0>)
 8002376:	f7fd ff8b 	bl	8000290 <strlen>
 800237a:	4603      	mov	r3, r0
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	49a7      	ldr	r1, [pc, #668]	@ (8002620 <ATP_operation+0x8f0>)
 8002382:	48aa      	ldr	r0, [pc, #680]	@ (800262c <ATP_operation+0x8fc>)
 8002384:	f00b fb92 	bl	800daac <HAL_UART_Transmit_IT>
			break;
 8002388:	e368      	b.n	8002a5c <ATP_operation+0xd2c>
		case  INPUT_GPIO_5 		:
			ATP_test_number=0;
 800238a:	4ba4      	ldr	r3, [pc, #656]	@ (800261c <ATP_operation+0x8ec>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 8002390:	2264      	movs	r2, #100	@ 0x64
 8002392:	2100      	movs	r1, #0
 8002394:	48a2      	ldr	r0, [pc, #648]	@ (8002620 <ATP_operation+0x8f0>)
 8002396:	f00e fc44 	bl	8010c22 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOE,GPI_5_Pin));
 800239a:	2140      	movs	r1, #64	@ 0x40
 800239c:	48a1      	ldr	r0, [pc, #644]	@ (8002624 <ATP_operation+0x8f4>)
 800239e:	f003 fc43 	bl	8005c28 <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	49a0      	ldr	r1, [pc, #640]	@ (8002628 <ATP_operation+0x8f8>)
 80023a8:	489d      	ldr	r0, [pc, #628]	@ (8002620 <ATP_operation+0x8f0>)
 80023aa:	f00e fbd7 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 80023ae:	489c      	ldr	r0, [pc, #624]	@ (8002620 <ATP_operation+0x8f0>)
 80023b0:	f7fd ff6e 	bl	8000290 <strlen>
 80023b4:	4603      	mov	r3, r0
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	4999      	ldr	r1, [pc, #612]	@ (8002620 <ATP_operation+0x8f0>)
 80023bc:	489b      	ldr	r0, [pc, #620]	@ (800262c <ATP_operation+0x8fc>)
 80023be:	f00b fb75 	bl	800daac <HAL_UART_Transmit_IT>
			break;
 80023c2:	e34b      	b.n	8002a5c <ATP_operation+0xd2c>
		case  OUTPUT_GPIO_1 	:
			ATP_test_number=0;
 80023c4:	4b95      	ldr	r3, [pc, #596]	@ (800261c <ATP_operation+0x8ec>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 80023ca:	2264      	movs	r2, #100	@ 0x64
 80023cc:	2100      	movs	r1, #0
 80023ce:	4894      	ldr	r0, [pc, #592]	@ (8002620 <ATP_operation+0x8f0>)
 80023d0:	f00e fc27 	bl	8010c22 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_1_Pin));
 80023d4:	2101      	movs	r1, #1
 80023d6:	4896      	ldr	r0, [pc, #600]	@ (8002630 <ATP_operation+0x900>)
 80023d8:	f003 fc26 	bl	8005c28 <HAL_GPIO_ReadPin>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	4991      	ldr	r1, [pc, #580]	@ (8002628 <ATP_operation+0x8f8>)
 80023e2:	488f      	ldr	r0, [pc, #572]	@ (8002620 <ATP_operation+0x8f0>)
 80023e4:	f00e fbba 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 80023e8:	488d      	ldr	r0, [pc, #564]	@ (8002620 <ATP_operation+0x8f0>)
 80023ea:	f7fd ff51 	bl	8000290 <strlen>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	498a      	ldr	r1, [pc, #552]	@ (8002620 <ATP_operation+0x8f0>)
 80023f6:	488d      	ldr	r0, [pc, #564]	@ (800262c <ATP_operation+0x8fc>)
 80023f8:	f00b fb58 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOB,GPO_1_Pin);
 80023fc:	2101      	movs	r1, #1
 80023fe:	488c      	ldr	r0, [pc, #560]	@ (8002630 <ATP_operation+0x900>)
 8002400:	f003 fc42 	bl	8005c88 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 8002404:	2005      	movs	r0, #5
 8002406:	f003 f863 	bl	80054d0 <HAL_Delay>
//			memset(ATP_buffer,0,sizeof(ATP_buffer));
//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_1_Pin));
//			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
			break;
 800240a:	e327      	b.n	8002a5c <ATP_operation+0xd2c>
		case  OUTPUT_GPIO_2 	:
			ATP_test_number=0;
 800240c:	4b83      	ldr	r3, [pc, #524]	@ (800261c <ATP_operation+0x8ec>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 8002412:	2264      	movs	r2, #100	@ 0x64
 8002414:	2100      	movs	r1, #0
 8002416:	4882      	ldr	r0, [pc, #520]	@ (8002620 <ATP_operation+0x8f0>)
 8002418:	f00e fc03 	bl	8010c22 <memset>
			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_2_Pin));
 800241c:	2102      	movs	r1, #2
 800241e:	4884      	ldr	r0, [pc, #528]	@ (8002630 <ATP_operation+0x900>)
 8002420:	f003 fc02 	bl	8005c28 <HAL_GPIO_ReadPin>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	497f      	ldr	r1, [pc, #508]	@ (8002628 <ATP_operation+0x8f8>)
 800242a:	487d      	ldr	r0, [pc, #500]	@ (8002620 <ATP_operation+0x8f0>)
 800242c:	f00e fb96 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
 8002430:	487b      	ldr	r0, [pc, #492]	@ (8002620 <ATP_operation+0x8f0>)
 8002432:	f7fd ff2d 	bl	8000290 <strlen>
 8002436:	4603      	mov	r3, r0
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	4978      	ldr	r1, [pc, #480]	@ (8002620 <ATP_operation+0x8f0>)
 800243e:	487b      	ldr	r0, [pc, #492]	@ (800262c <ATP_operation+0x8fc>)
 8002440:	f00b fb34 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_GPIO_TogglePin(GPIOB,GPO_2_Pin);
 8002444:	2102      	movs	r1, #2
 8002446:	487a      	ldr	r0, [pc, #488]	@ (8002630 <ATP_operation+0x900>)
 8002448:	f003 fc1e 	bl	8005c88 <HAL_GPIO_TogglePin>
			HAL_Delay(5);
 800244c:	2005      	movs	r0, #5
 800244e:	f003 f83f 	bl	80054d0 <HAL_Delay>
//			memset(ATP_buffer,0,sizeof(ATP_buffer));
//			sprintf((char *)ATP_buffer,"Pin State %d\n\r",HAL_GPIO_ReadPin(GPIOB,GPO_2_Pin));
//			HAL_UART_Transmit_IT(&huart5, ATP_buffer, strlen((char *)ATP_buffer));
			break;
 8002452:	e303      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_1		 		:
			ATP_test_number=0;
 8002454:	4b71      	ldr	r3, [pc, #452]	@ (800261c <ATP_operation+0x8ec>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_1);
 800245a:	2100      	movs	r1, #0
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe fdbb 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 8002462:	2032      	movs	r0, #50	@ 0x32
 8002464:	f003 f834 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",1,1,sensor_hex[0][0],temp_sensor[0][0]);
 8002468:	4b72      	ldr	r3, [pc, #456]	@ (8002634 <ATP_operation+0x904>)
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	461c      	mov	r4, r3
 800246e:	4b72      	ldr	r3, [pc, #456]	@ (8002638 <ATP_operation+0x908>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f878 	bl	8000568 <__aeabi_f2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002480:	9400      	str	r4, [sp, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	2201      	movs	r2, #1
 8002486:	496d      	ldr	r1, [pc, #436]	@ (800263c <ATP_operation+0x90c>)
 8002488:	4865      	ldr	r0, [pc, #404]	@ (8002620 <ATP_operation+0x8f0>)
 800248a:	f00e fb67 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800248e:	2264      	movs	r2, #100	@ 0x64
 8002490:	4963      	ldr	r1, [pc, #396]	@ (8002620 <ATP_operation+0x8f0>)
 8002492:	4866      	ldr	r0, [pc, #408]	@ (800262c <ATP_operation+0x8fc>)
 8002494:	f00b fb0a 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 8002498:	2032      	movs	r0, #50	@ 0x32
 800249a:	f003 f819 	bl	80054d0 <HAL_Delay>
			break;
 800249e:	e2dd      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_2		 		:
			ATP_test_number=0;
 80024a0:	4b5e      	ldr	r3, [pc, #376]	@ (800261c <ATP_operation+0x8ec>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_2);
 80024a6:	2101      	movs	r1, #1
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7fe fd95 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 80024ae:	2032      	movs	r0, #50	@ 0x32
 80024b0:	f003 f80e 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",1,2,sensor_hex[0][1],temp_sensor[0][1]);
 80024b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002634 <ATP_operation+0x904>)
 80024b6:	885b      	ldrh	r3, [r3, #2]
 80024b8:	461c      	mov	r4, r3
 80024ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002638 <ATP_operation+0x908>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f852 	bl	8000568 <__aeabi_f2d>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024cc:	9400      	str	r4, [sp, #0]
 80024ce:	2302      	movs	r3, #2
 80024d0:	2201      	movs	r2, #1
 80024d2:	495a      	ldr	r1, [pc, #360]	@ (800263c <ATP_operation+0x90c>)
 80024d4:	4852      	ldr	r0, [pc, #328]	@ (8002620 <ATP_operation+0x8f0>)
 80024d6:	f00e fb41 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 80024da:	2264      	movs	r2, #100	@ 0x64
 80024dc:	4950      	ldr	r1, [pc, #320]	@ (8002620 <ATP_operation+0x8f0>)
 80024de:	4853      	ldr	r0, [pc, #332]	@ (800262c <ATP_operation+0x8fc>)
 80024e0:	f00b fae4 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 80024e4:	2032      	movs	r0, #50	@ 0x32
 80024e6:	f002 fff3 	bl	80054d0 <HAL_Delay>
			break;
 80024ea:	e2b7      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_3		 		:
			ATP_test_number=0;
 80024ec:	4b4b      	ldr	r3, [pc, #300]	@ (800261c <ATP_operation+0x8ec>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_3);
 80024f2:	2102      	movs	r1, #2
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7fe fd6f 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 80024fa:	2032      	movs	r0, #50	@ 0x32
 80024fc:	f002 ffe8 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",1,3,sensor_hex[0][2],temp_sensor[0][2]);
 8002500:	4b4c      	ldr	r3, [pc, #304]	@ (8002634 <ATP_operation+0x904>)
 8002502:	889b      	ldrh	r3, [r3, #4]
 8002504:	461c      	mov	r4, r3
 8002506:	4b4c      	ldr	r3, [pc, #304]	@ (8002638 <ATP_operation+0x908>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f82c 	bl	8000568 <__aeabi_f2d>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002518:	9400      	str	r4, [sp, #0]
 800251a:	2303      	movs	r3, #3
 800251c:	2201      	movs	r2, #1
 800251e:	4947      	ldr	r1, [pc, #284]	@ (800263c <ATP_operation+0x90c>)
 8002520:	483f      	ldr	r0, [pc, #252]	@ (8002620 <ATP_operation+0x8f0>)
 8002522:	f00e fb1b 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 8002526:	2264      	movs	r2, #100	@ 0x64
 8002528:	493d      	ldr	r1, [pc, #244]	@ (8002620 <ATP_operation+0x8f0>)
 800252a:	4840      	ldr	r0, [pc, #256]	@ (800262c <ATP_operation+0x8fc>)
 800252c:	f00b fabe 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 8002530:	2032      	movs	r0, #50	@ 0x32
 8002532:	f002 ffcd 	bl	80054d0 <HAL_Delay>
			break;
 8002536:	e291      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_4		 		:
			ATP_test_number=0;
 8002538:	4b38      	ldr	r3, [pc, #224]	@ (800261c <ATP_operation+0x8ec>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_1, channel_4);
 800253e:	2103      	movs	r1, #3
 8002540:	2000      	movs	r0, #0
 8002542:	f7fe fd49 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 8002546:	2032      	movs	r0, #50	@ 0x32
 8002548:	f002 ffc2 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d  0x%X  temp = %f\n\r",1,4,sensor_hex[0][3],temp_sensor[0][3]);
 800254c:	4b39      	ldr	r3, [pc, #228]	@ (8002634 <ATP_operation+0x904>)
 800254e:	88db      	ldrh	r3, [r3, #6]
 8002550:	461c      	mov	r4, r3
 8002552:	4b39      	ldr	r3, [pc, #228]	@ (8002638 <ATP_operation+0x908>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe f806 	bl	8000568 <__aeabi_f2d>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002564:	9400      	str	r4, [sp, #0]
 8002566:	2304      	movs	r3, #4
 8002568:	2201      	movs	r2, #1
 800256a:	4935      	ldr	r1, [pc, #212]	@ (8002640 <ATP_operation+0x910>)
 800256c:	482c      	ldr	r0, [pc, #176]	@ (8002620 <ATP_operation+0x8f0>)
 800256e:	f00e faf5 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 8002572:	2264      	movs	r2, #100	@ 0x64
 8002574:	492a      	ldr	r1, [pc, #168]	@ (8002620 <ATP_operation+0x8f0>)
 8002576:	482d      	ldr	r0, [pc, #180]	@ (800262c <ATP_operation+0x8fc>)
 8002578:	f00b fa98 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800257c:	2032      	movs	r0, #50	@ 0x32
 800257e:	f002 ffa7 	bl	80054d0 <HAL_Delay>
			break;
 8002582:	e26b      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_5		 		:
			ATP_test_number=0;
 8002584:	4b25      	ldr	r3, [pc, #148]	@ (800261c <ATP_operation+0x8ec>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_1);
 800258a:	2100      	movs	r1, #0
 800258c:	2001      	movs	r0, #1
 800258e:	f7fe fd23 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 8002592:	2032      	movs	r0, #50	@ 0x32
 8002594:	f002 ff9c 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0X%X    temp = %f\n\r",2,1,sensor_hex[1][0],temp_sensor[1][0]);
 8002598:	4b26      	ldr	r3, [pc, #152]	@ (8002634 <ATP_operation+0x904>)
 800259a:	891b      	ldrh	r3, [r3, #8]
 800259c:	461c      	mov	r4, r3
 800259e:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <ATP_operation+0x908>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ffe0 	bl	8000568 <__aeabi_f2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025b0:	9400      	str	r4, [sp, #0]
 80025b2:	2301      	movs	r3, #1
 80025b4:	2202      	movs	r2, #2
 80025b6:	4923      	ldr	r1, [pc, #140]	@ (8002644 <ATP_operation+0x914>)
 80025b8:	4819      	ldr	r0, [pc, #100]	@ (8002620 <ATP_operation+0x8f0>)
 80025ba:	f00e facf 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 80025be:	2264      	movs	r2, #100	@ 0x64
 80025c0:	4917      	ldr	r1, [pc, #92]	@ (8002620 <ATP_operation+0x8f0>)
 80025c2:	481a      	ldr	r0, [pc, #104]	@ (800262c <ATP_operation+0x8fc>)
 80025c4:	f00b fa72 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 80025c8:	2032      	movs	r0, #50	@ 0x32
 80025ca:	f002 ff81 	bl	80054d0 <HAL_Delay>
			break;
 80025ce:	e245      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_6		 		:
			ATP_test_number=0;
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <ATP_operation+0x8ec>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_2);
 80025d6:	2101      	movs	r1, #1
 80025d8:	2001      	movs	r0, #1
 80025da:	f7fe fcfd 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 80025de:	2032      	movs	r0, #50	@ 0x32
 80025e0:	f002 ff76 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",2,2,sensor_hex[1][1],temp_sensor[1][1]);
 80025e4:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <ATP_operation+0x904>)
 80025e6:	895b      	ldrh	r3, [r3, #10]
 80025e8:	461c      	mov	r4, r3
 80025ea:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <ATP_operation+0x908>)
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ffba 	bl	8000568 <__aeabi_f2d>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025fc:	9400      	str	r4, [sp, #0]
 80025fe:	2302      	movs	r3, #2
 8002600:	2202      	movs	r2, #2
 8002602:	490e      	ldr	r1, [pc, #56]	@ (800263c <ATP_operation+0x90c>)
 8002604:	4806      	ldr	r0, [pc, #24]	@ (8002620 <ATP_operation+0x8f0>)
 8002606:	f00e faa9 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800260a:	2264      	movs	r2, #100	@ 0x64
 800260c:	4904      	ldr	r1, [pc, #16]	@ (8002620 <ATP_operation+0x8f0>)
 800260e:	4807      	ldr	r0, [pc, #28]	@ (800262c <ATP_operation+0x8fc>)
 8002610:	f00b fa4c 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 8002614:	2032      	movs	r0, #50	@ 0x32
 8002616:	f002 ff5b 	bl	80054d0 <HAL_Delay>
			break;
 800261a:	e21f      	b.n	8002a5c <ATP_operation+0xd2c>
 800261c:	2000036e 	.word	0x2000036e
 8002620:	20000384 	.word	0x20000384
 8002624:	42021000 	.word	0x42021000
 8002628:	080130f8 	.word	0x080130f8
 800262c:	20005964 	.word	0x20005964
 8002630:	42020400 	.word	0x42020400
 8002634:	20000340 	.word	0x20000340
 8002638:	20000310 	.word	0x20000310
 800263c:	08013108 	.word	0x08013108
 8002640:	08013130 	.word	0x08013130
 8002644:	08013158 	.word	0x08013158
		case  TS_7		 		:
			ATP_test_number=0;
 8002648:	4b9e      	ldr	r3, [pc, #632]	@ (80028c4 <ATP_operation+0xb94>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_3);
 800264e:	2102      	movs	r1, #2
 8002650:	2001      	movs	r0, #1
 8002652:	f7fe fcc1 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 8002656:	2032      	movs	r0, #50	@ 0x32
 8002658:	f002 ff3a 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",2,3,sensor_hex[1][2],temp_sensor[1][2]);
 800265c:	4b9a      	ldr	r3, [pc, #616]	@ (80028c8 <ATP_operation+0xb98>)
 800265e:	899b      	ldrh	r3, [r3, #12]
 8002660:	461c      	mov	r4, r3
 8002662:	4b9a      	ldr	r3, [pc, #616]	@ (80028cc <ATP_operation+0xb9c>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff7e 	bl	8000568 <__aeabi_f2d>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002674:	9400      	str	r4, [sp, #0]
 8002676:	2303      	movs	r3, #3
 8002678:	2202      	movs	r2, #2
 800267a:	4995      	ldr	r1, [pc, #596]	@ (80028d0 <ATP_operation+0xba0>)
 800267c:	4895      	ldr	r0, [pc, #596]	@ (80028d4 <ATP_operation+0xba4>)
 800267e:	f00e fa6d 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 8002682:	2264      	movs	r2, #100	@ 0x64
 8002684:	4993      	ldr	r1, [pc, #588]	@ (80028d4 <ATP_operation+0xba4>)
 8002686:	4894      	ldr	r0, [pc, #592]	@ (80028d8 <ATP_operation+0xba8>)
 8002688:	f00b fa10 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 800268c:	2032      	movs	r0, #50	@ 0x32
 800268e:	f002 ff1f 	bl	80054d0 <HAL_Delay>
			break;
 8002692:	e1e3      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_8		 		:
			ATP_test_number=0;
 8002694:	4b8b      	ldr	r3, [pc, #556]	@ (80028c4 <ATP_operation+0xb94>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_2, channel_4);
 800269a:	2103      	movs	r1, #3
 800269c:	2001      	movs	r0, #1
 800269e:	f7fe fc9b 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 80026a2:	2032      	movs	r0, #50	@ 0x32
 80026a4:	f002 ff14 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d  0x%X  temp = %f\n\r",2,4,sensor_hex[1][3],temp_sensor[1][3]);
 80026a8:	4b87      	ldr	r3, [pc, #540]	@ (80028c8 <ATP_operation+0xb98>)
 80026aa:	89db      	ldrh	r3, [r3, #14]
 80026ac:	461c      	mov	r4, r3
 80026ae:	4b87      	ldr	r3, [pc, #540]	@ (80028cc <ATP_operation+0xb9c>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd ff58 	bl	8000568 <__aeabi_f2d>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026c0:	9400      	str	r4, [sp, #0]
 80026c2:	2304      	movs	r3, #4
 80026c4:	2202      	movs	r2, #2
 80026c6:	4985      	ldr	r1, [pc, #532]	@ (80028dc <ATP_operation+0xbac>)
 80026c8:	4882      	ldr	r0, [pc, #520]	@ (80028d4 <ATP_operation+0xba4>)
 80026ca:	f00e fa47 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 80026ce:	2264      	movs	r2, #100	@ 0x64
 80026d0:	4980      	ldr	r1, [pc, #512]	@ (80028d4 <ATP_operation+0xba4>)
 80026d2:	4881      	ldr	r0, [pc, #516]	@ (80028d8 <ATP_operation+0xba8>)
 80026d4:	f00b f9ea 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 80026d8:	2032      	movs	r0, #50	@ 0x32
 80026da:	f002 fef9 	bl	80054d0 <HAL_Delay>
			break;
 80026de:	e1bd      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_9		 		:
			ATP_test_number=0;
 80026e0:	4b78      	ldr	r3, [pc, #480]	@ (80028c4 <ATP_operation+0xb94>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_1);
 80026e6:	2100      	movs	r1, #0
 80026e8:	2002      	movs	r0, #2
 80026ea:	f7fe fc75 	bl	8000fd8 <ADC_READ>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X   temp = %f\n\r",3,1,sensor_hex[2][0],temp_sensor[2][0]);
 80026ee:	4b76      	ldr	r3, [pc, #472]	@ (80028c8 <ATP_operation+0xb98>)
 80026f0:	8a1b      	ldrh	r3, [r3, #16]
 80026f2:	461c      	mov	r4, r3
 80026f4:	4b75      	ldr	r3, [pc, #468]	@ (80028cc <ATP_operation+0xb9c>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd ff35 	bl	8000568 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002706:	9400      	str	r4, [sp, #0]
 8002708:	2301      	movs	r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	4974      	ldr	r1, [pc, #464]	@ (80028e0 <ATP_operation+0xbb0>)
 800270e:	4871      	ldr	r0, [pc, #452]	@ (80028d4 <ATP_operation+0xba4>)
 8002710:	f00e fa24 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 8002714:	2264      	movs	r2, #100	@ 0x64
 8002716:	496f      	ldr	r1, [pc, #444]	@ (80028d4 <ATP_operation+0xba4>)
 8002718:	486f      	ldr	r0, [pc, #444]	@ (80028d8 <ATP_operation+0xba8>)
 800271a:	f00b f9c7 	bl	800daac <HAL_UART_Transmit_IT>
			break;
 800271e:	e19d      	b.n	8002a5c <ATP_operation+0xd2c>

		case  TS_10		 		:
			ATP_test_number=0;
 8002720:	4b68      	ldr	r3, [pc, #416]	@ (80028c4 <ATP_operation+0xb94>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_2);
 8002726:	2101      	movs	r1, #1
 8002728:	2002      	movs	r0, #2
 800272a:	f7fe fc55 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 800272e:	2032      	movs	r0, #50	@ 0x32
 8002730:	f002 fece 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d  0x%X  temp = %f\n\r",3,2,sensor_hex[2][1],temp_sensor[2][1]);
 8002734:	4b64      	ldr	r3, [pc, #400]	@ (80028c8 <ATP_operation+0xb98>)
 8002736:	8a5b      	ldrh	r3, [r3, #18]
 8002738:	461c      	mov	r4, r3
 800273a:	4b64      	ldr	r3, [pc, #400]	@ (80028cc <ATP_operation+0xb9c>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd ff12 	bl	8000568 <__aeabi_f2d>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800274c:	9400      	str	r4, [sp, #0]
 800274e:	2302      	movs	r3, #2
 8002750:	2203      	movs	r2, #3
 8002752:	4962      	ldr	r1, [pc, #392]	@ (80028dc <ATP_operation+0xbac>)
 8002754:	485f      	ldr	r0, [pc, #380]	@ (80028d4 <ATP_operation+0xba4>)
 8002756:	f00e fa01 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800275a:	2264      	movs	r2, #100	@ 0x64
 800275c:	495d      	ldr	r1, [pc, #372]	@ (80028d4 <ATP_operation+0xba4>)
 800275e:	485e      	ldr	r0, [pc, #376]	@ (80028d8 <ATP_operation+0xba8>)
 8002760:	f00b f9a4 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 8002764:	2032      	movs	r0, #50	@ 0x32
 8002766:	f002 feb3 	bl	80054d0 <HAL_Delay>
			break;
 800276a:	e177      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_11		 		:
			ATP_test_number=0;
 800276c:	4b55      	ldr	r3, [pc, #340]	@ (80028c4 <ATP_operation+0xb94>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_3);
 8002772:	2102      	movs	r1, #2
 8002774:	2002      	movs	r0, #2
 8002776:	f7fe fc2f 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 800277a:	2032      	movs	r0, #50	@ 0x32
 800277c:	f002 fea8 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",3,3,sensor_hex[2][2],temp_sensor[2][2]);
 8002780:	4b51      	ldr	r3, [pc, #324]	@ (80028c8 <ATP_operation+0xb98>)
 8002782:	8a9b      	ldrh	r3, [r3, #20]
 8002784:	461c      	mov	r4, r3
 8002786:	4b51      	ldr	r3, [pc, #324]	@ (80028cc <ATP_operation+0xb9c>)
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd feec 	bl	8000568 <__aeabi_f2d>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002798:	9400      	str	r4, [sp, #0]
 800279a:	2303      	movs	r3, #3
 800279c:	2203      	movs	r2, #3
 800279e:	494c      	ldr	r1, [pc, #304]	@ (80028d0 <ATP_operation+0xba0>)
 80027a0:	484c      	ldr	r0, [pc, #304]	@ (80028d4 <ATP_operation+0xba4>)
 80027a2:	f00e f9db 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 80027a6:	2264      	movs	r2, #100	@ 0x64
 80027a8:	494a      	ldr	r1, [pc, #296]	@ (80028d4 <ATP_operation+0xba4>)
 80027aa:	484b      	ldr	r0, [pc, #300]	@ (80028d8 <ATP_operation+0xba8>)
 80027ac:	f00b f97e 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 80027b0:	2032      	movs	r0, #50	@ 0x32
 80027b2:	f002 fe8d 	bl	80054d0 <HAL_Delay>
			break;
 80027b6:	e151      	b.n	8002a5c <ATP_operation+0xd2c>
		case  TS_12		 		:
			ATP_test_number=0;
 80027b8:	4b42      	ldr	r3, [pc, #264]	@ (80028c4 <ATP_operation+0xb94>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
			ADC_READ( adc_3, channel_4);
 80027be:	2103      	movs	r1, #3
 80027c0:	2002      	movs	r0, #2
 80027c2:	f7fe fc09 	bl	8000fd8 <ADC_READ>
			HAL_Delay(50);
 80027c6:	2032      	movs	r0, #50	@ 0x32
 80027c8:	f002 fe82 	bl	80054d0 <HAL_Delay>
			sprintf((char *)ATP_buffer, "ADC    %d  Sensor %d 0x%X  temp = %f\n\r",3,4,sensor_hex[2][3],temp_sensor[2][3]);
 80027cc:	4b3e      	ldr	r3, [pc, #248]	@ (80028c8 <ATP_operation+0xb98>)
 80027ce:	8adb      	ldrh	r3, [r3, #22]
 80027d0:	461c      	mov	r4, r3
 80027d2:	4b3e      	ldr	r3, [pc, #248]	@ (80028cc <ATP_operation+0xb9c>)
 80027d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fec6 	bl	8000568 <__aeabi_f2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027e4:	9400      	str	r4, [sp, #0]
 80027e6:	2304      	movs	r3, #4
 80027e8:	2203      	movs	r2, #3
 80027ea:	4939      	ldr	r1, [pc, #228]	@ (80028d0 <ATP_operation+0xba0>)
 80027ec:	4839      	ldr	r0, [pc, #228]	@ (80028d4 <ATP_operation+0xba4>)
 80027ee:	f00e f9b5 	bl	8010b5c <siprintf>
			HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 80027f2:	2264      	movs	r2, #100	@ 0x64
 80027f4:	4937      	ldr	r1, [pc, #220]	@ (80028d4 <ATP_operation+0xba4>)
 80027f6:	4838      	ldr	r0, [pc, #224]	@ (80028d8 <ATP_operation+0xba8>)
 80027f8:	f00b f958 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(50);
 80027fc:	2032      	movs	r0, #50	@ 0x32
 80027fe:	f002 fe67 	bl	80054d0 <HAL_Delay>
			break;
 8002802:	e12b      	b.n	8002a5c <ATP_operation+0xd2c>
		case  RTC_CHECK	 		:
			ATP_test_number=0;
 8002804:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <ATP_operation+0xb94>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
			uint8_t time_data_1[8]={0};
 800280a:	2300      	movs	r3, #0
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
			uint32_t sec_addr = 0x60000000 | 0x7FFF9;
 8002812:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <ATP_operation+0xbb4>)
 8002814:	60bb      	str	r3, [r7, #8]
			memset(ATP_buffer,0,sizeof(ATP_buffer));
 8002816:	2264      	movs	r2, #100	@ 0x64
 8002818:	2100      	movs	r1, #0
 800281a:	482e      	ldr	r0, [pc, #184]	@ (80028d4 <ATP_operation+0xba4>)
 800281c:	f00e fa01 	bl	8010c22 <memset>
			HAL_Delay(100);
 8002820:	2064      	movs	r0, #100	@ 0x64
 8002822:	f002 fe55 	bl	80054d0 <HAL_Delay>
			HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data_1,7);
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	463a      	mov	r2, r7
 800282a:	2307      	movs	r3, #7
 800282c:	482e      	ldr	r0, [pc, #184]	@ (80028e8 <ATP_operation+0xbb8>)
 800282e:	f00a ffb1 	bl	800d794 <HAL_SRAM_Read_8b>

			if(time_data_1[6]!= 0)
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01a      	beq.n	800286e <ATP_operation+0xb3e>
			{
				sprintf((char *)ATP_buffer, "{\"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x}\"\n\r",time_data_1[2],time_data_1[1],time_data_1[0],time_data_1[4],time_data_1[5],time_data_1[6]);
 8002838:	78bb      	ldrb	r3, [r7, #2]
 800283a:	461c      	mov	r4, r3
 800283c:	787b      	ldrb	r3, [r7, #1]
 800283e:	461d      	mov	r5, r3
 8002840:	783b      	ldrb	r3, [r7, #0]
 8002842:	793a      	ldrb	r2, [r7, #4]
 8002844:	7979      	ldrb	r1, [r7, #5]
 8002846:	79b8      	ldrb	r0, [r7, #6]
 8002848:	9003      	str	r0, [sp, #12]
 800284a:	9102      	str	r1, [sp, #8]
 800284c:	9201      	str	r2, [sp, #4]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	462b      	mov	r3, r5
 8002852:	4622      	mov	r2, r4
 8002854:	4925      	ldr	r1, [pc, #148]	@ (80028ec <ATP_operation+0xbbc>)
 8002856:	481f      	ldr	r0, [pc, #124]	@ (80028d4 <ATP_operation+0xba4>)
 8002858:	f00e f980 	bl	8010b5c <siprintf>
				HAL_UART_Transmit_IT(&huart5, ATP_buffer, sizeof(ATP_buffer));
 800285c:	2264      	movs	r2, #100	@ 0x64
 800285e:	491d      	ldr	r1, [pc, #116]	@ (80028d4 <ATP_operation+0xba4>)
 8002860:	481d      	ldr	r0, [pc, #116]	@ (80028d8 <ATP_operation+0xba8>)
 8002862:	f00b f923 	bl	800daac <HAL_UART_Transmit_IT>
				HAL_Delay(100);
 8002866:	2064      	movs	r0, #100	@ 0x64
 8002868:	f002 fe32 	bl	80054d0 <HAL_Delay>
				command_str[0]='T';
				command_str[1] = '2';
				command_str[2] = '2';
				command_str[3]= 'E';
			}
			break;
 800286c:	e0f6      	b.n	8002a5c <ATP_operation+0xd2c>
				ATP_test = 1;
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <ATP_operation+0xbc0>)
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
				command_str[0]='T';
 8002874:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <ATP_operation+0xbc4>)
 8002876:	2254      	movs	r2, #84	@ 0x54
 8002878:	701a      	strb	r2, [r3, #0]
				command_str[1] = '2';
 800287a:	4b1e      	ldr	r3, [pc, #120]	@ (80028f4 <ATP_operation+0xbc4>)
 800287c:	2232      	movs	r2, #50	@ 0x32
 800287e:	705a      	strb	r2, [r3, #1]
				command_str[2] = '2';
 8002880:	4b1c      	ldr	r3, [pc, #112]	@ (80028f4 <ATP_operation+0xbc4>)
 8002882:	2232      	movs	r2, #50	@ 0x32
 8002884:	709a      	strb	r2, [r3, #2]
				command_str[3]= 'E';
 8002886:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <ATP_operation+0xbc4>)
 8002888:	2245      	movs	r2, #69	@ 0x45
 800288a:	70da      	strb	r2, [r3, #3]
			break;
 800288c:	e0e6      	b.n	8002a5c <ATP_operation+0xd2c>
		case  NAND_FLASH_WRITE	:
			ATP_test_number= 0;
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <ATP_operation+0xb94>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
			break;
 8002894:	e0e2      	b.n	8002a5c <ATP_operation+0xd2c>

		case  NAND_FLASH_READ	:
			ATP_test_number=0;
 8002896:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <ATP_operation+0xb94>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
			get_NAND_stored_data();
 800289c:	f000 faf2 	bl	8002e84 <get_NAND_stored_data>
			break;
 80028a0:	e0dc      	b.n	8002a5c <ATP_operation+0xd2c>

		case  NAND_FLASH_ERASE	:
			ATP_test_number=0;
 80028a2:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <ATP_operation+0xb94>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
			uint16_t NandBlock=0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	81fb      	strh	r3, [r7, #14]
//			uint8_t read_buffer[8192];
			nand_address.Page=0;
 80028ac:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <ATP_operation+0xbc8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	801a      	strh	r2, [r3, #0]
			nand_address.Block=0;
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <ATP_operation+0xbc8>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	809a      	strh	r2, [r3, #4]
			nand_address.Plane=0;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <ATP_operation+0xbc8>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	805a      	strh	r2, [r3, #2]

			for(NandBlock = 0; NandBlock < MAX_BLOCK; NandBlock++)
 80028be:	2300      	movs	r3, #0
 80028c0:	81fb      	strh	r3, [r7, #14]
 80028c2:	e032      	b.n	800292a <ATP_operation+0xbfa>
 80028c4:	2000036e 	.word	0x2000036e
 80028c8:	20000340 	.word	0x20000340
 80028cc:	20000310 	.word	0x20000310
 80028d0:	08013108 	.word	0x08013108
 80028d4:	20000384 	.word	0x20000384
 80028d8:	20005964 	.word	0x20005964
 80028dc:	08013130 	.word	0x08013130
 80028e0:	08013184 	.word	0x08013184
 80028e4:	6007fff9 	.word	0x6007fff9
 80028e8:	20005b20 	.word	0x20005b20
 80028ec:	080131ac 	.word	0x080131ac
 80028f0:	2000036d 	.word	0x2000036d
 80028f4:	20000358 	.word	0x20000358
 80028f8:	200003e8 	.word	0x200003e8
			{
				nand_address.Block=NandBlock;
 80028fc:	4a59      	ldr	r2, [pc, #356]	@ (8002a64 <ATP_operation+0xd34>)
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	8093      	strh	r3, [r2, #4]
				if (HAL_NAND_Erase_Block(&hnand1, &nand_address) != HAL_OK)
 8002902:	4958      	ldr	r1, [pc, #352]	@ (8002a64 <ATP_operation+0xd34>)
 8002904:	4858      	ldr	r0, [pc, #352]	@ (8002a68 <ATP_operation+0xd38>)
 8002906:	f004 f84d 	bl	80069a4 <HAL_NAND_Erase_Block>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <ATP_operation+0xbf4>
				{
					HAL_UART_Transmit_IT(&huart5, (uint8_t *)NdErStatus, strlen("Error erasing NAND.\n"));
 8002910:	4b56      	ldr	r3, [pc, #344]	@ (8002a6c <ATP_operation+0xd3c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2214      	movs	r2, #20
 8002916:	4619      	mov	r1, r3
 8002918:	4855      	ldr	r0, [pc, #340]	@ (8002a70 <ATP_operation+0xd40>)
 800291a:	f00b f8c7 	bl	800daac <HAL_UART_Transmit_IT>
					HAL_Delay(100);
 800291e:	2064      	movs	r0, #100	@ 0x64
 8002920:	f002 fdd6 	bl	80054d0 <HAL_Delay>
			for(NandBlock = 0; NandBlock < MAX_BLOCK; NandBlock++)
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	3301      	adds	r3, #1
 8002928:	81fb      	strh	r3, [r7, #14]
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002930:	4293      	cmp	r3, r2
 8002932:	d9e3      	bls.n	80028fc <ATP_operation+0xbcc>
////						HAL_Delay(100);
//					}
//				}
//				memset(&read_buffer[0],0,sizeof(read_buffer));
			}
			HAL_UART_Transmit_IT(&huart5, (uint8_t *)NdStatus, strlen("NAND erased successfully!\n"));
 8002934:	4b4f      	ldr	r3, [pc, #316]	@ (8002a74 <ATP_operation+0xd44>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	221a      	movs	r2, #26
 800293a:	4619      	mov	r1, r3
 800293c:	484c      	ldr	r0, [pc, #304]	@ (8002a70 <ATP_operation+0xd40>)
 800293e:	f00b f8b5 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 8002942:	2064      	movs	r0, #100	@ 0x64
 8002944:	f002 fdc4 	bl	80054d0 <HAL_Delay>
			nand_cyclic_run = 0;
 8002948:	4b4b      	ldr	r3, [pc, #300]	@ (8002a78 <ATP_operation+0xd48>)
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
			size_counter = 0;
 800294e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a7c <ATP_operation+0xd4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	801a      	strh	r2, [r3, #0]
			update_NAND_CyclicAddr();
 8002954:	f000 fd48 	bl	80033e8 <update_NAND_CyclicAddr>
			update_SRAM_Addr();
 8002958:	f000 fd6c 	bl	8003434 <update_SRAM_Addr>
			Init_NAND_addr();
 800295c:	f000 fdbe 	bl	80034dc <Init_NAND_addr>

			break;
 8002960:	e07c      	b.n	8002a5c <ATP_operation+0xd2c>

		case LoopBack_RS232: //RS-232
			ATP_test_number=0;
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <ATP_operation+0xd50>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart5, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 8002968:	4846      	ldr	r0, [pc, #280]	@ (8002a84 <ATP_operation+0xd54>)
 800296a:	f7fd fc91 	bl	8000290 <strlen>
 800296e:	4603      	mov	r3, r0
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	4943      	ldr	r1, [pc, #268]	@ (8002a84 <ATP_operation+0xd54>)
 8002976:	483e      	ldr	r0, [pc, #248]	@ (8002a70 <ATP_operation+0xd40>)
 8002978:	f00b f898 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 800297c:	2064      	movs	r0, #100	@ 0x64
 800297e:	f002 fda7 	bl	80054d0 <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 8002982:	2214      	movs	r2, #20
 8002984:	2100      	movs	r1, #0
 8002986:	483f      	ldr	r0, [pc, #252]	@ (8002a84 <ATP_operation+0xd54>)
 8002988:	f00e f94b 	bl	8010c22 <memset>

			break;
 800298c:	e066      	b.n	8002a5c <ATP_operation+0xd2c>
		case LoopBack_RS422: //RS-422
			ATP_test_number=0;
 800298e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a80 <ATP_operation+0xd50>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 8002994:	2201      	movs	r2, #1
 8002996:	2101      	movs	r1, #1
 8002998:	483b      	ldr	r0, [pc, #236]	@ (8002a88 <ATP_operation+0xd58>)
 800299a:	f003 f95d 	bl	8005c58 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800299e:	2001      	movs	r0, #1
 80029a0:	f002 fd96 	bl	80054d0 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart8, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 80029a4:	4837      	ldr	r0, [pc, #220]	@ (8002a84 <ATP_operation+0xd54>)
 80029a6:	f7fd fc73 	bl	8000290 <strlen>
 80029aa:	4603      	mov	r3, r0
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	4934      	ldr	r1, [pc, #208]	@ (8002a84 <ATP_operation+0xd54>)
 80029b2:	4836      	ldr	r0, [pc, #216]	@ (8002a8c <ATP_operation+0xd5c>)
 80029b4:	f00b f87a 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 80029b8:	2064      	movs	r0, #100	@ 0x64
 80029ba:	f002 fd89 	bl	80054d0 <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 80029be:	2214      	movs	r2, #20
 80029c0:	2100      	movs	r1, #0
 80029c2:	4830      	ldr	r0, [pc, #192]	@ (8002a84 <ATP_operation+0xd54>)
 80029c4:	f00e f92d 	bl	8010c22 <memset>
			HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2101      	movs	r1, #1
 80029cc:	482e      	ldr	r0, [pc, #184]	@ (8002a88 <ATP_operation+0xd58>)
 80029ce:	f003 f943 	bl	8005c58 <HAL_GPIO_WritePin>

			break;
 80029d2:	e043      	b.n	8002a5c <ATP_operation+0xd2c>
		case LoopBack1_RS485: //RS-485
			ATP_test_number=0;
 80029d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <ATP_operation+0xd50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, 1);
 80029da:	2201      	movs	r2, #1
 80029dc:	2102      	movs	r1, #2
 80029de:	482a      	ldr	r0, [pc, #168]	@ (8002a88 <ATP_operation+0xd58>)
 80029e0:	f003 f93a 	bl	8005c58 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_IT(&huart10, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 80029e4:	4827      	ldr	r0, [pc, #156]	@ (8002a84 <ATP_operation+0xd54>)
 80029e6:	f7fd fc53 	bl	8000290 <strlen>
 80029ea:	4603      	mov	r3, r0
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	4924      	ldr	r1, [pc, #144]	@ (8002a84 <ATP_operation+0xd54>)
 80029f2:	4827      	ldr	r0, [pc, #156]	@ (8002a90 <ATP_operation+0xd60>)
 80029f4:	f00b f85a 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 80029f8:	2064      	movs	r0, #100	@ 0x64
 80029fa:	f002 fd69 	bl	80054d0 <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 80029fe:	2214      	movs	r2, #20
 8002a00:	2100      	movs	r1, #0
 8002a02:	4820      	ldr	r0, [pc, #128]	@ (8002a84 <ATP_operation+0xd54>)
 8002a04:	f00e f90d 	bl	8010c22 <memset>
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	481e      	ldr	r0, [pc, #120]	@ (8002a88 <ATP_operation+0xd58>)
 8002a0e:	f003 f923 	bl	8005c58 <HAL_GPIO_WritePin>

			break;
 8002a12:	e023      	b.n	8002a5c <ATP_operation+0xd2c>
		case LoopBack2_RS485: //RS-485
			ATP_test_number=0;
 8002a14:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <ATP_operation+0xd50>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, 1);
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	481a      	ldr	r0, [pc, #104]	@ (8002a88 <ATP_operation+0xd58>)
 8002a20:	f003 f91a 	bl	8005c58 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_IT(&huart4, LOOPBACK_BUF, strlen((char *)LOOPBACK_BUF));
 8002a24:	4817      	ldr	r0, [pc, #92]	@ (8002a84 <ATP_operation+0xd54>)
 8002a26:	f7fd fc33 	bl	8000290 <strlen>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4914      	ldr	r1, [pc, #80]	@ (8002a84 <ATP_operation+0xd54>)
 8002a32:	4818      	ldr	r0, [pc, #96]	@ (8002a94 <ATP_operation+0xd64>)
 8002a34:	f00b f83a 	bl	800daac <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 8002a38:	2064      	movs	r0, #100	@ 0x64
 8002a3a:	f002 fd49 	bl	80054d0 <HAL_Delay>
			memset(LOOPBACK_BUF,0,sizeof(LOOPBACK_BUF));
 8002a3e:	2214      	movs	r2, #20
 8002a40:	2100      	movs	r1, #0
 8002a42:	4810      	ldr	r0, [pc, #64]	@ (8002a84 <ATP_operation+0xd54>)
 8002a44:	f00e f8ed 	bl	8010c22 <memset>
			HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2104      	movs	r1, #4
 8002a4c:	480e      	ldr	r0, [pc, #56]	@ (8002a88 <ATP_operation+0xd58>)
 8002a4e:	f003 f903 	bl	8005c58 <HAL_GPIO_WritePin>

			break;
 8002a52:	e003      	b.n	8002a5c <ATP_operation+0xd2c>
		default:
			ATP_test_number=0;
 8002a54:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <ATP_operation+0xd50>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
			break;
 8002a5a:	bf00      	nop
		}

	}

}
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bdb0      	pop	{r4, r5, r7, pc}
 8002a64:	200003e8 	.word	0x200003e8
 8002a68:	20005b78 	.word	0x20005b78
 8002a6c:	20000080 	.word	0x20000080
 8002a70:	20005964 	.word	0x20005964
 8002a74:	2000007c 	.word	0x2000007c
 8002a78:	200055b5 	.word	0x200055b5
 8002a7c:	200055b8 	.word	0x200055b8
 8002a80:	2000036e 	.word	0x2000036e
 8002a84:	20000370 	.word	0x20000370
 8002a88:	42020000 	.word	0x42020000
 8002a8c:	200059f8 	.word	0x200059f8
 8002a90:	20005a8c 	.word	0x20005a8c
 8002a94:	200058d0 	.word	0x200058d0

08002a98 <NAND_operation>:
 * @brief Performs NAND operations like writing, reading, and checking block status.
 * This function writes data to NAND, reads it back to verify, checks and updates
 * block status based on the comparison result.
 */
void NAND_operation(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0


	HAL_GPIO_TogglePin(GPIOE, LED5_Pin);  // Toggle status LED
 8002a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002aa2:	4830      	ldr	r0, [pc, #192]	@ (8002b64 <NAND_operation+0xcc>)
 8002aa4:	f003 f8f0 	bl	8005c88 <HAL_GPIO_TogglePin>
	// Move to the next block if all pages in the current block have been written
	if (nand_address.Page > 127)
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b68 <NAND_operation+0xd0>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	2b7f      	cmp	r3, #127	@ 0x7f
 8002aae:	d90b      	bls.n	8002ac8 <NAND_operation+0x30>
	{
		get_Good_NAND_block();
 8002ab0:	f000 f954 	bl	8002d5c <get_Good_NAND_block>
		nand_address.Page = 0;
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b68 <NAND_operation+0xd0>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	801a      	strh	r2, [r3, #0]
		HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8002aba:	492b      	ldr	r1, [pc, #172]	@ (8002b68 <NAND_operation+0xd0>)
 8002abc:	482b      	ldr	r0, [pc, #172]	@ (8002b6c <NAND_operation+0xd4>)
 8002abe:	f003 ff71 	bl	80069a4 <HAL_NAND_Erase_Block>
		HAL_Delay(100);
 8002ac2:	2064      	movs	r0, #100	@ 0x64
 8002ac4:	f002 fd04 	bl	80054d0 <HAL_Delay>
	}

	memset(read_data, 0, 8192);
 8002ac8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002acc:	2100      	movs	r1, #0
 8002ace:	4828      	ldr	r0, [pc, #160]	@ (8002b70 <NAND_operation+0xd8>)
 8002ad0:	f00e f8a7 	bl	8010c22 <memset>
	memset(NAND_data, 0, 8192);
 8002ad4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4826      	ldr	r0, [pc, #152]	@ (8002b74 <NAND_operation+0xdc>)
 8002adc:	f00e f8a1 	bl	8010c22 <memset>

	// Prepare data for NAND write
	get_NAND_data(NAND_data);
 8002ae0:	4824      	ldr	r0, [pc, #144]	@ (8002b74 <NAND_operation+0xdc>)
 8002ae2:	f000 fc0d 	bl	8003300 <get_NAND_data>

//	HAL_UART_Transmit(&huart5, (uint8_t *)&NAND_data, 8192,0xFFFFFF);
//	HAL_Delay(100);
	// Write data to NAND flash
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4a22      	ldr	r2, [pc, #136]	@ (8002b74 <NAND_operation+0xdc>)
 8002aea:	491f      	ldr	r1, [pc, #124]	@ (8002b68 <NAND_operation+0xd0>)
 8002aec:	481f      	ldr	r0, [pc, #124]	@ (8002b6c <NAND_operation+0xd4>)
 8002aee:	f003 fb25 	bl	800613c <HAL_NAND_Write_Page_8b>

	// Read data back from NAND flash for verification
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *) &nand_address, read_data, 1);
 8002af2:	2301      	movs	r3, #1
 8002af4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b70 <NAND_operation+0xd8>)
 8002af6:	491c      	ldr	r1, [pc, #112]	@ (8002b68 <NAND_operation+0xd0>)
 8002af8:	481c      	ldr	r0, [pc, #112]	@ (8002b6c <NAND_operation+0xd4>)
 8002afa:	f003 f9c5 	bl	8005e88 <HAL_NAND_Read_Page_8b>
	//	HAL_UART_Transmit_IT(&huart4, read_data, sizeof(read_data));
	//	HAL_Delay(20);
	// Calculate bit difference between written and read data
	uint16_t bit_difference = calculate_hamming_distance(NAND_data, read_data, 8192);
 8002afe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b02:	491b      	ldr	r1, [pc, #108]	@ (8002b70 <NAND_operation+0xd8>)
 8002b04:	481b      	ldr	r0, [pc, #108]	@ (8002b74 <NAND_operation+0xdc>)
 8002b06:	f000 f8be 	bl	8002c86 <calculate_hamming_distance>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	80fb      	strh	r3, [r7, #6]

	// Check if data read matches data written
	if (bit_difference <50) // Data matches
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b31      	cmp	r3, #49	@ 0x31
 8002b12:	d813      	bhi.n	8002b3c <NAND_operation+0xa4>
	{
		if (nand_address.Page == 0)
 8002b14:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <NAND_operation+0xd0>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d108      	bne.n	8002b2e <NAND_operation+0x96>
		{
			set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 1); // Mark block as good
 8002b1c:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <NAND_operation+0xd0>)
 8002b1e:	8818      	ldrh	r0, [r3, #0]
 8002b20:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <NAND_operation+0xd0>)
 8002b22:	8899      	ldrh	r1, [r3, #4]
 8002b24:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <NAND_operation+0xd0>)
 8002b26:	885a      	ldrh	r2, [r3, #2]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f000 f857 	bl	8002bdc <set_NAND_block_status>
		}
		nand_address.Page++;
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b68 <NAND_operation+0xd0>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	3301      	adds	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <NAND_operation+0xd0>)
 8002b38:	801a      	strh	r2, [r3, #0]
 8002b3a:	e007      	b.n	8002b4c <NAND_operation+0xb4>

	}
	else // Data mismatch - possible bad block
	{
		bad_block_check_counter = 0 ;
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <NAND_operation+0xe0>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]
		handle_bad_block(); // Call function to handle the bad block scenario
 8002b42:	f000 f8c9 	bl	8002cd8 <handle_bad_block>
		bad_block_check_counter = 0;
 8002b46:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <NAND_operation+0xe0>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	801a      	strh	r2, [r3, #0]
	}

	nand_update = 1;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <NAND_operation+0xe4>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
	update_NAND_addr();
 8002b52:	f000 fc35 	bl	80033c0 <update_NAND_addr>
	update_NAND_CyclicAddr();
 8002b56:	f000 fc47 	bl	80033e8 <update_NAND_CyclicAddr>

}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	42021000 	.word	0x42021000
 8002b68:	200003e8 	.word	0x200003e8
 8002b6c:	20005b78 	.word	0x20005b78
 8002b70:	200003f4 	.word	0x200003f4
 8002b74:	200023f4 	.word	0x200023f4
 8002b78:	200055b6 	.word	0x200055b6
 8002b7c:	200055b4 	.word	0x200055b4

08002b80 <get_NAND_block_status>:
/**
 * @brief Reads and updates the status of each block in NAND.
 * Sets the block status array based on whether the block is good (0xFF) or bad (0x00).
 */
void get_NAND_block_status()
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 4096; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	80fb      	strh	r3, [r7, #6]
 8002b8a:	e016      	b.n	8002bba <get_NAND_block_status+0x3a>
	{
		nand_address.Block = i;
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bcc <get_NAND_block_status+0x4c>)
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	8093      	strh	r3, [r2, #4]
		HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address, spare_buffer, 1);
 8002b92:	2301      	movs	r3, #1
 8002b94:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd0 <get_NAND_block_status+0x50>)
 8002b96:	490d      	ldr	r1, [pc, #52]	@ (8002bcc <get_NAND_block_status+0x4c>)
 8002b98:	480e      	ldr	r0, [pc, #56]	@ (8002bd4 <get_NAND_block_status+0x54>)
 8002b9a:	f003 fc27 	bl	80063ec <HAL_NAND_Read_SpareArea_8b>
		nand_block_status[i] = (spare_buffer[0] == 0xFF) ? 1 : 0;
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <get_NAND_block_status+0x50>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2bff      	cmp	r3, #255	@ 0xff
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	2300      	movne	r3, #0
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4a09      	ldr	r2, [pc, #36]	@ (8002bd8 <get_NAND_block_status+0x58>)
 8002bb2:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < 4096; i++)
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	80fb      	strh	r3, [r7, #6]
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc0:	d3e4      	bcc.n	8002b8c <get_NAND_block_status+0xc>
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200003e8 	.word	0x200003e8
 8002bd0:	200043f4 	.word	0x200043f4
 8002bd4:	20005b78 	.word	0x20005b78
 8002bd8:	200045b4 	.word	0x200045b4

08002bdc <set_NAND_block_status>:
 * @param block The block number to update.
 * @param plane The NAND plane number.
 * @param block_state 1 for good block, 0 for bad block.
 */
void set_NAND_block_status(uint16_t page, uint16_t block, uint16_t plane, uint8_t block_state)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4604      	mov	r4, r0
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	461a      	mov	r2, r3
 8002bea:	4623      	mov	r3, r4
 8002bec:	80fb      	strh	r3, [r7, #6]
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80bb      	strh	r3, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	807b      	strh	r3, [r7, #2]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	707b      	strb	r3, [r7, #1]
	NAND_AddressTypeDef nand_address_block = {0, block, plane};
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	813b      	strh	r3, [r7, #8]
 8002bfe:	88bb      	ldrh	r3, [r7, #4]
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	81bb      	strh	r3, [r7, #12]
	HAL_NAND_Read_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 8002c06:	f107 0108 	add.w	r1, r7, #8
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <set_NAND_block_status+0x68>)
 8002c0e:	480e      	ldr	r0, [pc, #56]	@ (8002c48 <set_NAND_block_status+0x6c>)
 8002c10:	f003 fbec 	bl	80063ec <HAL_NAND_Read_SpareArea_8b>

	spare_buffer[0] = (block_state) ? 0xFF : 0x00;  // Set good (0xFF) or bad (0x00)
 8002c14:	787b      	ldrb	r3, [r7, #1]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <set_NAND_block_status+0x42>
 8002c1a:	22ff      	movs	r2, #255	@ 0xff
 8002c1c:	e000      	b.n	8002c20 <set_NAND_block_status+0x44>
 8002c1e:	2200      	movs	r2, #0
 8002c20:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <set_NAND_block_status+0x68>)
 8002c22:	701a      	strb	r2, [r3, #0]
	nand_block_status[block] = block_state;          // Update block status array
 8002c24:	88bb      	ldrh	r3, [r7, #4]
 8002c26:	4909      	ldr	r1, [pc, #36]	@ (8002c4c <set_NAND_block_status+0x70>)
 8002c28:	787a      	ldrb	r2, [r7, #1]
 8002c2a:	54ca      	strb	r2, [r1, r3]
	HAL_NAND_Write_SpareArea_8b(&hnand1, &nand_address_block, spare_buffer, 1);
 8002c2c:	f107 0108 	add.w	r1, r7, #8
 8002c30:	2301      	movs	r3, #1
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <set_NAND_block_status+0x68>)
 8002c34:	4804      	ldr	r0, [pc, #16]	@ (8002c48 <set_NAND_block_status+0x6c>)
 8002c36:	f003 fd44 	bl	80066c2 <HAL_NAND_Write_SpareArea_8b>
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd90      	pop	{r4, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200043f4 	.word	0x200043f4
 8002c48:	20005b78 	.word	0x20005b78
 8002c4c:	200045b4 	.word	0x200045b4

08002c50 <count_set_bits>:
 * @brief Counts the number of set bits (1s) in a byte.
 * @param byte The byte to analyze.
 * @return The number of set bits in the byte.
 */
int count_set_bits(uint8_t byte)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
	while (byte)
 8002c5e:	e008      	b.n	8002c72 <count_set_bits+0x22>
	{
		count += byte & 1;
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4413      	add	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
		byte >>= 1;
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	71fb      	strb	r3, [r7, #7]
	while (byte)
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f3      	bne.n	8002c60 <count_set_bits+0x10>
	}
	return count;
 8002c78:	68fb      	ldr	r3, [r7, #12]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <calculate_hamming_distance>:
 * @param str2 Pointer to the second 8192-byte string.
 * @param length Length of the strings to compare (8192 bytes).
 * @return The number of differing bits between the two strings.
 */
int calculate_hamming_distance(const uint8_t *str1, const uint8_t *str2, size_t length)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
	int differing_bits = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	e013      	b.n	8002cc4 <calculate_hamming_distance+0x3e>
	{
		differing_bits += count_set_bits(str1[i] ^ str2[i]);  // XOR and count set bits in result
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	440b      	add	r3, r1
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4053      	eors	r3, r2
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ffcd 	bl	8002c50 <count_set_bits>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	4413      	add	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < length; i++)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d3e7      	bcc.n	8002c9c <calculate_hamming_distance+0x16>
	}
	return differing_bits;
 8002ccc:	697b      	ldr	r3, [r7, #20]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <handle_bad_block>:
 * @brief Handles bad block processing in NAND by erasing and relocating data.
 * If data verification fails, the function marks the block as bad, and attempts to write data
 * to the next available block.
 */
void handle_bad_block(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
	nand_address.Page = 0;
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <handle_bad_block+0x70>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	801a      	strh	r2, [r3, #0]
	HAL_NAND_Erase_Block(&hnand1, &nand_address);
 8002ce2:	4919      	ldr	r1, [pc, #100]	@ (8002d48 <handle_bad_block+0x70>)
 8002ce4:	4819      	ldr	r0, [pc, #100]	@ (8002d4c <handle_bad_block+0x74>)
 8002ce6:	f003 fe5d 	bl	80069a4 <HAL_NAND_Erase_Block>
	HAL_Delay(100);
 8002cea:	2064      	movs	r0, #100	@ 0x64
 8002cec:	f002 fbf0 	bl	80054d0 <HAL_Delay>
	if(bad_block_check_counter++ > 4094 )
 8002cf0:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <handle_bad_block+0x78>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	b291      	uxth	r1, r2
 8002cf8:	4a15      	ldr	r2, [pc, #84]	@ (8002d50 <handle_bad_block+0x78>)
 8002cfa:	8011      	strh	r1, [r2, #0]
 8002cfc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d81f      	bhi.n	8002d44 <handle_bad_block+0x6c>
	{
		return ;
	}
	// Attempt to rewrite data after erasing the block
	HAL_NAND_Write_Page_8b(&hnand1, &nand_address, NAND_data, 1);
 8002d04:	2301      	movs	r3, #1
 8002d06:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <handle_bad_block+0x7c>)
 8002d08:	490f      	ldr	r1, [pc, #60]	@ (8002d48 <handle_bad_block+0x70>)
 8002d0a:	4810      	ldr	r0, [pc, #64]	@ (8002d4c <handle_bad_block+0x74>)
 8002d0c:	f003 fa16 	bl	800613c <HAL_NAND_Write_Page_8b>
	HAL_NAND_Read_Page_8b(&hnand1, (const NAND_AddressTypeDef *)&nand_address, read_data, 1);
 8002d10:	2301      	movs	r3, #1
 8002d12:	4a11      	ldr	r2, [pc, #68]	@ (8002d58 <handle_bad_block+0x80>)
 8002d14:	490c      	ldr	r1, [pc, #48]	@ (8002d48 <handle_bad_block+0x70>)
 8002d16:	480d      	ldr	r0, [pc, #52]	@ (8002d4c <handle_bad_block+0x74>)
 8002d18:	f003 f8b6 	bl	8005e88 <HAL_NAND_Read_Page_8b>

		nand_address.Page++;
	}
	else // Mark block as bad and attempt to move data
	{
		set_NAND_block_status(nand_address.Page, nand_address.Block, nand_address.Plane, 0); // Mark as bad
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <handle_bad_block+0x70>)
 8002d1e:	8818      	ldrh	r0, [r3, #0]
 8002d20:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <handle_bad_block+0x70>)
 8002d22:	8899      	ldrh	r1, [r3, #4]
 8002d24:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <handle_bad_block+0x70>)
 8002d26:	885a      	ldrh	r2, [r3, #2]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f7ff ff57 	bl	8002bdc <set_NAND_block_status>
		nand_address.Page = 0;
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <handle_bad_block+0x70>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	801a      	strh	r2, [r3, #0]
		get_Good_NAND_block();
 8002d34:	f000 f812 	bl	8002d5c <get_Good_NAND_block>
		handle_bad_block();
 8002d38:	f7ff ffce 	bl	8002cd8 <handle_bad_block>
		HAL_Delay(10);
 8002d3c:	200a      	movs	r0, #10
 8002d3e:	f002 fbc7 	bl	80054d0 <HAL_Delay>
 8002d42:	e000      	b.n	8002d46 <handle_bad_block+0x6e>
		return ;
 8002d44:	bf00      	nop
	}
}
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	200003e8 	.word	0x200003e8
 8002d4c:	20005b78 	.word	0x20005b78
 8002d50:	200055b6 	.word	0x200055b6
 8002d54:	200023f4 	.word	0x200023f4
 8002d58:	200003f4 	.word	0x200003f4

08002d5c <get_Good_NAND_block>:

void get_Good_NAND_block()
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 8002d60:	e010      	b.n	8002d84 <get_Good_NAND_block+0x28>
	{
		nand_address.Block++;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002d64:	889b      	ldrh	r3, [r3, #4]
 8002d66:	3301      	adds	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b18      	ldr	r3, [pc, #96]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002d6c:	809a      	strh	r2, [r3, #4]
		// Handle block wrapping around in case of overflow
		if (nand_address.Block > 4095)
 8002d6e:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002d70:	889b      	ldrh	r3, [r3, #4]
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d76:	d305      	bcc.n	8002d84 <get_Good_NAND_block+0x28>
		{
			nand_address.Block = 0;
 8002d78:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	809a      	strh	r2, [r3, #4]
			nand_cyclic_run = 1;
 8002d7e:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <get_Good_NAND_block+0x74>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
	while( nand_address.Block <= 4094 && !nand_block_status[nand_address.Block+1] )
 8002d84:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002d86:	889b      	ldrh	r3, [r3, #4]
 8002d88:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d806      	bhi.n	8002d9e <get_Good_NAND_block+0x42>
 8002d90:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002d92:	889b      	ldrh	r3, [r3, #4]
 8002d94:	3301      	adds	r3, #1
 8002d96:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd4 <get_Good_NAND_block+0x78>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0e1      	beq.n	8002d62 <get_Good_NAND_block+0x6>
		}
	}
	nand_address.Block++;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002da0:	889b      	ldrh	r3, [r3, #4]
 8002da2:	3301      	adds	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002da8:	809a      	strh	r2, [r3, #4]
	if (nand_address.Block > 4095)
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002dac:	889b      	ldrh	r3, [r3, #4]
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db2:	d305      	bcc.n	8002dc0 <get_Good_NAND_block+0x64>
	{
		nand_address.Block = 0;
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <get_Good_NAND_block+0x70>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	809a      	strh	r2, [r3, #4]
		nand_cyclic_run = 1;
 8002dba:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <get_Good_NAND_block+0x74>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
	}
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200003e8 	.word	0x200003e8
 8002dd0:	200055b5 	.word	0x200055b5
 8002dd4:	200045b4 	.word	0x200045b4

08002dd8 <data_fetch>:


void data_fetch(uint16_t start_block,uint16_t end_block)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	460a      	mov	r2, r1
 8002de2:	80fb      	strh	r3, [r7, #6]
 8002de4:	4613      	mov	r3, r2
 8002de6:	80bb      	strh	r3, [r7, #4]
	NAND_AddressTypeDef nand_read_address;
	for (int block = start_block; block <= end_block; block++) {
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e035      	b.n	8002e5a <data_fetch+0x82>
		for (int page = 0; page <= MAX_PAGE; page++) {
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	e02c      	b.n	8002e4e <data_fetch+0x76>
			nand_read_address.Block = block;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	81bb      	strh	r3, [r7, #12]
			nand_read_address.Page = page;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	813b      	strh	r3, [r7, #8]
			nand_read_address.Plane = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	817b      	strh	r3, [r7, #10]

			if (block == nand_address.Block && page >= nand_address.Page) {
 8002e04:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <data_fetch+0x98>)
 8002e06:	889b      	ldrh	r3, [r3, #4]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d105      	bne.n	8002e1c <data_fetch+0x44>
 8002e10:	4b17      	ldr	r3, [pc, #92]	@ (8002e70 <data_fetch+0x98>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	da23      	bge.n	8002e64 <data_fetch+0x8c>
				return;
			}

			if(nand_stop_read_CMD[1]=='*')
 8002e1c:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <data_fetch+0x9c>)
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e22:	d021      	beq.n	8002e68 <data_fetch+0x90>
				return ;

			HAL_NAND_Read_Page_8b(&hnand1, &nand_read_address, read_data, 1);
 8002e24:	f107 0108 	add.w	r1, r7, #8
 8002e28:	2301      	movs	r3, #1
 8002e2a:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <data_fetch+0xa0>)
 8002e2c:	4813      	ldr	r0, [pc, #76]	@ (8002e7c <data_fetch+0xa4>)
 8002e2e:	f003 f82b 	bl	8005e88 <HAL_NAND_Read_Page_8b>

//			if(read_data[page]!=0xFF)
			{
				HAL_UART_Transmit(&huart5, read_data, sizeof(read_data),HAL_MAX_DELAY);
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e3a:	490f      	ldr	r1, [pc, #60]	@ (8002e78 <data_fetch+0xa0>)
 8002e3c:	4810      	ldr	r0, [pc, #64]	@ (8002e80 <data_fetch+0xa8>)
 8002e3e:	f00a fd97 	bl	800d970 <HAL_UART_Transmit>
				HAL_Delay(1);
 8002e42:	2001      	movs	r0, #1
 8002e44:	f002 fb44 	bl	80054d0 <HAL_Delay>
		for (int page = 0; page <= MAX_PAGE; page++) {
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e52:	ddcf      	ble.n	8002df4 <data_fetch+0x1c>
	for (int block = start_block; block <= end_block; block++) {
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3301      	adds	r3, #1
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	88bb      	ldrh	r3, [r7, #4]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	ddc5      	ble.n	8002dee <data_fetch+0x16>
 8002e62:	e002      	b.n	8002e6a <data_fetch+0x92>
				return;
 8002e64:	bf00      	nop
 8002e66:	e000      	b.n	8002e6a <data_fetch+0x92>
				return ;
 8002e68:	bf00      	nop
//			else
//				continue ;

		}
	}
}
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200003e8 	.word	0x200003e8
 8002e74:	200003f0 	.word	0x200003f0
 8002e78:	200003f4 	.word	0x200003f4
 8002e7c:	20005b78 	.word	0x20005b78
 8002e80:	20005964 	.word	0x20005964

08002e84 <get_NAND_stored_data>:


uint8_t get_NAND_stored_data() {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0

	int start_block, end_block;

	if(nand_stop_read_CMD[1]=='*'){
 8002e8a:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <get_NAND_stored_data+0x98>)
 8002e8c:	785b      	ldrb	r3, [r3, #1]
 8002e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e90:	d106      	bne.n	8002ea0 <get_NAND_stored_data+0x1c>
		memset(nand_stop_read_CMD,0,3);
 8002e92:	2203      	movs	r2, #3
 8002e94:	2100      	movs	r1, #0
 8002e96:	4821      	ldr	r0, [pc, #132]	@ (8002f1c <get_NAND_stored_data+0x98>)
 8002e98:	f00d fec3 	bl	8010c22 <memset>
		return 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e038      	b.n	8002f12 <get_NAND_stored_data+0x8e>
	}

	if (nand_cyclic_run) {
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <get_NAND_stored_data+0x9c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d02d      	beq.n	8002f04 <get_NAND_stored_data+0x80>
		if (nand_address.Block > BLOCK_OFFSET) {
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <get_NAND_stored_data+0xa0>)
 8002eaa:	889b      	ldrh	r3, [r3, #4]
 8002eac:	f240 2276 	movw	r2, #630	@ 0x276
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d910      	bls.n	8002ed6 <get_NAND_stored_data+0x52>
			start_block = nand_address.Block - BLOCK_OFFSET;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <get_NAND_stored_data+0xa0>)
 8002eb6:	889b      	ldrh	r3, [r3, #4]
 8002eb8:	f2a3 2376 	subw	r3, r3, #630	@ 0x276
 8002ebc:	607b      	str	r3, [r7, #4]
			end_block = nand_address.Block;
 8002ebe:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <get_NAND_stored_data+0xa0>)
 8002ec0:	889b      	ldrh	r3, [r3, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
			data_fetch(start_block,end_block);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	b292      	uxth	r2, r2
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff82 	bl	8002dd8 <data_fetch>
 8002ed4:	e01c      	b.n	8002f10 <get_NAND_stored_data+0x8c>

		} else {
			start_block = MAX_BLOCK - (BLOCK_OFFSET - nand_address.Block);
 8002ed6:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <get_NAND_stored_data+0xa0>)
 8002ed8:	889b      	ldrh	r3, [r3, #4]
 8002eda:	f603 5389 	addw	r3, r3, #3465	@ 0xd89
 8002ede:	607b      	str	r3, [r7, #4]
			end_block = MAX_BLOCK;
 8002ee0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002ee4:	603b      	str	r3, [r7, #0]


			data_fetch(start_block,end_block);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	b292      	uxth	r2, r2
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff71 	bl	8002dd8 <data_fetch>
			data_fetch(0,nand_address.Block);
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <get_NAND_stored_data+0xa0>)
 8002ef8:	889b      	ldrh	r3, [r3, #4]
 8002efa:	4619      	mov	r1, r3
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7ff ff6b 	bl	8002dd8 <data_fetch>
 8002f02:	e005      	b.n	8002f10 <get_NAND_stored_data+0x8c>
		}

	}
	else {

		data_fetch(0,nand_address.Block);
 8002f04:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <get_NAND_stored_data+0xa0>)
 8002f06:	889b      	ldrh	r3, [r3, #4]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7ff ff64 	bl	8002dd8 <data_fetch>

	}
	return 0;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200003f0 	.word	0x200003f0
 8002f20:	200055b5 	.word	0x200055b5
 8002f24:	200003e8 	.word	0x200003e8

08002f28 <SRAM_operation>:
/*
 * SRAM_operation
 * Reads time data from SRAM, updates temperature readings, and writes formatted
 * data back to SRAM. Checks for time changes and triggers NAND update if necessary.
 */
uint8_t SRAM_operation() {
 8002f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f2c:	b0d7      	sub	sp, #348	@ 0x15c
 8002f2e:	af34      	add	r7, sp, #208	@ 0xd0

	uint8_t time_data[8] = {0};
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f36:	2300      	movs	r3, #0
 8002f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	// Read current second from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sec_addr, (uint8_t *)&time_data, 7);
 8002f3c:	4ba6      	ldr	r3, [pc, #664]	@ (80031d8 <SRAM_operation+0x2b0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8002f46:	2307      	movs	r3, #7
 8002f48:	48a4      	ldr	r0, [pc, #656]	@ (80031dc <SRAM_operation+0x2b4>)
 8002f4a:	f00a fc23 	bl	800d794 <HAL_SRAM_Read_8b>
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)unused_sramAddr, (uint8_t *)&unused, 1);
 8002f4e:	4ba4      	ldr	r3, [pc, #656]	@ (80031e0 <SRAM_operation+0x2b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	2301      	movs	r3, #1
 8002f56:	4aa3      	ldr	r2, [pc, #652]	@ (80031e4 <SRAM_operation+0x2bc>)
 8002f58:	48a0      	ldr	r0, [pc, #640]	@ (80031dc <SRAM_operation+0x2b4>)
 8002f5a:	f00a fc75 	bl	800d848 <HAL_SRAM_Write_8b>
	// Check if the second has changed
	if (time_data[0] != old_sec) {
 8002f5e:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8002f62:	4ba1      	ldr	r3, [pc, #644]	@ (80031e8 <SRAM_operation+0x2c0>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	f000 81a5 	beq.w	80032b6 <SRAM_operation+0x38e>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 1); // Toggle LED for visual feedback
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f72:	489e      	ldr	r0, [pc, #632]	@ (80031ec <SRAM_operation+0x2c4>)
 8002f74:	f002 fe70 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f002 faa9 	bl	80054d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, LED4_Pin, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f84:	4899      	ldr	r0, [pc, #612]	@ (80031ec <SRAM_operation+0x2c4>)
 8002f86:	f002 fe67 	bl	8005c58 <HAL_GPIO_WritePin>

		// Format temperature and time data into the buffer
		memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 8002f8a:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4897      	ldr	r0, [pc, #604]	@ (80031f0 <SRAM_operation+0x2c8>)
 8002f92:	f00d fe46 	bl	8010c22 <memset>
		SRAMopt.Startbyte=SoF;
 8002f96:	4b97      	ldr	r3, [pc, #604]	@ (80031f4 <SRAM_operation+0x2cc>)
 8002f98:	2240      	movs	r2, #64	@ 0x40
 8002f9a:	701a      	strb	r2, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
				"{\"TS1\": \"%.2f#%X\", \"TS2\": \"%.2f#%X\", \"TS3\": \"%.2f#%X\", \"TS4\": \"%.2f#%X\", \"TS5\": \"%.2f#%X\", "
				"\"TS6\": \"%.2f#%X\", \"TS7\": \"%.2f#%X\", \"TS8\": \"%.2f#%X\", \"TS9\": \"%.2f#%X\", \"TS10\": \"%.2f#%X\", "
				"\"TS11\": \"%.2f#%X\", \"TS12\": \"%.2f#%X\", \"TIME\": \"%x:%x:%x\",\"DATE\": \"%x-%x-20%x\"} \n\r",
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002f9c:	4b96      	ldr	r3, [pc, #600]	@ (80031f8 <SRAM_operation+0x2d0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd fae1 	bl	8000568 <__aeabi_f2d>
 8002fa6:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002faa:	4b94      	ldr	r3, [pc, #592]	@ (80031fc <SRAM_operation+0x2d4>)
 8002fac:	881b      	ldrh	r3, [r3, #0]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002fae:	677b      	str	r3, [r7, #116]	@ 0x74
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002fb0:	4b91      	ldr	r3, [pc, #580]	@ (80031f8 <SRAM_operation+0x2d0>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fad7 	bl	8000568 <__aeabi_f2d>
 8002fba:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002fbe:	4b8f      	ldr	r3, [pc, #572]	@ (80031fc <SRAM_operation+0x2d4>)
 8002fc0:	885b      	ldrh	r3, [r3, #2]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002fc2:	673b      	str	r3, [r7, #112]	@ 0x70
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80031f8 <SRAM_operation+0x2d0>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd facd 	bl	8000568 <__aeabi_f2d>
 8002fce:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002fd2:	4b8a      	ldr	r3, [pc, #552]	@ (80031fc <SRAM_operation+0x2d4>)
 8002fd4:	889b      	ldrh	r3, [r3, #4]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002fd8:	4b87      	ldr	r3, [pc, #540]	@ (80031f8 <SRAM_operation+0x2d0>)
 8002fda:	68db      	ldr	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fac3 	bl	8000568 <__aeabi_f2d>
 8002fe2:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
				temp_sensor[adc_1][channel_1],sensor_hex[adc_1][channel_1] ,temp_sensor[adc_1][channel_2],sensor_hex[adc_1][channel_2], temp_sensor[adc_1][channel_3],sensor_hex[adc_1][channel_3], temp_sensor[adc_1][channel_4],sensor_hex[adc_1][channel_4],
 8002fe6:	4b85      	ldr	r3, [pc, #532]	@ (80031fc <SRAM_operation+0x2d4>)
 8002fe8:	88db      	ldrh	r3, [r3, #6]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002fea:	65bb      	str	r3, [r7, #88]	@ 0x58
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8002fec:	4b82      	ldr	r3, [pc, #520]	@ (80031f8 <SRAM_operation+0x2d0>)
 8002fee:	691b      	ldr	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fd fab9 	bl	8000568 <__aeabi_f2d>
 8002ff6:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8002ffa:	4b80      	ldr	r3, [pc, #512]	@ (80031fc <SRAM_operation+0x2d4>)
 8002ffc:	891b      	ldrh	r3, [r3, #8]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8002ffe:	647b      	str	r3, [r7, #68]	@ 0x44
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8003000:	4b7d      	ldr	r3, [pc, #500]	@ (80031f8 <SRAM_operation+0x2d0>)
 8003002:	695b      	ldr	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd faaf 	bl	8000568 <__aeabi_f2d>
 800300a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 800300e:	4b7b      	ldr	r3, [pc, #492]	@ (80031fc <SRAM_operation+0x2d4>)
 8003010:	895b      	ldrh	r3, [r3, #10]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003012:	643b      	str	r3, [r7, #64]	@ 0x40
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8003014:	4b78      	ldr	r3, [pc, #480]	@ (80031f8 <SRAM_operation+0x2d0>)
 8003016:	699b      	ldr	r3, [r3, #24]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd faa5 	bl	8000568 <__aeabi_f2d>
 800301e:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8003022:	4b76      	ldr	r3, [pc, #472]	@ (80031fc <SRAM_operation+0x2d4>)
 8003024:	899b      	ldrh	r3, [r3, #12]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003026:	62fb      	str	r3, [r7, #44]	@ 0x2c
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8003028:	4b73      	ldr	r3, [pc, #460]	@ (80031f8 <SRAM_operation+0x2d0>)
 800302a:	69db      	ldr	r3, [r3, #28]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fa9b 	bl	8000568 <__aeabi_f2d>
 8003032:	e9c7 0108 	strd	r0, r1, [r7, #32]
				temp_sensor[adc_2][channel_1],sensor_hex[adc_2][channel_1], temp_sensor[adc_2][channel_2],sensor_hex[adc_2][channel_2],temp_sensor[adc_2][channel_3],sensor_hex[adc_2][channel_3], temp_sensor[adc_2][channel_4],sensor_hex[adc_2][channel_4],
 8003036:	4b71      	ldr	r3, [pc, #452]	@ (80031fc <SRAM_operation+0x2d4>)
 8003038:	89db      	ldrh	r3, [r3, #14]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800303a:	62bb      	str	r3, [r7, #40]	@ 0x28
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800303c:	4b6e      	ldr	r3, [pc, #440]	@ (80031f8 <SRAM_operation+0x2d0>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fa91 	bl	8000568 <__aeabi_f2d>
 8003046:	e9c7 0106 	strd	r0, r1, [r7, #24]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800304a:	4b6c      	ldr	r3, [pc, #432]	@ (80031fc <SRAM_operation+0x2d4>)
 800304c:	8a1b      	ldrh	r3, [r3, #16]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800304e:	617b      	str	r3, [r7, #20]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8003050:	4b69      	ldr	r3, [pc, #420]	@ (80031f8 <SRAM_operation+0x2d0>)
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa87 	bl	8000568 <__aeabi_f2d>
 800305a:	4682      	mov	sl, r0
 800305c:	468b      	mov	fp, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 800305e:	4b67      	ldr	r3, [pc, #412]	@ (80031fc <SRAM_operation+0x2d4>)
 8003060:	8a5b      	ldrh	r3, [r3, #18]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003062:	613b      	str	r3, [r7, #16]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8003064:	4b64      	ldr	r3, [pc, #400]	@ (80031f8 <SRAM_operation+0x2d0>)
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa7d 	bl	8000568 <__aeabi_f2d>
 800306e:	4680      	mov	r8, r0
 8003070:	4689      	mov	r9, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8003072:	4b62      	ldr	r3, [pc, #392]	@ (80031fc <SRAM_operation+0x2d4>)
 8003074:	8a9b      	ldrh	r3, [r3, #20]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003076:	60fb      	str	r3, [r7, #12]
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8003078:	4b5f      	ldr	r3, [pc, #380]	@ (80031f8 <SRAM_operation+0x2d0>)
 800307a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fa73 	bl	8000568 <__aeabi_f2d>
 8003082:	4604      	mov	r4, r0
 8003084:	460d      	mov	r5, r1
				temp_sensor[adc_3][channel_1],sensor_hex[adc_3][channel_1], temp_sensor[adc_3][channel_2],sensor_hex[adc_3][channel_2], temp_sensor[adc_3][channel_3],sensor_hex[adc_3][channel_3], temp_sensor[adc_3][channel_4],sensor_hex[adc_3][channel_4],
 8003086:	4b5d      	ldr	r3, [pc, #372]	@ (80031fc <SRAM_operation+0x2d4>)
 8003088:	8adb      	ldrh	r3, [r3, #22]
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800308a:	60bb      	str	r3, [r7, #8]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800308c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003090:	607b      	str	r3, [r7, #4]
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 8003092:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 8003096:	461e      	mov	r6, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 8003098:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 800309c:	4618      	mov	r0, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 800309e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80030a2:	4619      	mov	r1, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 80030a4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80030a8:	461a      	mov	r2, r3
				time_data[Hour], time_data[Minute], time_data[Second], time_data[Date], time_data[Month], time_data[Year]);
 80030aa:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
		SRAMopt.Idxcount=sprintf((char *)SRAMopt.SRAM_buffer,
 80030ae:	9332      	str	r3, [sp, #200]	@ 0xc8
 80030b0:	9231      	str	r2, [sp, #196]	@ 0xc4
 80030b2:	9130      	str	r1, [sp, #192]	@ 0xc0
 80030b4:	902f      	str	r0, [sp, #188]	@ 0xbc
 80030b6:	962e      	str	r6, [sp, #184]	@ 0xb8
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	912d      	str	r1, [sp, #180]	@ 0xb4
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	912c      	str	r1, [sp, #176]	@ 0xb0
 80030c0:	e9cd 452a 	strd	r4, r5, [sp, #168]	@ 0xa8
 80030c4:	68f9      	ldr	r1, [r7, #12]
 80030c6:	9128      	str	r1, [sp, #160]	@ 0xa0
 80030c8:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 80030cc:	6939      	ldr	r1, [r7, #16]
 80030ce:	9124      	str	r1, [sp, #144]	@ 0x90
 80030d0:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
 80030d4:	6979      	ldr	r1, [r7, #20]
 80030d6:	9120      	str	r1, [sp, #128]	@ 0x80
 80030d8:	ed97 7b06 	vldr	d7, [r7, #24]
 80030dc:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 80030e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030e2:	911c      	str	r1, [sp, #112]	@ 0x70
 80030e4:	ed97 7b08 	vldr	d7, [r7, #32]
 80030e8:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 80030ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030ee:	9118      	str	r1, [sp, #96]	@ 0x60
 80030f0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80030f4:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 80030f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030fa:	9114      	str	r1, [sp, #80]	@ 0x50
 80030fc:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8003100:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8003104:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003106:	9110      	str	r1, [sp, #64]	@ 0x40
 8003108:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800310c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003110:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003112:	910c      	str	r1, [sp, #48]	@ 0x30
 8003114:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8003118:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800311c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800311e:	9108      	str	r1, [sp, #32]
 8003120:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003124:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003128:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800312a:	9104      	str	r1, [sp, #16]
 800312c:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8003130:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003134:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800313c:	4930      	ldr	r1, [pc, #192]	@ (8003200 <SRAM_operation+0x2d8>)
 800313e:	482c      	ldr	r0, [pc, #176]	@ (80031f0 <SRAM_operation+0x2c8>)
 8003140:	f00d fd0c 	bl	8010b5c <siprintf>
 8003144:	4603      	mov	r3, r0
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b2a      	ldr	r3, [pc, #168]	@ (80031f4 <SRAM_operation+0x2cc>)
 800314a:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		SRAMopt.SRAM_buffer[(SRAMopt.Idxcount)-3]=EoF;
 800314e:	4b29      	ldr	r3, [pc, #164]	@ (80031f4 <SRAM_operation+0x2cc>)
 8003150:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8003154:	3b03      	subs	r3, #3
 8003156:	4a27      	ldr	r2, [pc, #156]	@ (80031f4 <SRAM_operation+0x2cc>)
 8003158:	4413      	add	r3, r2
 800315a:	2224      	movs	r2, #36	@ 0x24
 800315c:	705a      	strb	r2, [r3, #1]

		// Write the buffer to SRAM
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_location, (uint8_t *)&SRAMopt,((SRAMopt.Idxcount)+1));
 800315e:	4b29      	ldr	r3, [pc, #164]	@ (8003204 <SRAM_operation+0x2dc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	4b23      	ldr	r3, [pc, #140]	@ (80031f4 <SRAM_operation+0x2cc>)
 8003166:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800316a:	3301      	adds	r3, #1
 800316c:	4a21      	ldr	r2, [pc, #132]	@ (80031f4 <SRAM_operation+0x2cc>)
 800316e:	481b      	ldr	r0, [pc, #108]	@ (80031dc <SRAM_operation+0x2b4>)
 8003170:	f00a fb6a 	bl	800d848 <HAL_SRAM_Write_8b>


		// Update SRAM location and size counter
		sram_location += ((SRAMopt.Idxcount)+1);
 8003174:	4b1f      	ldr	r3, [pc, #124]	@ (80031f4 <SRAM_operation+0x2cc>)
 8003176:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800317a:	461a      	mov	r2, r3
 800317c:	4b21      	ldr	r3, [pc, #132]	@ (8003204 <SRAM_operation+0x2dc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4413      	add	r3, r2
 8003182:	3301      	adds	r3, #1
 8003184:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <SRAM_operation+0x2dc>)
 8003186:	6013      	str	r3, [r2, #0]
		size_counter  += ((SRAMopt.Idxcount)+1);
 8003188:	4b1a      	ldr	r3, [pc, #104]	@ (80031f4 <SRAM_operation+0x2cc>)
 800318a:	f8b3 2162 	ldrh.w	r2, [r3, #354]	@ 0x162
 800318e:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <SRAM_operation+0x2e0>)
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	4413      	add	r3, r2
 8003194:	b29b      	uxth	r3, r3
 8003196:	3301      	adds	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <SRAM_operation+0x2e0>)
 800319c:	801a      	strh	r2, [r3, #0]

#if 1
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_SET);
 800319e:	2201      	movs	r2, #1
 80031a0:	2102      	movs	r1, #2
 80031a2:	481a      	ldr	r0, [pc, #104]	@ (800320c <SRAM_operation+0x2e4>)
 80031a4:	f002 fd58 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_SET);
 80031a8:	2201      	movs	r2, #1
 80031aa:	2104      	movs	r1, #4
 80031ac:	4817      	ldr	r0, [pc, #92]	@ (800320c <SRAM_operation+0x2e4>)
 80031ae:	f002 fd53 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_SET);
 80031b2:	2201      	movs	r2, #1
 80031b4:	2101      	movs	r1, #1
 80031b6:	4815      	ldr	r0, [pc, #84]	@ (800320c <SRAM_operation+0x2e4>)
 80031b8:	f002 fd4e 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80031bc:	2002      	movs	r0, #2
 80031be:	f002 f987 	bl	80054d0 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart8, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 80031c2:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <SRAM_operation+0x2cc>)
 80031c4:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 80031c8:	3301      	adds	r3, #1
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	4909      	ldr	r1, [pc, #36]	@ (80031f4 <SRAM_operation+0x2cc>)
 80031d0:	480f      	ldr	r0, [pc, #60]	@ (8003210 <SRAM_operation+0x2e8>)
 80031d2:	f00a fc6b 	bl	800daac <HAL_UART_Transmit_IT>
 80031d6:	e01d      	b.n	8003214 <SRAM_operation+0x2ec>
 80031d8:	20000098 	.word	0x20000098
 80031dc:	20005b20 	.word	0x20005b20
 80031e0:	2000009c 	.word	0x2000009c
 80031e4:	200000a0 	.word	0x200000a0
 80031e8:	200055ba 	.word	0x200055ba
 80031ec:	42021000 	.word	0x42021000
 80031f0:	200055bd 	.word	0x200055bd
 80031f4:	200055bc 	.word	0x200055bc
 80031f8:	20000310 	.word	0x20000310
 80031fc:	20000340 	.word	0x20000340
 8003200:	080131d8 	.word	0x080131d8
 8003204:	20000084 	.word	0x20000084
 8003208:	200055b8 	.word	0x200055b8
 800320c:	42020000 	.word	0x42020000
 8003210:	200059f8 	.word	0x200059f8
		HAL_UART_Transmit_IT(&huart10,(uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 8003214:	4b2f      	ldr	r3, [pc, #188]	@ (80032d4 <SRAM_operation+0x3ac>)
 8003216:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800321a:	3301      	adds	r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	492c      	ldr	r1, [pc, #176]	@ (80032d4 <SRAM_operation+0x3ac>)
 8003222:	482d      	ldr	r0, [pc, #180]	@ (80032d8 <SRAM_operation+0x3b0>)
 8003224:	f00a fc42 	bl	800daac <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart4, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 8003228:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <SRAM_operation+0x3ac>)
 800322a:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 800322e:	3301      	adds	r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	4927      	ldr	r1, [pc, #156]	@ (80032d4 <SRAM_operation+0x3ac>)
 8003236:	4829      	ldr	r0, [pc, #164]	@ (80032dc <SRAM_operation+0x3b4>)
 8003238:	f00a fc38 	bl	800daac <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart5, (uint8_t *)&SRAMopt, (SRAMopt.Idxcount)+1);
 800323c:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <SRAM_operation+0x3ac>)
 800323e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8003242:	3301      	adds	r3, #1
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	4922      	ldr	r1, [pc, #136]	@ (80032d4 <SRAM_operation+0x3ac>)
 800324a:	4825      	ldr	r0, [pc, #148]	@ (80032e0 <SRAM_operation+0x3b8>)
 800324c:	f00a fc2e 	bl	800daac <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8003250:	2064      	movs	r0, #100	@ 0x64
 8003252:	f002 f93d 	bl	80054d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin,  GPIO_PIN_RESET);
 8003256:	2200      	movs	r2, #0
 8003258:	2101      	movs	r1, #1
 800325a:	4822      	ldr	r0, [pc, #136]	@ (80032e4 <SRAM_operation+0x3bc>)
 800325c:	f002 fcfc 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL1_Pin, GPIO_PIN_RESET);
 8003260:	2200      	movs	r2, #0
 8003262:	2102      	movs	r1, #2
 8003264:	481f      	ldr	r0, [pc, #124]	@ (80032e4 <SRAM_operation+0x3bc>)
 8003266:	f002 fcf7 	bl	8005c58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 800326a:	2200      	movs	r2, #0
 800326c:	2104      	movs	r1, #4
 800326e:	481d      	ldr	r0, [pc, #116]	@ (80032e4 <SRAM_operation+0x3bc>)
 8003270:	f002 fcf2 	bl	8005c58 <HAL_GPIO_WritePin>
#endif

//		HAL_Delay(200); // remove after testing

		// Check if the buffer exceeds the NAND page size
		if (size_counter + ((SRAMopt.Idxcount)+1) > NAND_PAGE_SIZE) {
 8003274:	4b1c      	ldr	r3, [pc, #112]	@ (80032e8 <SRAM_operation+0x3c0>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	4b16      	ldr	r3, [pc, #88]	@ (80032d4 <SRAM_operation+0x3ac>)
 800327c:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8003280:	3301      	adds	r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003288:	dd0f      	ble.n	80032aa <SRAM_operation+0x382>
			sram_location = sram_base_location;
 800328a:	4b18      	ldr	r3, [pc, #96]	@ (80032ec <SRAM_operation+0x3c4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a18      	ldr	r2, [pc, #96]	@ (80032f0 <SRAM_operation+0x3c8>)
 8003290:	6013      	str	r3, [r2, #0]
			memset(SRAMopt.SRAM_buffer,0,sizeof(SRAMopt.SRAM_buffer));
 8003292:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003296:	2100      	movs	r1, #0
 8003298:	4816      	ldr	r0, [pc, #88]	@ (80032f4 <SRAM_operation+0x3cc>)
 800329a:	f00d fcc2 	bl	8010c22 <memset>
			SRAMopt.Idxcount=0;
 800329e:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <SRAM_operation+0x3ac>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
			NAND_operation();
 80032a6:	f7ff fbf7 	bl	8002a98 <NAND_operation>
		}

		update_SRAM_Addr();   /*********** update the sram last address at location 0x6000000e ************/
 80032aa:	f000 f8c3 	bl	8003434 <update_SRAM_Addr>

		// Update old_sec to current second
		old_sec = time_data[0];
 80032ae:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80032b2:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <SRAM_operation+0x3d0>)
 80032b4:	701a      	strb	r2, [r3, #0]
	}

	// If time setting flag is set, call time_setter
	if (time_set) {
 80032b6:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <SRAM_operation+0x3d4>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d004      	beq.n	80032c8 <SRAM_operation+0x3a0>
		time_set = 0;
 80032be:	4b0f      	ldr	r3, [pc, #60]	@ (80032fc <SRAM_operation+0x3d4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
		time_setter();
 80032c4:	f000 f91c 	bl	8003500 <time_setter>
	}
	return 0;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	378c      	adds	r7, #140	@ 0x8c
 80032ce:	46bd      	mov	sp, r7
 80032d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d4:	200055bc 	.word	0x200055bc
 80032d8:	20005a8c 	.word	0x20005a8c
 80032dc:	200058d0 	.word	0x200058d0
 80032e0:	20005964 	.word	0x20005964
 80032e4:	42020000 	.word	0x42020000
 80032e8:	200055b8 	.word	0x200055b8
 80032ec:	20000088 	.word	0x20000088
 80032f0:	20000084 	.word	0x20000084
 80032f4:	200055bd 	.word	0x200055bd
 80032f8:	200055ba 	.word	0x200055ba
 80032fc:	20005bde 	.word	0x20005bde

08003300 <get_NAND_data>:

/*
 * get_NAND_data
 * Reads a full page of data from SRAM into sram_data buffer and clears SRAM.
 */
void get_NAND_data(uint8_t *sram_data) {
 8003300:	b580      	push	{r7, lr}
 8003302:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	f843 0c04 	str.w	r0, [r3, #-4]
	uint8_t CLEAN_DATA[8192] = {0};
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	3304      	adds	r3, #4
 800331c:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f00d fc7d 	bl	8010c22 <memset>
	// Read NAND page from SRAM
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sram_base_location, sram_data, NAND_PAGE_SIZE);
 8003328:	4b0e      	ldr	r3, [pc, #56]	@ (8003364 <get_NAND_data+0x64>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	461a      	mov	r2, r3
 8003334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003338:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800333c:	480a      	ldr	r0, [pc, #40]	@ (8003368 <get_NAND_data+0x68>)
 800333e:	f00a fa29 	bl	800d794 <HAL_SRAM_Read_8b>
	// Clear the SRAM location
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sram_base_location, CLEAN_DATA, NAND_PAGE_SIZE);
 8003342:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <get_NAND_data+0x64>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	f107 0208 	add.w	r2, r7, #8
 800334c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003350:	4805      	ldr	r0, [pc, #20]	@ (8003368 <get_NAND_data+0x68>)
 8003352:	f00a fa79 	bl	800d848 <HAL_SRAM_Write_8b>
}
 8003356:	bf00      	nop
 8003358:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000088 	.word	0x20000088
 8003368:	20005b20 	.word	0x20005b20

0800336c <get_NAND_address>:

/*
 * get_NAND_address
 * Reads the current NAND address from SRAM.
 */
uint8_t get_NAND_address(void) {
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
 8003370:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <get_NAND_address+0x48>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3308      	adds	r3, #8
 8003376:	4619      	mov	r1, r3
 8003378:	2306      	movs	r3, #6
 800337a:	4a0f      	ldr	r2, [pc, #60]	@ (80033b8 <get_NAND_address+0x4c>)
 800337c:	480f      	ldr	r0, [pc, #60]	@ (80033bc <get_NAND_address+0x50>)
 800337e:	f00a fa09 	bl	800d794 <HAL_SRAM_Read_8b>
	if(nand_address.Page >= 128)
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <get_NAND_address+0x4c>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	2b7f      	cmp	r3, #127	@ 0x7f
 8003388:	d902      	bls.n	8003390 <get_NAND_address+0x24>
		nand_address.Page=0;
 800338a:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <get_NAND_address+0x4c>)
 800338c:	2200      	movs	r2, #0
 800338e:	801a      	strh	r2, [r3, #0]
	if(nand_address.Block >= 4096)
 8003390:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <get_NAND_address+0x4c>)
 8003392:	889b      	ldrh	r3, [r3, #4]
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003398:	d302      	bcc.n	80033a0 <get_NAND_address+0x34>
		nand_address.Block=0;
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <get_NAND_address+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	809a      	strh	r2, [r3, #4]
	if(nand_address.Plane > 2)
 80033a0:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <get_NAND_address+0x4c>)
 80033a2:	885b      	ldrh	r3, [r3, #2]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d902      	bls.n	80033ae <get_NAND_address+0x42>
		nand_address.Plane=0;
 80033a8:	4b03      	ldr	r3, [pc, #12]	@ (80033b8 <get_NAND_address+0x4c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	805a      	strh	r2, [r3, #2]

	return 0;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2000008c 	.word	0x2000008c
 80033b8:	200003e8 	.word	0x200003e8
 80033bc:	20005b20 	.word	0x20005b20

080033c0 <update_NAND_addr>:

/*
 * update_NAND_addr
 * Writes the current NAND address to SRAM.
 */
void update_NAND_addr() {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_base_addr + 2, (uint8_t *)&nand_address, sizeof(nand_address));
 80033c4:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <update_NAND_addr+0x1c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3308      	adds	r3, #8
 80033ca:	4619      	mov	r1, r3
 80033cc:	2306      	movs	r3, #6
 80033ce:	4a04      	ldr	r2, [pc, #16]	@ (80033e0 <update_NAND_addr+0x20>)
 80033d0:	4804      	ldr	r0, [pc, #16]	@ (80033e4 <update_NAND_addr+0x24>)
 80033d2:	f00a fa39 	bl	800d848 <HAL_SRAM_Write_8b>
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	2000008c 	.word	0x2000008c
 80033e0:	200003e8 	.word	0x200003e8
 80033e4:	20005b20 	.word	0x20005b20

080033e8 <update_NAND_CyclicAddr>:

/*
 * update_NAND_CyclicAddr
 * Writes the current nand_cyclic_run to SRAM.
 */
void update_NAND_CyclicAddr() {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 80033ec:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <update_NAND_CyclicAddr+0x18>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	2301      	movs	r3, #1
 80033f4:	4a03      	ldr	r2, [pc, #12]	@ (8003404 <update_NAND_CyclicAddr+0x1c>)
 80033f6:	4804      	ldr	r0, [pc, #16]	@ (8003408 <update_NAND_CyclicAddr+0x20>)
 80033f8:	f00a fa26 	bl	800d848 <HAL_SRAM_Write_8b>
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000090 	.word	0x20000090
 8003404:	200055b5 	.word	0x200055b5
 8003408:	20005b20 	.word	0x20005b20

0800340c <get_NAND_CyclicAddr>:

/*
 * get_NAND_CyclicAddr
 * Reads the last nand_cyclic_run from SRAM.
 */
uint8_t get_NAND_CyclicAddr(void) {
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)sramAddr_NandCyclic, (uint8_t *)&nand_cyclic_run, sizeof(nand_cyclic_run));
 8003410:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <get_NAND_CyclicAddr+0x1c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4619      	mov	r1, r3
 8003416:	2301      	movs	r3, #1
 8003418:	4a04      	ldr	r2, [pc, #16]	@ (800342c <get_NAND_CyclicAddr+0x20>)
 800341a:	4805      	ldr	r0, [pc, #20]	@ (8003430 <get_NAND_CyclicAddr+0x24>)
 800341c:	f00a f9ba 	bl	800d794 <HAL_SRAM_Read_8b>
	return nand_cyclic_run;
 8003420:	4b02      	ldr	r3, [pc, #8]	@ (800342c <get_NAND_CyclicAddr+0x20>)
 8003422:	781b      	ldrb	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000090 	.word	0x20000090
 800342c:	200055b5 	.word	0x200055b5
 8003430:	20005b20 	.word	0x20005b20

08003434 <update_SRAM_Addr>:

/*
 * update_SRAM_Addr
 * Writes the current size_counter to SRAM.
 */
void update_SRAM_Addr() {
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 8003438:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <update_SRAM_Addr+0x2c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4619      	mov	r1, r3
 800343e:	2302      	movs	r3, #2
 8003440:	4a08      	ldr	r2, [pc, #32]	@ (8003464 <update_SRAM_Addr+0x30>)
 8003442:	4809      	ldr	r0, [pc, #36]	@ (8003468 <update_SRAM_Addr+0x34>)
 8003444:	f00a fa00 	bl	800d848 <HAL_SRAM_Write_8b>
	if (nand_update==1)
 8003448:	4b08      	ldr	r3, [pc, #32]	@ (800346c <update_SRAM_Addr+0x38>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <update_SRAM_Addr+0x28>
	{
		nand_update=0;
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <update_SRAM_Addr+0x38>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
		size_counter=0;
 8003456:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <update_SRAM_Addr+0x30>)
 8003458:	2200      	movs	r2, #0
 800345a:	801a      	strh	r2, [r3, #0]
	}
}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000094 	.word	0x20000094
 8003464:	200055b8 	.word	0x200055b8
 8003468:	20005b20 	.word	0x20005b20
 800346c:	200055b4 	.word	0x200055b4

08003470 <get_SRAM_Addr>:

/*
 * get_SRAM_Addr
 * Reads the last size_counter from SRAM.
 */
uint32_t get_SRAM_Addr(void) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
	//	_sSRAM_LastAddr SRAM_LastAddr;
	uint32_t last_update_location = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
	//	memset(&SRAM_LastAddr,0,sizeof(SRAM_LastAddr));
	HAL_SRAM_Read_8b(&hsram1, (uint32_t *)Last_sramAddr, (uint8_t *)&size_counter, sizeof(size_counter));
 800347a:	4b14      	ldr	r3, [pc, #80]	@ (80034cc <get_SRAM_Addr+0x5c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	2302      	movs	r3, #2
 8003482:	4a13      	ldr	r2, [pc, #76]	@ (80034d0 <get_SRAM_Addr+0x60>)
 8003484:	4813      	ldr	r0, [pc, #76]	@ (80034d4 <get_SRAM_Addr+0x64>)
 8003486:	f00a f985 	bl	800d794 <HAL_SRAM_Read_8b>

	if(size_counter==0){
 800348a:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <get_SRAM_Addr+0x60>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <get_SRAM_Addr+0x28>
		return sram_base_location;
 8003492:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <get_SRAM_Addr+0x68>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	e015      	b.n	80034c4 <get_SRAM_Addr+0x54>
	}
	else if((size_counter+251) > NAND_PAGE_SIZE){
 8003498:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <get_SRAM_Addr+0x60>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	f641 7205 	movw	r2, #7941	@ 0x1f05
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d907      	bls.n	80034b4 <get_SRAM_Addr+0x44>
		size_counter=0;
 80034a4:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <get_SRAM_Addr+0x60>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	801a      	strh	r2, [r3, #0]
		update_SRAM_Addr();
 80034aa:	f7ff ffc3 	bl	8003434 <update_SRAM_Addr>
		return sram_base_location;
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <get_SRAM_Addr+0x68>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	e007      	b.n	80034c4 <get_SRAM_Addr+0x54>
	}
	else{
		last_update_location = (sram_base_location + size_counter);
 80034b4:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <get_SRAM_Addr+0x60>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b07      	ldr	r3, [pc, #28]	@ (80034d8 <get_SRAM_Addr+0x68>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	607b      	str	r3, [r7, #4]
	}
	//	SRAM_LastAddr.sram_count= size_counter;
	//	SRAM_LastAddr.last_update_location = (sram_base_location + size_counter);

	return last_update_location;
 80034c2:	687b      	ldr	r3, [r7, #4]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000094 	.word	0x20000094
 80034d0:	200055b8 	.word	0x200055b8
 80034d4:	20005b20 	.word	0x20005b20
 80034d8:	20000088 	.word	0x20000088

080034dc <Init_NAND_addr>:

uint8_t Init_NAND_addr()
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
	nand_address.Page=0;
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <Init_NAND_addr+0x20>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	801a      	strh	r2, [r3, #0]
	nand_address.Block=0;
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <Init_NAND_addr+0x20>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	809a      	strh	r2, [r3, #4]
	nand_address.Plane=0;
 80034ec:	4b03      	ldr	r3, [pc, #12]	@ (80034fc <Init_NAND_addr+0x20>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	805a      	strh	r2, [r3, #2]
	update_NAND_addr();
 80034f2:	f7ff ff65 	bl	80033c0 <update_NAND_addr>
	return 0;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	200003e8 	.word	0x200003e8

08003500 <time_setter>:

/*
 * time_setter
 * Sets the time in SRAM using the format "SDD-MM-YYYY HH:MM:SS E".
 */
void time_setter() {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
	uint8_t day, month, year, hours, minutes, seconds;
	//	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	//	@ D D - M M - Y Y Y  Y     H  H  :  M  M  :  S  S  $
	// Parse the time string if it follows the expected format
	if (time_str[0] == '@' && time_str[20] == '$' &&
 8003506:	4b7b      	ldr	r3, [pc, #492]	@ (80036f4 <time_setter+0x1f4>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	f040 80ed 	bne.w	80036ea <time_setter+0x1ea>
 8003510:	4b78      	ldr	r3, [pc, #480]	@ (80036f4 <time_setter+0x1f4>)
 8003512:	7d1b      	ldrb	r3, [r3, #20]
 8003514:	2b24      	cmp	r3, #36	@ 0x24
 8003516:	f040 80e8 	bne.w	80036ea <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 800351a:	4b76      	ldr	r3, [pc, #472]	@ (80036f4 <time_setter+0x1f4>)
 800351c:	795b      	ldrb	r3, [r3, #5]
	if (time_str[0] == '@' && time_str[20] == '$' &&
 800351e:	2b2d      	cmp	r3, #45	@ 0x2d
 8003520:	f040 80e3 	bne.w	80036ea <time_setter+0x1ea>
			time_str[5] == '-' && time_str[8] == '-' &&
 8003524:	4b73      	ldr	r3, [pc, #460]	@ (80036f4 <time_setter+0x1f4>)
 8003526:	7a1b      	ldrb	r3, [r3, #8]
 8003528:	2b2d      	cmp	r3, #45	@ 0x2d
 800352a:	f040 80de 	bne.w	80036ea <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 800352e:	4b71      	ldr	r3, [pc, #452]	@ (80036f4 <time_setter+0x1f4>)
 8003530:	7adb      	ldrb	r3, [r3, #11]
			time_str[5] == '-' && time_str[8] == '-' &&
 8003532:	2b20      	cmp	r3, #32
 8003534:	f040 80d9 	bne.w	80036ea <time_setter+0x1ea>
			time_str[11] == ' ' && time_str[14] == ':' && time_str[17] == ':') {
 8003538:	4b6e      	ldr	r3, [pc, #440]	@ (80036f4 <time_setter+0x1f4>)
 800353a:	7b9b      	ldrb	r3, [r3, #14]
 800353c:	2b3a      	cmp	r3, #58	@ 0x3a
 800353e:	f040 80d4 	bne.w	80036ea <time_setter+0x1ea>
 8003542:	4b6c      	ldr	r3, [pc, #432]	@ (80036f4 <time_setter+0x1f4>)
 8003544:	7c5b      	ldrb	r3, [r3, #17]
 8003546:	2b3a      	cmp	r3, #58	@ 0x3a
 8003548:	f040 80cf 	bne.w	80036ea <time_setter+0x1ea>

		// Extract date and time components from time_str
		month = (time_str[6] - '0') * 16 + (time_str[7] - '0');
 800354c:	4b69      	ldr	r3, [pc, #420]	@ (80036f4 <time_setter+0x1f4>)
 800354e:	799b      	ldrb	r3, [r3, #6]
 8003550:	3b30      	subs	r3, #48	@ 0x30
 8003552:	b2db      	uxtb	r3, r3
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b66      	ldr	r3, [pc, #408]	@ (80036f4 <time_setter+0x1f4>)
 800355a:	79db      	ldrb	r3, [r3, #7]
 800355c:	4413      	add	r3, r2
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3b30      	subs	r3, #48	@ 0x30
 8003562:	71fb      	strb	r3, [r7, #7]
		year = (time_str[3] - '0') * 16 + (time_str[4] - '0');
 8003564:	4b63      	ldr	r3, [pc, #396]	@ (80036f4 <time_setter+0x1f4>)
 8003566:	78db      	ldrb	r3, [r3, #3]
 8003568:	3b30      	subs	r3, #48	@ 0x30
 800356a:	b2db      	uxtb	r3, r3
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b60      	ldr	r3, [pc, #384]	@ (80036f4 <time_setter+0x1f4>)
 8003572:	791b      	ldrb	r3, [r3, #4]
 8003574:	4413      	add	r3, r2
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3b30      	subs	r3, #48	@ 0x30
 800357a:	71bb      	strb	r3, [r7, #6]
		day = (time_str[9] - '0') * 16 + (time_str[10] - '0');
 800357c:	4b5d      	ldr	r3, [pc, #372]	@ (80036f4 <time_setter+0x1f4>)
 800357e:	7a5b      	ldrb	r3, [r3, #9]
 8003580:	3b30      	subs	r3, #48	@ 0x30
 8003582:	b2db      	uxtb	r3, r3
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	b2da      	uxtb	r2, r3
 8003588:	4b5a      	ldr	r3, [pc, #360]	@ (80036f4 <time_setter+0x1f4>)
 800358a:	7a9b      	ldrb	r3, [r3, #10]
 800358c:	4413      	add	r3, r2
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3b30      	subs	r3, #48	@ 0x30
 8003592:	717b      	strb	r3, [r7, #5]
		minutes = (time_str[15] - '0') * 16 + (time_str[16] - '0');
 8003594:	4b57      	ldr	r3, [pc, #348]	@ (80036f4 <time_setter+0x1f4>)
 8003596:	7bdb      	ldrb	r3, [r3, #15]
 8003598:	3b30      	subs	r3, #48	@ 0x30
 800359a:	b2db      	uxtb	r3, r3
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	4b54      	ldr	r3, [pc, #336]	@ (80036f4 <time_setter+0x1f4>)
 80035a2:	7c1b      	ldrb	r3, [r3, #16]
 80035a4:	4413      	add	r3, r2
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3b30      	subs	r3, #48	@ 0x30
 80035aa:	713b      	strb	r3, [r7, #4]
		hours = (time_str[12] - '0') * 16 + (time_str[13] - '0');
 80035ac:	4b51      	ldr	r3, [pc, #324]	@ (80036f4 <time_setter+0x1f4>)
 80035ae:	7b1b      	ldrb	r3, [r3, #12]
 80035b0:	3b30      	subs	r3, #48	@ 0x30
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b4e      	ldr	r3, [pc, #312]	@ (80036f4 <time_setter+0x1f4>)
 80035ba:	7b5b      	ldrb	r3, [r3, #13]
 80035bc:	4413      	add	r3, r2
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3b30      	subs	r3, #48	@ 0x30
 80035c2:	70fb      	strb	r3, [r7, #3]
		seconds = (time_str[18] - '0') * 16 + (time_str[19] - '0');
 80035c4:	4b4b      	ldr	r3, [pc, #300]	@ (80036f4 <time_setter+0x1f4>)
 80035c6:	7c9b      	ldrb	r3, [r3, #18]
 80035c8:	3b30      	subs	r3, #48	@ 0x30
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	4b48      	ldr	r3, [pc, #288]	@ (80036f4 <time_setter+0x1f4>)
 80035d2:	7cdb      	ldrb	r3, [r3, #19]
 80035d4:	4413      	add	r3, r2
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3b30      	subs	r3, #48	@ 0x30
 80035da:	70bb      	strb	r3, [r7, #2]

		// Write time components to SRAM
		sramAddr = 0x60000000 | 0x7FFF8;
 80035dc:	4b46      	ldr	r3, [pc, #280]	@ (80036f8 <time_setter+0x1f8>)
 80035de:	4a47      	ldr	r2, [pc, #284]	@ (80036fc <time_setter+0x1fc>)
 80035e0:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x80;
 80035e2:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <time_setter+0x200>)
 80035e4:	2280      	movs	r2, #128	@ 0x80
 80035e6:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 80035e8:	4b43      	ldr	r3, [pc, #268]	@ (80036f8 <time_setter+0x1f8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4b45      	ldr	r3, [pc, #276]	@ (8003704 <time_setter+0x204>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a43      	ldr	r2, [pc, #268]	@ (8003700 <time_setter+0x200>)
 80035f4:	4844      	ldr	r0, [pc, #272]	@ (8003708 <time_setter+0x208>)
 80035f6:	f00a f927 	bl	800d848 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF9;
 80035fa:	4b3f      	ldr	r3, [pc, #252]	@ (80036f8 <time_setter+0x1f8>)
 80035fc:	4a43      	ldr	r2, [pc, #268]	@ (800370c <time_setter+0x20c>)
 80035fe:	601a      	str	r2, [r3, #0]
		pSrcBuffer = seconds;
 8003600:	4a3f      	ldr	r2, [pc, #252]	@ (8003700 <time_setter+0x200>)
 8003602:	78bb      	ldrb	r3, [r7, #2]
 8003604:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8003606:	4b3c      	ldr	r3, [pc, #240]	@ (80036f8 <time_setter+0x1f8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4619      	mov	r1, r3
 800360c:	4b3d      	ldr	r3, [pc, #244]	@ (8003704 <time_setter+0x204>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a3b      	ldr	r2, [pc, #236]	@ (8003700 <time_setter+0x200>)
 8003612:	483d      	ldr	r0, [pc, #244]	@ (8003708 <time_setter+0x208>)
 8003614:	f00a f918 	bl	800d848 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFa;
 8003618:	4b37      	ldr	r3, [pc, #220]	@ (80036f8 <time_setter+0x1f8>)
 800361a:	4a3d      	ldr	r2, [pc, #244]	@ (8003710 <time_setter+0x210>)
 800361c:	601a      	str	r2, [r3, #0]
		pSrcBuffer = minutes;
 800361e:	4a38      	ldr	r2, [pc, #224]	@ (8003700 <time_setter+0x200>)
 8003620:	793b      	ldrb	r3, [r7, #4]
 8003622:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8003624:	4b34      	ldr	r3, [pc, #208]	@ (80036f8 <time_setter+0x1f8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4619      	mov	r1, r3
 800362a:	4b36      	ldr	r3, [pc, #216]	@ (8003704 <time_setter+0x204>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a34      	ldr	r2, [pc, #208]	@ (8003700 <time_setter+0x200>)
 8003630:	4835      	ldr	r0, [pc, #212]	@ (8003708 <time_setter+0x208>)
 8003632:	f00a f909 	bl	800d848 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFb;
 8003636:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <time_setter+0x1f8>)
 8003638:	4a36      	ldr	r2, [pc, #216]	@ (8003714 <time_setter+0x214>)
 800363a:	601a      	str	r2, [r3, #0]
		pSrcBuffer = hours;
 800363c:	4a30      	ldr	r2, [pc, #192]	@ (8003700 <time_setter+0x200>)
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8003642:	4b2d      	ldr	r3, [pc, #180]	@ (80036f8 <time_setter+0x1f8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4619      	mov	r1, r3
 8003648:	4b2e      	ldr	r3, [pc, #184]	@ (8003704 <time_setter+0x204>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2c      	ldr	r2, [pc, #176]	@ (8003700 <time_setter+0x200>)
 800364e:	482e      	ldr	r0, [pc, #184]	@ (8003708 <time_setter+0x208>)
 8003650:	f00a f8fa 	bl	800d848 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFc;
 8003654:	4b28      	ldr	r3, [pc, #160]	@ (80036f8 <time_setter+0x1f8>)
 8003656:	4a30      	ldr	r2, [pc, #192]	@ (8003718 <time_setter+0x218>)
 8003658:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x02;
 800365a:	4b29      	ldr	r3, [pc, #164]	@ (8003700 <time_setter+0x200>)
 800365c:	2202      	movs	r2, #2
 800365e:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 8003660:	4b25      	ldr	r3, [pc, #148]	@ (80036f8 <time_setter+0x1f8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	4b27      	ldr	r3, [pc, #156]	@ (8003704 <time_setter+0x204>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a25      	ldr	r2, [pc, #148]	@ (8003700 <time_setter+0x200>)
 800366c:	4826      	ldr	r0, [pc, #152]	@ (8003708 <time_setter+0x208>)
 800366e:	f00a f8eb 	bl	800d848 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFd;
 8003672:	4b21      	ldr	r3, [pc, #132]	@ (80036f8 <time_setter+0x1f8>)
 8003674:	4a29      	ldr	r2, [pc, #164]	@ (800371c <time_setter+0x21c>)
 8003676:	601a      	str	r2, [r3, #0]
		pSrcBuffer = day;
 8003678:	4a21      	ldr	r2, [pc, #132]	@ (8003700 <time_setter+0x200>)
 800367a:	797b      	ldrb	r3, [r7, #5]
 800367c:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800367e:	4b1e      	ldr	r3, [pc, #120]	@ (80036f8 <time_setter+0x1f8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	4b1f      	ldr	r3, [pc, #124]	@ (8003704 <time_setter+0x204>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1d      	ldr	r2, [pc, #116]	@ (8003700 <time_setter+0x200>)
 800368a:	481f      	ldr	r0, [pc, #124]	@ (8003708 <time_setter+0x208>)
 800368c:	f00a f8dc 	bl	800d848 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFe;
 8003690:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <time_setter+0x1f8>)
 8003692:	4a23      	ldr	r2, [pc, #140]	@ (8003720 <time_setter+0x220>)
 8003694:	601a      	str	r2, [r3, #0]
		pSrcBuffer = month;
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <time_setter+0x200>)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 800369c:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <time_setter+0x1f8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	4b18      	ldr	r3, [pc, #96]	@ (8003704 <time_setter+0x204>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a16      	ldr	r2, [pc, #88]	@ (8003700 <time_setter+0x200>)
 80036a8:	4817      	ldr	r0, [pc, #92]	@ (8003708 <time_setter+0x208>)
 80036aa:	f00a f8cd 	bl	800d848 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFFf;
 80036ae:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <time_setter+0x1f8>)
 80036b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003724 <time_setter+0x224>)
 80036b2:	601a      	str	r2, [r3, #0]
		pSrcBuffer = year;
 80036b4:	4a12      	ldr	r2, [pc, #72]	@ (8003700 <time_setter+0x200>)
 80036b6:	79bb      	ldrb	r3, [r7, #6]
 80036b8:	7013      	strb	r3, [r2, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 80036ba:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <time_setter+0x1f8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4619      	mov	r1, r3
 80036c0:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <time_setter+0x204>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003700 <time_setter+0x200>)
 80036c6:	4810      	ldr	r0, [pc, #64]	@ (8003708 <time_setter+0x208>)
 80036c8:	f00a f8be 	bl	800d848 <HAL_SRAM_Write_8b>

		sramAddr = 0x60000000 | 0x7FFF8;
 80036cc:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <time_setter+0x1f8>)
 80036ce:	4a0b      	ldr	r2, [pc, #44]	@ (80036fc <time_setter+0x1fc>)
 80036d0:	601a      	str	r2, [r3, #0]
		pSrcBuffer = 0x00;
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <time_setter+0x200>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
		HAL_SRAM_Write_8b(&hsram1, (uint32_t *)sramAddr, &pSrcBuffer, BufferSize);
 80036d8:	4b07      	ldr	r3, [pc, #28]	@ (80036f8 <time_setter+0x1f8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4619      	mov	r1, r3
 80036de:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <time_setter+0x204>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a07      	ldr	r2, [pc, #28]	@ (8003700 <time_setter+0x200>)
 80036e4:	4808      	ldr	r0, [pc, #32]	@ (8003708 <time_setter+0x208>)
 80036e6:	f00a f8af 	bl	800d848 <HAL_SRAM_Write_8b>
	}
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20005bbc 	.word	0x20005bbc
 80036f8:	20005bb8 	.word	0x20005bb8
 80036fc:	6007fff8 	.word	0x6007fff8
 8003700:	200000a1 	.word	0x200000a1
 8003704:	200000a4 	.word	0x200000a4
 8003708:	20005b20 	.word	0x20005b20
 800370c:	6007fff9 	.word	0x6007fff9
 8003710:	6007fffa 	.word	0x6007fffa
 8003714:	6007fffb 	.word	0x6007fffb
 8003718:	6007fffc 	.word	0x6007fffc
 800371c:	6007fffd 	.word	0x6007fffd
 8003720:	6007fffe 	.word	0x6007fffe
 8003724:	6007ffff 	.word	0x6007ffff

08003728 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800372e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003730:	f001 fe10 	bl	8005354 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003734:	f000 f872 	bl	800381c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003738:	f000 fbf4 	bl	8003f24 <MX_GPIO_Init>
	MX_FMC_Init();
 800373c:	f000 fb26 	bl	8003d8c <MX_FMC_Init>
	MX_SPI2_Init();
 8003740:	f000 f8f0 	bl	8003924 <MX_SPI2_Init>
	MX_SPI3_Init();
 8003744:	f000 f944 	bl	80039d0 <MX_SPI3_Init>
	MX_SPI5_Init();
 8003748:	f000 f998 	bl	8003a7c <MX_SPI5_Init>
	MX_UART4_Init();
 800374c:	f000 f9ec 	bl	8003b28 <MX_UART4_Init>
	MX_UART5_Init();
 8003750:	f000 fa36 	bl	8003bc0 <MX_UART5_Init>
	MX_UART8_Init();
 8003754:	f000 fa80 	bl	8003c58 <MX_UART8_Init>
	MX_USART10_UART_Init();
 8003758:	f000 facc 	bl	8003cf4 <MX_USART10_UART_Init>
	MX_ICACHE_Init();
 800375c:	f000 f8ce 	bl	80038fc <MX_ICACHE_Init>
	/* USER CODE BEGIN 2 */

	UART_InitAllHandlers();
 8003760:	f000 fd90 	bl	8004284 <UART_InitAllHandlers>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	sramAddr = 0x60000000 | 0x7FFF8;
 8003764:	4b23      	ldr	r3, [pc, #140]	@ (80037f4 <main+0xcc>)
 8003766:	4a24      	ldr	r2, [pc, #144]	@ (80037f8 <main+0xd0>)
 8003768:	601a      	str	r2, [r3, #0]
	pSrcBuffer = 0x00;
 800376a:	4b24      	ldr	r3, [pc, #144]	@ (80037fc <main+0xd4>)
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
	HAL_SRAM_Write_8b(&hsram1,(uint32_t *)sramAddr,&pSrcBuffer,BufferSize);
 8003770:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <main+0xcc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	2301      	movs	r3, #1
 8003778:	4a20      	ldr	r2, [pc, #128]	@ (80037fc <main+0xd4>)
 800377a:	4821      	ldr	r0, [pc, #132]	@ (8003800 <main+0xd8>)
 800377c:	f00a f864 	bl	800d848 <HAL_SRAM_Write_8b>
	HAL_NAND_Reset(&hnand1);
 8003780:	4820      	ldr	r0, [pc, #128]	@ (8003804 <main+0xdc>)
 8003782:	f002 fb47 	bl	8005e14 <HAL_NAND_Reset>
	get_NAND_block_status();
 8003786:	f7ff f9fb 	bl	8002b80 <get_NAND_block_status>
	get_NAND_address();
 800378a:	f7ff fdef 	bl	800336c <get_NAND_address>
	get_NAND_CyclicAddr();
 800378e:	f7ff fe3d 	bl	800340c <get_NAND_CyclicAddr>
	sram_location = get_SRAM_Addr();
 8003792:	f7ff fe6d 	bl	8003470 <get_SRAM_Addr>
 8003796:	4603      	mov	r3, r0
 8003798:	4a1b      	ldr	r2, [pc, #108]	@ (8003808 <main+0xe0>)
 800379a:	6013      	str	r3, [r2, #0]

	uint8_t SRAM_clean[8192] = {0};
 800379c:	463b      	mov	r3, r7
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	3304      	adds	r3, #4
 80037a4:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f00d fa39 	bl	8010c22 <memset>
	HAL_GPIO_WritePin(GPIOA, RS485_CTRL2_Pin, GPIO_PIN_RESET);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2104      	movs	r1, #4
 80037b4:	4815      	ldr	r0, [pc, #84]	@ (800380c <main+0xe4>)
 80037b6:	f002 fa4f 	bl	8005c58 <HAL_GPIO_WritePin>
		}
#endif

#if 1

		ADC_operation();
 80037ba:	f7fd fbe1 	bl	8000f80 <ADC_operation>

//#else
		while(( HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin) && HAL_GPIO_ReadPin (GPIOD,GPI_2_Pin))) // change condition when GPIOs input add
 80037be:	e00a      	b.n	80037d6 <main+0xae>
		{
			ATP_operation();
 80037c0:	f7fe fab6 	bl	8001d30 <ATP_operation>

			if(time_set)
 80037c4:	4b12      	ldr	r3, [pc, #72]	@ (8003810 <main+0xe8>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <main+0xae>
			{
				time_set = 0 ;
 80037cc:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <main+0xe8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
				time_setter();
 80037d2:	f7ff fe95 	bl	8003500 <time_setter>
		while(( HAL_GPIO_ReadPin(GPIOE,GPI_3_Pin) && HAL_GPIO_ReadPin (GPIOD,GPI_2_Pin))) // change condition when GPIOs input add
 80037d6:	2110      	movs	r1, #16
 80037d8:	480e      	ldr	r0, [pc, #56]	@ (8003814 <main+0xec>)
 80037da:	f002 fa25 	bl	8005c28 <HAL_GPIO_ReadPin>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ea      	beq.n	80037ba <main+0x92>
 80037e4:	2108      	movs	r1, #8
 80037e6:	480c      	ldr	r0, [pc, #48]	@ (8003818 <main+0xf0>)
 80037e8:	f002 fa1e 	bl	8005c28 <HAL_GPIO_ReadPin>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e6      	bne.n	80037c0 <main+0x98>
		ADC_operation();
 80037f2:	e7e2      	b.n	80037ba <main+0x92>
 80037f4:	20005bb8 	.word	0x20005bb8
 80037f8:	6007fff8 	.word	0x6007fff8
 80037fc:	200000a1 	.word	0x200000a1
 8003800:	20005b20 	.word	0x20005b20
 8003804:	20005b78 	.word	0x20005b78
 8003808:	20000084 	.word	0x20000084
 800380c:	42020000 	.word	0x42020000
 8003810:	20005bde 	.word	0x20005bde
 8003814:	42021000 	.word	0x42021000
 8003818:	42020c00 	.word	0x42020c00

0800381c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b09c      	sub	sp, #112	@ 0x70
 8003820:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003822:	f107 0320 	add.w	r3, r7, #32
 8003826:	2250      	movs	r2, #80	@ 0x50
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f00d f9f9 	bl	8010c22 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003830:	f107 0308 	add.w	r3, r7, #8
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
 8003840:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003842:	4b2c      	ldr	r3, [pc, #176]	@ (80038f4 <SystemClock_Config+0xd8>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	4a2b      	ldr	r2, [pc, #172]	@ (80038f4 <SystemClock_Config+0xd8>)
 8003848:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800384c:	6113      	str	r3, [r2, #16]
 800384e:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <SystemClock_Config+0xd8>)
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800385a:	bf00      	nop
 800385c:	4b25      	ldr	r3, [pc, #148]	@ (80038f4 <SystemClock_Config+0xd8>)
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b08      	cmp	r3, #8
 8003866:	d1f9      	bne.n	800385c <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003868:	2301      	movs	r3, #1
 800386a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800386c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003872:	2302      	movs	r3, #2
 8003874:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8003876:	2303      	movs	r3, #3
 8003878:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800387a:	2304      	movs	r3, #4
 800387c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 80;
 800387e:	2350      	movs	r3, #80	@ 0x50
 8003880:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8003882:	2302      	movs	r3, #2
 8003884:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003886:	2302      	movs	r3, #2
 8003888:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800388a:	2302      	movs	r3, #2
 800388c:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800388e:	2308      	movs	r3, #8
 8003890:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8003892:	2300      	movs	r3, #0
 8003894:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800389a:	f107 0320 	add.w	r3, r7, #32
 800389e:	4618      	mov	r0, r3
 80038a0:	f003 f942 	bl	8006b28 <HAL_RCC_OscConfig>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <SystemClock_Config+0x92>
	{
		Error_Handler();
 80038aa:	f000 ff5e 	bl	800476a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ae:	231f      	movs	r3, #31
 80038b0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b2:	2303      	movs	r3, #3
 80038b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038c6:	f107 0308 	add.w	r3, r7, #8
 80038ca:	2105      	movs	r1, #5
 80038cc:	4618      	mov	r0, r3
 80038ce:	f003 fd63 	bl	8007398 <HAL_RCC_ClockConfig>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80038d8:	f000 ff47 	bl	800476a <Error_Handler>
	}

	/** Configure the programming delay
	 */
	__HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80038dc:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <SystemClock_Config+0xdc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80038e4:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <SystemClock_Config+0xdc>)
 80038e6:	f043 0320 	orr.w	r3, r3, #32
 80038ea:	6013      	str	r3, [r2, #0]
}
 80038ec:	bf00      	nop
 80038ee:	3770      	adds	r7, #112	@ 0x70
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	44020800 	.word	0x44020800
 80038f8:	40022000 	.word	0x40022000

080038fc <MX_ICACHE_Init>:
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8003900:	2000      	movs	r0, #0
 8003902:	f002 fa0d 	bl	8005d20 <HAL_ICACHE_ConfigAssociativityMode>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <MX_ICACHE_Init+0x14>
	{
		Error_Handler();
 800390c:	f000 ff2d 	bl	800476a <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK)
 8003910:	f002 fa26 	bl	8005d60 <HAL_ICACHE_Enable>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_ICACHE_Init+0x22>
	{
		Error_Handler();
 800391a:	f000 ff26 	bl	800476a <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 800392a:	4a28      	ldr	r2, [pc, #160]	@ (80039cc <MX_SPI2_Init+0xa8>)
 800392c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800392e:	4b26      	ldr	r3, [pc, #152]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003930:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003934:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003936:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800393c:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 800393e:	2207      	movs	r2, #7
 8003940:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003942:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003948:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 800394a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800394e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003950:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003952:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003956:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003958:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 800395a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800395e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003960:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003962:	2200      	movs	r2, #0
 8003964:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003966:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003968:	2200      	movs	r2, #0
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396c:	4b16      	ldr	r3, [pc, #88]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 0x7;
 8003972:	4b15      	ldr	r3, [pc, #84]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003974:	2207      	movs	r2, #7
 8003976:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003978:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 800397a:	2200      	movs	r2, #0
 800397c:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800397e:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003980:	2200      	movs	r2, #0
 8003982:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003984:	4b10      	ldr	r3, [pc, #64]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003986:	2200      	movs	r2, #0
 8003988:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800398a:	4b0f      	ldr	r3, [pc, #60]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 800398c:	2200      	movs	r2, #0
 800398e:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003990:	4b0d      	ldr	r3, [pc, #52]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003992:	2200      	movs	r2, #0
 8003994:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003996:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 8003998:	2200      	movs	r2, #0
 800399a:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800399c:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 800399e:	2200      	movs	r2, #0
 80039a0:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80039a2:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80039a8:	4b07      	ldr	r3, [pc, #28]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80039ae:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039b4:	4804      	ldr	r0, [pc, #16]	@ (80039c8 <MX_SPI2_Init+0xa4>)
 80039b6:	f009 f883 	bl	800cac0 <HAL_SPI_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_SPI2_Init+0xa0>
	{
		Error_Handler();
 80039c0:	f000 fed3 	bl	800476a <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20005720 	.word	0x20005720
 80039cc:	40003800 	.word	0x40003800

080039d0 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80039d4:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 80039d6:	4a28      	ldr	r2, [pc, #160]	@ (8003a78 <MX_SPI3_Init+0xa8>)
 80039d8:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80039da:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 80039dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80039e0:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80039e2:	4b24      	ldr	r3, [pc, #144]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80039e8:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 80039ea:	2207      	movs	r2, #7
 80039ec:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ee:	4b21      	ldr	r3, [pc, #132]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80039f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 80039f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039fa:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80039fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 80039fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a02:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003a04:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003a0a:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a0c:	4b19      	ldr	r3, [pc, #100]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a12:	4b18      	ldr	r3, [pc, #96]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 0x7;
 8003a1e:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a20:	2207      	movs	r2, #7
 8003a22:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003a24:	4b13      	ldr	r3, [pc, #76]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003a2a:	4b12      	ldr	r3, [pc, #72]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003a30:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003a36:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003a42:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003a48:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003a4e:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003a54:	4b07      	ldr	r3, [pc, #28]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a60:	4804      	ldr	r0, [pc, #16]	@ (8003a74 <MX_SPI3_Init+0xa4>)
 8003a62:	f009 f82d 	bl	800cac0 <HAL_SPI_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_SPI3_Init+0xa0>
	{
		Error_Handler();
 8003a6c:	f000 fe7d 	bl	800476a <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200057b0 	.word	0x200057b0
 8003a78:	40003c00 	.word	0x40003c00

08003a7c <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8003a80:	4b27      	ldr	r3, [pc, #156]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003a82:	4a28      	ldr	r2, [pc, #160]	@ (8003b24 <MX_SPI5_Init+0xa8>)
 8003a84:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8003a86:	4b26      	ldr	r3, [pc, #152]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003a88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003a8c:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003a8e:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a94:	4b22      	ldr	r3, [pc, #136]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003a96:	2207      	movs	r2, #7
 8003a98:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a9a:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003aa2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aa6:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003aaa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003aae:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003ab2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003ab6:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ab8:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003abe:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac4:	4b16      	ldr	r3, [pc, #88]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 0x7;
 8003aca:	4b15      	ldr	r3, [pc, #84]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003acc:	2207      	movs	r2, #7
 8003ace:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003ad0:	4b13      	ldr	r3, [pc, #76]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003ad6:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003adc:	4b10      	ldr	r3, [pc, #64]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003aee:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003af4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003afa:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi5.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003b00:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi5.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003b0c:	4804      	ldr	r0, [pc, #16]	@ (8003b20 <MX_SPI5_Init+0xa4>)
 8003b0e:	f008 ffd7 	bl	800cac0 <HAL_SPI_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_SPI5_Init+0xa0>
	{
		Error_Handler();
 8003b18:	f000 fe27 	bl	800476a <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8003b1c:	bf00      	nop
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20005840 	.word	0x20005840
 8003b24:	44002000 	.word	0x44002000

08003b28 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8003b2c:	4b22      	ldr	r3, [pc, #136]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b2e:	4a23      	ldr	r2, [pc, #140]	@ (8003bbc <MX_UART4_Init+0x94>)
 8003b30:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8003b32:	4b21      	ldr	r3, [pc, #132]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b38:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8003b40:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8003b46:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b4e:	220c      	movs	r2, #12
 8003b50:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b52:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b58:	4b17      	ldr	r3, [pc, #92]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b5e:	4b16      	ldr	r3, [pc, #88]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b64:	4b14      	ldr	r3, [pc, #80]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b6a:	4b13      	ldr	r3, [pc, #76]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8003b70:	4811      	ldr	r0, [pc, #68]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b72:	f009 fead 	bl	800d8d0 <HAL_UART_Init>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 8003b7c:	f000 fdf5 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b80:	2100      	movs	r1, #0
 8003b82:	480d      	ldr	r0, [pc, #52]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b84:	f00c f849 	bl	800fc1a <HAL_UARTEx_SetTxFifoThreshold>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_UART4_Init+0x6a>
	{
		Error_Handler();
 8003b8e:	f000 fdec 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b92:	2100      	movs	r1, #0
 8003b94:	4808      	ldr	r0, [pc, #32]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003b96:	f00c f87e 	bl	800fc96 <HAL_UARTEx_SetRxFifoThreshold>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <MX_UART4_Init+0x7c>
	{
		Error_Handler();
 8003ba0:	f000 fde3 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003ba4:	4804      	ldr	r0, [pc, #16]	@ (8003bb8 <MX_UART4_Init+0x90>)
 8003ba6:	f00b ffff 	bl	800fba8 <HAL_UARTEx_DisableFifoMode>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8003bb0:	f000 fddb 	bl	800476a <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200058d0 	.word	0x200058d0
 8003bbc:	40004c00 	.word	0x40004c00

08003bc0 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8003bc4:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003bc6:	4a23      	ldr	r2, [pc, #140]	@ (8003c54 <MX_UART5_Init+0x94>)
 8003bc8:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8003bca:	4b21      	ldr	r3, [pc, #132]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003bcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003bd0:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8003bde:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8003be4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003be6:	220c      	movs	r2, #12
 8003be8:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bea:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bf0:	4b17      	ldr	r3, [pc, #92]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bf6:	4b16      	ldr	r3, [pc, #88]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bfc:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	625a      	str	r2, [r3, #36]	@ 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c02:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8003c08:	4811      	ldr	r0, [pc, #68]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003c0a:	f009 fe61 	bl	800d8d0 <HAL_UART_Init>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 8003c14:	f000 fda9 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c18:	2100      	movs	r1, #0
 8003c1a:	480d      	ldr	r0, [pc, #52]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003c1c:	f00b fffd 	bl	800fc1a <HAL_UARTEx_SetTxFifoThreshold>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_UART5_Init+0x6a>
	{
		Error_Handler();
 8003c26:	f000 fda0 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4808      	ldr	r0, [pc, #32]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003c2e:	f00c f832 	bl	800fc96 <HAL_UARTEx_SetRxFifoThreshold>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_UART5_Init+0x7c>
	{
		Error_Handler();
 8003c38:	f000 fd97 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003c3c:	4804      	ldr	r0, [pc, #16]	@ (8003c50 <MX_UART5_Init+0x90>)
 8003c3e:	f00b ffb3 	bl	800fba8 <HAL_UARTEx_DisableFifoMode>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 8003c48:	f000 fd8f 	bl	800476a <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20005964 	.word	0x20005964
 8003c54:	40005000 	.word	0x40005000

08003c58 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8003c5c:	4b23      	ldr	r3, [pc, #140]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c5e:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <MX_UART8_Init+0x98>)
 8003c60:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8003c62:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c68:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8003c70:	4b1e      	ldr	r3, [pc, #120]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8003c76:	4b1d      	ldr	r3, [pc, #116]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c7e:	220c      	movs	r2, #12
 8003c80:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c82:	4b1a      	ldr	r3, [pc, #104]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c88:	4b18      	ldr	r3, [pc, #96]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c8e:	4b17      	ldr	r3, [pc, #92]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c94:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c9a:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <MX_UART8_Init+0x94>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8003ca0:	4812      	ldr	r0, [pc, #72]	@ (8003cec <MX_UART8_Init+0x94>)
 8003ca2:	f009 fe15 	bl	800d8d0 <HAL_UART_Init>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 8003cac:	f000 fd5d 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003cb0:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 8003cb4:	480d      	ldr	r0, [pc, #52]	@ (8003cec <MX_UART8_Init+0x94>)
 8003cb6:	f00b ffb0 	bl	800fc1a <HAL_UARTEx_SetTxFifoThreshold>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_UART8_Init+0x6c>
	{
		Error_Handler();
 8003cc0:	f000 fd53 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4809      	ldr	r0, [pc, #36]	@ (8003cec <MX_UART8_Init+0x94>)
 8003cc8:	f00b ffe5 	bl	800fc96 <HAL_UARTEx_SetRxFifoThreshold>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_UART8_Init+0x7e>
	{
		Error_Handler();
 8003cd2:	f000 fd4a 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8003cd6:	4805      	ldr	r0, [pc, #20]	@ (8003cec <MX_UART8_Init+0x94>)
 8003cd8:	f00b ff66 	bl	800fba8 <HAL_UARTEx_DisableFifoMode>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_UART8_Init+0x8e>
	{
		Error_Handler();
 8003ce2:	f000 fd42 	bl	800476a <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	200059f8 	.word	0x200059f8
 8003cf0:	40007c00 	.word	0x40007c00

08003cf4 <MX_USART10_UART_Init>:
 * @brief USART10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART10_UART_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	/* USER CODE END USART10_Init 0 */

	/* USER CODE BEGIN USART10_Init 1 */

	/* USER CODE END USART10_Init 1 */
	huart10.Instance = USART10;
 8003cf8:	4b22      	ldr	r3, [pc, #136]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003cfa:	4a23      	ldr	r2, [pc, #140]	@ (8003d88 <MX_USART10_UART_Init+0x94>)
 8003cfc:	601a      	str	r2, [r3, #0]
	huart10.Init.BaudRate = 115200;
 8003cfe:	4b21      	ldr	r3, [pc, #132]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d04:	605a      	str	r2, [r3, #4]
	huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8003d06:	4b1f      	ldr	r3, [pc, #124]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
	huart10.Init.StopBits = UART_STOPBITS_1;
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60da      	str	r2, [r3, #12]
	huart10.Init.Parity = UART_PARITY_NONE;
 8003d12:	4b1c      	ldr	r3, [pc, #112]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
	huart10.Init.Mode = UART_MODE_TX_RX;
 8003d18:	4b1a      	ldr	r3, [pc, #104]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d1a:	220c      	movs	r2, #12
 8003d1c:	615a      	str	r2, [r3, #20]
	huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d1e:	4b19      	ldr	r3, [pc, #100]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	619a      	str	r2, [r3, #24]
	huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d24:	4b17      	ldr	r3, [pc, #92]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	61da      	str	r2, [r3, #28]
	huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d2a:	4b16      	ldr	r3, [pc, #88]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	621a      	str	r2, [r3, #32]
	huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d30:	4b14      	ldr	r3, [pc, #80]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	625a      	str	r2, [r3, #36]	@ 0x24
	huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d36:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart10) != HAL_OK)
 8003d3c:	4811      	ldr	r0, [pc, #68]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d3e:	f009 fdc7 	bl	800d8d0 <HAL_UART_Init>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_USART10_UART_Init+0x58>
	{
		Error_Handler();
 8003d48:	f000 fd0f 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	480d      	ldr	r0, [pc, #52]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d50:	f00b ff63 	bl	800fc1a <HAL_UARTEx_SetTxFifoThreshold>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_USART10_UART_Init+0x6a>
	{
		Error_Handler();
 8003d5a:	f000 fd06 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4808      	ldr	r0, [pc, #32]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d62:	f00b ff98 	bl	800fc96 <HAL_UARTEx_SetRxFifoThreshold>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_USART10_UART_Init+0x7c>
	{
		Error_Handler();
 8003d6c:	f000 fcfd 	bl	800476a <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8003d70:	4804      	ldr	r0, [pc, #16]	@ (8003d84 <MX_USART10_UART_Init+0x90>)
 8003d72:	f00b ff19 	bl	800fba8 <HAL_UARTEx_DisableFifoMode>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_USART10_UART_Init+0x8c>
	{
		Error_Handler();
 8003d7c:	f000 fcf5 	bl	800476a <Error_Handler>
	}
	/* USER CODE BEGIN USART10_Init 2 */

	/* USER CODE END USART10_Init 2 */

}
 8003d80:	bf00      	nop
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20005a8c 	.word	0x20005a8c
 8003d88:	40006800 	.word	0x40006800

08003d8c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b090      	sub	sp, #64	@ 0x40
 8003d90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 8003d92:	f107 0320 	add.w	r3, r7, #32
 8003d96:	2220      	movs	r2, #32
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f00c ff41 	bl	8010c22 <memset>
	FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8003da0:	f107 0310 	add.w	r3, r7, #16
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	60da      	str	r2, [r3, #12]
	FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8003dae:	463b      	mov	r3, r7
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8003dba:	4b55      	ldr	r3, [pc, #340]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003dbc:	4a55      	ldr	r2, [pc, #340]	@ (8003f14 <MX_FMC_Init+0x188>)
 8003dbe:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003dc0:	4b53      	ldr	r3, [pc, #332]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003dc2:	4a55      	ldr	r2, [pc, #340]	@ (8003f18 <MX_FMC_Init+0x18c>)
 8003dc4:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8003dc6:	4b52      	ldr	r3, [pc, #328]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003dcc:	4b50      	ldr	r3, [pc, #320]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8003dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003dde:	4b4c      	ldr	r3, [pc, #304]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8003de4:	4b4a      	ldr	r3, [pc, #296]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003dea:	4b49      	ldr	r3, [pc, #292]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8003df0:	4b47      	ldr	r3, [pc, #284]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003df2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003df6:	625a      	str	r2, [r3, #36]	@ 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8003df8:	4b45      	ldr	r3, [pc, #276]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	629a      	str	r2, [r3, #40]	@ 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003dfe:	4b44      	ldr	r3, [pc, #272]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003e04:	4b42      	ldr	r3, [pc, #264]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003e0a:	4b41      	ldr	r3, [pc, #260]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	635a      	str	r2, [r3, #52]	@ 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003e10:	4b3f      	ldr	r3, [pc, #252]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	639a      	str	r2, [r3, #56]	@ 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8003e16:	4b3e      	ldr	r3, [pc, #248]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsram1.Init.NBLSetupTime = 0;
 8003e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003e22:	4b3b      	ldr	r3, [pc, #236]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 8003e28:	4b39      	ldr	r3, [pc, #228]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	/* Timing */
	Timing.AddressSetupTime = 15;
 8003e30:	230f      	movs	r3, #15
 8003e32:	623b      	str	r3, [r7, #32]
	Timing.AddressHoldTime = 15;
 8003e34:	230f      	movs	r3, #15
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
	Timing.DataSetupTime = 255;
 8003e38:	23ff      	movs	r3, #255	@ 0xff
 8003e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	Timing.DataHoldTime = 3;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Timing.BusTurnAroundDuration = 15;
 8003e40:	230f      	movs	r3, #15
 8003e42:	633b      	str	r3, [r7, #48]	@ 0x30
	Timing.CLKDivision = 16;
 8003e44:	2310      	movs	r3, #16
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
	Timing.DataLatency = 17;
 8003e48:	2311      	movs	r3, #17
 8003e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003e50:	f107 0320 	add.w	r3, r7, #32
 8003e54:	2200      	movs	r2, #0
 8003e56:	4619      	mov	r1, r3
 8003e58:	482d      	ldr	r0, [pc, #180]	@ (8003f10 <MX_FMC_Init+0x184>)
 8003e5a:	f009 fc4b 	bl	800d6f4 <HAL_SRAM_Init>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_FMC_Init+0xdc>
	{
		Error_Handler( );
 8003e64:	f000 fc81 	bl	800476a <Error_Handler>
	}

	/** Perform the NAND1 memory initialization sequence
	 */
	hnand1.Instance = FMC_NAND_DEVICE;
 8003e68:	4b2c      	ldr	r3, [pc, #176]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f20 <MX_FMC_Init+0x194>)
 8003e6c:	601a      	str	r2, [r3, #0]
	/* hnand1.Init */
	hnand1.Init.NandBank = FMC_NAND_BANK3;
 8003e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003e70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e74:	605a      	str	r2, [r3, #4]
	hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 8003e76:	4b29      	ldr	r3, [pc, #164]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003e78:	2202      	movs	r2, #2
 8003e7a:	609a      	str	r2, [r3, #8]
	hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 8003e7c:	4b27      	ldr	r3, [pc, #156]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
	hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 8003e82:	4b26      	ldr	r3, [pc, #152]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003e84:	2240      	movs	r2, #64	@ 0x40
 8003e86:	611a      	str	r2, [r3, #16]
	hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_8192BYTE;
 8003e88:	4b24      	ldr	r3, [pc, #144]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003e8a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8003e8e:	615a      	str	r2, [r3, #20]
	hnand1.Init.TCLRSetupTime = 15;
 8003e90:	4b22      	ldr	r3, [pc, #136]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003e92:	220f      	movs	r2, #15
 8003e94:	619a      	str	r2, [r3, #24]
	hnand1.Init.TARSetupTime = 15;
 8003e96:	4b21      	ldr	r3, [pc, #132]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003e98:	220f      	movs	r2, #15
 8003e9a:	61da      	str	r2, [r3, #28]
	/* hnand1.Config */
	hnand1.Config.PageSize = 8192;
 8003e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003e9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ea2:	625a      	str	r2, [r3, #36]	@ 0x24
	hnand1.Config.SpareAreaSize = 448;
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003ea6:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8003eaa:	629a      	str	r2, [r3, #40]	@ 0x28
	hnand1.Config.BlockSize = 128;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003eae:	2280      	movs	r2, #128	@ 0x80
 8003eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hnand1.Config.BlockNbr = 4096;
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003eb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003eb8:	631a      	str	r2, [r3, #48]	@ 0x30
	hnand1.Config.PlaneNbr = 2;
 8003eba:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	635a      	str	r2, [r3, #52]	@ 0x34
	hnand1.Config.PlaneSize = 2048;
 8003ec0:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec6:	639a      	str	r2, [r3, #56]	@ 0x38
	hnand1.Config.ExtraCommandEnable = ENABLE;
 8003ec8:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	/* ComSpaceTiming */
	ComSpaceTiming.SetupTime = 19;
 8003ed0:	2313      	movs	r3, #19
 8003ed2:	613b      	str	r3, [r7, #16]
	ComSpaceTiming.WaitSetupTime = 19;
 8003ed4:	2313      	movs	r3, #19
 8003ed6:	617b      	str	r3, [r7, #20]
	ComSpaceTiming.HoldSetupTime = 6;
 8003ed8:	2306      	movs	r3, #6
 8003eda:	61bb      	str	r3, [r7, #24]
	ComSpaceTiming.HiZSetupTime = 3;
 8003edc:	2303      	movs	r3, #3
 8003ede:	61fb      	str	r3, [r7, #28]
	/* AttSpaceTiming */
	AttSpaceTiming.SetupTime = 19;
 8003ee0:	2313      	movs	r3, #19
 8003ee2:	603b      	str	r3, [r7, #0]
	AttSpaceTiming.WaitSetupTime = 19;
 8003ee4:	2313      	movs	r3, #19
 8003ee6:	607b      	str	r3, [r7, #4]
	AttSpaceTiming.HoldSetupTime = 10;
 8003ee8:	230a      	movs	r3, #10
 8003eea:	60bb      	str	r3, [r7, #8]
	AttSpaceTiming.HiZSetupTime = 9;
 8003eec:	2309      	movs	r3, #9
 8003eee:	60fb      	str	r3, [r7, #12]

	if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8003ef0:	463a      	mov	r2, r7
 8003ef2:	f107 0310 	add.w	r3, r7, #16
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4808      	ldr	r0, [pc, #32]	@ (8003f1c <MX_FMC_Init+0x190>)
 8003efa:	f001 ff41 	bl	8005d80 <HAL_NAND_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_FMC_Init+0x17c>
	{
		Error_Handler( );
 8003f04:	f000 fc31 	bl	800476a <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8003f08:	bf00      	nop
 8003f0a:	3740      	adds	r7, #64	@ 0x40
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20005b20 	.word	0x20005b20
 8003f14:	47000400 	.word	0x47000400
 8003f18:	47000504 	.word	0x47000504
 8003f1c:	20005b78 	.word	0x20005b78
 8003f20:	47000480 	.word	0x47000480

08003f24 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08e      	sub	sp, #56	@ 0x38
 8003f28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	60da      	str	r2, [r3, #12]
 8003f38:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003f3a:	4bc2      	ldr	r3, [pc, #776]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f40:	4ac0      	ldr	r2, [pc, #768]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f42:	f043 0310 	orr.w	r3, r3, #16
 8003f46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f4a:	4bbe      	ldr	r3, [pc, #760]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003f58:	4bba      	ldr	r3, [pc, #744]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f5e:	4ab9      	ldr	r2, [pc, #740]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f60:	f043 0304 	orr.w	r3, r3, #4
 8003f64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f68:	4bb6      	ldr	r3, [pc, #728]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003f76:	4bb3      	ldr	r3, [pc, #716]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f7c:	4ab1      	ldr	r2, [pc, #708]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f7e:	f043 0320 	orr.w	r3, r3, #32
 8003f82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f86:	4baf      	ldr	r3, [pc, #700]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003f94:	4bab      	ldr	r3, [pc, #684]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f9a:	4aaa      	ldr	r2, [pc, #680]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003fa4:	4ba7      	ldr	r3, [pc, #668]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	4ba4      	ldr	r3, [pc, #656]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fb8:	4aa2      	ldr	r2, [pc, #648]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003fc2:	4ba0      	ldr	r3, [pc, #640]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd0:	4b9c      	ldr	r3, [pc, #624]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd6:	4a9b      	ldr	r2, [pc, #620]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003fe0:	4b98      	ldr	r3, [pc, #608]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003fee:	4b95      	ldr	r3, [pc, #596]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ff4:	4a93      	ldr	r2, [pc, #588]	@ (8004244 <MX_GPIO_Init+0x320>)
 8003ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ffe:	4b91      	ldr	r3, [pc, #580]	@ (8004244 <MX_GPIO_Init+0x320>)
 8004000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800400c:	4b8d      	ldr	r3, [pc, #564]	@ (8004244 <MX_GPIO_Init+0x320>)
 800400e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004012:	4a8c      	ldr	r2, [pc, #560]	@ (8004244 <MX_GPIO_Init+0x320>)
 8004014:	f043 0308 	orr.w	r3, r3, #8
 8004018:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800401c:	4b89      	ldr	r3, [pc, #548]	@ (8004244 <MX_GPIO_Init+0x320>)
 800401e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, CS_1_Pin|START_1_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 800402a:	2200      	movs	r2, #0
 800402c:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8004030:	4885      	ldr	r0, [pc, #532]	@ (8004248 <MX_GPIO_Init+0x324>)
 8004032:	f001 fe11 	bl	8005c58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 8004036:	2200      	movs	r2, #0
 8004038:	2104      	movs	r1, #4
 800403a:	4884      	ldr	r0, [pc, #528]	@ (800424c <MX_GPIO_Init+0x328>)
 800403c:	f001 fe0c 	bl	8005c58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 8004040:	2200      	movs	r2, #0
 8004042:	f241 4167 	movw	r1, #5223	@ 0x1467
 8004046:	4882      	ldr	r0, [pc, #520]	@ (8004250 <MX_GPIO_Init+0x32c>)
 8004048:	f001 fe06 	bl	8005c58 <HAL_GPIO_WritePin>
			|Pwr_Ctrl2_Pin|START_3_Pin|RESET_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPO_1_Pin|GPO_2_Pin|CS_2_Pin, GPIO_PIN_RESET);
 800404c:	2200      	movs	r2, #0
 800404e:	f640 0103 	movw	r1, #2051	@ 0x803
 8004052:	4880      	ldr	r0, [pc, #512]	@ (8004254 <MX_GPIO_Init+0x330>)
 8004054:	f001 fe00 	bl	8005c58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8004058:	2200      	movs	r2, #0
 800405a:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800405e:	487e      	ldr	r0, [pc, #504]	@ (8004258 <MX_GPIO_Init+0x334>)
 8004060:	f001 fdfa 	bl	8005c58 <HAL_GPIO_WritePin>
			|LED5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004064:	2201      	movs	r2, #1
 8004066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800406a:	487a      	ldr	r0, [pc, #488]	@ (8004254 <MX_GPIO_Init+0x330>)
 800406c:	f001 fdf4 	bl	8005c58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, START_2_Pin|RESET_2_Pin, GPIO_PIN_RESET);
 8004070:	2200      	movs	r2, #0
 8004072:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8004076:	4879      	ldr	r0, [pc, #484]	@ (800425c <MX_GPIO_Init+0x338>)
 8004078:	f001 fdee 	bl	8005c58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 800407c:	2200      	movs	r2, #0
 800407e:	2110      	movs	r1, #16
 8004080:	4877      	ldr	r0, [pc, #476]	@ (8004260 <MX_GPIO_Init+0x33c>)
 8004082:	f001 fde9 	bl	8005c58 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPI_3_Pin GPI_4_Pin GPI_5_Pin */
	GPIO_InitStruct.Pin = GPI_3_Pin|GPI_4_Pin|GPI_5_Pin;
 8004086:	2370      	movs	r3, #112	@ 0x70
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800408a:	2300      	movs	r3, #0
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	2300      	movs	r3, #0
 8004090:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004096:	4619      	mov	r1, r3
 8004098:	486f      	ldr	r0, [pc, #444]	@ (8004258 <MX_GPIO_Init+0x334>)
 800409a:	f001 fc73 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_1_Pin START_1_Pin */
	GPIO_InitStruct.Pin = CS_1_Pin|START_1_Pin;
 800409e:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a4:	2301      	movs	r3, #1
 80040a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ac:	2303      	movs	r3, #3
 80040ae:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040b4:	4619      	mov	r1, r3
 80040b6:	4864      	ldr	r0, [pc, #400]	@ (8004248 <MX_GPIO_Init+0x324>)
 80040b8:	f001 fc64 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_1_Pin */
	GPIO_InitStruct.Pin = DRDY_1_Pin;
 80040bc:	2302      	movs	r3, #2
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040c0:	4b68      	ldr	r3, [pc, #416]	@ (8004264 <MX_GPIO_Init+0x340>)
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_1_GPIO_Port, &GPIO_InitStruct);
 80040c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040cc:	4619      	mov	r1, r3
 80040ce:	485f      	ldr	r0, [pc, #380]	@ (800424c <MX_GPIO_Init+0x328>)
 80040d0:	f001 fc58 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pin : RESET_1_Pin */
	GPIO_InitStruct.Pin = RESET_1_Pin;
 80040d4:	2304      	movs	r3, #4
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d8:	2301      	movs	r3, #1
 80040da:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e0:	2303      	movs	r3, #3
 80040e2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 80040e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040e8:	4619      	mov	r1, r3
 80040ea:	4858      	ldr	r0, [pc, #352]	@ (800424c <MX_GPIO_Init+0x328>)
 80040ec:	f001 fc4a 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pins : RS422_CTRL_Pin RS485_CTRL1_Pin RS485_CTRL2_Pin Pwr_Ctrl1_Pin
                           Pwr_Ctrl2_Pin */
	GPIO_InitStruct.Pin = RS422_CTRL_Pin|RS485_CTRL1_Pin|RS485_CTRL2_Pin|Pwr_Ctrl1_Pin
 80040f0:	2367      	movs	r3, #103	@ 0x67
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
			|Pwr_Ctrl2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040f4:	2301      	movs	r3, #1
 80040f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fc:	2300      	movs	r3, #0
 80040fe:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004104:	4619      	mov	r1, r3
 8004106:	4852      	ldr	r0, [pc, #328]	@ (8004250 <MX_GPIO_Init+0x32c>)
 8004108:	f001 fc3c 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPO_1_Pin GPO_2_Pin */
	GPIO_InitStruct.Pin = GPO_1_Pin|GPO_2_Pin;
 800410c:	2303      	movs	r3, #3
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004110:	2301      	movs	r3, #1
 8004112:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004118:	2300      	movs	r3, #0
 800411a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800411c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004120:	4619      	mov	r1, r3
 8004122:	484c      	ldr	r0, [pc, #304]	@ (8004254 <MX_GPIO_Init+0x330>)
 8004124:	f001 fc2e 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pin : RTC_RST_Pin */
	GPIO_InitStruct.Pin = RTC_RST_Pin;
 8004128:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800412e:	2301      	movs	r3, #1
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004136:	2300      	movs	r3, #0
 8004138:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 800413a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800413e:	4619      	mov	r1, r3
 8004140:	4841      	ldr	r0, [pc, #260]	@ (8004248 <MX_GPIO_Init+0x324>)
 8004142:	f001 fc1f 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8004146:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24
			|LED5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800414c:	2301      	movs	r3, #1
 800414e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004154:	2300      	movs	r3, #0
 8004156:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800415c:	4619      	mov	r1, r3
 800415e:	483e      	ldr	r0, [pc, #248]	@ (8004258 <MX_GPIO_Init+0x334>)
 8004160:	f001 fc10 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 CS_2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10|CS_2_Pin;
 8004164:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416a:	2301      	movs	r3, #1
 800416c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004172:	2303      	movs	r3, #3
 8004174:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004176:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800417a:	4619      	mov	r1, r3
 800417c:	4835      	ldr	r0, [pc, #212]	@ (8004254 <MX_GPIO_Init+0x330>)
 800417e:	f001 fc01 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_2_Pin RESET_2_Pin */
	GPIO_InitStruct.Pin = START_2_Pin|RESET_2_Pin;
 8004182:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004188:	2301      	movs	r3, #1
 800418a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004190:	2303      	movs	r3, #3
 8004192:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004198:	4619      	mov	r1, r3
 800419a:	4830      	ldr	r0, [pc, #192]	@ (800425c <MX_GPIO_Init+0x338>)
 800419c:	f001 fbf2 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_2_Pin */
	GPIO_InitStruct.Pin = DRDY_2_Pin;
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004264 <MX_GPIO_Init+0x340>)
 80041a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_2_GPIO_Port, &GPIO_InitStruct);
 80041ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041b0:	4619      	mov	r1, r3
 80041b2:	482a      	ldr	r0, [pc, #168]	@ (800425c <MX_GPIO_Init+0x338>)
 80041b4:	f001 fbe6 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_3_Pin RESET_3_Pin */
	GPIO_InitStruct.Pin = START_3_Pin|RESET_3_Pin;
 80041b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041be:	2301      	movs	r3, #1
 80041c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c6:	2303      	movs	r3, #3
 80041c8:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041ce:	4619      	mov	r1, r3
 80041d0:	481f      	ldr	r0, [pc, #124]	@ (8004250 <MX_GPIO_Init+0x32c>)
 80041d2:	f001 fbd7 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pin : DRDY_3_Pin */
	GPIO_InitStruct.Pin = DRDY_3_Pin;
 80041d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041dc:	4b21      	ldr	r3, [pc, #132]	@ (8004264 <MX_GPIO_Init+0x340>)
 80041de:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(DRDY_3_GPIO_Port, &GPIO_InitStruct);
 80041e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041e8:	4619      	mov	r1, r3
 80041ea:	4819      	ldr	r0, [pc, #100]	@ (8004250 <MX_GPIO_Init+0x32c>)
 80041ec:	f001 fbca 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPI_1_Pin GPI_2_Pin */
	GPIO_InitStruct.Pin = GPI_1_Pin|GPI_2_Pin;
 80041f0:	230c      	movs	r3, #12
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041f4:	2300      	movs	r3, #0
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004200:	4619      	mov	r1, r3
 8004202:	4817      	ldr	r0, [pc, #92]	@ (8004260 <MX_GPIO_Init+0x33c>)
 8004204:	f001 fbbe 	bl	8005984 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_3_Pin */
	GPIO_InitStruct.Pin = CS_3_Pin;
 8004208:	2310      	movs	r3, #16
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800420c:	2301      	movs	r3, #1
 800420e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	2300      	movs	r3, #0
 8004212:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004214:	2303      	movs	r3, #3
 8004216:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 8004218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800421c:	4619      	mov	r1, r3
 800421e:	4810      	ldr	r0, [pc, #64]	@ (8004260 <MX_GPIO_Init+0x33c>)
 8004220:	f001 fbb0 	bl	8005984 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004224:	2200      	movs	r2, #0
 8004226:	2100      	movs	r1, #0
 8004228:	200c      	movs	r0, #12
 800422a:	f001 fa2d 	bl	8005688 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800422e:	200c      	movs	r0, #12
 8004230:	f001 fa44 	bl	80056bc <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8004234:	2200      	movs	r2, #0
 8004236:	2100      	movs	r1, #0
 8004238:	2012      	movs	r0, #18
 800423a:	f001 fa25 	bl	8005688 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 800423e:	2012      	movs	r0, #18
 8004240:	e012      	b.n	8004268 <MX_GPIO_Init+0x344>
 8004242:	bf00      	nop
 8004244:	44020c00 	.word	0x44020c00
 8004248:	42021400 	.word	0x42021400
 800424c:	42020800 	.word	0x42020800
 8004250:	42020000 	.word	0x42020000
 8004254:	42020400 	.word	0x42020400
 8004258:	42021000 	.word	0x42021000
 800425c:	42021800 	.word	0x42021800
 8004260:	42020c00 	.word	0x42020c00
 8004264:	10210000 	.word	0x10210000
 8004268:	f001 fa28 	bl	80056bc <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 800426c:	2200      	movs	r2, #0
 800426e:	2100      	movs	r1, #0
 8004270:	2016      	movs	r0, #22
 8004272:	f001 fa09 	bl	8005688 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8004276:	2016      	movs	r0, #22
 8004278:	f001 fa20 	bl	80056bc <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800427c:	bf00      	nop
 800427e:	3738      	adds	r7, #56	@ 0x38
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_InitAllHandlers>:

/* USER CODE BEGIN 4 */


void UART_InitAllHandlers(void) {
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
	// Start receiving data on all four UARTs
	HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 8004288:	2201      	movs	r2, #1
 800428a:	490a      	ldr	r1, [pc, #40]	@ (80042b4 <UART_InitAllHandlers+0x30>)
 800428c:	480a      	ldr	r0, [pc, #40]	@ (80042b8 <UART_InitAllHandlers+0x34>)
 800428e:	f009 fcb1 	bl	800dbf4 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 8004292:	2201      	movs	r2, #1
 8004294:	4909      	ldr	r1, [pc, #36]	@ (80042bc <UART_InitAllHandlers+0x38>)
 8004296:	480a      	ldr	r0, [pc, #40]	@ (80042c0 <UART_InitAllHandlers+0x3c>)
 8004298:	f009 fcac 	bl	800dbf4 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], sizeof(uart3_rx_buffer));
 800429c:	2201      	movs	r2, #1
 800429e:	4909      	ldr	r1, [pc, #36]	@ (80042c4 <UART_InitAllHandlers+0x40>)
 80042a0:	4809      	ldr	r0, [pc, #36]	@ (80042c8 <UART_InitAllHandlers+0x44>)
 80042a2:	f009 fca7 	bl	800dbf4 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 80042a6:	2201      	movs	r2, #1
 80042a8:	4908      	ldr	r1, [pc, #32]	@ (80042cc <UART_InitAllHandlers+0x48>)
 80042aa:	4809      	ldr	r0, [pc, #36]	@ (80042d0 <UART_InitAllHandlers+0x4c>)
 80042ac:	f009 fca2 	bl	800dbf4 <HAL_UART_Receive_IT>
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20005bd8 	.word	0x20005bd8
 80042b8:	200058d0 	.word	0x200058d0
 80042bc:	20005bdc 	.word	0x20005bdc
 80042c0:	200059f8 	.word	0x200059f8
 80042c4:	20005be0 	.word	0x20005be0
 80042c8:	20005964 	.word	0x20005964
 80042cc:	20005be4 	.word	0x20005be4
 80042d0:	20005a8c 	.word	0x20005a8c

080042d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART4) {
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a9b      	ldr	r2, [pc, #620]	@ (8004550 <HAL_UART_RxCpltCallback+0x27c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d169      	bne.n	80043ba <HAL_UART_RxCpltCallback+0xe6>
		HAL_UART_Receive_IT(&huart4, &uart1_rx_buffer[0], sizeof(uart1_rx_buffer));
 80042e6:	2201      	movs	r2, #1
 80042e8:	499a      	ldr	r1, [pc, #616]	@ (8004554 <HAL_UART_RxCpltCallback+0x280>)
 80042ea:	489b      	ldr	r0, [pc, #620]	@ (8004558 <HAL_UART_RxCpltCallback+0x284>)
 80042ec:	f009 fc82 	bl	800dbf4 <HAL_UART_Receive_IT>

		if(uart1_rx_buffer[0] == '#')//T
 80042f0:	4b98      	ldr	r3, [pc, #608]	@ (8004554 <HAL_UART_RxCpltCallback+0x280>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b23      	cmp	r3, #35	@ 0x23
 80042f6:	d10e      	bne.n	8004316 <HAL_UART_RxCpltCallback+0x42>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 80042f8:	4b98      	ldr	r3, [pc, #608]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	b2d1      	uxtb	r1, r2
 8004300:	4a96      	ldr	r2, [pc, #600]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004302:	7011      	strb	r1, [r2, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	4b93      	ldr	r3, [pc, #588]	@ (8004554 <HAL_UART_RxCpltCallback+0x280>)
 8004308:	7819      	ldrb	r1, [r3, #0]
 800430a:	4b95      	ldr	r3, [pc, #596]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 800430c:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 800430e:	4b95      	ldr	r3, [pc, #596]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e018      	b.n	8004348 <HAL_UART_RxCpltCallback+0x74>

		}
		else if(command_rcv==1)
 8004316:	4b93      	ldr	r3, [pc, #588]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d114      	bne.n	8004348 <HAL_UART_RxCpltCallback+0x74>
		{
			command_str[command_str_index++] = uart1_rx_buffer[0] ;
 800431e:	4b8f      	ldr	r3, [pc, #572]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	b2d1      	uxtb	r1, r2
 8004326:	4a8d      	ldr	r2, [pc, #564]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004328:	7011      	strb	r1, [r2, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	4b89      	ldr	r3, [pc, #548]	@ (8004554 <HAL_UART_RxCpltCallback+0x280>)
 800432e:	7819      	ldrb	r1, [r3, #0]
 8004330:	4b8b      	ldr	r3, [pc, #556]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 8004332:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 8004334:	4b89      	ldr	r3, [pc, #548]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b0f      	cmp	r3, #15
 800433a:	d905      	bls.n	8004348 <HAL_UART_RxCpltCallback+0x74>
			{
				command_str_index = 0 ;
 800433c:	4b87      	ldr	r3, [pc, #540]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8004342:	4b88      	ldr	r3, [pc, #544]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
			}
		}
		if(command_rcv == 1 && uart1_rx_buffer[0] == '$')
 8004348:	4b86      	ldr	r3, [pc, #536]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	f040 81e8 	bne.w	8004722 <HAL_UART_RxCpltCallback+0x44e>
 8004352:	4b80      	ldr	r3, [pc, #512]	@ (8004554 <HAL_UART_RxCpltCallback+0x280>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b24      	cmp	r3, #36	@ 0x24
 8004358:	f040 81e3 	bne.w	8004722 <HAL_UART_RxCpltCallback+0x44e>
		{
			if(command_str[command_str_index-1] == '$')
 800435c:	4b7f      	ldr	r3, [pc, #508]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	3b01      	subs	r3, #1
 8004362:	4a7f      	ldr	r2, [pc, #508]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 8004364:	5cd3      	ldrb	r3, [r2, r3]
 8004366:	2b24      	cmp	r3, #36	@ 0x24
 8004368:	d109      	bne.n	800437e <HAL_UART_RxCpltCallback+0xaa>
			{
				ATP_test  = 1;
 800436a:	4b7f      	ldr	r3, [pc, #508]	@ (8004568 <HAL_UART_RxCpltCallback+0x294>)
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8004370:	4b7a      	ldr	r3, [pc, #488]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8004376:	4b7b      	ldr	r3, [pc, #492]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
			}
		}
	}

}
 800437c:	e1d1      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='9'))
 800437e:	4b78      	ldr	r3, [pc, #480]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 8004380:	785b      	ldrb	r3, [r3, #1]
 8004382:	2b32      	cmp	r3, #50	@ 0x32
 8004384:	d10d      	bne.n	80043a2 <HAL_UART_RxCpltCallback+0xce>
 8004386:	4b76      	ldr	r3, [pc, #472]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 8004388:	789b      	ldrb	r3, [r3, #2]
 800438a:	2b39      	cmp	r3, #57	@ 0x39
 800438c:	d109      	bne.n	80043a2 <HAL_UART_RxCpltCallback+0xce>
				ATP_test  = 1;
 800438e:	4b76      	ldr	r3, [pc, #472]	@ (8004568 <HAL_UART_RxCpltCallback+0x294>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8004394:	4b71      	ldr	r3, [pc, #452]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800439a:	4b72      	ldr	r3, [pc, #456]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e1bf      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 80043a2:	4b6e      	ldr	r3, [pc, #440]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80043a8:	4b6e      	ldr	r3, [pc, #440]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 80043ae:	220f      	movs	r2, #15
 80043b0:	2100      	movs	r1, #0
 80043b2:	486b      	ldr	r0, [pc, #428]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 80043b4:	f00c fc35 	bl	8010c22 <memset>
}
 80043b8:	e1b3      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == UART5) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6b      	ldr	r2, [pc, #428]	@ (800456c <HAL_UART_RxCpltCallback+0x298>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	f040 80e3 	bne.w	800458c <HAL_UART_RxCpltCallback+0x2b8>
		HAL_UART_Receive_IT(&huart5, &uart3_rx_buffer[0], 1);
 80043c6:	2201      	movs	r2, #1
 80043c8:	4969      	ldr	r1, [pc, #420]	@ (8004570 <HAL_UART_RxCpltCallback+0x29c>)
 80043ca:	486a      	ldr	r0, [pc, #424]	@ (8004574 <HAL_UART_RxCpltCallback+0x2a0>)
 80043cc:	f009 fc12 	bl	800dbf4 <HAL_UART_Receive_IT>
		if(uart3_rx_buffer[0] == '@' )//S
 80043d0:	4b67      	ldr	r3, [pc, #412]	@ (8004570 <HAL_UART_RxCpltCallback+0x29c>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b40      	cmp	r3, #64	@ 0x40
 80043d6:	d111      	bne.n	80043fc <HAL_UART_RxCpltCallback+0x128>
			time_str_length=0;
 80043d8:	4b67      	ldr	r3, [pc, #412]	@ (8004578 <HAL_UART_RxCpltCallback+0x2a4>)
 80043da:	2200      	movs	r2, #0
 80043dc:	701a      	strb	r2, [r3, #0]
			time_str[time_str_length++] = uart3_rx_buffer[0];
 80043de:	4b66      	ldr	r3, [pc, #408]	@ (8004578 <HAL_UART_RxCpltCallback+0x2a4>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	b2d1      	uxtb	r1, r2
 80043e6:	4a64      	ldr	r2, [pc, #400]	@ (8004578 <HAL_UART_RxCpltCallback+0x2a4>)
 80043e8:	7011      	strb	r1, [r2, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	4b60      	ldr	r3, [pc, #384]	@ (8004570 <HAL_UART_RxCpltCallback+0x29c>)
 80043ee:	7819      	ldrb	r1, [r3, #0]
 80043f0:	4b62      	ldr	r3, [pc, #392]	@ (800457c <HAL_UART_RxCpltCallback+0x2a8>)
 80043f2:	5499      	strb	r1, [r3, r2]
			time_rcv =1;
 80043f4:	4b62      	ldr	r3, [pc, #392]	@ (8004580 <HAL_UART_RxCpltCallback+0x2ac>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e018      	b.n	800442e <HAL_UART_RxCpltCallback+0x15a>
		else if(time_rcv==1)
 80043fc:	4b60      	ldr	r3, [pc, #384]	@ (8004580 <HAL_UART_RxCpltCallback+0x2ac>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d114      	bne.n	800442e <HAL_UART_RxCpltCallback+0x15a>
			time_str[time_str_length++] = uart3_rx_buffer[0];
 8004404:	4b5c      	ldr	r3, [pc, #368]	@ (8004578 <HAL_UART_RxCpltCallback+0x2a4>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	b2d1      	uxtb	r1, r2
 800440c:	4a5a      	ldr	r2, [pc, #360]	@ (8004578 <HAL_UART_RxCpltCallback+0x2a4>)
 800440e:	7011      	strb	r1, [r2, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	4b57      	ldr	r3, [pc, #348]	@ (8004570 <HAL_UART_RxCpltCallback+0x29c>)
 8004414:	7819      	ldrb	r1, [r3, #0]
 8004416:	4b59      	ldr	r3, [pc, #356]	@ (800457c <HAL_UART_RxCpltCallback+0x2a8>)
 8004418:	5499      	strb	r1, [r3, r2]
			if(time_str_length > 22)
 800441a:	4b57      	ldr	r3, [pc, #348]	@ (8004578 <HAL_UART_RxCpltCallback+0x2a4>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b16      	cmp	r3, #22
 8004420:	d905      	bls.n	800442e <HAL_UART_RxCpltCallback+0x15a>
				time_str_length = 0 ;
 8004422:	4b55      	ldr	r3, [pc, #340]	@ (8004578 <HAL_UART_RxCpltCallback+0x2a4>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
				time_rcv = 0 ;
 8004428:	4b55      	ldr	r3, [pc, #340]	@ (8004580 <HAL_UART_RxCpltCallback+0x2ac>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
		if(uart3_rx_buffer[0] == '$' )//E
 800442e:	4b50      	ldr	r3, [pc, #320]	@ (8004570 <HAL_UART_RxCpltCallback+0x29c>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b24      	cmp	r3, #36	@ 0x24
 8004434:	d112      	bne.n	800445c <HAL_UART_RxCpltCallback+0x188>
			if(time_str_length == 21)
 8004436:	4b50      	ldr	r3, [pc, #320]	@ (8004578 <HAL_UART_RxCpltCallback+0x2a4>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b15      	cmp	r3, #21
 800443c:	d103      	bne.n	8004446 <HAL_UART_RxCpltCallback+0x172>
				time_set = 1;
 800443e:	4b51      	ldr	r3, [pc, #324]	@ (8004584 <HAL_UART_RxCpltCallback+0x2b0>)
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	e00a      	b.n	800445c <HAL_UART_RxCpltCallback+0x188>
				time_rcv = 0 ;
 8004446:	4b4e      	ldr	r3, [pc, #312]	@ (8004580 <HAL_UART_RxCpltCallback+0x2ac>)
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
				time_str_length = 0 ;
 800444c:	4b4a      	ldr	r3, [pc, #296]	@ (8004578 <HAL_UART_RxCpltCallback+0x2a4>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
				memset(time_str,0,sizeof(time_str));
 8004452:	2219      	movs	r2, #25
 8004454:	2100      	movs	r1, #0
 8004456:	4849      	ldr	r0, [pc, #292]	@ (800457c <HAL_UART_RxCpltCallback+0x2a8>)
 8004458:	f00c fbe3 	bl	8010c22 <memset>
		if(uart3_rx_buffer[0] == '#')//T
 800445c:	4b44      	ldr	r3, [pc, #272]	@ (8004570 <HAL_UART_RxCpltCallback+0x29c>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b23      	cmp	r3, #35	@ 0x23
 8004462:	d10e      	bne.n	8004482 <HAL_UART_RxCpltCallback+0x1ae>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 8004464:	4b3d      	ldr	r3, [pc, #244]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	b2d1      	uxtb	r1, r2
 800446c:	4a3b      	ldr	r2, [pc, #236]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 800446e:	7011      	strb	r1, [r2, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	4b3f      	ldr	r3, [pc, #252]	@ (8004570 <HAL_UART_RxCpltCallback+0x29c>)
 8004474:	7819      	ldrb	r1, [r3, #0]
 8004476:	4b3a      	ldr	r3, [pc, #232]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 8004478:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 800447a:	4b3a      	ldr	r3, [pc, #232]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e018      	b.n	80044b4 <HAL_UART_RxCpltCallback+0x1e0>
		else if(command_rcv==1)
 8004482:	4b38      	ldr	r3, [pc, #224]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d114      	bne.n	80044b4 <HAL_UART_RxCpltCallback+0x1e0>
			command_str[command_str_index++] = uart3_rx_buffer[0] ;
 800448a:	4b34      	ldr	r3, [pc, #208]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	b2d1      	uxtb	r1, r2
 8004492:	4a32      	ldr	r2, [pc, #200]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004494:	7011      	strb	r1, [r2, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	4b35      	ldr	r3, [pc, #212]	@ (8004570 <HAL_UART_RxCpltCallback+0x29c>)
 800449a:	7819      	ldrb	r1, [r3, #0]
 800449c:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 800449e:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80044a0:	4b2e      	ldr	r3, [pc, #184]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b0f      	cmp	r3, #15
 80044a6:	d905      	bls.n	80044b4 <HAL_UART_RxCpltCallback+0x1e0>
				command_str_index = 0 ;
 80044a8:	4b2c      	ldr	r3, [pc, #176]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80044ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart3_rx_buffer[0] == '$')
 80044b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	f040 8132 	bne.w	8004722 <HAL_UART_RxCpltCallback+0x44e>
 80044be:	4b2c      	ldr	r3, [pc, #176]	@ (8004570 <HAL_UART_RxCpltCallback+0x29c>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b24      	cmp	r3, #36	@ 0x24
 80044c4:	f040 812d 	bne.w	8004722 <HAL_UART_RxCpltCallback+0x44e>
			if(command_str_index < 4)
 80044c8:	4b24      	ldr	r3, [pc, #144]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d812      	bhi.n	80044f6 <HAL_UART_RxCpltCallback+0x222>
				memcpy(nand_stop_read_CMD,command_str,command_str_index); // #*$
 80044d0:	4b22      	ldr	r3, [pc, #136]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	4922      	ldr	r1, [pc, #136]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 80044d8:	482b      	ldr	r0, [pc, #172]	@ (8004588 <HAL_UART_RxCpltCallback+0x2b4>)
 80044da:	f00c fc46 	bl	8010d6a <memcpy>
				memset(command_str,0,sizeof(command_str));
 80044de:	220f      	movs	r2, #15
 80044e0:	2100      	movs	r1, #0
 80044e2:	481f      	ldr	r0, [pc, #124]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 80044e4:	f00c fb9d 	bl	8010c22 <memset>
				command_str_index = 0 ;
 80044e8:	4b1c      	ldr	r3, [pc, #112]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80044ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
}
 80044f4:	e115      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
			else if(command_str_index == 4)
 80044f6:	4b19      	ldr	r3, [pc, #100]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d109      	bne.n	8004512 <HAL_UART_RxCpltCallback+0x23e>
				ATP_test  = 1;
 80044fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004568 <HAL_UART_RxCpltCallback+0x294>)
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8004504:	4b15      	ldr	r3, [pc, #84]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800450a:	4b16      	ldr	r3, [pc, #88]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
}
 8004510:	e107      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='6'))
 8004512:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 8004514:	785b      	ldrb	r3, [r3, #1]
 8004516:	2b32      	cmp	r3, #50	@ 0x32
 8004518:	d10d      	bne.n	8004536 <HAL_UART_RxCpltCallback+0x262>
 800451a:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 800451c:	789b      	ldrb	r3, [r3, #2]
 800451e:	2b36      	cmp	r3, #54	@ 0x36
 8004520:	d109      	bne.n	8004536 <HAL_UART_RxCpltCallback+0x262>
				ATP_test  = 1;
 8004522:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <HAL_UART_RxCpltCallback+0x294>)
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8004528:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800452e:	4b0d      	ldr	r3, [pc, #52]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e0f5      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 8004536:	4b09      	ldr	r3, [pc, #36]	@ (800455c <HAL_UART_RxCpltCallback+0x288>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 800453c:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <HAL_UART_RxCpltCallback+0x290>)
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8004542:	220f      	movs	r2, #15
 8004544:	2100      	movs	r1, #0
 8004546:	4806      	ldr	r0, [pc, #24]	@ (8004560 <HAL_UART_RxCpltCallback+0x28c>)
 8004548:	f00c fb6b 	bl	8010c22 <memset>
}
 800454c:	e0e9      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
 800454e:	bf00      	nop
 8004550:	40004c00 	.word	0x40004c00
 8004554:	20005bd8 	.word	0x20005bd8
 8004558:	200058d0 	.word	0x200058d0
 800455c:	2000036c 	.word	0x2000036c
 8004560:	20000358 	.word	0x20000358
 8004564:	20005bd6 	.word	0x20005bd6
 8004568:	2000036d 	.word	0x2000036d
 800456c:	40005000 	.word	0x40005000
 8004570:	20005be0 	.word	0x20005be0
 8004574:	20005964 	.word	0x20005964
 8004578:	20005bd5 	.word	0x20005bd5
 800457c:	20005bbc 	.word	0x20005bbc
 8004580:	20005bdd 	.word	0x20005bdd
 8004584:	20005bde 	.word	0x20005bde
 8004588:	200003f0 	.word	0x200003f0
	else if (huart->Instance == UART8) {
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a66      	ldr	r2, [pc, #408]	@ (800472c <HAL_UART_RxCpltCallback+0x458>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d158      	bne.n	8004648 <HAL_UART_RxCpltCallback+0x374>
		HAL_UART_Receive_IT(&huart8, &uart2_rx_buffer[0], sizeof(uart2_rx_buffer));
 8004596:	2201      	movs	r2, #1
 8004598:	4965      	ldr	r1, [pc, #404]	@ (8004730 <HAL_UART_RxCpltCallback+0x45c>)
 800459a:	4866      	ldr	r0, [pc, #408]	@ (8004734 <HAL_UART_RxCpltCallback+0x460>)
 800459c:	f009 fb2a 	bl	800dbf4 <HAL_UART_Receive_IT>
		if(uart2_rx_buffer[0] == '#')//T
 80045a0:	4b63      	ldr	r3, [pc, #396]	@ (8004730 <HAL_UART_RxCpltCallback+0x45c>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b23      	cmp	r3, #35	@ 0x23
 80045a6:	d10e      	bne.n	80045c6 <HAL_UART_RxCpltCallback+0x2f2>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 80045a8:	4b63      	ldr	r3, [pc, #396]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	b2d1      	uxtb	r1, r2
 80045b0:	4a61      	ldr	r2, [pc, #388]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80045b2:	7011      	strb	r1, [r2, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b5e      	ldr	r3, [pc, #376]	@ (8004730 <HAL_UART_RxCpltCallback+0x45c>)
 80045b8:	7819      	ldrb	r1, [r3, #0]
 80045ba:	4b60      	ldr	r3, [pc, #384]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 80045bc:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 80045be:	4b60      	ldr	r3, [pc, #384]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e018      	b.n	80045f8 <HAL_UART_RxCpltCallback+0x324>
		else if(command_rcv==1)
 80045c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d114      	bne.n	80045f8 <HAL_UART_RxCpltCallback+0x324>
			command_str[command_str_index++] = uart2_rx_buffer[0] ;
 80045ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	b2d1      	uxtb	r1, r2
 80045d6:	4a58      	ldr	r2, [pc, #352]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80045d8:	7011      	strb	r1, [r2, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	4b54      	ldr	r3, [pc, #336]	@ (8004730 <HAL_UART_RxCpltCallback+0x45c>)
 80045de:	7819      	ldrb	r1, [r3, #0]
 80045e0:	4b56      	ldr	r3, [pc, #344]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 80045e2:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80045e4:	4b54      	ldr	r3, [pc, #336]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	d905      	bls.n	80045f8 <HAL_UART_RxCpltCallback+0x324>
				command_str_index = 0 ;
 80045ec:	4b52      	ldr	r3, [pc, #328]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80045f2:	4b53      	ldr	r3, [pc, #332]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart2_rx_buffer[0] == '$')
 80045f8:	4b51      	ldr	r3, [pc, #324]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 8090 	bne.w	8004722 <HAL_UART_RxCpltCallback+0x44e>
 8004602:	4b4b      	ldr	r3, [pc, #300]	@ (8004730 <HAL_UART_RxCpltCallback+0x45c>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b24      	cmp	r3, #36	@ 0x24
 8004608:	f040 808b 	bne.w	8004722 <HAL_UART_RxCpltCallback+0x44e>
			if((command_str[1]=='2')&&(command_str[2]=='7'))
 800460c:	4b4b      	ldr	r3, [pc, #300]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b32      	cmp	r3, #50	@ 0x32
 8004612:	d10d      	bne.n	8004630 <HAL_UART_RxCpltCallback+0x35c>
 8004614:	4b49      	ldr	r3, [pc, #292]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 8004616:	789b      	ldrb	r3, [r3, #2]
 8004618:	2b37      	cmp	r3, #55	@ 0x37
 800461a:	d109      	bne.n	8004630 <HAL_UART_RxCpltCallback+0x35c>
				ATP_test  = 1;
 800461c:	4b49      	ldr	r3, [pc, #292]	@ (8004744 <HAL_UART_RxCpltCallback+0x470>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 8004622:	4b45      	ldr	r3, [pc, #276]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8004628:	4b45      	ldr	r3, [pc, #276]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	e078      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 8004630:	4b41      	ldr	r3, [pc, #260]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8004636:	4b42      	ldr	r3, [pc, #264]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 800463c:	220f      	movs	r2, #15
 800463e:	2100      	movs	r1, #0
 8004640:	483e      	ldr	r0, [pc, #248]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 8004642:	f00c faee 	bl	8010c22 <memset>
}
 8004646:	e06c      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
	else if (huart->Instance == USART10) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a3e      	ldr	r2, [pc, #248]	@ (8004748 <HAL_UART_RxCpltCallback+0x474>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d167      	bne.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
		HAL_UART_Receive_IT(&huart10, &uart4_rx_buffer[0], sizeof(uart4_rx_buffer));
 8004652:	2201      	movs	r2, #1
 8004654:	493d      	ldr	r1, [pc, #244]	@ (800474c <HAL_UART_RxCpltCallback+0x478>)
 8004656:	483e      	ldr	r0, [pc, #248]	@ (8004750 <HAL_UART_RxCpltCallback+0x47c>)
 8004658:	f009 facc 	bl	800dbf4 <HAL_UART_Receive_IT>
		if(uart4_rx_buffer[0] == '#')//T
 800465c:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <HAL_UART_RxCpltCallback+0x478>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b23      	cmp	r3, #35	@ 0x23
 8004662:	d10e      	bne.n	8004682 <HAL_UART_RxCpltCallback+0x3ae>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 8004664:	4b34      	ldr	r3, [pc, #208]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	b2d1      	uxtb	r1, r2
 800466c:	4a32      	ldr	r2, [pc, #200]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 800466e:	7011      	strb	r1, [r2, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	4b36      	ldr	r3, [pc, #216]	@ (800474c <HAL_UART_RxCpltCallback+0x478>)
 8004674:	7819      	ldrb	r1, [r3, #0]
 8004676:	4b31      	ldr	r3, [pc, #196]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 8004678:	5499      	strb	r1, [r3, r2]
			command_rcv  =1 ;
 800467a:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	e018      	b.n	80046b4 <HAL_UART_RxCpltCallback+0x3e0>
		else if(command_rcv==1)
 8004682:	4b2f      	ldr	r3, [pc, #188]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d114      	bne.n	80046b4 <HAL_UART_RxCpltCallback+0x3e0>
			command_str[command_str_index++] = uart4_rx_buffer[0] ;
 800468a:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	b2d1      	uxtb	r1, r2
 8004692:	4a29      	ldr	r2, [pc, #164]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 8004694:	7011      	strb	r1, [r2, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	4b2c      	ldr	r3, [pc, #176]	@ (800474c <HAL_UART_RxCpltCallback+0x478>)
 800469a:	7819      	ldrb	r1, [r3, #0]
 800469c:	4b27      	ldr	r3, [pc, #156]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 800469e:	5499      	strb	r1, [r3, r2]
			if(command_str_index > 15)
 80046a0:	4b25      	ldr	r3, [pc, #148]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b0f      	cmp	r3, #15
 80046a6:	d905      	bls.n	80046b4 <HAL_UART_RxCpltCallback+0x3e0>
				command_str_index = 0 ;
 80046a8:	4b23      	ldr	r3, [pc, #140]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80046ae:	4b24      	ldr	r3, [pc, #144]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
		if(command_rcv == 1 && uart4_rx_buffer[0] == '$')
 80046b4:	4b22      	ldr	r3, [pc, #136]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d132      	bne.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
 80046bc:	4b23      	ldr	r3, [pc, #140]	@ (800474c <HAL_UART_RxCpltCallback+0x478>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b24      	cmp	r3, #36	@ 0x24
 80046c2:	d12e      	bne.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
			if(command_str[command_str_index-1] == '$')
 80046c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	4a1c      	ldr	r2, [pc, #112]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 80046cc:	5cd3      	ldrb	r3, [r2, r3]
 80046ce:	2b24      	cmp	r3, #36	@ 0x24
 80046d0:	d109      	bne.n	80046e6 <HAL_UART_RxCpltCallback+0x412>
				ATP_test  = 1;
 80046d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004744 <HAL_UART_RxCpltCallback+0x470>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80046d8:	4b17      	ldr	r3, [pc, #92]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 80046de:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
}
 80046e4:	e01d      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
			else if((command_str[1]=='2')&&(command_str[2]=='8'))
 80046e6:	4b15      	ldr	r3, [pc, #84]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	2b32      	cmp	r3, #50	@ 0x32
 80046ec:	d10d      	bne.n	800470a <HAL_UART_RxCpltCallback+0x436>
 80046ee:	4b13      	ldr	r3, [pc, #76]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 80046f0:	789b      	ldrb	r3, [r3, #2]
 80046f2:	2b38      	cmp	r3, #56	@ 0x38
 80046f4:	d109      	bne.n	800470a <HAL_UART_RxCpltCallback+0x436>
				ATP_test  = 1;
 80046f6:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <HAL_UART_RxCpltCallback+0x470>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
				command_str_index = 0 ;
 80046fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8004702:	4b0f      	ldr	r3, [pc, #60]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e00b      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
				command_str_index = 0 ;
 800470a:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_UART_RxCpltCallback+0x464>)
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
				command_rcv = 0 ;
 8004710:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <HAL_UART_RxCpltCallback+0x46c>)
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
				memset(command_str,0,sizeof(command_str));
 8004716:	220f      	movs	r2, #15
 8004718:	2100      	movs	r1, #0
 800471a:	4808      	ldr	r0, [pc, #32]	@ (800473c <HAL_UART_RxCpltCallback+0x468>)
 800471c:	f00c fa81 	bl	8010c22 <memset>
}
 8004720:	e7ff      	b.n	8004722 <HAL_UART_RxCpltCallback+0x44e>
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40007c00 	.word	0x40007c00
 8004730:	20005bdc 	.word	0x20005bdc
 8004734:	200059f8 	.word	0x200059f8
 8004738:	2000036c 	.word	0x2000036c
 800473c:	20000358 	.word	0x20000358
 8004740:	20005bd6 	.word	0x20005bd6
 8004744:	2000036d 	.word	0x2000036d
 8004748:	40006800 	.word	0x40006800
 800474c:	20005be4 	.word	0x20005be4
 8004750:	20005a8c 	.word	0x20005a8c

08004754 <HAL_GPIO_EXTI_Falling_Callback>:



// User-defined callback to handle the data-ready event
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	80fb      	strh	r3, [r7, #6]
		//HAL_UART_Transmit_IT(&huart8, "DR_3\n\r", strlen("DR_1\n\r"));
		//HAL_Delay(1);
		// Data ready logic
		// For example, read data from a sensor using SPI/I2C
	}
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800476e:	b672      	cpsid	i
}
 8004770:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <Error_Handler+0x8>

08004776 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800477a:	bf00      	nop
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b0d0      	sub	sp, #320	@ 0x140
 8004788:	af00      	add	r7, sp, #0
 800478a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800478e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004792:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	60da      	str	r2, [r3, #12]
 80047a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80047a8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80047ac:	4618      	mov	r0, r3
 80047ae:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80047b2:	461a      	mov	r2, r3
 80047b4:	2100      	movs	r1, #0
 80047b6:	f00c fa34 	bl	8010c22 <memset>
  if(hspi->Instance==SPI2)
 80047ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80047be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a9c      	ldr	r2, [pc, #624]	@ (8004a38 <HAL_SPI_MspInit+0x2b4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d15f      	bne.n	800488c <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80047cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80047d0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80047d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 80047e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80047e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047ee:	f107 0320 	add.w	r3, r7, #32
 80047f2:	4618      	mov	r0, r3
 80047f4:	f003 f912 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 80047fe:	f7ff ffb4 	bl	800476a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004802:	4b8e      	ldr	r3, [pc, #568]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 8004804:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004808:	4a8c      	ldr	r2, [pc, #560]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 800480a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800480e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004812:	4b8a      	ldr	r3, [pc, #552]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 8004814:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004818:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800481c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004820:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800482a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800482e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004830:	4b82      	ldr	r3, [pc, #520]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 8004832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004836:	4a81      	ldr	r2, [pc, #516]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 8004838:	f043 0302 	orr.w	r3, r3, #2
 800483c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004840:	4b7e      	ldr	r3, [pc, #504]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 8004842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004846:	f003 0202 	and.w	r2, r3, #2
 800484a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800484e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004858:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800485c:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCKL_2_Pin|MISO_2_Pin|MOSI_2_Pin;
 800485e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004862:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004866:	2302      	movs	r3, #2
 8004868:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486c:	2300      	movs	r3, #0
 800486e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004878:	2305      	movs	r3, #5
 800487a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800487e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004882:	4619      	mov	r1, r3
 8004884:	486e      	ldr	r0, [pc, #440]	@ (8004a40 <HAL_SPI_MspInit+0x2bc>)
 8004886:	f001 f87d 	bl	8005984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800488a:	e0d0      	b.n	8004a2e <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI3)
 800488c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004890:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a6a      	ldr	r2, [pc, #424]	@ (8004a44 <HAL_SPI_MspInit+0x2c0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d15f      	bne.n	800495e <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800489e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80048a2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80048a6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 80048b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80048b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048c0:	f107 0320 	add.w	r3, r7, #32
 80048c4:	4618      	mov	r0, r3
 80048c6:	f003 f8a9 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 80048d0:	f7ff ff4b 	bl	800476a <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80048d4:	4b59      	ldr	r3, [pc, #356]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 80048d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048da:	4a58      	ldr	r2, [pc, #352]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 80048dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048e0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80048e4:	4b55      	ldr	r3, [pc, #340]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 80048e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ea:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80048ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80048f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80048fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004900:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004902:	4b4e      	ldr	r3, [pc, #312]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 8004904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004908:	4a4c      	ldr	r2, [pc, #304]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 800490a:	f043 0304 	orr.w	r3, r3, #4
 800490e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004912:	4b4a      	ldr	r3, [pc, #296]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004918:	f003 0204 	and.w	r2, r3, #4
 800491c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004920:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800492a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800492e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 8004930:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004934:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004938:	2302      	movs	r3, #2
 800493a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493e:	2300      	movs	r3, #0
 8004940:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004944:	2300      	movs	r3, #0
 8004946:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800494a:	2306      	movs	r3, #6
 800494c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004950:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004954:	4619      	mov	r1, r3
 8004956:	483c      	ldr	r0, [pc, #240]	@ (8004a48 <HAL_SPI_MspInit+0x2c4>)
 8004958:	f001 f814 	bl	8005984 <HAL_GPIO_Init>
}
 800495c:	e067      	b.n	8004a2e <HAL_SPI_MspInit+0x2aa>
  else if(hspi->Instance==SPI5)
 800495e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004962:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a38      	ldr	r2, [pc, #224]	@ (8004a4c <HAL_SPI_MspInit+0x2c8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d15e      	bne.n	8004a2e <HAL_SPI_MspInit+0x2aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8004970:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004974:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004978:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi5ClockSelection = RCC_SPI5CLKSOURCE_PCLK3;
 8004984:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004988:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800498c:	2200      	movs	r2, #0
 800498e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004992:	f107 0320 	add.w	r3, r7, #32
 8004996:	4618      	mov	r0, r3
 8004998:	f003 f840 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80049a2:	f7ff fee2 	bl	800476a <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80049a6:	4b25      	ldr	r3, [pc, #148]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 80049a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049ac:	4a23      	ldr	r2, [pc, #140]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 80049ae:	f043 0320 	orr.w	r3, r3, #32
 80049b2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80049b6:	4b21      	ldr	r3, [pc, #132]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 80049b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049bc:	f003 0220 	and.w	r2, r3, #32
 80049c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80049c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80049ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80049d2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80049d4:	4b19      	ldr	r3, [pc, #100]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 80049d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049da:	4a18      	ldr	r2, [pc, #96]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 80049dc:	f043 0320 	orr.w	r3, r3, #32
 80049e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049e4:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <HAL_SPI_MspInit+0x2b8>)
 80049e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ea:	f003 0220 	and.w	r2, r3, #32
 80049ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80049f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80049fc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004a00:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SCKL_1_Pin|MISO_1_Pin|MOSI_1_Pin;
 8004a02:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004a06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004a1c:	2305      	movs	r3, #5
 8004a1e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a22:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004a26:	4619      	mov	r1, r3
 8004a28:	4809      	ldr	r0, [pc, #36]	@ (8004a50 <HAL_SPI_MspInit+0x2cc>)
 8004a2a:	f000 ffab 	bl	8005984 <HAL_GPIO_Init>
}
 8004a2e:	bf00      	nop
 8004a30:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40003800 	.word	0x40003800
 8004a3c:	44020c00 	.word	0x44020c00
 8004a40:	42020400 	.word	0x42020400
 8004a44:	40003c00 	.word	0x40003c00
 8004a48:	42020800 	.word	0x42020800
 8004a4c:	44002000 	.word	0x44002000
 8004a50:	42021400 	.word	0x42021400

08004a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b0d2      	sub	sp, #328	@ 0x148
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a5e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004a62:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a64:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a78:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004a82:	461a      	mov	r2, r3
 8004a84:	2100      	movs	r1, #0
 8004a86:	f00c f8cc 	bl	8010c22 <memset>
  if(huart->Instance==UART4)
 8004a8a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4aa4      	ldr	r2, [pc, #656]	@ (8004d28 <HAL_UART_MspInit+0x2d4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d166      	bne.n	8004b6a <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004a9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004aa0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004aa4:	f04f 0208 	mov.w	r2, #8
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004ab0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ab4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ab8:	2200      	movs	r2, #0
 8004aba:	669a      	str	r2, [r3, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004abc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f002 ffab 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8004acc:	f7ff fe4d 	bl	800476a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004ad0:	4b96      	ldr	r3, [pc, #600]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ad6:	4a95      	ldr	r2, [pc, #596]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004ad8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004adc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004ae0:	4b92      	ldr	r3, [pc, #584]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ae6:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8004aea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004aee:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004af8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004afc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004afe:	4b8b      	ldr	r3, [pc, #556]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b04:	4a89      	ldr	r2, [pc, #548]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004b06:	f043 0302 	orr.w	r3, r3, #2
 8004b0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b0e:	4b87      	ldr	r3, [pc, #540]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b14:	f003 0202 	and.w	r2, r3, #2
 8004b18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004b1c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004b26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004b2a:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART_RX2_Pin|UART_TX2_Pin;
 8004b2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b30:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b34:	2302      	movs	r3, #2
 8004b36:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004b46:	2308      	movs	r3, #8
 8004b48:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b4c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004b50:	4619      	mov	r1, r3
 8004b52:	4877      	ldr	r0, [pc, #476]	@ (8004d30 <HAL_UART_MspInit+0x2dc>)
 8004b54:	f000 ff16 	bl	8005984 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	203d      	movs	r0, #61	@ 0x3d
 8004b5e:	f000 fd93 	bl	8005688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004b62:	203d      	movs	r0, #61	@ 0x3d
 8004b64:	f000 fdaa 	bl	80056bc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE END USART10_MspInit 1 */
  }

}
 8004b68:	e159      	b.n	8004e1e <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART5)
 8004b6a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004b6e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6f      	ldr	r2, [pc, #444]	@ (8004d34 <HAL_UART_MspInit+0x2e0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d165      	bne.n	8004c48 <HAL_UART_MspInit+0x1f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004b7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004b80:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004b84:	f04f 0210 	mov.w	r2, #16
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004b90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004b94:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004b98:	2200      	movs	r2, #0
 8004b9a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f002 ff3b 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8004bac:	f7ff fddd 	bl	800476a <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004bb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bbc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bc6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004bca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004bce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004bd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004bdc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bde:	4b53      	ldr	r3, [pc, #332]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004be4:	4a51      	ldr	r2, [pc, #324]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004be6:	f043 0302 	orr.w	r3, r3, #2
 8004bea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004bee:	4b4f      	ldr	r3, [pc, #316]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bf4:	f003 0202 	and.w	r2, r3, #2
 8004bf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004bfc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c06:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004c0a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX3_Pin|UART_TX3_Pin;
 8004c0c:	2360      	movs	r3, #96	@ 0x60
 8004c0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c12:	2302      	movs	r3, #2
 8004c14:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004c24:	230e      	movs	r3, #14
 8004c26:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c2a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004c2e:	4619      	mov	r1, r3
 8004c30:	483f      	ldr	r0, [pc, #252]	@ (8004d30 <HAL_UART_MspInit+0x2dc>)
 8004c32:	f000 fea7 	bl	8005984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004c36:	2200      	movs	r2, #0
 8004c38:	2100      	movs	r1, #0
 8004c3a:	203e      	movs	r0, #62	@ 0x3e
 8004c3c:	f000 fd24 	bl	8005688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004c40:	203e      	movs	r0, #62	@ 0x3e
 8004c42:	f000 fd3b 	bl	80056bc <HAL_NVIC_EnableIRQ>
}
 8004c46:	e0ea      	b.n	8004e1e <HAL_UART_MspInit+0x3ca>
  else if(huart->Instance==UART8)
 8004c48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c4c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a38      	ldr	r2, [pc, #224]	@ (8004d38 <HAL_UART_MspInit+0x2e4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d172      	bne.n	8004d40 <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8004c5a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c5e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004c62:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8004c6e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004c72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c76:	2200      	movs	r2, #0
 8004c78:	679a      	str	r2, [r3, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f002 fecc 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8004c8a:	f7ff fd6e 	bl	800476a <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8004c8e:	4b27      	ldr	r3, [pc, #156]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c94:	4a25      	ldr	r2, [pc, #148]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004c96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c9a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004c9e:	4b23      	ldr	r3, [pc, #140]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ca4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004ca8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004cac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004cb6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004cba:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004cc4:	f043 0310 	orr.w	r3, r3, #16
 8004cc8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ccc:	4b17      	ldr	r3, [pc, #92]	@ (8004d2c <HAL_UART_MspInit+0x2d8>)
 8004cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cd2:	f003 0210 	and.w	r2, r3, #16
 8004cd6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004cda:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004ce4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004ce8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX1_Pin|UART_TX1_Pin;
 8004cea:	2303      	movs	r3, #3
 8004cec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004d02:	2308      	movs	r3, #8
 8004d04:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d08:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	480b      	ldr	r0, [pc, #44]	@ (8004d3c <HAL_UART_MspInit+0x2e8>)
 8004d10:	f000 fe38 	bl	8005984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004d14:	2200      	movs	r2, #0
 8004d16:	2100      	movs	r1, #0
 8004d18:	2063      	movs	r0, #99	@ 0x63
 8004d1a:	f000 fcb5 	bl	8005688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004d1e:	2063      	movs	r0, #99	@ 0x63
 8004d20:	f000 fccc 	bl	80056bc <HAL_NVIC_EnableIRQ>
}
 8004d24:	e07b      	b.n	8004e1e <HAL_UART_MspInit+0x3ca>
 8004d26:	bf00      	nop
 8004d28:	40004c00 	.word	0x40004c00
 8004d2c:	44020c00 	.word	0x44020c00
 8004d30:	42020400 	.word	0x42020400
 8004d34:	40005000 	.word	0x40005000
 8004d38:	40007c00 	.word	0x40007c00
 8004d3c:	42021000 	.word	0x42021000
  else if(huart->Instance==USART10)
 8004d40:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d44:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a36      	ldr	r2, [pc, #216]	@ (8004e28 <HAL_UART_MspInit+0x3d4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d165      	bne.n	8004e1e <HAL_UART_MspInit+0x3ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8004d52:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d56:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart10ClockSelection = RCC_USART10CLKSOURCE_PCLK1;
 8004d66:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004d6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f002 fe4f 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_UART_MspInit+0x334>
      Error_Handler();
 8004d84:	f7ff fcf1 	bl	800476a <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8004d88:	4b28      	ldr	r3, [pc, #160]	@ (8004e2c <HAL_UART_MspInit+0x3d8>)
 8004d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d8e:	4a27      	ldr	r2, [pc, #156]	@ (8004e2c <HAL_UART_MspInit+0x3d8>)
 8004d90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d94:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d98:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <HAL_UART_MspInit+0x3d8>)
 8004d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d9e:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8004da2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004da6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004db0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004db4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004db6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e2c <HAL_UART_MspInit+0x3d8>)
 8004db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e2c <HAL_UART_MspInit+0x3d8>)
 8004dbe:	f043 0310 	orr.w	r3, r3, #16
 8004dc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004dc6:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_UART_MspInit+0x3d8>)
 8004dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dcc:	f003 0210 	and.w	r2, r3, #16
 8004dd0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004dd4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004dde:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004de2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = UART_RX4_Pin|UART_TX4_Pin;
 8004de4:	230c      	movs	r3, #12
 8004de6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dea:	2302      	movs	r3, #2
 8004dec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART10;
 8004dfc:	2307      	movs	r3, #7
 8004dfe:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e02:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8004e06:	4619      	mov	r1, r3
 8004e08:	4809      	ldr	r0, [pc, #36]	@ (8004e30 <HAL_UART_MspInit+0x3dc>)
 8004e0a:	f000 fdbb 	bl	8005984 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2100      	movs	r1, #0
 8004e12:	2056      	movs	r0, #86	@ 0x56
 8004e14:	f000 fc38 	bl	8005688 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004e18:	2056      	movs	r0, #86	@ 0x56
 8004e1a:	f000 fc4f 	bl	80056bc <HAL_NVIC_EnableIRQ>
}
 8004e1e:	bf00      	nop
 8004e20:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40006800 	.word	0x40006800
 8004e2c:	44020c00 	.word	0x44020c00
 8004e30:	42021000 	.word	0x42021000

08004e34 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004e48:	4b43      	ldr	r3, [pc, #268]	@ (8004f58 <HAL_FMC_MspInit+0x124>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d17f      	bne.n	8004f50 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8004e50:	4b41      	ldr	r3, [pc, #260]	@ (8004f58 <HAL_FMC_MspInit+0x124>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004e56:	4b41      	ldr	r3, [pc, #260]	@ (8004f5c <HAL_FMC_MspInit+0x128>)
 8004e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e5c:	4a3f      	ldr	r2, [pc, #252]	@ (8004f5c <HAL_FMC_MspInit+0x128>)
 8004e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e66:	4b3d      	ldr	r3, [pc, #244]	@ (8004f5c <HAL_FMC_MspInit+0x128>)
 8004e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
  PA8   ------> FMC_NOE
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004e74:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8004e78:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e82:	2303      	movs	r3, #3
 8004e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e86:	230c      	movs	r3, #12
 8004e88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4834      	ldr	r0, [pc, #208]	@ (8004f60 <HAL_FMC_MspInit+0x12c>)
 8004e90:	f000 fd78 	bl	8005984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004e94:	2380      	movs	r3, #128	@ 0x80
 8004e96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 8004ea4:	230d      	movs	r3, #13
 8004ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	482d      	ldr	r0, [pc, #180]	@ (8004f64 <HAL_FMC_MspInit+0x130>)
 8004eae:	f000 fd69 	bl	8005984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004eb2:	233f      	movs	r3, #63	@ 0x3f
 8004eb4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ec6:	1d3b      	adds	r3, r7, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4827      	ldr	r0, [pc, #156]	@ (8004f68 <HAL_FMC_MspInit+0x134>)
 8004ecc:	f000 fd5a 	bl	8005984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004ed0:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8004ed4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4820      	ldr	r0, [pc, #128]	@ (8004f6c <HAL_FMC_MspInit+0x138>)
 8004eec:	f000 fd4a 	bl	8005984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8004ef0:	f64f 0383 	movw	r3, #63619	@ 0xf883
 8004ef4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efe:	2303      	movs	r3, #3
 8004f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f02:	230c      	movs	r3, #12
 8004f04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4819      	ldr	r0, [pc, #100]	@ (8004f70 <HAL_FMC_MspInit+0x13c>)
 8004f0c:	f000 fd3a 	bl	8005984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f10:	23c0      	movs	r3, #192	@ 0xc0
 8004f12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f14:	2302      	movs	r3, #2
 8004f16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8004f20:	2309      	movs	r3, #9
 8004f22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f24:	1d3b      	adds	r3, r7, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4812      	ldr	r0, [pc, #72]	@ (8004f74 <HAL_FMC_MspInit+0x140>)
 8004f2a:	f000 fd2b 	bl	8005984 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	2302      	movs	r3, #2
 8004f36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f40:	230c      	movs	r3, #12
 8004f42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	4806      	ldr	r0, [pc, #24]	@ (8004f64 <HAL_FMC_MspInit+0x130>)
 8004f4a:	f000 fd1b 	bl	8005984 <HAL_GPIO_Init>
 8004f4e:	e000      	b.n	8004f52 <HAL_FMC_MspInit+0x11e>
    return;
 8004f50:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20005be8 	.word	0x20005be8
 8004f5c:	44020c00 	.word	0x44020c00
 8004f60:	42021400 	.word	0x42021400
 8004f64:	42020000 	.word	0x42020000
 8004f68:	42021800 	.word	0x42021800
 8004f6c:	42021000 	.word	0x42021000
 8004f70:	42020c00 	.word	0x42020c00
 8004f74:	42020800 	.word	0x42020800

08004f78 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004f80:	f7ff ff58 	bl	8004e34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8004f94:	f7ff ff4e 	bl	8004e34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <NMI_Handler+0x4>

08004fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <HardFault_Handler+0x4>

08004fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <MemManage_Handler+0x4>

08004fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <BusFault_Handler+0x4>

08004fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <UsageFault_Handler+0x4>

08004fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fda:	bf00      	nop
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ff6:	f000 fa4b 	bl	8005490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_1_Pin);
 8005002:	2002      	movs	r0, #2
 8005004:	f000 fe5a 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005008:	bf00      	nop
 800500a:	bd80      	pop	{r7, pc}

0800500c <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_2_Pin);
 8005010:	2080      	movs	r0, #128	@ 0x80
 8005012:	f000 fe53 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}

0800501a <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_3_Pin);
 800501e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005022:	f000 fe4b 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005030:	4802      	ldr	r0, [pc, #8]	@ (800503c <UART4_IRQHandler+0x10>)
 8005032:	f008 fe41 	bl	800dcb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	200058d0 	.word	0x200058d0

08005040 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005044:	4802      	ldr	r0, [pc, #8]	@ (8005050 <UART5_IRQHandler+0x10>)
 8005046:	f008 fe37 	bl	800dcb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20005964 	.word	0x20005964

08005054 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8005058:	4802      	ldr	r0, [pc, #8]	@ (8005064 <UART8_IRQHandler+0x10>)
 800505a:	f008 fe2d 	bl	800dcb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	200059f8 	.word	0x200059f8

08005068 <USART10_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART10_IRQHandler(void) {
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart10);
 800506c:	4802      	ldr	r0, [pc, #8]	@ (8005078 <USART10_IRQHandler+0x10>)
 800506e:	f008 fe23 	bl	800dcb8 <HAL_UART_IRQHandler>
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20005a8c 	.word	0x20005a8c

0800507c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return 1;
 8005080:	2301      	movs	r3, #1
}
 8005082:	4618      	mov	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <_kill>:

int _kill(int pid, int sig)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005096:	f00b fe2d 	bl	8010cf4 <__errno>
 800509a:	4603      	mov	r3, r0
 800509c:	2216      	movs	r2, #22
 800509e:	601a      	str	r2, [r3, #0]
  return -1;
 80050a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <_exit>:

void _exit (int status)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050b4:	f04f 31ff 	mov.w	r1, #4294967295
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ffe7 	bl	800508c <_kill>
  while (1) {}    /* Make sure we hang here */
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <_exit+0x12>

080050c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e00a      	b.n	80050ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80050d4:	f3af 8000 	nop.w
 80050d8:	4601      	mov	r1, r0
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	60ba      	str	r2, [r7, #8]
 80050e0:	b2ca      	uxtb	r2, r1
 80050e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	3301      	adds	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	dbf0      	blt.n	80050d4 <_read+0x12>
  }

  return len;
 80050f2:	687b      	ldr	r3, [r7, #4]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e009      	b.n	8005122 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	60ba      	str	r2, [r7, #8]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3301      	adds	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	429a      	cmp	r2, r3
 8005128:	dbf1      	blt.n	800510e <_write+0x12>
  }
  return len;
 800512a:	687b      	ldr	r3, [r7, #4]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_close>:

int _close(int file)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800515c:	605a      	str	r2, [r3, #4]
  return 0;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <_isatty>:

int _isatty(int file)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005174:	2301      	movs	r3, #1
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051a4:	4a14      	ldr	r2, [pc, #80]	@ (80051f8 <_sbrk+0x5c>)
 80051a6:	4b15      	ldr	r3, [pc, #84]	@ (80051fc <_sbrk+0x60>)
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051b0:	4b13      	ldr	r3, [pc, #76]	@ (8005200 <_sbrk+0x64>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d102      	bne.n	80051be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051b8:	4b11      	ldr	r3, [pc, #68]	@ (8005200 <_sbrk+0x64>)
 80051ba:	4a12      	ldr	r2, [pc, #72]	@ (8005204 <_sbrk+0x68>)
 80051bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051be:	4b10      	ldr	r3, [pc, #64]	@ (8005200 <_sbrk+0x64>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d207      	bcs.n	80051dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051cc:	f00b fd92 	bl	8010cf4 <__errno>
 80051d0:	4603      	mov	r3, r0
 80051d2:	220c      	movs	r2, #12
 80051d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	e009      	b.n	80051f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051dc:	4b08      	ldr	r3, [pc, #32]	@ (8005200 <_sbrk+0x64>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051e2:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <_sbrk+0x64>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4413      	add	r3, r2
 80051ea:	4a05      	ldr	r2, [pc, #20]	@ (8005200 <_sbrk+0x64>)
 80051ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051ee:	68fb      	ldr	r3, [r7, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	200a0000 	.word	0x200a0000
 80051fc:	00000400 	.word	0x00000400
 8005200:	20005bec 	.word	0x20005bec
 8005204:	20005d40 	.word	0x20005d40

08005208 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800520e:	4b35      	ldr	r3, [pc, #212]	@ (80052e4 <SystemInit+0xdc>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005214:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <SystemInit+0xdc>)
 8005216:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800521a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800521e:	4b32      	ldr	r3, [pc, #200]	@ (80052e8 <SystemInit+0xe0>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005224:	4b30      	ldr	r3, [pc, #192]	@ (80052e8 <SystemInit+0xe0>)
 8005226:	2200      	movs	r2, #0
 8005228:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800522a:	4b2f      	ldr	r3, [pc, #188]	@ (80052e8 <SystemInit+0xe0>)
 800522c:	2200      	movs	r2, #0
 800522e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8005230:	4b2d      	ldr	r3, [pc, #180]	@ (80052e8 <SystemInit+0xe0>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	492c      	ldr	r1, [pc, #176]	@ (80052e8 <SystemInit+0xe0>)
 8005236:	4b2d      	ldr	r3, [pc, #180]	@ (80052ec <SystemInit+0xe4>)
 8005238:	4013      	ands	r3, r2
 800523a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800523c:	4b2a      	ldr	r3, [pc, #168]	@ (80052e8 <SystemInit+0xe0>)
 800523e:	2200      	movs	r2, #0
 8005240:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8005242:	4b29      	ldr	r3, [pc, #164]	@ (80052e8 <SystemInit+0xe0>)
 8005244:	2200      	movs	r2, #0
 8005246:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8005248:	4b27      	ldr	r3, [pc, #156]	@ (80052e8 <SystemInit+0xe0>)
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800524e:	4b26      	ldr	r3, [pc, #152]	@ (80052e8 <SystemInit+0xe0>)
 8005250:	4a27      	ldr	r2, [pc, #156]	@ (80052f0 <SystemInit+0xe8>)
 8005252:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8005254:	4b24      	ldr	r3, [pc, #144]	@ (80052e8 <SystemInit+0xe0>)
 8005256:	2200      	movs	r2, #0
 8005258:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800525a:	4b23      	ldr	r3, [pc, #140]	@ (80052e8 <SystemInit+0xe0>)
 800525c:	4a24      	ldr	r2, [pc, #144]	@ (80052f0 <SystemInit+0xe8>)
 800525e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8005260:	4b21      	ldr	r3, [pc, #132]	@ (80052e8 <SystemInit+0xe0>)
 8005262:	2200      	movs	r2, #0
 8005264:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8005266:	4b20      	ldr	r3, [pc, #128]	@ (80052e8 <SystemInit+0xe0>)
 8005268:	4a21      	ldr	r2, [pc, #132]	@ (80052f0 <SystemInit+0xe8>)
 800526a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800526c:	4b1e      	ldr	r3, [pc, #120]	@ (80052e8 <SystemInit+0xe0>)
 800526e:	2200      	movs	r2, #0
 8005270:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8005272:	4b1d      	ldr	r3, [pc, #116]	@ (80052e8 <SystemInit+0xe0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1c      	ldr	r2, [pc, #112]	@ (80052e8 <SystemInit+0xe0>)
 8005278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800527c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800527e:	4b1a      	ldr	r3, [pc, #104]	@ (80052e8 <SystemInit+0xe0>)
 8005280:	2200      	movs	r2, #0
 8005282:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005284:	4b17      	ldr	r3, [pc, #92]	@ (80052e4 <SystemInit+0xdc>)
 8005286:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800528a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800528c:	4b19      	ldr	r3, [pc, #100]	@ (80052f4 <SystemInit+0xec>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8005294:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800529c:	d003      	beq.n	80052a6 <SystemInit+0x9e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80052a4:	d117      	bne.n	80052d6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80052a6:	4b13      	ldr	r3, [pc, #76]	@ (80052f4 <SystemInit+0xec>)
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80052b2:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <SystemInit+0xec>)
 80052b4:	4a10      	ldr	r2, [pc, #64]	@ (80052f8 <SystemInit+0xf0>)
 80052b6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80052b8:	4b0e      	ldr	r3, [pc, #56]	@ (80052f4 <SystemInit+0xec>)
 80052ba:	4a10      	ldr	r2, [pc, #64]	@ (80052fc <SystemInit+0xf4>)
 80052bc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80052be:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <SystemInit+0xec>)
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <SystemInit+0xec>)
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80052ca:	4b0a      	ldr	r3, [pc, #40]	@ (80052f4 <SystemInit+0xec>)
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	4a09      	ldr	r2, [pc, #36]	@ (80052f4 <SystemInit+0xec>)
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	61d3      	str	r3, [r2, #28]
  }
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	e000ed00 	.word	0xe000ed00
 80052e8:	44020c00 	.word	0x44020c00
 80052ec:	eae2eae3 	.word	0xeae2eae3
 80052f0:	01010280 	.word	0x01010280
 80052f4:	40022000 	.word	0x40022000
 80052f8:	08192a3b 	.word	0x08192a3b
 80052fc:	4c5d6e7f 	.word	0x4c5d6e7f

08005300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005300:	480d      	ldr	r0, [pc, #52]	@ (8005338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005304:	f7ff ff80 	bl	8005208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005308:	480c      	ldr	r0, [pc, #48]	@ (800533c <LoopForever+0x6>)
  ldr r1, =_edata
 800530a:	490d      	ldr	r1, [pc, #52]	@ (8005340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800530c:	4a0d      	ldr	r2, [pc, #52]	@ (8005344 <LoopForever+0xe>)
  movs r3, #0
 800530e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005310:	e002      	b.n	8005318 <LoopCopyDataInit>

08005312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005316:	3304      	adds	r3, #4

08005318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800531a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800531c:	d3f9      	bcc.n	8005312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531e:	4a0a      	ldr	r2, [pc, #40]	@ (8005348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005320:	4c0a      	ldr	r4, [pc, #40]	@ (800534c <LoopForever+0x16>)
  movs r3, #0
 8005322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005324:	e001      	b.n	800532a <LoopFillZerobss>

08005326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005328:	3204      	adds	r2, #4

0800532a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800532a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800532c:	d3fb      	bcc.n	8005326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800532e:	f00b fce7 	bl	8010d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005332:	f7fe f9f9 	bl	8003728 <main>

08005336 <LoopForever>:

LoopForever:
    b LoopForever
 8005336:	e7fe      	b.n	8005336 <LoopForever>
  ldr   r0, =_estack
 8005338:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800533c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005340:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8005344:	080136a0 	.word	0x080136a0
  ldr r2, =_sbss
 8005348:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 800534c:	20005d40 	.word	0x20005d40

08005350 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005350:	e7fe      	b.n	8005350 <ADC1_IRQHandler>
	...

08005354 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005358:	2003      	movs	r0, #3
 800535a:	f000 f98a 	bl	8005672 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800535e:	f002 f9d3 	bl	8007708 <HAL_RCC_GetSysClockFreq>
 8005362:	4602      	mov	r2, r0
 8005364:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <HAL_Init+0x44>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	490b      	ldr	r1, [pc, #44]	@ (800539c <HAL_Init+0x48>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	fa22 f303 	lsr.w	r3, r2, r3
 8005374:	4a0a      	ldr	r2, [pc, #40]	@ (80053a0 <HAL_Init+0x4c>)
 8005376:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005378:	2004      	movs	r0, #4
 800537a:	f000 f9cf 	bl	800571c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800537e:	200f      	movs	r0, #15
 8005380:	f000 f810 	bl	80053a4 <HAL_InitTick>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e002      	b.n	8005394 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800538e:	f7ff f9f2 	bl	8004776 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	44020c00 	.word	0x44020c00
 800539c:	080132e0 	.word	0x080132e0
 80053a0:	200000a8 	.word	0x200000a8

080053a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80053b0:	4b33      	ldr	r3, [pc, #204]	@ (8005480 <HAL_InitTick+0xdc>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e05c      	b.n	8005476 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80053bc:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <HAL_InitTick+0xe0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d10c      	bne.n	80053e2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80053c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005488 <HAL_InitTick+0xe4>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005480 <HAL_InitTick+0xdc>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	4619      	mov	r1, r3
 80053d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80053da:	fbb2 f3f3 	udiv	r3, r2, r3
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	e037      	b.n	8005452 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80053e2:	f000 f9f3 	bl	80057cc <HAL_SYSTICK_GetCLKSourceConfig>
 80053e6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d023      	beq.n	8005436 <HAL_InitTick+0x92>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d82d      	bhi.n	8005450 <HAL_InitTick+0xac>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_InitTick+0x5e>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d00d      	beq.n	800541c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8005400:	e026      	b.n	8005450 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8005402:	4b21      	ldr	r3, [pc, #132]	@ (8005488 <HAL_InitTick+0xe4>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b1e      	ldr	r3, [pc, #120]	@ (8005480 <HAL_InitTick+0xdc>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8005410:	fbb3 f3f1 	udiv	r3, r3, r1
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	60fb      	str	r3, [r7, #12]
        break;
 800541a:	e01a      	b.n	8005452 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800541c:	4b18      	ldr	r3, [pc, #96]	@ (8005480 <HAL_InitTick+0xdc>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005426:	fbb3 f3f2 	udiv	r3, r3, r2
 800542a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	60fb      	str	r3, [r7, #12]
        break;
 8005434:	e00d      	b.n	8005452 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005436:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <HAL_InitTick+0xdc>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005440:	fbb3 f3f2 	udiv	r3, r3, r2
 8005444:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005448:	fbb2 f3f3 	udiv	r3, r2, r3
 800544c:	60fb      	str	r3, [r7, #12]
        break;
 800544e:	e000      	b.n	8005452 <HAL_InitTick+0xae>
        break;
 8005450:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f940 	bl	80056d8 <HAL_SYSTICK_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e009      	b.n	8005476 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005462:	2200      	movs	r2, #0
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	f000 f90d 	bl	8005688 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800546e:	4a07      	ldr	r2, [pc, #28]	@ (800548c <HAL_InitTick+0xe8>)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	200000b0 	.word	0x200000b0
 8005484:	e000e010 	.word	0xe000e010
 8005488:	200000a8 	.word	0x200000a8
 800548c:	200000ac 	.word	0x200000ac

08005490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005494:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <HAL_IncTick+0x20>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <HAL_IncTick+0x24>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4413      	add	r3, r2
 80054a0:	4a04      	ldr	r2, [pc, #16]	@ (80054b4 <HAL_IncTick+0x24>)
 80054a2:	6013      	str	r3, [r2, #0]
}
 80054a4:	bf00      	nop
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	200000b0 	.word	0x200000b0
 80054b4:	20005bf0 	.word	0x20005bf0

080054b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return uwTick;
 80054bc:	4b03      	ldr	r3, [pc, #12]	@ (80054cc <HAL_GetTick+0x14>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20005bf0 	.word	0x20005bf0

080054d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054d8:	f7ff ffee 	bl	80054b8 <HAL_GetTick>
 80054dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d005      	beq.n	80054f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <HAL_Delay+0x44>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054f6:	bf00      	nop
 80054f8:	f7ff ffde 	bl	80054b8 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	429a      	cmp	r2, r3
 8005506:	d8f7      	bhi.n	80054f8 <HAL_Delay+0x28>
  {
  }
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	200000b0 	.word	0x200000b0

08005518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005528:	4b0c      	ldr	r3, [pc, #48]	@ (800555c <__NVIC_SetPriorityGrouping+0x44>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005534:	4013      	ands	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800554a:	4a04      	ldr	r2, [pc, #16]	@ (800555c <__NVIC_SetPriorityGrouping+0x44>)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	60d3      	str	r3, [r2, #12]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005564:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <__NVIC_GetPriorityGrouping+0x18>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	0a1b      	lsrs	r3, r3, #8
 800556a:	f003 0307 	and.w	r3, r3, #7
}
 800556e:	4618      	mov	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	e000ed00 	.word	0xe000ed00

0800557c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800558a:	2b00      	cmp	r3, #0
 800558c:	db0b      	blt.n	80055a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	f003 021f 	and.w	r2, r3, #31
 8005594:	4907      	ldr	r1, [pc, #28]	@ (80055b4 <__NVIC_EnableIRQ+0x38>)
 8005596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2001      	movs	r0, #1
 800559e:	fa00 f202 	lsl.w	r2, r0, r2
 80055a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	e000e100 	.word	0xe000e100

080055b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	6039      	str	r1, [r7, #0]
 80055c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	db0a      	blt.n	80055e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	490c      	ldr	r1, [pc, #48]	@ (8005604 <__NVIC_SetPriority+0x4c>)
 80055d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055d6:	0112      	lsls	r2, r2, #4
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	440b      	add	r3, r1
 80055dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e0:	e00a      	b.n	80055f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	4908      	ldr	r1, [pc, #32]	@ (8005608 <__NVIC_SetPriority+0x50>)
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	3b04      	subs	r3, #4
 80055f0:	0112      	lsls	r2, r2, #4
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	440b      	add	r3, r1
 80055f6:	761a      	strb	r2, [r3, #24]
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	e000e100 	.word	0xe000e100
 8005608:	e000ed00 	.word	0xe000ed00

0800560c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800560c:	b480      	push	{r7}
 800560e:	b089      	sub	sp, #36	@ 0x24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f1c3 0307 	rsb	r3, r3, #7
 8005626:	2b04      	cmp	r3, #4
 8005628:	bf28      	it	cs
 800562a:	2304      	movcs	r3, #4
 800562c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	3304      	adds	r3, #4
 8005632:	2b06      	cmp	r3, #6
 8005634:	d902      	bls.n	800563c <NVIC_EncodePriority+0x30>
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3b03      	subs	r3, #3
 800563a:	e000      	b.n	800563e <NVIC_EncodePriority+0x32>
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005640:	f04f 32ff 	mov.w	r2, #4294967295
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43da      	mvns	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	401a      	ands	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005654:	f04f 31ff 	mov.w	r1, #4294967295
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	43d9      	mvns	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005664:	4313      	orrs	r3, r2
         );
}
 8005666:	4618      	mov	r0, r3
 8005668:	3724      	adds	r7, #36	@ 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff ff4c 	bl	8005518 <__NVIC_SetPriorityGrouping>
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005696:	f7ff ff63 	bl	8005560 <__NVIC_GetPriorityGrouping>
 800569a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	6978      	ldr	r0, [r7, #20]
 80056a2:	f7ff ffb3 	bl	800560c <NVIC_EncodePriority>
 80056a6:	4602      	mov	r2, r0
 80056a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff ff82 	bl	80055b8 <__NVIC_SetPriority>
}
 80056b4:	bf00      	nop
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff ff56 	bl	800557c <__NVIC_EnableIRQ>
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e8:	d301      	bcc.n	80056ee <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80056ea:	2301      	movs	r3, #1
 80056ec:	e00d      	b.n	800570a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80056ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005718 <HAL_SYSTICK_Config+0x40>)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80056f6:	4b08      	ldr	r3, [pc, #32]	@ (8005718 <HAL_SYSTICK_Config+0x40>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80056fc:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <HAL_SYSTICK_Config+0x40>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a05      	ldr	r2, [pc, #20]	@ (8005718 <HAL_SYSTICK_Config+0x40>)
 8005702:	f043 0303 	orr.w	r3, r3, #3
 8005706:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	e000e010 	.word	0xe000e010

0800571c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b04      	cmp	r3, #4
 8005728:	d844      	bhi.n	80057b4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800572a:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005753 	.word	0x08005753
 8005734:	08005771 	.word	0x08005771
 8005738:	08005793 	.word	0x08005793
 800573c:	080057b5 	.word	0x080057b5
 8005740:	08005745 	.word	0x08005745
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005744:	4b1f      	ldr	r3, [pc, #124]	@ (80057c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1e      	ldr	r2, [pc, #120]	@ (80057c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800574a:	f043 0304 	orr.w	r3, r3, #4
 800574e:	6013      	str	r3, [r2, #0]
      break;
 8005750:	e031      	b.n	80057b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005752:	4b1c      	ldr	r3, [pc, #112]	@ (80057c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1b      	ldr	r2, [pc, #108]	@ (80057c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005758:	f023 0304 	bic.w	r3, r3, #4
 800575c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800575e:	4b1a      	ldr	r3, [pc, #104]	@ (80057c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005760:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005764:	4a18      	ldr	r2, [pc, #96]	@ (80057c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005766:	f023 030c 	bic.w	r3, r3, #12
 800576a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800576e:	e022      	b.n	80057b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005770:	4b14      	ldr	r3, [pc, #80]	@ (80057c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a13      	ldr	r2, [pc, #76]	@ (80057c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005776:	f023 0304 	bic.w	r3, r3, #4
 800577a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800577c:	4b12      	ldr	r3, [pc, #72]	@ (80057c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800577e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005782:	f023 030c 	bic.w	r3, r3, #12
 8005786:	4a10      	ldr	r2, [pc, #64]	@ (80057c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005790:	e011      	b.n	80057b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005792:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0b      	ldr	r2, [pc, #44]	@ (80057c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800579e:	4b0a      	ldr	r3, [pc, #40]	@ (80057c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80057a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057a4:	f023 030c 	bic.w	r3, r3, #12
 80057a8:	4a07      	ldr	r2, [pc, #28]	@ (80057c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80057aa:	f043 0308 	orr.w	r3, r3, #8
 80057ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80057b2:	e000      	b.n	80057b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80057b4:	bf00      	nop
  }
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	e000e010 	.word	0xe000e010
 80057c8:	44020c00 	.word	0x44020c00

080057cc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80057d2:	4b17      	ldr	r3, [pc, #92]	@ (8005830 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80057de:	2304      	movs	r3, #4
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	e01e      	b.n	8005822 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80057e4:	4b13      	ldr	r3, [pc, #76]	@ (8005834 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80057e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057ea:	f003 030c 	and.w	r3, r3, #12
 80057ee:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d00f      	beq.n	8005816 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d80f      	bhi.n	800581c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b04      	cmp	r3, #4
 8005806:	d003      	beq.n	8005810 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005808:	e008      	b.n	800581c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800580a:	2300      	movs	r3, #0
 800580c:	607b      	str	r3, [r7, #4]
        break;
 800580e:	e008      	b.n	8005822 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005810:	2301      	movs	r3, #1
 8005812:	607b      	str	r3, [r7, #4]
        break;
 8005814:	e005      	b.n	8005822 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005816:	2302      	movs	r3, #2
 8005818:	607b      	str	r3, [r7, #4]
        break;
 800581a:	e002      	b.n	8005822 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800581c:	2300      	movs	r3, #0
 800581e:	607b      	str	r3, [r7, #4]
        break;
 8005820:	bf00      	nop
    }
  }
  return systick_source;
 8005822:	687b      	ldr	r3, [r7, #4]
}
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	e000e010 	.word	0xe000e010
 8005834:	44020c00 	.word	0x44020c00

08005838 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005840:	f7ff fe3a 	bl	80054b8 <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e06b      	b.n	8005928 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d008      	beq.n	800586e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e05c      	b.n	8005928 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0204 	orr.w	r2, r2, #4
 800587c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2205      	movs	r2, #5
 8005882:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005886:	e020      	b.n	80058ca <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005888:	f7ff fe16 	bl	80054b8 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b05      	cmp	r3, #5
 8005894:	d919      	bls.n	80058ca <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589a:	f043 0210 	orr.w	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2203      	movs	r2, #3
 80058a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ba:	2201      	movs	r2, #1
 80058bc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e02e      	b.n	8005928 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0d7      	beq.n	8005888 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0202 	orr.w	r2, r2, #2
 80058e6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2204      	movs	r2, #4
 80058ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80058f8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005912:	2201      	movs	r2, #1
 8005914:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e019      	b.n	8005976 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d004      	beq.n	8005958 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e00e      	b.n	8005976 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2204      	movs	r2, #4
 800595c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800596e:	f043 0304 	orr.w	r3, r3, #4
 8005972:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005992:	e136      	b.n	8005c02 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	2101      	movs	r1, #1
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	fa01 f303 	lsl.w	r3, r1, r3
 80059a0:	4013      	ands	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8128 	beq.w	8005bfc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d003      	beq.n	80059bc <HAL_GPIO_Init+0x38>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b12      	cmp	r3, #18
 80059ba:	d125      	bne.n	8005a08 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	08da      	lsrs	r2, r3, #3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3208      	adds	r2, #8
 80059c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	220f      	movs	r2, #15
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	43db      	mvns	r3, r3
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4013      	ands	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f003 020f 	and.w	r2, r3, #15
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	08da      	lsrs	r2, r3, #3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3208      	adds	r2, #8
 8005a02:	6979      	ldr	r1, [r7, #20]
 8005a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	2203      	movs	r2, #3
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 0203 	and.w	r2, r3, #3
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d00b      	beq.n	8005a5c <HAL_GPIO_Init+0xd8>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d007      	beq.n	8005a5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a50:	2b11      	cmp	r3, #17
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b12      	cmp	r3, #18
 8005a5a:	d130      	bne.n	8005abe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	2203      	movs	r2, #3
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4013      	ands	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a92:	2201      	movs	r2, #1
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	091b      	lsrs	r3, r3, #4
 8005aa8:	f003 0201 	and.w	r2, r3, #1
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d017      	beq.n	8005af6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4013      	ands	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d07c      	beq.n	8005bfc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005b02:	4a47      	ldr	r2, [pc, #284]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	089b      	lsrs	r3, r3, #2
 8005b08:	3318      	adds	r3, #24
 8005b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	220f      	movs	r2, #15
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4013      	ands	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0a9a      	lsrs	r2, r3, #10
 8005b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c24 <HAL_GPIO_Init+0x2a0>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	f002 0203 	and.w	r2, r2, #3
 8005b34:	00d2      	lsls	r2, r2, #3
 8005b36:	4093      	lsls	r3, r2
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005b3e:	4938      	ldr	r1, [pc, #224]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	089b      	lsrs	r3, r3, #2
 8005b44:	3318      	adds	r3, #24
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005b4c:	4b34      	ldr	r3, [pc, #208]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	43db      	mvns	r3, r3
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005b70:	4a2b      	ldr	r2, [pc, #172]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005b76:	4b2a      	ldr	r3, [pc, #168]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4013      	ands	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8005b9a:	4a21      	ldr	r2, [pc, #132]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ba6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	43db      	mvns	r3, r3
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005bc6:	4a16      	ldr	r2, [pc, #88]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005bce:	4b14      	ldr	r3, [pc, #80]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bd4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8005c20 <HAL_GPIO_Init+0x29c>)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f47f aec1 	bne.w	8005994 <HAL_GPIO_Init+0x10>
  }
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	44022000 	.word	0x44022000
 8005c24:	002f7f7f 	.word	0x002f7f7f

08005c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	887b      	ldrh	r3, [r7, #2]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
 8005c44:	e001      	b.n	8005c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	807b      	strh	r3, [r7, #2]
 8005c64:	4613      	mov	r3, r2
 8005c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c68:	787b      	ldrb	r3, [r7, #1]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c6e:	887a      	ldrh	r2, [r7, #2]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c74:	e002      	b.n	8005c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c76:	887a      	ldrh	r2, [r7, #2]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c9a:	887a      	ldrh	r2, [r7, #2]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	041a      	lsls	r2, r3, #16
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	43d9      	mvns	r1, r3
 8005ca6:	887b      	ldrh	r3, [r7, #2]
 8005ca8:	400b      	ands	r3, r1
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	619a      	str	r2, [r3, #24]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d006      	beq.n	8005ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8005d04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f814 	bl	8005d08 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005ce0:	4b08      	ldr	r3, [pc, #32]	@ (8005d04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005cec:	4a05      	ldr	r2, [pc, #20]	@ (8005d04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe fd2d 	bl	8004754 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005cfa:	bf00      	nop
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	44022000 	.word	0x44022000

08005d08 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
 8005d3c:	e007      	b.n	8005d4e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005d3e:	4b07      	ldr	r3, [pc, #28]	@ (8005d5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f023 0204 	bic.w	r2, r3, #4
 8005d46:	4905      	ldr	r1, [pc, #20]	@ (8005d5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40030400 	.word	0x40030400

08005d60 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005d64:	4b05      	ldr	r3, [pc, #20]	@ (8005d7c <HAL_ICACHE_Enable+0x1c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a04      	ldr	r2, [pc, #16]	@ (8005d7c <HAL_ICACHE_Enable+0x1c>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	40030400 	.word	0x40030400

08005d80 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e037      	b.n	8005e06 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff f8ee 	bl	8004f8c <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f00a f94e 	bl	801005c <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	f00a f970 	bl	80100b0 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	f00a f985 	bl	80100ea <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0204 	orr.w	r2, r2, #4
 8005dee:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005df0:	4b07      	ldr	r3, [pc, #28]	@ (8005e10 <HAL_NAND_Init+0x90>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a06      	ldr	r2, [pc, #24]	@ (8005e10 <HAL_NAND_Init+0x90>)
 8005df6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005dfa:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	47000400 	.word	0x47000400

08005e14 <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d101      	bne.n	8005e2c <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e027      	b.n	8005e7c <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d120      	bne.n	8005e7a <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_NAND_Reset+0x32>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e01a      	b.n	8005e7c <HAL_NAND_Reset+0x68>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005e56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e5a:	60fb      	str	r3, [r7, #12]

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e62:	22ff      	movs	r2, #255	@ 0xff
 8005e64:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e000      	b.n	8005e7c <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1

}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08c      	sub	sp, #48	@ 0x30
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d101      	bne.n	8005eb2 <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e140      	b.n	8006134 <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	f040 8139 	bne.w	8006132 <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_NAND_Read_Page_8b+0x46>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e132      	b.n	8006134 <HAL_NAND_Read_Page_8b+0x2ac>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8005ede:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ee2:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	889b      	ldrh	r3, [r3, #4]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	885b      	ldrh	r3, [r3, #2]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	fb00 f303 	mul.w	r3, r0, r3
 8005efe:	4413      	add	r3, r2
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	440b      	add	r3, r1
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005f0c:	e0fa      	b.n	8006104 <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f18:	f3bf 8f4f 	dsb	sy
}
 8005f1c:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f26:	d848      	bhi.n	8005fba <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f30:	fb02 f303 	mul.w	r3, r2, r3
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f38:	d21a      	bcs.n	8005f70 <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f44:	f3bf 8f4f 	dsb	sy
}
 8005f48:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f56:	f3bf 8f4f 	dsb	sy
}
 8005f5a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	0a1a      	lsrs	r2, r3, #8
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f6a:	f3bf 8f4f 	dsb	sy
}
 8005f6e:	e07d      	b.n	800606c <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f7a:	f3bf 8f4f 	dsb	sy
}
 8005f7e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f8c:	f3bf 8f4f 	dsb	sy
}
 8005f90:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	0a1a      	lsrs	r2, r3, #8
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fa0:	f3bf 8f4f 	dsb	sy
}
 8005fa4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	0c1a      	lsrs	r2, r3, #16
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fb4:	f3bf 8f4f 	dsb	sy
}
 8005fb8:	e058      	b.n	800606c <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fca:	d222      	bcs.n	8006012 <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fd6:	f3bf 8f4f 	dsb	sy
}
 8005fda:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fe6:	f3bf 8f4f 	dsb	sy
}
 8005fea:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ff8:	f3bf 8f4f 	dsb	sy
}
 8005ffc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	0a1a      	lsrs	r2, r3, #8
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800600c:	f3bf 8f4f 	dsb	sy
}
 8006010:	e02c      	b.n	800606c <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800601c:	f3bf 8f4f 	dsb	sy
}
 8006020:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800602c:	f3bf 8f4f 	dsb	sy
}
 8006030:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800603e:	f3bf 8f4f 	dsb	sy
}
 8006042:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	0a1a      	lsrs	r2, r3, #8
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006052:	f3bf 8f4f 	dsb	sy
}
 8006056:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	0c1a      	lsrs	r2, r3, #16
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006066:	f3bf 8f4f 	dsb	sy
}
 800606a:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006072:	2230      	movs	r2, #48	@ 0x30
 8006074:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006076:	f3bf 8f4f 	dsb	sy
}
 800607a:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d123      	bne.n	80060ce <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006086:	f7ff fa17 	bl	80054b8 <HAL_GetTick>
 800608a:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 800608c:	e011      	b.n	80060b2 <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 800608e:	f7ff fa13 	bl	80054b8 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800609c:	d909      	bls.n	80060b2 <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2203      	movs	r2, #3
 80060a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e040      	b.n	8006134 <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fd13 	bl	8006ade <HAL_NAND_Read_Status>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b40      	cmp	r3, #64	@ 0x40
 80060bc:	d1e7      	bne.n	800608e <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c4:	2200      	movs	r2, #0
 80060c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80060c8:	f3bf 8f4f 	dsb	sy
}
 80060cc:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80060ce:	2300      	movs	r3, #0
 80060d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060d2:	e009      	b.n	80060e8 <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	781a      	ldrb	r2, [r3, #0]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	701a      	strb	r2, [r3, #0]
        buff++;
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	3301      	adds	r3, #1
 80060e0:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80060e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e4:	3301      	adds	r3, #1
 80060e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d3f0      	bcc.n	80060d4 <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 80060f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f4:	3301      	adds	r3, #1
 80060f6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	3301      	adds	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_NAND_Read_Page_8b+0x296>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006118:	429a      	cmp	r2, r3
 800611a:	f4ff aef8 	bcc.w	8005f0e <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
}
 8006134:	4618      	mov	r0, r3
 8006136:	3730      	adds	r7, #48	@ 0x30
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	@ 0x30
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d101      	bne.n	8006166 <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8006162:	2302      	movs	r3, #2
 8006164:	e13e      	b.n	80063e4 <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	f040 8137 	bne.w	80063e2 <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_NAND_Write_Page_8b+0x46>
 800617e:	2302      	movs	r3, #2
 8006180:	e130      	b.n	80063e4 <HAL_NAND_Write_Page_8b+0x2a8>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2202      	movs	r2, #2
 800618e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8006192:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006196:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	4619      	mov	r1, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	889b      	ldrh	r3, [r3, #4]
 80061a2:	461a      	mov	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	885b      	ldrh	r3, [r3, #2]
 80061a8:	4618      	mov	r0, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ae:	fb00 f303 	mul.w	r3, r0, r3
 80061b2:	4413      	add	r3, r2
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061b8:	fb02 f303 	mul.w	r3, r2, r3
 80061bc:	440b      	add	r3, r1
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80061c0:	e0f8      	b.n	80063b4 <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80061cc:	f3bf 8f4f 	dsb	sy
}
 80061d0:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061d8:	2280      	movs	r2, #128	@ 0x80
 80061da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80061dc:	f3bf 8f4f 	dsb	sy
}
 80061e0:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ea:	d848      	bhi.n	800627e <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061f4:	fb02 f303 	mul.w	r3, r2, r3
 80061f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061fc:	d21a      	bcs.n	8006234 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006208:	f3bf 8f4f 	dsb	sy
}
 800620c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800621a:	f3bf 8f4f 	dsb	sy
}
 800621e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006222:	0a1a      	lsrs	r2, r3, #8
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800622e:	f3bf 8f4f 	dsb	sy
}
 8006232:	e07d      	b.n	8006330 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800623e:	f3bf 8f4f 	dsb	sy
}
 8006242:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800624a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006250:	f3bf 8f4f 	dsb	sy
}
 8006254:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	0a1a      	lsrs	r2, r3, #8
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006264:	f3bf 8f4f 	dsb	sy
}
 8006268:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	0c1a      	lsrs	r2, r3, #16
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006278:	f3bf 8f4f 	dsb	sy
}
 800627c:	e058      	b.n	8006330 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800628e:	d222      	bcs.n	80062d6 <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800629a:	f3bf 8f4f 	dsb	sy
}
 800629e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80062aa:	f3bf 8f4f 	dsb	sy
}
 80062ae:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80062bc:	f3bf 8f4f 	dsb	sy
}
 80062c0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	0a1a      	lsrs	r2, r3, #8
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80062d0:	f3bf 8f4f 	dsb	sy
}
 80062d4:	e02c      	b.n	8006330 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80062e0:	f3bf 8f4f 	dsb	sy
}
 80062e4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80062f0:	f3bf 8f4f 	dsb	sy
}
 80062f4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006302:	f3bf 8f4f 	dsb	sy
}
 8006306:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	0a1a      	lsrs	r2, r3, #8
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006316:	f3bf 8f4f 	dsb	sy
}
 800631a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	0c1a      	lsrs	r2, r3, #16
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800632a:	f3bf 8f4f 	dsb	sy
}
 800632e:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8006330:	2300      	movs	r3, #0
 8006332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006334:	e00c      	b.n	8006350 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	701a      	strb	r2, [r3, #0]
        buff++;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3301      	adds	r3, #1
 8006342:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8006344:	f3bf 8f4f 	dsb	sy
}
 8006348:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 800634a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634c:	3301      	adds	r3, #1
 800634e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006356:	429a      	cmp	r2, r3
 8006358:	d3ed      	bcc.n	8006336 <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006360:	2210      	movs	r2, #16
 8006362:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006364:	f3bf 8f4f 	dsb	sy
}
 8006368:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 800636a:	f7ff f8a5 	bl	80054b8 <HAL_GetTick>
 800636e:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006370:	e011      	b.n	8006396 <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8006372:	f7ff f8a1 	bl	80054b8 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006380:	d909      	bls.n	8006396 <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2203      	movs	r2, #3
 8006386:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e026      	b.n	80063e4 <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fba1 	bl	8006ade <HAL_NAND_Read_Status>
 800639c:	4603      	mov	r3, r0
 800639e:	2b40      	cmp	r3, #64	@ 0x40
 80063a0:	d1e7      	bne.n	8006372 <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	3301      	adds	r3, #1
 80063a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	3301      	adds	r3, #1
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <HAL_NAND_Write_Page_8b+0x292>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
 80063c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c8:	429a      	cmp	r2, r3
 80063ca:	f4ff aefa 	bcc.w	80061c2 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e000      	b.n	80063e4 <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3730      	adds	r7, #48	@ 0x30
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_NAND_Read_SpareArea_8b>:
  * @param  NumSpareAreaToRead Number of spare area to read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                             uint8_t *pBuffer, uint32_t NumSpareAreaToRead)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08c      	sub	sp, #48	@ 0x30
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numsparearearead = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaToRead;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d101      	bne.n	8006416 <HAL_NAND_Read_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 8006412:	2302      	movs	r3, #2
 8006414:	e151      	b.n	80066ba <HAL_NAND_Read_SpareArea_8b+0x2ce>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b01      	cmp	r3, #1
 8006420:	f040 814a 	bne.w	80066b8 <HAL_NAND_Read_SpareArea_8b+0x2cc>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_NAND_Read_SpareArea_8b+0x46>
 800642e:	2302      	movs	r3, #2
 8006430:	e143      	b.n	80066ba <HAL_NAND_Read_SpareArea_8b+0x2ce>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8006442:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006446:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	4619      	mov	r1, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	889b      	ldrh	r3, [r3, #4]
 8006452:	461a      	mov	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	885b      	ldrh	r3, [r3, #2]
 8006458:	4618      	mov	r0, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645e:	fb00 f303 	mul.w	r3, r0, r3
 8006462:	4413      	add	r3, r2
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	440b      	add	r3, r1
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006474:	617b      	str	r3, [r7, #20]

    /* Spare area(s) read loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8006476:	e108      	b.n	800668a <HAL_NAND_Read_SpareArea_8b+0x29e>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006480:	d850      	bhi.n	8006524 <HAL_NAND_Read_SpareArea_8b+0x138>
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006488:	2250      	movs	r2, #80	@ 0x50
 800648a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800648c:	f3bf 8f4f 	dsb	sy
}
 8006490:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800649a:	fb02 f303 	mul.w	r3, r2, r3
 800649e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a2:	d21a      	bcs.n	80064da <HAL_NAND_Read_SpareArea_8b+0xee>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064ae:	f3bf 8f4f 	dsb	sy
}
 80064b2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064c0:	f3bf 8f4f 	dsb	sy
}
 80064c4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	0a1a      	lsrs	r2, r3, #8
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064d4:	f3bf 8f4f 	dsb	sy
}
 80064d8:	e08b      	b.n	80065f2 <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064e4:	f3bf 8f4f 	dsb	sy
}
 80064e8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064f6:	f3bf 8f4f 	dsb	sy
}
 80064fa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	0a1a      	lsrs	r2, r3, #8
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800650a:	f3bf 8f4f 	dsb	sy
}
 800650e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	0c1a      	lsrs	r2, r3, #16
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800651e:	f3bf 8f4f 	dsb	sy
}
 8006522:	e066      	b.n	80065f2 <HAL_NAND_Read_SpareArea_8b+0x206>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send read spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800652e:	f3bf 8f4f 	dsb	sy
}
 8006532:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800653c:	fb02 f303 	mul.w	r3, r2, r3
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006544:	d225      	bcs.n	8006592 <HAL_NAND_Read_SpareArea_8b+0x1a6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006552:	f3bf 8f4f 	dsb	sy
}
 8006556:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	0a1a      	lsrs	r2, r3, #8
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006566:	f3bf 8f4f 	dsb	sy
}
 800656a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006578:	f3bf 8f4f 	dsb	sy
}
 800657c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	0a1a      	lsrs	r2, r3, #8
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800658c:	f3bf 8f4f 	dsb	sy
}
 8006590:	e02f      	b.n	80065f2 <HAL_NAND_Read_SpareArea_8b+0x206>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800659e:	f3bf 8f4f 	dsb	sy
}
 80065a2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	0a1a      	lsrs	r2, r3, #8
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80065b2:	f3bf 8f4f 	dsb	sy
}
 80065b6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80065c4:	f3bf 8f4f 	dsb	sy
}
 80065c8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	0a1a      	lsrs	r2, r3, #8
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80065d8:	f3bf 8f4f 	dsb	sy
}
 80065dc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	0c1a      	lsrs	r2, r3, #16
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80065ec:	f3bf 8f4f 	dsb	sy
}
 80065f0:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f8:	2230      	movs	r2, #48	@ 0x30
 80065fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80065fc:	f3bf 8f4f 	dsb	sy
}
 8006600:	bf00      	nop
      __DSB();

      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d123      	bne.n	8006654 <HAL_NAND_Read_SpareArea_8b+0x268>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800660c:	f7fe ff54 	bl	80054b8 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006612:	e011      	b.n	8006638 <HAL_NAND_Read_SpareArea_8b+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8006614:	f7fe ff50 	bl	80054b8 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006622:	d909      	bls.n	8006638 <HAL_NAND_Read_SpareArea_8b+0x24c>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2203      	movs	r2, #3
 8006628:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e040      	b.n	80066ba <HAL_NAND_Read_SpareArea_8b+0x2ce>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fa50 	bl	8006ade <HAL_NAND_Read_Status>
 800663e:	4603      	mov	r3, r0
 8006640:	2b40      	cmp	r3, #64	@ 0x40
 8006642:	d1e7      	bne.n	8006614 <HAL_NAND_Read_SpareArea_8b+0x228>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800664e:	f3bf 8f4f 	dsb	sy
}
 8006652:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8006654:	2300      	movs	r3, #0
 8006656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006658:	e009      	b.n	800666e <HAL_NAND_Read_SpareArea_8b+0x282>
      {
        *buff = *(uint8_t *)deviceaddress;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	701a      	strb	r2, [r3, #0]
        buff++;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	3301      	adds	r3, #1
 8006666:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	3301      	adds	r3, #1
 800666c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006674:	429a      	cmp	r2, r3
 8006676:	d3f0      	bcc.n	800665a <HAL_NAND_Read_SpareArea_8b+0x26e>
      }

      /* Increment read spare areas number */
      numsparearearead++;
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667a:	3301      	adds	r3, #1
 800667c:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to read */
      nbspare--;
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	3b01      	subs	r3, #1
 8006682:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	3301      	adds	r3, #1
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d009      	beq.n	80066a4 <HAL_NAND_Read_SpareArea_8b+0x2b8>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006698:	fb02 f303 	mul.w	r3, r2, r3
 800669c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669e:	429a      	cmp	r2, r3
 80066a0:	f4ff aeea 	bcc.w	8006478 <HAL_NAND_Read_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_NAND_Read_SpareArea_8b+0x2ce>
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3730      	adds	r7, #48	@ 0x30
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_NAND_Write_SpareArea_8b>:
  * @param  NumSpareAreaTowrite   number of spare areas to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                              const uint8_t *pBuffer, uint32_t NumSpareAreaTowrite)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b08c      	sub	sp, #48	@ 0x30
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numspareareawritten = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t columnaddress;
  uint32_t nbspare = NumSpareAreaTowrite;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d101      	bne.n	80066ec <HAL_NAND_Write_SpareArea_8b+0x2a>
  {
    return HAL_BUSY;
 80066e8:	2302      	movs	r3, #2
 80066ea:	e157      	b.n	800699c <HAL_NAND_Write_SpareArea_8b+0x2da>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	f040 8150 	bne.w	800699a <HAL_NAND_Write_SpareArea_8b+0x2d8>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_NAND_Write_SpareArea_8b+0x46>
 8006704:	2302      	movs	r3, #2
 8006706:	e149      	b.n	800699c <HAL_NAND_Write_SpareArea_8b+0x2da>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8006718:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800671c:	61bb      	str	r3, [r7, #24]

    /* Page address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	4619      	mov	r1, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	889b      	ldrh	r3, [r3, #4]
 8006728:	461a      	mov	r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	885b      	ldrh	r3, [r3, #2]
 800672e:	4618      	mov	r0, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006734:	fb00 f303 	mul.w	r3, r0, r3
 8006738:	4413      	add	r3, r2
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	440b      	add	r3, r1
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Column in page address */
    columnaddress = COLUMN_ADDRESS(hnand);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	617b      	str	r3, [r7, #20]

    /* Spare area(s) write loop */
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800674c:	e10e      	b.n	800696c <HAL_NAND_Write_SpareArea_8b+0x2aa>
    {
      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006756:	d858      	bhi.n	800680a <HAL_NAND_Write_SpareArea_8b+0x148>
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800675e:	2250      	movs	r2, #80	@ 0x50
 8006760:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006762:	f3bf 8f4f 	dsb	sy
}
 8006766:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800676e:	2280      	movs	r2, #128	@ 0x80
 8006770:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006772:	f3bf 8f4f 	dsb	sy
}
 8006776:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006780:	fb02 f303 	mul.w	r3, r2, r3
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006788:	d21a      	bcs.n	80067c0 <HAL_NAND_Write_SpareArea_8b+0xfe>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006794:	f3bf 8f4f 	dsb	sy
}
 8006798:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80067a6:	f3bf 8f4f 	dsb	sy
}
 80067aa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80067ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ae:	0a1a      	lsrs	r2, r3, #8
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80067ba:	f3bf 8f4f 	dsb	sy
}
 80067be:	e093      	b.n	80068e8 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80067ca:	f3bf 8f4f 	dsb	sy
}
 80067ce:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80067dc:	f3bf 8f4f 	dsb	sy
}
 80067e0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	0a1a      	lsrs	r2, r3, #8
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80067f0:	f3bf 8f4f 	dsb	sy
}
 80067f4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	0c1a      	lsrs	r2, r3, #16
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006804:	f3bf 8f4f 	dsb	sy
}
 8006808:	e06e      	b.n	80068e8 <HAL_NAND_Write_SpareArea_8b+0x226>
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        /* Send write Spare area command sequence */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006814:	f3bf 8f4f 	dsb	sy
}
 8006818:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006820:	2280      	movs	r2, #128	@ 0x80
 8006822:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006824:	f3bf 8f4f 	dsb	sy
}
 8006828:	bf00      	nop
        __DSB();

        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006832:	fb02 f303 	mul.w	r3, r2, r3
 8006836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683a:	d225      	bcs.n	8006888 <HAL_NAND_Write_SpareArea_8b+0x1c6>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006848:	f3bf 8f4f 	dsb	sy
}
 800684c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	0a1a      	lsrs	r2, r3, #8
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800685c:	f3bf 8f4f 	dsb	sy
}
 8006860:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800686e:	f3bf 8f4f 	dsb	sy
}
 8006872:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	0a1a      	lsrs	r2, r3, #8
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006882:	f3bf 8f4f 	dsb	sy
}
 8006886:	e02f      	b.n	80068e8 <HAL_NAND_Write_SpareArea_8b+0x226>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006894:	f3bf 8f4f 	dsb	sy
}
 8006898:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	0a1a      	lsrs	r2, r3, #8
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80068a8:	f3bf 8f4f 	dsb	sy
}
 80068ac:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80068ba:	f3bf 8f4f 	dsb	sy
}
 80068be:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	0a1a      	lsrs	r2, r3, #8
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80068ce:	f3bf 8f4f 	dsb	sy
}
 80068d2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	0c1a      	lsrs	r2, r3, #16
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80068e2:	f3bf 8f4f 	dsb	sy
}
 80068e6:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 80068e8:	2300      	movs	r3, #0
 80068ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ec:	e00c      	b.n	8006908 <HAL_NAND_Write_SpareArea_8b+0x246>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	7812      	ldrb	r2, [r2, #0]
 80068f4:	701a      	strb	r2, [r3, #0]
        buff++;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	3301      	adds	r3, #1
 80068fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 80068fc:	f3bf 8f4f 	dsb	sy
}
 8006900:	bf00      	nop
      for (index = 0U; index < hnand->Config.SpareAreaSize; index++)
 8006902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006904:	3301      	adds	r3, #1
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800690e:	429a      	cmp	r2, r3
 8006910:	d3ed      	bcc.n	80068ee <HAL_NAND_Write_SpareArea_8b+0x22c>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006918:	2210      	movs	r2, #16
 800691a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800691c:	f3bf 8f4f 	dsb	sy
}
 8006920:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8006922:	f7fe fdc9 	bl	80054b8 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006928:	e011      	b.n	800694e <HAL_NAND_Write_SpareArea_8b+0x28c>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 800692a:	f7fe fdc5 	bl	80054b8 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006938:	d909      	bls.n	800694e <HAL_NAND_Write_SpareArea_8b+0x28c>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2203      	movs	r2, #3
 800693e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e026      	b.n	800699c <HAL_NAND_Write_SpareArea_8b+0x2da>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f8c5 	bl	8006ade <HAL_NAND_Read_Status>
 8006954:	4603      	mov	r3, r0
 8006956:	2b40      	cmp	r3, #64	@ 0x40
 8006958:	d1e7      	bne.n	800692a <HAL_NAND_Write_SpareArea_8b+0x268>
        }
      }

      /* Increment written spare areas number */
      numspareareawritten++;
 800695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695c:	3301      	adds	r3, #1
 800695e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement spare areas to write */
      nbspare--;
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	3b01      	subs	r3, #1
 8006964:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	3301      	adds	r3, #1
 800696a:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbspare != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <HAL_NAND_Write_SpareArea_8b+0x2c4>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800697a:	fb02 f303 	mul.w	r3, r2, r3
 800697e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006980:	429a      	cmp	r2, r3
 8006982:	f4ff aee4 	bcc.w	800674e <HAL_NAND_Write_SpareArea_8b+0x8c>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e000      	b.n	800699c <HAL_NAND_Write_SpareArea_8b+0x2da>
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
}
 800699c:	4618      	mov	r0, r3
 800699e:	3730      	adds	r7, #48	@ 0x30
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d101      	bne.n	80069be <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 80069ba:	2302      	movs	r3, #2
 80069bc:	e089      	b.n	8006ad2 <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	f040 8082 	bne.w	8006ad0 <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_NAND_Erase_Block+0x36>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e07b      	b.n	8006ad2 <HAL_NAND_Erase_Block+0x12e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80069ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80069ee:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069f6:	2260      	movs	r2, #96	@ 0x60
 80069f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80069fa:	f3bf 8f4f 	dsb	sy
}
 80069fe:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	889b      	ldrh	r3, [r3, #4]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	4618      	mov	r0, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a16:	fb00 f303 	mul.w	r3, r0, r3
 8006a1a:	440b      	add	r3, r1
 8006a1c:	b2d9      	uxtb	r1, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	fb11 f303 	smulbb	r3, r1, r3
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006a30:	4413      	add	r3, r2
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a36:	f3bf 8f4f 	dsb	sy
}
 8006a3a:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	4619      	mov	r1, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	889b      	ldrh	r3, [r3, #4]
 8006a46:	461a      	mov	r2, r3
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	885b      	ldrh	r3, [r3, #2]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a52:	fb00 f303 	mul.w	r3, r0, r3
 8006a56:	4413      	add	r3, r2
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a5c:	fb02 f303 	mul.w	r3, r2, r3
 8006a60:	440b      	add	r3, r1
 8006a62:	0a1a      	lsrs	r2, r3, #8
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a6e:	f3bf 8f4f 	dsb	sy
}
 8006a72:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	889b      	ldrh	r3, [r3, #4]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	885b      	ldrh	r3, [r3, #2]
 8006a84:	4618      	mov	r0, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8a:	fb00 f303 	mul.w	r3, r0, r3
 8006a8e:	4413      	add	r3, r2
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	440b      	add	r3, r1
 8006a9a:	0c1a      	lsrs	r2, r3, #16
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006aa6:	f3bf 8f4f 	dsb	sy
}
 8006aaa:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab2:	22d0      	movs	r2, #208	@ 0xd0
 8006ab4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ab6:	f3bf 8f4f 	dsb	sy
}
 8006aba:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8006ae6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af2:	2270      	movs	r2, #112	@ 0x70
 8006af4:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e007      	b.n	8006b1c <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8006b16:	2340      	movs	r3, #64	@ 0x40
 8006b18:	e000      	b.n	8006b1c <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8006b1a:	2300      	movs	r3, #0
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d102      	bne.n	8006b3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f000 bc28 	b.w	800738c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b3c:	4b94      	ldr	r3, [pc, #592]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f003 0318 	and.w	r3, r3, #24
 8006b44:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8006b46:	4b92      	ldr	r3, [pc, #584]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d05b      	beq.n	8006c14 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d005      	beq.n	8006b6e <HAL_RCC_OscConfig+0x46>
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	2b18      	cmp	r3, #24
 8006b66:	d114      	bne.n	8006b92 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d111      	bne.n	8006b92 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f000 bc08 	b.w	800738c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006b7c:	4b84      	ldr	r3, [pc, #528]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	041b      	lsls	r3, r3, #16
 8006b8a:	4981      	ldr	r1, [pc, #516]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006b90:	e040      	b.n	8006c14 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d023      	beq.n	8006be2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a7c      	ldr	r2, [pc, #496]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba6:	f7fe fc87 	bl	80054b8 <HAL_GetTick>
 8006baa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006bae:	f7fe fc83 	bl	80054b8 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e3e5      	b.n	800738c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006bc0:	4b73      	ldr	r3, [pc, #460]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0f0      	beq.n	8006bae <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006bcc:	4b70      	ldr	r3, [pc, #448]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	496d      	ldr	r1, [pc, #436]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	618b      	str	r3, [r1, #24]
 8006be0:	e018      	b.n	8006c14 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006be2:	4b6b      	ldr	r3, [pc, #428]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a6a      	ldr	r2, [pc, #424]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bee:	f7fe fc63 	bl	80054b8 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006bf6:	f7fe fc5f 	bl	80054b8 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e3c1      	b.n	800738c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006c08:	4b61      	ldr	r3, [pc, #388]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f0      	bne.n	8006bf6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80a0 	beq.w	8006d62 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_OscConfig+0x10c>
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	2b18      	cmp	r3, #24
 8006c2c:	d109      	bne.n	8006c42 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d106      	bne.n	8006c42 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f040 8092 	bne.w	8006d62 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e3a4      	b.n	800738c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4a:	d106      	bne.n	8006c5a <HAL_RCC_OscConfig+0x132>
 8006c4c:	4b50      	ldr	r3, [pc, #320]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a4f      	ldr	r2, [pc, #316]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e058      	b.n	8006d0c <HAL_RCC_OscConfig+0x1e4>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d112      	bne.n	8006c88 <HAL_RCC_OscConfig+0x160>
 8006c62:	4b4b      	ldr	r3, [pc, #300]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a4a      	ldr	r2, [pc, #296]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	4b48      	ldr	r3, [pc, #288]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a47      	ldr	r2, [pc, #284]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4b45      	ldr	r3, [pc, #276]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a44      	ldr	r2, [pc, #272]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e041      	b.n	8006d0c <HAL_RCC_OscConfig+0x1e4>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c90:	d112      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x190>
 8006c92:	4b3f      	ldr	r3, [pc, #252]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a3e      	ldr	r2, [pc, #248]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a3b      	ldr	r2, [pc, #236]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006ca4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	4b39      	ldr	r3, [pc, #228]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a38      	ldr	r2, [pc, #224]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e029      	b.n	8006d0c <HAL_RCC_OscConfig+0x1e4>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006cc0:	d112      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x1c0>
 8006cc2:	4b33      	ldr	r3, [pc, #204]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a32      	ldr	r2, [pc, #200]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4b30      	ldr	r3, [pc, #192]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2f      	ldr	r2, [pc, #188]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	4b2d      	ldr	r3, [pc, #180]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2c      	ldr	r2, [pc, #176]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	e011      	b.n	8006d0c <HAL_RCC_OscConfig+0x1e4>
 8006ce8:	4b29      	ldr	r3, [pc, #164]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a28      	ldr	r2, [pc, #160]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	4b26      	ldr	r3, [pc, #152]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a25      	ldr	r2, [pc, #148]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	4b23      	ldr	r3, [pc, #140]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a22      	ldr	r2, [pc, #136]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006d06:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d013      	beq.n	8006d3c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d14:	f7fe fbd0 	bl	80054b8 <HAL_GetTick>
 8006d18:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006d1c:	f7fe fbcc 	bl	80054b8 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b64      	cmp	r3, #100	@ 0x64
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e32e      	b.n	800738c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d2e:	4b18      	ldr	r3, [pc, #96]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0x1f4>
 8006d3a:	e012      	b.n	8006d62 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fe fbbc 	bl	80054b8 <HAL_GetTick>
 8006d40:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006d44:	f7fe fbb8 	bl	80054b8 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b64      	cmp	r3, #100	@ 0x64
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e31a      	b.n	800738c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d56:	4b0e      	ldr	r3, [pc, #56]	@ (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 809a 	beq.w	8006ea4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_RCC_OscConfig+0x25a>
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	2b18      	cmp	r3, #24
 8006d7a:	d149      	bne.n	8006e10 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d146      	bne.n	8006e10 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e2fe      	b.n	800738c <HAL_RCC_OscConfig+0x864>
 8006d8e:	bf00      	nop
 8006d90:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d11c      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8006d9a:	4b9a      	ldr	r3, [pc, #616]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0218 	and.w	r2, r3, #24
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d014      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006daa:	4b96      	ldr	r3, [pc, #600]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f023 0218 	bic.w	r2, r3, #24
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	4993      	ldr	r1, [pc, #588]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8006dbc:	f000 fdd0 	bl	8007960 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006dc0:	4b91      	ldr	r3, [pc, #580]	@ (8007008 <HAL_RCC_OscConfig+0x4e0>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe faed 	bl	80053a4 <HAL_InitTick>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e2db      	b.n	800738c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fe fb70 	bl	80054b8 <HAL_GetTick>
 8006dd8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006ddc:	f7fe fb6c 	bl	80054b8 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e2ce      	b.n	800738c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dee:	4b85      	ldr	r3, [pc, #532]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f0      	beq.n	8006ddc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006dfa:	4b82      	ldr	r3, [pc, #520]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	041b      	lsls	r3, r3, #16
 8006e08:	497e      	ldr	r1, [pc, #504]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006e0e:	e049      	b.n	8006ea4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d02c      	beq.n	8006e72 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006e18:	4b7a      	ldr	r3, [pc, #488]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f023 0218 	bic.w	r2, r3, #24
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	4977      	ldr	r1, [pc, #476]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8006e2a:	4b76      	ldr	r3, [pc, #472]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a75      	ldr	r2, [pc, #468]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e30:	f043 0301 	orr.w	r3, r3, #1
 8006e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e36:	f7fe fb3f 	bl	80054b8 <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006e3e:	f7fe fb3b 	bl	80054b8 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e29d      	b.n	800738c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e50:	4b6c      	ldr	r3, [pc, #432]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0f0      	beq.n	8006e3e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006e5c:	4b69      	ldr	r3, [pc, #420]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	041b      	lsls	r3, r3, #16
 8006e6a:	4966      	ldr	r1, [pc, #408]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	610b      	str	r3, [r1, #16]
 8006e70:	e018      	b.n	8006ea4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e72:	4b64      	ldr	r3, [pc, #400]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a63      	ldr	r2, [pc, #396]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7e:	f7fe fb1b 	bl	80054b8 <HAL_GetTick>
 8006e82:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006e86:	f7fe fb17 	bl	80054b8 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e279      	b.n	800738c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e98:	4b5a      	ldr	r3, [pc, #360]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f0      	bne.n	8006e86 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d03c      	beq.n	8006f2a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01c      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eb8:	4b52      	ldr	r3, [pc, #328]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ebe:	4a51      	ldr	r2, [pc, #324]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006ec0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ec4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec8:	f7fe faf6 	bl	80054b8 <HAL_GetTick>
 8006ecc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006ed0:	f7fe faf2 	bl	80054b8 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e254      	b.n	800738c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006ee2:	4b48      	ldr	r3, [pc, #288]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0ef      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x3a8>
 8006ef0:	e01b      	b.n	8006f2a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ef2:	4b44      	ldr	r3, [pc, #272]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ef8:	4a42      	ldr	r2, [pc, #264]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006efa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006efe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f02:	f7fe fad9 	bl	80054b8 <HAL_GetTick>
 8006f06:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006f08:	e008      	b.n	8006f1c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006f0a:	f7fe fad5 	bl	80054b8 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e237      	b.n	800738c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006f1c:	4b39      	ldr	r3, [pc, #228]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1ef      	bne.n	8006f0a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 80d2 	beq.w	80070dc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006f38:	4b34      	ldr	r3, [pc, #208]	@ (800700c <HAL_RCC_OscConfig+0x4e4>)
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d118      	bne.n	8006f76 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006f44:	4b31      	ldr	r3, [pc, #196]	@ (800700c <HAL_RCC_OscConfig+0x4e4>)
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	4a30      	ldr	r2, [pc, #192]	@ (800700c <HAL_RCC_OscConfig+0x4e4>)
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f50:	f7fe fab2 	bl	80054b8 <HAL_GetTick>
 8006f54:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f58:	f7fe faae 	bl	80054b8 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e210      	b.n	800738c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006f6a:	4b28      	ldr	r3, [pc, #160]	@ (800700c <HAL_RCC_OscConfig+0x4e4>)
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0f0      	beq.n	8006f58 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d108      	bne.n	8006f90 <HAL_RCC_OscConfig+0x468>
 8006f7e:	4b21      	ldr	r3, [pc, #132]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f84:	4a1f      	ldr	r2, [pc, #124]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006f8e:	e074      	b.n	800707a <HAL_RCC_OscConfig+0x552>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d118      	bne.n	8006fca <HAL_RCC_OscConfig+0x4a2>
 8006f98:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f9e:	4a19      	ldr	r2, [pc, #100]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006fa8:	4b16      	ldr	r3, [pc, #88]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fae:	4a15      	ldr	r2, [pc, #84]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006fb8:	4b12      	ldr	r3, [pc, #72]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fbe:	4a11      	ldr	r2, [pc, #68]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006fc0:	f023 0304 	bic.w	r3, r3, #4
 8006fc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006fc8:	e057      	b.n	800707a <HAL_RCC_OscConfig+0x552>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d11e      	bne.n	8007010 <HAL_RCC_OscConfig+0x4e8>
 8006fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006fda:	f043 0304 	orr.w	r3, r3, #4
 8006fde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006fe2:	4b08      	ldr	r3, [pc, #32]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fe8:	4a06      	ldr	r2, [pc, #24]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006ff2:	4b04      	ldr	r3, [pc, #16]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ff8:	4a02      	ldr	r2, [pc, #8]	@ (8007004 <HAL_RCC_OscConfig+0x4dc>)
 8006ffa:	f043 0301 	orr.w	r3, r3, #1
 8006ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007002:	e03a      	b.n	800707a <HAL_RCC_OscConfig+0x552>
 8007004:	44020c00 	.word	0x44020c00
 8007008:	200000ac 	.word	0x200000ac
 800700c:	44020800 	.word	0x44020800
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b85      	cmp	r3, #133	@ 0x85
 8007016:	d118      	bne.n	800704a <HAL_RCC_OscConfig+0x522>
 8007018:	4ba2      	ldr	r3, [pc, #648]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800701a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800701e:	4aa1      	ldr	r2, [pc, #644]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007020:	f043 0304 	orr.w	r3, r3, #4
 8007024:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007028:	4b9e      	ldr	r3, [pc, #632]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800702a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800702e:	4a9d      	ldr	r2, [pc, #628]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007034:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007038:	4b9a      	ldr	r3, [pc, #616]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800703a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800703e:	4a99      	ldr	r2, [pc, #612]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007048:	e017      	b.n	800707a <HAL_RCC_OscConfig+0x552>
 800704a:	4b96      	ldr	r3, [pc, #600]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800704c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007050:	4a94      	ldr	r2, [pc, #592]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800705a:	4b92      	ldr	r3, [pc, #584]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800705c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007060:	4a90      	ldr	r2, [pc, #576]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007062:	f023 0304 	bic.w	r3, r3, #4
 8007066:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800706a:	4b8e      	ldr	r3, [pc, #568]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800706c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007070:	4a8c      	ldr	r2, [pc, #560]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007076:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d016      	beq.n	80070b0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007082:	f7fe fa19 	bl	80054b8 <HAL_GetTick>
 8007086:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007088:	e00a      	b.n	80070a0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800708a:	f7fe fa15 	bl	80054b8 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007098:	4293      	cmp	r3, r2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e175      	b.n	800738c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070a0:	4b80      	ldr	r3, [pc, #512]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 80070a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0ed      	beq.n	800708a <HAL_RCC_OscConfig+0x562>
 80070ae:	e015      	b.n	80070dc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b0:	f7fe fa02 	bl	80054b8 <HAL_GetTick>
 80070b4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070b6:	e00a      	b.n	80070ce <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b8:	f7fe f9fe 	bl	80054b8 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e15e      	b.n	800738c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070ce:	4b75      	ldr	r3, [pc, #468]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 80070d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1ed      	bne.n	80070b8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d036      	beq.n	8007156 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d019      	beq.n	8007124 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070f0:	4b6c      	ldr	r3, [pc, #432]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a6b      	ldr	r2, [pc, #428]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 80070f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80070fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fc:	f7fe f9dc 	bl	80054b8 <HAL_GetTick>
 8007100:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007104:	f7fe f9d8 	bl	80054b8 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e13a      	b.n	800738c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007116:	4b63      	ldr	r3, [pc, #396]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f0      	beq.n	8007104 <HAL_RCC_OscConfig+0x5dc>
 8007122:	e018      	b.n	8007156 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007124:	4b5f      	ldr	r3, [pc, #380]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a5e      	ldr	r2, [pc, #376]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800712a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800712e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007130:	f7fe f9c2 	bl	80054b8 <HAL_GetTick>
 8007134:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007138:	f7fe f9be 	bl	80054b8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e120      	b.n	800738c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800714a:	4b56      	ldr	r3, [pc, #344]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8115 	beq.w	800738a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	2b18      	cmp	r3, #24
 8007164:	f000 80af 	beq.w	80072c6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	2b02      	cmp	r3, #2
 800716e:	f040 8086 	bne.w	800727e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007172:	4b4c      	ldr	r3, [pc, #304]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a4b      	ldr	r2, [pc, #300]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007178:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800717c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717e:	f7fe f99b 	bl	80054b8 <HAL_GetTick>
 8007182:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007184:	e008      	b.n	8007198 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007186:	f7fe f997 	bl	80054b8 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d901      	bls.n	8007198 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e0f9      	b.n	800738c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007198:	4b42      	ldr	r3, [pc, #264]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1f0      	bne.n	8007186 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80071a4:	4b3f      	ldr	r3, [pc, #252]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 80071a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80071ac:	f023 0303 	bic.w	r3, r3, #3
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80071b8:	0212      	lsls	r2, r2, #8
 80071ba:	430a      	orrs	r2, r1
 80071bc:	4939      	ldr	r1, [pc, #228]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	628b      	str	r3, [r1, #40]	@ 0x28
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c6:	3b01      	subs	r3, #1
 80071c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d0:	3b01      	subs	r3, #1
 80071d2:	025b      	lsls	r3, r3, #9
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071dc:	3b01      	subs	r3, #1
 80071de:	041b      	lsls	r3, r3, #16
 80071e0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	3b01      	subs	r3, #1
 80071ec:	061b      	lsls	r3, r3, #24
 80071ee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071f2:	492c      	ldr	r1, [pc, #176]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80071f8:	4b2a      	ldr	r3, [pc, #168]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 80071fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fc:	4a29      	ldr	r2, [pc, #164]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 80071fe:	f023 0310 	bic.w	r3, r3, #16
 8007202:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007208:	4a26      	ldr	r2, [pc, #152]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800720e:	4b25      	ldr	r3, [pc, #148]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	4a24      	ldr	r2, [pc, #144]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007214:	f043 0310 	orr.w	r3, r3, #16
 8007218:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800721a:	4b22      	ldr	r3, [pc, #136]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721e:	f023 020c 	bic.w	r2, r3, #12
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007226:	491f      	ldr	r1, [pc, #124]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007228:	4313      	orrs	r3, r2
 800722a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800722c:	4b1d      	ldr	r3, [pc, #116]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800722e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007230:	f023 0220 	bic.w	r2, r3, #32
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007238:	491a      	ldr	r1, [pc, #104]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800723a:	4313      	orrs	r3, r2
 800723c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800723e:	4b19      	ldr	r3, [pc, #100]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007242:	4a18      	ldr	r2, [pc, #96]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007248:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800724a:	4b16      	ldr	r3, [pc, #88]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a15      	ldr	r2, [pc, #84]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007250:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007256:	f7fe f92f 	bl	80054b8 <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800725c:	e008      	b.n	8007270 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800725e:	f7fe f92b 	bl	80054b8 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d901      	bls.n	8007270 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e08d      	b.n	800738c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0f0      	beq.n	800725e <HAL_RCC_OscConfig+0x736>
 800727c:	e085      	b.n	800738a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800727e:	4b09      	ldr	r3, [pc, #36]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a08      	ldr	r2, [pc, #32]	@ (80072a4 <HAL_RCC_OscConfig+0x77c>)
 8007284:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728a:	f7fe f915 	bl	80054b8 <HAL_GetTick>
 800728e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007290:	e00a      	b.n	80072a8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007292:	f7fe f911 	bl	80054b8 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d903      	bls.n	80072a8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e073      	b.n	800738c <HAL_RCC_OscConfig+0x864>
 80072a4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80072a8:	4b3a      	ldr	r3, [pc, #232]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1ee      	bne.n	8007292 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80072b4:	4b37      	ldr	r3, [pc, #220]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 80072b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b8:	4a36      	ldr	r2, [pc, #216]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 80072ba:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	6293      	str	r3, [r2, #40]	@ 0x28
 80072c4:	e061      	b.n	800738a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80072c6:	4b33      	ldr	r3, [pc, #204]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 80072c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072cc:	4b31      	ldr	r3, [pc, #196]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 80072ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d031      	beq.n	800733e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f003 0203 	and.w	r2, r3, #3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d12a      	bne.n	800733e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	0a1b      	lsrs	r3, r3, #8
 80072ec:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d122      	bne.n	800733e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007302:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007304:	429a      	cmp	r2, r3
 8007306:	d11a      	bne.n	800733e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	0a5b      	lsrs	r3, r3, #9
 800730c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007316:	429a      	cmp	r2, r3
 8007318:	d111      	bne.n	800733e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	0c1b      	lsrs	r3, r3, #16
 800731e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007326:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007328:	429a      	cmp	r2, r3
 800732a:	d108      	bne.n	800733e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	0e1b      	lsrs	r3, r3, #24
 8007330:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007338:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800733a:	429a      	cmp	r2, r3
 800733c:	d001      	beq.n	8007342 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e024      	b.n	800738c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007342:	4b14      	ldr	r3, [pc, #80]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	08db      	lsrs	r3, r3, #3
 8007348:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007350:	429a      	cmp	r2, r3
 8007352:	d01a      	beq.n	800738a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007354:	4b0f      	ldr	r3, [pc, #60]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 8007356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007358:	4a0e      	ldr	r2, [pc, #56]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 800735a:	f023 0310 	bic.w	r3, r3, #16
 800735e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fe f8aa 	bl	80054b8 <HAL_GetTick>
 8007364:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8007366:	bf00      	nop
 8007368:	f7fe f8a6 	bl	80054b8 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	4293      	cmp	r3, r2
 8007372:	d0f9      	beq.n	8007368 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007378:	4a06      	ldr	r2, [pc, #24]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800737e:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007382:	4a04      	ldr	r2, [pc, #16]	@ (8007394 <HAL_RCC_OscConfig+0x86c>)
 8007384:	f043 0310 	orr.w	r3, r3, #16
 8007388:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	44020c00 	.word	0x44020c00

08007398 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e19e      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073ac:	4b83      	ldr	r3, [pc, #524]	@ (80075bc <HAL_RCC_ClockConfig+0x224>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d910      	bls.n	80073dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ba:	4b80      	ldr	r3, [pc, #512]	@ (80075bc <HAL_RCC_ClockConfig+0x224>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f023 020f 	bic.w	r2, r3, #15
 80073c2:	497e      	ldr	r1, [pc, #504]	@ (80075bc <HAL_RCC_ClockConfig+0x224>)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ca:	4b7c      	ldr	r3, [pc, #496]	@ (80075bc <HAL_RCC_ClockConfig+0x224>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d001      	beq.n	80073dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e186      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d012      	beq.n	800740e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695a      	ldr	r2, [r3, #20]
 80073ec:	4b74      	ldr	r3, [pc, #464]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	0a1b      	lsrs	r3, r3, #8
 80073f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d909      	bls.n	800740e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80073fa:	4b71      	ldr	r3, [pc, #452]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	496d      	ldr	r1, [pc, #436]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 800740a:	4313      	orrs	r3, r2
 800740c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d012      	beq.n	8007440 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	4b68      	ldr	r3, [pc, #416]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	091b      	lsrs	r3, r3, #4
 8007424:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007428:	429a      	cmp	r2, r3
 800742a:	d909      	bls.n	8007440 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800742c:	4b64      	ldr	r3, [pc, #400]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	4961      	ldr	r1, [pc, #388]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 800743c:	4313      	orrs	r3, r2
 800743e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d010      	beq.n	800746e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	4b5b      	ldr	r3, [pc, #364]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007458:	429a      	cmp	r2, r3
 800745a:	d908      	bls.n	800746e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800745c:	4b58      	ldr	r3, [pc, #352]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	4955      	ldr	r1, [pc, #340]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 800746a:	4313      	orrs	r3, r2
 800746c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d010      	beq.n	800749c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	4b50      	ldr	r3, [pc, #320]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	429a      	cmp	r2, r3
 8007488:	d908      	bls.n	800749c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800748a:	4b4d      	ldr	r3, [pc, #308]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f023 020f 	bic.w	r2, r3, #15
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	494a      	ldr	r1, [pc, #296]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 8007498:	4313      	orrs	r3, r2
 800749a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8093 	beq.w	80075d0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d107      	bne.n	80074c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80074b2:	4b43      	ldr	r3, [pc, #268]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d121      	bne.n	8007502 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e113      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d107      	bne.n	80074da <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074ca:	4b3d      	ldr	r3, [pc, #244]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d115      	bne.n	8007502 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e107      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d107      	bne.n	80074f2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80074e2:	4b37      	ldr	r3, [pc, #220]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e0fb      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074f2:	4b33      	ldr	r3, [pc, #204]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e0f3      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8007502:	4b2f      	ldr	r3, [pc, #188]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f023 0203 	bic.w	r2, r3, #3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	492c      	ldr	r1, [pc, #176]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 8007510:	4313      	orrs	r3, r2
 8007512:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007514:	f7fd ffd0 	bl	80054b8 <HAL_GetTick>
 8007518:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b03      	cmp	r3, #3
 8007520:	d112      	bne.n	8007548 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007522:	e00a      	b.n	800753a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007524:	f7fd ffc8 	bl	80054b8 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007532:	4293      	cmp	r3, r2
 8007534:	d901      	bls.n	800753a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e0d7      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800753a:	4b21      	ldr	r3, [pc, #132]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f003 0318 	and.w	r3, r3, #24
 8007542:	2b18      	cmp	r3, #24
 8007544:	d1ee      	bne.n	8007524 <HAL_RCC_ClockConfig+0x18c>
 8007546:	e043      	b.n	80075d0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d112      	bne.n	8007576 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007550:	e00a      	b.n	8007568 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007552:	f7fd ffb1 	bl	80054b8 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007560:	4293      	cmp	r3, r2
 8007562:	d901      	bls.n	8007568 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e0c0      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007568:	4b15      	ldr	r3, [pc, #84]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f003 0318 	and.w	r3, r3, #24
 8007570:	2b10      	cmp	r3, #16
 8007572:	d1ee      	bne.n	8007552 <HAL_RCC_ClockConfig+0x1ba>
 8007574:	e02c      	b.n	80075d0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d122      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800757e:	e00a      	b.n	8007596 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007580:	f7fd ff9a 	bl	80054b8 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800758e:	4293      	cmp	r3, r2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e0a9      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007596:	4b0a      	ldr	r3, [pc, #40]	@ (80075c0 <HAL_RCC_ClockConfig+0x228>)
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f003 0318 	and.w	r3, r3, #24
 800759e:	2b08      	cmp	r3, #8
 80075a0:	d1ee      	bne.n	8007580 <HAL_RCC_ClockConfig+0x1e8>
 80075a2:	e015      	b.n	80075d0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80075a4:	f7fd ff88 	bl	80054b8 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d906      	bls.n	80075c4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e097      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
 80075ba:	bf00      	nop
 80075bc:	40022000 	.word	0x40022000
 80075c0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80075c4:	4b4b      	ldr	r3, [pc, #300]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	f003 0318 	and.w	r3, r3, #24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e9      	bne.n	80075a4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d010      	beq.n	80075fe <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	4b44      	ldr	r3, [pc, #272]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d208      	bcs.n	80075fe <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80075ec:	4b41      	ldr	r3, [pc, #260]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	f023 020f 	bic.w	r2, r3, #15
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	493e      	ldr	r1, [pc, #248]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075fe:	4b3e      	ldr	r3, [pc, #248]	@ (80076f8 <HAL_RCC_ClockConfig+0x360>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d210      	bcs.n	800762e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800760c:	4b3a      	ldr	r3, [pc, #232]	@ (80076f8 <HAL_RCC_ClockConfig+0x360>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f023 020f 	bic.w	r2, r3, #15
 8007614:	4938      	ldr	r1, [pc, #224]	@ (80076f8 <HAL_RCC_ClockConfig+0x360>)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	4313      	orrs	r3, r2
 800761a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800761c:	4b36      	ldr	r3, [pc, #216]	@ (80076f8 <HAL_RCC_ClockConfig+0x360>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 030f 	and.w	r3, r3, #15
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d001      	beq.n	800762e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e05d      	b.n	80076ea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	4b2d      	ldr	r3, [pc, #180]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007646:	429a      	cmp	r2, r3
 8007648:	d208      	bcs.n	800765c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800764a:	4b2a      	ldr	r3, [pc, #168]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	4927      	ldr	r1, [pc, #156]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 8007658:	4313      	orrs	r3, r2
 800765a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d012      	beq.n	800768e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	4b21      	ldr	r3, [pc, #132]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	091b      	lsrs	r3, r3, #4
 8007672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007676:	429a      	cmp	r2, r3
 8007678:	d209      	bcs.n	800768e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800767a:	4b1e      	ldr	r3, [pc, #120]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	491a      	ldr	r1, [pc, #104]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 800768a:	4313      	orrs	r3, r2
 800768c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	2b00      	cmp	r3, #0
 8007698:	d012      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	4b15      	ldr	r3, [pc, #84]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	0a1b      	lsrs	r3, r3, #8
 80076a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d209      	bcs.n	80076c0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80076ac:	4b11      	ldr	r3, [pc, #68]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	490e      	ldr	r1, [pc, #56]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80076c0:	f000 f822 	bl	8007708 <HAL_RCC_GetSysClockFreq>
 80076c4:	4602      	mov	r2, r0
 80076c6:	4b0b      	ldr	r3, [pc, #44]	@ (80076f4 <HAL_RCC_ClockConfig+0x35c>)
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	490b      	ldr	r1, [pc, #44]	@ (80076fc <HAL_RCC_ClockConfig+0x364>)
 80076d0:	5ccb      	ldrb	r3, [r1, r3]
 80076d2:	fa22 f303 	lsr.w	r3, r2, r3
 80076d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007700 <HAL_RCC_ClockConfig+0x368>)
 80076d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80076da:	4b0a      	ldr	r3, [pc, #40]	@ (8007704 <HAL_RCC_ClockConfig+0x36c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fd fe60 	bl	80053a4 <HAL_InitTick>
 80076e4:	4603      	mov	r3, r0
 80076e6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80076e8:	7afb      	ldrb	r3, [r7, #11]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	44020c00 	.word	0x44020c00
 80076f8:	40022000 	.word	0x40022000
 80076fc:	080132e0 	.word	0x080132e0
 8007700:	200000a8 	.word	0x200000a8
 8007704:	200000ac 	.word	0x200000ac

08007708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007708:	b480      	push	{r7}
 800770a:	b089      	sub	sp, #36	@ 0x24
 800770c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800770e:	4b8c      	ldr	r3, [pc, #560]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f003 0318 	and.w	r3, r3, #24
 8007716:	2b08      	cmp	r3, #8
 8007718:	d102      	bne.n	8007720 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800771a:	4b8a      	ldr	r3, [pc, #552]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x23c>)
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	e107      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007720:	4b87      	ldr	r3, [pc, #540]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	f003 0318 	and.w	r3, r3, #24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d112      	bne.n	8007752 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800772c:	4b84      	ldr	r3, [pc, #528]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d009      	beq.n	800774c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007738:	4b81      	ldr	r3, [pc, #516]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	08db      	lsrs	r3, r3, #3
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	4a81      	ldr	r2, [pc, #516]	@ (8007948 <HAL_RCC_GetSysClockFreq+0x240>)
 8007744:	fa22 f303 	lsr.w	r3, r2, r3
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	e0f1      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800774c:	4b7e      	ldr	r3, [pc, #504]	@ (8007948 <HAL_RCC_GetSysClockFreq+0x240>)
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	e0ee      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007752:	4b7b      	ldr	r3, [pc, #492]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f003 0318 	and.w	r3, r3, #24
 800775a:	2b10      	cmp	r3, #16
 800775c:	d102      	bne.n	8007764 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800775e:	4b7b      	ldr	r3, [pc, #492]	@ (800794c <HAL_RCC_GetSysClockFreq+0x244>)
 8007760:	61fb      	str	r3, [r7, #28]
 8007762:	e0e5      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007764:	4b76      	ldr	r3, [pc, #472]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f003 0318 	and.w	r3, r3, #24
 800776c:	2b18      	cmp	r3, #24
 800776e:	f040 80dd 	bne.w	800792c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007772:	4b73      	ldr	r3, [pc, #460]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 8007774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800777c:	4b70      	ldr	r3, [pc, #448]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 800777e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007780:	0a1b      	lsrs	r3, r3, #8
 8007782:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007786:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007788:	4b6d      	ldr	r3, [pc, #436]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 800778a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007794:	4b6a      	ldr	r3, [pc, #424]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007798:	08db      	lsrs	r3, r3, #3
 800779a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	fb02 f303 	mul.w	r3, r2, r3
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ac:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80b7 	beq.w	8007926 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d003      	beq.n	80077c6 <HAL_RCC_GetSysClockFreq+0xbe>
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d056      	beq.n	8007872 <HAL_RCC_GetSysClockFreq+0x16a>
 80077c4:	e077      	b.n	80078b6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80077c6:	4b5e      	ldr	r3, [pc, #376]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d02d      	beq.n	800782e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077d2:	4b5b      	ldr	r3, [pc, #364]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	08db      	lsrs	r3, r3, #3
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	4a5a      	ldr	r2, [pc, #360]	@ (8007948 <HAL_RCC_GetSysClockFreq+0x240>)
 80077de:	fa22 f303 	lsr.w	r3, r2, r3
 80077e2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fc:	4b50      	ldr	r3, [pc, #320]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 80077fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007804:	ee07 3a90 	vmov	s15, r3
 8007808:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800780c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007810:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8007950 <HAL_RCC_GetSysClockFreq+0x248>
 8007814:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007818:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800781c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007820:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007828:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800782c:	e065      	b.n	80078fa <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007838:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8007954 <HAL_RCC_GetSysClockFreq+0x24c>
 800783c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007840:	4b3f      	ldr	r3, [pc, #252]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 8007842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007848:	ee07 3a90 	vmov	s15, r3
 800784c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007850:	ed97 6a02 	vldr	s12, [r7, #8]
 8007854:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007950 <HAL_RCC_GetSysClockFreq+0x248>
 8007858:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800785c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007864:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007870:	e043      	b.n	80078fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	ee07 3a90 	vmov	s15, r3
 8007878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8007958 <HAL_RCC_GetSysClockFreq+0x250>
 8007880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007884:	4b2e      	ldr	r3, [pc, #184]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 8007886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788c:	ee07 3a90 	vmov	s15, r3
 8007890:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007894:	ed97 6a02 	vldr	s12, [r7, #8]
 8007898:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007950 <HAL_RCC_GetSysClockFreq+0x248>
 800789c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80078a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80078b4:	e021      	b.n	80078fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800795c <HAL_RCC_GetSysClockFreq+0x254>
 80078c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 80078ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d0:	ee07 3a90 	vmov	s15, r3
 80078d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80078d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80078dc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8007950 <HAL_RCC_GetSysClockFreq+0x248>
 80078e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80078e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80078f8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80078fa:	4b11      	ldr	r3, [pc, #68]	@ (8007940 <HAL_RCC_GetSysClockFreq+0x238>)
 80078fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078fe:	0a5b      	lsrs	r3, r3, #9
 8007900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007904:	3301      	adds	r3, #1
 8007906:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007912:	edd7 6a06 	vldr	s13, [r7, #24]
 8007916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800791e:	ee17 3a90 	vmov	r3, s15
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	e004      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	61fb      	str	r3, [r7, #28]
 800792a:	e001      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800792c:	4b06      	ldr	r3, [pc, #24]	@ (8007948 <HAL_RCC_GetSysClockFreq+0x240>)
 800792e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007930:	69fb      	ldr	r3, [r7, #28]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3724      	adds	r7, #36	@ 0x24
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	44020c00 	.word	0x44020c00
 8007944:	003d0900 	.word	0x003d0900
 8007948:	03d09000 	.word	0x03d09000
 800794c:	017d7840 	.word	0x017d7840
 8007950:	46000000 	.word	0x46000000
 8007954:	4c742400 	.word	0x4c742400
 8007958:	4bbebc20 	.word	0x4bbebc20
 800795c:	4a742400 	.word	0x4a742400

08007960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007964:	f7ff fed0 	bl	8007708 <HAL_RCC_GetSysClockFreq>
 8007968:	4602      	mov	r2, r0
 800796a:	4b08      	ldr	r3, [pc, #32]	@ (800798c <HAL_RCC_GetHCLKFreq+0x2c>)
 800796c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800796e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007972:	4907      	ldr	r1, [pc, #28]	@ (8007990 <HAL_RCC_GetHCLKFreq+0x30>)
 8007974:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007976:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800797a:	fa22 f303 	lsr.w	r3, r2, r3
 800797e:	4a05      	ldr	r2, [pc, #20]	@ (8007994 <HAL_RCC_GetHCLKFreq+0x34>)
 8007980:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8007982:	4b04      	ldr	r3, [pc, #16]	@ (8007994 <HAL_RCC_GetHCLKFreq+0x34>)
 8007984:	681b      	ldr	r3, [r3, #0]
}
 8007986:	4618      	mov	r0, r3
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	44020c00 	.word	0x44020c00
 8007990:	080132e0 	.word	0x080132e0
 8007994:	200000a8 	.word	0x200000a8

08007998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800799c:	f7ff ffe0 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 80079a0:	4602      	mov	r2, r0
 80079a2:	4b06      	ldr	r3, [pc, #24]	@ (80079bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	091b      	lsrs	r3, r3, #4
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	4904      	ldr	r1, [pc, #16]	@ (80079c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079ae:	5ccb      	ldrb	r3, [r1, r3]
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	44020c00 	.word	0x44020c00
 80079c0:	080132f0 	.word	0x080132f0

080079c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80079c8:	f7ff ffca 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 80079cc:	4602      	mov	r2, r0
 80079ce:	4b06      	ldr	r3, [pc, #24]	@ (80079e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	4904      	ldr	r1, [pc, #16]	@ (80079ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80079da:	5ccb      	ldrb	r3, [r1, r3]
 80079dc:	f003 031f 	and.w	r3, r3, #31
 80079e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	44020c00 	.word	0x44020c00
 80079ec:	080132f0 	.word	0x080132f0

080079f0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80079f4:	f7ff ffb4 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 80079f8:	4602      	mov	r2, r0
 80079fa:	4b06      	ldr	r3, [pc, #24]	@ (8007a14 <HAL_RCC_GetPCLK3Freq+0x24>)
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	0b1b      	lsrs	r3, r3, #12
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	4904      	ldr	r1, [pc, #16]	@ (8007a18 <HAL_RCC_GetPCLK3Freq+0x28>)
 8007a06:	5ccb      	ldrb	r3, [r1, r3]
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	44020c00 	.word	0x44020c00
 8007a18:	080132f0 	.word	0x080132f0

08007a1c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a20:	b0d8      	sub	sp, #352	@ 0x160
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8007a40:	2500      	movs	r5, #0
 8007a42:	ea54 0305 	orrs.w	r3, r4, r5
 8007a46:	d00b      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8007a48:	4bcd      	ldr	r3, [pc, #820]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a4e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8007a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a58:	4ac9      	ldr	r2, [pc, #804]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	f002 0801 	and.w	r8, r2, #1
 8007a6c:	f04f 0900 	mov.w	r9, #0
 8007a70:	ea58 0309 	orrs.w	r3, r8, r9
 8007a74:	d042      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8007a76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a7c:	2b05      	cmp	r3, #5
 8007a7e:	d823      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8007a80:	a201      	add	r2, pc, #4	@ (adr r2, 8007a88 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8007a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a86:	bf00      	nop
 8007a88:	08007ad1 	.word	0x08007ad1
 8007a8c:	08007aa1 	.word	0x08007aa1
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007ad1 	.word	0x08007ad1
 8007a98:	08007ad1 	.word	0x08007ad1
 8007a9c:	08007ad1 	.word	0x08007ad1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f004 feda 	bl	800c860 <RCCEx_PLL2_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8007ab2:	e00e      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ab8:	3330      	adds	r3, #48	@ 0x30
 8007aba:	4618      	mov	r0, r3
 8007abc:	f004 ff68 	bl	800c990 <RCCEx_PLL3_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8007ac6:	e004      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ace:	e000      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8007ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10c      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007ada:	4ba9      	ldr	r3, [pc, #676]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ae0:	f023 0107 	bic.w	r1, r3, #7
 8007ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aea:	4aa5      	ldr	r2, [pc, #660]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007aec:	430b      	orrs	r3, r1
 8007aee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007af2:	e003      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007af8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f002 0a02 	and.w	sl, r2, #2
 8007b08:	f04f 0b00 	mov.w	fp, #0
 8007b0c:	ea5a 030b 	orrs.w	r3, sl, fp
 8007b10:	f000 8088 	beq.w	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b1a:	2b28      	cmp	r3, #40	@ 0x28
 8007b1c:	d868      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007bf9 	.word	0x08007bf9
 8007b28:	08007bf1 	.word	0x08007bf1
 8007b2c:	08007bf1 	.word	0x08007bf1
 8007b30:	08007bf1 	.word	0x08007bf1
 8007b34:	08007bf1 	.word	0x08007bf1
 8007b38:	08007bf1 	.word	0x08007bf1
 8007b3c:	08007bf1 	.word	0x08007bf1
 8007b40:	08007bf1 	.word	0x08007bf1
 8007b44:	08007bc9 	.word	0x08007bc9
 8007b48:	08007bf1 	.word	0x08007bf1
 8007b4c:	08007bf1 	.word	0x08007bf1
 8007b50:	08007bf1 	.word	0x08007bf1
 8007b54:	08007bf1 	.word	0x08007bf1
 8007b58:	08007bf1 	.word	0x08007bf1
 8007b5c:	08007bf1 	.word	0x08007bf1
 8007b60:	08007bf1 	.word	0x08007bf1
 8007b64:	08007bdd 	.word	0x08007bdd
 8007b68:	08007bf1 	.word	0x08007bf1
 8007b6c:	08007bf1 	.word	0x08007bf1
 8007b70:	08007bf1 	.word	0x08007bf1
 8007b74:	08007bf1 	.word	0x08007bf1
 8007b78:	08007bf1 	.word	0x08007bf1
 8007b7c:	08007bf1 	.word	0x08007bf1
 8007b80:	08007bf1 	.word	0x08007bf1
 8007b84:	08007bf9 	.word	0x08007bf9
 8007b88:	08007bf1 	.word	0x08007bf1
 8007b8c:	08007bf1 	.word	0x08007bf1
 8007b90:	08007bf1 	.word	0x08007bf1
 8007b94:	08007bf1 	.word	0x08007bf1
 8007b98:	08007bf1 	.word	0x08007bf1
 8007b9c:	08007bf1 	.word	0x08007bf1
 8007ba0:	08007bf1 	.word	0x08007bf1
 8007ba4:	08007bf9 	.word	0x08007bf9
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007bf1 	.word	0x08007bf1
 8007bb0:	08007bf1 	.word	0x08007bf1
 8007bb4:	08007bf1 	.word	0x08007bf1
 8007bb8:	08007bf1 	.word	0x08007bf1
 8007bbc:	08007bf1 	.word	0x08007bf1
 8007bc0:	08007bf1 	.word	0x08007bf1
 8007bc4:	08007bf9 	.word	0x08007bf9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bcc:	3308      	adds	r3, #8
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f004 fe46 	bl	800c860 <RCCEx_PLL2_Config>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8007bda:	e00e      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007be0:	3330      	adds	r3, #48	@ 0x30
 8007be2:	4618      	mov	r0, r3
 8007be4:	f004 fed4 	bl	800c990 <RCCEx_PLL3_Config>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8007bee:	e004      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007bf6:	e000      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8007bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007c02:	4b5f      	ldr	r3, [pc, #380]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007c04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c08:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c12:	4a5b      	ldr	r2, [pc, #364]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007c14:	430b      	orrs	r3, r1
 8007c16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007c1a:	e003      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f002 0304 	and.w	r3, r2, #4
 8007c30:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007c34:	2300      	movs	r3, #0
 8007c36:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007c3a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4313      	orrs	r3, r2
 8007c42:	d04e      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8007c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c4a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007c4e:	d02c      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8007c50:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007c54:	d825      	bhi.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c5a:	d028      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c60:	d81f      	bhi.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007c62:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c64:	d025      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007c66:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c68:	d81b      	bhi.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007c6a:	2b80      	cmp	r3, #128	@ 0x80
 8007c6c:	d00f      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8007c6e:	2b80      	cmp	r3, #128	@ 0x80
 8007c70:	d817      	bhi.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d01f      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8007c76:	2b40      	cmp	r3, #64	@ 0x40
 8007c78:	d113      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c7e:	3308      	adds	r3, #8
 8007c80:	4618      	mov	r0, r3
 8007c82:	f004 fded 	bl	800c860 <RCCEx_PLL2_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8007c8c:	e014      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c92:	3330      	adds	r3, #48	@ 0x30
 8007c94:	4618      	mov	r0, r3
 8007c96:	f004 fe7b 	bl	800c990 <RCCEx_PLL3_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8007ca0:	e00a      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ca8:	e006      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007caa:	bf00      	nop
 8007cac:	e004      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007cae:	bf00      	nop
 8007cb0:	e002      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007cb2:	bf00      	nop
 8007cb4:	e000      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10c      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cc6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007cd8:	e003      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cde:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f002 0308 	and.w	r3, r2, #8
 8007cee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007cf8:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	d056      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8007d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d08:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007d0c:	d031      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007d0e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007d12:	d82a      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d18:	d02d      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d1e:	d824      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007d20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007d24:	d029      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007d26:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007d2a:	d81e      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d30:	d011      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d36:	d818      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d023      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007d3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d40:	d113      	bne.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d46:	3308      	adds	r3, #8
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f004 fd89 	bl	800c860 <RCCEx_PLL2_Config>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007d54:	e017      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d5a:	3330      	adds	r3, #48	@ 0x30
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f004 fe17 	bl	800c990 <RCCEx_PLL3_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007d68:	e00d      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d70:	e009      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007d72:	bf00      	nop
 8007d74:	e007      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007d76:	bf00      	nop
 8007d78:	e005      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007d7a:	bf00      	nop
 8007d7c:	e003      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007d7e:	bf00      	nop
 8007d80:	44020c00 	.word	0x44020c00
        break;
 8007d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10c      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007d8e:	4bbb      	ldr	r3, [pc, #748]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007d94:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d9e:	4ab7      	ldr	r2, [pc, #732]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007da0:	430b      	orrs	r3, r1
 8007da2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007da6:	e003      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007dac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f002 0310 	and.w	r3, r2, #16
 8007dbc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007dc6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	d053      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8007dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007dda:	d031      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007ddc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007de0:	d82a      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007de2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007de6:	d02d      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dec:	d824      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007dee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007df2:	d029      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007df4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007df8:	d81e      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dfe:	d011      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e04:	d818      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d020      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x430>
 8007e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e0e:	d113      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e14:	3308      	adds	r3, #8
 8007e16:	4618      	mov	r0, r3
 8007e18:	f004 fd22 	bl	800c860 <RCCEx_PLL2_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007e22:	e014      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e28:	3330      	adds	r3, #48	@ 0x30
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f004 fdb0 	bl	800c990 <RCCEx_PLL3_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007e36:	e00a      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e3e:	e006      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007e40:	bf00      	nop
 8007e42:	e004      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007e44:	bf00      	nop
 8007e46:	e002      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007e48:	bf00      	nop
 8007e4a:	e000      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10c      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007e56:	4b89      	ldr	r3, [pc, #548]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e66:	4a85      	ldr	r2, [pc, #532]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007e6e:	e003      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e74:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f002 0320 	and.w	r3, r2, #32
 8007e84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007e8e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8007e92:	460b      	mov	r3, r1
 8007e94:	4313      	orrs	r3, r2
 8007e96:	d053      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8007e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e9e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007ea2:	d031      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8007ea4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007ea8:	d82a      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007eaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eae:	d02d      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eb4:	d824      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007eb6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007eba:	d029      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8007ebc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007ec0:	d81e      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec6:	d011      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ecc:	d818      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d020      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8007ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ed6:	d113      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007edc:	3308      	adds	r3, #8
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f004 fcbe 	bl	800c860 <RCCEx_PLL2_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8007eea:	e014      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ef0:	3330      	adds	r3, #48	@ 0x30
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f004 fd4c 	bl	800c990 <RCCEx_PLL3_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8007efe:	e00a      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f06:	e006      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007f08:	bf00      	nop
 8007f0a:	e004      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007f0c:	bf00      	nop
 8007f0e:	e002      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007f10:	bf00      	nop
 8007f12:	e000      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10c      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8007f1e:	4b57      	ldr	r3, [pc, #348]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f24:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8007f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f2e:	4a53      	ldr	r2, [pc, #332]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007f30:	430b      	orrs	r3, r1
 8007f32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007f36:	e003      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f3c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007f50:	2300      	movs	r3, #0
 8007f52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007f56:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	d053      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8007f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f66:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007f6a:	d031      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8007f6c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007f70:	d82a      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f76:	d02d      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8007f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f7c:	d824      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007f7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f82:	d029      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007f84:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f88:	d81e      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007f8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f8e:	d011      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007f90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f94:	d818      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d020      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007f9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f9e:	d113      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f004 fc5a 	bl	800c860 <RCCEx_PLL2_Config>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8007fb2:	e014      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fb8:	3330      	adds	r3, #48	@ 0x30
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f004 fce8 	bl	800c990 <RCCEx_PLL3_Config>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8007fc6:	e00a      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007fce:	e006      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007fd0:	bf00      	nop
 8007fd2:	e004      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007fd4:	bf00      	nop
 8007fd6:	e002      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007fd8:	bf00      	nop
 8007fda:	e000      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10c      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8007fe6:	4b25      	ldr	r3, [pc, #148]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007fec:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8007ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ff6:	4a21      	ldr	r2, [pc, #132]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007ffe:	e003      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008000:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008004:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008014:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8008018:	2300      	movs	r3, #0
 800801a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800801e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8008022:	460b      	mov	r3, r1
 8008024:	4313      	orrs	r3, r2
 8008026:	d055      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8008028:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800802c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800802e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008032:	d033      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008034:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008038:	d82c      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800803a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800803e:	d02f      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008040:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008044:	d826      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008046:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800804a:	d02b      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800804c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008050:	d820      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008052:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008056:	d013      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008058:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800805c:	d81a      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d022      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008062:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008066:	d115      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800806c:	3308      	adds	r3, #8
 800806e:	4618      	mov	r0, r3
 8008070:	f004 fbf6 	bl	800c860 <RCCEx_PLL2_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800807a:	e016      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800807c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008080:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008084:	3330      	adds	r3, #48	@ 0x30
 8008086:	4618      	mov	r0, r3
 8008088:	f004 fc82 	bl	800c990 <RCCEx_PLL3_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8008092:	e00a      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800809a:	e006      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800809c:	bf00      	nop
 800809e:	e004      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80080a0:	bf00      	nop
 80080a2:	e002      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80080a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10c      	bne.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80080b2:	4bbb      	ldr	r3, [pc, #748]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80080b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80080b8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80080bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080c2:	4ab7      	ldr	r2, [pc, #732]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80080c4:	430b      	orrs	r3, r1
 80080c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80080ca:	e003      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80080d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80080e0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80080e4:	2300      	movs	r3, #0
 80080e6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80080ea:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80080ee:	460b      	mov	r3, r1
 80080f0:	4313      	orrs	r3, r2
 80080f2:	d053      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80080f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080fa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80080fe:	d031      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008100:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008104:	d82a      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008106:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800810a:	d02d      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800810c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008110:	d824      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008112:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008116:	d029      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8008118:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800811c:	d81e      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800811e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008122:	d011      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8008124:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008128:	d818      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d020      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800812e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008132:	d113      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008138:	3308      	adds	r3, #8
 800813a:	4618      	mov	r0, r3
 800813c:	f004 fb90 	bl	800c860 <RCCEx_PLL2_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8008146:	e014      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800814c:	3330      	adds	r3, #48	@ 0x30
 800814e:	4618      	mov	r0, r3
 8008150:	f004 fc1e 	bl	800c990 <RCCEx_PLL3_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800815a:	e00a      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008162:	e006      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008164:	bf00      	nop
 8008166:	e004      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008168:	bf00      	nop
 800816a:	e002      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800816c:	bf00      	nop
 800816e:	e000      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008172:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10c      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800817a:	4b89      	ldr	r3, [pc, #548]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800817c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008180:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800818a:	4a85      	ldr	r2, [pc, #532]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800818c:	430b      	orrs	r3, r1
 800818e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008192:	e003      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008194:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008198:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800819c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80081a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80081b2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80081b6:	460b      	mov	r3, r1
 80081b8:	4313      	orrs	r3, r2
 80081ba:	d055      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80081bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80081c8:	d031      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x812>
 80081ca:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80081ce:	d82a      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80081d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081d4:	d02d      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80081d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081da:	d824      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80081dc:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80081e0:	d029      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80081e2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80081e6:	d81e      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80081e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081ec:	d011      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80081ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081f2:	d818      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d020      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80081f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081fc:	d113      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008202:	3308      	adds	r3, #8
 8008204:	4618      	mov	r0, r3
 8008206:	f004 fb2b 	bl	800c860 <RCCEx_PLL2_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008210:	e014      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008212:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008216:	3330      	adds	r3, #48	@ 0x30
 8008218:	4618      	mov	r0, r3
 800821a:	f004 fbb9 	bl	800c990 <RCCEx_PLL3_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008224:	e00a      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800822c:	e006      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800822e:	bf00      	nop
 8008230:	e004      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008232:	bf00      	nop
 8008234:	e002      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008236:	bf00      	nop
 8008238:	e000      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800823a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800823c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10d      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8008244:	4b56      	ldr	r3, [pc, #344]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008246:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800824a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800824e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008256:	4a52      	ldr	r2, [pc, #328]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008258:	430b      	orrs	r3, r1
 800825a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800825e:	e003      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008260:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008264:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8008268:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008274:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008278:	2300      	movs	r3, #0
 800827a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800827e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008282:	460b      	mov	r3, r1
 8008284:	4313      	orrs	r3, r2
 8008286:	d044      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8008288:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800828c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008290:	2b05      	cmp	r3, #5
 8008292:	d823      	bhi.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008294:	a201      	add	r2, pc, #4	@ (adr r2, 800829c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829a:	bf00      	nop
 800829c:	080082e5 	.word	0x080082e5
 80082a0:	080082b5 	.word	0x080082b5
 80082a4:	080082c9 	.word	0x080082c9
 80082a8:	080082e5 	.word	0x080082e5
 80082ac:	080082e5 	.word	0x080082e5
 80082b0:	080082e5 	.word	0x080082e5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082b8:	3308      	adds	r3, #8
 80082ba:	4618      	mov	r0, r3
 80082bc:	f004 fad0 	bl	800c860 <RCCEx_PLL2_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80082c6:	e00e      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80082c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082cc:	3330      	adds	r3, #48	@ 0x30
 80082ce:	4618      	mov	r0, r3
 80082d0:	f004 fb5e 	bl	800c990 <RCCEx_PLL3_Config>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80082da:	e004      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082e2:	e000      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80082e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10d      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80082ee:	4b2c      	ldr	r3, [pc, #176]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80082f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80082f4:	f023 0107 	bic.w	r1, r3, #7
 80082f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008300:	4a27      	ldr	r2, [pc, #156]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008302:	430b      	orrs	r3, r1
 8008304:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008308:	e003      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800830e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008312:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800831e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008322:	2300      	movs	r3, #0
 8008324:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008328:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800832c:	460b      	mov	r3, r1
 800832e:	4313      	orrs	r3, r2
 8008330:	d04f      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8008332:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800833a:	2b50      	cmp	r3, #80	@ 0x50
 800833c:	d029      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800833e:	2b50      	cmp	r3, #80	@ 0x50
 8008340:	d823      	bhi.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008342:	2b40      	cmp	r3, #64	@ 0x40
 8008344:	d027      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008346:	2b40      	cmp	r3, #64	@ 0x40
 8008348:	d81f      	bhi.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800834a:	2b30      	cmp	r3, #48	@ 0x30
 800834c:	d025      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800834e:	2b30      	cmp	r3, #48	@ 0x30
 8008350:	d81b      	bhi.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008352:	2b20      	cmp	r3, #32
 8008354:	d00f      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008356:	2b20      	cmp	r3, #32
 8008358:	d817      	bhi.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d022      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800835e:	2b10      	cmp	r3, #16
 8008360:	d113      	bne.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008362:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008366:	3308      	adds	r3, #8
 8008368:	4618      	mov	r0, r3
 800836a:	f004 fa79 	bl	800c860 <RCCEx_PLL2_Config>
 800836e:	4603      	mov	r3, r0
 8008370:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8008374:	e017      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008376:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800837a:	3330      	adds	r3, #48	@ 0x30
 800837c:	4618      	mov	r0, r3
 800837e:	f004 fb07 	bl	800c990 <RCCEx_PLL3_Config>
 8008382:	4603      	mov	r3, r0
 8008384:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8008388:	e00d      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008390:	e009      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008392:	bf00      	nop
 8008394:	e007      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008396:	bf00      	nop
 8008398:	e005      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800839a:	bf00      	nop
 800839c:	e003      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800839e:	bf00      	nop
 80083a0:	44020c00 	.word	0x44020c00
        break;
 80083a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10d      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80083ae:	4baf      	ldr	r3, [pc, #700]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80083b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80083b4:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80083b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c0:	4aaa      	ldr	r2, [pc, #680]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80083c2:	430b      	orrs	r3, r1
 80083c4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80083c8:	e003      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80083ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80083de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083e2:	2300      	movs	r3, #0
 80083e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80083e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4313      	orrs	r3, r2
 80083f0:	d055      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80083f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083fa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80083fe:	d031      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8008400:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008404:	d82a      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008406:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800840a:	d02d      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800840c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008410:	d824      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008412:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008416:	d029      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8008418:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800841c:	d81e      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800841e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008422:	d011      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8008424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008428:	d818      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d020      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800842e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008432:	d113      	bne.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008438:	3308      	adds	r3, #8
 800843a:	4618      	mov	r0, r3
 800843c:	f004 fa10 	bl	800c860 <RCCEx_PLL2_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008446:	e014      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800844c:	3330      	adds	r3, #48	@ 0x30
 800844e:	4618      	mov	r0, r3
 8008450:	f004 fa9e 	bl	800c990 <RCCEx_PLL3_Config>
 8008454:	4603      	mov	r3, r0
 8008456:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800845a:	e00a      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008462:	e006      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008464:	bf00      	nop
 8008466:	e004      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008468:	bf00      	nop
 800846a:	e002      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800846c:	bf00      	nop
 800846e:	e000      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008472:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10d      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800847a:	4b7c      	ldr	r3, [pc, #496]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800847c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008480:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800848c:	4a77      	ldr	r2, [pc, #476]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800848e:	430b      	orrs	r3, r1
 8008490:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008494:	e003      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008496:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800849a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800849e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80084aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80084ae:	2300      	movs	r3, #0
 80084b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80084b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80084b8:	460b      	mov	r3, r1
 80084ba:	4313      	orrs	r3, r2
 80084bc:	d03d      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80084be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084ca:	d01b      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80084cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084d0:	d814      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80084d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084d6:	d017      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80084d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084dc:	d80e      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d014      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80084e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e6:	d109      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80084e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084ec:	3330      	adds	r3, #48	@ 0x30
 80084ee:	4618      	mov	r0, r3
 80084f0:	f004 fa4e 	bl	800c990 <RCCEx_PLL3_Config>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80084fa:	e008      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008502:	e004      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008504:	bf00      	nop
 8008506:	e002      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008508:	bf00      	nop
 800850a:	e000      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800850c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10d      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008516:	4b55      	ldr	r3, [pc, #340]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008518:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800851c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008528:	4a50      	ldr	r2, [pc, #320]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800852a:	430b      	orrs	r3, r1
 800852c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008530:	e003      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008532:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008536:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800853a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008546:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800854a:	2300      	movs	r3, #0
 800854c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008550:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008554:	460b      	mov	r3, r1
 8008556:	4313      	orrs	r3, r2
 8008558:	d03d      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800855a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800855e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008562:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008566:	d01b      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8008568:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800856c:	d814      	bhi.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800856e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008572:	d017      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8008574:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008578:	d80e      	bhi.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d014      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800857e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008582:	d109      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008584:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008588:	3330      	adds	r3, #48	@ 0x30
 800858a:	4618      	mov	r0, r3
 800858c:	f004 fa00 	bl	800c990 <RCCEx_PLL3_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8008596:	e008      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800859e:	e004      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80085a0:	bf00      	nop
 80085a2:	e002      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80085a4:	bf00      	nop
 80085a6:	e000      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80085a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10d      	bne.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80085b2:	4b2e      	ldr	r3, [pc, #184]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80085b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085b8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80085bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085c4:	4a29      	ldr	r2, [pc, #164]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80085c6:	430b      	orrs	r3, r1
 80085c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80085cc:	e003      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80085e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085e6:	2300      	movs	r3, #0
 80085e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80085f0:	460b      	mov	r3, r1
 80085f2:	4313      	orrs	r3, r2
 80085f4:	d040      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80085f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80085fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008602:	d01b      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8008604:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008608:	d814      	bhi.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800860a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800860e:	d017      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008610:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008614:	d80e      	bhi.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d014      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800861a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800861e:	d109      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008620:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008624:	3330      	adds	r3, #48	@ 0x30
 8008626:	4618      	mov	r0, r3
 8008628:	f004 f9b2 	bl	800c990 <RCCEx_PLL3_Config>
 800862c:	4603      	mov	r3, r0
 800862e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8008632:	e008      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800863a:	e004      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800863c:	bf00      	nop
 800863e:	e002      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008640:	bf00      	nop
 8008642:	e000      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008646:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800864a:	2b00      	cmp	r3, #0
 800864c:	d110      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800864e:	4b07      	ldr	r3, [pc, #28]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008650:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008654:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008658:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800865c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008660:	4a02      	ldr	r2, [pc, #8]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008662:	430b      	orrs	r3, r1
 8008664:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008668:	e006      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800866a:	bf00      	nop
 800866c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008670:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008674:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	2100      	movs	r1, #0
 8008682:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8008686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800868a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800868e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008692:	460b      	mov	r3, r1
 8008694:	4313      	orrs	r3, r2
 8008696:	d03d      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8008698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800869c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80086a4:	d01b      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80086a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80086aa:	d814      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80086ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80086b0:	d017      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80086b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80086b6:	d80e      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d014      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80086bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086c0:	d109      	bne.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086c6:	3330      	adds	r3, #48	@ 0x30
 80086c8:	4618      	mov	r0, r3
 80086ca:	f004 f961 	bl	800c990 <RCCEx_PLL3_Config>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80086d4:	e008      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80086dc:	e004      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80086de:	bf00      	nop
 80086e0:	e002      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80086e2:	bf00      	nop
 80086e4:	e000      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80086e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10d      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80086f0:	4bbe      	ldr	r3, [pc, #760]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80086f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086f6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80086fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008702:	4aba      	ldr	r2, [pc, #744]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008704:	430b      	orrs	r3, r1
 8008706:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800870a:	e003      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008710:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8008714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008724:	2300      	movs	r3, #0
 8008726:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800872a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800872e:	460b      	mov	r3, r1
 8008730:	4313      	orrs	r3, r2
 8008732:	d035      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8008734:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800873c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008740:	d015      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8008742:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008746:	d80e      	bhi.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d012      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800874c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008750:	d109      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008752:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008756:	3330      	adds	r3, #48	@ 0x30
 8008758:	4618      	mov	r0, r3
 800875a:	f004 f919 	bl	800c990 <RCCEx_PLL3_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8008764:	e006      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800876c:	e002      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800876e:	bf00      	nop
 8008770:	e000      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008774:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10d      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800877c:	4b9b      	ldr	r3, [pc, #620]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800877e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008782:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8008786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800878a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800878e:	4a97      	ldr	r2, [pc, #604]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008790:	430b      	orrs	r3, r1
 8008792:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008796:	e003      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008798:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800879c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	2100      	movs	r1, #0
 80087aa:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80087ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4313      	orrs	r3, r2
 80087be:	d00e      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80087c0:	4b8a      	ldr	r3, [pc, #552]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	4a89      	ldr	r2, [pc, #548]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80087c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087ca:	61d3      	str	r3, [r2, #28]
 80087cc:	4b87      	ldr	r3, [pc, #540]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80087ce:	69d9      	ldr	r1, [r3, #28]
 80087d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80087d8:	4a84      	ldr	r2, [pc, #528]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80087da:	430b      	orrs	r3, r1
 80087dc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80087ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087ee:	2300      	movs	r3, #0
 80087f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80087f4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80087f8:	460b      	mov	r3, r1
 80087fa:	4313      	orrs	r3, r2
 80087fc:	d055      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80087fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008802:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008806:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800880a:	d031      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800880c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008810:	d82a      	bhi.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008816:	d02d      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8008818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800881c:	d824      	bhi.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800881e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008822:	d029      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8008824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008828:	d81e      	bhi.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800882a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800882e:	d011      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8008830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008834:	d818      	bhi.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d020      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800883a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800883e:	d113      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008840:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008844:	3308      	adds	r3, #8
 8008846:	4618      	mov	r0, r3
 8008848:	f004 f80a 	bl	800c860 <RCCEx_PLL2_Config>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008852:	e014      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008858:	3330      	adds	r3, #48	@ 0x30
 800885a:	4618      	mov	r0, r3
 800885c:	f004 f898 	bl	800c990 <RCCEx_PLL3_Config>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008866:	e00a      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800886e:	e006      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008870:	bf00      	nop
 8008872:	e004      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008878:	bf00      	nop
 800887a:	e000      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800887c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10d      	bne.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008886:	4b59      	ldr	r3, [pc, #356]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008888:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800888c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008894:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008898:	4a54      	ldr	r2, [pc, #336]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800889a:	430b      	orrs	r3, r1
 800889c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80088a0:	e003      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80088b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088ba:	2300      	movs	r3, #0
 80088bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088c0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4313      	orrs	r3, r2
 80088c8:	d055      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80088ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80088d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80088d6:	d031      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80088d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80088dc:	d82a      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80088de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088e2:	d02d      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80088e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088e8:	d824      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80088ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80088ee:	d029      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80088f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80088f4:	d81e      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80088f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088fa:	d011      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80088fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008900:	d818      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d020      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800890a:	d113      	bne.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800890c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008910:	3308      	adds	r3, #8
 8008912:	4618      	mov	r0, r3
 8008914:	f003 ffa4 	bl	800c860 <RCCEx_PLL2_Config>
 8008918:	4603      	mov	r3, r0
 800891a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800891e:	e014      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008920:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008924:	3330      	adds	r3, #48	@ 0x30
 8008926:	4618      	mov	r0, r3
 8008928:	f004 f832 	bl	800c990 <RCCEx_PLL3_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008932:	e00a      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800893a:	e006      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800893c:	bf00      	nop
 800893e:	e004      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008940:	bf00      	nop
 8008942:	e002      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008944:	bf00      	nop
 8008946:	e000      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800894a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10d      	bne.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008952:	4b26      	ldr	r3, [pc, #152]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008954:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008958:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800895c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008960:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008964:	4a21      	ldr	r2, [pc, #132]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008966:	430b      	orrs	r3, r1
 8008968:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800896c:	e003      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008972:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8008976:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	2100      	movs	r1, #0
 8008980:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8008984:	f003 0320 	and.w	r3, r3, #32
 8008988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800898c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008990:	460b      	mov	r3, r1
 8008992:	4313      	orrs	r3, r2
 8008994:	d057      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8008996:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800899a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800899e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089a2:	d033      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80089a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089a8:	d82c      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80089aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089ae:	d02f      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80089b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089b4:	d826      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80089b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089ba:	d02b      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80089bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089c0:	d820      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80089c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089c6:	d013      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80089c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089cc:	d81a      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d022      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80089d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089d6:	d115      	bne.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089dc:	3308      	adds	r3, #8
 80089de:	4618      	mov	r0, r3
 80089e0:	f003 ff3e 	bl	800c860 <RCCEx_PLL2_Config>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80089ea:	e016      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80089ec:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089f4:	3330      	adds	r3, #48	@ 0x30
 80089f6:	4618      	mov	r0, r3
 80089f8:	f003 ffca 	bl	800c990 <RCCEx_PLL3_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8008a02:	e00a      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008a0a:	e006      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008a0c:	bf00      	nop
 8008a0e:	e004      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008a10:	bf00      	nop
 8008a12:	e002      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008a14:	bf00      	nop
 8008a16:	e000      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10d      	bne.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8008a22:	4bbb      	ldr	r3, [pc, #748]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008a24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008a28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008a34:	4ab6      	ldr	r2, [pc, #728]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008a36:	430b      	orrs	r3, r1
 8008a38:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008a3c:	e003      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8008a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	2100      	movs	r1, #0
 8008a50:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8008a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d055      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8008a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a6e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008a72:	d031      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8008a74:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008a78:	d82a      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a7e:	d02d      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8008a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a84:	d824      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008a86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a8a:	d029      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8008a8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a90:	d81e      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a96:	d011      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8008a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a9c:	d818      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d020      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8008aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aa6:	d113      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008aac:	3308      	adds	r3, #8
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f003 fed6 	bl	800c860 <RCCEx_PLL2_Config>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8008aba:	e014      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ac0:	3330      	adds	r3, #48	@ 0x30
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f003 ff64 	bl	800c990 <RCCEx_PLL3_Config>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8008ace:	e00a      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008ad6:	e006      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008ad8:	bf00      	nop
 8008ada:	e004      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008adc:	bf00      	nop
 8008ade:	e002      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008ae0:	bf00      	nop
 8008ae2:	e000      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ae6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10d      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8008aee:	4b88      	ldr	r3, [pc, #544]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008af0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008af4:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8008af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008b00:	4a83      	ldr	r2, [pc, #524]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008b02:	430b      	orrs	r3, r1
 8008b04:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008b08:	e003      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8008b12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8008b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b28:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	d055      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8008b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b3a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008b3e:	d031      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8008b40:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008b44:	d82a      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008b46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b4a:	d02d      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8008b4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b50:	d824      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008b52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b56:	d029      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8008b58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b5c:	d81e      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008b5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b62:	d011      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8008b64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b68:	d818      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d020      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8008b6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b72:	d113      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b78:	3308      	adds	r3, #8
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f003 fe70 	bl	800c860 <RCCEx_PLL2_Config>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8008b86:	e014      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b8c:	3330      	adds	r3, #48	@ 0x30
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f003 fefe 	bl	800c990 <RCCEx_PLL3_Config>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8008b9a:	e00a      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008ba2:	e006      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008ba4:	bf00      	nop
 8008ba6:	e004      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008ba8:	bf00      	nop
 8008baa:	e002      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008bac:	bf00      	nop
 8008bae:	e000      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10d      	bne.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8008bba:	4b55      	ldr	r3, [pc, #340]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008bbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008bc0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bcc:	4a50      	ldr	r2, [pc, #320]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008bd4:	e003      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008bda:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8008bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	2100      	movs	r1, #0
 8008be8:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8008bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bf4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	d055      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8008bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c0a:	d031      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8008c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c10:	d82a      	bhi.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c16:	d02d      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8008c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c1c:	d824      	bhi.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008c1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c22:	d029      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8008c24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c28:	d81e      	bhi.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c2e:	d011      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8008c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c34:	d818      	bhi.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d020      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8008c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c3e:	d113      	bne.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c44:	3308      	adds	r3, #8
 8008c46:	4618      	mov	r0, r3
 8008c48:	f003 fe0a 	bl	800c860 <RCCEx_PLL2_Config>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008c52:	e014      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c58:	3330      	adds	r3, #48	@ 0x30
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f003 fe98 	bl	800c990 <RCCEx_PLL3_Config>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008c66:	e00a      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008c6e:	e006      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008c70:	bf00      	nop
 8008c72:	e004      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008c74:	bf00      	nop
 8008c76:	e002      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008c78:	bf00      	nop
 8008c7a:	e000      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10d      	bne.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8008c86:	4b22      	ldr	r3, [pc, #136]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008c88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c8c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008c98:	4a1d      	ldr	r2, [pc, #116]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008ca0:	e003      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ca6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008cb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008cc0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	d055      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008cd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008cd6:	d035      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8008cd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008cdc:	d82e      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008cde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ce2:	d031      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8008ce4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ce8:	d828      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cee:	d01b      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8008cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cf4:	d822      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8008cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cfe:	d009      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8008d00:	e01c      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d02:	4b03      	ldr	r3, [pc, #12]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d06:	4a02      	ldr	r2, [pc, #8]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d0c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008d0e:	e01c      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8008d10:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d18:	3308      	adds	r3, #8
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f003 fda0 	bl	800c860 <RCCEx_PLL2_Config>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008d26:	e010      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d2c:	3330      	adds	r3, #48	@ 0x30
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f003 fe2e 	bl	800c990 <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008d3a:	e006      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008d42:	e002      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008d44:	bf00      	nop
 8008d46:	e000      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10d      	bne.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008d52:	4bc3      	ldr	r3, [pc, #780]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008d64:	4abe      	ldr	r2, [pc, #760]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008d66:	430b      	orrs	r3, r1
 8008d68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008d6c:	e003      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8008d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008d82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d86:	2300      	movs	r3, #0
 8008d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d8c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d90:	460b      	mov	r3, r1
 8008d92:	4313      	orrs	r3, r2
 8008d94:	d051      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008d9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008da2:	d033      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8008da4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008da8:	d82c      	bhi.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8008daa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008dae:	d02d      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8008db0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008db4:	d826      	bhi.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8008db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dba:	d019      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8008dbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dc0:	d820      	bhi.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8008dc6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008dca:	d007      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8008dcc:	e01a      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dce:	4ba4      	ldr	r3, [pc, #656]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd2:	4aa3      	ldr	r2, [pc, #652]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dd8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008dda:	e018      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008de0:	3308      	adds	r3, #8
 8008de2:	4618      	mov	r0, r3
 8008de4:	f003 fd3c 	bl	800c860 <RCCEx_PLL2_Config>
 8008de8:	4603      	mov	r3, r0
 8008dea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008dee:	e00e      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008df4:	3330      	adds	r3, #48	@ 0x30
 8008df6:	4618      	mov	r0, r3
 8008df8:	f003 fdca 	bl	800c990 <RCCEx_PLL3_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008e02:	e004      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008e0a:	e000      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8008e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10d      	bne.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008e16:	4b92      	ldr	r3, [pc, #584]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e1c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8008e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008e28:	4a8d      	ldr	r2, [pc, #564]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008e2a:	430b      	orrs	r3, r1
 8008e2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008e30:	e003      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e36:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008e3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008e46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e48:	2300      	movs	r3, #0
 8008e4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e4c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008e50:	460b      	mov	r3, r1
 8008e52:	4313      	orrs	r3, r2
 8008e54:	d032      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d80f      	bhi.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d211      	bcs.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d911      	bls.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d109      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e72:	3308      	adds	r3, #8
 8008e74:	4618      	mov	r0, r3
 8008e76:	f003 fcf3 	bl	800c860 <RCCEx_PLL2_Config>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008e80:	e006      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008e88:	e002      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8008e8a:	bf00      	nop
 8008e8c:	e000      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8008e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10d      	bne.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008e98:	4b71      	ldr	r3, [pc, #452]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e9e:	f023 0107 	bic.w	r1, r3, #7
 8008ea2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ea6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008eaa:	4a6d      	ldr	r2, [pc, #436]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008eac:	430b      	orrs	r3, r1
 8008eae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008eb2:	e003      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008eb8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8008ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6739      	str	r1, [r7, #112]	@ 0x70
 8008ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ecc:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ece:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	d024      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8008ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008edc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d005      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d005      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008eee:	e002      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008ef0:	bf00      	nop
 8008ef2:	e000      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ef6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10d      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8008efe:	4b58      	ldr	r3, [pc, #352]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f04:	f023 0108 	bic.w	r1, r3, #8
 8008f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008f10:	4a53      	ldr	r2, [pc, #332]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008f12:	430b      	orrs	r3, r1
 8008f14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008f18:	e003      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008f2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f30:	2300      	movs	r3, #0
 8008f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f34:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	f000 80b9 	beq.w	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8008f40:	4b48      	ldr	r3, [pc, #288]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f44:	4a47      	ldr	r2, [pc, #284]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008f46:	f043 0301 	orr.w	r3, r3, #1
 8008f4a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f4c:	f7fc fab4 	bl	80054b8 <HAL_GetTick>
 8008f50:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008f54:	e00b      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f56:	f7fc faaf 	bl	80054b8 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d903      	bls.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008f6c:	e005      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0ed      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8008f7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f040 8093 	bne.w	80090aa <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008f84:	4b36      	ldr	r3, [pc, #216]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f8e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008f92:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d023      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8008f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f9e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8008fa2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d01b      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008faa:	4b2d      	ldr	r3, [pc, #180]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fb4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fb8:	4b29      	ldr	r3, [pc, #164]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fbe:	4a28      	ldr	r2, [pc, #160]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fc8:	4b25      	ldr	r3, [pc, #148]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fce:	4a24      	ldr	r2, [pc, #144]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008fd8:	4a21      	ldr	r2, [pc, #132]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008fda:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008fde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008fe2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d019      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fee:	f7fc fa63 	bl	80054b8 <HAL_GetTick>
 8008ff2:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ff6:	e00d      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ff8:	f7fc fa5e 	bl	80054b8 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8009002:	1ad2      	subs	r2, r2, r3
 8009004:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009008:	429a      	cmp	r2, r3
 800900a:	d903      	bls.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8009012:	e006      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009014:	4b12      	ldr	r3, [pc, #72]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0ea      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8009022:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009026:	2b00      	cmp	r3, #0
 8009028:	d13a      	bne.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800902a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800902e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8009032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800903a:	d115      	bne.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800903c:	4b08      	ldr	r3, [pc, #32]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009044:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009048:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800904c:	091b      	lsrs	r3, r3, #4
 800904e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009052:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8009056:	4a02      	ldr	r2, [pc, #8]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009058:	430b      	orrs	r3, r1
 800905a:	61d3      	str	r3, [r2, #28]
 800905c:	e00a      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800905e:	bf00      	nop
 8009060:	44020c00 	.word	0x44020c00
 8009064:	44020800 	.word	0x44020800
 8009068:	4b9f      	ldr	r3, [pc, #636]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	4a9e      	ldr	r2, [pc, #632]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800906e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009072:	61d3      	str	r3, [r2, #28]
 8009074:	4b9c      	ldr	r3, [pc, #624]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800907a:	4a9b      	ldr	r2, [pc, #620]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800907c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009080:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009084:	4b98      	ldr	r3, [pc, #608]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009086:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800908a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800908e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8009092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009096:	4a94      	ldr	r2, [pc, #592]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009098:	430b      	orrs	r3, r1
 800909a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800909e:	e008      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80090a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80090a8:	e003      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80090ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80090b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80090be:	663b      	str	r3, [r7, #96]	@ 0x60
 80090c0:	2300      	movs	r3, #0
 80090c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80090c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80090c8:	460b      	mov	r3, r1
 80090ca:	4313      	orrs	r3, r2
 80090cc:	d035      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80090ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80090d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80090d6:	2b30      	cmp	r3, #48	@ 0x30
 80090d8:	d014      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80090da:	2b30      	cmp	r3, #48	@ 0x30
 80090dc:	d80e      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80090de:	2b20      	cmp	r3, #32
 80090e0:	d012      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	d80a      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d010      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80090ea:	2b10      	cmp	r3, #16
 80090ec:	d106      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ee:	4b7e      	ldr	r3, [pc, #504]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80090f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f2:	4a7d      	ldr	r2, [pc, #500]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80090f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090f8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80090fa:	e008      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009102:	e004      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009104:	bf00      	nop
 8009106:	e002      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009108:	bf00      	nop
 800910a:	e000      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800910c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800910e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10d      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009116:	4b74      	ldr	r3, [pc, #464]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800911c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009124:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009128:	4a6f      	ldr	r2, [pc, #444]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800912a:	430b      	orrs	r3, r1
 800912c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009130:	e003      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009132:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009136:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800913a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009146:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009148:	2300      	movs	r3, #0
 800914a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800914c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009150:	460b      	mov	r3, r1
 8009152:	4313      	orrs	r3, r2
 8009154:	d033      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8009156:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800915a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8009162:	2b40      	cmp	r3, #64	@ 0x40
 8009164:	d007      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8009166:	e010      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009168:	4b5f      	ldr	r3, [pc, #380]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800916a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916c:	4a5e      	ldr	r2, [pc, #376]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800916e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009172:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009174:	e00d      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009176:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800917a:	3308      	adds	r3, #8
 800917c:	4618      	mov	r0, r3
 800917e:	f003 fb6f 	bl	800c860 <RCCEx_PLL2_Config>
 8009182:	4603      	mov	r3, r0
 8009184:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009188:	e003      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009192:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10d      	bne.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800919a:	4b53      	ldr	r3, [pc, #332]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800919c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091a0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80091a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80091ac:	4a4e      	ldr	r2, [pc, #312]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80091ae:	430b      	orrs	r3, r1
 80091b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80091b4:	e003      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80091ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80091be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80091ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80091cc:	2300      	movs	r3, #0
 80091ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80091d0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80091d4:	460b      	mov	r3, r1
 80091d6:	4313      	orrs	r3, r2
 80091d8:	d033      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80091da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091de:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80091e6:	2b80      	cmp	r3, #128	@ 0x80
 80091e8:	d007      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80091ea:	e010      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ec:	4b3e      	ldr	r3, [pc, #248]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80091ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f0:	4a3d      	ldr	r2, [pc, #244]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80091f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091f6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80091f8:	e00d      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80091fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091fe:	3308      	adds	r3, #8
 8009200:	4618      	mov	r0, r3
 8009202:	f003 fb2d 	bl	800c860 <RCCEx_PLL2_Config>
 8009206:	4603      	mov	r3, r0
 8009208:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800920c:	e003      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009216:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10d      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800921e:	4b32      	ldr	r3, [pc, #200]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009220:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009224:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8009228:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800922c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8009230:	4a2d      	ldr	r2, [pc, #180]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009232:	430b      	orrs	r3, r1
 8009234:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009238:	e003      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800923e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009242:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800924e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009250:	2300      	movs	r3, #0
 8009252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009254:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009258:	460b      	mov	r3, r1
 800925a:	4313      	orrs	r3, r2
 800925c:	d04a      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800925e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009266:	2b04      	cmp	r3, #4
 8009268:	d827      	bhi.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800926a:	a201      	add	r2, pc, #4	@ (adr r2, 8009270 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	08009285 	.word	0x08009285
 8009274:	08009293 	.word	0x08009293
 8009278:	080092a7 	.word	0x080092a7
 800927c:	080092c3 	.word	0x080092c3
 8009280:	080092c3 	.word	0x080092c3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009284:	4b18      	ldr	r3, [pc, #96]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009288:	4a17      	ldr	r2, [pc, #92]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800928a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800928e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009290:	e018      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009292:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009296:	3308      	adds	r3, #8
 8009298:	4618      	mov	r0, r3
 800929a:	f003 fae1 	bl	800c860 <RCCEx_PLL2_Config>
 800929e:	4603      	mov	r3, r0
 80092a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80092a4:	e00e      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80092a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092aa:	3330      	adds	r3, #48	@ 0x30
 80092ac:	4618      	mov	r0, r3
 80092ae:	f003 fb6f 	bl	800c990 <RCCEx_PLL3_Config>
 80092b2:	4603      	mov	r3, r0
 80092b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80092b8:	e004      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80092c0:	e000      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80092c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10f      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80092cc:	4b06      	ldr	r3, [pc, #24]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80092ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092d2:	f023 0107 	bic.w	r1, r3, #7
 80092d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092de:	4a02      	ldr	r2, [pc, #8]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80092e0:	430b      	orrs	r3, r1
 80092e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80092e6:	e005      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80092e8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80092f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80092f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009300:	643b      	str	r3, [r7, #64]	@ 0x40
 8009302:	2300      	movs	r3, #0
 8009304:	647b      	str	r3, [r7, #68]	@ 0x44
 8009306:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800930a:	460b      	mov	r3, r1
 800930c:	4313      	orrs	r3, r2
 800930e:	f000 8081 	beq.w	8009414 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8009312:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009316:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800931a:	2b20      	cmp	r3, #32
 800931c:	d85f      	bhi.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800931e:	a201      	add	r2, pc, #4	@ (adr r2, 8009324 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8009320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009324:	080093a9 	.word	0x080093a9
 8009328:	080093df 	.word	0x080093df
 800932c:	080093df 	.word	0x080093df
 8009330:	080093df 	.word	0x080093df
 8009334:	080093df 	.word	0x080093df
 8009338:	080093df 	.word	0x080093df
 800933c:	080093df 	.word	0x080093df
 8009340:	080093df 	.word	0x080093df
 8009344:	080093b7 	.word	0x080093b7
 8009348:	080093df 	.word	0x080093df
 800934c:	080093df 	.word	0x080093df
 8009350:	080093df 	.word	0x080093df
 8009354:	080093df 	.word	0x080093df
 8009358:	080093df 	.word	0x080093df
 800935c:	080093df 	.word	0x080093df
 8009360:	080093df 	.word	0x080093df
 8009364:	080093cb 	.word	0x080093cb
 8009368:	080093df 	.word	0x080093df
 800936c:	080093df 	.word	0x080093df
 8009370:	080093df 	.word	0x080093df
 8009374:	080093df 	.word	0x080093df
 8009378:	080093df 	.word	0x080093df
 800937c:	080093df 	.word	0x080093df
 8009380:	080093df 	.word	0x080093df
 8009384:	080093e7 	.word	0x080093e7
 8009388:	080093df 	.word	0x080093df
 800938c:	080093df 	.word	0x080093df
 8009390:	080093df 	.word	0x080093df
 8009394:	080093df 	.word	0x080093df
 8009398:	080093df 	.word	0x080093df
 800939c:	080093df 	.word	0x080093df
 80093a0:	080093df 	.word	0x080093df
 80093a4:	080093e7 	.word	0x080093e7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a8:	4bab      	ldr	r3, [pc, #684]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80093aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ac:	4aaa      	ldr	r2, [pc, #680]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80093ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80093b4:	e018      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80093b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80093ba:	3308      	adds	r3, #8
 80093bc:	4618      	mov	r0, r3
 80093be:	f003 fa4f 	bl	800c860 <RCCEx_PLL2_Config>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80093c8:	e00e      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80093ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80093ce:	3330      	adds	r3, #48	@ 0x30
 80093d0:	4618      	mov	r0, r3
 80093d2:	f003 fadd 	bl	800c990 <RCCEx_PLL3_Config>
 80093d6:	4603      	mov	r3, r0
 80093d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80093dc:	e004      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80093e4:	e000      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80093e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10d      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80093f0:	4b99      	ldr	r3, [pc, #612]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80093f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80093fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80093fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009402:	4a95      	ldr	r2, [pc, #596]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009404:	430b      	orrs	r3, r1
 8009406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800940a:	e003      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800940c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009410:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009414:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009420:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009422:	2300      	movs	r3, #0
 8009424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009426:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800942a:	460b      	mov	r3, r1
 800942c:	4313      	orrs	r3, r2
 800942e:	d04e      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8009430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800943c:	d02e      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800943e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009442:	d827      	bhi.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009444:	2bc0      	cmp	r3, #192	@ 0xc0
 8009446:	d02b      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8009448:	2bc0      	cmp	r3, #192	@ 0xc0
 800944a:	d823      	bhi.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800944c:	2b80      	cmp	r3, #128	@ 0x80
 800944e:	d017      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8009450:	2b80      	cmp	r3, #128	@ 0x80
 8009452:	d81f      	bhi.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8009458:	2b40      	cmp	r3, #64	@ 0x40
 800945a:	d007      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800945c:	e01a      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800945e:	4b7e      	ldr	r3, [pc, #504]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009462:	4a7d      	ldr	r2, [pc, #500]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009468:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800946a:	e01a      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800946c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009470:	3308      	adds	r3, #8
 8009472:	4618      	mov	r0, r3
 8009474:	f003 f9f4 	bl	800c860 <RCCEx_PLL2_Config>
 8009478:	4603      	mov	r3, r0
 800947a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800947e:	e010      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009480:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009484:	3330      	adds	r3, #48	@ 0x30
 8009486:	4618      	mov	r0, r3
 8009488:	f003 fa82 	bl	800c990 <RCCEx_PLL3_Config>
 800948c:	4603      	mov	r3, r0
 800948e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009492:	e006      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800949a:	e002      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80094a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10d      	bne.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80094aa:	4b6b      	ldr	r3, [pc, #428]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80094ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80094b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80094b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094bc:	4a66      	ldr	r2, [pc, #408]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80094be:	430b      	orrs	r3, r1
 80094c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80094c4:	e003      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80094ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80094ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80094da:	633b      	str	r3, [r7, #48]	@ 0x30
 80094dc:	2300      	movs	r3, #0
 80094de:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80094e4:	460b      	mov	r3, r1
 80094e6:	4313      	orrs	r3, r2
 80094e8:	d055      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80094ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80094ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80094f2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80094f6:	d031      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80094f8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80094fc:	d82a      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80094fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009502:	d02d      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8009504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009508:	d824      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800950a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800950e:	d029      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8009510:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009514:	d81e      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800951a:	d011      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800951c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009520:	d818      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d020      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8009526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800952a:	d113      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800952c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009530:	3308      	adds	r3, #8
 8009532:	4618      	mov	r0, r3
 8009534:	f003 f994 	bl	800c860 <RCCEx_PLL2_Config>
 8009538:	4603      	mov	r3, r0
 800953a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800953e:	e014      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009544:	3330      	adds	r3, #48	@ 0x30
 8009546:	4618      	mov	r0, r3
 8009548:	f003 fa22 	bl	800c990 <RCCEx_PLL3_Config>
 800954c:	4603      	mov	r3, r0
 800954e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8009552:	e00a      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800955a:	e006      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800955c:	bf00      	nop
 800955e:	e004      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009560:	bf00      	nop
 8009562:	e002      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009564:	bf00      	nop
 8009566:	e000      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800956a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10d      	bne.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8009572:	4b39      	ldr	r3, [pc, #228]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009578:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800957c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009580:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8009584:	4a34      	ldr	r2, [pc, #208]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009586:	430b      	orrs	r3, r1
 8009588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800958c:	e003      	b.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800958e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009592:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8009596:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80095a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095a4:	2300      	movs	r3, #0
 80095a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80095ac:	460b      	mov	r3, r1
 80095ae:	4313      	orrs	r3, r2
 80095b0:	d058      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80095b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80095b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80095be:	d031      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80095c0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80095c4:	d82a      	bhi.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80095c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095ca:	d02d      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80095cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095d0:	d824      	bhi.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80095d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095d6:	d029      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80095d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095dc:	d81e      	bhi.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80095de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e2:	d011      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80095e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e8:	d818      	bhi.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d020      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80095ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095f2:	d113      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80095f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80095f8:	3308      	adds	r3, #8
 80095fa:	4618      	mov	r0, r3
 80095fc:	f003 f930 	bl	800c860 <RCCEx_PLL2_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8009606:	e014      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800960c:	3330      	adds	r3, #48	@ 0x30
 800960e:	4618      	mov	r0, r3
 8009610:	f003 f9be 	bl	800c990 <RCCEx_PLL3_Config>
 8009614:	4603      	mov	r3, r0
 8009616:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800961a:	e00a      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009622:	e006      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009624:	bf00      	nop
 8009626:	e004      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009628:	bf00      	nop
 800962a:	e002      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800962c:	bf00      	nop
 800962e:	e000      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009632:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009636:	2b00      	cmp	r3, #0
 8009638:	d110      	bne.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800963a:	4b07      	ldr	r3, [pc, #28]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800963c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009640:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800964c:	4902      	ldr	r1, [pc, #8]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800964e:	4313      	orrs	r3, r2
 8009650:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009654:	e006      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8009656:	bf00      	nop
 8009658:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009660:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	2100      	movs	r1, #0
 800966e:	6239      	str	r1, [r7, #32]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	627b      	str	r3, [r7, #36]	@ 0x24
 8009676:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800967a:	460b      	mov	r3, r1
 800967c:	4313      	orrs	r3, r2
 800967e:	d055      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8009680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009688:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800968c:	d031      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800968e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009692:	d82a      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009698:	d02d      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800969a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800969e:	d824      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80096a0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80096a4:	d029      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80096a6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80096aa:	d81e      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80096ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b0:	d011      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80096b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b6:	d818      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d020      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80096bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096c0:	d113      	bne.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80096c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80096c6:	3308      	adds	r3, #8
 80096c8:	4618      	mov	r0, r3
 80096ca:	f003 f8c9 	bl	800c860 <RCCEx_PLL2_Config>
 80096ce:	4603      	mov	r3, r0
 80096d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096d4:	e014      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80096d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80096da:	3330      	adds	r3, #48	@ 0x30
 80096dc:	4618      	mov	r0, r3
 80096de:	f003 f957 	bl	800c990 <RCCEx_PLL3_Config>
 80096e2:	4603      	mov	r3, r0
 80096e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096e8:	e00a      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80096f0:	e006      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80096f2:	bf00      	nop
 80096f4:	e004      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80096f6:	bf00      	nop
 80096f8:	e002      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80096fa:	bf00      	nop
 80096fc:	e000      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80096fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009700:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10d      	bne.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8009708:	4b88      	ldr	r3, [pc, #544]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800970a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800970e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8009712:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800971a:	4984      	ldr	r1, [pc, #528]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800971c:	4313      	orrs	r3, r2
 800971e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009722:	e003      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009724:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009728:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800972c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	2100      	movs	r1, #0
 8009736:	61b9      	str	r1, [r7, #24]
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	61fb      	str	r3, [r7, #28]
 800973e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009742:	460b      	mov	r3, r1
 8009744:	4313      	orrs	r3, r2
 8009746:	d03d      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8009748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800974c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009750:	2b03      	cmp	r3, #3
 8009752:	d81c      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8009754:	a201      	add	r2, pc, #4	@ (adr r2, 800975c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8009756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975a:	bf00      	nop
 800975c:	08009797 	.word	0x08009797
 8009760:	0800976d 	.word	0x0800976d
 8009764:	0800977b 	.word	0x0800977b
 8009768:	08009797 	.word	0x08009797
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800976c:	4b6f      	ldr	r3, [pc, #444]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800976e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009770:	4a6e      	ldr	r2, [pc, #440]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009776:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009778:	e00e      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800977a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800977e:	3308      	adds	r3, #8
 8009780:	4618      	mov	r0, r3
 8009782:	f003 f86d 	bl	800c860 <RCCEx_PLL2_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800978c:	e004      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009794:	e000      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8009796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009798:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10d      	bne.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80097a0:	4b62      	ldr	r3, [pc, #392]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80097a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80097a6:	f023 0203 	bic.w	r2, r3, #3
 80097aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80097ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80097b2:	495e      	ldr	r1, [pc, #376]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80097ba:	e003      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80097c0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80097c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	2100      	movs	r1, #0
 80097ce:	6139      	str	r1, [r7, #16]
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	617b      	str	r3, [r7, #20]
 80097d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80097da:	460b      	mov	r3, r1
 80097dc:	4313      	orrs	r3, r2
 80097de:	d03a      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80097e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80097e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80097e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ec:	d00e      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80097ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097f2:	d815      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d017      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80097f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097fc:	d110      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097fe:	4b4b      	ldr	r3, [pc, #300]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009802:	4a4a      	ldr	r2, [pc, #296]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009808:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800980a:	e00e      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800980c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009810:	3308      	adds	r3, #8
 8009812:	4618      	mov	r0, r3
 8009814:	f003 f824 	bl	800c860 <RCCEx_PLL2_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800981e:	e004      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009826:	e000      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8009828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10d      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8009832:	4b3e      	ldr	r3, [pc, #248]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009838:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800983c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009840:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009844:	4939      	ldr	r1, [pc, #228]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009846:	4313      	orrs	r3, r2
 8009848:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800984c:	e003      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009852:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009856:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	2100      	movs	r1, #0
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	f003 0310 	and.w	r3, r3, #16
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800986c:	460b      	mov	r3, r1
 800986e:	4313      	orrs	r3, r2
 8009870:	d038      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8009872:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009876:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800987a:	2b30      	cmp	r3, #48	@ 0x30
 800987c:	d01b      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800987e:	2b30      	cmp	r3, #48	@ 0x30
 8009880:	d815      	bhi.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8009882:	2b10      	cmp	r3, #16
 8009884:	d002      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8009886:	2b20      	cmp	r3, #32
 8009888:	d007      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800988a:	e010      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800988c:	4b27      	ldr	r3, [pc, #156]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800988e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009890:	4a26      	ldr	r2, [pc, #152]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009896:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8009898:	e00e      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800989a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800989e:	3330      	adds	r3, #48	@ 0x30
 80098a0:	4618      	mov	r0, r3
 80098a2:	f003 f875 	bl	800c990 <RCCEx_PLL3_Config>
 80098a6:	4603      	mov	r3, r0
 80098a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80098ac:	e004      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80098b4:	e000      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80098b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10d      	bne.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80098c0:	4b1a      	ldr	r3, [pc, #104]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80098c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80098ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80098ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80098d2:	4916      	ldr	r1, [pc, #88]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80098da:	e003      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80098e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	2100      	movs	r1, #0
 80098ee:	6039      	str	r1, [r7, #0]
 80098f0:	f003 0308 	and.w	r3, r3, #8
 80098f4:	607b      	str	r3, [r7, #4]
 80098f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80098fa:	460b      	mov	r3, r1
 80098fc:	4313      	orrs	r3, r2
 80098fe:	d00c      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8009900:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009906:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800990a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800990e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8009912:	4906      	ldr	r1, [pc, #24]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009914:	4313      	orrs	r3, r2
 8009916:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800991a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800991e:	4618      	mov	r0, r3
 8009920:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8009924:	46bd      	mov	sp, r7
 8009926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800992a:	bf00      	nop
 800992c:	44020c00 	.word	0x44020c00

08009930 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8009930:	b480      	push	{r7}
 8009932:	b08b      	sub	sp, #44	@ 0x2c
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009938:	4bad      	ldr	r3, [pc, #692]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800993a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800993c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009940:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009942:	4bab      	ldr	r3, [pc, #684]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800994c:	4ba8      	ldr	r3, [pc, #672]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800994e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009950:	0a1b      	lsrs	r3, r3, #8
 8009952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009956:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8009958:	4ba5      	ldr	r3, [pc, #660]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800995a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995c:	f003 0310 	and.w	r3, r3, #16
 8009960:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009962:	4ba3      	ldr	r3, [pc, #652]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009966:	08db      	lsrs	r3, r3, #3
 8009968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	fb02 f303 	mul.w	r3, r2, r3
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 8126 	beq.w	8009bd2 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	2b03      	cmp	r3, #3
 800998a:	d053      	beq.n	8009a34 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b03      	cmp	r3, #3
 8009990:	d86f      	bhi.n	8009a72 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d003      	beq.n	80099a0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	2b02      	cmp	r3, #2
 800999c:	d02b      	beq.n	80099f6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800999e:	e068      	b.n	8009a72 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099a0:	4b93      	ldr	r3, [pc, #588]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	08db      	lsrs	r3, r3, #3
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	4a92      	ldr	r2, [pc, #584]	@ (8009bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80099ac:	fa22 f303 	lsr.w	r3, r2, r3
 80099b0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	ee07 3a90 	vmov	s15, r3
 80099b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	ee07 3a90 	vmov	s15, r3
 80099d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80099d8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8009bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80099dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80099f4:	e068      	b.n	8009ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	ee07 3a90 	vmov	s15, r3
 80099fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a00:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009bfc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a12:	ed97 6a04 	vldr	s12, [r7, #16]
 8009a16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8009a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009a32:	e049      	b.n	8009ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009c00 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8009a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	ee07 3a90 	vmov	s15, r3
 8009a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a50:	ed97 6a04 	vldr	s12, [r7, #16]
 8009a54:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8009bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8009a58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009a70:	e02a      	b.n	8009ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a72:	4b5f      	ldr	r3, [pc, #380]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	08db      	lsrs	r3, r3, #3
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	4a5d      	ldr	r2, [pc, #372]	@ (8009bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a82:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	ee07 3a90 	vmov	s15, r3
 8009a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aa6:	ed97 6a04 	vldr	s12, [r7, #16]
 8009aaa:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8009aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009ac6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ac8:	4b49      	ldr	r3, [pc, #292]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ad4:	d121      	bne.n	8009b1a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009ad6:	4b46      	ldr	r3, [pc, #280]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d017      	beq.n	8009b12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009ae2:	4b43      	ldr	r3, [pc, #268]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae6:	0a5b      	lsrs	r3, r3, #9
 8009ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aec:	ee07 3a90 	vmov	s15, r3
 8009af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8009af4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009af8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009afc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b08:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	e006      	b.n	8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	e002      	b.n	8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b20:	4b33      	ldr	r3, [pc, #204]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b2c:	d121      	bne.n	8009b72 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009b2e:	4b30      	ldr	r3, [pc, #192]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d017      	beq.n	8009b6a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b3e:	0c1b      	lsrs	r3, r3, #16
 8009b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b44:	ee07 3a90 	vmov	s15, r3
 8009b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009b4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b50:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009b54:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b60:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	605a      	str	r2, [r3, #4]
 8009b68:	e006      	b.n	8009b78 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	605a      	str	r2, [r3, #4]
 8009b70:	e002      	b.n	8009b78 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b78:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b84:	d121      	bne.n	8009bca <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009b86:	4b1a      	ldr	r3, [pc, #104]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d017      	beq.n	8009bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009b92:	4b17      	ldr	r3, [pc, #92]	@ (8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b96:	0e1b      	lsrs	r3, r3, #24
 8009b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b9c:	ee07 3a90 	vmov	s15, r3
 8009ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8009ba4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009bac:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bb8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009bc0:	e010      	b.n	8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	609a      	str	r2, [r3, #8]
}
 8009bc8:	e00c      	b.n	8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	609a      	str	r2, [r3, #8]
}
 8009bd0:	e008      	b.n	8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	609a      	str	r2, [r3, #8]
}
 8009be4:	bf00      	nop
 8009be6:	372c      	adds	r7, #44	@ 0x2c
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	44020c00 	.word	0x44020c00
 8009bf4:	03d09000 	.word	0x03d09000
 8009bf8:	46000000 	.word	0x46000000
 8009bfc:	4a742400 	.word	0x4a742400
 8009c00:	4bbebc20 	.word	0x4bbebc20

08009c04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b08b      	sub	sp, #44	@ 0x2c
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009c0c:	4bad      	ldr	r3, [pc, #692]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c14:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009c16:	4bab      	ldr	r3, [pc, #684]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8009c20:	4ba8      	ldr	r3, [pc, #672]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c24:	0a1b      	lsrs	r3, r3, #8
 8009c26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c2a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8009c2c:	4ba5      	ldr	r3, [pc, #660]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009c36:	4ba3      	ldr	r3, [pc, #652]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3a:	08db      	lsrs	r3, r3, #3
 8009c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	fb02 f303 	mul.w	r3, r2, r3
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 8126 	beq.w	8009ea6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d053      	beq.n	8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	d86f      	bhi.n	8009d46 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d003      	beq.n	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d02b      	beq.n	8009cca <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8009c72:	e068      	b.n	8009d46 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c74:	4b93      	ldr	r3, [pc, #588]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	08db      	lsrs	r3, r3, #3
 8009c7a:	f003 0303 	and.w	r3, r3, #3
 8009c7e:	4a92      	ldr	r2, [pc, #584]	@ (8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009c80:	fa22 f303 	lsr.w	r3, r2, r3
 8009c84:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	ee07 3a90 	vmov	s15, r3
 8009c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca8:	ed97 6a04 	vldr	s12, [r7, #16]
 8009cac:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8009ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8009cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009cc8:	e068      	b.n	8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	ee07 3a90 	vmov	s15, r3
 8009cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce6:	ed97 6a04 	vldr	s12, [r7, #16]
 8009cea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8009cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009d06:	e049      	b.n	8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	ee07 3a90 	vmov	s15, r3
 8009d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d12:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8009d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	ee07 3a90 	vmov	s15, r3
 8009d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d24:	ed97 6a04 	vldr	s12, [r7, #16]
 8009d28:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8009ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8009d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d40:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009d44:	e02a      	b.n	8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d46:	4b5f      	ldr	r3, [pc, #380]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	08db      	lsrs	r3, r3, #3
 8009d4c:	f003 0303 	and.w	r3, r3, #3
 8009d50:	4a5d      	ldr	r2, [pc, #372]	@ (8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009d52:	fa22 f303 	lsr.w	r3, r2, r3
 8009d56:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	ee07 3a90 	vmov	s15, r3
 8009d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	ee07 3a90 	vmov	s15, r3
 8009d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8009d7e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8009d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009d9a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d9c:	4b49      	ldr	r3, [pc, #292]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009da4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009da8:	d121      	bne.n	8009dee <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009daa:	4b46      	ldr	r3, [pc, #280]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d017      	beq.n	8009de6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009db6:	4b43      	ldr	r3, [pc, #268]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dba:	0a5b      	lsrs	r3, r3, #9
 8009dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dc0:	ee07 3a90 	vmov	s15, r3
 8009dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8009dc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009dd0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ddc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e006      	b.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	601a      	str	r2, [r3, #0]
 8009dec:	e002      	b.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009df4:	4b33      	ldr	r3, [pc, #204]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e00:	d121      	bne.n	8009e46 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009e02:	4b30      	ldr	r3, [pc, #192]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d017      	beq.n	8009e3e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e12:	0c1b      	lsrs	r3, r3, #16
 8009e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e18:	ee07 3a90 	vmov	s15, r3
 8009e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009e20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e24:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009e28:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e34:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	605a      	str	r2, [r3, #4]
 8009e3c:	e006      	b.n	8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	605a      	str	r2, [r3, #4]
 8009e44:	e002      	b.n	8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e58:	d121      	bne.n	8009e9e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d017      	beq.n	8009e96 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009e66:	4b17      	ldr	r3, [pc, #92]	@ (8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8009e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e6a:	0e1b      	lsrs	r3, r3, #24
 8009e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8009e78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009e80:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e94:	e010      	b.n	8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	609a      	str	r2, [r3, #8]
}
 8009e9c:	e00c      	b.n	8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	609a      	str	r2, [r3, #8]
}
 8009ea4:	e008      	b.n	8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	609a      	str	r2, [r3, #8]
}
 8009eb8:	bf00      	nop
 8009eba:	372c      	adds	r7, #44	@ 0x2c
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	44020c00 	.word	0x44020c00
 8009ec8:	03d09000 	.word	0x03d09000
 8009ecc:	46000000 	.word	0x46000000
 8009ed0:	4a742400 	.word	0x4a742400
 8009ed4:	4bbebc20 	.word	0x4bbebc20

08009ed8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b08b      	sub	sp, #44	@ 0x2c
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009ee0:	4bad      	ldr	r3, [pc, #692]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009eea:	4bab      	ldr	r3, [pc, #684]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8009ef4:	4ba8      	ldr	r3, [pc, #672]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef8:	0a1b      	lsrs	r3, r3, #8
 8009efa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009efe:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8009f00:	4ba5      	ldr	r3, [pc, #660]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f04:	f003 0310 	and.w	r3, r3, #16
 8009f08:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009f0a:	4ba3      	ldr	r3, [pc, #652]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f0e:	08db      	lsrs	r3, r3, #3
 8009f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	fb02 f303 	mul.w	r3, r2, r3
 8009f1a:	ee07 3a90 	vmov	s15, r3
 8009f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f22:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 8126 	beq.w	800a17a <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d053      	beq.n	8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d86f      	bhi.n	800a01a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d003      	beq.n	8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d02b      	beq.n	8009f9e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8009f46:	e068      	b.n	800a01a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f48:	4b93      	ldr	r3, [pc, #588]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	08db      	lsrs	r3, r3, #3
 8009f4e:	f003 0303 	and.w	r3, r3, #3
 8009f52:	4a92      	ldr	r2, [pc, #584]	@ (800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009f54:	fa22 f303 	lsr.w	r3, r2, r3
 8009f58:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	ee07 3a90 	vmov	s15, r3
 8009f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f7c:	ed97 6a04 	vldr	s12, [r7, #16]
 8009f80:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8009f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f98:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009f9c:	e068      	b.n	800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	ee07 3a90 	vmov	s15, r3
 8009fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fba:	ed97 6a04 	vldr	s12, [r7, #16]
 8009fbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8009fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009fda:	e049      	b.n	800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	ee07 3a90 	vmov	s15, r3
 8009fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800a1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8009fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff8:	ed97 6a04 	vldr	s12, [r7, #16]
 8009ffc:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a014:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800a018:	e02a      	b.n	800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a01a:	4b5f      	ldr	r3, [pc, #380]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	08db      	lsrs	r3, r3, #3
 800a020:	f003 0303 	and.w	r3, r3, #3
 800a024:	4a5d      	ldr	r2, [pc, #372]	@ (800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a026:	fa22 f303 	lsr.w	r3, r2, r3
 800a02a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	ee07 3a90 	vmov	s15, r3
 800a03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	ee07 3a90 	vmov	s15, r3
 800a04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04e:	ed97 6a04 	vldr	s12, [r7, #16]
 800a052:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800a06e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a070:	4b49      	ldr	r3, [pc, #292]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a07c:	d121      	bne.n	800a0c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a07e:	4b46      	ldr	r3, [pc, #280]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d017      	beq.n	800a0ba <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a08a:	4b43      	ldr	r3, [pc, #268]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a08c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a08e:	0a5b      	lsrs	r3, r3, #9
 800a090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a094:	ee07 3a90 	vmov	s15, r3
 800a098:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800a09c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a0a4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a0a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	e006      	b.n	800a0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	e002      	b.n	800a0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0c8:	4b33      	ldr	r3, [pc, #204]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0d4:	d121      	bne.n	800a11a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a0d6:	4b30      	ldr	r3, [pc, #192]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d017      	beq.n	800a112 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a0e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a0e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ec:	ee07 3a90 	vmov	s15, r3
 800a0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a0f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a0fc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a108:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	605a      	str	r2, [r3, #4]
 800a110:	e006      	b.n	800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	605a      	str	r2, [r3, #4]
 800a118:	e002      	b.n	800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a120:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a12c:	d121      	bne.n	800a172 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a12e:	4b1a      	ldr	r3, [pc, #104]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d017      	beq.n	800a16a <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a13a:	4b17      	ldr	r3, [pc, #92]	@ (800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a13e:	0e1b      	lsrs	r3, r3, #24
 800a140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a144:	ee07 3a90 	vmov	s15, r3
 800a148:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800a14c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a150:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a154:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a15c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a160:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800a168:	e010      	b.n	800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	609a      	str	r2, [r3, #8]
}
 800a170:	e00c      	b.n	800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	609a      	str	r2, [r3, #8]
}
 800a178:	e008      	b.n	800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	609a      	str	r2, [r3, #8]
}
 800a18c:	bf00      	nop
 800a18e:	372c      	adds	r7, #44	@ 0x2c
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	44020c00 	.word	0x44020c00
 800a19c:	03d09000 	.word	0x03d09000
 800a1a0:	46000000 	.word	0x46000000
 800a1a4:	4a742400 	.word	0x4a742400
 800a1a8:	4bbebc20 	.word	0x4bbebc20

0800a1ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a1ac:	b590      	push	{r4, r7, lr}
 800a1ae:	b08f      	sub	sp, #60	@ 0x3c
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a1b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1ba:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800a1be:	4321      	orrs	r1, r4
 800a1c0:	d150      	bne.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a1c2:	4b26      	ldr	r3, [pc, #152]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a1c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1cc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a1ce:	4b23      	ldr	r3, [pc, #140]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a1d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1d4:	f003 0302 	and.w	r3, r3, #2
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d108      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1e2:	d104      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a1e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ea:	f002 bb2a 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a1ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a1f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1fc:	d108      	bne.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a204:	d104      	bne.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800a206:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a20a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a20c:	f002 bb19 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800a210:	4b12      	ldr	r3, [pc, #72]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a218:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a21c:	d119      	bne.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800a21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a220:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a224:	d115      	bne.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a226:	4b0d      	ldr	r3, [pc, #52]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800a22e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a232:	d30a      	bcc.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800a234:	4b09      	ldr	r3, [pc, #36]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	0a1b      	lsrs	r3, r3, #8
 800a23a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a23e:	4a08      	ldr	r2, [pc, #32]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a240:	fbb2 f3f3 	udiv	r3, r2, r3
 800a244:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a246:	f002 bafc 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a24e:	f002 baf8 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a252:	2300      	movs	r3, #0
 800a254:	637b      	str	r3, [r7, #52]	@ 0x34
 800a256:	f002 baf4 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a25a:	bf00      	nop
 800a25c:	44020c00 	.word	0x44020c00
 800a260:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800a264:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a268:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800a26c:	ea50 0104 	orrs.w	r1, r0, r4
 800a270:	f001 8275 	beq.w	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800a274:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a278:	2801      	cmp	r0, #1
 800a27a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800a27e:	f082 82dd 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a282:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a286:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800a28a:	ea50 0104 	orrs.w	r1, r0, r4
 800a28e:	f001 816c 	beq.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800a292:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a296:	2801      	cmp	r0, #1
 800a298:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800a29c:	f082 82ce 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a2a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2a4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800a2a8:	ea50 0104 	orrs.w	r1, r0, r4
 800a2ac:	f001 8602 	beq.w	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800a2b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2b4:	2801      	cmp	r0, #1
 800a2b6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800a2ba:	f082 82bf 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a2be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2c2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800a2c6:	ea50 0104 	orrs.w	r1, r0, r4
 800a2ca:	f001 854c 	beq.w	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800a2ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2d2:	2801      	cmp	r0, #1
 800a2d4:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800a2d8:	f082 82b0 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a2dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2e0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800a2e4:	ea50 0104 	orrs.w	r1, r0, r4
 800a2e8:	f001 849e 	beq.w	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800a2ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2f0:	2801      	cmp	r0, #1
 800a2f2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800a2f6:	f082 82a1 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a2fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2fe:	f1a1 0420 	sub.w	r4, r1, #32
 800a302:	ea50 0104 	orrs.w	r1, r0, r4
 800a306:	f001 83e8 	beq.w	800bada <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800a30a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a30e:	2801      	cmp	r0, #1
 800a310:	f171 0120 	sbcs.w	r1, r1, #32
 800a314:	f082 8292 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a31c:	f1a1 0410 	sub.w	r4, r1, #16
 800a320:	ea50 0104 	orrs.w	r1, r0, r4
 800a324:	f002 8256 	beq.w	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a32c:	2801      	cmp	r0, #1
 800a32e:	f171 0110 	sbcs.w	r1, r1, #16
 800a332:	f082 8283 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a336:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a33a:	f1a1 0408 	sub.w	r4, r1, #8
 800a33e:	ea50 0104 	orrs.w	r1, r0, r4
 800a342:	f002 81cc 	beq.w	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800a346:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a34a:	2801      	cmp	r0, #1
 800a34c:	f171 0108 	sbcs.w	r1, r1, #8
 800a350:	f082 8274 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a354:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a358:	1f0c      	subs	r4, r1, #4
 800a35a:	ea50 0104 	orrs.w	r1, r0, r4
 800a35e:	f001 8648 	beq.w	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800a362:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a366:	2801      	cmp	r0, #1
 800a368:	f171 0104 	sbcs.w	r1, r1, #4
 800a36c:	f082 8266 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a370:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a374:	1e8c      	subs	r4, r1, #2
 800a376:	ea50 0104 	orrs.w	r1, r0, r4
 800a37a:	f002 8143 	beq.w	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800a37e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a382:	2801      	cmp	r0, #1
 800a384:	f171 0102 	sbcs.w	r1, r1, #2
 800a388:	f082 8258 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a38c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a390:	1e4c      	subs	r4, r1, #1
 800a392:	ea50 0104 	orrs.w	r1, r0, r4
 800a396:	f002 80ce 	beq.w	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800a39a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a39e:	2801      	cmp	r0, #1
 800a3a0:	f171 0101 	sbcs.w	r1, r1, #1
 800a3a4:	f082 824a 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a3a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3ac:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800a3b0:	4321      	orrs	r1, r4
 800a3b2:	f002 8059 	beq.w	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800a3b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3ba:	4cd9      	ldr	r4, [pc, #868]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800a3bc:	42a0      	cmp	r0, r4
 800a3be:	f171 0100 	sbcs.w	r1, r1, #0
 800a3c2:	f082 823b 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a3c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3ca:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800a3ce:	4321      	orrs	r1, r4
 800a3d0:	f001 87d9 	beq.w	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800a3d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3d8:	4cd2      	ldr	r4, [pc, #840]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800a3da:	42a0      	cmp	r0, r4
 800a3dc:	f171 0100 	sbcs.w	r1, r1, #0
 800a3e0:	f082 822c 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a3e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3e8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800a3ec:	4321      	orrs	r1, r4
 800a3ee:	f001 8751 	beq.w	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800a3f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3f6:	4ccc      	ldr	r4, [pc, #816]	@ (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800a3f8:	42a0      	cmp	r0, r4
 800a3fa:	f171 0100 	sbcs.w	r1, r1, #0
 800a3fe:	f082 821d 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a402:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a406:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800a40a:	4321      	orrs	r1, r4
 800a40c:	f001 869a 	beq.w	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800a410:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a414:	4cc5      	ldr	r4, [pc, #788]	@ (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800a416:	42a0      	cmp	r0, r4
 800a418:	f171 0100 	sbcs.w	r1, r1, #0
 800a41c:	f082 820e 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a420:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a424:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800a428:	4321      	orrs	r1, r4
 800a42a:	f001 8612 	beq.w	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800a42e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a432:	4cbf      	ldr	r4, [pc, #764]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800a434:	42a0      	cmp	r0, r4
 800a436:	f171 0100 	sbcs.w	r1, r1, #0
 800a43a:	f082 81ff 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a43e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a442:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800a446:	4321      	orrs	r1, r4
 800a448:	f002 817e 	beq.w	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800a44c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a450:	4cb8      	ldr	r4, [pc, #736]	@ (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a452:	42a0      	cmp	r0, r4
 800a454:	f171 0100 	sbcs.w	r1, r1, #0
 800a458:	f082 81f0 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a45c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a460:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800a464:	4321      	orrs	r1, r4
 800a466:	f000 829e 	beq.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800a46a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a46e:	4cb2      	ldr	r4, [pc, #712]	@ (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a470:	42a0      	cmp	r0, r4
 800a472:	f171 0100 	sbcs.w	r1, r1, #0
 800a476:	f082 81e1 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a47a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a47e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800a482:	4321      	orrs	r1, r4
 800a484:	f000 826d 	beq.w	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800a488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a48c:	4cab      	ldr	r4, [pc, #684]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a48e:	42a0      	cmp	r0, r4
 800a490:	f171 0100 	sbcs.w	r1, r1, #0
 800a494:	f082 81d2 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a49c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800a4a0:	4321      	orrs	r1, r4
 800a4a2:	f001 800d 	beq.w	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800a4a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4aa:	4ca5      	ldr	r4, [pc, #660]	@ (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a4ac:	42a0      	cmp	r0, r4
 800a4ae:	f171 0100 	sbcs.w	r1, r1, #0
 800a4b2:	f082 81c3 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a4b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4ba:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800a4be:	4321      	orrs	r1, r4
 800a4c0:	f000 81d0 	beq.w	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800a4c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4c8:	4c9e      	ldr	r4, [pc, #632]	@ (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a4ca:	42a0      	cmp	r0, r4
 800a4cc:	f171 0100 	sbcs.w	r1, r1, #0
 800a4d0:	f082 81b4 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a4d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4d8:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800a4dc:	4321      	orrs	r1, r4
 800a4de:	f000 8142 	beq.w	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800a4e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4e6:	4c98      	ldr	r4, [pc, #608]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a4e8:	42a0      	cmp	r0, r4
 800a4ea:	f171 0100 	sbcs.w	r1, r1, #0
 800a4ee:	f082 81a5 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a4f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4f6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800a4fa:	4321      	orrs	r1, r4
 800a4fc:	f001 824e 	beq.w	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800a500:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a504:	4c91      	ldr	r4, [pc, #580]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800a506:	42a0      	cmp	r0, r4
 800a508:	f171 0100 	sbcs.w	r1, r1, #0
 800a50c:	f082 8196 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a510:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a514:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800a518:	4321      	orrs	r1, r4
 800a51a:	f001 8197 	beq.w	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800a51e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a522:	4c8b      	ldr	r4, [pc, #556]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800a524:	42a0      	cmp	r0, r4
 800a526:	f171 0100 	sbcs.w	r1, r1, #0
 800a52a:	f082 8187 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a52e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a532:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800a536:	4321      	orrs	r1, r4
 800a538:	f001 8154 	beq.w	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800a53c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a540:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800a544:	f171 0100 	sbcs.w	r1, r1, #0
 800a548:	f082 8178 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a54c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a550:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800a554:	4321      	orrs	r1, r4
 800a556:	f001 80b7 	beq.w	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800a55a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a55e:	f248 0401 	movw	r4, #32769	@ 0x8001
 800a562:	42a0      	cmp	r0, r4
 800a564:	f171 0100 	sbcs.w	r1, r1, #0
 800a568:	f082 8168 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a56c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a570:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800a574:	4321      	orrs	r1, r4
 800a576:	f001 8064 	beq.w	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800a57a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a57e:	f244 0401 	movw	r4, #16385	@ 0x4001
 800a582:	42a0      	cmp	r0, r4
 800a584:	f171 0100 	sbcs.w	r1, r1, #0
 800a588:	f082 8158 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a58c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a590:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800a594:	4321      	orrs	r1, r4
 800a596:	f001 8011 	beq.w	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800a59a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a59e:	f242 0401 	movw	r4, #8193	@ 0x2001
 800a5a2:	42a0      	cmp	r0, r4
 800a5a4:	f171 0100 	sbcs.w	r1, r1, #0
 800a5a8:	f082 8148 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a5ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5b0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800a5b4:	4321      	orrs	r1, r4
 800a5b6:	f000 871e 	beq.w	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800a5ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5be:	f241 0401 	movw	r4, #4097	@ 0x1001
 800a5c2:	42a0      	cmp	r0, r4
 800a5c4:	f171 0100 	sbcs.w	r1, r1, #0
 800a5c8:	f082 8138 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a5cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5d0:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800a5d4:	4321      	orrs	r1, r4
 800a5d6:	f000 86a8 	beq.w	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800a5da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5de:	f640 0401 	movw	r4, #2049	@ 0x801
 800a5e2:	42a0      	cmp	r0, r4
 800a5e4:	f171 0100 	sbcs.w	r1, r1, #0
 800a5e8:	f082 8128 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a5ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5f0:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800a5f4:	4321      	orrs	r1, r4
 800a5f6:	f000 8632 	beq.w	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800a5fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5fe:	f240 4401 	movw	r4, #1025	@ 0x401
 800a602:	42a0      	cmp	r0, r4
 800a604:	f171 0100 	sbcs.w	r1, r1, #0
 800a608:	f082 8118 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a60c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a610:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800a614:	4321      	orrs	r1, r4
 800a616:	f000 85b0 	beq.w	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800a61a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a61e:	f240 2401 	movw	r4, #513	@ 0x201
 800a622:	42a0      	cmp	r0, r4
 800a624:	f171 0100 	sbcs.w	r1, r1, #0
 800a628:	f082 8108 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a62c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a630:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800a634:	4321      	orrs	r1, r4
 800a636:	f000 8535 	beq.w	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800a63a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a63e:	f240 1401 	movw	r4, #257	@ 0x101
 800a642:	42a0      	cmp	r0, r4
 800a644:	f171 0100 	sbcs.w	r1, r1, #0
 800a648:	f082 80f8 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a64c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a650:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800a654:	4321      	orrs	r1, r4
 800a656:	f000 84ba 	beq.w	800afce <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800a65a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a65e:	2881      	cmp	r0, #129	@ 0x81
 800a660:	f171 0100 	sbcs.w	r1, r1, #0
 800a664:	f082 80ea 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a66c:	2821      	cmp	r0, #33	@ 0x21
 800a66e:	f171 0100 	sbcs.w	r1, r1, #0
 800a672:	d26f      	bcs.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a674:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a678:	4301      	orrs	r1, r0
 800a67a:	f002 80df 	beq.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a67e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a682:	1e42      	subs	r2, r0, #1
 800a684:	f141 33ff 	adc.w	r3, r1, #4294967295
 800a688:	2a20      	cmp	r2, #32
 800a68a:	f173 0100 	sbcs.w	r1, r3, #0
 800a68e:	f082 80d5 	bcs.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a692:	2a1f      	cmp	r2, #31
 800a694:	f202 80d2 	bhi.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a698:	a101      	add	r1, pc, #4	@ (adr r1, 800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800a69a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a69e:	bf00      	nop
 800a6a0:	0800aa01 	.word	0x0800aa01
 800a6a4:	0800aacd 	.word	0x0800aacd
 800a6a8:	0800c83d 	.word	0x0800c83d
 800a6ac:	0800ab8d 	.word	0x0800ab8d
 800a6b0:	0800c83d 	.word	0x0800c83d
 800a6b4:	0800c83d 	.word	0x0800c83d
 800a6b8:	0800c83d 	.word	0x0800c83d
 800a6bc:	0800ac5d 	.word	0x0800ac5d
 800a6c0:	0800c83d 	.word	0x0800c83d
 800a6c4:	0800c83d 	.word	0x0800c83d
 800a6c8:	0800c83d 	.word	0x0800c83d
 800a6cc:	0800c83d 	.word	0x0800c83d
 800a6d0:	0800c83d 	.word	0x0800c83d
 800a6d4:	0800c83d 	.word	0x0800c83d
 800a6d8:	0800c83d 	.word	0x0800c83d
 800a6dc:	0800ad3f 	.word	0x0800ad3f
 800a6e0:	0800c83d 	.word	0x0800c83d
 800a6e4:	0800c83d 	.word	0x0800c83d
 800a6e8:	0800c83d 	.word	0x0800c83d
 800a6ec:	0800c83d 	.word	0x0800c83d
 800a6f0:	0800c83d 	.word	0x0800c83d
 800a6f4:	0800c83d 	.word	0x0800c83d
 800a6f8:	0800c83d 	.word	0x0800c83d
 800a6fc:	0800c83d 	.word	0x0800c83d
 800a700:	0800c83d 	.word	0x0800c83d
 800a704:	0800c83d 	.word	0x0800c83d
 800a708:	0800c83d 	.word	0x0800c83d
 800a70c:	0800c83d 	.word	0x0800c83d
 800a710:	0800c83d 	.word	0x0800c83d
 800a714:	0800c83d 	.word	0x0800c83d
 800a718:	0800c83d 	.word	0x0800c83d
 800a71c:	0800ae15 	.word	0x0800ae15
 800a720:	80000001 	.word	0x80000001
 800a724:	40000001 	.word	0x40000001
 800a728:	20000001 	.word	0x20000001
 800a72c:	10000001 	.word	0x10000001
 800a730:	08000001 	.word	0x08000001
 800a734:	04000001 	.word	0x04000001
 800a738:	00800001 	.word	0x00800001
 800a73c:	00400001 	.word	0x00400001
 800a740:	00200001 	.word	0x00200001
 800a744:	00100001 	.word	0x00100001
 800a748:	00080001 	.word	0x00080001
 800a74c:	00040001 	.word	0x00040001
 800a750:	00020001 	.word	0x00020001
 800a754:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a758:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800a75c:	430b      	orrs	r3, r1
 800a75e:	f000 83c4 	beq.w	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800a762:	f002 b86b 	b.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a766:	4ba1      	ldr	r3, [pc, #644]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a76c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a770:	633b      	str	r3, [r7, #48]	@ 0x30
 800a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a774:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a778:	d036      	beq.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800a77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a780:	d86b      	bhi.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a784:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a788:	d02b      	beq.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a790:	d863      	bhi.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a798:	d01b      	beq.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7a0:	d85b      	bhi.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d004      	beq.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ae:	d008      	beq.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800a7b0:	e053      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7b2:	f107 0320 	add.w	r3, r7, #32
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff f8ba 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7c0:	e04e      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c2:	f107 0314 	add.w	r3, r7, #20
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff fa1c 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7d0:	e046      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7d2:	f107 0308 	add.w	r3, r7, #8
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7ff fb7e 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7e0:	e03e      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a7e2:	4b83      	ldr	r3, [pc, #524]	@ (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a7e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7e6:	e03b      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7e8:	4b80      	ldr	r3, [pc, #512]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a7ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7f4:	4b7d      	ldr	r3, [pc, #500]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 0302 	and.w	r3, r3, #2
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d10c      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800a800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d109      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a806:	4b79      	ldr	r3, [pc, #484]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	08db      	lsrs	r3, r3, #3
 800a80c:	f003 0303 	and.w	r3, r3, #3
 800a810:	4a78      	ldr	r2, [pc, #480]	@ (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a812:	fa22 f303 	lsr.w	r3, r2, r3
 800a816:	637b      	str	r3, [r7, #52]	@ 0x34
 800a818:	e01e      	b.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a81a:	4b74      	ldr	r3, [pc, #464]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a826:	d106      	bne.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a82e:	d102      	bne.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a830:	4b71      	ldr	r3, [pc, #452]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800a832:	637b      	str	r3, [r7, #52]	@ 0x34
 800a834:	e010      	b.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a836:	4b6d      	ldr	r3, [pc, #436]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a83e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a842:	d106      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800a844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a846:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a84a:	d102      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a84c:	4b6b      	ldr	r3, [pc, #428]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a850:	e002      	b.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a856:	e003      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800a858:	e002      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a85e:	bf00      	nop
          }
        }
        break;
 800a860:	f001 bfef 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a864:	4b61      	ldr	r3, [pc, #388]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a86a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800a86e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a872:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a876:	d036      	beq.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a87e:	d86b      	bhi.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a882:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a886:	d02b      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800a888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a88e:	d863      	bhi.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a896:	d01b      	beq.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a89e:	d85b      	bhi.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d004      	beq.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a8ac:	d008      	beq.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800a8ae:	e053      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8b0:	f107 0320 	add.w	r3, r7, #32
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff f83b 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8be:	e04e      	b.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c0:	f107 0314 	add.w	r3, r7, #20
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7ff f99d 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8ce:	e046      	b.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d0:	f107 0308 	add.w	r3, r7, #8
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff faff 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8de:	e03e      	b.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a8e0:	4b43      	ldr	r3, [pc, #268]	@ (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a8e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8e4:	e03b      	b.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8e6:	4b41      	ldr	r3, [pc, #260]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a8e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a8ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8f2:	4b3e      	ldr	r3, [pc, #248]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0302 	and.w	r3, r3, #2
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d10c      	bne.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800a8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a900:	2b00      	cmp	r3, #0
 800a902:	d109      	bne.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a904:	4b39      	ldr	r3, [pc, #228]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	08db      	lsrs	r3, r3, #3
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	4a39      	ldr	r2, [pc, #228]	@ (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a910:	fa22 f303 	lsr.w	r3, r2, r3
 800a914:	637b      	str	r3, [r7, #52]	@ 0x34
 800a916:	e01e      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a918:	4b34      	ldr	r3, [pc, #208]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a924:	d106      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a92c:	d102      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a92e:	4b32      	ldr	r3, [pc, #200]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800a930:	637b      	str	r3, [r7, #52]	@ 0x34
 800a932:	e010      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a934:	4b2d      	ldr	r3, [pc, #180]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a93c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a940:	d106      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800a942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a948:	d102      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a94a:	4b2c      	ldr	r3, [pc, #176]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a94c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a94e:	e002      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a954:	e003      	b.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800a956:	e002      	b.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800a958:	2300      	movs	r3, #0
 800a95a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a95c:	bf00      	nop
          }
        }
        break;
 800a95e:	f001 bf70 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800a962:	4b22      	ldr	r3, [pc, #136]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a964:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a96c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800a96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a970:	2b00      	cmp	r3, #0
 800a972:	d108      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a974:	f107 0320 	add.w	r3, r7, #32
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fe ffd9 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a980:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a982:	f001 bf5e 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800a986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a988:	2b40      	cmp	r3, #64	@ 0x40
 800a98a:	d108      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a98c:	f107 0314 	add.w	r3, r7, #20
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff f937 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a99a:	f001 bf52 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9a2:	f001 bf4e 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800a9a6:	4b11      	ldr	r3, [pc, #68]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a9a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a9ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9b0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d108      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9b8:	f107 0320 	add.w	r3, r7, #32
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe ffb7 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a9c6:	f001 bf3c 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9cc:	2b80      	cmp	r3, #128	@ 0x80
 800a9ce:	d108      	bne.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d0:	f107 0314 	add.w	r3, r7, #20
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff f915 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9de:	f001 bf30 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9e6:	f001 bf2c 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a9ea:	bf00      	nop
 800a9ec:	44020c00 	.word	0x44020c00
 800a9f0:	00bb8000 	.word	0x00bb8000
 800a9f4:	03d09000 	.word	0x03d09000
 800a9f8:	003d0900 	.word	0x003d0900
 800a9fc:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800aa00:	4b9d      	ldr	r3, [pc, #628]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800aa02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aa06:	f003 0307 	and.w	r3, r3, #7
 800aa0a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d104      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800aa12:	f7fc ffd7 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 800aa16:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800aa18:	f001 bf13 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800aa1c:	4b96      	ldr	r3, [pc, #600]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa28:	d10a      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d107      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa30:	f107 0314 	add.w	r3, r7, #20
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff f8e5 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa3e:	e043      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800aa40:	4b8d      	ldr	r3, [pc, #564]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa4c:	d10a      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d107      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa54:	f107 0308 	add.w	r3, r7, #8
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff fa3d 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa62:	e031      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800aa64:	4b84      	ldr	r3, [pc, #528]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d10c      	bne.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800aa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d109      	bne.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa76:	4b80      	ldr	r3, [pc, #512]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	08db      	lsrs	r3, r3, #3
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	4a7e      	ldr	r2, [pc, #504]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800aa82:	fa22 f303 	lsr.w	r3, r2, r3
 800aa86:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa88:	e01e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800aa8a:	4b7b      	ldr	r3, [pc, #492]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa96:	d105      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9a:	2b04      	cmp	r3, #4
 800aa9c:	d102      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800aa9e:	4b78      	ldr	r3, [pc, #480]	@ (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800aaa0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa2:	e011      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800aaa4:	4b74      	ldr	r3, [pc, #464]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800aaa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d106      	bne.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800aab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab4:	2b05      	cmp	r3, #5
 800aab6:	d103      	bne.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800aab8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aabc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aabe:	e003      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aac4:	f001 bebd 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aac8:	f001 bebb 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800aacc:	4b6a      	ldr	r3, [pc, #424]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800aace:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aad6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800aad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d104      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800aade:	f7fc ff5b 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800aae2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800aae4:	f001 bead 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800aae8:	4b63      	ldr	r3, [pc, #396]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaf4:	d10a      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf8:	2b08      	cmp	r3, #8
 800aafa:	d107      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aafc:	f107 0314 	add.w	r3, r7, #20
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff f87f 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab0a:	e03d      	b.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0e:	2b10      	cmp	r3, #16
 800ab10:	d108      	bne.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab12:	f107 0308 	add.w	r3, r7, #8
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff f9de 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab20:	f001 be8f 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ab24:	4b54      	ldr	r3, [pc, #336]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 0302 	and.w	r3, r3, #2
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d10c      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800ab30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab32:	2b18      	cmp	r3, #24
 800ab34:	d109      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab36:	4b50      	ldr	r3, [pc, #320]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	08db      	lsrs	r3, r3, #3
 800ab3c:	f003 0303 	and.w	r3, r3, #3
 800ab40:	4a4e      	ldr	r2, [pc, #312]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800ab42:	fa22 f303 	lsr.w	r3, r2, r3
 800ab46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab48:	e01e      	b.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800ab4a:	4b4b      	ldr	r3, [pc, #300]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab56:	d105      	bne.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ab58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5a:	2b20      	cmp	r3, #32
 800ab5c:	d102      	bne.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800ab5e:	4b48      	ldr	r3, [pc, #288]	@ (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800ab60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab62:	e011      	b.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ab64:	4b44      	ldr	r3, [pc, #272]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ab66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab6a:	f003 0302 	and.w	r3, r3, #2
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d106      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800ab72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab74:	2b28      	cmp	r3, #40	@ 0x28
 800ab76:	d103      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800ab78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab7e:	e003      	b.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800ab80:	2300      	movs	r3, #0
 800ab82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab84:	f001 be5d 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab88:	f001 be5b 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ab8c:	4b3a      	ldr	r3, [pc, #232]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ab8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ab92:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800ab96:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d104      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab9e:	f7fc fefb 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800aba2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800aba4:	f001 be4d 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800aba8:	4b33      	ldr	r3, [pc, #204]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abb4:	d10a      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	2b40      	cmp	r3, #64	@ 0x40
 800abba:	d107      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abbc:	f107 0314 	add.w	r3, r7, #20
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff f81f 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800abca:	e045      	b.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800abcc:	4b2a      	ldr	r3, [pc, #168]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abd8:	d10a      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800abda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abdc:	2b80      	cmp	r3, #128	@ 0x80
 800abde:	d107      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe0:	f107 0308 	add.w	r3, r7, #8
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7ff f977 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	637b      	str	r3, [r7, #52]	@ 0x34
 800abee:	e033      	b.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800abf0:	4b21      	ldr	r3, [pc, #132]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0302 	and.w	r3, r3, #2
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d10c      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800abfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfe:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac00:	d109      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac02:	4b1d      	ldr	r3, [pc, #116]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	08db      	lsrs	r3, r3, #3
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	4a1b      	ldr	r2, [pc, #108]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800ac0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac14:	e020      	b.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800ac16:	4b18      	ldr	r3, [pc, #96]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac22:	d106      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800ac24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac2a:	d102      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800ac2c:	4b14      	ldr	r3, [pc, #80]	@ (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800ac2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac30:	e012      	b.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ac32:	4b11      	ldr	r3, [pc, #68]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ac34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d107      	bne.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800ac40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac42:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800ac46:	d103      	bne.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800ac48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac4e:	e003      	b.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800ac50:	2300      	movs	r3, #0
 800ac52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac54:	f001 bdf5 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac58:	f001 bdf3 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ac5c:	4b06      	ldr	r3, [pc, #24]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ac5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ac62:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800ac66:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ac68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10a      	bne.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac6e:	f7fc fe93 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800ac72:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800ac74:	f001 bde5 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac78:	44020c00 	.word	0x44020c00
 800ac7c:	03d09000 	.word	0x03d09000
 800ac80:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800ac84:	4ba0      	ldr	r3, [pc, #640]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac90:	d10b      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac98:	d107      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9a:	f107 0314 	add.w	r3, r7, #20
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe ffb0 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca8:	e047      	b.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800acaa:	4b97      	ldr	r3, [pc, #604]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acb6:	d10b      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800acb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acbe:	d107      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acc0:	f107 0308 	add.w	r3, r7, #8
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7ff f907 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	637b      	str	r3, [r7, #52]	@ 0x34
 800acce:	e034      	b.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800acd0:	4b8d      	ldr	r3, [pc, #564]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0302 	and.w	r3, r3, #2
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d10d      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800acdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acde:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ace2:	d109      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ace4:	4b88      	ldr	r3, [pc, #544]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	08db      	lsrs	r3, r3, #3
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	4a87      	ldr	r2, [pc, #540]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800acf0:	fa22 f303 	lsr.w	r3, r2, r3
 800acf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800acf6:	e020      	b.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800acf8:	4b83      	ldr	r3, [pc, #524]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad04:	d106      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800ad06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad0c:	d102      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800ad0e:	4b80      	ldr	r3, [pc, #512]	@ (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800ad10:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad12:	e012      	b.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ad14:	4b7c      	ldr	r3, [pc, #496]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ad16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d107      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800ad22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad24:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800ad28:	d103      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800ad2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad30:	e003      	b.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad36:	f001 bd84 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad3a:	f001 bd82 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ad3e:	4b72      	ldr	r3, [pc, #456]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ad40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad44:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ad48:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d104      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad50:	f7fc fe22 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800ad54:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800ad56:	f001 bd74 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800ad5a:	4b6b      	ldr	r3, [pc, #428]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad66:	d10b      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ad68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad6e:	d107      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad70:	f107 0314 	add.w	r3, r7, #20
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fe ff45 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad7e:	e047      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800ad80:	4b61      	ldr	r3, [pc, #388]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad8c:	d10b      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad94:	d107      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad96:	f107 0308 	add.w	r3, r7, #8
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7ff f89c 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ada4:	e034      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ada6:	4b58      	ldr	r3, [pc, #352]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d10d      	bne.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800adb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800adb8:	d109      	bne.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adba:	4b53      	ldr	r3, [pc, #332]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	08db      	lsrs	r3, r3, #3
 800adc0:	f003 0303 	and.w	r3, r3, #3
 800adc4:	4a51      	ldr	r2, [pc, #324]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800adc6:	fa22 f303 	lsr.w	r3, r2, r3
 800adca:	637b      	str	r3, [r7, #52]	@ 0x34
 800adcc:	e020      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800adce:	4b4e      	ldr	r3, [pc, #312]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800add6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adda:	d106      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800addc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ade2:	d102      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800ade4:	4b4a      	ldr	r3, [pc, #296]	@ (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800ade6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ade8:	e012      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800adea:	4b47      	ldr	r3, [pc, #284]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800adec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d107      	bne.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800adf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800adfe:	d103      	bne.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800ae00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae06:	e003      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae0c:	f001 bd19 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae10:	f001 bd17 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ae14:	4b3c      	ldr	r3, [pc, #240]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ae16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ae1a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800ae1e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ae20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d104      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ae26:	f7fc fdb7 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800ae2a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800ae2c:	f001 bd09 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800ae30:	4b35      	ldr	r3, [pc, #212]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae3c:	d10b      	bne.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae44:	d107      	bne.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae46:	f107 0314 	add.w	r3, r7, #20
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe feda 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae54:	e047      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800ae56:	4b2c      	ldr	r3, [pc, #176]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae62:	d10b      	bne.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800ae64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae6a:	d107      	bne.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae6c:	f107 0308 	add.w	r3, r7, #8
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff f831 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae7a:	e034      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ae7c:	4b22      	ldr	r3, [pc, #136]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d10d      	bne.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800ae88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ae8e:	d109      	bne.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae90:	4b1d      	ldr	r3, [pc, #116]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	08db      	lsrs	r3, r3, #3
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	4a1c      	ldr	r2, [pc, #112]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800ae9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aea0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aea2:	e020      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800aea4:	4b18      	ldr	r3, [pc, #96]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aeac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeb0:	d106      	bne.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeb8:	d102      	bne.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800aeba:	4b15      	ldr	r3, [pc, #84]	@ (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800aebc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aebe:	e012      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800aec0:	4b11      	ldr	r3, [pc, #68]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800aec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aec6:	f003 0302 	and.w	r3, r3, #2
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d107      	bne.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800aece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800aed4:	d103      	bne.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800aed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aeda:	637b      	str	r3, [r7, #52]	@ 0x34
 800aedc:	e003      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800aede:	2300      	movs	r3, #0
 800aee0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aee2:	f001 bcae 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aee6:	f001 bcac 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800aeea:	4b07      	ldr	r3, [pc, #28]	@ (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800aeec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aef0:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800aef4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800aef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10b      	bne.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800aefc:	f7fc fd4c 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800af00:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800af02:	f001 bc9e 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af06:	bf00      	nop
 800af08:	44020c00 	.word	0x44020c00
 800af0c:	03d09000 	.word	0x03d09000
 800af10:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800af14:	4ba0      	ldr	r3, [pc, #640]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af20:	d10b      	bne.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800af22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af28:	d107      	bne.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af2a:	f107 0314 	add.w	r3, r7, #20
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe fe68 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	637b      	str	r3, [r7, #52]	@ 0x34
 800af38:	e047      	b.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800af3a:	4b97      	ldr	r3, [pc, #604]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af46:	d10b      	bne.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800af48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800af4e:	d107      	bne.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af50:	f107 0308 	add.w	r3, r7, #8
 800af54:	4618      	mov	r0, r3
 800af56:	f7fe ffbf 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af5e:	e034      	b.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800af60:	4b8d      	ldr	r3, [pc, #564]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0302 	and.w	r3, r3, #2
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d10d      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800af72:	d109      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af74:	4b88      	ldr	r3, [pc, #544]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	08db      	lsrs	r3, r3, #3
 800af7a:	f003 0303 	and.w	r3, r3, #3
 800af7e:	4a87      	ldr	r2, [pc, #540]	@ (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800af80:	fa22 f303 	lsr.w	r3, r2, r3
 800af84:	637b      	str	r3, [r7, #52]	@ 0x34
 800af86:	e020      	b.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800af88:	4b83      	ldr	r3, [pc, #524]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af94:	d106      	bne.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800af96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af9c:	d102      	bne.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800af9e:	4b80      	ldr	r3, [pc, #512]	@ (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800afa0:	637b      	str	r3, [r7, #52]	@ 0x34
 800afa2:	e012      	b.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800afa4:	4b7c      	ldr	r3, [pc, #496]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800afa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afaa:	f003 0302 	and.w	r3, r3, #2
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d107      	bne.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800afb8:	d103      	bne.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800afba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800afc0:	e003      	b.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afc6:	f001 bc3c 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800afca:	f001 bc3a 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800afce:	4b72      	ldr	r3, [pc, #456]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800afd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800afd4:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800afd8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800afda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d104      	bne.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800afe0:	f7fc fcda 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800afe4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800afe6:	f001 bc2c 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800afea:	4b6b      	ldr	r3, [pc, #428]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aff2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aff6:	d10b      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800aff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800affe:	d107      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b000:	f107 0314 	add.w	r3, r7, #20
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe fdfd 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b00e:	e047      	b.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800b010:	4b61      	ldr	r3, [pc, #388]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b01c:	d10b      	bne.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800b01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b020:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b024:	d107      	bne.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b026:	f107 0308 	add.w	r3, r7, #8
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe ff54 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	637b      	str	r3, [r7, #52]	@ 0x34
 800b034:	e034      	b.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800b036:	4b58      	ldr	r3, [pc, #352]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 0302 	and.w	r3, r3, #2
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d10d      	bne.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800b042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b044:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b048:	d109      	bne.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b04a:	4b53      	ldr	r3, [pc, #332]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	08db      	lsrs	r3, r3, #3
 800b050:	f003 0303 	and.w	r3, r3, #3
 800b054:	4a51      	ldr	r2, [pc, #324]	@ (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b056:	fa22 f303 	lsr.w	r3, r2, r3
 800b05a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b05c:	e020      	b.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800b05e:	4b4e      	ldr	r3, [pc, #312]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b06a:	d106      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b072:	d102      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800b074:	4b4a      	ldr	r3, [pc, #296]	@ (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b076:	637b      	str	r3, [r7, #52]	@ 0x34
 800b078:	e012      	b.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800b07a:	4b47      	ldr	r3, [pc, #284]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b07c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b080:	f003 0302 	and.w	r3, r3, #2
 800b084:	2b02      	cmp	r3, #2
 800b086:	d107      	bne.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800b088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b08e:	d103      	bne.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800b090:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b094:	637b      	str	r3, [r7, #52]	@ 0x34
 800b096:	e003      	b.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800b098:	2300      	movs	r3, #0
 800b09a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b09c:	f001 bbd1 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0a0:	f001 bbcf 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800b0a4:	4b3c      	ldr	r3, [pc, #240]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b0a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b0aa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b0ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d104      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b0b6:	f7fc fc6f 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800b0ba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800b0bc:	f001 bbc1 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800b0c0:	4b35      	ldr	r3, [pc, #212]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0cc:	d10b      	bne.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0d4:	d107      	bne.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0d6:	f107 0314 	add.w	r3, r7, #20
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe fd92 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0e4:	e047      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800b0e6:	4b2c      	ldr	r3, [pc, #176]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0f2:	d10b      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0fa:	d107      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0fc:	f107 0308 	add.w	r3, r7, #8
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe fee9 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	637b      	str	r3, [r7, #52]	@ 0x34
 800b10a:	e034      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800b10c:	4b22      	ldr	r3, [pc, #136]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 0302 	and.w	r3, r3, #2
 800b114:	2b02      	cmp	r3, #2
 800b116:	d10d      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800b118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b11e:	d109      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b120:	4b1d      	ldr	r3, [pc, #116]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	08db      	lsrs	r3, r3, #3
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	4a1c      	ldr	r2, [pc, #112]	@ (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b12c:	fa22 f303 	lsr.w	r3, r2, r3
 800b130:	637b      	str	r3, [r7, #52]	@ 0x34
 800b132:	e020      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800b134:	4b18      	ldr	r3, [pc, #96]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b13c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b140:	d106      	bne.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800b142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b148:	d102      	bne.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800b14a:	4b15      	ldr	r3, [pc, #84]	@ (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b14c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b14e:	e012      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800b150:	4b11      	ldr	r3, [pc, #68]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b156:	f003 0302 	and.w	r3, r3, #2
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d107      	bne.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800b15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b160:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b164:	d103      	bne.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800b166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b16a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b16c:	e003      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800b16e:	2300      	movs	r3, #0
 800b170:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b172:	f001 bb66 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b176:	f001 bb64 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800b17a:	4b07      	ldr	r3, [pc, #28]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b17c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b180:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800b184:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800b186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10b      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b18c:	f7fc fc04 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800b190:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800b192:	f001 bb56 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b196:	bf00      	nop
 800b198:	44020c00 	.word	0x44020c00
 800b19c:	03d09000 	.word	0x03d09000
 800b1a0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800b1a4:	4ba1      	ldr	r3, [pc, #644]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1b0:	d10b      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1b8:	d107      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ba:	f107 0314 	add.w	r3, r7, #20
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fe fd20 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c8:	e047      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800b1ca:	4b98      	ldr	r3, [pc, #608]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1d6:	d10b      	bne.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1de:	d107      	bne.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1e0:	f107 0308 	add.w	r3, r7, #8
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fe fe77 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ee:	e034      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800b1f0:	4b8e      	ldr	r3, [pc, #568]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0302 	and.w	r3, r3, #2
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d10d      	bne.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800b202:	d109      	bne.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b204:	4b89      	ldr	r3, [pc, #548]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	08db      	lsrs	r3, r3, #3
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	4a88      	ldr	r2, [pc, #544]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b210:	fa22 f303 	lsr.w	r3, r2, r3
 800b214:	637b      	str	r3, [r7, #52]	@ 0x34
 800b216:	e020      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800b218:	4b84      	ldr	r3, [pc, #528]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b224:	d106      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800b226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b22c:	d102      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800b22e:	4b81      	ldr	r3, [pc, #516]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800b230:	637b      	str	r3, [r7, #52]	@ 0x34
 800b232:	e012      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800b234:	4b7d      	ldr	r3, [pc, #500]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b23a:	f003 0302 	and.w	r3, r3, #2
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d107      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800b242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b244:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800b248:	d103      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800b24a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b24e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b250:	e003      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800b252:	2300      	movs	r3, #0
 800b254:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b256:	f001 baf4 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b25a:	f001 baf2 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800b25e:	4b73      	ldr	r3, [pc, #460]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b260:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b264:	f003 0307 	and.w	r3, r3, #7
 800b268:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800b26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d104      	bne.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b270:	f7fc fb92 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800b274:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800b276:	f001 bae4 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800b27a:	4b6c      	ldr	r3, [pc, #432]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b286:	d10a      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d107      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b28e:	f107 0314 	add.w	r3, r7, #20
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe fcb6 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b29c:	e043      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800b29e:	4b63      	ldr	r3, [pc, #396]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2aa:	d10a      	bne.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d107      	bne.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2b2:	f107 0308 	add.w	r3, r7, #8
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe fe0e 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2c0:	e031      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800b2c2:	4b5a      	ldr	r3, [pc, #360]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 0302 	and.w	r3, r3, #2
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d10c      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d109      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b2d4:	4b55      	ldr	r3, [pc, #340]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	08db      	lsrs	r3, r3, #3
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	4a54      	ldr	r2, [pc, #336]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2e6:	e01e      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800b2e8:	4b50      	ldr	r3, [pc, #320]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2f4:	d105      	bne.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f8:	2b04      	cmp	r3, #4
 800b2fa:	d102      	bne.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800b2fc:	4b4d      	ldr	r3, [pc, #308]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800b2fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b300:	e011      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800b302:	4b4a      	ldr	r3, [pc, #296]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b308:	f003 0302 	and.w	r3, r3, #2
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d106      	bne.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800b310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b312:	2b05      	cmp	r3, #5
 800b314:	d103      	bne.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800b316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b31a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b31c:	e003      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b322:	f001 ba8e 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b326:	f001 ba8c 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800b32a:	4b40      	ldr	r3, [pc, #256]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b32c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b330:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b334:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800b336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d104      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b33c:	f7fc fb2c 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800b340:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800b342:	f001 ba7e 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800b346:	4b39      	ldr	r3, [pc, #228]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b34e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b352:	d10a      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800b354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b356:	2b10      	cmp	r3, #16
 800b358:	d107      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b35a:	f107 0314 	add.w	r3, r7, #20
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fc50 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	637b      	str	r3, [r7, #52]	@ 0x34
 800b368:	e043      	b.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800b36a:	4b30      	ldr	r3, [pc, #192]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b376:	d10a      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37a:	2b20      	cmp	r3, #32
 800b37c:	d107      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b37e:	f107 0308 	add.w	r3, r7, #8
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe fda8 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b38c:	e031      	b.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800b38e:	4b27      	ldr	r3, [pc, #156]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 0302 	and.w	r3, r3, #2
 800b396:	2b02      	cmp	r3, #2
 800b398:	d10c      	bne.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800b39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39c:	2b30      	cmp	r3, #48	@ 0x30
 800b39e:	d109      	bne.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b3a0:	4b22      	ldr	r3, [pc, #136]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	08db      	lsrs	r3, r3, #3
 800b3a6:	f003 0303 	and.w	r3, r3, #3
 800b3aa:	4a21      	ldr	r2, [pc, #132]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b3ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3b2:	e01e      	b.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800b3b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3c0:	d105      	bne.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c4:	2b40      	cmp	r3, #64	@ 0x40
 800b3c6:	d102      	bne.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800b3c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800b3ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3cc:	e011      	b.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800b3ce:	4b17      	ldr	r3, [pc, #92]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b3d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3d4:	f003 0302 	and.w	r3, r3, #2
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d106      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3de:	2b50      	cmp	r3, #80	@ 0x50
 800b3e0:	d103      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800b3e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e8:	e003      	b.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3ee:	f001 ba28 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b3f2:	f001 ba26 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b3f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3fc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b400:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	d104      	bne.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b408:	f7fc faf2 	bl	80079f0 <HAL_RCC_GetPCLK3Freq>
 800b40c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b40e:	f001 ba18 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800b412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b418:	d10e      	bne.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b41a:	f107 0314 	add.w	r3, r7, #20
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fe fbf0 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b428:	f001 ba0b 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b42c:	44020c00 	.word	0x44020c00
 800b430:	03d09000 	.word	0x03d09000
 800b434:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800b438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b43e:	d108      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b440:	f107 0308 	add.w	r3, r7, #8
 800b444:	4618      	mov	r0, r3
 800b446:	f7fe fd47 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b44e:	f001 b9f8 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b452:	4ba4      	ldr	r3, [pc, #656]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 0302 	and.w	r3, r3, #2
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d10d      	bne.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800b45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b460:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b464:	d109      	bne.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b466:	4b9f      	ldr	r3, [pc, #636]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	08db      	lsrs	r3, r3, #3
 800b46c:	f003 0303 	and.w	r3, r3, #3
 800b470:	4a9d      	ldr	r2, [pc, #628]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b472:	fa22 f303 	lsr.w	r3, r2, r3
 800b476:	637b      	str	r3, [r7, #52]	@ 0x34
 800b478:	e020      	b.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800b47a:	4b9a      	ldr	r3, [pc, #616]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b486:	d106      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800b488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b48e:	d102      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800b490:	4b96      	ldr	r3, [pc, #600]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b492:	637b      	str	r3, [r7, #52]	@ 0x34
 800b494:	e012      	b.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b496:	4b93      	ldr	r3, [pc, #588]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b49c:	f003 0302 	and.w	r3, r3, #2
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d107      	bne.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b4aa:	d103      	bne.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800b4ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4b2:	e003      	b.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b4b8:	f001 b9c3 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b4bc:	f001 b9c1 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b4c0:	4b88      	ldr	r3, [pc, #544]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b4c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4c6:	f003 0307 	and.w	r3, r3, #7
 800b4ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d104      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800b4d2:	f7fc fa45 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 800b4d6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800b4d8:	f001 b9b3 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d104      	bne.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800b4e2:	f7fc f911 	bl	8007708 <HAL_RCC_GetSysClockFreq>
 800b4e6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b4e8:	f001 b9ab 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d108      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4f2:	f107 0314 	add.w	r3, r7, #20
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fe fb84 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b500:	f001 b99f 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b504:	4b77      	ldr	r3, [pc, #476]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b50c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b510:	d105      	bne.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800b512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b514:	2b03      	cmp	r3, #3
 800b516:	d102      	bne.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800b518:	4b75      	ldr	r3, [pc, #468]	@ (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800b51a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b51c:	e023      	b.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b51e:	4b71      	ldr	r3, [pc, #452]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 0302 	and.w	r3, r3, #2
 800b526:	2b02      	cmp	r3, #2
 800b528:	d10c      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800b52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d109      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b530:	4b6c      	ldr	r3, [pc, #432]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	08db      	lsrs	r3, r3, #3
 800b536:	f003 0303 	and.w	r3, r3, #3
 800b53a:	4a6b      	ldr	r2, [pc, #428]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b53c:	fa22 f303 	lsr.w	r3, r2, r3
 800b540:	637b      	str	r3, [r7, #52]	@ 0x34
 800b542:	e010      	b.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800b544:	4b67      	ldr	r3, [pc, #412]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b54c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b550:	d105      	bne.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	2b05      	cmp	r3, #5
 800b556:	d102      	bne.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800b558:	4b64      	ldr	r3, [pc, #400]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b55a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b55c:	e003      	b.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800b55e:	2300      	movs	r3, #0
 800b560:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b562:	f001 b96e 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b566:	f001 b96c 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800b56a:	4b5e      	ldr	r3, [pc, #376]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b56c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b570:	f003 0308 	and.w	r3, r3, #8
 800b574:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800b576:	4b5b      	ldr	r3, [pc, #364]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b02      	cmp	r3, #2
 800b582:	d106      	bne.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800b584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b586:	2b00      	cmp	r3, #0
 800b588:	d103      	bne.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800b58a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b58e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b590:	e012      	b.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800b592:	4b54      	ldr	r3, [pc, #336]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b59c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5a0:	d106      	bne.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a4:	2b08      	cmp	r3, #8
 800b5a6:	d103      	bne.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800b5a8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b5ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5ae:	e003      	b.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b5b4:	f001 b945 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b5b8:	f001 b943 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b5bc:	4b49      	ldr	r3, [pc, #292]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b5be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b5c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b5c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d104      	bne.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b5ce:	f7fc f9e3 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800b5d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b5d4:	f001 b935 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5de:	d108      	bne.n	800b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5e0:	f107 0308 	add.w	r3, r7, #8
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fe fc77 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5ee:	f001 b928 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b5f2:	4b3c      	ldr	r3, [pc, #240]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d10d      	bne.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b604:	d109      	bne.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b606:	4b37      	ldr	r3, [pc, #220]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	08db      	lsrs	r3, r3, #3
 800b60c:	f003 0303 	and.w	r3, r3, #3
 800b610:	4a35      	ldr	r2, [pc, #212]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b612:	fa22 f303 	lsr.w	r3, r2, r3
 800b616:	637b      	str	r3, [r7, #52]	@ 0x34
 800b618:	e011      	b.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800b61a:	4b32      	ldr	r3, [pc, #200]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b626:	d106      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800b628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b62e:	d102      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800b630:	4b2e      	ldr	r3, [pc, #184]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b632:	637b      	str	r3, [r7, #52]	@ 0x34
 800b634:	e003      	b.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800b636:	2300      	movs	r3, #0
 800b638:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b63a:	f001 b902 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b63e:	f001 b900 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b642:	4b28      	ldr	r3, [pc, #160]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b644:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b648:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b64c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b650:	2b00      	cmp	r3, #0
 800b652:	d104      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b654:	f7fc f9a0 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800b658:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b65a:	f001 b8f2 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800b65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b660:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b664:	d108      	bne.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b666:	f107 0308 	add.w	r3, r7, #8
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe fc34 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b674:	f001 b8e5 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b678:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0302 	and.w	r3, r3, #2
 800b680:	2b02      	cmp	r3, #2
 800b682:	d10d      	bne.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800b684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b686:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b68a:	d109      	bne.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b68c:	4b15      	ldr	r3, [pc, #84]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	08db      	lsrs	r3, r3, #3
 800b692:	f003 0303 	and.w	r3, r3, #3
 800b696:	4a14      	ldr	r2, [pc, #80]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b698:	fa22 f303 	lsr.w	r3, r2, r3
 800b69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b69e:	e011      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800b6a0:	4b10      	ldr	r3, [pc, #64]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6ac:	d106      	bne.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b6b4:	d102      	bne.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800b6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b6b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ba:	e003      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6c0:	f001 b8bf 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6c4:	f001 b8bd 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b6c8:	4b06      	ldr	r3, [pc, #24]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b6ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6ce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b6d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10c      	bne.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b6da:	f7fc f989 	bl	80079f0 <HAL_RCC_GetPCLK3Freq>
 800b6de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b6e0:	f001 b8af 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6e4:	44020c00 	.word	0x44020c00
 800b6e8:	03d09000 	.word	0x03d09000
 800b6ec:	003d0900 	.word	0x003d0900
 800b6f0:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6fa:	d108      	bne.n	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6fc:	f107 0308 	add.w	r3, r7, #8
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe fbe9 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b70a:	f001 b89a 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800b70e:	4b9f      	ldr	r3, [pc, #636]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0302 	and.w	r3, r3, #2
 800b716:	2b02      	cmp	r3, #2
 800b718:	d10d      	bne.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b720:	d109      	bne.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b722:	4b9a      	ldr	r3, [pc, #616]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	08db      	lsrs	r3, r3, #3
 800b728:	f003 0303 	and.w	r3, r3, #3
 800b72c:	4a98      	ldr	r2, [pc, #608]	@ (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b72e:	fa22 f303 	lsr.w	r3, r2, r3
 800b732:	637b      	str	r3, [r7, #52]	@ 0x34
 800b734:	e011      	b.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800b736:	4b95      	ldr	r3, [pc, #596]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b73e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b742:	d106      	bne.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800b744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b746:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b74a:	d102      	bne.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800b74c:	4b91      	ldr	r3, [pc, #580]	@ (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b74e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b750:	e003      	b.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800b752:	2300      	movs	r3, #0
 800b754:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b756:	f001 b874 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b75a:	f001 b872 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b75e:	4b8b      	ldr	r3, [pc, #556]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b760:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b764:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b768:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800b76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b770:	f7fc f93e 	bl	80079f0 <HAL_RCC_GetPCLK3Freq>
 800b774:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b776:	f001 b864 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800b77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b780:	d108      	bne.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b782:	f107 0308 	add.w	r3, r7, #8
 800b786:	4618      	mov	r0, r3
 800b788:	f7fe fba6 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b790:	f001 b857 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b794:	4b7d      	ldr	r3, [pc, #500]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0302 	and.w	r3, r3, #2
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d10d      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7a6:	d109      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b7a8:	4b78      	ldr	r3, [pc, #480]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	08db      	lsrs	r3, r3, #3
 800b7ae:	f003 0303 	and.w	r3, r3, #3
 800b7b2:	4a77      	ldr	r2, [pc, #476]	@ (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b7b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ba:	e011      	b.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800b7bc:	4b73      	ldr	r3, [pc, #460]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7c8:	d106      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b7d0:	d102      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800b7d2:	4b70      	ldr	r3, [pc, #448]	@ (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7d6:	e003      	b.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7dc:	f001 b831 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b7e0:	f001 b82f 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800b7e4:	4b69      	ldr	r3, [pc, #420]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b7e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7ea:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b7ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d104      	bne.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b7f6:	f7fc f8cf 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800b7fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b7fc:	f001 b821 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800b800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b802:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b806:	d108      	bne.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b808:	f107 0308 	add.w	r3, r7, #8
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fe fb63 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b816:	f001 b814 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800b81a:	4b5c      	ldr	r3, [pc, #368]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f003 0302 	and.w	r3, r3, #2
 800b822:	2b02      	cmp	r3, #2
 800b824:	d10e      	bne.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800b826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b828:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b82c:	d10a      	bne.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b82e:	4b57      	ldr	r3, [pc, #348]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	08db      	lsrs	r3, r3, #3
 800b834:	f003 0303 	and.w	r3, r3, #3
 800b838:	4a55      	ldr	r2, [pc, #340]	@ (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b83a:	fa22 f303 	lsr.w	r3, r2, r3
 800b83e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b840:	f000 bfff 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b848:	f000 bffb 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b84c:	4b4f      	ldr	r3, [pc, #316]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b84e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b852:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b856:	633b      	str	r3, [r7, #48]	@ 0x30
 800b858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b85e:	d056      	beq.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800b860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b862:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b866:	f200 808b 	bhi.w	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b870:	d03e      	beq.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800b872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b878:	f200 8082 	bhi.w	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b882:	d027      	beq.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800b884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b88a:	d879      	bhi.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b892:	d017      	beq.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800b894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b89a:	d871      	bhi.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8a8:	d004      	beq.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800b8aa:	e069      	b.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b8ac:	f7fc f8a0 	bl	80079f0 <HAL_RCC_GetPCLK3Freq>
 800b8b0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b8b2:	e068      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8b4:	f107 0314 	add.w	r3, r7, #20
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fe f9a3 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8c2:	e060      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8c4:	f107 0308 	add.w	r3, r7, #8
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe fb05 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8d2:	e058      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b8d4:	4b2d      	ldr	r3, [pc, #180]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b8d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8da:	f003 0302 	and.w	r3, r3, #2
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d103      	bne.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800b8e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8e6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b8e8:	e04d      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8ee:	e04a      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b8f0:	4b26      	ldr	r3, [pc, #152]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b8f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8fe:	d103      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800b900:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b904:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b906:	e03e      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b90c:	e03b      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b90e:	4b1f      	ldr	r3, [pc, #124]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b914:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b918:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b91a:	4b1c      	ldr	r3, [pc, #112]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 0302 	and.w	r3, r3, #2
 800b922:	2b02      	cmp	r3, #2
 800b924:	d10c      	bne.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800b926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d109      	bne.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b92c:	4b17      	ldr	r3, [pc, #92]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	08db      	lsrs	r3, r3, #3
 800b932:	f003 0303 	and.w	r3, r3, #3
 800b936:	4a16      	ldr	r2, [pc, #88]	@ (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b938:	fa22 f303 	lsr.w	r3, r2, r3
 800b93c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b93e:	e01e      	b.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b940:	4b12      	ldr	r3, [pc, #72]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b94c:	d106      	bne.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800b94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b954:	d102      	bne.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b956:	4b0f      	ldr	r3, [pc, #60]	@ (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b958:	637b      	str	r3, [r7, #52]	@ 0x34
 800b95a:	e010      	b.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b95c:	4b0b      	ldr	r3, [pc, #44]	@ (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b968:	d106      	bne.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800b96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b96c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b970:	d102      	bne.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b972:	4b09      	ldr	r3, [pc, #36]	@ (800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800b974:	637b      	str	r3, [r7, #52]	@ 0x34
 800b976:	e002      	b.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b978:	2300      	movs	r3, #0
 800b97a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b97c:	e003      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800b97e:	e002      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800b980:	2300      	movs	r3, #0
 800b982:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b984:	bf00      	nop
          }
        }
        break;
 800b986:	f000 bf5c 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b98a:	bf00      	nop
 800b98c:	44020c00 	.word	0x44020c00
 800b990:	03d09000 	.word	0x03d09000
 800b994:	003d0900 	.word	0x003d0900
 800b998:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b99c:	4b9e      	ldr	r3, [pc, #632]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b99e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b9a2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b9a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b9ae:	d056      	beq.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b9b6:	f200 808b 	bhi.w	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9c0:	d03e      	beq.n	800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9c8:	f200 8082 	bhi.w	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9d2:	d027      	beq.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9da:	d879      	bhi.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9e2:	d017      	beq.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9ea:	d871      	bhi.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d004      	beq.n	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9f8:	d004      	beq.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800b9fa:	e069      	b.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800b9fc:	f7fb ffcc 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800ba00:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ba02:	e068      	b.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba04:	f107 0314 	add.w	r3, r7, #20
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fe f8fb 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba12:	e060      	b.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba14:	f107 0308 	add.w	r3, r7, #8
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fe fa5d 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba22:	e058      	b.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ba24:	4b7c      	ldr	r3, [pc, #496]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ba26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba2a:	f003 0302 	and.w	r3, r3, #2
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d103      	bne.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800ba32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba36:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ba38:	e04d      	b.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba3e:	e04a      	b.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ba40:	4b75      	ldr	r3, [pc, #468]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ba42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba4e:	d103      	bne.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800ba50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ba54:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ba56:	e03e      	b.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba5c:	e03b      	b.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba5e:	4b6e      	ldr	r3, [pc, #440]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ba60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba64:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ba68:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba6a:	4b6b      	ldr	r3, [pc, #428]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 0302 	and.w	r3, r3, #2
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d10c      	bne.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800ba76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d109      	bne.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ba7c:	4b66      	ldr	r3, [pc, #408]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	08db      	lsrs	r3, r3, #3
 800ba82:	f003 0303 	and.w	r3, r3, #3
 800ba86:	4a65      	ldr	r2, [pc, #404]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800ba88:	fa22 f303 	lsr.w	r3, r2, r3
 800ba8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba8e:	e01e      	b.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba90:	4b61      	ldr	r3, [pc, #388]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba9c:	d106      	bne.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800ba9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baa4:	d102      	bne.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800baa6:	4b5e      	ldr	r3, [pc, #376]	@ (800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800baa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800baaa:	e010      	b.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baac:	4b5a      	ldr	r3, [pc, #360]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bab4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bab8:	d106      	bne.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800baba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800babc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bac0:	d102      	bne.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bac2:	4b58      	ldr	r3, [pc, #352]	@ (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800bac4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bac6:	e002      	b.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bac8:	2300      	movs	r3, #0
 800baca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bacc:	e003      	b.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800bace:	e002      	b.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800bad0:	2300      	movs	r3, #0
 800bad2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bad4:	bf00      	nop
          }
        }
        break;
 800bad6:	f000 beb4 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800bada:	4b4f      	ldr	r3, [pc, #316]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800badc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bae0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800bae4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800baec:	d056      	beq.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800baee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800baf4:	f200 808b 	bhi.w	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800baf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bafe:	d03e      	beq.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800bb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb06:	f200 8082 	bhi.w	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb10:	d027      	beq.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800bb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb18:	d879      	bhi.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb20:	d017      	beq.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800bb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb28:	d871      	bhi.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d004      	beq.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800bb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb36:	d004      	beq.n	800bb42 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800bb38:	e069      	b.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800bb3a:	f7fb ff59 	bl	80079f0 <HAL_RCC_GetPCLK3Freq>
 800bb3e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bb40:	e068      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb42:	f107 0314 	add.w	r3, r7, #20
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe f85c 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb50:	e060      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb52:	f107 0308 	add.w	r3, r7, #8
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe f9be 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb60:	e058      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bb62:	4b2d      	ldr	r3, [pc, #180]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800bb64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bb68:	f003 0302 	and.w	r3, r3, #2
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d103      	bne.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800bb70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb74:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bb76:	e04d      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb7c:	e04a      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800bb7e:	4b26      	ldr	r3, [pc, #152]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800bb80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bb84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb8c:	d103      	bne.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800bb8e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bb92:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bb94:	e03e      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb9a:	e03b      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb9c:	4b1e      	ldr	r3, [pc, #120]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800bb9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bba2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bba6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bba8:	4b1b      	ldr	r3, [pc, #108]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 0302 	and.w	r3, r3, #2
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d10c      	bne.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800bbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d109      	bne.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bbba:	4b17      	ldr	r3, [pc, #92]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	08db      	lsrs	r3, r3, #3
 800bbc0:	f003 0303 	and.w	r3, r3, #3
 800bbc4:	4a15      	ldr	r2, [pc, #84]	@ (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800bbc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bbca:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbcc:	e01e      	b.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbce:	4b12      	ldr	r3, [pc, #72]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bbd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbda:	d106      	bne.n	800bbea <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800bbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbe2:	d102      	bne.n	800bbea <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bbe4:	4b0e      	ldr	r3, [pc, #56]	@ (800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800bbe6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbe8:	e010      	b.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bbea:	4b0b      	ldr	r3, [pc, #44]	@ (800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbf6:	d106      	bne.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800bbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbfe:	d102      	bne.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bc00:	4b08      	ldr	r3, [pc, #32]	@ (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800bc02:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc04:	e002      	b.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bc0a:	e003      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800bc0c:	e002      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc12:	bf00      	nop
          }
        }
        break;
 800bc14:	f000 be15 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bc18:	44020c00 	.word	0x44020c00
 800bc1c:	03d09000 	.word	0x03d09000
 800bc20:	003d0900 	.word	0x003d0900
 800bc24:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800bc28:	4b9e      	ldr	r3, [pc, #632]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bc2a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bc2e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800bc32:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc36:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800bc3a:	d056      	beq.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800bc42:	f200 808b 	bhi.w	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc4c:	d03e      	beq.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc54:	f200 8082 	bhi.w	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800bc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bc5e:	d027      	beq.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800bc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bc66:	d879      	bhi.n	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800bc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc6e:	d017      	beq.n	800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800bc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc76:	d871      	bhi.n	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800bc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d004      	beq.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc84:	d004      	beq.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800bc86:	e069      	b.n	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800bc88:	f7fb feb2 	bl	80079f0 <HAL_RCC_GetPCLK3Freq>
 800bc8c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bc8e:	e068      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc90:	f107 0314 	add.w	r3, r7, #20
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fd ffb5 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc9e:	e060      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bca0:	f107 0308 	add.w	r3, r7, #8
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fe f917 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bcae:	e058      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bcb0:	4b7c      	ldr	r3, [pc, #496]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bcb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcb6:	f003 0302 	and.w	r3, r3, #2
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d103      	bne.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800bcbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcc2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bcc4:	e04d      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bcca:	e04a      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800bccc:	4b75      	ldr	r3, [pc, #468]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bcce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bcd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bcda:	d103      	bne.n	800bce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800bcdc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bce0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bce2:	e03e      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bce8:	e03b      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bcea:	4b6e      	ldr	r3, [pc, #440]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bcec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bcf0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bcf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcf6:	4b6b      	ldr	r3, [pc, #428]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0302 	and.w	r3, r3, #2
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d10c      	bne.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800bd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d109      	bne.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd08:	4b66      	ldr	r3, [pc, #408]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	08db      	lsrs	r3, r3, #3
 800bd0e:	f003 0303 	and.w	r3, r3, #3
 800bd12:	4a65      	ldr	r2, [pc, #404]	@ (800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800bd14:	fa22 f303 	lsr.w	r3, r2, r3
 800bd18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd1a:	e01e      	b.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd1c:	4b61      	ldr	r3, [pc, #388]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd28:	d106      	bne.n	800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800bd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd30:	d102      	bne.n	800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bd32:	4b5e      	ldr	r3, [pc, #376]	@ (800beac <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800bd34:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd36:	e010      	b.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd38:	4b5a      	ldr	r3, [pc, #360]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd44:	d106      	bne.n	800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800bd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd4c:	d102      	bne.n	800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bd4e:	4b58      	ldr	r3, [pc, #352]	@ (800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800bd50:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd52:	e002      	b.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bd58:	e003      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800bd5a:	e002      	b.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd60:	bf00      	nop
          }
        }
        break;
 800bd62:	f000 bd6e 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800bd66:	4b4f      	ldr	r3, [pc, #316]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bd68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bd6c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bd70:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd74:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bd78:	d056      	beq.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bd80:	f200 808b 	bhi.w	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800bd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd8a:	d03e      	beq.n	800be0a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd92:	f200 8082 	bhi.w	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800bd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bd9c:	d027      	beq.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bda4:	d879      	bhi.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800bda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bdac:	d017      	beq.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800bdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bdb4:	d871      	bhi.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d004      	beq.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdc2:	d004      	beq.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800bdc4:	e069      	b.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800bdc6:	f7fb fe13 	bl	80079f0 <HAL_RCC_GetPCLK3Freq>
 800bdca:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bdcc:	e068      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdce:	f107 0314 	add.w	r3, r7, #20
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7fd ff16 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bddc:	e060      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdde:	f107 0308 	add.w	r3, r7, #8
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe f878 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bdec:	e058      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bdee:	4b2d      	ldr	r3, [pc, #180]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800bdf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bdf4:	f003 0302 	and.w	r3, r3, #2
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d103      	bne.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800bdfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be00:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800be02:	e04d      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800be08:	e04a      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800be0a:	4b26      	ldr	r3, [pc, #152]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800be0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be18:	d103      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800be1a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800be1e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800be20:	e03e      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800be26:	e03b      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be28:	4b1e      	ldr	r3, [pc, #120]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800be2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be2e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800be32:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be34:	4b1b      	ldr	r3, [pc, #108]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f003 0302 	and.w	r3, r3, #2
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d10c      	bne.n	800be5a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800be40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be42:	2b00      	cmp	r3, #0
 800be44:	d109      	bne.n	800be5a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be46:	4b17      	ldr	r3, [pc, #92]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	08db      	lsrs	r3, r3, #3
 800be4c:	f003 0303 	and.w	r3, r3, #3
 800be50:	4a15      	ldr	r2, [pc, #84]	@ (800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800be52:	fa22 f303 	lsr.w	r3, r2, r3
 800be56:	637b      	str	r3, [r7, #52]	@ 0x34
 800be58:	e01e      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be5a:	4b12      	ldr	r3, [pc, #72]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be66:	d106      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800be68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be6e:	d102      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800be70:	4b0e      	ldr	r3, [pc, #56]	@ (800beac <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800be72:	637b      	str	r3, [r7, #52]	@ 0x34
 800be74:	e010      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be76:	4b0b      	ldr	r3, [pc, #44]	@ (800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be82:	d106      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800be84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be8a:	d102      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800be8c:	4b08      	ldr	r3, [pc, #32]	@ (800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800be8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800be90:	e002      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800be92:	2300      	movs	r3, #0
 800be94:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800be96:	e003      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800be98:	e002      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800be9a:	2300      	movs	r3, #0
 800be9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800be9e:	bf00      	nop
          }
        }
        break;
 800bea0:	f000 bccf 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bea4:	44020c00 	.word	0x44020c00
 800bea8:	03d09000 	.word	0x03d09000
 800beac:	003d0900 	.word	0x003d0900
 800beb0:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800beb4:	4b9e      	ldr	r3, [pc, #632]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800beb6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800beba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bebe:	633b      	str	r3, [r7, #48]	@ 0x30
 800bec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bec6:	d056      	beq.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800bec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bece:	f200 808b 	bhi.w	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800bed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bed8:	d03e      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bee0:	f200 8082 	bhi.w	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800bee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800beea:	d027      	beq.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800beec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bef2:	d879      	bhi.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800bef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800befa:	d017      	beq.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800befc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf02:	d871      	bhi.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800bf04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d004      	beq.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf10:	d004      	beq.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800bf12:	e069      	b.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800bf14:	f7fb fd6c 	bl	80079f0 <HAL_RCC_GetPCLK3Freq>
 800bf18:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bf1a:	e068      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf1c:	f107 0314 	add.w	r3, r7, #20
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fd fe6f 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bf2a:	e060      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf2c:	f107 0308 	add.w	r3, r7, #8
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fd ffd1 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bf3a:	e058      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bf3c:	4b7c      	ldr	r3, [pc, #496]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bf3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf42:	f003 0302 	and.w	r3, r3, #2
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d103      	bne.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800bf4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf4e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bf50:	e04d      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bf56:	e04a      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800bf58:	4b75      	ldr	r3, [pc, #468]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bf5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf66:	d103      	bne.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800bf68:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bf6c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bf6e:	e03e      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bf74:	e03b      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf76:	4b6e      	ldr	r3, [pc, #440]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bf78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bf7c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bf80:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf82:	4b6b      	ldr	r3, [pc, #428]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f003 0302 	and.w	r3, r3, #2
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d10c      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800bf8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d109      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf94:	4b66      	ldr	r3, [pc, #408]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	08db      	lsrs	r3, r3, #3
 800bf9a:	f003 0303 	and.w	r3, r3, #3
 800bf9e:	4a65      	ldr	r2, [pc, #404]	@ (800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800bfa0:	fa22 f303 	lsr.w	r3, r2, r3
 800bfa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfa6:	e01e      	b.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfa8:	4b61      	ldr	r3, [pc, #388]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bfb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfb4:	d106      	bne.n	800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800bfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfbc:	d102      	bne.n	800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bfbe:	4b5e      	ldr	r3, [pc, #376]	@ (800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800bfc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfc2:	e010      	b.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfc4:	4b5a      	ldr	r3, [pc, #360]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfd0:	d106      	bne.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800bfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bfd8:	d102      	bne.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bfda:	4b58      	ldr	r3, [pc, #352]	@ (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800bfdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfde:	e002      	b.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bfe4:	e003      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800bfe6:	e002      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bfec:	bf00      	nop
          }
        }
        break;
 800bfee:	f000 bc28 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bff2:	4b4f      	ldr	r3, [pc, #316]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bff8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bffc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800bffe:	4b4c      	ldr	r3, [pc, #304]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c00a:	d106      	bne.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800c00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d103      	bne.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800c012:	4b4a      	ldr	r3, [pc, #296]	@ (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c014:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800c016:	f000 bc14 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800c01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c020:	d108      	bne.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c022:	f107 0320 	add.w	r3, r7, #32
 800c026:	4618      	mov	r0, r3
 800c028:	f7fd fc82 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c030:	f000 bc07 	b.w	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800c034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c03a:	d107      	bne.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c03c:	f107 0314 	add.w	r3, r7, #20
 800c040:	4618      	mov	r0, r3
 800c042:	f7fd fddf 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c04a:	e3fa      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800c04c:	2300      	movs	r3, #0
 800c04e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c050:	e3f7      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c052:	4b37      	ldr	r3, [pc, #220]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c058:	f003 0307 	and.w	r3, r3, #7
 800c05c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c060:	2b04      	cmp	r3, #4
 800c062:	d861      	bhi.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800c064:	a201      	add	r2, pc, #4	@ (adr r2, 800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800c066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06a:	bf00      	nop
 800c06c:	0800c081 	.word	0x0800c081
 800c070:	0800c091 	.word	0x0800c091
 800c074:	0800c0a1 	.word	0x0800c0a1
 800c078:	0800c0b1 	.word	0x0800c0b1
 800c07c:	0800c0b7 	.word	0x0800c0b7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c080:	f107 0320 	add.w	r3, r7, #32
 800c084:	4618      	mov	r0, r3
 800c086:	f7fd fc53 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c08e:	e04e      	b.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c090:	f107 0314 	add.w	r3, r7, #20
 800c094:	4618      	mov	r0, r3
 800c096:	f7fd fdb5 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c09e:	e046      	b.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0a0:	f107 0308 	add.w	r3, r7, #8
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fd ff17 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c0ae:	e03e      	b.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c0b0:	4b23      	ldr	r3, [pc, #140]	@ (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800c0b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c0b4:	e03b      	b.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0b6:	4b1e      	ldr	r3, [pc, #120]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c0b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c0bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c0c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d10c      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800c0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d109      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c0d4:	4b16      	ldr	r3, [pc, #88]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	08db      	lsrs	r3, r3, #3
 800c0da:	f003 0303 	and.w	r3, r3, #3
 800c0de:	4a15      	ldr	r2, [pc, #84]	@ (800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800c0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0e6:	e01e      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0e8:	4b11      	ldr	r3, [pc, #68]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0f4:	d106      	bne.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800c0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0fc:	d102      	bne.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800c100:	637b      	str	r3, [r7, #52]	@ 0x34
 800c102:	e010      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c104:	4b0a      	ldr	r3, [pc, #40]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c10c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c110:	d106      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800c112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c118:	d102      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c11a:	4b08      	ldr	r3, [pc, #32]	@ (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c11c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c11e:	e002      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c120:	2300      	movs	r3, #0
 800c122:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c124:	e003      	b.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800c126:	e002      	b.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c12c:	bf00      	nop
          }
        }
        break;
 800c12e:	e388      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c130:	44020c00 	.word	0x44020c00
 800c134:	03d09000 	.word	0x03d09000
 800c138:	003d0900 	.word	0x003d0900
 800c13c:	017d7840 	.word	0x017d7840
 800c140:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c144:	4ba9      	ldr	r3, [pc, #676]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c14a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c14e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c152:	2b20      	cmp	r3, #32
 800c154:	f200 809a 	bhi.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800c158:	a201      	add	r2, pc, #4	@ (adr r2, 800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800c15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15e:	bf00      	nop
 800c160:	0800c1e5 	.word	0x0800c1e5
 800c164:	0800c28d 	.word	0x0800c28d
 800c168:	0800c28d 	.word	0x0800c28d
 800c16c:	0800c28d 	.word	0x0800c28d
 800c170:	0800c28d 	.word	0x0800c28d
 800c174:	0800c28d 	.word	0x0800c28d
 800c178:	0800c28d 	.word	0x0800c28d
 800c17c:	0800c28d 	.word	0x0800c28d
 800c180:	0800c1f5 	.word	0x0800c1f5
 800c184:	0800c28d 	.word	0x0800c28d
 800c188:	0800c28d 	.word	0x0800c28d
 800c18c:	0800c28d 	.word	0x0800c28d
 800c190:	0800c28d 	.word	0x0800c28d
 800c194:	0800c28d 	.word	0x0800c28d
 800c198:	0800c28d 	.word	0x0800c28d
 800c19c:	0800c28d 	.word	0x0800c28d
 800c1a0:	0800c205 	.word	0x0800c205
 800c1a4:	0800c28d 	.word	0x0800c28d
 800c1a8:	0800c28d 	.word	0x0800c28d
 800c1ac:	0800c28d 	.word	0x0800c28d
 800c1b0:	0800c28d 	.word	0x0800c28d
 800c1b4:	0800c28d 	.word	0x0800c28d
 800c1b8:	0800c28d 	.word	0x0800c28d
 800c1bc:	0800c28d 	.word	0x0800c28d
 800c1c0:	0800c215 	.word	0x0800c215
 800c1c4:	0800c28d 	.word	0x0800c28d
 800c1c8:	0800c28d 	.word	0x0800c28d
 800c1cc:	0800c28d 	.word	0x0800c28d
 800c1d0:	0800c28d 	.word	0x0800c28d
 800c1d4:	0800c28d 	.word	0x0800c28d
 800c1d8:	0800c28d 	.word	0x0800c28d
 800c1dc:	0800c28d 	.word	0x0800c28d
 800c1e0:	0800c21b 	.word	0x0800c21b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1e4:	f107 0320 	add.w	r3, r7, #32
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fd fba1 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c1f2:	e04e      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1f4:	f107 0314 	add.w	r3, r7, #20
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fd fd03 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c202:	e046      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c204:	f107 0308 	add.w	r3, r7, #8
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fd fe65 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c212:	e03e      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c214:	4b76      	ldr	r3, [pc, #472]	@ (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800c216:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c218:	e03b      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c21a:	4b74      	ldr	r3, [pc, #464]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c21c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c220:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c224:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c226:	4b71      	ldr	r3, [pc, #452]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f003 0302 	and.w	r3, r3, #2
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d10c      	bne.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800c232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c234:	2b00      	cmp	r3, #0
 800c236:	d109      	bne.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c238:	4b6c      	ldr	r3, [pc, #432]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	08db      	lsrs	r3, r3, #3
 800c23e:	f003 0303 	and.w	r3, r3, #3
 800c242:	4a6c      	ldr	r2, [pc, #432]	@ (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800c244:	fa22 f303 	lsr.w	r3, r2, r3
 800c248:	637b      	str	r3, [r7, #52]	@ 0x34
 800c24a:	e01e      	b.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c24c:	4b67      	ldr	r3, [pc, #412]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c258:	d106      	bne.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800c25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c260:	d102      	bne.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c262:	4b65      	ldr	r3, [pc, #404]	@ (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800c264:	637b      	str	r3, [r7, #52]	@ 0x34
 800c266:	e010      	b.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c268:	4b60      	ldr	r3, [pc, #384]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c274:	d106      	bne.n	800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800c276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c27c:	d102      	bne.n	800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c27e:	4b5f      	ldr	r3, [pc, #380]	@ (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800c280:	637b      	str	r3, [r7, #52]	@ 0x34
 800c282:	e002      	b.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c284:	2300      	movs	r3, #0
 800c286:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c288:	e003      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800c28a:	e002      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c290:	bf00      	nop
          }
        }
        break;
 800c292:	e2d6      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c294:	4b55      	ldr	r3, [pc, #340]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c29a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800c29e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2a6:	d031      	beq.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2ae:	d866      	bhi.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b2:	2bc0      	cmp	r3, #192	@ 0xc0
 800c2b4:	d027      	beq.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b8:	2bc0      	cmp	r3, #192	@ 0xc0
 800c2ba:	d860      	bhi.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2be:	2b80      	cmp	r3, #128	@ 0x80
 800c2c0:	d019      	beq.n	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c4:	2b80      	cmp	r3, #128	@ 0x80
 800c2c6:	d85a      	bhi.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d003      	beq.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d0:	2b40      	cmp	r3, #64	@ 0x40
 800c2d2:	d008      	beq.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800c2d4:	e053      	b.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2d6:	f107 0320 	add.w	r3, r7, #32
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fd fb28 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c2e4:	e04e      	b.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2e6:	f107 0314 	add.w	r3, r7, #20
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fd fc8a 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c2f4:	e046      	b.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2f6:	f107 0308 	add.w	r3, r7, #8
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fd fdec 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c304:	e03e      	b.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c306:	4b3a      	ldr	r3, [pc, #232]	@ (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800c308:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c30a:	e03b      	b.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c30c:	4b37      	ldr	r3, [pc, #220]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c30e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c312:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c316:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c318:	4b34      	ldr	r3, [pc, #208]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f003 0302 	and.w	r3, r3, #2
 800c320:	2b02      	cmp	r3, #2
 800c322:	d10c      	bne.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800c324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c326:	2b00      	cmp	r3, #0
 800c328:	d109      	bne.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c32a:	4b30      	ldr	r3, [pc, #192]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	08db      	lsrs	r3, r3, #3
 800c330:	f003 0303 	and.w	r3, r3, #3
 800c334:	4a2f      	ldr	r2, [pc, #188]	@ (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800c336:	fa22 f303 	lsr.w	r3, r2, r3
 800c33a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c33c:	e01e      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c33e:	4b2b      	ldr	r3, [pc, #172]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c34a:	d106      	bne.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800c34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c352:	d102      	bne.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c354:	4b28      	ldr	r3, [pc, #160]	@ (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800c356:	637b      	str	r3, [r7, #52]	@ 0x34
 800c358:	e010      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c35a:	4b24      	ldr	r3, [pc, #144]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c366:	d106      	bne.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800c368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c36e:	d102      	bne.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c370:	4b22      	ldr	r3, [pc, #136]	@ (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800c372:	637b      	str	r3, [r7, #52]	@ 0x34
 800c374:	e002      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c37a:	e003      	b.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800c37c:	e002      	b.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c382:	bf00      	nop
          }
        }
        break;
 800c384:	e25d      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800c386:	4b19      	ldr	r3, [pc, #100]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c38c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800c390:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800c392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c394:	2b00      	cmp	r3, #0
 800c396:	d103      	bne.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800c398:	f7fb fb14 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 800c39c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800c39e:	e250      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800c3a0:	4b12      	ldr	r3, [pc, #72]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3ac:	d10b      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3b4:	d107      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3b6:	f107 0314 	add.w	r3, r7, #20
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fd fc22 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3c4:	e04f      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800c3c6:	4b09      	ldr	r3, [pc, #36]	@ (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3d2:	d115      	bne.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3da:	d111      	bne.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3dc:	f107 0308 	add.w	r3, r7, #8
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fd fd79 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ea:	e03c      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800c3ec:	44020c00 	.word	0x44020c00
 800c3f0:	00bb8000 	.word	0x00bb8000
 800c3f4:	03d09000 	.word	0x03d09000
 800c3f8:	003d0900 	.word	0x003d0900
 800c3fc:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800c400:	4b94      	ldr	r3, [pc, #592]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0302 	and.w	r3, r3, #2
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d10d      	bne.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800c40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800c412:	d109      	bne.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c414:	4b8f      	ldr	r3, [pc, #572]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	08db      	lsrs	r3, r3, #3
 800c41a:	f003 0303 	and.w	r3, r3, #3
 800c41e:	4a8e      	ldr	r2, [pc, #568]	@ (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800c420:	fa22 f303 	lsr.w	r3, r2, r3
 800c424:	637b      	str	r3, [r7, #52]	@ 0x34
 800c426:	e01e      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800c428:	4b8a      	ldr	r3, [pc, #552]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c434:	d106      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800c436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c43c:	d102      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800c43e:	4b87      	ldr	r3, [pc, #540]	@ (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800c440:	637b      	str	r3, [r7, #52]	@ 0x34
 800c442:	e010      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800c444:	4b83      	ldr	r3, [pc, #524]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c44c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c450:	d106      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800c452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c454:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800c458:	d102      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800c45a:	4b81      	ldr	r3, [pc, #516]	@ (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800c45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c45e:	e002      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800c460:	2300      	movs	r3, #0
 800c462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c464:	e1ed      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c466:	e1ec      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800c468:	4b7a      	ldr	r3, [pc, #488]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c46a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c46e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c472:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800c474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c476:	2b00      	cmp	r3, #0
 800c478:	d103      	bne.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c47a:	f7fb fab9 	bl	80079f0 <HAL_RCC_GetPCLK3Freq>
 800c47e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800c480:	e1df      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800c482:	4b74      	ldr	r3, [pc, #464]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c48a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c48e:	d10b      	bne.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800c490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c496:	d107      	bne.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c498:	f107 0314 	add.w	r3, r7, #20
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fd fbb1 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4a6:	e045      	b.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800c4a8:	4b6a      	ldr	r3, [pc, #424]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4b4:	d10b      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4bc:	d107      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4be:	f107 0308 	add.w	r3, r7, #8
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fd fd08 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4cc:	e032      	b.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800c4ce:	4b61      	ldr	r3, [pc, #388]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 0302 	and.w	r3, r3, #2
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d10d      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800c4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c4e0:	d109      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c4e2:	4b5c      	ldr	r3, [pc, #368]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	08db      	lsrs	r3, r3, #3
 800c4e8:	f003 0303 	and.w	r3, r3, #3
 800c4ec:	4a5a      	ldr	r2, [pc, #360]	@ (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800c4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4f4:	e01e      	b.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800c4f6:	4b57      	ldr	r3, [pc, #348]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c4fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c502:	d106      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800c504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c50a:	d102      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800c50c:	4b53      	ldr	r3, [pc, #332]	@ (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800c50e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c510:	e010      	b.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800c512:	4b50      	ldr	r3, [pc, #320]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c51a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c51e:	d106      	bne.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800c520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c522:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c526:	d102      	bne.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800c528:	4b4d      	ldr	r3, [pc, #308]	@ (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800c52a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c52c:	e002      	b.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800c52e:	2300      	movs	r3, #0
 800c530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c532:	e186      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c534:	e185      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c536:	4b47      	ldr	r3, [pc, #284]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c53c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800c540:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c544:	2b00      	cmp	r3, #0
 800c546:	d103      	bne.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800c548:	f7fb fa3c 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 800c54c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800c54e:	e178      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800c550:	4b40      	ldr	r3, [pc, #256]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c55c:	d10b      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800c55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c564:	d107      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c566:	f107 0314 	add.w	r3, r7, #20
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fd fb4a 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	637b      	str	r3, [r7, #52]	@ 0x34
 800c574:	e045      	b.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800c576:	4b37      	ldr	r3, [pc, #220]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c57e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c582:	d10b      	bne.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800c584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c58a:	d107      	bne.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c58c:	f107 0308 	add.w	r3, r7, #8
 800c590:	4618      	mov	r0, r3
 800c592:	f7fd fca1 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	637b      	str	r3, [r7, #52]	@ 0x34
 800c59a:	e032      	b.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800c59c:	4b2d      	ldr	r3, [pc, #180]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 0302 	and.w	r3, r3, #2
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d10d      	bne.n	800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5aa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800c5ae:	d109      	bne.n	800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c5b0:	4b28      	ldr	r3, [pc, #160]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	08db      	lsrs	r3, r3, #3
 800c5b6:	f003 0303 	and.w	r3, r3, #3
 800c5ba:	4a27      	ldr	r2, [pc, #156]	@ (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800c5bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5c2:	e01e      	b.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800c5c4:	4b23      	ldr	r3, [pc, #140]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c5cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5d0:	d106      	bne.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5d8:	d102      	bne.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800c5da:	4b20      	ldr	r3, [pc, #128]	@ (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800c5dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5de:	e010      	b.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800c5e0:	4b1c      	ldr	r3, [pc, #112]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5ec:	d106      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800c5f4:	d102      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800c5f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800c5f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5fa:	e002      	b.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c600:	e11f      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c602:	e11e      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c604:	4b13      	ldr	r3, [pc, #76]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c606:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c60a:	f003 0303 	and.w	r3, r3, #3
 800c60e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c612:	2b03      	cmp	r3, #3
 800c614:	d85f      	bhi.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800c616:	a201      	add	r2, pc, #4	@ (adr r2, 800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800c618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61c:	0800c62d 	.word	0x0800c62d
 800c620:	0800c635 	.word	0x0800c635
 800c624:	0800c645 	.word	0x0800c645
 800c628:	0800c665 	.word	0x0800c665

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800c62c:	f7fb f998 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 800c630:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c632:	e053      	b.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c634:	f107 0320 	add.w	r3, r7, #32
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fd f979 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c640:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c642:	e04b      	b.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c644:	f107 0314 	add.w	r3, r7, #20
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fd fadb 	bl	8009c04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c652:	e043      	b.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800c654:	44020c00 	.word	0x44020c00
 800c658:	03d09000 	.word	0x03d09000
 800c65c:	003d0900 	.word	0x003d0900
 800c660:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c664:	4b79      	ldr	r3, [pc, #484]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c66a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c66e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c670:	4b76      	ldr	r3, [pc, #472]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 0302 	and.w	r3, r3, #2
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d10c      	bne.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800c67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d109      	bne.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c682:	4b72      	ldr	r3, [pc, #456]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	08db      	lsrs	r3, r3, #3
 800c688:	f003 0303 	and.w	r3, r3, #3
 800c68c:	4a70      	ldr	r2, [pc, #448]	@ (800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800c68e:	fa22 f303 	lsr.w	r3, r2, r3
 800c692:	637b      	str	r3, [r7, #52]	@ 0x34
 800c694:	e01e      	b.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c696:	4b6d      	ldr	r3, [pc, #436]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c69e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6a2:	d106      	bne.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800c6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6aa:	d102      	bne.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c6ac:	4b69      	ldr	r3, [pc, #420]	@ (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800c6ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6b0:	e010      	b.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6b2:	4b66      	ldr	r3, [pc, #408]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6be:	d106      	bne.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800c6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6c6:	d102      	bne.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c6c8:	4b63      	ldr	r3, [pc, #396]	@ (800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800c6ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6cc:	e002      	b.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c6d2:	e003      	b.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800c6d4:	e002      	b.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c6da:	bf00      	nop
          }
        }
        break;
 800c6dc:	e0b1      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800c6de:	4b5b      	ldr	r3, [pc, #364]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c6e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c6e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c6e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800c6ea:	4b58      	ldr	r3, [pc, #352]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c6ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6f0:	f003 0302 	and.w	r3, r3, #2
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d106      	bne.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d103      	bne.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800c6fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c702:	637b      	str	r3, [r7, #52]	@ 0x34
 800c704:	e01f      	b.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800c706:	4b51      	ldr	r3, [pc, #324]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c70c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c714:	d106      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800c716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c718:	2b40      	cmp	r3, #64	@ 0x40
 800c71a:	d103      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800c71c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c720:	637b      	str	r3, [r7, #52]	@ 0x34
 800c722:	e010      	b.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800c724:	4b49      	ldr	r3, [pc, #292]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c72c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c730:	d106      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800c732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c734:	2b80      	cmp	r3, #128	@ 0x80
 800c736:	d103      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800c738:	f248 0312 	movw	r3, #32786	@ 0x8012
 800c73c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c73e:	e002      	b.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c744:	e07d      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c746:	e07c      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c748:	4b40      	ldr	r3, [pc, #256]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c74a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c74e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c752:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c754:	4b3d      	ldr	r3, [pc, #244]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c75c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c760:	d105      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800c762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c764:	2b00      	cmp	r3, #0
 800c766:	d102      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800c768:	4b3c      	ldr	r3, [pc, #240]	@ (800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800c76a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c76c:	e031      	b.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800c76e:	4b37      	ldr	r3, [pc, #220]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c776:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c77a:	d10a      	bne.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800c77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77e:	2b10      	cmp	r3, #16
 800c780:	d107      	bne.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c782:	f107 0320 	add.w	r3, r7, #32
 800c786:	4618      	mov	r0, r3
 800c788:	f7fd f8d2 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c790:	e01f      	b.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800c792:	4b2e      	ldr	r3, [pc, #184]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c798:	f003 0302 	and.w	r3, r3, #2
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d106      	bne.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a2:	2b20      	cmp	r3, #32
 800c7a4:	d103      	bne.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800c7a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ac:	e011      	b.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800c7ae:	4b27      	ldr	r3, [pc, #156]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c7b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c7b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c7b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7bc:	d106      	bne.n	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	2b30      	cmp	r3, #48	@ 0x30
 800c7c2:	d103      	bne.n	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800c7c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c7c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ca:	e002      	b.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c7d0:	e037      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c7d2:	e036      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800c7d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c7d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c7da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c7de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e2:	2b10      	cmp	r3, #16
 800c7e4:	d107      	bne.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7e6:	f107 0320 	add.w	r3, r7, #32
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fd f8a0 	bl	8009930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c7f4:	e025      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800c7f6:	4b15      	ldr	r3, [pc, #84]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c7fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c802:	d10a      	bne.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800c804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c806:	2b20      	cmp	r3, #32
 800c808:	d107      	bne.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c80a:	f107 0308 	add.w	r3, r7, #8
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fd fb62 	bl	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	637b      	str	r3, [r7, #52]	@ 0x34
 800c818:	e00f      	b.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800c81a:	4b0c      	ldr	r3, [pc, #48]	@ (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c826:	d105      	bne.n	800c834 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800c828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82a:	2b30      	cmp	r3, #48	@ 0x30
 800c82c:	d102      	bne.n	800c834 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800c82e:	4b0b      	ldr	r3, [pc, #44]	@ (800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800c830:	637b      	str	r3, [r7, #52]	@ 0x34
 800c832:	e002      	b.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800c838:	e003      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c83a:	e002      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800c83c:	2300      	movs	r3, #0
 800c83e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c840:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800c842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c844:	4618      	mov	r0, r3
 800c846:	373c      	adds	r7, #60	@ 0x3c
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd90      	pop	{r4, r7, pc}
 800c84c:	44020c00 	.word	0x44020c00
 800c850:	03d09000 	.word	0x03d09000
 800c854:	003d0900 	.word	0x003d0900
 800c858:	017d7840 	.word	0x017d7840
 800c85c:	02dc6c00 	.word	0x02dc6c00

0800c860 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800c868:	4b48      	ldr	r3, [pc, #288]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a47      	ldr	r2, [pc, #284]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c86e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c872:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c874:	f7f8 fe20 	bl	80054b8 <HAL_GetTick>
 800c878:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c87a:	e008      	b.n	800c88e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c87c:	f7f8 fe1c 	bl	80054b8 <HAL_GetTick>
 800c880:	4602      	mov	r2, r0
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	2b02      	cmp	r3, #2
 800c888:	d901      	bls.n	800c88e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e07a      	b.n	800c984 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c88e:	4b3f      	ldr	r3, [pc, #252]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1f0      	bne.n	800c87c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c89a:	4b3c      	ldr	r3, [pc, #240]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c89e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c8a2:	f023 0303 	bic.w	r3, r3, #3
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	6811      	ldr	r1, [r2, #0]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	6852      	ldr	r2, [r2, #4]
 800c8ae:	0212      	lsls	r2, r2, #8
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	4936      	ldr	r1, [pc, #216]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	025b      	lsls	r3, r3, #9
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	431a      	orrs	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	041b      	lsls	r3, r3, #16
 800c8d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c8da:	431a      	orrs	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	061b      	lsls	r3, r3, #24
 800c8e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c8e8:	4928      	ldr	r1, [pc, #160]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c8ee:	4b27      	ldr	r3, [pc, #156]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f2:	f023 020c 	bic.w	r2, r3, #12
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	4924      	ldr	r1, [pc, #144]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800c900:	4b22      	ldr	r3, [pc, #136]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c904:	f023 0220 	bic.w	r2, r3, #32
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	69db      	ldr	r3, [r3, #28]
 800c90c:	491f      	ldr	r1, [pc, #124]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c90e:	4313      	orrs	r3, r2
 800c910:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c912:	4b1e      	ldr	r3, [pc, #120]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c91a:	491c      	ldr	r1, [pc, #112]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c91c:	4313      	orrs	r3, r2
 800c91e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800c920:	4b1a      	ldr	r3, [pc, #104]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c924:	4a19      	ldr	r2, [pc, #100]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c926:	f023 0310 	bic.w	r3, r3, #16
 800c92a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800c92c:	4b17      	ldr	r3, [pc, #92]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c930:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c934:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	6a12      	ldr	r2, [r2, #32]
 800c93c:	00d2      	lsls	r2, r2, #3
 800c93e:	4913      	ldr	r1, [pc, #76]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c940:	4313      	orrs	r3, r2
 800c942:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800c944:	4b11      	ldr	r3, [pc, #68]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c948:	4a10      	ldr	r2, [pc, #64]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c94a:	f043 0310 	orr.w	r3, r3, #16
 800c94e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800c950:	4b0e      	ldr	r3, [pc, #56]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a0d      	ldr	r2, [pc, #52]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c956:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c95a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c95c:	f7f8 fdac 	bl	80054b8 <HAL_GetTick>
 800c960:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c962:	e008      	b.n	800c976 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c964:	f7f8 fda8 	bl	80054b8 <HAL_GetTick>
 800c968:	4602      	mov	r2, r0
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	2b02      	cmp	r3, #2
 800c970:	d901      	bls.n	800c976 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c972:	2303      	movs	r3, #3
 800c974:	e006      	b.n	800c984 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c976:	4b05      	ldr	r3, [pc, #20]	@ (800c98c <RCCEx_PLL2_Config+0x12c>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0f0      	beq.n	800c964 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800c982:	2300      	movs	r3, #0

}
 800c984:	4618      	mov	r0, r3
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	44020c00 	.word	0x44020c00

0800c990 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800c998:	4b48      	ldr	r3, [pc, #288]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a47      	ldr	r2, [pc, #284]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800c99e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c9a4:	f7f8 fd88 	bl	80054b8 <HAL_GetTick>
 800c9a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c9aa:	e008      	b.n	800c9be <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c9ac:	f7f8 fd84 	bl	80054b8 <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d901      	bls.n	800c9be <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e07a      	b.n	800cab4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c9be:	4b3f      	ldr	r3, [pc, #252]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1f0      	bne.n	800c9ac <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c9ca:	4b3c      	ldr	r3, [pc, #240]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800c9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c9d2:	f023 0303 	bic.w	r3, r3, #3
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	6811      	ldr	r1, [r2, #0]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	6852      	ldr	r2, [r2, #4]
 800c9de:	0212      	lsls	r2, r2, #8
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	4936      	ldr	r1, [pc, #216]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	630b      	str	r3, [r1, #48]	@ 0x30
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	025b      	lsls	r3, r3, #9
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	3b01      	subs	r3, #1
 800ca04:	041b      	lsls	r3, r3, #16
 800ca06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ca0a:	431a      	orrs	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	695b      	ldr	r3, [r3, #20]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	061b      	lsls	r3, r3, #24
 800ca14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ca18:	4928      	ldr	r1, [pc, #160]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ca1e:	4b27      	ldr	r3, [pc, #156]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca22:	f023 020c 	bic.w	r2, r3, #12
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	4924      	ldr	r1, [pc, #144]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800ca30:	4b22      	ldr	r3, [pc, #136]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca34:	f023 0220 	bic.w	r2, r3, #32
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	69db      	ldr	r3, [r3, #28]
 800ca3c:	491f      	ldr	r1, [pc, #124]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ca42:	4b1e      	ldr	r3, [pc, #120]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca4a:	491c      	ldr	r1, [pc, #112]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800ca50:	4b1a      	ldr	r3, [pc, #104]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca54:	4a19      	ldr	r2, [pc, #100]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca56:	f023 0310 	bic.w	r3, r3, #16
 800ca5a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800ca5c:	4b17      	ldr	r3, [pc, #92]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca64:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	6a12      	ldr	r2, [r2, #32]
 800ca6c:	00d2      	lsls	r2, r2, #3
 800ca6e:	4913      	ldr	r1, [pc, #76]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca70:	4313      	orrs	r3, r2
 800ca72:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800ca74:	4b11      	ldr	r3, [pc, #68]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca78:	4a10      	ldr	r2, [pc, #64]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca7a:	f043 0310 	orr.w	r3, r3, #16
 800ca7e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800ca80:	4b0e      	ldr	r3, [pc, #56]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a0d      	ldr	r2, [pc, #52]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800ca86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca8a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ca8c:	f7f8 fd14 	bl	80054b8 <HAL_GetTick>
 800ca90:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca92:	e008      	b.n	800caa6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ca94:	f7f8 fd10 	bl	80054b8 <HAL_GetTick>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d901      	bls.n	800caa6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e006      	b.n	800cab4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800caa6:	4b05      	ldr	r3, [pc, #20]	@ (800cabc <RCCEx_PLL3_Config+0x12c>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0f0      	beq.n	800ca94 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	44020c00 	.word	0x44020c00

0800cac0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d101      	bne.n	800cad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e162      	b.n	800cd98 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a70      	ldr	r2, [pc, #448]	@ (800cc98 <HAL_SPI_Init+0x1d8>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d018      	beq.n	800cb0e <HAL_SPI_Init+0x4e>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a6e      	ldr	r2, [pc, #440]	@ (800cc9c <HAL_SPI_Init+0x1dc>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d013      	beq.n	800cb0e <HAL_SPI_Init+0x4e>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a6d      	ldr	r2, [pc, #436]	@ (800cca0 <HAL_SPI_Init+0x1e0>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d00e      	beq.n	800cb0e <HAL_SPI_Init+0x4e>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a6b      	ldr	r2, [pc, #428]	@ (800cca4 <HAL_SPI_Init+0x1e4>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d009      	beq.n	800cb0e <HAL_SPI_Init+0x4e>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a6a      	ldr	r2, [pc, #424]	@ (800cca8 <HAL_SPI_Init+0x1e8>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d004      	beq.n	800cb0e <HAL_SPI_Init+0x4e>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a68      	ldr	r2, [pc, #416]	@ (800ccac <HAL_SPI_Init+0x1ec>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	e000      	b.n	800cb10 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cb0e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a5f      	ldr	r2, [pc, #380]	@ (800cc98 <HAL_SPI_Init+0x1d8>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d018      	beq.n	800cb52 <HAL_SPI_Init+0x92>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a5d      	ldr	r2, [pc, #372]	@ (800cc9c <HAL_SPI_Init+0x1dc>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d013      	beq.n	800cb52 <HAL_SPI_Init+0x92>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a5c      	ldr	r2, [pc, #368]	@ (800cca0 <HAL_SPI_Init+0x1e0>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d00e      	beq.n	800cb52 <HAL_SPI_Init+0x92>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a5a      	ldr	r2, [pc, #360]	@ (800cca4 <HAL_SPI_Init+0x1e4>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d009      	beq.n	800cb52 <HAL_SPI_Init+0x92>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a59      	ldr	r2, [pc, #356]	@ (800cca8 <HAL_SPI_Init+0x1e8>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d004      	beq.n	800cb52 <HAL_SPI_Init+0x92>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a57      	ldr	r2, [pc, #348]	@ (800ccac <HAL_SPI_Init+0x1ec>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d105      	bne.n	800cb5e <HAL_SPI_Init+0x9e>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	2b0f      	cmp	r3, #15
 800cb58:	d901      	bls.n	800cb5e <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e11c      	b.n	800cd98 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fdac 	bl	800d6bc <SPI_GetPacketSize>
 800cb64:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a4b      	ldr	r2, [pc, #300]	@ (800cc98 <HAL_SPI_Init+0x1d8>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d018      	beq.n	800cba2 <HAL_SPI_Init+0xe2>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a49      	ldr	r2, [pc, #292]	@ (800cc9c <HAL_SPI_Init+0x1dc>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d013      	beq.n	800cba2 <HAL_SPI_Init+0xe2>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a48      	ldr	r2, [pc, #288]	@ (800cca0 <HAL_SPI_Init+0x1e0>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d00e      	beq.n	800cba2 <HAL_SPI_Init+0xe2>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a46      	ldr	r2, [pc, #280]	@ (800cca4 <HAL_SPI_Init+0x1e4>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d009      	beq.n	800cba2 <HAL_SPI_Init+0xe2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a45      	ldr	r2, [pc, #276]	@ (800cca8 <HAL_SPI_Init+0x1e8>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d004      	beq.n	800cba2 <HAL_SPI_Init+0xe2>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a43      	ldr	r2, [pc, #268]	@ (800ccac <HAL_SPI_Init+0x1ec>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d102      	bne.n	800cba8 <HAL_SPI_Init+0xe8>
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2b08      	cmp	r3, #8
 800cba6:	d820      	bhi.n	800cbea <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cbac:	4a40      	ldr	r2, [pc, #256]	@ (800ccb0 <HAL_SPI_Init+0x1f0>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d018      	beq.n	800cbe4 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a3f      	ldr	r2, [pc, #252]	@ (800ccb4 <HAL_SPI_Init+0x1f4>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d013      	beq.n	800cbe4 <HAL_SPI_Init+0x124>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a3d      	ldr	r2, [pc, #244]	@ (800ccb8 <HAL_SPI_Init+0x1f8>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d00e      	beq.n	800cbe4 <HAL_SPI_Init+0x124>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a3c      	ldr	r2, [pc, #240]	@ (800ccbc <HAL_SPI_Init+0x1fc>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d009      	beq.n	800cbe4 <HAL_SPI_Init+0x124>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a3a      	ldr	r2, [pc, #232]	@ (800ccc0 <HAL_SPI_Init+0x200>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d004      	beq.n	800cbe4 <HAL_SPI_Init+0x124>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a39      	ldr	r2, [pc, #228]	@ (800ccc4 <HAL_SPI_Init+0x204>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d104      	bne.n	800cbee <HAL_SPI_Init+0x12e>
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2b10      	cmp	r3, #16
 800cbe8:	d901      	bls.n	800cbee <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e0d4      	b.n	800cd98 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d106      	bne.n	800cc08 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7f7 fdbe 	bl	8004784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f022 0201 	bic.w	r2, r2, #1
 800cc1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cc2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	699b      	ldr	r3, [r3, #24]
 800cc30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc34:	d119      	bne.n	800cc6a <HAL_SPI_Init+0x1aa>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cc3e:	d103      	bne.n	800cc48 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d008      	beq.n	800cc5a <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10c      	bne.n	800cc6a <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cc54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc58:	d107      	bne.n	800cc6a <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cc68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d028      	beq.n	800ccc8 <HAL_SPI_Init+0x208>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	2b06      	cmp	r3, #6
 800cc7c:	d924      	bls.n	800ccc8 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	430a      	orrs	r2, r1
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	e020      	b.n	800ccd8 <HAL_SPI_Init+0x218>
 800cc96:	bf00      	nop
 800cc98:	40014c00 	.word	0x40014c00
 800cc9c:	50014c00 	.word	0x50014c00
 800cca0:	44002000 	.word	0x44002000
 800cca4:	54002000 	.word	0x54002000
 800cca8:	40015000 	.word	0x40015000
 800ccac:	50015000 	.word	0x50015000
 800ccb0:	40013000 	.word	0x40013000
 800ccb4:	50013000 	.word	0x50013000
 800ccb8:	40003800 	.word	0x40003800
 800ccbc:	50003800 	.word	0x50003800
 800ccc0:	40003c00 	.word	0x40003c00
 800ccc4:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ccd6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	69da      	ldr	r2, [r3, #28]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce0:	431a      	orrs	r2, r3
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	431a      	orrs	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccea:	ea42 0103 	orr.w	r1, r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68da      	ldr	r2, [r3, #12]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd02:	431a      	orrs	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd08:	431a      	orrs	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	699b      	ldr	r3, [r3, #24]
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	431a      	orrs	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	431a      	orrs	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6a1b      	ldr	r3, [r3, #32]
 800cd20:	431a      	orrs	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	431a      	orrs	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd2c:	431a      	orrs	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	431a      	orrs	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd44:	ea42 0103 	orr.w	r1, r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	430a      	orrs	r2, r1
 800cd52:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f022 0201 	bic.w	r2, r2, #1
 800cd62:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00a      	beq.n	800cd86 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	430a      	orrs	r2, r1
 800cd84:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af02      	add	r7, sp, #8
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	4613      	mov	r3, r2
 800cdae:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3320      	adds	r3, #32
 800cdb6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cdb8:	f7f8 fb7e 	bl	80054b8 <HAL_GetTick>
 800cdbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d001      	beq.n	800cdce <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800cdca:	2302      	movs	r3, #2
 800cdcc:	e1f9      	b.n	800d1c2 <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d002      	beq.n	800cdda <HAL_SPI_Transmit+0x3a>
 800cdd4:	88fb      	ldrh	r3, [r7, #6]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d101      	bne.n	800cdde <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e1f1      	b.n	800d1c2 <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d101      	bne.n	800cdec <HAL_SPI_Transmit+0x4c>
 800cde8:	2302      	movs	r3, #2
 800cdea:	e1ea      	b.n	800d1c2 <HAL_SPI_Transmit+0x422>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2203      	movs	r2, #3
 800cdf8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	88fa      	ldrh	r2, [r7, #6]
 800ce0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	88fa      	ldrh	r2, [r7, #6]
 800ce16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ce44:	d108      	bne.n	800ce58 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce54:	601a      	str	r2, [r3, #0]
 800ce56:	e009      	b.n	800ce6c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ce6a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	0c1b      	lsrs	r3, r3, #16
 800ce74:	041b      	lsls	r3, r3, #16
 800ce76:	88f9      	ldrh	r1, [r7, #6]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	6812      	ldr	r2, [r2, #0]
 800ce7c:	430b      	orrs	r3, r1
 800ce7e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f042 0201 	orr.w	r2, r2, #1
 800ce8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce98:	d107      	bne.n	800ceaa <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cea8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	2b0f      	cmp	r3, #15
 800ceb0:	d965      	bls.n	800cf7e <HAL_SPI_Transmit+0x1de>
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a94      	ldr	r2, [pc, #592]	@ (800d108 <HAL_SPI_Transmit+0x368>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d059      	beq.n	800cf70 <HAL_SPI_Transmit+0x1d0>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a92      	ldr	r2, [pc, #584]	@ (800d10c <HAL_SPI_Transmit+0x36c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d054      	beq.n	800cf70 <HAL_SPI_Transmit+0x1d0>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a91      	ldr	r2, [pc, #580]	@ (800d110 <HAL_SPI_Transmit+0x370>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d04f      	beq.n	800cf70 <HAL_SPI_Transmit+0x1d0>
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a8f      	ldr	r2, [pc, #572]	@ (800d114 <HAL_SPI_Transmit+0x374>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d04a      	beq.n	800cf70 <HAL_SPI_Transmit+0x1d0>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a8e      	ldr	r2, [pc, #568]	@ (800d118 <HAL_SPI_Transmit+0x378>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d045      	beq.n	800cf70 <HAL_SPI_Transmit+0x1d0>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a8c      	ldr	r2, [pc, #560]	@ (800d11c <HAL_SPI_Transmit+0x37c>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d147      	bne.n	800cf7e <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ceee:	e03f      	b.n	800cf70 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	695b      	ldr	r3, [r3, #20]
 800cef6:	f003 0302 	and.w	r3, r3, #2
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d114      	bne.n	800cf28 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6812      	ldr	r2, [r2, #0]
 800cf08:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf0e:	1d1a      	adds	r2, r3, #4
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cf26:	e023      	b.n	800cf70 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf28:	f7f8 fac6 	bl	80054b8 <HAL_GetTick>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	683a      	ldr	r2, [r7, #0]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d803      	bhi.n	800cf40 <HAL_SPI_Transmit+0x1a0>
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf3e:	d102      	bne.n	800cf46 <HAL_SPI_Transmit+0x1a6>
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d114      	bne.n	800cf70 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f000 faea 	bl	800d520 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	e128      	b.n	800d1c2 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1b9      	bne.n	800cef0 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800cf7c:	e0fb      	b.n	800d176 <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	2b07      	cmp	r3, #7
 800cf84:	f240 80f0 	bls.w	800d168 <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cf88:	e05d      	b.n	800d046 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	695b      	ldr	r3, [r3, #20]
 800cf90:	f003 0302 	and.w	r3, r3, #2
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d132      	bne.n	800cffe <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d918      	bls.n	800cfd6 <HAL_SPI_Transmit+0x236>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d014      	beq.n	800cfd6 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6812      	ldr	r2, [r2, #0]
 800cfb6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfbc:	1d1a      	adds	r2, r3, #4
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	3b02      	subs	r3, #2
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cfd4:	e037      	b.n	800d046 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfda:	881a      	ldrh	r2, [r3, #0]
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfe4:	1c9a      	adds	r2, r3, #2
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	3b01      	subs	r3, #1
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cffc:	e023      	b.n	800d046 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cffe:	f7f8 fa5b 	bl	80054b8 <HAL_GetTick>
 800d002:	4602      	mov	r2, r0
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d803      	bhi.n	800d016 <HAL_SPI_Transmit+0x276>
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d014:	d102      	bne.n	800d01c <HAL_SPI_Transmit+0x27c>
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d114      	bne.n	800d046 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f000 fa7f 	bl	800d520 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d028:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e0bd      	b.n	800d1c2 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d19b      	bne.n	800cf8a <HAL_SPI_Transmit+0x1ea>
 800d052:	e090      	b.n	800d176 <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	695b      	ldr	r3, [r3, #20]
 800d05a:	f003 0302 	and.w	r3, r3, #2
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d15e      	bne.n	800d120 <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d068:	b29b      	uxth	r3, r3
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	d918      	bls.n	800d0a0 <HAL_SPI_Transmit+0x300>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d072:	2b40      	cmp	r3, #64	@ 0x40
 800d074:	d914      	bls.n	800d0a0 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6812      	ldr	r2, [r2, #0]
 800d080:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d086:	1d1a      	adds	r2, r3, #4
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d092:	b29b      	uxth	r3, r3
 800d094:	3b04      	subs	r3, #4
 800d096:	b29a      	uxth	r2, r3
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d09e:	e063      	b.n	800d168 <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d917      	bls.n	800d0dc <HAL_SPI_Transmit+0x33c>
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d013      	beq.n	800d0dc <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0b8:	881a      	ldrh	r2, [r3, #0]
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0c2:	1c9a      	adds	r2, r3, #2
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	3b02      	subs	r3, #2
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d0da:	e045      	b.n	800d168 <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	3320      	adds	r3, #32
 800d0e6:	7812      	ldrb	r2, [r2, #0]
 800d0e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0ee:	1c5a      	adds	r2, r3, #1
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d106:	e02f      	b.n	800d168 <HAL_SPI_Transmit+0x3c8>
 800d108:	40013000 	.word	0x40013000
 800d10c:	50013000 	.word	0x50013000
 800d110:	40003800 	.word	0x40003800
 800d114:	50003800 	.word	0x50003800
 800d118:	40003c00 	.word	0x40003c00
 800d11c:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d120:	f7f8 f9ca 	bl	80054b8 <HAL_GetTick>
 800d124:	4602      	mov	r2, r0
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d803      	bhi.n	800d138 <HAL_SPI_Transmit+0x398>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d136:	d102      	bne.n	800d13e <HAL_SPI_Transmit+0x39e>
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d114      	bne.n	800d168 <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f000 f9ee 	bl	800d520 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d14a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800d164:	2303      	movs	r3, #3
 800d166:	e02c      	b.n	800d1c2 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d16e:	b29b      	uxth	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	f47f af6f 	bne.w	800d054 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	2200      	movs	r2, #0
 800d17e:	2108      	movs	r1, #8
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f000 fa6d 	bl	800d660 <SPI_WaitOnFlagUntilTimeout>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d007      	beq.n	800d19c <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d192:	f043 0220 	orr.w	r2, r3, #32
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f000 f9bf 	bl	800d520 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d001      	beq.n	800d1c0 <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e000      	b.n	800d1c2 <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
  }
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3718      	adds	r7, #24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop

0800d1cc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b086      	sub	sp, #24
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	603b      	str	r3, [r7, #0]
 800d1d8:	4613      	mov	r3, r2
 800d1da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3330      	adds	r3, #48	@ 0x30
 800d1e2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d1e4:	f7f8 f968 	bl	80054b8 <HAL_GetTick>
 800d1e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d001      	beq.n	800d1fa <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	e181      	b.n	800d4fe <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d002      	beq.n	800d206 <HAL_SPI_Receive+0x3a>
 800d200:	88fb      	ldrh	r3, [r7, #6]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e179      	b.n	800d4fe <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800d210:	2b01      	cmp	r3, #1
 800d212:	d101      	bne.n	800d218 <HAL_SPI_Receive+0x4c>
 800d214:	2302      	movs	r3, #2
 800d216:	e172      	b.n	800d4fe <HAL_SPI_Receive+0x332>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2204      	movs	r2, #4
 800d224:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	88fa      	ldrh	r2, [r7, #6]
 800d23a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	88fa      	ldrh	r2, [r7, #6]
 800d242:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d270:	d108      	bne.n	800d284 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d280:	601a      	str	r2, [r3, #0]
 800d282:	e009      	b.n	800d298 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d296:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	0c1b      	lsrs	r3, r3, #16
 800d2a0:	041b      	lsls	r3, r3, #16
 800d2a2:	88f9      	ldrh	r1, [r7, #6]
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	6812      	ldr	r2, [r2, #0]
 800d2a8:	430b      	orrs	r3, r1
 800d2aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f042 0201 	orr.w	r2, r2, #1
 800d2ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d2c4:	d107      	bne.n	800d2d6 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d2d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	2b0f      	cmp	r3, #15
 800d2dc:	d966      	bls.n	800d3ac <HAL_SPI_Receive+0x1e0>
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a89      	ldr	r2, [pc, #548]	@ (800d508 <HAL_SPI_Receive+0x33c>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d05a      	beq.n	800d39e <HAL_SPI_Receive+0x1d2>
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a87      	ldr	r2, [pc, #540]	@ (800d50c <HAL_SPI_Receive+0x340>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d055      	beq.n	800d39e <HAL_SPI_Receive+0x1d2>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a86      	ldr	r2, [pc, #536]	@ (800d510 <HAL_SPI_Receive+0x344>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d050      	beq.n	800d39e <HAL_SPI_Receive+0x1d2>
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a84      	ldr	r2, [pc, #528]	@ (800d514 <HAL_SPI_Receive+0x348>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d04b      	beq.n	800d39e <HAL_SPI_Receive+0x1d2>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a83      	ldr	r2, [pc, #524]	@ (800d518 <HAL_SPI_Receive+0x34c>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d046      	beq.n	800d39e <HAL_SPI_Receive+0x1d2>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a81      	ldr	r2, [pc, #516]	@ (800d51c <HAL_SPI_Receive+0x350>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d148      	bne.n	800d3ac <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d31a:	e040      	b.n	800d39e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	695a      	ldr	r2, [r3, #20]
 800d322:	f248 0308 	movw	r3, #32776	@ 0x8008
 800d326:	4013      	ands	r3, r2
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d014      	beq.n	800d356 <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d334:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d336:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d33c:	1d1a      	adds	r2, r3, #4
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800d348:	b29b      	uxth	r3, r3
 800d34a:	3b01      	subs	r3, #1
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800d354:	e023      	b.n	800d39e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d356:	f7f8 f8af 	bl	80054b8 <HAL_GetTick>
 800d35a:	4602      	mov	r2, r0
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	683a      	ldr	r2, [r7, #0]
 800d362:	429a      	cmp	r2, r3
 800d364:	d803      	bhi.n	800d36e <HAL_SPI_Receive+0x1a2>
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36c:	d102      	bne.n	800d374 <HAL_SPI_Receive+0x1a8>
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d114      	bne.n	800d39e <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f000 f8d3 	bl	800d520 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d380:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2201      	movs	r2, #1
 800d38e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800d39a:	2303      	movs	r3, #3
 800d39c:	e0af      	b.n	800d4fe <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1b8      	bne.n	800d31c <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800d3aa:	e095      	b.n	800d4d8 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	2b07      	cmp	r3, #7
 800d3b2:	f240 808b 	bls.w	800d4cc <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d3b6:	e03f      	b.n	800d438 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	695b      	ldr	r3, [r3, #20]
 800d3be:	f003 0301 	and.w	r3, r3, #1
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d114      	bne.n	800d3f0 <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3ca:	697a      	ldr	r2, [r7, #20]
 800d3cc:	8812      	ldrh	r2, [r2, #0]
 800d3ce:	b292      	uxth	r2, r2
 800d3d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3d6:	1c9a      	adds	r2, r3, #2
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800d3ee:	e023      	b.n	800d438 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3f0:	f7f8 f862 	bl	80054b8 <HAL_GetTick>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d803      	bhi.n	800d408 <HAL_SPI_Receive+0x23c>
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d406:	d102      	bne.n	800d40e <HAL_SPI_Receive+0x242>
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d114      	bne.n	800d438 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f000 f886 	bl	800d520 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d41a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2201      	movs	r2, #1
 800d428:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2200      	movs	r2, #0
 800d430:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e062      	b.n	800d4fe <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800d43e:	b29b      	uxth	r3, r3
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1b9      	bne.n	800d3b8 <HAL_SPI_Receive+0x1ec>
 800d444:	e048      	b.n	800d4d8 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	695b      	ldr	r3, [r3, #20]
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b01      	cmp	r3, #1
 800d452:	d117      	bne.n	800d484 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d460:	7812      	ldrb	r2, [r2, #0]
 800d462:	b2d2      	uxtb	r2, r2
 800d464:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800d476:	b29b      	uxth	r3, r3
 800d478:	3b01      	subs	r3, #1
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800d482:	e023      	b.n	800d4cc <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d484:	f7f8 f818 	bl	80054b8 <HAL_GetTick>
 800d488:	4602      	mov	r2, r0
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	429a      	cmp	r2, r3
 800d492:	d803      	bhi.n	800d49c <HAL_SPI_Receive+0x2d0>
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49a:	d102      	bne.n	800d4a2 <HAL_SPI_Receive+0x2d6>
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d114      	bne.n	800d4cc <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f000 f83c 	bl	800d520 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d4ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	e018      	b.n	800d4fe <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1b6      	bne.n	800d446 <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f000 f821 	bl	800d520 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e000      	b.n	800d4fe <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 800d4fc:	2300      	movs	r3, #0
  }
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	40013000 	.word	0x40013000
 800d50c:	50013000 	.word	0x50013000
 800d510:	40003800 	.word	0x40003800
 800d514:	50003800 	.word	0x50003800
 800d518:	40003c00 	.word	0x40003c00
 800d51c:	50003c00 	.word	0x50003c00

0800d520 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	695b      	ldr	r3, [r3, #20]
 800d52e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	699a      	ldr	r2, [r3, #24]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f042 0208 	orr.w	r2, r2, #8
 800d53e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	699a      	ldr	r2, [r3, #24]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f042 0210 	orr.w	r2, r2, #16
 800d54e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f022 0201 	bic.w	r2, r2, #1
 800d55e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	6812      	ldr	r2, [r2, #0]
 800d56a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800d56e:	f023 0303 	bic.w	r3, r3, #3
 800d572:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	689a      	ldr	r2, [r3, #8]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d582:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d014      	beq.n	800d5ba <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00f      	beq.n	800d5ba <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	699a      	ldr	r2, [r3, #24]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f042 0220 	orr.w	r2, r2, #32
 800d5b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	2b03      	cmp	r3, #3
 800d5c4:	d014      	beq.n	800d5f0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00f      	beq.n	800d5f0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5d6:	f043 0204 	orr.w	r2, r3, #4
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	699a      	ldr	r2, [r3, #24]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d5ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00f      	beq.n	800d61a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d600:	f043 0201 	orr.w	r2, r3, #1
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	699a      	ldr	r2, [r3, #24]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d618:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00f      	beq.n	800d644 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d62a:	f043 0208 	orr.w	r2, r3, #8
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	699a      	ldr	r2, [r3, #24]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d642:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800d654:	bf00      	nop
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	603b      	str	r3, [r7, #0]
 800d66c:	4613      	mov	r3, r2
 800d66e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d670:	e010      	b.n	800d694 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d672:	f7f7 ff21 	bl	80054b8 <HAL_GetTick>
 800d676:	4602      	mov	r2, r0
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	683a      	ldr	r2, [r7, #0]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d803      	bhi.n	800d68a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d688:	d102      	bne.n	800d690 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d690:	2303      	movs	r3, #3
 800d692:	e00f      	b.n	800d6b4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	695a      	ldr	r2, [r3, #20]
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	4013      	ands	r3, r2
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	bf0c      	ite	eq
 800d6a4:	2301      	moveq	r3, #1
 800d6a6:	2300      	movne	r3, #0
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d0df      	beq.n	800d672 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b085      	sub	sp, #20
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6c8:	095b      	lsrs	r3, r3, #5
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	3307      	adds	r3, #7
 800d6da:	08db      	lsrs	r3, r3, #3
 800d6dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3714      	adds	r7, #20
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
	...

0800d6f4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d101      	bne.n	800d70a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	e03e      	b.n	800d788 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d710:	b2db      	uxtb	r3, r3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d106      	bne.n	800d724 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7f7 fc2a 	bl	8004f78 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	3308      	adds	r3, #8
 800d72c:	4619      	mov	r1, r3
 800d72e:	4610      	mov	r0, r2
 800d730:	f002 fb3e 	bl	800fdb0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6818      	ldr	r0, [r3, #0]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	461a      	mov	r2, r3
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	f002 fc04 	bl	800ff4c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6858      	ldr	r0, [r3, #4]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	689a      	ldr	r2, [r3, #8]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d750:	6879      	ldr	r1, [r7, #4]
 800d752:	f002 fc48 	bl	800ffe6 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	6892      	ldr	r2, [r2, #8]
 800d75e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	6892      	ldr	r2, [r2, #8]
 800d76a:	f041 0101 	orr.w	r1, r1, #1
 800d76e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d772:	4b07      	ldr	r3, [pc, #28]	@ (800d790 <HAL_SRAM_Init+0x9c>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a06      	ldr	r2, [pc, #24]	@ (800d790 <HAL_SRAM_Init+0x9c>)
 800d778:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d77c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2201      	movs	r2, #1
 800d782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3710      	adds	r7, #16
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	47000400 	.word	0x47000400

0800d794 <HAL_SRAM_Read_8b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
                                   uint32_t BufferSize)
{
 800d794:	b480      	push	{r7}
 800d796:	b08b      	sub	sp, #44	@ 0x2c
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	603b      	str	r3, [r7, #0]
  uint32_t size;
  uint32_t time_out = 0 ;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	623b      	str	r3, [r7, #32]
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	61fb      	str	r3, [r7, #28]
  uint8_t *pdestbuff = pDstBuffer;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	61bb      	str	r3, [r7, #24]
  HAL_SRAM_StateTypeDef state = hsram->State;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d7b4:	75fb      	strb	r3, [r7, #23]


  while(*psramaddress == 0xFF && time_out++ < 0xFFFFFF0 );
 800d7b6:	bf00      	nop
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	2bff      	cmp	r3, #255	@ 0xff
 800d7c0:	d105      	bne.n	800d7ce <HAL_SRAM_Read_8b+0x3a>
 800d7c2:	6a3b      	ldr	r3, [r7, #32]
 800d7c4:	1c5a      	adds	r2, r3, #1
 800d7c6:	623a      	str	r2, [r7, #32]
 800d7c8:	4a1e      	ldr	r2, [pc, #120]	@ (800d844 <HAL_SRAM_Read_8b+0xb0>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d9f4      	bls.n	800d7b8 <HAL_SRAM_Read_8b+0x24>
  /* Check the SRAM controller state */
  if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 800d7ce:	7dfb      	ldrb	r3, [r7, #23]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d002      	beq.n	800d7da <HAL_SRAM_Read_8b+0x46>
 800d7d4:	7dfb      	ldrb	r3, [r7, #23]
 800d7d6:	2b04      	cmp	r3, #4
 800d7d8:	d12c      	bne.n	800d834 <HAL_SRAM_Read_8b+0xa0>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d101      	bne.n	800d7e8 <HAL_SRAM_Read_8b+0x54>
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	e026      	b.n	800d836 <HAL_SRAM_Read_8b+0xa2>
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Read data from memory */
    for (size = BufferSize; size != 0U; size--)
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7fc:	e00d      	b.n	800d81a <HAL_SRAM_Read_8b+0x86>
    {
      *pdestbuff = *psramaddress;
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	b2da      	uxtb	r2, r3
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	701a      	strb	r2, [r3, #0]
      pdestbuff++;
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	3301      	adds	r3, #1
 800d80c:	61bb      	str	r3, [r7, #24]
      psramaddress++;
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	3301      	adds	r3, #1
 800d812:	61fb      	str	r3, [r7, #28]
    for (size = BufferSize; size != 0U; size--)
 800d814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d816:	3b01      	subs	r3, #1
 800d818:	627b      	str	r3, [r7, #36]	@ 0x24
 800d81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d1ee      	bne.n	800d7fe <HAL_SRAM_Read_8b+0x6a>
    }

    /* Update the SRAM controller state */
    hsram->State = state;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	7dfa      	ldrb	r2, [r7, #23]
 800d824:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	e000      	b.n	800d836 <HAL_SRAM_Read_8b+0xa2>
    return HAL_ERROR;
 800d834:	2301      	movs	r3, #1
}
 800d836:	4618      	mov	r0, r3
 800d838:	372c      	adds	r7, #44	@ 0x2c
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	0fffffef 	.word	0x0fffffef

0800d848 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800d848:	b480      	push	{r7}
 800d84a:	b089      	sub	sp, #36	@ 0x24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
 800d854:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d864:	b2db      	uxtb	r3, r3
 800d866:	2b01      	cmp	r3, #1
 800d868:	d12b      	bne.n	800d8c2 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d870:	2b01      	cmp	r3, #1
 800d872:	d101      	bne.n	800d878 <HAL_SRAM_Write_8b+0x30>
 800d874:	2302      	movs	r3, #2
 800d876:	e025      	b.n	800d8c4 <HAL_SRAM_Write_8b+0x7c>
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2201      	movs	r2, #1
 800d87c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2202      	movs	r2, #2
 800d884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	61fb      	str	r3, [r7, #28]
 800d88c:	e00c      	b.n	800d8a8 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	781a      	ldrb	r2, [r3, #0]
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	3301      	adds	r3, #1
 800d89a:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	61fb      	str	r3, [r7, #28]
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1ef      	bne.n	800d88e <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e000      	b.n	800d8c4 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800d8c2:	2301      	movs	r3, #1
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3724      	adds	r7, #36	@ 0x24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e042      	b.n	800d968 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d106      	bne.n	800d8fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7f7 f8ad 	bl	8004a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2224      	movs	r2, #36	@ 0x24
 800d8fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f022 0201 	bic.w	r2, r2, #1
 800d910:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d916:	2b00      	cmp	r3, #0
 800d918:	d002      	beq.n	800d920 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 fec8 	bl	800e6b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fcd7 	bl	800e2d4 <UART_SetConfig>
 800d926:	4603      	mov	r3, r0
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d101      	bne.n	800d930 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
 800d92e:	e01b      	b.n	800d968 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	685a      	ldr	r2, [r3, #4]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d93e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689a      	ldr	r2, [r3, #8]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d94e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f042 0201 	orr.w	r2, r2, #1
 800d95e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 ff47 	bl	800e7f4 <UART_CheckIdleState>
 800d966:	4603      	mov	r3, r0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b08a      	sub	sp, #40	@ 0x28
 800d974:	af02      	add	r7, sp, #8
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	603b      	str	r3, [r7, #0]
 800d97c:	4613      	mov	r3, r2
 800d97e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d986:	2b20      	cmp	r3, #32
 800d988:	f040 808b 	bne.w	800daa2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <HAL_UART_Transmit+0x28>
 800d992:	88fb      	ldrh	r3, [r7, #6]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	e083      	b.n	800daa4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9a6:	2b80      	cmp	r3, #128	@ 0x80
 800d9a8:	d107      	bne.n	800d9ba <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	689a      	ldr	r2, [r3, #8]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d9b8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2221      	movs	r2, #33	@ 0x21
 800d9c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d9ca:	f7f7 fd75 	bl	80054b8 <HAL_GetTick>
 800d9ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	88fa      	ldrh	r2, [r7, #6]
 800d9d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	88fa      	ldrh	r2, [r7, #6]
 800d9dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9e8:	d108      	bne.n	800d9fc <HAL_UART_Transmit+0x8c>
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d104      	bne.n	800d9fc <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	61bb      	str	r3, [r7, #24]
 800d9fa:	e003      	b.n	800da04 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800da00:	2300      	movs	r3, #0
 800da02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800da04:	e030      	b.n	800da68 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	2200      	movs	r2, #0
 800da0e:	2180      	movs	r1, #128	@ 0x80
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f000 ff99 	bl	800e948 <UART_WaitOnFlagUntilTimeout>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d005      	beq.n	800da28 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2220      	movs	r2, #32
 800da20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800da24:	2303      	movs	r3, #3
 800da26:	e03d      	b.n	800daa4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d10b      	bne.n	800da46 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	461a      	mov	r2, r3
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	3302      	adds	r3, #2
 800da42:	61bb      	str	r3, [r7, #24]
 800da44:	e007      	b.n	800da56 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	781a      	ldrb	r2, [r3, #0]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	3301      	adds	r3, #1
 800da54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	3b01      	subs	r3, #1
 800da60:	b29a      	uxth	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800da6e:	b29b      	uxth	r3, r3
 800da70:	2b00      	cmp	r3, #0
 800da72:	d1c8      	bne.n	800da06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	2200      	movs	r2, #0
 800da7c:	2140      	movs	r1, #64	@ 0x40
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 ff62 	bl	800e948 <UART_WaitOnFlagUntilTimeout>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d005      	beq.n	800da96 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2220      	movs	r2, #32
 800da8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800da92:	2303      	movs	r3, #3
 800da94:	e006      	b.n	800daa4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2220      	movs	r2, #32
 800da9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800da9e:	2300      	movs	r3, #0
 800daa0:	e000      	b.n	800daa4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800daa2:	2302      	movs	r3, #2
  }
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3720      	adds	r7, #32
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800daac:	b480      	push	{r7}
 800daae:	b091      	sub	sp, #68	@ 0x44
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	4613      	mov	r3, r2
 800dab8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dac0:	2b20      	cmp	r3, #32
 800dac2:	f040 8088 	bne.w	800dbd6 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <HAL_UART_Transmit_IT+0x26>
 800dacc:	88fb      	ldrh	r3, [r7, #6]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d101      	bne.n	800dad6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	e080      	b.n	800dbd8 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dae0:	2b80      	cmp	r3, #128	@ 0x80
 800dae2:	d107      	bne.n	800daf4 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	689a      	ldr	r2, [r3, #8]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800daf2:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	68ba      	ldr	r2, [r7, #8]
 800daf8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	88fa      	ldrh	r2, [r7, #6]
 800dafe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	88fa      	ldrh	r2, [r7, #6]
 800db06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2200      	movs	r2, #0
 800db0e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2200      	movs	r2, #0
 800db14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2221      	movs	r2, #33	@ 0x21
 800db1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db28:	d12a      	bne.n	800db80 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db32:	d107      	bne.n	800db44 <HAL_UART_Transmit_IT+0x98>
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d103      	bne.n	800db44 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4a29      	ldr	r2, [pc, #164]	@ (800dbe4 <HAL_UART_Transmit_IT+0x138>)
 800db40:	679a      	str	r2, [r3, #120]	@ 0x78
 800db42:	e002      	b.n	800db4a <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	4a28      	ldr	r2, [pc, #160]	@ (800dbe8 <HAL_UART_Transmit_IT+0x13c>)
 800db48:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	3308      	adds	r3, #8
 800db50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db54:	e853 3f00 	ldrex	r3, [r3]
 800db58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800db60:	63bb      	str	r3, [r7, #56]	@ 0x38
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	3308      	adds	r3, #8
 800db68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db6a:	637a      	str	r2, [r7, #52]	@ 0x34
 800db6c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db72:	e841 2300 	strex	r3, r2, [r1]
 800db76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800db78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d1e5      	bne.n	800db4a <HAL_UART_Transmit_IT+0x9e>
 800db7e:	e028      	b.n	800dbd2 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db88:	d107      	bne.n	800db9a <HAL_UART_Transmit_IT+0xee>
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	691b      	ldr	r3, [r3, #16]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d103      	bne.n	800db9a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	4a15      	ldr	r2, [pc, #84]	@ (800dbec <HAL_UART_Transmit_IT+0x140>)
 800db96:	679a      	str	r2, [r3, #120]	@ 0x78
 800db98:	e002      	b.n	800dba0 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	4a14      	ldr	r2, [pc, #80]	@ (800dbf0 <HAL_UART_Transmit_IT+0x144>)
 800db9e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	e853 3f00 	ldrex	r3, [r3]
 800dbac:	613b      	str	r3, [r7, #16]
   return(result);
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	461a      	mov	r2, r3
 800dbbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbbe:	623b      	str	r3, [r7, #32]
 800dbc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc2:	69f9      	ldr	r1, [r7, #28]
 800dbc4:	6a3a      	ldr	r2, [r7, #32]
 800dbc6:	e841 2300 	strex	r3, r2, [r1]
 800dbca:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1e6      	bne.n	800dba0 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	e000      	b.n	800dbd8 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800dbd6:	2302      	movs	r3, #2
  }
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3744      	adds	r7, #68	@ 0x44
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	0800efbb 	.word	0x0800efbb
 800dbe8:	0800eedb 	.word	0x0800eedb
 800dbec:	0800ee19 	.word	0x0800ee19
 800dbf0:	0800ed61 	.word	0x0800ed61

0800dbf4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b08a      	sub	sp, #40	@ 0x28
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc08:	2b20      	cmp	r3, #32
 800dc0a:	d14b      	bne.n	800dca4 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d002      	beq.n	800dc18 <HAL_UART_Receive_IT+0x24>
 800dc12:	88fb      	ldrh	r3, [r7, #6]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d101      	bne.n	800dc1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e044      	b.n	800dca6 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc2c:	2b40      	cmp	r3, #64	@ 0x40
 800dc2e:	d107      	bne.n	800dc40 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	689a      	ldr	r2, [r3, #8]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc3e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a1a      	ldr	r2, [pc, #104]	@ (800dcb0 <HAL_UART_Receive_IT+0xbc>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d024      	beq.n	800dc94 <HAL_UART_Receive_IT+0xa0>
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a19      	ldr	r2, [pc, #100]	@ (800dcb4 <HAL_UART_Receive_IT+0xc0>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d01f      	beq.n	800dc94 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d018      	beq.n	800dc94 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	e853 3f00 	ldrex	r3, [r3]
 800dc6e:	613b      	str	r3, [r7, #16]
   return(result);
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dc76:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc80:	623b      	str	r3, [r7, #32]
 800dc82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc84:	69f9      	ldr	r1, [r7, #28]
 800dc86:	6a3a      	ldr	r2, [r7, #32]
 800dc88:	e841 2300 	strex	r3, r2, [r1]
 800dc8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1e6      	bne.n	800dc62 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dc94:	88fb      	ldrh	r3, [r7, #6]
 800dc96:	461a      	mov	r2, r3
 800dc98:	68b9      	ldr	r1, [r7, #8]
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f000 fec2 	bl	800ea24 <UART_Start_Receive_IT>
 800dca0:	4603      	mov	r3, r0
 800dca2:	e000      	b.n	800dca6 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800dca4:	2302      	movs	r3, #2
  }
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3728      	adds	r7, #40	@ 0x28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	44002400 	.word	0x44002400
 800dcb4:	54002400 	.word	0x54002400

0800dcb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b0ae      	sub	sp, #184	@ 0xb8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	69db      	ldr	r3, [r3, #28]
 800dcc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dcde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dce2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800dce6:	4013      	ands	r3, r2
 800dce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800dcec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d11b      	bne.n	800dd2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dcf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dcf8:	f003 0320 	and.w	r3, r3, #32
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d015      	beq.n	800dd2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dd04:	f003 0320 	and.w	r3, r3, #32
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d105      	bne.n	800dd18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d009      	beq.n	800dd2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f000 82ac 	beq.w	800e27a <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	4798      	blx	r3
      }
      return;
 800dd2a:	e2a6      	b.n	800e27a <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dd2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f000 80fd 	beq.w	800df30 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dd36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dd3a:	4b7a      	ldr	r3, [pc, #488]	@ (800df24 <HAL_UART_IRQHandler+0x26c>)
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d106      	bne.n	800dd50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dd42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dd46:	4b78      	ldr	r3, [pc, #480]	@ (800df28 <HAL_UART_IRQHandler+0x270>)
 800dd48:	4013      	ands	r3, r2
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f000 80f0 	beq.w	800df30 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd54:	f003 0301 	and.w	r3, r3, #1
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d011      	beq.n	800dd80 <HAL_UART_IRQHandler+0xc8>
 800dd5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dd60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00b      	beq.n	800dd80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd76:	f043 0201 	orr.w	r2, r3, #1
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd84:	f003 0302 	and.w	r3, r3, #2
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d011      	beq.n	800ddb0 <HAL_UART_IRQHandler+0xf8>
 800dd8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd90:	f003 0301 	and.w	r3, r3, #1
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00b      	beq.n	800ddb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dda6:	f043 0204 	orr.w	r2, r3, #4
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ddb4:	f003 0304 	and.w	r3, r3, #4
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d011      	beq.n	800dde0 <HAL_UART_IRQHandler+0x128>
 800ddbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddc0:	f003 0301 	and.w	r3, r3, #1
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00b      	beq.n	800dde0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2204      	movs	r2, #4
 800ddce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddd6:	f043 0202 	orr.w	r2, r3, #2
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dde0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dde4:	f003 0308 	and.w	r3, r3, #8
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d017      	beq.n	800de1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ddec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ddf0:	f003 0320 	and.w	r3, r3, #32
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d105      	bne.n	800de04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ddf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ddfc:	4b49      	ldr	r3, [pc, #292]	@ (800df24 <HAL_UART_IRQHandler+0x26c>)
 800ddfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00b      	beq.n	800de1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2208      	movs	r2, #8
 800de0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de12:	f043 0208 	orr.w	r2, r3, #8
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800de1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800de20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800de24:	2b00      	cmp	r3, #0
 800de26:	d012      	beq.n	800de4e <HAL_UART_IRQHandler+0x196>
 800de28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800de2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800de30:	2b00      	cmp	r3, #0
 800de32:	d00c      	beq.n	800de4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800de3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de44:	f043 0220 	orr.w	r2, r3, #32
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 8212 	beq.w	800e27e <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800de5e:	f003 0320 	and.w	r3, r3, #32
 800de62:	2b00      	cmp	r3, #0
 800de64:	d013      	beq.n	800de8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800de6a:	f003 0320 	and.w	r3, r3, #32
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d105      	bne.n	800de7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d007      	beq.n	800de8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de82:	2b00      	cmp	r3, #0
 800de84:	d003      	beq.n	800de8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dea2:	2b40      	cmp	r3, #64	@ 0x40
 800dea4:	d005      	beq.n	800deb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800deaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d02e      	beq.n	800df10 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 fed8 	bl	800ec68 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dec2:	2b40      	cmp	r3, #64	@ 0x40
 800dec4:	d120      	bne.n	800df08 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800decc:	2b00      	cmp	r3, #0
 800dece:	d017      	beq.n	800df00 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ded6:	4a15      	ldr	r2, [pc, #84]	@ (800df2c <HAL_UART_IRQHandler+0x274>)
 800ded8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7f7 fd25 	bl	8005930 <HAL_DMA_Abort_IT>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d019      	beq.n	800df20 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800def2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800defa:	4610      	mov	r0, r2
 800defc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800defe:	e00f      	b.n	800df20 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 f9d1 	bl	800e2a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df06:	e00b      	b.n	800df20 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 f9cd 	bl	800e2a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df0e:	e007      	b.n	800df20 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 f9c9 	bl	800e2a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800df1e:	e1ae      	b.n	800e27e <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df20:	bf00      	nop
    return;
 800df22:	e1ac      	b.n	800e27e <HAL_UART_IRQHandler+0x5c6>
 800df24:	10000001 	.word	0x10000001
 800df28:	04000120 	.word	0x04000120
 800df2c:	0800ed35 	.word	0x0800ed35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df34:	2b01      	cmp	r3, #1
 800df36:	f040 8142 	bne.w	800e1be <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800df3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800df3e:	f003 0310 	and.w	r3, r3, #16
 800df42:	2b00      	cmp	r3, #0
 800df44:	f000 813b 	beq.w	800e1be <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800df48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800df4c:	f003 0310 	and.w	r3, r3, #16
 800df50:	2b00      	cmp	r3, #0
 800df52:	f000 8134 	beq.w	800e1be <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2210      	movs	r2, #16
 800df5c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df68:	2b40      	cmp	r3, #64	@ 0x40
 800df6a:	f040 80aa 	bne.w	800e0c2 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df78:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800df7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 8084 	beq.w	800e08e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df8c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800df90:	429a      	cmp	r2, r3
 800df92:	d27c      	bcs.n	800e08e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800df9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfa6:	2b81      	cmp	r3, #129	@ 0x81
 800dfa8:	d060      	beq.n	800e06c <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dfb2:	e853 3f00 	ldrex	r3, [r3]
 800dfb6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800dfb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dfba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dfbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dfcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dfd0:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dfd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dfd8:	e841 2300 	strex	r3, r2, [r1]
 800dfdc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800dfde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1e2      	bne.n	800dfaa <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3308      	adds	r3, #8
 800dfea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfee:	e853 3f00 	ldrex	r3, [r3]
 800dff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dff6:	f023 0301 	bic.w	r3, r3, #1
 800dffa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	3308      	adds	r3, #8
 800e004:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e008:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e00a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e00c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e00e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e010:	e841 2300 	strex	r3, r2, [r1]
 800e014:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d1e3      	bne.n	800dfe4 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2220      	movs	r2, #32
 800e020:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e032:	e853 3f00 	ldrex	r3, [r3]
 800e036:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e03a:	f023 0310 	bic.w	r3, r3, #16
 800e03e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	461a      	mov	r2, r3
 800e048:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e04c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e04e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e050:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e052:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e054:	e841 2300 	strex	r3, r2, [r1]
 800e058:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e05a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d1e4      	bne.n	800e02a <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e066:	4618      	mov	r0, r3
 800e068:	f7f7 fbe6 	bl	8005838 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2202      	movs	r2, #2
 800e070:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e07e:	b29b      	uxth	r3, r3
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	b29b      	uxth	r3, r3
 800e084:	4619      	mov	r1, r3
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 f918 	bl	800e2bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e08c:	e0f9      	b.n	800e282 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e094:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800e098:	429a      	cmp	r2, r3
 800e09a:	f040 80f2 	bne.w	800e282 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0a6:	2b81      	cmp	r3, #129	@ 0x81
 800e0a8:	f040 80eb 	bne.w	800e282 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2202      	movs	r2, #2
 800e0b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f8fe 	bl	800e2bc <HAL_UARTEx_RxEventCallback>
      return;
 800e0c0:	e0df      	b.n	800e282 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f000 80d1 	beq.w	800e286 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800e0e4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f000 80cc 	beq.w	800e286 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f6:	e853 3f00 	ldrex	r3, [r3]
 800e0fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e102:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e110:	647b      	str	r3, [r7, #68]	@ 0x44
 800e112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e118:	e841 2300 	strex	r3, r2, [r1]
 800e11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e120:	2b00      	cmp	r3, #0
 800e122:	d1e4      	bne.n	800e0ee <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3308      	adds	r3, #8
 800e12a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12e:	e853 3f00 	ldrex	r3, [r3]
 800e132:	623b      	str	r3, [r7, #32]
   return(result);
 800e134:	6a3b      	ldr	r3, [r7, #32]
 800e136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e13a:	f023 0301 	bic.w	r3, r3, #1
 800e13e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	3308      	adds	r3, #8
 800e148:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e14c:	633a      	str	r2, [r7, #48]	@ 0x30
 800e14e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e154:	e841 2300 	strex	r3, r2, [r1]
 800e158:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1e1      	bne.n	800e124 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2220      	movs	r2, #32
 800e164:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2200      	movs	r2, #0
 800e172:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	e853 3f00 	ldrex	r3, [r3]
 800e180:	60fb      	str	r3, [r7, #12]
   return(result);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f023 0310 	bic.w	r3, r3, #16
 800e188:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	461a      	mov	r2, r3
 800e192:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e196:	61fb      	str	r3, [r7, #28]
 800e198:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19a:	69b9      	ldr	r1, [r7, #24]
 800e19c:	69fa      	ldr	r2, [r7, #28]
 800e19e:	e841 2300 	strex	r3, r2, [r1]
 800e1a2:	617b      	str	r3, [r7, #20]
   return(result);
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1e4      	bne.n	800e174 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e1b0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f880 	bl	800e2bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e1bc:	e063      	b.n	800e286 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e1be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e1c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00e      	beq.n	800e1e8 <HAL_UART_IRQHandler+0x530>
 800e1ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d008      	beq.n	800e1e8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e1de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f001 fcc3 	bl	800fb6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e1e6:	e051      	b.n	800e28c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e1e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e1ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d014      	beq.n	800e21e <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e1f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e1f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d105      	bne.n	800e20c <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d008      	beq.n	800e21e <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e210:	2b00      	cmp	r3, #0
 800e212:	d03a      	beq.n	800e28a <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	4798      	blx	r3
    }
    return;
 800e21c:	e035      	b.n	800e28a <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e21e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e226:	2b00      	cmp	r3, #0
 800e228:	d009      	beq.n	800e23e <HAL_UART_IRQHandler+0x586>
 800e22a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e232:	2b00      	cmp	r3, #0
 800e234:	d003      	beq.n	800e23e <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 ff34 	bl	800f0a4 <UART_EndTransmit_IT>
    return;
 800e23c:	e026      	b.n	800e28c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e23e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e246:	2b00      	cmp	r3, #0
 800e248:	d009      	beq.n	800e25e <HAL_UART_IRQHandler+0x5a6>
 800e24a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e24e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e252:	2b00      	cmp	r3, #0
 800e254:	d003      	beq.n	800e25e <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f001 fc9c 	bl	800fb94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e25c:	e016      	b.n	800e28c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e25e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e262:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e266:	2b00      	cmp	r3, #0
 800e268:	d010      	beq.n	800e28c <HAL_UART_IRQHandler+0x5d4>
 800e26a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	da0c      	bge.n	800e28c <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f001 fc84 	bl	800fb80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e278:	e008      	b.n	800e28c <HAL_UART_IRQHandler+0x5d4>
      return;
 800e27a:	bf00      	nop
 800e27c:	e006      	b.n	800e28c <HAL_UART_IRQHandler+0x5d4>
    return;
 800e27e:	bf00      	nop
 800e280:	e004      	b.n	800e28c <HAL_UART_IRQHandler+0x5d4>
      return;
 800e282:	bf00      	nop
 800e284:	e002      	b.n	800e28c <HAL_UART_IRQHandler+0x5d4>
      return;
 800e286:	bf00      	nop
 800e288:	e000      	b.n	800e28c <HAL_UART_IRQHandler+0x5d4>
    return;
 800e28a:	bf00      	nop
  }
}
 800e28c:	37b8      	adds	r7, #184	@ 0xb8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop

0800e294 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e29c:	bf00      	nop
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e2d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e2d8:	b094      	sub	sp, #80	@ 0x50
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800e2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	4b78      	ldr	r3, [pc, #480]	@ (800e4cc <UART_SetConfig+0x1f8>)
 800e2ea:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ee:	689a      	ldr	r2, [r3, #8]
 800e2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f2:	691b      	ldr	r3, [r3, #16]
 800e2f4:	431a      	orrs	r2, r3
 800e2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f8:	695b      	ldr	r3, [r3, #20]
 800e2fa:	431a      	orrs	r2, r3
 800e2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fe:	69db      	ldr	r3, [r3, #28]
 800e300:	4313      	orrs	r3, r2
 800e302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4971      	ldr	r1, [pc, #452]	@ (800e4d0 <UART_SetConfig+0x1fc>)
 800e30c:	4019      	ands	r1, r3
 800e30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e314:	430b      	orrs	r3, r1
 800e316:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e324:	68d9      	ldr	r1, [r3, #12]
 800e326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	ea40 0301 	orr.w	r3, r0, r1
 800e32e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e332:	699b      	ldr	r3, [r3, #24]
 800e334:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	4b64      	ldr	r3, [pc, #400]	@ (800e4cc <UART_SetConfig+0x1f8>)
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d009      	beq.n	800e354 <UART_SetConfig+0x80>
 800e340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	4b63      	ldr	r3, [pc, #396]	@ (800e4d4 <UART_SetConfig+0x200>)
 800e346:	429a      	cmp	r2, r3
 800e348:	d004      	beq.n	800e354 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34c:	6a1a      	ldr	r2, [r3, #32]
 800e34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e350:	4313      	orrs	r3, r2
 800e352:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	689b      	ldr	r3, [r3, #8]
 800e35a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800e35e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800e362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e368:	430b      	orrs	r3, r1
 800e36a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e372:	f023 000f 	bic.w	r0, r3, #15
 800e376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e378:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	ea40 0301 	orr.w	r3, r0, r1
 800e382:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	4b53      	ldr	r3, [pc, #332]	@ (800e4d8 <UART_SetConfig+0x204>)
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d102      	bne.n	800e394 <UART_SetConfig+0xc0>
 800e38e:	2301      	movs	r3, #1
 800e390:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e392:	e066      	b.n	800e462 <UART_SetConfig+0x18e>
 800e394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	4b50      	ldr	r3, [pc, #320]	@ (800e4dc <UART_SetConfig+0x208>)
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d102      	bne.n	800e3a4 <UART_SetConfig+0xd0>
 800e39e:	2302      	movs	r3, #2
 800e3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3a2:	e05e      	b.n	800e462 <UART_SetConfig+0x18e>
 800e3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	4b4d      	ldr	r3, [pc, #308]	@ (800e4e0 <UART_SetConfig+0x20c>)
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d102      	bne.n	800e3b4 <UART_SetConfig+0xe0>
 800e3ae:	2304      	movs	r3, #4
 800e3b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3b2:	e056      	b.n	800e462 <UART_SetConfig+0x18e>
 800e3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b6:	681a      	ldr	r2, [r3, #0]
 800e3b8:	4b4a      	ldr	r3, [pc, #296]	@ (800e4e4 <UART_SetConfig+0x210>)
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d102      	bne.n	800e3c4 <UART_SetConfig+0xf0>
 800e3be:	2308      	movs	r3, #8
 800e3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3c2:	e04e      	b.n	800e462 <UART_SetConfig+0x18e>
 800e3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	4b47      	ldr	r3, [pc, #284]	@ (800e4e8 <UART_SetConfig+0x214>)
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d102      	bne.n	800e3d4 <UART_SetConfig+0x100>
 800e3ce:	2310      	movs	r3, #16
 800e3d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3d2:	e046      	b.n	800e462 <UART_SetConfig+0x18e>
 800e3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	4b44      	ldr	r3, [pc, #272]	@ (800e4ec <UART_SetConfig+0x218>)
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d102      	bne.n	800e3e4 <UART_SetConfig+0x110>
 800e3de:	2320      	movs	r3, #32
 800e3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3e2:	e03e      	b.n	800e462 <UART_SetConfig+0x18e>
 800e3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	4b41      	ldr	r3, [pc, #260]	@ (800e4f0 <UART_SetConfig+0x21c>)
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d102      	bne.n	800e3f4 <UART_SetConfig+0x120>
 800e3ee:	2340      	movs	r3, #64	@ 0x40
 800e3f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3f2:	e036      	b.n	800e462 <UART_SetConfig+0x18e>
 800e3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	4b3e      	ldr	r3, [pc, #248]	@ (800e4f4 <UART_SetConfig+0x220>)
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d102      	bne.n	800e404 <UART_SetConfig+0x130>
 800e3fe:	2380      	movs	r3, #128	@ 0x80
 800e400:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e402:	e02e      	b.n	800e462 <UART_SetConfig+0x18e>
 800e404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	4b3b      	ldr	r3, [pc, #236]	@ (800e4f8 <UART_SetConfig+0x224>)
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d103      	bne.n	800e416 <UART_SetConfig+0x142>
 800e40e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e412:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e414:	e025      	b.n	800e462 <UART_SetConfig+0x18e>
 800e416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	4b38      	ldr	r3, [pc, #224]	@ (800e4fc <UART_SetConfig+0x228>)
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d103      	bne.n	800e428 <UART_SetConfig+0x154>
 800e420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e424:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e426:	e01c      	b.n	800e462 <UART_SetConfig+0x18e>
 800e428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	4b34      	ldr	r3, [pc, #208]	@ (800e500 <UART_SetConfig+0x22c>)
 800e42e:	429a      	cmp	r2, r3
 800e430:	d103      	bne.n	800e43a <UART_SetConfig+0x166>
 800e432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e436:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e438:	e013      	b.n	800e462 <UART_SetConfig+0x18e>
 800e43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	4b31      	ldr	r3, [pc, #196]	@ (800e504 <UART_SetConfig+0x230>)
 800e440:	429a      	cmp	r2, r3
 800e442:	d103      	bne.n	800e44c <UART_SetConfig+0x178>
 800e444:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e448:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e44a:	e00a      	b.n	800e462 <UART_SetConfig+0x18e>
 800e44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	4b1e      	ldr	r3, [pc, #120]	@ (800e4cc <UART_SetConfig+0x1f8>)
 800e452:	429a      	cmp	r2, r3
 800e454:	d103      	bne.n	800e45e <UART_SetConfig+0x18a>
 800e456:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e45a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e45c:	e001      	b.n	800e462 <UART_SetConfig+0x18e>
 800e45e:	2300      	movs	r3, #0
 800e460:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	4b19      	ldr	r3, [pc, #100]	@ (800e4cc <UART_SetConfig+0x1f8>)
 800e468:	429a      	cmp	r2, r3
 800e46a:	d005      	beq.n	800e478 <UART_SetConfig+0x1a4>
 800e46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	4b18      	ldr	r3, [pc, #96]	@ (800e4d4 <UART_SetConfig+0x200>)
 800e472:	429a      	cmp	r2, r3
 800e474:	f040 8094 	bne.w	800e5a0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e47a:	2200      	movs	r2, #0
 800e47c:	623b      	str	r3, [r7, #32]
 800e47e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e480:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e484:	f7fb fe92 	bl	800a1ac <HAL_RCCEx_GetPeriphCLKFreq>
 800e488:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800e48a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 80f7 	beq.w	800e680 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e496:	4a1c      	ldr	r2, [pc, #112]	@ (800e508 <UART_SetConfig+0x234>)
 800e498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e49c:	461a      	mov	r2, r3
 800e49e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4a4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a8:	685a      	ldr	r2, [r3, #4]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	4413      	add	r3, r2
 800e4b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d305      	bcc.n	800e4c2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e4bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d924      	bls.n	800e50c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e4c8:	e069      	b.n	800e59e <UART_SetConfig+0x2ca>
 800e4ca:	bf00      	nop
 800e4cc:	44002400 	.word	0x44002400
 800e4d0:	cfff69f3 	.word	0xcfff69f3
 800e4d4:	54002400 	.word	0x54002400
 800e4d8:	40013800 	.word	0x40013800
 800e4dc:	40004400 	.word	0x40004400
 800e4e0:	40004800 	.word	0x40004800
 800e4e4:	40004c00 	.word	0x40004c00
 800e4e8:	40005000 	.word	0x40005000
 800e4ec:	40006400 	.word	0x40006400
 800e4f0:	40007800 	.word	0x40007800
 800e4f4:	40007c00 	.word	0x40007c00
 800e4f8:	40008000 	.word	0x40008000
 800e4fc:	40006800 	.word	0x40006800
 800e500:	40006c00 	.word	0x40006c00
 800e504:	40008400 	.word	0x40008400
 800e508:	080132f8 	.word	0x080132f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e50c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e50e:	2200      	movs	r2, #0
 800e510:	61bb      	str	r3, [r7, #24]
 800e512:	61fa      	str	r2, [r7, #28]
 800e514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e518:	4a64      	ldr	r2, [pc, #400]	@ (800e6ac <UART_SetConfig+0x3d8>)
 800e51a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	2200      	movs	r2, #0
 800e522:	613b      	str	r3, [r7, #16]
 800e524:	617a      	str	r2, [r7, #20]
 800e526:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e52a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e52e:	f7f2 fb9b 	bl	8000c68 <__aeabi_uldivmod>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	4610      	mov	r0, r2
 800e538:	4619      	mov	r1, r3
 800e53a:	f04f 0200 	mov.w	r2, #0
 800e53e:	f04f 0300 	mov.w	r3, #0
 800e542:	020b      	lsls	r3, r1, #8
 800e544:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e548:	0202      	lsls	r2, r0, #8
 800e54a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e54c:	6849      	ldr	r1, [r1, #4]
 800e54e:	0849      	lsrs	r1, r1, #1
 800e550:	2000      	movs	r0, #0
 800e552:	460c      	mov	r4, r1
 800e554:	4605      	mov	r5, r0
 800e556:	eb12 0804 	adds.w	r8, r2, r4
 800e55a:	eb43 0905 	adc.w	r9, r3, r5
 800e55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	60bb      	str	r3, [r7, #8]
 800e566:	60fa      	str	r2, [r7, #12]
 800e568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e56c:	4640      	mov	r0, r8
 800e56e:	4649      	mov	r1, r9
 800e570:	f7f2 fb7a 	bl	8000c68 <__aeabi_uldivmod>
 800e574:	4602      	mov	r2, r0
 800e576:	460b      	mov	r3, r1
 800e578:	4613      	mov	r3, r2
 800e57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e57e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e582:	d308      	bcc.n	800e596 <UART_SetConfig+0x2c2>
 800e584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e58a:	d204      	bcs.n	800e596 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800e58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e592:	60da      	str	r2, [r3, #12]
 800e594:	e003      	b.n	800e59e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800e59c:	e070      	b.n	800e680 <UART_SetConfig+0x3ac>
 800e59e:	e06f      	b.n	800e680 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e5a8:	d13c      	bne.n	800e624 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e5aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	603b      	str	r3, [r7, #0]
 800e5b0:	607a      	str	r2, [r7, #4]
 800e5b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e5b6:	f7fb fdf9 	bl	800a1ac <HAL_RCCEx_GetPeriphCLKFreq>
 800e5ba:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e5bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d05e      	beq.n	800e680 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c6:	4a39      	ldr	r2, [pc, #228]	@ (800e6ac <UART_SetConfig+0x3d8>)
 800e5c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5d4:	005a      	lsls	r2, r3, #1
 800e5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	085b      	lsrs	r3, r3, #1
 800e5dc:	441a      	add	r2, r3
 800e5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ea:	2b0f      	cmp	r3, #15
 800e5ec:	d916      	bls.n	800e61c <UART_SetConfig+0x348>
 800e5ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5f4:	d212      	bcs.n	800e61c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	f023 030f 	bic.w	r3, r3, #15
 800e5fe:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e602:	085b      	lsrs	r3, r3, #1
 800e604:	b29b      	uxth	r3, r3
 800e606:	f003 0307 	and.w	r3, r3, #7
 800e60a:	b29a      	uxth	r2, r3
 800e60c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e60e:	4313      	orrs	r3, r2
 800e610:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800e612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e618:	60da      	str	r2, [r3, #12]
 800e61a:	e031      	b.n	800e680 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e622:	e02d      	b.n	800e680 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e626:	2200      	movs	r2, #0
 800e628:	469a      	mov	sl, r3
 800e62a:	4693      	mov	fp, r2
 800e62c:	4650      	mov	r0, sl
 800e62e:	4659      	mov	r1, fp
 800e630:	f7fb fdbc 	bl	800a1ac <HAL_RCCEx_GetPeriphCLKFreq>
 800e634:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800e636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d021      	beq.n	800e680 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e640:	4a1a      	ldr	r2, [pc, #104]	@ (800e6ac <UART_SetConfig+0x3d8>)
 800e642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e646:	461a      	mov	r2, r3
 800e648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e64a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	085b      	lsrs	r3, r3, #1
 800e654:	441a      	add	r2, r3
 800e656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e662:	2b0f      	cmp	r3, #15
 800e664:	d909      	bls.n	800e67a <UART_SetConfig+0x3a6>
 800e666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e66c:	d205      	bcs.n	800e67a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e670:	b29a      	uxth	r2, r3
 800e672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	60da      	str	r2, [r3, #12]
 800e678:	e002      	b.n	800e680 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e682:	2201      	movs	r2, #1
 800e684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e68a:	2201      	movs	r2, #1
 800e68c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e692:	2200      	movs	r2, #0
 800e694:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e698:	2200      	movs	r2, #0
 800e69a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e69c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3750      	adds	r7, #80	@ 0x50
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6aa:	bf00      	nop
 800e6ac:	080132f8 	.word	0x080132f8

0800e6b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6bc:	f003 0308 	and.w	r3, r3, #8
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00a      	beq.n	800e6da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	430a      	orrs	r2, r1
 800e6d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00a      	beq.n	800e6fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	430a      	orrs	r2, r1
 800e6fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e700:	f003 0302 	and.w	r3, r3, #2
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00a      	beq.n	800e71e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	430a      	orrs	r2, r1
 800e71c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e722:	f003 0304 	and.w	r3, r3, #4
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00a      	beq.n	800e740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	430a      	orrs	r2, r1
 800e73e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e744:	f003 0310 	and.w	r3, r3, #16
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00a      	beq.n	800e762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	689b      	ldr	r3, [r3, #8]
 800e752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	430a      	orrs	r2, r1
 800e760:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e766:	f003 0320 	and.w	r3, r3, #32
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00a      	beq.n	800e784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	430a      	orrs	r2, r1
 800e782:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d01a      	beq.n	800e7c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	430a      	orrs	r2, r1
 800e7a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e7ae:	d10a      	bne.n	800e7c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	430a      	orrs	r2, r1
 800e7c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00a      	beq.n	800e7e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	430a      	orrs	r2, r1
 800e7e6:	605a      	str	r2, [r3, #4]
  }
}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b098      	sub	sp, #96	@ 0x60
 800e7f8:	af02      	add	r7, sp, #8
 800e7fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e804:	f7f6 fe58 	bl	80054b8 <HAL_GetTick>
 800e808:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f003 0308 	and.w	r3, r3, #8
 800e814:	2b08      	cmp	r3, #8
 800e816:	d12f      	bne.n	800e878 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e820:	2200      	movs	r2, #0
 800e822:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 f88e 	bl	800e948 <UART_WaitOnFlagUntilTimeout>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d022      	beq.n	800e878 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e83a:	e853 3f00 	ldrex	r3, [r3]
 800e83e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e846:	653b      	str	r3, [r7, #80]	@ 0x50
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	461a      	mov	r2, r3
 800e84e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e850:	647b      	str	r3, [r7, #68]	@ 0x44
 800e852:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e858:	e841 2300 	strex	r3, r2, [r1]
 800e85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e85e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1e6      	bne.n	800e832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2220      	movs	r2, #32
 800e868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e874:	2303      	movs	r3, #3
 800e876:	e063      	b.n	800e940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f003 0304 	and.w	r3, r3, #4
 800e882:	2b04      	cmp	r3, #4
 800e884:	d149      	bne.n	800e91a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e886:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e88e:	2200      	movs	r2, #0
 800e890:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f857 	bl	800e948 <UART_WaitOnFlagUntilTimeout>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d03c      	beq.n	800e91a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a8:	e853 3f00 	ldrex	r3, [r3]
 800e8ac:	623b      	str	r3, [r7, #32]
   return(result);
 800e8ae:	6a3b      	ldr	r3, [r7, #32]
 800e8b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e8b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8be:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8c6:	e841 2300 	strex	r3, r2, [r1]
 800e8ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d1e6      	bne.n	800e8a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	3308      	adds	r3, #8
 800e8d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	e853 3f00 	ldrex	r3, [r3]
 800e8e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f023 0301 	bic.w	r3, r3, #1
 800e8e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	3308      	adds	r3, #8
 800e8f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8f2:	61fa      	str	r2, [r7, #28]
 800e8f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f6:	69b9      	ldr	r1, [r7, #24]
 800e8f8:	69fa      	ldr	r2, [r7, #28]
 800e8fa:	e841 2300 	strex	r3, r2, [r1]
 800e8fe:	617b      	str	r3, [r7, #20]
   return(result);
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1e5      	bne.n	800e8d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2220      	movs	r2, #32
 800e90a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e916:	2303      	movs	r3, #3
 800e918:	e012      	b.n	800e940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2220      	movs	r2, #32
 800e91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2220      	movs	r2, #32
 800e926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2200      	movs	r2, #0
 800e93a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e93e:	2300      	movs	r3, #0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3758      	adds	r7, #88	@ 0x58
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	603b      	str	r3, [r7, #0]
 800e954:	4613      	mov	r3, r2
 800e956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e958:	e04f      	b.n	800e9fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e960:	d04b      	beq.n	800e9fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e962:	f7f6 fda9 	bl	80054b8 <HAL_GetTick>
 800e966:	4602      	mov	r2, r0
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	1ad3      	subs	r3, r2, r3
 800e96c:	69ba      	ldr	r2, [r7, #24]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d302      	bcc.n	800e978 <UART_WaitOnFlagUntilTimeout+0x30>
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d101      	bne.n	800e97c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e978:	2303      	movs	r3, #3
 800e97a:	e04e      	b.n	800ea1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f003 0304 	and.w	r3, r3, #4
 800e986:	2b00      	cmp	r3, #0
 800e988:	d037      	beq.n	800e9fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	2b80      	cmp	r3, #128	@ 0x80
 800e98e:	d034      	beq.n	800e9fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2b40      	cmp	r3, #64	@ 0x40
 800e994:	d031      	beq.n	800e9fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	69db      	ldr	r3, [r3, #28]
 800e99c:	f003 0308 	and.w	r3, r3, #8
 800e9a0:	2b08      	cmp	r3, #8
 800e9a2:	d110      	bne.n	800e9c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2208      	movs	r2, #8
 800e9aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f000 f95b 	bl	800ec68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2208      	movs	r2, #8
 800e9b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e029      	b.n	800ea1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	69db      	ldr	r3, [r3, #28]
 800e9cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e9d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e9d4:	d111      	bne.n	800e9fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e9de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f000 f941 	bl	800ec68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2220      	movs	r2, #32
 800e9ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e9f6:	2303      	movs	r3, #3
 800e9f8:	e00f      	b.n	800ea1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	69da      	ldr	r2, [r3, #28]
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	4013      	ands	r3, r2
 800ea04:	68ba      	ldr	r2, [r7, #8]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	bf0c      	ite	eq
 800ea0a:	2301      	moveq	r3, #1
 800ea0c:	2300      	movne	r3, #0
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	461a      	mov	r2, r3
 800ea12:	79fb      	ldrb	r3, [r7, #7]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d0a0      	beq.n	800e95a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
	...

0800ea24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b0a3      	sub	sp, #140	@ 0x8c
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	68ba      	ldr	r2, [r7, #8]
 800ea36:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	88fa      	ldrh	r2, [r7, #6]
 800ea3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	88fa      	ldrh	r2, [r7, #6]
 800ea44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	689b      	ldr	r3, [r3, #8]
 800ea52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea56:	d10e      	bne.n	800ea76 <UART_Start_Receive_IT+0x52>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d105      	bne.n	800ea6c <UART_Start_Receive_IT+0x48>
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ea66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea6a:	e02d      	b.n	800eac8 <UART_Start_Receive_IT+0xa4>
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	22ff      	movs	r2, #255	@ 0xff
 800ea70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea74:	e028      	b.n	800eac8 <UART_Start_Receive_IT+0xa4>
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d10d      	bne.n	800ea9a <UART_Start_Receive_IT+0x76>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d104      	bne.n	800ea90 <UART_Start_Receive_IT+0x6c>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	22ff      	movs	r2, #255	@ 0xff
 800ea8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea8e:	e01b      	b.n	800eac8 <UART_Start_Receive_IT+0xa4>
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	227f      	movs	r2, #127	@ 0x7f
 800ea94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea98:	e016      	b.n	800eac8 <UART_Start_Receive_IT+0xa4>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eaa2:	d10d      	bne.n	800eac0 <UART_Start_Receive_IT+0x9c>
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d104      	bne.n	800eab6 <UART_Start_Receive_IT+0x92>
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	227f      	movs	r2, #127	@ 0x7f
 800eab0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800eab4:	e008      	b.n	800eac8 <UART_Start_Receive_IT+0xa4>
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	223f      	movs	r2, #63	@ 0x3f
 800eaba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800eabe:	e003      	b.n	800eac8 <UART_Start_Receive_IT+0xa4>
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2200      	movs	r2, #0
 800eacc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2222      	movs	r2, #34	@ 0x22
 800ead4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	3308      	adds	r3, #8
 800eade:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eae2:	e853 3f00 	ldrex	r3, [r3]
 800eae6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800eae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eaea:	f043 0301 	orr.w	r3, r3, #1
 800eaee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	3308      	adds	r3, #8
 800eaf8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eafc:	673a      	str	r2, [r7, #112]	@ 0x70
 800eafe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb00:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eb02:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800eb04:	e841 2300 	strex	r3, r2, [r1]
 800eb08:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800eb0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d1e3      	bne.n	800ead8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb18:	d14f      	bne.n	800ebba <UART_Start_Receive_IT+0x196>
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eb20:	88fa      	ldrh	r2, [r7, #6]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d349      	bcc.n	800ebba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb2e:	d107      	bne.n	800eb40 <UART_Start_Receive_IT+0x11c>
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d103      	bne.n	800eb40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4a47      	ldr	r2, [pc, #284]	@ (800ec58 <UART_Start_Receive_IT+0x234>)
 800eb3c:	675a      	str	r2, [r3, #116]	@ 0x74
 800eb3e:	e002      	b.n	800eb46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	4a46      	ldr	r2, [pc, #280]	@ (800ec5c <UART_Start_Receive_IT+0x238>)
 800eb44:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d01a      	beq.n	800eb84 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb56:	e853 3f00 	ldrex	r3, [r3]
 800eb5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eb5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eb62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eb70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eb72:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eb76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eb78:	e841 2300 	strex	r3, r2, [r1]
 800eb7c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800eb7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d1e4      	bne.n	800eb4e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	3308      	adds	r3, #8
 800eb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb8e:	e853 3f00 	ldrex	r3, [r3]
 800eb92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3308      	adds	r3, #8
 800eba2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800eba4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800eba6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ebaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ebac:	e841 2300 	strex	r3, r2, [r1]
 800ebb0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ebb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d1e5      	bne.n	800eb84 <UART_Start_Receive_IT+0x160>
 800ebb8:	e046      	b.n	800ec48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebc2:	d107      	bne.n	800ebd4 <UART_Start_Receive_IT+0x1b0>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	691b      	ldr	r3, [r3, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d103      	bne.n	800ebd4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	4a24      	ldr	r2, [pc, #144]	@ (800ec60 <UART_Start_Receive_IT+0x23c>)
 800ebd0:	675a      	str	r2, [r3, #116]	@ 0x74
 800ebd2:	e002      	b.n	800ebda <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	4a23      	ldr	r2, [pc, #140]	@ (800ec64 <UART_Start_Receive_IT+0x240>)
 800ebd8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d019      	beq.n	800ec16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebea:	e853 3f00 	ldrex	r3, [r3]
 800ebee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ebf6:	677b      	str	r3, [r7, #116]	@ 0x74
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec02:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ec06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec08:	e841 2300 	strex	r3, r2, [r1]
 800ec0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ec0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d1e6      	bne.n	800ebe2 <UART_Start_Receive_IT+0x1be>
 800ec14:	e018      	b.n	800ec48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	e853 3f00 	ldrex	r3, [r3]
 800ec22:	613b      	str	r3, [r7, #16]
   return(result);
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	f043 0320 	orr.w	r3, r3, #32
 800ec2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	461a      	mov	r2, r3
 800ec32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec34:	623b      	str	r3, [r7, #32]
 800ec36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec38:	69f9      	ldr	r1, [r7, #28]
 800ec3a:	6a3a      	ldr	r2, [r7, #32]
 800ec3c:	e841 2300 	strex	r3, r2, [r1]
 800ec40:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1e6      	bne.n	800ec16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	378c      	adds	r7, #140	@ 0x8c
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop
 800ec58:	0800f7f5 	.word	0x0800f7f5
 800ec5c:	0800f485 	.word	0x0800f485
 800ec60:	0800f2c1 	.word	0x0800f2c1
 800ec64:	0800f0fd 	.word	0x0800f0fd

0800ec68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b095      	sub	sp, #84	@ 0x54
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec78:	e853 3f00 	ldrex	r3, [r3]
 800ec7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ec94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec96:	e841 2300 	strex	r3, r2, [r1]
 800ec9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ec9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1e6      	bne.n	800ec70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	3308      	adds	r3, #8
 800eca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecaa:	6a3b      	ldr	r3, [r7, #32]
 800ecac:	e853 3f00 	ldrex	r3, [r3]
 800ecb0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ecb8:	f023 0301 	bic.w	r3, r3, #1
 800ecbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	3308      	adds	r3, #8
 800ecc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ecc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ecc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecce:	e841 2300 	strex	r3, r2, [r1]
 800ecd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d1e3      	bne.n	800eca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d118      	bne.n	800ed14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	e853 3f00 	ldrex	r3, [r3]
 800ecee:	60bb      	str	r3, [r7, #8]
   return(result);
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	f023 0310 	bic.w	r3, r3, #16
 800ecf6:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed00:	61bb      	str	r3, [r7, #24]
 800ed02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed04:	6979      	ldr	r1, [r7, #20]
 800ed06:	69ba      	ldr	r2, [r7, #24]
 800ed08:	e841 2300 	strex	r3, r2, [r1]
 800ed0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1e6      	bne.n	800ece2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2220      	movs	r2, #32
 800ed18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ed28:	bf00      	nop
 800ed2a:	3754      	adds	r7, #84	@ 0x54
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2200      	movs	r2, #0
 800ed46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f7ff faa8 	bl	800e2a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed58:	bf00      	nop
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b08f      	sub	sp, #60	@ 0x3c
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed6e:	2b21      	cmp	r3, #33	@ 0x21
 800ed70:	d14c      	bne.n	800ee0c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d132      	bne.n	800ede4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed84:	6a3b      	ldr	r3, [r7, #32]
 800ed86:	e853 3f00 	ldrex	r3, [r3]
 800ed8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed9e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eda2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eda4:	e841 2300 	strex	r3, r2, [r1]
 800eda8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800edaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1e6      	bne.n	800ed7e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	e853 3f00 	ldrex	r3, [r3]
 800edbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edc4:	633b      	str	r3, [r7, #48]	@ 0x30
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edce:	61bb      	str	r3, [r7, #24]
 800edd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd2:	6979      	ldr	r1, [r7, #20]
 800edd4:	69ba      	ldr	r2, [r7, #24]
 800edd6:	e841 2300 	strex	r3, r2, [r1]
 800edda:	613b      	str	r3, [r7, #16]
   return(result);
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1e6      	bne.n	800edb0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ede2:	e013      	b.n	800ee0c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ede8:	781a      	ldrb	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edf4:	1c5a      	adds	r2, r3, #1
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	3b01      	subs	r3, #1
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800ee0c:	bf00      	nop
 800ee0e:	373c      	adds	r7, #60	@ 0x3c
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b091      	sub	sp, #68	@ 0x44
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ee26:	2b21      	cmp	r3, #33	@ 0x21
 800ee28:	d151      	bne.n	800eece <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d132      	bne.n	800ee9c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3e:	e853 3f00 	ldrex	r3, [r3]
 800ee42:	623b      	str	r3, [r7, #32]
   return(result);
 800ee44:	6a3b      	ldr	r3, [r7, #32]
 800ee46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	461a      	mov	r2, r3
 800ee52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee5c:	e841 2300 	strex	r3, r2, [r1]
 800ee60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ee62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1e6      	bne.n	800ee36 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	e853 3f00 	ldrex	r3, [r3]
 800ee74:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	461a      	mov	r2, r3
 800ee84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee86:	61fb      	str	r3, [r7, #28]
 800ee88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8a:	69b9      	ldr	r1, [r7, #24]
 800ee8c:	69fa      	ldr	r2, [r7, #28]
 800ee8e:	e841 2300 	strex	r3, r2, [r1]
 800ee92:	617b      	str	r3, [r7, #20]
   return(result);
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d1e6      	bne.n	800ee68 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ee9a:	e018      	b.n	800eece <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800eea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eea4:	881b      	ldrh	r3, [r3, #0]
 800eea6:	461a      	mov	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eeb0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eeb6:	1c9a      	adds	r2, r3, #2
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	3b01      	subs	r3, #1
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800eece:	bf00      	nop
 800eed0:	3744      	adds	r7, #68	@ 0x44
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr

0800eeda <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eeda:	b480      	push	{r7}
 800eedc:	b091      	sub	sp, #68	@ 0x44
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eee8:	2b21      	cmp	r3, #33	@ 0x21
 800eeea:	d160      	bne.n	800efae <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eef2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800eef4:	e057      	b.n	800efa6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d133      	bne.n	800ef6a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	3308      	adds	r3, #8
 800ef08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef0c:	e853 3f00 	ldrex	r3, [r3]
 800ef10:	623b      	str	r3, [r7, #32]
   return(result);
 800ef12:	6a3b      	ldr	r3, [r7, #32]
 800ef14:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ef18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	3308      	adds	r3, #8
 800ef20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef22:	633a      	str	r2, [r7, #48]	@ 0x30
 800ef24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef2a:	e841 2300 	strex	r3, r2, [r1]
 800ef2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ef30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1e5      	bne.n	800ef02 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	e853 3f00 	ldrex	r3, [r3]
 800ef42:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	461a      	mov	r2, r3
 800ef52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef54:	61fb      	str	r3, [r7, #28]
 800ef56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef58:	69b9      	ldr	r1, [r7, #24]
 800ef5a:	69fa      	ldr	r2, [r7, #28]
 800ef5c:	e841 2300 	strex	r3, r2, [r1]
 800ef60:	617b      	str	r3, [r7, #20]
   return(result);
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1e6      	bne.n	800ef36 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ef68:	e021      	b.n	800efae <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	69db      	ldr	r3, [r3, #28]
 800ef70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d013      	beq.n	800efa0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef7c:	781a      	ldrb	r2, [r3, #0]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef88:	1c5a      	adds	r2, r3, #1
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	3b01      	subs	r3, #1
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800efa0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800efa2:	3b01      	subs	r3, #1
 800efa4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800efa6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d1a4      	bne.n	800eef6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800efac:	e7ff      	b.n	800efae <UART_TxISR_8BIT_FIFOEN+0xd4>
 800efae:	bf00      	nop
 800efb0:	3744      	adds	r7, #68	@ 0x44
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr

0800efba <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800efba:	b480      	push	{r7}
 800efbc:	b091      	sub	sp, #68	@ 0x44
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800efc8:	2b21      	cmp	r3, #33	@ 0x21
 800efca:	d165      	bne.n	800f098 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800efd2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800efd4:	e05c      	b.n	800f090 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800efdc:	b29b      	uxth	r3, r3
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d133      	bne.n	800f04a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	3308      	adds	r3, #8
 800efe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efea:	6a3b      	ldr	r3, [r7, #32]
 800efec:	e853 3f00 	ldrex	r3, [r3]
 800eff0:	61fb      	str	r3, [r7, #28]
   return(result);
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800eff8:	637b      	str	r3, [r7, #52]	@ 0x34
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	3308      	adds	r3, #8
 800f000:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f004:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f00a:	e841 2300 	strex	r3, r2, [r1]
 800f00e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1e5      	bne.n	800efe2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	e853 3f00 	ldrex	r3, [r3]
 800f022:	60bb      	str	r3, [r7, #8]
   return(result);
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f02a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	461a      	mov	r2, r3
 800f032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f034:	61bb      	str	r3, [r7, #24]
 800f036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f038:	6979      	ldr	r1, [r7, #20]
 800f03a:	69ba      	ldr	r2, [r7, #24]
 800f03c:	e841 2300 	strex	r3, r2, [r1]
 800f040:	613b      	str	r3, [r7, #16]
   return(result);
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1e6      	bne.n	800f016 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f048:	e026      	b.n	800f098 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	69db      	ldr	r3, [r3, #28]
 800f050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f054:	2b00      	cmp	r3, #0
 800f056:	d018      	beq.n	800f08a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f05c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	461a      	mov	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f06c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f072:	1c9a      	adds	r2, r3, #2
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f07e:	b29b      	uxth	r3, r3
 800f080:	3b01      	subs	r3, #1
 800f082:	b29a      	uxth	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f08a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f08c:	3b01      	subs	r3, #1
 800f08e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800f090:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f092:	2b00      	cmp	r3, #0
 800f094:	d19f      	bne.n	800efd6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f096:	e7ff      	b.n	800f098 <UART_TxISR_16BIT_FIFOEN+0xde>
 800f098:	bf00      	nop
 800f09a:	3744      	adds	r7, #68	@ 0x44
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b088      	sub	sp, #32
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	e853 3f00 	ldrex	r3, [r3]
 800f0b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0c0:	61fb      	str	r3, [r7, #28]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	61bb      	str	r3, [r7, #24]
 800f0cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ce:	6979      	ldr	r1, [r7, #20]
 800f0d0:	69ba      	ldr	r2, [r7, #24]
 800f0d2:	e841 2300 	strex	r3, r2, [r1]
 800f0d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d1e6      	bne.n	800f0ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2220      	movs	r2, #32
 800f0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff f8d1 	bl	800e294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0f2:	bf00      	nop
 800f0f4:	3720      	adds	r7, #32
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b09c      	sub	sp, #112	@ 0x70
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f10a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f114:	2b22      	cmp	r3, #34	@ 0x22
 800f116:	f040 80c3 	bne.w	800f2a0 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f120:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f124:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f128:	b2d9      	uxtb	r1, r3
 800f12a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f12e:	b2da      	uxtb	r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f134:	400a      	ands	r2, r1
 800f136:	b2d2      	uxtb	r2, r2
 800f138:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	3b01      	subs	r3, #1
 800f14e:	b29a      	uxth	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f040 80a6 	bne.w	800f2b0 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f16a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f16c:	e853 3f00 	ldrex	r3, [r3]
 800f170:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	461a      	mov	r2, r3
 800f180:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f182:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f184:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f186:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f18a:	e841 2300 	strex	r3, r2, [r1]
 800f18e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1e6      	bne.n	800f164 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	3308      	adds	r3, #8
 800f19c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a0:	e853 3f00 	ldrex	r3, [r3]
 800f1a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1a8:	f023 0301 	bic.w	r3, r3, #1
 800f1ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	3308      	adds	r3, #8
 800f1b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f1b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f1bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f1be:	e841 2300 	strex	r3, r2, [r1]
 800f1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1e5      	bne.n	800f196 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2220      	movs	r2, #32
 800f1ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	4a35      	ldr	r2, [pc, #212]	@ (800f2b8 <UART_RxISR_8BIT+0x1bc>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d024      	beq.n	800f232 <UART_RxISR_8BIT+0x136>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a33      	ldr	r2, [pc, #204]	@ (800f2bc <UART_RxISR_8BIT+0x1c0>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d01f      	beq.n	800f232 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d018      	beq.n	800f232 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f208:	e853 3f00 	ldrex	r3, [r3]
 800f20c:	623b      	str	r3, [r7, #32]
   return(result);
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f214:	663b      	str	r3, [r7, #96]	@ 0x60
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	461a      	mov	r2, r3
 800f21c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f21e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f220:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f226:	e841 2300 	strex	r3, r2, [r1]
 800f22a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d1e6      	bne.n	800f200 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f236:	2b01      	cmp	r3, #1
 800f238:	d12e      	bne.n	800f298 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	e853 3f00 	ldrex	r3, [r3]
 800f24c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f023 0310 	bic.w	r3, r3, #16
 800f254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	461a      	mov	r2, r3
 800f25c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f25e:	61fb      	str	r3, [r7, #28]
 800f260:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f262:	69b9      	ldr	r1, [r7, #24]
 800f264:	69fa      	ldr	r2, [r7, #28]
 800f266:	e841 2300 	strex	r3, r2, [r1]
 800f26a:	617b      	str	r3, [r7, #20]
   return(result);
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d1e6      	bne.n	800f240 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	69db      	ldr	r3, [r3, #28]
 800f278:	f003 0310 	and.w	r3, r3, #16
 800f27c:	2b10      	cmp	r3, #16
 800f27e:	d103      	bne.n	800f288 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2210      	movs	r2, #16
 800f286:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f28e:	4619      	mov	r1, r3
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7ff f813 	bl	800e2bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f296:	e00b      	b.n	800f2b0 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7f5 f81b 	bl	80042d4 <HAL_UART_RxCpltCallback>
}
 800f29e:	e007      	b.n	800f2b0 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	699a      	ldr	r2, [r3, #24]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f042 0208 	orr.w	r2, r2, #8
 800f2ae:	619a      	str	r2, [r3, #24]
}
 800f2b0:	bf00      	nop
 800f2b2:	3770      	adds	r7, #112	@ 0x70
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	44002400 	.word	0x44002400
 800f2bc:	54002400 	.word	0x54002400

0800f2c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b09c      	sub	sp, #112	@ 0x70
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f2ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f2d8:	2b22      	cmp	r3, #34	@ 0x22
 800f2da:	f040 80c3 	bne.w	800f464 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f2ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800f2f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f2f6:	4013      	ands	r3, r2
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f2fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f302:	1c9a      	adds	r2, r3, #2
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f30e:	b29b      	uxth	r3, r3
 800f310:	3b01      	subs	r3, #1
 800f312:	b29a      	uxth	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f320:	b29b      	uxth	r3, r3
 800f322:	2b00      	cmp	r3, #0
 800f324:	f040 80a6 	bne.w	800f474 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f32e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f330:	e853 3f00 	ldrex	r3, [r3]
 800f334:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f33c:	667b      	str	r3, [r7, #100]	@ 0x64
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	461a      	mov	r2, r3
 800f344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f346:	657b      	str	r3, [r7, #84]	@ 0x54
 800f348:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f34a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f34c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f34e:	e841 2300 	strex	r3, r2, [r1]
 800f352:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1e6      	bne.n	800f328 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	3308      	adds	r3, #8
 800f360:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f364:	e853 3f00 	ldrex	r3, [r3]
 800f368:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f36c:	f023 0301 	bic.w	r3, r3, #1
 800f370:	663b      	str	r3, [r7, #96]	@ 0x60
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3308      	adds	r3, #8
 800f378:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f37a:	643a      	str	r2, [r7, #64]	@ 0x40
 800f37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f37e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f380:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f382:	e841 2300 	strex	r3, r2, [r1]
 800f386:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d1e5      	bne.n	800f35a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2220      	movs	r2, #32
 800f392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a35      	ldr	r2, [pc, #212]	@ (800f47c <UART_RxISR_16BIT+0x1bc>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d024      	beq.n	800f3f6 <UART_RxISR_16BIT+0x136>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a33      	ldr	r2, [pc, #204]	@ (800f480 <UART_RxISR_16BIT+0x1c0>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d01f      	beq.n	800f3f6 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d018      	beq.n	800f3f6 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	e853 3f00 	ldrex	r3, [r3]
 800f3d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f3d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f3e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f3e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f3e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3ea:	e841 2300 	strex	r3, r2, [r1]
 800f3ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1e6      	bne.n	800f3c4 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d12e      	bne.n	800f45c <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	e853 3f00 	ldrex	r3, [r3]
 800f410:	60bb      	str	r3, [r7, #8]
   return(result);
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	f023 0310 	bic.w	r3, r3, #16
 800f418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	461a      	mov	r2, r3
 800f420:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f422:	61bb      	str	r3, [r7, #24]
 800f424:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f426:	6979      	ldr	r1, [r7, #20]
 800f428:	69ba      	ldr	r2, [r7, #24]
 800f42a:	e841 2300 	strex	r3, r2, [r1]
 800f42e:	613b      	str	r3, [r7, #16]
   return(result);
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d1e6      	bne.n	800f404 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	69db      	ldr	r3, [r3, #28]
 800f43c:	f003 0310 	and.w	r3, r3, #16
 800f440:	2b10      	cmp	r3, #16
 800f442:	d103      	bne.n	800f44c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2210      	movs	r2, #16
 800f44a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f452:	4619      	mov	r1, r3
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7fe ff31 	bl	800e2bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f45a:	e00b      	b.n	800f474 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7f4 ff39 	bl	80042d4 <HAL_UART_RxCpltCallback>
}
 800f462:	e007      	b.n	800f474 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	699a      	ldr	r2, [r3, #24]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f042 0208 	orr.w	r2, r2, #8
 800f472:	619a      	str	r2, [r3, #24]
}
 800f474:	bf00      	nop
 800f476:	3770      	adds	r7, #112	@ 0x70
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	44002400 	.word	0x44002400
 800f480:	54002400 	.word	0x54002400

0800f484 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b0ac      	sub	sp, #176	@ 0xb0
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f492:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	69db      	ldr	r3, [r3, #28]
 800f49c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f4ba:	2b22      	cmp	r3, #34	@ 0x22
 800f4bc:	f040 8188 	bne.w	800f7d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f4c6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4ca:	e12b      	b.n	800f724 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4d2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f4d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f4da:	b2d9      	uxtb	r1, r3
 800f4dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f4e0:	b2da      	uxtb	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4e6:	400a      	ands	r2, r1
 800f4e8:	b2d2      	uxtb	r2, r2
 800f4ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4f0:	1c5a      	adds	r2, r3, #1
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	3b01      	subs	r3, #1
 800f500:	b29a      	uxth	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	69db      	ldr	r3, [r3, #28]
 800f50e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f516:	f003 0307 	and.w	r3, r3, #7
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d053      	beq.n	800f5c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f51e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f522:	f003 0301 	and.w	r3, r3, #1
 800f526:	2b00      	cmp	r3, #0
 800f528:	d011      	beq.n	800f54e <UART_RxISR_8BIT_FIFOEN+0xca>
 800f52a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f52e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00b      	beq.n	800f54e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2201      	movs	r2, #1
 800f53c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f544:	f043 0201 	orr.w	r2, r3, #1
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f54e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f552:	f003 0302 	and.w	r3, r3, #2
 800f556:	2b00      	cmp	r3, #0
 800f558:	d011      	beq.n	800f57e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f55a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00b      	beq.n	800f57e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2202      	movs	r2, #2
 800f56c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f574:	f043 0204 	orr.w	r2, r3, #4
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f57e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f582:	f003 0304 	and.w	r3, r3, #4
 800f586:	2b00      	cmp	r3, #0
 800f588:	d011      	beq.n	800f5ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f58a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00b      	beq.n	800f5ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2204      	movs	r2, #4
 800f59c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f5a4:	f043 0202 	orr.w	r2, r3, #2
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d006      	beq.n	800f5c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f7fe fe75 	bl	800e2a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f040 80a8 	bne.w	800f724 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f5dc:	e853 3f00 	ldrex	r3, [r3]
 800f5e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f5e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f5e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f5f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f5f8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5fa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f5fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f5fe:	e841 2300 	strex	r3, r2, [r1]
 800f602:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f606:	2b00      	cmp	r3, #0
 800f608:	d1e4      	bne.n	800f5d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	3308      	adds	r3, #8
 800f610:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f614:	e853 3f00 	ldrex	r3, [r3]
 800f618:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f61a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f61c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f620:	f023 0301 	bic.w	r3, r3, #1
 800f624:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3308      	adds	r3, #8
 800f62e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f632:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f634:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f636:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f638:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f63a:	e841 2300 	strex	r3, r2, [r1]
 800f63e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f640:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1e1      	bne.n	800f60a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2220      	movs	r2, #32
 800f64a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4a62      	ldr	r2, [pc, #392]	@ (800f7e8 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d026      	beq.n	800f6b2 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a60      	ldr	r2, [pc, #384]	@ (800f7ec <UART_RxISR_8BIT_FIFOEN+0x368>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d021      	beq.n	800f6b2 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d01a      	beq.n	800f6b2 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f684:	e853 3f00 	ldrex	r3, [r3]
 800f688:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f68a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f68c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f690:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	461a      	mov	r2, r3
 800f69a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f69e:	657b      	str	r3, [r7, #84]	@ 0x54
 800f6a0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f6a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f6a6:	e841 2300 	strex	r3, r2, [r1]
 800f6aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f6ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d1e4      	bne.n	800f67c <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d130      	bne.n	800f71c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6c8:	e853 3f00 	ldrex	r3, [r3]
 800f6cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d0:	f023 0310 	bic.w	r3, r3, #16
 800f6d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	461a      	mov	r2, r3
 800f6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f6e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f6e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f6ea:	e841 2300 	strex	r3, r2, [r1]
 800f6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1e4      	bne.n	800f6c0 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	69db      	ldr	r3, [r3, #28]
 800f6fc:	f003 0310 	and.w	r3, r3, #16
 800f700:	2b10      	cmp	r3, #16
 800f702:	d103      	bne.n	800f70c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2210      	movs	r2, #16
 800f70a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f712:	4619      	mov	r1, r3
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7fe fdd1 	bl	800e2bc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f71a:	e00e      	b.n	800f73a <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7f4 fdd9 	bl	80042d4 <HAL_UART_RxCpltCallback>
        break;
 800f722:	e00a      	b.n	800f73a <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f724:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d006      	beq.n	800f73a <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800f72c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f730:	f003 0320 	and.w	r3, r3, #32
 800f734:	2b00      	cmp	r3, #0
 800f736:	f47f aec9 	bne.w	800f4cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f740:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f744:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d049      	beq.n	800f7e0 <UART_RxISR_8BIT_FIFOEN+0x35c>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f752:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f756:	429a      	cmp	r2, r3
 800f758:	d242      	bcs.n	800f7e0 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	3308      	adds	r3, #8
 800f760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f762:	6a3b      	ldr	r3, [r7, #32]
 800f764:	e853 3f00 	ldrex	r3, [r3]
 800f768:	61fb      	str	r3, [r7, #28]
   return(result);
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3308      	adds	r3, #8
 800f77a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f77e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f780:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f786:	e841 2300 	strex	r3, r2, [r1]
 800f78a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1e3      	bne.n	800f75a <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a16      	ldr	r2, [pc, #88]	@ (800f7f0 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800f796:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	e853 3f00 	ldrex	r3, [r3]
 800f7a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	f043 0320 	orr.w	r3, r3, #32
 800f7ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f7ba:	61bb      	str	r3, [r7, #24]
 800f7bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7be:	6979      	ldr	r1, [r7, #20]
 800f7c0:	69ba      	ldr	r2, [r7, #24]
 800f7c2:	e841 2300 	strex	r3, r2, [r1]
 800f7c6:	613b      	str	r3, [r7, #16]
   return(result);
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1e4      	bne.n	800f798 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f7ce:	e007      	b.n	800f7e0 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	699a      	ldr	r2, [r3, #24]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f042 0208 	orr.w	r2, r2, #8
 800f7de:	619a      	str	r2, [r3, #24]
}
 800f7e0:	bf00      	nop
 800f7e2:	37b0      	adds	r7, #176	@ 0xb0
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	44002400 	.word	0x44002400
 800f7ec:	54002400 	.word	0x54002400
 800f7f0:	0800f0fd 	.word	0x0800f0fd

0800f7f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b0ae      	sub	sp, #184	@ 0xb8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f802:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	69db      	ldr	r3, [r3, #28]
 800f80c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f82a:	2b22      	cmp	r3, #34	@ 0x22
 800f82c:	f040 818c 	bne.w	800fb48 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f836:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f83a:	e12f      	b.n	800fa9c <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f842:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f84a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f84e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f852:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f856:	4013      	ands	r3, r2
 800f858:	b29a      	uxth	r2, r3
 800f85a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f85e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f864:	1c9a      	adds	r2, r3, #2
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f870:	b29b      	uxth	r3, r3
 800f872:	3b01      	subs	r3, #1
 800f874:	b29a      	uxth	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	69db      	ldr	r3, [r3, #28]
 800f882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f88a:	f003 0307 	and.w	r3, r3, #7
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d053      	beq.n	800f93a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f896:	f003 0301 	and.w	r3, r3, #1
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d011      	beq.n	800f8c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f89e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f8a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00b      	beq.n	800f8c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8b8:	f043 0201 	orr.w	r2, r3, #1
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f8c6:	f003 0302 	and.w	r3, r3, #2
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d011      	beq.n	800f8f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f8ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f8d2:	f003 0301 	and.w	r3, r3, #1
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d00b      	beq.n	800f8f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2202      	movs	r2, #2
 800f8e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8e8:	f043 0204 	orr.w	r2, r3, #4
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f8f6:	f003 0304 	and.w	r3, r3, #4
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d011      	beq.n	800f922 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f8fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f902:	f003 0301 	and.w	r3, r3, #1
 800f906:	2b00      	cmp	r3, #0
 800f908:	d00b      	beq.n	800f922 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2204      	movs	r2, #4
 800f910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f918:	f043 0202 	orr.w	r2, r3, #2
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d006      	beq.n	800f93a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f7fe fcbb 	bl	800e2a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2200      	movs	r2, #0
 800f936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f940:	b29b      	uxth	r3, r3
 800f942:	2b00      	cmp	r3, #0
 800f944:	f040 80aa 	bne.w	800fa9c <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f950:	e853 3f00 	ldrex	r3, [r3]
 800f954:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f95c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	461a      	mov	r2, r3
 800f966:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f96a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f96e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f970:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f972:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f976:	e841 2300 	strex	r3, r2, [r1]
 800f97a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f97c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1e2      	bne.n	800f948 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	3308      	adds	r3, #8
 800f988:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f98a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f98c:	e853 3f00 	ldrex	r3, [r3]
 800f990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f998:	f023 0301 	bic.w	r3, r3, #1
 800f99c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3308      	adds	r3, #8
 800f9a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f9aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f9ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f9b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f9b2:	e841 2300 	strex	r3, r2, [r1]
 800f9b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f9b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1e1      	bne.n	800f982 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2220      	movs	r2, #32
 800f9c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	4a62      	ldr	r2, [pc, #392]	@ (800fb60 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d026      	beq.n	800fa2a <UART_RxISR_16BIT_FIFOEN+0x236>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a60      	ldr	r2, [pc, #384]	@ (800fb64 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d021      	beq.n	800fa2a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d01a      	beq.n	800fa2a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9fc:	e853 3f00 	ldrex	r3, [r3]
 800fa00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fa02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa04:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fa08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	461a      	mov	r2, r3
 800fa12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fa16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa1e:	e841 2300 	strex	r3, r2, [r1]
 800fa22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fa24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1e4      	bne.n	800f9f4 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa2e:	2b01      	cmp	r3, #1
 800fa30:	d130      	bne.n	800fa94 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa40:	e853 3f00 	ldrex	r3, [r3]
 800fa44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fa46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa48:	f023 0310 	bic.w	r3, r3, #16
 800fa4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	461a      	mov	r2, r3
 800fa56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fa5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fa5c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fa60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa62:	e841 2300 	strex	r3, r2, [r1]
 800fa66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fa68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1e4      	bne.n	800fa38 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	f003 0310 	and.w	r3, r3, #16
 800fa78:	2b10      	cmp	r3, #16
 800fa7a:	d103      	bne.n	800fa84 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2210      	movs	r2, #16
 800fa82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7fe fc15 	bl	800e2bc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800fa92:	e00e      	b.n	800fab2 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f7f4 fc1d 	bl	80042d4 <HAL_UART_RxCpltCallback>
        break;
 800fa9a:	e00a      	b.n	800fab2 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fa9c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d006      	beq.n	800fab2 <UART_RxISR_16BIT_FIFOEN+0x2be>
 800faa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800faa8:	f003 0320 	and.w	r3, r3, #32
 800faac:	2b00      	cmp	r3, #0
 800faae:	f47f aec5 	bne.w	800f83c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fab8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fabc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d049      	beq.n	800fb58 <UART_RxISR_16BIT_FIFOEN+0x364>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800faca:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800face:	429a      	cmp	r2, r3
 800fad0:	d242      	bcs.n	800fb58 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3308      	adds	r3, #8
 800fad8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fadc:	e853 3f00 	ldrex	r3, [r3]
 800fae0:	623b      	str	r3, [r7, #32]
   return(result);
 800fae2:	6a3b      	ldr	r3, [r7, #32]
 800fae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3308      	adds	r3, #8
 800faf2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800faf6:	633a      	str	r2, [r7, #48]	@ 0x30
 800faf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fafa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fafc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fafe:	e841 2300 	strex	r3, r2, [r1]
 800fb02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d1e3      	bne.n	800fad2 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4a16      	ldr	r2, [pc, #88]	@ (800fb68 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800fb0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	e853 3f00 	ldrex	r3, [r3]
 800fb1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f043 0320 	orr.w	r3, r3, #32
 800fb24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb32:	61fb      	str	r3, [r7, #28]
 800fb34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb36:	69b9      	ldr	r1, [r7, #24]
 800fb38:	69fa      	ldr	r2, [r7, #28]
 800fb3a:	e841 2300 	strex	r3, r2, [r1]
 800fb3e:	617b      	str	r3, [r7, #20]
   return(result);
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1e4      	bne.n	800fb10 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb46:	e007      	b.n	800fb58 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	699a      	ldr	r2, [r3, #24]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f042 0208 	orr.w	r2, r2, #8
 800fb56:	619a      	str	r2, [r3, #24]
}
 800fb58:	bf00      	nop
 800fb5a:	37b8      	adds	r7, #184	@ 0xb8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	44002400 	.word	0x44002400
 800fb64:	54002400 	.word	0x54002400
 800fb68:	0800f2c1 	.word	0x0800f2c1

0800fb6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb74:	bf00      	nop
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb88:	bf00      	nop
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb9c:	bf00      	nop
 800fb9e:	370c      	adds	r7, #12
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d101      	bne.n	800fbbe <HAL_UARTEx_DisableFifoMode+0x16>
 800fbba:	2302      	movs	r3, #2
 800fbbc:	e027      	b.n	800fc0e <HAL_UARTEx_DisableFifoMode+0x66>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2224      	movs	r2, #36	@ 0x24
 800fbca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f022 0201 	bic.w	r2, r2, #1
 800fbe4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fbec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2220      	movs	r2, #32
 800fc00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc0c:	2300      	movs	r3, #0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3714      	adds	r7, #20
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d101      	bne.n	800fc32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc2e:	2302      	movs	r3, #2
 800fc30:	e02d      	b.n	800fc8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2201      	movs	r2, #1
 800fc36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2224      	movs	r2, #36	@ 0x24
 800fc3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f022 0201 	bic.w	r2, r2, #1
 800fc58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	683a      	ldr	r2, [r7, #0]
 800fc6a:	430a      	orrs	r2, r1
 800fc6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 f850 	bl	800fd14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2220      	movs	r2, #32
 800fc80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc8c:	2300      	movs	r3, #0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc96:	b580      	push	{r7, lr}
 800fc98:	b084      	sub	sp, #16
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
 800fc9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d101      	bne.n	800fcae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fcaa:	2302      	movs	r3, #2
 800fcac:	e02d      	b.n	800fd0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2224      	movs	r2, #36	@ 0x24
 800fcba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f022 0201 	bic.w	r2, r2, #1
 800fcd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	689b      	ldr	r3, [r3, #8]
 800fcdc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	683a      	ldr	r2, [r7, #0]
 800fce6:	430a      	orrs	r2, r1
 800fce8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 f812 	bl	800fd14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	68fa      	ldr	r2, [r7, #12]
 800fcf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
	...

0800fd14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d108      	bne.n	800fd36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2201      	movs	r2, #1
 800fd28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd34:	e031      	b.n	800fd9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd36:	2308      	movs	r3, #8
 800fd38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd3a:	2308      	movs	r3, #8
 800fd3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	0e5b      	lsrs	r3, r3, #25
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	f003 0307 	and.w	r3, r3, #7
 800fd4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	0f5b      	lsrs	r3, r3, #29
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	f003 0307 	and.w	r3, r3, #7
 800fd5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd5e:	7bbb      	ldrb	r3, [r7, #14]
 800fd60:	7b3a      	ldrb	r2, [r7, #12]
 800fd62:	4911      	ldr	r1, [pc, #68]	@ (800fda8 <UARTEx_SetNbDataToProcess+0x94>)
 800fd64:	5c8a      	ldrb	r2, [r1, r2]
 800fd66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd6a:	7b3a      	ldrb	r2, [r7, #12]
 800fd6c:	490f      	ldr	r1, [pc, #60]	@ (800fdac <UARTEx_SetNbDataToProcess+0x98>)
 800fd6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd70:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd74:	b29a      	uxth	r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd7c:	7bfb      	ldrb	r3, [r7, #15]
 800fd7e:	7b7a      	ldrb	r2, [r7, #13]
 800fd80:	4909      	ldr	r1, [pc, #36]	@ (800fda8 <UARTEx_SetNbDataToProcess+0x94>)
 800fd82:	5c8a      	ldrb	r2, [r1, r2]
 800fd84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd88:	7b7a      	ldrb	r2, [r7, #13]
 800fd8a:	4908      	ldr	r1, [pc, #32]	@ (800fdac <UARTEx_SetNbDataToProcess+0x98>)
 800fd8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fd9a:	bf00      	nop
 800fd9c:	3714      	adds	r7, #20
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop
 800fda8:	08013310 	.word	0x08013310
 800fdac:	08013318 	.word	0x08013318

0800fdb0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b087      	sub	sp, #28
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	6812      	ldr	r2, [r2, #0]
 800fdc8:	f023 0101 	bic.w	r1, r3, #1
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	2b08      	cmp	r3, #8
 800fdd8:	d102      	bne.n	800fde0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800fdda:	2340      	movs	r3, #64	@ 0x40
 800fddc:	617b      	str	r3, [r7, #20]
 800fdde:	e001      	b.n	800fde4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800fde0:	2300      	movs	r3, #0
 800fde2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800fdf0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800fdf6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800fdfc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800fe02:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800fe08:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800fe0e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800fe14:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800fe1a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800fe20:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800fe26:	4313      	orrs	r3, r2
 800fe28:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe2e:	693a      	ldr	r2, [r7, #16]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe42:	693a      	ldr	r2, [r7, #16]
 800fe44:	4313      	orrs	r3, r2
 800fe46:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe4c:	693a      	ldr	r2, [r7, #16]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800fe52:	4b3d      	ldr	r3, [pc, #244]	@ (800ff48 <FMC_NORSRAM_Init+0x198>)
 800fe54:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fe5c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fe64:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800fe6c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800fe74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	681a      	ldr	r2, [r3, #0]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	43db      	mvns	r3, r3
 800fe84:	ea02 0103 	and.w	r1, r2, r3
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	4319      	orrs	r1, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe9e:	d10c      	bne.n	800feba <FMC_NORSRAM_Init+0x10a>
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d008      	beq.n	800feba <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800feb4:	431a      	orrs	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d006      	beq.n	800fed0 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800feca:	431a      	orrs	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d12f      	bne.n	800ff3a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a1b      	ldr	r3, [r3, #32]
 800fede:	0c1b      	lsrs	r3, r3, #16
 800fee0:	041b      	lsls	r3, r3, #16
 800fee2:	683a      	ldr	r2, [r7, #0]
 800fee4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800fee6:	431a      	orrs	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2b04      	cmp	r3, #4
 800fef2:	d014      	beq.n	800ff1e <FMC_NORSRAM_Init+0x16e>
 800fef4:	2b04      	cmp	r3, #4
 800fef6:	d819      	bhi.n	800ff2c <FMC_NORSRAM_Init+0x17c>
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <FMC_NORSRAM_Init+0x152>
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d007      	beq.n	800ff10 <FMC_NORSRAM_Init+0x160>
 800ff00:	e014      	b.n	800ff2c <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6a1b      	ldr	r3, [r3, #32]
 800ff06:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	621a      	str	r2, [r3, #32]
        break;
 800ff0e:	e014      	b.n	800ff3a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6a1b      	ldr	r3, [r3, #32]
 800ff14:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	621a      	str	r2, [r3, #32]
        break;
 800ff1c:	e00d      	b.n	800ff3a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6a1b      	ldr	r3, [r3, #32]
 800ff22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	621a      	str	r2, [r3, #32]
        break;
 800ff2a:	e006      	b.n	800ff3a <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6a1b      	ldr	r3, [r3, #32]
 800ff30:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	621a      	str	r2, [r3, #32]
        break;
 800ff38:	bf00      	nop
    }
  }

  return HAL_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	371c      	adds	r7, #28
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	0008fb7f 	.word	0x0008fb7f

0800ff4c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b087      	sub	sp, #28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800ff62:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800ff6a:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800ff72:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	691b      	ldr	r3, [r3, #16]
 800ff78:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 800ff7a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	695b      	ldr	r3, [r3, #20]
 800ff80:	3b01      	subs	r3, #1
 800ff82:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800ff84:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	699b      	ldr	r3, [r3, #24]
 800ff8a:	3b02      	subs	r3, #2
 800ff8c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800ff8e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800ff9a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ffaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ffae:	d113      	bne.n	800ffd8 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ffb8:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	695b      	ldr	r3, [r3, #20]
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	051b      	lsls	r3, r3, #20
 800ffc2:	697a      	ldr	r2, [r7, #20]
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	431a      	orrs	r2, r3
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ffd8:	2300      	movs	r3, #0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	371c      	adds	r7, #28
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800ffe6:	b480      	push	{r7}
 800ffe8:	b085      	sub	sp, #20
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	60f8      	str	r0, [r7, #12]
 800ffee:	60b9      	str	r1, [r7, #8]
 800fff0:	607a      	str	r2, [r7, #4]
 800fff2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fffa:	d121      	bne.n	8010040 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010004:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	6819      	ldr	r1, [r3, #0]
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	011b      	lsls	r3, r3, #4
 8010012:	4319      	orrs	r1, r3
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	689b      	ldr	r3, [r3, #8]
 8010018:	021b      	lsls	r3, r3, #8
 801001a:	4319      	orrs	r1, r3
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	079b      	lsls	r3, r3, #30
 8010022:	4319      	orrs	r1, r3
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	69db      	ldr	r3, [r3, #28]
 8010028:	4319      	orrs	r1, r3
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	691b      	ldr	r3, [r3, #16]
 801002e:	041b      	lsls	r3, r3, #16
 8010030:	430b      	orrs	r3, r1
 8010032:	ea42 0103 	orr.w	r1, r2, r3
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801003e:	e005      	b.n	801004c <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8010048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3714      	adds	r7, #20
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr
	...

0801005c <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	4b10      	ldr	r3, [pc, #64]	@ (80100ac <FMC_NAND_Init+0x50>)
 801006c:	4013      	ands	r3, r2
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	6851      	ldr	r1, [r2, #4]
 8010072:	683a      	ldr	r2, [r7, #0]
 8010074:	6892      	ldr	r2, [r2, #8]
 8010076:	4311      	orrs	r1, r2
 8010078:	683a      	ldr	r2, [r7, #0]
 801007a:	68d2      	ldr	r2, [r2, #12]
 801007c:	4311      	orrs	r1, r2
 801007e:	683a      	ldr	r2, [r7, #0]
 8010080:	6912      	ldr	r2, [r2, #16]
 8010082:	4311      	orrs	r1, r2
 8010084:	683a      	ldr	r2, [r7, #0]
 8010086:	6952      	ldr	r2, [r2, #20]
 8010088:	0252      	lsls	r2, r2, #9
 801008a:	4311      	orrs	r1, r2
 801008c:	683a      	ldr	r2, [r7, #0]
 801008e:	6992      	ldr	r2, [r2, #24]
 8010090:	0352      	lsls	r2, r2, #13
 8010092:	430a      	orrs	r2, r1
 8010094:	4313      	orrs	r3, r2
 8010096:	f043 0208 	orr.w	r2, r3, #8
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr
 80100ac:	fff00181 	.word	0xfff00181

080100b0 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b085      	sub	sp, #20
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 80100c6:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 80100ce:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 80100d6:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80100dc:	2300      	movs	r3, #0
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3714      	adds	r7, #20
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b085      	sub	sp, #20
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	60f8      	str	r0, [r7, #12]
 80100f2:	60b9      	str	r1, [r7, #8]
 80100f4:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 8010100:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	689b      	ldr	r3, [r3, #8]
 8010106:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8010108:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8010110:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010116:	2300      	movs	r3, #0
}
 8010118:	4618      	mov	r0, r3
 801011a:	3714      	adds	r7, #20
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <__cvt>:
 8010124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010128:	ec57 6b10 	vmov	r6, r7, d0
 801012c:	2f00      	cmp	r7, #0
 801012e:	460c      	mov	r4, r1
 8010130:	4619      	mov	r1, r3
 8010132:	463b      	mov	r3, r7
 8010134:	bfb4      	ite	lt
 8010136:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801013a:	2300      	movge	r3, #0
 801013c:	4691      	mov	r9, r2
 801013e:	bfbf      	itttt	lt
 8010140:	4632      	movlt	r2, r6
 8010142:	461f      	movlt	r7, r3
 8010144:	232d      	movlt	r3, #45	@ 0x2d
 8010146:	4616      	movlt	r6, r2
 8010148:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801014c:	700b      	strb	r3, [r1, #0]
 801014e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010150:	f023 0820 	bic.w	r8, r3, #32
 8010154:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010158:	d005      	beq.n	8010166 <__cvt+0x42>
 801015a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801015e:	d100      	bne.n	8010162 <__cvt+0x3e>
 8010160:	3401      	adds	r4, #1
 8010162:	2102      	movs	r1, #2
 8010164:	e000      	b.n	8010168 <__cvt+0x44>
 8010166:	2103      	movs	r1, #3
 8010168:	ab03      	add	r3, sp, #12
 801016a:	4622      	mov	r2, r4
 801016c:	9301      	str	r3, [sp, #4]
 801016e:	ab02      	add	r3, sp, #8
 8010170:	ec47 6b10 	vmov	d0, r6, r7
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	4653      	mov	r3, sl
 8010178:	f000 fe92 	bl	8010ea0 <_dtoa_r>
 801017c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010180:	4605      	mov	r5, r0
 8010182:	d119      	bne.n	80101b8 <__cvt+0x94>
 8010184:	f019 0f01 	tst.w	r9, #1
 8010188:	d00e      	beq.n	80101a8 <__cvt+0x84>
 801018a:	eb00 0904 	add.w	r9, r0, r4
 801018e:	2200      	movs	r2, #0
 8010190:	2300      	movs	r3, #0
 8010192:	4630      	mov	r0, r6
 8010194:	4639      	mov	r1, r7
 8010196:	f7f0 fca7 	bl	8000ae8 <__aeabi_dcmpeq>
 801019a:	b108      	cbz	r0, 80101a0 <__cvt+0x7c>
 801019c:	f8cd 900c 	str.w	r9, [sp, #12]
 80101a0:	2230      	movs	r2, #48	@ 0x30
 80101a2:	9b03      	ldr	r3, [sp, #12]
 80101a4:	454b      	cmp	r3, r9
 80101a6:	d31e      	bcc.n	80101e6 <__cvt+0xc2>
 80101a8:	9b03      	ldr	r3, [sp, #12]
 80101aa:	4628      	mov	r0, r5
 80101ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101ae:	1b5b      	subs	r3, r3, r5
 80101b0:	6013      	str	r3, [r2, #0]
 80101b2:	b004      	add	sp, #16
 80101b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80101bc:	eb00 0904 	add.w	r9, r0, r4
 80101c0:	d1e5      	bne.n	801018e <__cvt+0x6a>
 80101c2:	7803      	ldrb	r3, [r0, #0]
 80101c4:	2b30      	cmp	r3, #48	@ 0x30
 80101c6:	d10a      	bne.n	80101de <__cvt+0xba>
 80101c8:	2200      	movs	r2, #0
 80101ca:	2300      	movs	r3, #0
 80101cc:	4630      	mov	r0, r6
 80101ce:	4639      	mov	r1, r7
 80101d0:	f7f0 fc8a 	bl	8000ae8 <__aeabi_dcmpeq>
 80101d4:	b918      	cbnz	r0, 80101de <__cvt+0xba>
 80101d6:	f1c4 0401 	rsb	r4, r4, #1
 80101da:	f8ca 4000 	str.w	r4, [sl]
 80101de:	f8da 3000 	ldr.w	r3, [sl]
 80101e2:	4499      	add	r9, r3
 80101e4:	e7d3      	b.n	801018e <__cvt+0x6a>
 80101e6:	1c59      	adds	r1, r3, #1
 80101e8:	9103      	str	r1, [sp, #12]
 80101ea:	701a      	strb	r2, [r3, #0]
 80101ec:	e7d9      	b.n	80101a2 <__cvt+0x7e>

080101ee <__exponent>:
 80101ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101f0:	2900      	cmp	r1, #0
 80101f2:	7002      	strb	r2, [r0, #0]
 80101f4:	bfba      	itte	lt
 80101f6:	4249      	neglt	r1, r1
 80101f8:	232d      	movlt	r3, #45	@ 0x2d
 80101fa:	232b      	movge	r3, #43	@ 0x2b
 80101fc:	2909      	cmp	r1, #9
 80101fe:	7043      	strb	r3, [r0, #1]
 8010200:	dd28      	ble.n	8010254 <__exponent+0x66>
 8010202:	f10d 0307 	add.w	r3, sp, #7
 8010206:	270a      	movs	r7, #10
 8010208:	461d      	mov	r5, r3
 801020a:	461a      	mov	r2, r3
 801020c:	3b01      	subs	r3, #1
 801020e:	fbb1 f6f7 	udiv	r6, r1, r7
 8010212:	fb07 1416 	mls	r4, r7, r6, r1
 8010216:	3430      	adds	r4, #48	@ 0x30
 8010218:	f802 4c01 	strb.w	r4, [r2, #-1]
 801021c:	460c      	mov	r4, r1
 801021e:	4631      	mov	r1, r6
 8010220:	2c63      	cmp	r4, #99	@ 0x63
 8010222:	dcf2      	bgt.n	801020a <__exponent+0x1c>
 8010224:	3130      	adds	r1, #48	@ 0x30
 8010226:	1e94      	subs	r4, r2, #2
 8010228:	f803 1c01 	strb.w	r1, [r3, #-1]
 801022c:	1c41      	adds	r1, r0, #1
 801022e:	4623      	mov	r3, r4
 8010230:	42ab      	cmp	r3, r5
 8010232:	d30a      	bcc.n	801024a <__exponent+0x5c>
 8010234:	f10d 0309 	add.w	r3, sp, #9
 8010238:	1a9b      	subs	r3, r3, r2
 801023a:	42ac      	cmp	r4, r5
 801023c:	bf88      	it	hi
 801023e:	2300      	movhi	r3, #0
 8010240:	3302      	adds	r3, #2
 8010242:	4403      	add	r3, r0
 8010244:	1a18      	subs	r0, r3, r0
 8010246:	b003      	add	sp, #12
 8010248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801024a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801024e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010252:	e7ed      	b.n	8010230 <__exponent+0x42>
 8010254:	2330      	movs	r3, #48	@ 0x30
 8010256:	3130      	adds	r1, #48	@ 0x30
 8010258:	7083      	strb	r3, [r0, #2]
 801025a:	1d03      	adds	r3, r0, #4
 801025c:	70c1      	strb	r1, [r0, #3]
 801025e:	e7f1      	b.n	8010244 <__exponent+0x56>

08010260 <_printf_float>:
 8010260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010264:	b08d      	sub	sp, #52	@ 0x34
 8010266:	460c      	mov	r4, r1
 8010268:	4616      	mov	r6, r2
 801026a:	461f      	mov	r7, r3
 801026c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010270:	4605      	mov	r5, r0
 8010272:	f000 fcf5 	bl	8010c60 <_localeconv_r>
 8010276:	6803      	ldr	r3, [r0, #0]
 8010278:	4618      	mov	r0, r3
 801027a:	9304      	str	r3, [sp, #16]
 801027c:	f7f0 f808 	bl	8000290 <strlen>
 8010280:	2300      	movs	r3, #0
 8010282:	9005      	str	r0, [sp, #20]
 8010284:	930a      	str	r3, [sp, #40]	@ 0x28
 8010286:	f8d8 3000 	ldr.w	r3, [r8]
 801028a:	f894 a018 	ldrb.w	sl, [r4, #24]
 801028e:	3307      	adds	r3, #7
 8010290:	f8d4 b000 	ldr.w	fp, [r4]
 8010294:	f023 0307 	bic.w	r3, r3, #7
 8010298:	f103 0208 	add.w	r2, r3, #8
 801029c:	f8c8 2000 	str.w	r2, [r8]
 80102a0:	f04f 32ff 	mov.w	r2, #4294967295
 80102a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80102ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80102b0:	9307      	str	r3, [sp, #28]
 80102b2:	4b9d      	ldr	r3, [pc, #628]	@ (8010528 <_printf_float+0x2c8>)
 80102b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80102bc:	f7f0 fc46 	bl	8000b4c <__aeabi_dcmpun>
 80102c0:	bb70      	cbnz	r0, 8010320 <_printf_float+0xc0>
 80102c2:	f04f 32ff 	mov.w	r2, #4294967295
 80102c6:	4b98      	ldr	r3, [pc, #608]	@ (8010528 <_printf_float+0x2c8>)
 80102c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102cc:	f7f0 fc20 	bl	8000b10 <__aeabi_dcmple>
 80102d0:	bb30      	cbnz	r0, 8010320 <_printf_float+0xc0>
 80102d2:	2200      	movs	r2, #0
 80102d4:	2300      	movs	r3, #0
 80102d6:	4640      	mov	r0, r8
 80102d8:	4649      	mov	r1, r9
 80102da:	f7f0 fc0f 	bl	8000afc <__aeabi_dcmplt>
 80102de:	b110      	cbz	r0, 80102e6 <_printf_float+0x86>
 80102e0:	232d      	movs	r3, #45	@ 0x2d
 80102e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102e6:	4a91      	ldr	r2, [pc, #580]	@ (801052c <_printf_float+0x2cc>)
 80102e8:	4b91      	ldr	r3, [pc, #580]	@ (8010530 <_printf_float+0x2d0>)
 80102ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80102ee:	bf94      	ite	ls
 80102f0:	4690      	movls	r8, r2
 80102f2:	4698      	movhi	r8, r3
 80102f4:	2303      	movs	r3, #3
 80102f6:	f04f 0900 	mov.w	r9, #0
 80102fa:	6123      	str	r3, [r4, #16]
 80102fc:	f02b 0304 	bic.w	r3, fp, #4
 8010300:	6023      	str	r3, [r4, #0]
 8010302:	4633      	mov	r3, r6
 8010304:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010306:	4621      	mov	r1, r4
 8010308:	4628      	mov	r0, r5
 801030a:	9700      	str	r7, [sp, #0]
 801030c:	f000 f9d2 	bl	80106b4 <_printf_common>
 8010310:	3001      	adds	r0, #1
 8010312:	f040 808d 	bne.w	8010430 <_printf_float+0x1d0>
 8010316:	f04f 30ff 	mov.w	r0, #4294967295
 801031a:	b00d      	add	sp, #52	@ 0x34
 801031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010320:	4642      	mov	r2, r8
 8010322:	464b      	mov	r3, r9
 8010324:	4640      	mov	r0, r8
 8010326:	4649      	mov	r1, r9
 8010328:	f7f0 fc10 	bl	8000b4c <__aeabi_dcmpun>
 801032c:	b140      	cbz	r0, 8010340 <_printf_float+0xe0>
 801032e:	464b      	mov	r3, r9
 8010330:	4a80      	ldr	r2, [pc, #512]	@ (8010534 <_printf_float+0x2d4>)
 8010332:	2b00      	cmp	r3, #0
 8010334:	bfbc      	itt	lt
 8010336:	232d      	movlt	r3, #45	@ 0x2d
 8010338:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801033c:	4b7e      	ldr	r3, [pc, #504]	@ (8010538 <_printf_float+0x2d8>)
 801033e:	e7d4      	b.n	80102ea <_printf_float+0x8a>
 8010340:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010344:	6863      	ldr	r3, [r4, #4]
 8010346:	9206      	str	r2, [sp, #24]
 8010348:	1c5a      	adds	r2, r3, #1
 801034a:	d13b      	bne.n	80103c4 <_printf_float+0x164>
 801034c:	2306      	movs	r3, #6
 801034e:	6063      	str	r3, [r4, #4]
 8010350:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010354:	2300      	movs	r3, #0
 8010356:	4628      	mov	r0, r5
 8010358:	6022      	str	r2, [r4, #0]
 801035a:	9303      	str	r3, [sp, #12]
 801035c:	ab0a      	add	r3, sp, #40	@ 0x28
 801035e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010362:	ab09      	add	r3, sp, #36	@ 0x24
 8010364:	ec49 8b10 	vmov	d0, r8, r9
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801036e:	6861      	ldr	r1, [r4, #4]
 8010370:	f7ff fed8 	bl	8010124 <__cvt>
 8010374:	9b06      	ldr	r3, [sp, #24]
 8010376:	4680      	mov	r8, r0
 8010378:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801037a:	2b47      	cmp	r3, #71	@ 0x47
 801037c:	d129      	bne.n	80103d2 <_printf_float+0x172>
 801037e:	1cc8      	adds	r0, r1, #3
 8010380:	db02      	blt.n	8010388 <_printf_float+0x128>
 8010382:	6863      	ldr	r3, [r4, #4]
 8010384:	4299      	cmp	r1, r3
 8010386:	dd41      	ble.n	801040c <_printf_float+0x1ac>
 8010388:	f1aa 0a02 	sub.w	sl, sl, #2
 801038c:	fa5f fa8a 	uxtb.w	sl, sl
 8010390:	3901      	subs	r1, #1
 8010392:	4652      	mov	r2, sl
 8010394:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010398:	9109      	str	r1, [sp, #36]	@ 0x24
 801039a:	f7ff ff28 	bl	80101ee <__exponent>
 801039e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103a0:	4681      	mov	r9, r0
 80103a2:	1813      	adds	r3, r2, r0
 80103a4:	2a01      	cmp	r2, #1
 80103a6:	6123      	str	r3, [r4, #16]
 80103a8:	dc02      	bgt.n	80103b0 <_printf_float+0x150>
 80103aa:	6822      	ldr	r2, [r4, #0]
 80103ac:	07d2      	lsls	r2, r2, #31
 80103ae:	d501      	bpl.n	80103b4 <_printf_float+0x154>
 80103b0:	3301      	adds	r3, #1
 80103b2:	6123      	str	r3, [r4, #16]
 80103b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d0a2      	beq.n	8010302 <_printf_float+0xa2>
 80103bc:	232d      	movs	r3, #45	@ 0x2d
 80103be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103c2:	e79e      	b.n	8010302 <_printf_float+0xa2>
 80103c4:	9a06      	ldr	r2, [sp, #24]
 80103c6:	2a47      	cmp	r2, #71	@ 0x47
 80103c8:	d1c2      	bne.n	8010350 <_printf_float+0xf0>
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d1c0      	bne.n	8010350 <_printf_float+0xf0>
 80103ce:	2301      	movs	r3, #1
 80103d0:	e7bd      	b.n	801034e <_printf_float+0xee>
 80103d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80103d6:	d9db      	bls.n	8010390 <_printf_float+0x130>
 80103d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80103dc:	d118      	bne.n	8010410 <_printf_float+0x1b0>
 80103de:	2900      	cmp	r1, #0
 80103e0:	6863      	ldr	r3, [r4, #4]
 80103e2:	dd0b      	ble.n	80103fc <_printf_float+0x19c>
 80103e4:	6121      	str	r1, [r4, #16]
 80103e6:	b913      	cbnz	r3, 80103ee <_printf_float+0x18e>
 80103e8:	6822      	ldr	r2, [r4, #0]
 80103ea:	07d0      	lsls	r0, r2, #31
 80103ec:	d502      	bpl.n	80103f4 <_printf_float+0x194>
 80103ee:	3301      	adds	r3, #1
 80103f0:	440b      	add	r3, r1
 80103f2:	6123      	str	r3, [r4, #16]
 80103f4:	f04f 0900 	mov.w	r9, #0
 80103f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80103fa:	e7db      	b.n	80103b4 <_printf_float+0x154>
 80103fc:	b913      	cbnz	r3, 8010404 <_printf_float+0x1a4>
 80103fe:	6822      	ldr	r2, [r4, #0]
 8010400:	07d2      	lsls	r2, r2, #31
 8010402:	d501      	bpl.n	8010408 <_printf_float+0x1a8>
 8010404:	3302      	adds	r3, #2
 8010406:	e7f4      	b.n	80103f2 <_printf_float+0x192>
 8010408:	2301      	movs	r3, #1
 801040a:	e7f2      	b.n	80103f2 <_printf_float+0x192>
 801040c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010412:	4299      	cmp	r1, r3
 8010414:	db05      	blt.n	8010422 <_printf_float+0x1c2>
 8010416:	6823      	ldr	r3, [r4, #0]
 8010418:	6121      	str	r1, [r4, #16]
 801041a:	07d8      	lsls	r0, r3, #31
 801041c:	d5ea      	bpl.n	80103f4 <_printf_float+0x194>
 801041e:	1c4b      	adds	r3, r1, #1
 8010420:	e7e7      	b.n	80103f2 <_printf_float+0x192>
 8010422:	2900      	cmp	r1, #0
 8010424:	bfd4      	ite	le
 8010426:	f1c1 0202 	rsble	r2, r1, #2
 801042a:	2201      	movgt	r2, #1
 801042c:	4413      	add	r3, r2
 801042e:	e7e0      	b.n	80103f2 <_printf_float+0x192>
 8010430:	6823      	ldr	r3, [r4, #0]
 8010432:	055a      	lsls	r2, r3, #21
 8010434:	d407      	bmi.n	8010446 <_printf_float+0x1e6>
 8010436:	6923      	ldr	r3, [r4, #16]
 8010438:	4642      	mov	r2, r8
 801043a:	4631      	mov	r1, r6
 801043c:	4628      	mov	r0, r5
 801043e:	47b8      	blx	r7
 8010440:	3001      	adds	r0, #1
 8010442:	d12b      	bne.n	801049c <_printf_float+0x23c>
 8010444:	e767      	b.n	8010316 <_printf_float+0xb6>
 8010446:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801044a:	f240 80dd 	bls.w	8010608 <_printf_float+0x3a8>
 801044e:	2200      	movs	r2, #0
 8010450:	2300      	movs	r3, #0
 8010452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010456:	f7f0 fb47 	bl	8000ae8 <__aeabi_dcmpeq>
 801045a:	2800      	cmp	r0, #0
 801045c:	d033      	beq.n	80104c6 <_printf_float+0x266>
 801045e:	2301      	movs	r3, #1
 8010460:	4a36      	ldr	r2, [pc, #216]	@ (801053c <_printf_float+0x2dc>)
 8010462:	4631      	mov	r1, r6
 8010464:	4628      	mov	r0, r5
 8010466:	47b8      	blx	r7
 8010468:	3001      	adds	r0, #1
 801046a:	f43f af54 	beq.w	8010316 <_printf_float+0xb6>
 801046e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010472:	4543      	cmp	r3, r8
 8010474:	db02      	blt.n	801047c <_printf_float+0x21c>
 8010476:	6823      	ldr	r3, [r4, #0]
 8010478:	07d8      	lsls	r0, r3, #31
 801047a:	d50f      	bpl.n	801049c <_printf_float+0x23c>
 801047c:	4631      	mov	r1, r6
 801047e:	4628      	mov	r0, r5
 8010480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010484:	47b8      	blx	r7
 8010486:	3001      	adds	r0, #1
 8010488:	f43f af45 	beq.w	8010316 <_printf_float+0xb6>
 801048c:	f04f 0900 	mov.w	r9, #0
 8010490:	f108 38ff 	add.w	r8, r8, #4294967295
 8010494:	f104 0a1a 	add.w	sl, r4, #26
 8010498:	45c8      	cmp	r8, r9
 801049a:	dc09      	bgt.n	80104b0 <_printf_float+0x250>
 801049c:	6823      	ldr	r3, [r4, #0]
 801049e:	079b      	lsls	r3, r3, #30
 80104a0:	f100 8103 	bmi.w	80106aa <_printf_float+0x44a>
 80104a4:	68e0      	ldr	r0, [r4, #12]
 80104a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104a8:	4298      	cmp	r0, r3
 80104aa:	bfb8      	it	lt
 80104ac:	4618      	movlt	r0, r3
 80104ae:	e734      	b.n	801031a <_printf_float+0xba>
 80104b0:	2301      	movs	r3, #1
 80104b2:	4652      	mov	r2, sl
 80104b4:	4631      	mov	r1, r6
 80104b6:	4628      	mov	r0, r5
 80104b8:	47b8      	blx	r7
 80104ba:	3001      	adds	r0, #1
 80104bc:	f43f af2b 	beq.w	8010316 <_printf_float+0xb6>
 80104c0:	f109 0901 	add.w	r9, r9, #1
 80104c4:	e7e8      	b.n	8010498 <_printf_float+0x238>
 80104c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	dc39      	bgt.n	8010540 <_printf_float+0x2e0>
 80104cc:	2301      	movs	r3, #1
 80104ce:	4a1b      	ldr	r2, [pc, #108]	@ (801053c <_printf_float+0x2dc>)
 80104d0:	4631      	mov	r1, r6
 80104d2:	4628      	mov	r0, r5
 80104d4:	47b8      	blx	r7
 80104d6:	3001      	adds	r0, #1
 80104d8:	f43f af1d 	beq.w	8010316 <_printf_float+0xb6>
 80104dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80104e0:	ea59 0303 	orrs.w	r3, r9, r3
 80104e4:	d102      	bne.n	80104ec <_printf_float+0x28c>
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	07d9      	lsls	r1, r3, #31
 80104ea:	d5d7      	bpl.n	801049c <_printf_float+0x23c>
 80104ec:	4631      	mov	r1, r6
 80104ee:	4628      	mov	r0, r5
 80104f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104f4:	47b8      	blx	r7
 80104f6:	3001      	adds	r0, #1
 80104f8:	f43f af0d 	beq.w	8010316 <_printf_float+0xb6>
 80104fc:	f04f 0a00 	mov.w	sl, #0
 8010500:	f104 0b1a 	add.w	fp, r4, #26
 8010504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010506:	425b      	negs	r3, r3
 8010508:	4553      	cmp	r3, sl
 801050a:	dc01      	bgt.n	8010510 <_printf_float+0x2b0>
 801050c:	464b      	mov	r3, r9
 801050e:	e793      	b.n	8010438 <_printf_float+0x1d8>
 8010510:	2301      	movs	r3, #1
 8010512:	465a      	mov	r2, fp
 8010514:	4631      	mov	r1, r6
 8010516:	4628      	mov	r0, r5
 8010518:	47b8      	blx	r7
 801051a:	3001      	adds	r0, #1
 801051c:	f43f aefb 	beq.w	8010316 <_printf_float+0xb6>
 8010520:	f10a 0a01 	add.w	sl, sl, #1
 8010524:	e7ee      	b.n	8010504 <_printf_float+0x2a4>
 8010526:	bf00      	nop
 8010528:	7fefffff 	.word	0x7fefffff
 801052c:	08013320 	.word	0x08013320
 8010530:	08013324 	.word	0x08013324
 8010534:	08013328 	.word	0x08013328
 8010538:	0801332c 	.word	0x0801332c
 801053c:	08013330 	.word	0x08013330
 8010540:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010542:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010546:	4553      	cmp	r3, sl
 8010548:	bfa8      	it	ge
 801054a:	4653      	movge	r3, sl
 801054c:	2b00      	cmp	r3, #0
 801054e:	4699      	mov	r9, r3
 8010550:	dc36      	bgt.n	80105c0 <_printf_float+0x360>
 8010552:	f04f 0b00 	mov.w	fp, #0
 8010556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801055a:	f104 021a 	add.w	r2, r4, #26
 801055e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010560:	9306      	str	r3, [sp, #24]
 8010562:	eba3 0309 	sub.w	r3, r3, r9
 8010566:	455b      	cmp	r3, fp
 8010568:	dc31      	bgt.n	80105ce <_printf_float+0x36e>
 801056a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801056c:	459a      	cmp	sl, r3
 801056e:	dc3a      	bgt.n	80105e6 <_printf_float+0x386>
 8010570:	6823      	ldr	r3, [r4, #0]
 8010572:	07da      	lsls	r2, r3, #31
 8010574:	d437      	bmi.n	80105e6 <_printf_float+0x386>
 8010576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010578:	ebaa 0903 	sub.w	r9, sl, r3
 801057c:	9b06      	ldr	r3, [sp, #24]
 801057e:	ebaa 0303 	sub.w	r3, sl, r3
 8010582:	4599      	cmp	r9, r3
 8010584:	bfa8      	it	ge
 8010586:	4699      	movge	r9, r3
 8010588:	f1b9 0f00 	cmp.w	r9, #0
 801058c:	dc33      	bgt.n	80105f6 <_printf_float+0x396>
 801058e:	f04f 0800 	mov.w	r8, #0
 8010592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010596:	f104 0b1a 	add.w	fp, r4, #26
 801059a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801059c:	ebaa 0303 	sub.w	r3, sl, r3
 80105a0:	eba3 0309 	sub.w	r3, r3, r9
 80105a4:	4543      	cmp	r3, r8
 80105a6:	f77f af79 	ble.w	801049c <_printf_float+0x23c>
 80105aa:	2301      	movs	r3, #1
 80105ac:	465a      	mov	r2, fp
 80105ae:	4631      	mov	r1, r6
 80105b0:	4628      	mov	r0, r5
 80105b2:	47b8      	blx	r7
 80105b4:	3001      	adds	r0, #1
 80105b6:	f43f aeae 	beq.w	8010316 <_printf_float+0xb6>
 80105ba:	f108 0801 	add.w	r8, r8, #1
 80105be:	e7ec      	b.n	801059a <_printf_float+0x33a>
 80105c0:	4642      	mov	r2, r8
 80105c2:	4631      	mov	r1, r6
 80105c4:	4628      	mov	r0, r5
 80105c6:	47b8      	blx	r7
 80105c8:	3001      	adds	r0, #1
 80105ca:	d1c2      	bne.n	8010552 <_printf_float+0x2f2>
 80105cc:	e6a3      	b.n	8010316 <_printf_float+0xb6>
 80105ce:	2301      	movs	r3, #1
 80105d0:	4631      	mov	r1, r6
 80105d2:	4628      	mov	r0, r5
 80105d4:	9206      	str	r2, [sp, #24]
 80105d6:	47b8      	blx	r7
 80105d8:	3001      	adds	r0, #1
 80105da:	f43f ae9c 	beq.w	8010316 <_printf_float+0xb6>
 80105de:	f10b 0b01 	add.w	fp, fp, #1
 80105e2:	9a06      	ldr	r2, [sp, #24]
 80105e4:	e7bb      	b.n	801055e <_printf_float+0x2fe>
 80105e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105ea:	4631      	mov	r1, r6
 80105ec:	4628      	mov	r0, r5
 80105ee:	47b8      	blx	r7
 80105f0:	3001      	adds	r0, #1
 80105f2:	d1c0      	bne.n	8010576 <_printf_float+0x316>
 80105f4:	e68f      	b.n	8010316 <_printf_float+0xb6>
 80105f6:	9a06      	ldr	r2, [sp, #24]
 80105f8:	464b      	mov	r3, r9
 80105fa:	4631      	mov	r1, r6
 80105fc:	4628      	mov	r0, r5
 80105fe:	4442      	add	r2, r8
 8010600:	47b8      	blx	r7
 8010602:	3001      	adds	r0, #1
 8010604:	d1c3      	bne.n	801058e <_printf_float+0x32e>
 8010606:	e686      	b.n	8010316 <_printf_float+0xb6>
 8010608:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801060c:	f1ba 0f01 	cmp.w	sl, #1
 8010610:	dc01      	bgt.n	8010616 <_printf_float+0x3b6>
 8010612:	07db      	lsls	r3, r3, #31
 8010614:	d536      	bpl.n	8010684 <_printf_float+0x424>
 8010616:	2301      	movs	r3, #1
 8010618:	4642      	mov	r2, r8
 801061a:	4631      	mov	r1, r6
 801061c:	4628      	mov	r0, r5
 801061e:	47b8      	blx	r7
 8010620:	3001      	adds	r0, #1
 8010622:	f43f ae78 	beq.w	8010316 <_printf_float+0xb6>
 8010626:	4631      	mov	r1, r6
 8010628:	4628      	mov	r0, r5
 801062a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801062e:	47b8      	blx	r7
 8010630:	3001      	adds	r0, #1
 8010632:	f43f ae70 	beq.w	8010316 <_printf_float+0xb6>
 8010636:	2200      	movs	r2, #0
 8010638:	2300      	movs	r3, #0
 801063a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801063e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010642:	f7f0 fa51 	bl	8000ae8 <__aeabi_dcmpeq>
 8010646:	b9c0      	cbnz	r0, 801067a <_printf_float+0x41a>
 8010648:	4653      	mov	r3, sl
 801064a:	f108 0201 	add.w	r2, r8, #1
 801064e:	4631      	mov	r1, r6
 8010650:	4628      	mov	r0, r5
 8010652:	47b8      	blx	r7
 8010654:	3001      	adds	r0, #1
 8010656:	d10c      	bne.n	8010672 <_printf_float+0x412>
 8010658:	e65d      	b.n	8010316 <_printf_float+0xb6>
 801065a:	2301      	movs	r3, #1
 801065c:	465a      	mov	r2, fp
 801065e:	4631      	mov	r1, r6
 8010660:	4628      	mov	r0, r5
 8010662:	47b8      	blx	r7
 8010664:	3001      	adds	r0, #1
 8010666:	f43f ae56 	beq.w	8010316 <_printf_float+0xb6>
 801066a:	f108 0801 	add.w	r8, r8, #1
 801066e:	45d0      	cmp	r8, sl
 8010670:	dbf3      	blt.n	801065a <_printf_float+0x3fa>
 8010672:	464b      	mov	r3, r9
 8010674:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010678:	e6df      	b.n	801043a <_printf_float+0x1da>
 801067a:	f04f 0800 	mov.w	r8, #0
 801067e:	f104 0b1a 	add.w	fp, r4, #26
 8010682:	e7f4      	b.n	801066e <_printf_float+0x40e>
 8010684:	2301      	movs	r3, #1
 8010686:	4642      	mov	r2, r8
 8010688:	e7e1      	b.n	801064e <_printf_float+0x3ee>
 801068a:	2301      	movs	r3, #1
 801068c:	464a      	mov	r2, r9
 801068e:	4631      	mov	r1, r6
 8010690:	4628      	mov	r0, r5
 8010692:	47b8      	blx	r7
 8010694:	3001      	adds	r0, #1
 8010696:	f43f ae3e 	beq.w	8010316 <_printf_float+0xb6>
 801069a:	f108 0801 	add.w	r8, r8, #1
 801069e:	68e3      	ldr	r3, [r4, #12]
 80106a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106a2:	1a5b      	subs	r3, r3, r1
 80106a4:	4543      	cmp	r3, r8
 80106a6:	dcf0      	bgt.n	801068a <_printf_float+0x42a>
 80106a8:	e6fc      	b.n	80104a4 <_printf_float+0x244>
 80106aa:	f04f 0800 	mov.w	r8, #0
 80106ae:	f104 0919 	add.w	r9, r4, #25
 80106b2:	e7f4      	b.n	801069e <_printf_float+0x43e>

080106b4 <_printf_common>:
 80106b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106b8:	4616      	mov	r6, r2
 80106ba:	4698      	mov	r8, r3
 80106bc:	688a      	ldr	r2, [r1, #8]
 80106be:	4607      	mov	r7, r0
 80106c0:	690b      	ldr	r3, [r1, #16]
 80106c2:	460c      	mov	r4, r1
 80106c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80106c8:	4293      	cmp	r3, r2
 80106ca:	bfb8      	it	lt
 80106cc:	4613      	movlt	r3, r2
 80106ce:	6033      	str	r3, [r6, #0]
 80106d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80106d4:	b10a      	cbz	r2, 80106da <_printf_common+0x26>
 80106d6:	3301      	adds	r3, #1
 80106d8:	6033      	str	r3, [r6, #0]
 80106da:	6823      	ldr	r3, [r4, #0]
 80106dc:	0699      	lsls	r1, r3, #26
 80106de:	bf42      	ittt	mi
 80106e0:	6833      	ldrmi	r3, [r6, #0]
 80106e2:	3302      	addmi	r3, #2
 80106e4:	6033      	strmi	r3, [r6, #0]
 80106e6:	6825      	ldr	r5, [r4, #0]
 80106e8:	f015 0506 	ands.w	r5, r5, #6
 80106ec:	d106      	bne.n	80106fc <_printf_common+0x48>
 80106ee:	f104 0a19 	add.w	sl, r4, #25
 80106f2:	68e3      	ldr	r3, [r4, #12]
 80106f4:	6832      	ldr	r2, [r6, #0]
 80106f6:	1a9b      	subs	r3, r3, r2
 80106f8:	42ab      	cmp	r3, r5
 80106fa:	dc2b      	bgt.n	8010754 <_printf_common+0xa0>
 80106fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010700:	6822      	ldr	r2, [r4, #0]
 8010702:	3b00      	subs	r3, #0
 8010704:	bf18      	it	ne
 8010706:	2301      	movne	r3, #1
 8010708:	0692      	lsls	r2, r2, #26
 801070a:	d430      	bmi.n	801076e <_printf_common+0xba>
 801070c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010710:	4641      	mov	r1, r8
 8010712:	4638      	mov	r0, r7
 8010714:	47c8      	blx	r9
 8010716:	3001      	adds	r0, #1
 8010718:	d023      	beq.n	8010762 <_printf_common+0xae>
 801071a:	6823      	ldr	r3, [r4, #0]
 801071c:	341a      	adds	r4, #26
 801071e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010722:	f003 0306 	and.w	r3, r3, #6
 8010726:	2b04      	cmp	r3, #4
 8010728:	bf0a      	itet	eq
 801072a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801072e:	2500      	movne	r5, #0
 8010730:	6833      	ldreq	r3, [r6, #0]
 8010732:	f04f 0600 	mov.w	r6, #0
 8010736:	bf08      	it	eq
 8010738:	1aed      	subeq	r5, r5, r3
 801073a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801073e:	bf08      	it	eq
 8010740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010744:	4293      	cmp	r3, r2
 8010746:	bfc4      	itt	gt
 8010748:	1a9b      	subgt	r3, r3, r2
 801074a:	18ed      	addgt	r5, r5, r3
 801074c:	42b5      	cmp	r5, r6
 801074e:	d11a      	bne.n	8010786 <_printf_common+0xd2>
 8010750:	2000      	movs	r0, #0
 8010752:	e008      	b.n	8010766 <_printf_common+0xb2>
 8010754:	2301      	movs	r3, #1
 8010756:	4652      	mov	r2, sl
 8010758:	4641      	mov	r1, r8
 801075a:	4638      	mov	r0, r7
 801075c:	47c8      	blx	r9
 801075e:	3001      	adds	r0, #1
 8010760:	d103      	bne.n	801076a <_printf_common+0xb6>
 8010762:	f04f 30ff 	mov.w	r0, #4294967295
 8010766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801076a:	3501      	adds	r5, #1
 801076c:	e7c1      	b.n	80106f2 <_printf_common+0x3e>
 801076e:	18e1      	adds	r1, r4, r3
 8010770:	1c5a      	adds	r2, r3, #1
 8010772:	2030      	movs	r0, #48	@ 0x30
 8010774:	3302      	adds	r3, #2
 8010776:	4422      	add	r2, r4
 8010778:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801077c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010784:	e7c2      	b.n	801070c <_printf_common+0x58>
 8010786:	2301      	movs	r3, #1
 8010788:	4622      	mov	r2, r4
 801078a:	4641      	mov	r1, r8
 801078c:	4638      	mov	r0, r7
 801078e:	47c8      	blx	r9
 8010790:	3001      	adds	r0, #1
 8010792:	d0e6      	beq.n	8010762 <_printf_common+0xae>
 8010794:	3601      	adds	r6, #1
 8010796:	e7d9      	b.n	801074c <_printf_common+0x98>

08010798 <_printf_i>:
 8010798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801079c:	7e0f      	ldrb	r7, [r1, #24]
 801079e:	4691      	mov	r9, r2
 80107a0:	4680      	mov	r8, r0
 80107a2:	460c      	mov	r4, r1
 80107a4:	2f78      	cmp	r7, #120	@ 0x78
 80107a6:	469a      	mov	sl, r3
 80107a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80107aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80107ae:	d807      	bhi.n	80107c0 <_printf_i+0x28>
 80107b0:	2f62      	cmp	r7, #98	@ 0x62
 80107b2:	d80a      	bhi.n	80107ca <_printf_i+0x32>
 80107b4:	2f00      	cmp	r7, #0
 80107b6:	f000 80d2 	beq.w	801095e <_printf_i+0x1c6>
 80107ba:	2f58      	cmp	r7, #88	@ 0x58
 80107bc:	f000 80b9 	beq.w	8010932 <_printf_i+0x19a>
 80107c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80107c8:	e03a      	b.n	8010840 <_printf_i+0xa8>
 80107ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80107ce:	2b15      	cmp	r3, #21
 80107d0:	d8f6      	bhi.n	80107c0 <_printf_i+0x28>
 80107d2:	a101      	add	r1, pc, #4	@ (adr r1, 80107d8 <_printf_i+0x40>)
 80107d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107d8:	08010831 	.word	0x08010831
 80107dc:	08010845 	.word	0x08010845
 80107e0:	080107c1 	.word	0x080107c1
 80107e4:	080107c1 	.word	0x080107c1
 80107e8:	080107c1 	.word	0x080107c1
 80107ec:	080107c1 	.word	0x080107c1
 80107f0:	08010845 	.word	0x08010845
 80107f4:	080107c1 	.word	0x080107c1
 80107f8:	080107c1 	.word	0x080107c1
 80107fc:	080107c1 	.word	0x080107c1
 8010800:	080107c1 	.word	0x080107c1
 8010804:	08010945 	.word	0x08010945
 8010808:	0801086f 	.word	0x0801086f
 801080c:	080108ff 	.word	0x080108ff
 8010810:	080107c1 	.word	0x080107c1
 8010814:	080107c1 	.word	0x080107c1
 8010818:	08010967 	.word	0x08010967
 801081c:	080107c1 	.word	0x080107c1
 8010820:	0801086f 	.word	0x0801086f
 8010824:	080107c1 	.word	0x080107c1
 8010828:	080107c1 	.word	0x080107c1
 801082c:	08010907 	.word	0x08010907
 8010830:	6833      	ldr	r3, [r6, #0]
 8010832:	1d1a      	adds	r2, r3, #4
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	6032      	str	r2, [r6, #0]
 8010838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801083c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010840:	2301      	movs	r3, #1
 8010842:	e09d      	b.n	8010980 <_printf_i+0x1e8>
 8010844:	6833      	ldr	r3, [r6, #0]
 8010846:	6820      	ldr	r0, [r4, #0]
 8010848:	1d19      	adds	r1, r3, #4
 801084a:	6031      	str	r1, [r6, #0]
 801084c:	0606      	lsls	r6, r0, #24
 801084e:	d501      	bpl.n	8010854 <_printf_i+0xbc>
 8010850:	681d      	ldr	r5, [r3, #0]
 8010852:	e003      	b.n	801085c <_printf_i+0xc4>
 8010854:	0645      	lsls	r5, r0, #25
 8010856:	d5fb      	bpl.n	8010850 <_printf_i+0xb8>
 8010858:	f9b3 5000 	ldrsh.w	r5, [r3]
 801085c:	2d00      	cmp	r5, #0
 801085e:	da03      	bge.n	8010868 <_printf_i+0xd0>
 8010860:	232d      	movs	r3, #45	@ 0x2d
 8010862:	426d      	negs	r5, r5
 8010864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010868:	4859      	ldr	r0, [pc, #356]	@ (80109d0 <_printf_i+0x238>)
 801086a:	230a      	movs	r3, #10
 801086c:	e011      	b.n	8010892 <_printf_i+0xfa>
 801086e:	6821      	ldr	r1, [r4, #0]
 8010870:	6833      	ldr	r3, [r6, #0]
 8010872:	0608      	lsls	r0, r1, #24
 8010874:	f853 5b04 	ldr.w	r5, [r3], #4
 8010878:	d402      	bmi.n	8010880 <_printf_i+0xe8>
 801087a:	0649      	lsls	r1, r1, #25
 801087c:	bf48      	it	mi
 801087e:	b2ad      	uxthmi	r5, r5
 8010880:	2f6f      	cmp	r7, #111	@ 0x6f
 8010882:	6033      	str	r3, [r6, #0]
 8010884:	4852      	ldr	r0, [pc, #328]	@ (80109d0 <_printf_i+0x238>)
 8010886:	bf14      	ite	ne
 8010888:	230a      	movne	r3, #10
 801088a:	2308      	moveq	r3, #8
 801088c:	2100      	movs	r1, #0
 801088e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010892:	6866      	ldr	r6, [r4, #4]
 8010894:	2e00      	cmp	r6, #0
 8010896:	60a6      	str	r6, [r4, #8]
 8010898:	bfa2      	ittt	ge
 801089a:	6821      	ldrge	r1, [r4, #0]
 801089c:	f021 0104 	bicge.w	r1, r1, #4
 80108a0:	6021      	strge	r1, [r4, #0]
 80108a2:	b90d      	cbnz	r5, 80108a8 <_printf_i+0x110>
 80108a4:	2e00      	cmp	r6, #0
 80108a6:	d04b      	beq.n	8010940 <_printf_i+0x1a8>
 80108a8:	4616      	mov	r6, r2
 80108aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80108ae:	fb03 5711 	mls	r7, r3, r1, r5
 80108b2:	5dc7      	ldrb	r7, [r0, r7]
 80108b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80108b8:	462f      	mov	r7, r5
 80108ba:	460d      	mov	r5, r1
 80108bc:	42bb      	cmp	r3, r7
 80108be:	d9f4      	bls.n	80108aa <_printf_i+0x112>
 80108c0:	2b08      	cmp	r3, #8
 80108c2:	d10b      	bne.n	80108dc <_printf_i+0x144>
 80108c4:	6823      	ldr	r3, [r4, #0]
 80108c6:	07df      	lsls	r7, r3, #31
 80108c8:	d508      	bpl.n	80108dc <_printf_i+0x144>
 80108ca:	6923      	ldr	r3, [r4, #16]
 80108cc:	6861      	ldr	r1, [r4, #4]
 80108ce:	4299      	cmp	r1, r3
 80108d0:	bfde      	ittt	le
 80108d2:	2330      	movle	r3, #48	@ 0x30
 80108d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80108d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80108dc:	1b92      	subs	r2, r2, r6
 80108de:	6122      	str	r2, [r4, #16]
 80108e0:	464b      	mov	r3, r9
 80108e2:	aa03      	add	r2, sp, #12
 80108e4:	4621      	mov	r1, r4
 80108e6:	4640      	mov	r0, r8
 80108e8:	f8cd a000 	str.w	sl, [sp]
 80108ec:	f7ff fee2 	bl	80106b4 <_printf_common>
 80108f0:	3001      	adds	r0, #1
 80108f2:	d14a      	bne.n	801098a <_printf_i+0x1f2>
 80108f4:	f04f 30ff 	mov.w	r0, #4294967295
 80108f8:	b004      	add	sp, #16
 80108fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	f043 0320 	orr.w	r3, r3, #32
 8010904:	6023      	str	r3, [r4, #0]
 8010906:	2778      	movs	r7, #120	@ 0x78
 8010908:	4832      	ldr	r0, [pc, #200]	@ (80109d4 <_printf_i+0x23c>)
 801090a:	6823      	ldr	r3, [r4, #0]
 801090c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010910:	061f      	lsls	r7, r3, #24
 8010912:	6831      	ldr	r1, [r6, #0]
 8010914:	f851 5b04 	ldr.w	r5, [r1], #4
 8010918:	d402      	bmi.n	8010920 <_printf_i+0x188>
 801091a:	065f      	lsls	r7, r3, #25
 801091c:	bf48      	it	mi
 801091e:	b2ad      	uxthmi	r5, r5
 8010920:	6031      	str	r1, [r6, #0]
 8010922:	07d9      	lsls	r1, r3, #31
 8010924:	bf44      	itt	mi
 8010926:	f043 0320 	orrmi.w	r3, r3, #32
 801092a:	6023      	strmi	r3, [r4, #0]
 801092c:	b11d      	cbz	r5, 8010936 <_printf_i+0x19e>
 801092e:	2310      	movs	r3, #16
 8010930:	e7ac      	b.n	801088c <_printf_i+0xf4>
 8010932:	4827      	ldr	r0, [pc, #156]	@ (80109d0 <_printf_i+0x238>)
 8010934:	e7e9      	b.n	801090a <_printf_i+0x172>
 8010936:	6823      	ldr	r3, [r4, #0]
 8010938:	f023 0320 	bic.w	r3, r3, #32
 801093c:	6023      	str	r3, [r4, #0]
 801093e:	e7f6      	b.n	801092e <_printf_i+0x196>
 8010940:	4616      	mov	r6, r2
 8010942:	e7bd      	b.n	80108c0 <_printf_i+0x128>
 8010944:	6833      	ldr	r3, [r6, #0]
 8010946:	6825      	ldr	r5, [r4, #0]
 8010948:	1d18      	adds	r0, r3, #4
 801094a:	6961      	ldr	r1, [r4, #20]
 801094c:	6030      	str	r0, [r6, #0]
 801094e:	062e      	lsls	r6, r5, #24
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	d501      	bpl.n	8010958 <_printf_i+0x1c0>
 8010954:	6019      	str	r1, [r3, #0]
 8010956:	e002      	b.n	801095e <_printf_i+0x1c6>
 8010958:	0668      	lsls	r0, r5, #25
 801095a:	d5fb      	bpl.n	8010954 <_printf_i+0x1bc>
 801095c:	8019      	strh	r1, [r3, #0]
 801095e:	2300      	movs	r3, #0
 8010960:	4616      	mov	r6, r2
 8010962:	6123      	str	r3, [r4, #16]
 8010964:	e7bc      	b.n	80108e0 <_printf_i+0x148>
 8010966:	6833      	ldr	r3, [r6, #0]
 8010968:	2100      	movs	r1, #0
 801096a:	1d1a      	adds	r2, r3, #4
 801096c:	6032      	str	r2, [r6, #0]
 801096e:	681e      	ldr	r6, [r3, #0]
 8010970:	6862      	ldr	r2, [r4, #4]
 8010972:	4630      	mov	r0, r6
 8010974:	f000 f9eb 	bl	8010d4e <memchr>
 8010978:	b108      	cbz	r0, 801097e <_printf_i+0x1e6>
 801097a:	1b80      	subs	r0, r0, r6
 801097c:	6060      	str	r0, [r4, #4]
 801097e:	6863      	ldr	r3, [r4, #4]
 8010980:	6123      	str	r3, [r4, #16]
 8010982:	2300      	movs	r3, #0
 8010984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010988:	e7aa      	b.n	80108e0 <_printf_i+0x148>
 801098a:	6923      	ldr	r3, [r4, #16]
 801098c:	4632      	mov	r2, r6
 801098e:	4649      	mov	r1, r9
 8010990:	4640      	mov	r0, r8
 8010992:	47d0      	blx	sl
 8010994:	3001      	adds	r0, #1
 8010996:	d0ad      	beq.n	80108f4 <_printf_i+0x15c>
 8010998:	6823      	ldr	r3, [r4, #0]
 801099a:	079b      	lsls	r3, r3, #30
 801099c:	d413      	bmi.n	80109c6 <_printf_i+0x22e>
 801099e:	68e0      	ldr	r0, [r4, #12]
 80109a0:	9b03      	ldr	r3, [sp, #12]
 80109a2:	4298      	cmp	r0, r3
 80109a4:	bfb8      	it	lt
 80109a6:	4618      	movlt	r0, r3
 80109a8:	e7a6      	b.n	80108f8 <_printf_i+0x160>
 80109aa:	2301      	movs	r3, #1
 80109ac:	4632      	mov	r2, r6
 80109ae:	4649      	mov	r1, r9
 80109b0:	4640      	mov	r0, r8
 80109b2:	47d0      	blx	sl
 80109b4:	3001      	adds	r0, #1
 80109b6:	d09d      	beq.n	80108f4 <_printf_i+0x15c>
 80109b8:	3501      	adds	r5, #1
 80109ba:	68e3      	ldr	r3, [r4, #12]
 80109bc:	9903      	ldr	r1, [sp, #12]
 80109be:	1a5b      	subs	r3, r3, r1
 80109c0:	42ab      	cmp	r3, r5
 80109c2:	dcf2      	bgt.n	80109aa <_printf_i+0x212>
 80109c4:	e7eb      	b.n	801099e <_printf_i+0x206>
 80109c6:	2500      	movs	r5, #0
 80109c8:	f104 0619 	add.w	r6, r4, #25
 80109cc:	e7f5      	b.n	80109ba <_printf_i+0x222>
 80109ce:	bf00      	nop
 80109d0:	08013332 	.word	0x08013332
 80109d4:	08013343 	.word	0x08013343

080109d8 <std>:
 80109d8:	2300      	movs	r3, #0
 80109da:	b510      	push	{r4, lr}
 80109dc:	4604      	mov	r4, r0
 80109de:	6083      	str	r3, [r0, #8]
 80109e0:	8181      	strh	r1, [r0, #12]
 80109e2:	4619      	mov	r1, r3
 80109e4:	6643      	str	r3, [r0, #100]	@ 0x64
 80109e6:	81c2      	strh	r2, [r0, #14]
 80109e8:	2208      	movs	r2, #8
 80109ea:	6183      	str	r3, [r0, #24]
 80109ec:	e9c0 3300 	strd	r3, r3, [r0]
 80109f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109f4:	305c      	adds	r0, #92	@ 0x5c
 80109f6:	f000 f914 	bl	8010c22 <memset>
 80109fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010a30 <std+0x58>)
 80109fc:	6224      	str	r4, [r4, #32]
 80109fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8010a00:	4b0c      	ldr	r3, [pc, #48]	@ (8010a34 <std+0x5c>)
 8010a02:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010a04:	4b0c      	ldr	r3, [pc, #48]	@ (8010a38 <std+0x60>)
 8010a06:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010a08:	4b0c      	ldr	r3, [pc, #48]	@ (8010a3c <std+0x64>)
 8010a0a:	6323      	str	r3, [r4, #48]	@ 0x30
 8010a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8010a40 <std+0x68>)
 8010a0e:	429c      	cmp	r4, r3
 8010a10:	d006      	beq.n	8010a20 <std+0x48>
 8010a12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010a16:	4294      	cmp	r4, r2
 8010a18:	d002      	beq.n	8010a20 <std+0x48>
 8010a1a:	33d0      	adds	r3, #208	@ 0xd0
 8010a1c:	429c      	cmp	r4, r3
 8010a1e:	d105      	bne.n	8010a2c <std+0x54>
 8010a20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a28:	f000 b98e 	b.w	8010d48 <__retarget_lock_init_recursive>
 8010a2c:	bd10      	pop	{r4, pc}
 8010a2e:	bf00      	nop
 8010a30:	08010b9d 	.word	0x08010b9d
 8010a34:	08010bbf 	.word	0x08010bbf
 8010a38:	08010bf7 	.word	0x08010bf7
 8010a3c:	08010c1b 	.word	0x08010c1b
 8010a40:	20005bf4 	.word	0x20005bf4

08010a44 <stdio_exit_handler>:
 8010a44:	4a02      	ldr	r2, [pc, #8]	@ (8010a50 <stdio_exit_handler+0xc>)
 8010a46:	4903      	ldr	r1, [pc, #12]	@ (8010a54 <stdio_exit_handler+0x10>)
 8010a48:	4803      	ldr	r0, [pc, #12]	@ (8010a58 <stdio_exit_handler+0x14>)
 8010a4a:	f000 b869 	b.w	8010b20 <_fwalk_sglue>
 8010a4e:	bf00      	nop
 8010a50:	200000b4 	.word	0x200000b4
 8010a54:	080126f1 	.word	0x080126f1
 8010a58:	200000c4 	.word	0x200000c4

08010a5c <cleanup_stdio>:
 8010a5c:	6841      	ldr	r1, [r0, #4]
 8010a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8010a90 <cleanup_stdio+0x34>)
 8010a60:	4299      	cmp	r1, r3
 8010a62:	b510      	push	{r4, lr}
 8010a64:	4604      	mov	r4, r0
 8010a66:	d001      	beq.n	8010a6c <cleanup_stdio+0x10>
 8010a68:	f001 fe42 	bl	80126f0 <_fflush_r>
 8010a6c:	68a1      	ldr	r1, [r4, #8]
 8010a6e:	4b09      	ldr	r3, [pc, #36]	@ (8010a94 <cleanup_stdio+0x38>)
 8010a70:	4299      	cmp	r1, r3
 8010a72:	d002      	beq.n	8010a7a <cleanup_stdio+0x1e>
 8010a74:	4620      	mov	r0, r4
 8010a76:	f001 fe3b 	bl	80126f0 <_fflush_r>
 8010a7a:	68e1      	ldr	r1, [r4, #12]
 8010a7c:	4b06      	ldr	r3, [pc, #24]	@ (8010a98 <cleanup_stdio+0x3c>)
 8010a7e:	4299      	cmp	r1, r3
 8010a80:	d004      	beq.n	8010a8c <cleanup_stdio+0x30>
 8010a82:	4620      	mov	r0, r4
 8010a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a88:	f001 be32 	b.w	80126f0 <_fflush_r>
 8010a8c:	bd10      	pop	{r4, pc}
 8010a8e:	bf00      	nop
 8010a90:	20005bf4 	.word	0x20005bf4
 8010a94:	20005c5c 	.word	0x20005c5c
 8010a98:	20005cc4 	.word	0x20005cc4

08010a9c <global_stdio_init.part.0>:
 8010a9c:	b510      	push	{r4, lr}
 8010a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8010acc <global_stdio_init.part.0+0x30>)
 8010aa0:	2104      	movs	r1, #4
 8010aa2:	4c0b      	ldr	r4, [pc, #44]	@ (8010ad0 <global_stdio_init.part.0+0x34>)
 8010aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8010ad4 <global_stdio_init.part.0+0x38>)
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	601a      	str	r2, [r3, #0]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f7ff ff94 	bl	80109d8 <std>
 8010ab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	2109      	movs	r1, #9
 8010ab8:	f7ff ff8e 	bl	80109d8 <std>
 8010abc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010ac0:	2202      	movs	r2, #2
 8010ac2:	2112      	movs	r1, #18
 8010ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ac8:	f7ff bf86 	b.w	80109d8 <std>
 8010acc:	20005d2c 	.word	0x20005d2c
 8010ad0:	20005bf4 	.word	0x20005bf4
 8010ad4:	08010a45 	.word	0x08010a45

08010ad8 <__sfp_lock_acquire>:
 8010ad8:	4801      	ldr	r0, [pc, #4]	@ (8010ae0 <__sfp_lock_acquire+0x8>)
 8010ada:	f000 b936 	b.w	8010d4a <__retarget_lock_acquire_recursive>
 8010ade:	bf00      	nop
 8010ae0:	20005d35 	.word	0x20005d35

08010ae4 <__sfp_lock_release>:
 8010ae4:	4801      	ldr	r0, [pc, #4]	@ (8010aec <__sfp_lock_release+0x8>)
 8010ae6:	f000 b931 	b.w	8010d4c <__retarget_lock_release_recursive>
 8010aea:	bf00      	nop
 8010aec:	20005d35 	.word	0x20005d35

08010af0 <__sinit>:
 8010af0:	b510      	push	{r4, lr}
 8010af2:	4604      	mov	r4, r0
 8010af4:	f7ff fff0 	bl	8010ad8 <__sfp_lock_acquire>
 8010af8:	6a23      	ldr	r3, [r4, #32]
 8010afa:	b11b      	cbz	r3, 8010b04 <__sinit+0x14>
 8010afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b00:	f7ff bff0 	b.w	8010ae4 <__sfp_lock_release>
 8010b04:	4b04      	ldr	r3, [pc, #16]	@ (8010b18 <__sinit+0x28>)
 8010b06:	6223      	str	r3, [r4, #32]
 8010b08:	4b04      	ldr	r3, [pc, #16]	@ (8010b1c <__sinit+0x2c>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d1f5      	bne.n	8010afc <__sinit+0xc>
 8010b10:	f7ff ffc4 	bl	8010a9c <global_stdio_init.part.0>
 8010b14:	e7f2      	b.n	8010afc <__sinit+0xc>
 8010b16:	bf00      	nop
 8010b18:	08010a5d 	.word	0x08010a5d
 8010b1c:	20005d2c 	.word	0x20005d2c

08010b20 <_fwalk_sglue>:
 8010b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b24:	4607      	mov	r7, r0
 8010b26:	4688      	mov	r8, r1
 8010b28:	4614      	mov	r4, r2
 8010b2a:	2600      	movs	r6, #0
 8010b2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b30:	f1b9 0901 	subs.w	r9, r9, #1
 8010b34:	d505      	bpl.n	8010b42 <_fwalk_sglue+0x22>
 8010b36:	6824      	ldr	r4, [r4, #0]
 8010b38:	2c00      	cmp	r4, #0
 8010b3a:	d1f7      	bne.n	8010b2c <_fwalk_sglue+0xc>
 8010b3c:	4630      	mov	r0, r6
 8010b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b42:	89ab      	ldrh	r3, [r5, #12]
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d907      	bls.n	8010b58 <_fwalk_sglue+0x38>
 8010b48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	d003      	beq.n	8010b58 <_fwalk_sglue+0x38>
 8010b50:	4629      	mov	r1, r5
 8010b52:	4638      	mov	r0, r7
 8010b54:	47c0      	blx	r8
 8010b56:	4306      	orrs	r6, r0
 8010b58:	3568      	adds	r5, #104	@ 0x68
 8010b5a:	e7e9      	b.n	8010b30 <_fwalk_sglue+0x10>

08010b5c <siprintf>:
 8010b5c:	b40e      	push	{r1, r2, r3}
 8010b5e:	b500      	push	{lr}
 8010b60:	b09c      	sub	sp, #112	@ 0x70
 8010b62:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010b66:	ab1d      	add	r3, sp, #116	@ 0x74
 8010b68:	9002      	str	r0, [sp, #8]
 8010b6a:	9006      	str	r0, [sp, #24]
 8010b6c:	9107      	str	r1, [sp, #28]
 8010b6e:	9104      	str	r1, [sp, #16]
 8010b70:	4808      	ldr	r0, [pc, #32]	@ (8010b94 <siprintf+0x38>)
 8010b72:	4909      	ldr	r1, [pc, #36]	@ (8010b98 <siprintf+0x3c>)
 8010b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b78:	9105      	str	r1, [sp, #20]
 8010b7a:	a902      	add	r1, sp, #8
 8010b7c:	6800      	ldr	r0, [r0, #0]
 8010b7e:	9301      	str	r3, [sp, #4]
 8010b80:	f001 fc36 	bl	80123f0 <_svfiprintf_r>
 8010b84:	9b02      	ldr	r3, [sp, #8]
 8010b86:	2200      	movs	r2, #0
 8010b88:	701a      	strb	r2, [r3, #0]
 8010b8a:	b01c      	add	sp, #112	@ 0x70
 8010b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b90:	b003      	add	sp, #12
 8010b92:	4770      	bx	lr
 8010b94:	200000c0 	.word	0x200000c0
 8010b98:	ffff0208 	.word	0xffff0208

08010b9c <__sread>:
 8010b9c:	b510      	push	{r4, lr}
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ba4:	f000 f882 	bl	8010cac <_read_r>
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	bfab      	itete	ge
 8010bac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010bae:	89a3      	ldrhlt	r3, [r4, #12]
 8010bb0:	181b      	addge	r3, r3, r0
 8010bb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010bb6:	bfac      	ite	ge
 8010bb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010bba:	81a3      	strhlt	r3, [r4, #12]
 8010bbc:	bd10      	pop	{r4, pc}

08010bbe <__swrite>:
 8010bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc2:	461f      	mov	r7, r3
 8010bc4:	898b      	ldrh	r3, [r1, #12]
 8010bc6:	4605      	mov	r5, r0
 8010bc8:	460c      	mov	r4, r1
 8010bca:	05db      	lsls	r3, r3, #23
 8010bcc:	4616      	mov	r6, r2
 8010bce:	d505      	bpl.n	8010bdc <__swrite+0x1e>
 8010bd0:	2302      	movs	r3, #2
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bd8:	f000 f856 	bl	8010c88 <_lseek_r>
 8010bdc:	89a3      	ldrh	r3, [r4, #12]
 8010bde:	4632      	mov	r2, r6
 8010be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010be4:	4628      	mov	r0, r5
 8010be6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010bea:	81a3      	strh	r3, [r4, #12]
 8010bec:	463b      	mov	r3, r7
 8010bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf2:	f000 b86d 	b.w	8010cd0 <_write_r>

08010bf6 <__sseek>:
 8010bf6:	b510      	push	{r4, lr}
 8010bf8:	460c      	mov	r4, r1
 8010bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bfe:	f000 f843 	bl	8010c88 <_lseek_r>
 8010c02:	1c43      	adds	r3, r0, #1
 8010c04:	89a3      	ldrh	r3, [r4, #12]
 8010c06:	bf15      	itete	ne
 8010c08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010c0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010c0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010c12:	81a3      	strheq	r3, [r4, #12]
 8010c14:	bf18      	it	ne
 8010c16:	81a3      	strhne	r3, [r4, #12]
 8010c18:	bd10      	pop	{r4, pc}

08010c1a <__sclose>:
 8010c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c1e:	f000 b823 	b.w	8010c68 <_close_r>

08010c22 <memset>:
 8010c22:	4402      	add	r2, r0
 8010c24:	4603      	mov	r3, r0
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d100      	bne.n	8010c2c <memset+0xa>
 8010c2a:	4770      	bx	lr
 8010c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8010c30:	e7f9      	b.n	8010c26 <memset+0x4>

08010c32 <strstr>:
 8010c32:	780a      	ldrb	r2, [r1, #0]
 8010c34:	b570      	push	{r4, r5, r6, lr}
 8010c36:	b96a      	cbnz	r2, 8010c54 <strstr+0x22>
 8010c38:	bd70      	pop	{r4, r5, r6, pc}
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d109      	bne.n	8010c52 <strstr+0x20>
 8010c3e:	460c      	mov	r4, r1
 8010c40:	4605      	mov	r5, r0
 8010c42:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d0f6      	beq.n	8010c38 <strstr+0x6>
 8010c4a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010c4e:	429e      	cmp	r6, r3
 8010c50:	d0f7      	beq.n	8010c42 <strstr+0x10>
 8010c52:	3001      	adds	r0, #1
 8010c54:	7803      	ldrb	r3, [r0, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d1ef      	bne.n	8010c3a <strstr+0x8>
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	e7ec      	b.n	8010c38 <strstr+0x6>
	...

08010c60 <_localeconv_r>:
 8010c60:	4800      	ldr	r0, [pc, #0]	@ (8010c64 <_localeconv_r+0x4>)
 8010c62:	4770      	bx	lr
 8010c64:	20000200 	.word	0x20000200

08010c68 <_close_r>:
 8010c68:	b538      	push	{r3, r4, r5, lr}
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	4d05      	ldr	r5, [pc, #20]	@ (8010c84 <_close_r+0x1c>)
 8010c6e:	4604      	mov	r4, r0
 8010c70:	4608      	mov	r0, r1
 8010c72:	602b      	str	r3, [r5, #0]
 8010c74:	f7f4 fa5e 	bl	8005134 <_close>
 8010c78:	1c43      	adds	r3, r0, #1
 8010c7a:	d102      	bne.n	8010c82 <_close_r+0x1a>
 8010c7c:	682b      	ldr	r3, [r5, #0]
 8010c7e:	b103      	cbz	r3, 8010c82 <_close_r+0x1a>
 8010c80:	6023      	str	r3, [r4, #0]
 8010c82:	bd38      	pop	{r3, r4, r5, pc}
 8010c84:	20005d30 	.word	0x20005d30

08010c88 <_lseek_r>:
 8010c88:	b538      	push	{r3, r4, r5, lr}
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	4d06      	ldr	r5, [pc, #24]	@ (8010ca8 <_lseek_r+0x20>)
 8010c8e:	4608      	mov	r0, r1
 8010c90:	4611      	mov	r1, r2
 8010c92:	2200      	movs	r2, #0
 8010c94:	602a      	str	r2, [r5, #0]
 8010c96:	461a      	mov	r2, r3
 8010c98:	f7f4 fa73 	bl	8005182 <_lseek>
 8010c9c:	1c43      	adds	r3, r0, #1
 8010c9e:	d102      	bne.n	8010ca6 <_lseek_r+0x1e>
 8010ca0:	682b      	ldr	r3, [r5, #0]
 8010ca2:	b103      	cbz	r3, 8010ca6 <_lseek_r+0x1e>
 8010ca4:	6023      	str	r3, [r4, #0]
 8010ca6:	bd38      	pop	{r3, r4, r5, pc}
 8010ca8:	20005d30 	.word	0x20005d30

08010cac <_read_r>:
 8010cac:	b538      	push	{r3, r4, r5, lr}
 8010cae:	4604      	mov	r4, r0
 8010cb0:	4d06      	ldr	r5, [pc, #24]	@ (8010ccc <_read_r+0x20>)
 8010cb2:	4608      	mov	r0, r1
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	602a      	str	r2, [r5, #0]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	f7f4 fa01 	bl	80050c2 <_read>
 8010cc0:	1c43      	adds	r3, r0, #1
 8010cc2:	d102      	bne.n	8010cca <_read_r+0x1e>
 8010cc4:	682b      	ldr	r3, [r5, #0]
 8010cc6:	b103      	cbz	r3, 8010cca <_read_r+0x1e>
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	bd38      	pop	{r3, r4, r5, pc}
 8010ccc:	20005d30 	.word	0x20005d30

08010cd0 <_write_r>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	4d06      	ldr	r5, [pc, #24]	@ (8010cf0 <_write_r+0x20>)
 8010cd6:	4608      	mov	r0, r1
 8010cd8:	4611      	mov	r1, r2
 8010cda:	2200      	movs	r2, #0
 8010cdc:	602a      	str	r2, [r5, #0]
 8010cde:	461a      	mov	r2, r3
 8010ce0:	f7f4 fa0c 	bl	80050fc <_write>
 8010ce4:	1c43      	adds	r3, r0, #1
 8010ce6:	d102      	bne.n	8010cee <_write_r+0x1e>
 8010ce8:	682b      	ldr	r3, [r5, #0]
 8010cea:	b103      	cbz	r3, 8010cee <_write_r+0x1e>
 8010cec:	6023      	str	r3, [r4, #0]
 8010cee:	bd38      	pop	{r3, r4, r5, pc}
 8010cf0:	20005d30 	.word	0x20005d30

08010cf4 <__errno>:
 8010cf4:	4b01      	ldr	r3, [pc, #4]	@ (8010cfc <__errno+0x8>)
 8010cf6:	6818      	ldr	r0, [r3, #0]
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	200000c0 	.word	0x200000c0

08010d00 <__libc_init_array>:
 8010d00:	b570      	push	{r4, r5, r6, lr}
 8010d02:	4d0d      	ldr	r5, [pc, #52]	@ (8010d38 <__libc_init_array+0x38>)
 8010d04:	2600      	movs	r6, #0
 8010d06:	4c0d      	ldr	r4, [pc, #52]	@ (8010d3c <__libc_init_array+0x3c>)
 8010d08:	1b64      	subs	r4, r4, r5
 8010d0a:	10a4      	asrs	r4, r4, #2
 8010d0c:	42a6      	cmp	r6, r4
 8010d0e:	d109      	bne.n	8010d24 <__libc_init_array+0x24>
 8010d10:	4d0b      	ldr	r5, [pc, #44]	@ (8010d40 <__libc_init_array+0x40>)
 8010d12:	2600      	movs	r6, #0
 8010d14:	4c0b      	ldr	r4, [pc, #44]	@ (8010d44 <__libc_init_array+0x44>)
 8010d16:	f002 f985 	bl	8013024 <_init>
 8010d1a:	1b64      	subs	r4, r4, r5
 8010d1c:	10a4      	asrs	r4, r4, #2
 8010d1e:	42a6      	cmp	r6, r4
 8010d20:	d105      	bne.n	8010d2e <__libc_init_array+0x2e>
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d28:	3601      	adds	r6, #1
 8010d2a:	4798      	blx	r3
 8010d2c:	e7ee      	b.n	8010d0c <__libc_init_array+0xc>
 8010d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d32:	3601      	adds	r6, #1
 8010d34:	4798      	blx	r3
 8010d36:	e7f2      	b.n	8010d1e <__libc_init_array+0x1e>
 8010d38:	08013698 	.word	0x08013698
 8010d3c:	08013698 	.word	0x08013698
 8010d40:	08013698 	.word	0x08013698
 8010d44:	0801369c 	.word	0x0801369c

08010d48 <__retarget_lock_init_recursive>:
 8010d48:	4770      	bx	lr

08010d4a <__retarget_lock_acquire_recursive>:
 8010d4a:	4770      	bx	lr

08010d4c <__retarget_lock_release_recursive>:
 8010d4c:	4770      	bx	lr

08010d4e <memchr>:
 8010d4e:	b2c9      	uxtb	r1, r1
 8010d50:	4603      	mov	r3, r0
 8010d52:	4402      	add	r2, r0
 8010d54:	b510      	push	{r4, lr}
 8010d56:	4293      	cmp	r3, r2
 8010d58:	4618      	mov	r0, r3
 8010d5a:	d101      	bne.n	8010d60 <memchr+0x12>
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	e003      	b.n	8010d68 <memchr+0x1a>
 8010d60:	7804      	ldrb	r4, [r0, #0]
 8010d62:	3301      	adds	r3, #1
 8010d64:	428c      	cmp	r4, r1
 8010d66:	d1f6      	bne.n	8010d56 <memchr+0x8>
 8010d68:	bd10      	pop	{r4, pc}

08010d6a <memcpy>:
 8010d6a:	440a      	add	r2, r1
 8010d6c:	1e43      	subs	r3, r0, #1
 8010d6e:	4291      	cmp	r1, r2
 8010d70:	d100      	bne.n	8010d74 <memcpy+0xa>
 8010d72:	4770      	bx	lr
 8010d74:	b510      	push	{r4, lr}
 8010d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d7a:	4291      	cmp	r1, r2
 8010d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d80:	d1f9      	bne.n	8010d76 <memcpy+0xc>
 8010d82:	bd10      	pop	{r4, pc}

08010d84 <quorem>:
 8010d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d88:	6903      	ldr	r3, [r0, #16]
 8010d8a:	4607      	mov	r7, r0
 8010d8c:	690c      	ldr	r4, [r1, #16]
 8010d8e:	42a3      	cmp	r3, r4
 8010d90:	f2c0 8083 	blt.w	8010e9a <quorem+0x116>
 8010d94:	3c01      	subs	r4, #1
 8010d96:	f100 0514 	add.w	r5, r0, #20
 8010d9a:	f101 0814 	add.w	r8, r1, #20
 8010d9e:	00a3      	lsls	r3, r4, #2
 8010da0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010da4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010dae:	9301      	str	r3, [sp, #4]
 8010db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010db4:	3301      	adds	r3, #1
 8010db6:	429a      	cmp	r2, r3
 8010db8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010dbc:	d331      	bcc.n	8010e22 <quorem+0x9e>
 8010dbe:	f04f 0a00 	mov.w	sl, #0
 8010dc2:	46c4      	mov	ip, r8
 8010dc4:	46ae      	mov	lr, r5
 8010dc6:	46d3      	mov	fp, sl
 8010dc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010dcc:	b298      	uxth	r0, r3
 8010dce:	45e1      	cmp	r9, ip
 8010dd0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8010dd4:	fb06 a000 	mla	r0, r6, r0, sl
 8010dd8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8010ddc:	b280      	uxth	r0, r0
 8010dde:	fb06 2303 	mla	r3, r6, r3, r2
 8010de2:	f8de 2000 	ldr.w	r2, [lr]
 8010de6:	b292      	uxth	r2, r2
 8010de8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010dec:	eba2 0200 	sub.w	r2, r2, r0
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	f8de 0000 	ldr.w	r0, [lr]
 8010df6:	445a      	add	r2, fp
 8010df8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010dfc:	b292      	uxth	r2, r2
 8010dfe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010e02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010e06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010e0a:	f84e 2b04 	str.w	r2, [lr], #4
 8010e0e:	d2db      	bcs.n	8010dc8 <quorem+0x44>
 8010e10:	9b00      	ldr	r3, [sp, #0]
 8010e12:	58eb      	ldr	r3, [r5, r3]
 8010e14:	b92b      	cbnz	r3, 8010e22 <quorem+0x9e>
 8010e16:	9b01      	ldr	r3, [sp, #4]
 8010e18:	3b04      	subs	r3, #4
 8010e1a:	429d      	cmp	r5, r3
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	d330      	bcc.n	8010e82 <quorem+0xfe>
 8010e20:	613c      	str	r4, [r7, #16]
 8010e22:	4638      	mov	r0, r7
 8010e24:	f001 f97c 	bl	8012120 <__mcmp>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	db26      	blt.n	8010e7a <quorem+0xf6>
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	2000      	movs	r0, #0
 8010e30:	f858 2b04 	ldr.w	r2, [r8], #4
 8010e34:	f8d1 c000 	ldr.w	ip, [r1]
 8010e38:	fa1f fe82 	uxth.w	lr, r2
 8010e3c:	45c1      	cmp	r9, r8
 8010e3e:	fa1f f38c 	uxth.w	r3, ip
 8010e42:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8010e46:	eba3 030e 	sub.w	r3, r3, lr
 8010e4a:	4403      	add	r3, r0
 8010e4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010e5e:	f841 3b04 	str.w	r3, [r1], #4
 8010e62:	d2e5      	bcs.n	8010e30 <quorem+0xac>
 8010e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e6c:	b922      	cbnz	r2, 8010e78 <quorem+0xf4>
 8010e6e:	3b04      	subs	r3, #4
 8010e70:	429d      	cmp	r5, r3
 8010e72:	461a      	mov	r2, r3
 8010e74:	d30b      	bcc.n	8010e8e <quorem+0x10a>
 8010e76:	613c      	str	r4, [r7, #16]
 8010e78:	3601      	adds	r6, #1
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	b003      	add	sp, #12
 8010e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e82:	6812      	ldr	r2, [r2, #0]
 8010e84:	3b04      	subs	r3, #4
 8010e86:	2a00      	cmp	r2, #0
 8010e88:	d1ca      	bne.n	8010e20 <quorem+0x9c>
 8010e8a:	3c01      	subs	r4, #1
 8010e8c:	e7c5      	b.n	8010e1a <quorem+0x96>
 8010e8e:	6812      	ldr	r2, [r2, #0]
 8010e90:	3b04      	subs	r3, #4
 8010e92:	2a00      	cmp	r2, #0
 8010e94:	d1ef      	bne.n	8010e76 <quorem+0xf2>
 8010e96:	3c01      	subs	r4, #1
 8010e98:	e7ea      	b.n	8010e70 <quorem+0xec>
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	e7ee      	b.n	8010e7c <quorem+0xf8>
	...

08010ea0 <_dtoa_r>:
 8010ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea4:	69c7      	ldr	r7, [r0, #28]
 8010ea6:	b099      	sub	sp, #100	@ 0x64
 8010ea8:	4683      	mov	fp, r0
 8010eaa:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010eac:	9109      	str	r1, [sp, #36]	@ 0x24
 8010eae:	920e      	str	r2, [sp, #56]	@ 0x38
 8010eb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010eb2:	ec55 4b10 	vmov	r4, r5, d0
 8010eb6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010eba:	b97f      	cbnz	r7, 8010edc <_dtoa_r+0x3c>
 8010ebc:	2010      	movs	r0, #16
 8010ebe:	f000 fdfd 	bl	8011abc <malloc>
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	f8cb 001c 	str.w	r0, [fp, #28]
 8010ec8:	b920      	cbnz	r0, 8010ed4 <_dtoa_r+0x34>
 8010eca:	4ba7      	ldr	r3, [pc, #668]	@ (8011168 <_dtoa_r+0x2c8>)
 8010ecc:	21ef      	movs	r1, #239	@ 0xef
 8010ece:	48a7      	ldr	r0, [pc, #668]	@ (801116c <_dtoa_r+0x2cc>)
 8010ed0:	f001 fc60 	bl	8012794 <__assert_func>
 8010ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010ed8:	6007      	str	r7, [r0, #0]
 8010eda:	60c7      	str	r7, [r0, #12]
 8010edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ee0:	6819      	ldr	r1, [r3, #0]
 8010ee2:	b159      	cbz	r1, 8010efc <_dtoa_r+0x5c>
 8010ee4:	685a      	ldr	r2, [r3, #4]
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	4658      	mov	r0, fp
 8010eea:	4093      	lsls	r3, r2
 8010eec:	604a      	str	r2, [r1, #4]
 8010eee:	608b      	str	r3, [r1, #8]
 8010ef0:	f000 feda 	bl	8011ca8 <_Bfree>
 8010ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	601a      	str	r2, [r3, #0]
 8010efc:	1e2b      	subs	r3, r5, #0
 8010efe:	bfb7      	itett	lt
 8010f00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010f04:	2300      	movge	r3, #0
 8010f06:	2201      	movlt	r2, #1
 8010f08:	9303      	strlt	r3, [sp, #12]
 8010f0a:	bfa8      	it	ge
 8010f0c:	6033      	strge	r3, [r6, #0]
 8010f0e:	9f03      	ldr	r7, [sp, #12]
 8010f10:	4b97      	ldr	r3, [pc, #604]	@ (8011170 <_dtoa_r+0x2d0>)
 8010f12:	bfb8      	it	lt
 8010f14:	6032      	strlt	r2, [r6, #0]
 8010f16:	43bb      	bics	r3, r7
 8010f18:	d112      	bne.n	8010f40 <_dtoa_r+0xa0>
 8010f1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010f1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010f20:	6013      	str	r3, [r2, #0]
 8010f22:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010f26:	4323      	orrs	r3, r4
 8010f28:	f000 854c 	beq.w	80119c4 <_dtoa_r+0xb24>
 8010f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f2e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011184 <_dtoa_r+0x2e4>
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f000 854e 	beq.w	80119d4 <_dtoa_r+0xb34>
 8010f38:	f10a 0303 	add.w	r3, sl, #3
 8010f3c:	f000 bd48 	b.w	80119d0 <_dtoa_r+0xb30>
 8010f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f44:	2200      	movs	r2, #0
 8010f46:	2300      	movs	r3, #0
 8010f48:	ec51 0b17 	vmov	r0, r1, d7
 8010f4c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010f50:	f7ef fdca 	bl	8000ae8 <__aeabi_dcmpeq>
 8010f54:	4680      	mov	r8, r0
 8010f56:	b158      	cbz	r0, 8010f70 <_dtoa_r+0xd0>
 8010f58:	2301      	movs	r3, #1
 8010f5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010f5c:	6013      	str	r3, [r2, #0]
 8010f5e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f60:	b113      	cbz	r3, 8010f68 <_dtoa_r+0xc8>
 8010f62:	4b84      	ldr	r3, [pc, #528]	@ (8011174 <_dtoa_r+0x2d4>)
 8010f64:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010f66:	6013      	str	r3, [r2, #0]
 8010f68:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8011188 <_dtoa_r+0x2e8>
 8010f6c:	f000 bd32 	b.w	80119d4 <_dtoa_r+0xb34>
 8010f70:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010f74:	aa16      	add	r2, sp, #88	@ 0x58
 8010f76:	a917      	add	r1, sp, #92	@ 0x5c
 8010f78:	4658      	mov	r0, fp
 8010f7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010f7e:	f001 f983 	bl	8012288 <__d2b>
 8010f82:	4681      	mov	r9, r0
 8010f84:	2e00      	cmp	r6, #0
 8010f86:	d075      	beq.n	8011074 <_dtoa_r+0x1d4>
 8010f88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f8a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010f8e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f96:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f9e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	4b74      	ldr	r3, [pc, #464]	@ (8011178 <_dtoa_r+0x2d8>)
 8010fa8:	f7ef f97e 	bl	80002a8 <__aeabi_dsub>
 8010fac:	a368      	add	r3, pc, #416	@ (adr r3, 8011150 <_dtoa_r+0x2b0>)
 8010fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb2:	f7ef fb31 	bl	8000618 <__aeabi_dmul>
 8010fb6:	a368      	add	r3, pc, #416	@ (adr r3, 8011158 <_dtoa_r+0x2b8>)
 8010fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbc:	f7ef f976 	bl	80002ac <__adddf3>
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	460d      	mov	r5, r1
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	f7ef fabd 	bl	8000544 <__aeabi_i2d>
 8010fca:	a365      	add	r3, pc, #404	@ (adr r3, 8011160 <_dtoa_r+0x2c0>)
 8010fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd0:	f7ef fb22 	bl	8000618 <__aeabi_dmul>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	4620      	mov	r0, r4
 8010fda:	4629      	mov	r1, r5
 8010fdc:	f7ef f966 	bl	80002ac <__adddf3>
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	460d      	mov	r5, r1
 8010fe4:	f7ef fdc8 	bl	8000b78 <__aeabi_d2iz>
 8010fe8:	2200      	movs	r2, #0
 8010fea:	4607      	mov	r7, r0
 8010fec:	2300      	movs	r3, #0
 8010fee:	4620      	mov	r0, r4
 8010ff0:	4629      	mov	r1, r5
 8010ff2:	f7ef fd83 	bl	8000afc <__aeabi_dcmplt>
 8010ff6:	b140      	cbz	r0, 801100a <_dtoa_r+0x16a>
 8010ff8:	4638      	mov	r0, r7
 8010ffa:	f7ef faa3 	bl	8000544 <__aeabi_i2d>
 8010ffe:	4622      	mov	r2, r4
 8011000:	462b      	mov	r3, r5
 8011002:	f7ef fd71 	bl	8000ae8 <__aeabi_dcmpeq>
 8011006:	b900      	cbnz	r0, 801100a <_dtoa_r+0x16a>
 8011008:	3f01      	subs	r7, #1
 801100a:	2f16      	cmp	r7, #22
 801100c:	d851      	bhi.n	80110b2 <_dtoa_r+0x212>
 801100e:	4b5b      	ldr	r3, [pc, #364]	@ (801117c <_dtoa_r+0x2dc>)
 8011010:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101c:	f7ef fd6e 	bl	8000afc <__aeabi_dcmplt>
 8011020:	2800      	cmp	r0, #0
 8011022:	d048      	beq.n	80110b6 <_dtoa_r+0x216>
 8011024:	3f01      	subs	r7, #1
 8011026:	2300      	movs	r3, #0
 8011028:	9312      	str	r3, [sp, #72]	@ 0x48
 801102a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801102c:	1b9b      	subs	r3, r3, r6
 801102e:	1e5a      	subs	r2, r3, #1
 8011030:	bf46      	itte	mi
 8011032:	f1c3 0801 	rsbmi	r8, r3, #1
 8011036:	2300      	movmi	r3, #0
 8011038:	f04f 0800 	movpl.w	r8, #0
 801103c:	9208      	str	r2, [sp, #32]
 801103e:	bf48      	it	mi
 8011040:	9308      	strmi	r3, [sp, #32]
 8011042:	2f00      	cmp	r7, #0
 8011044:	db39      	blt.n	80110ba <_dtoa_r+0x21a>
 8011046:	9b08      	ldr	r3, [sp, #32]
 8011048:	970f      	str	r7, [sp, #60]	@ 0x3c
 801104a:	443b      	add	r3, r7
 801104c:	9308      	str	r3, [sp, #32]
 801104e:	2300      	movs	r3, #0
 8011050:	930a      	str	r3, [sp, #40]	@ 0x28
 8011052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011054:	2b09      	cmp	r3, #9
 8011056:	d864      	bhi.n	8011122 <_dtoa_r+0x282>
 8011058:	2b05      	cmp	r3, #5
 801105a:	bfc5      	ittet	gt
 801105c:	3b04      	subgt	r3, #4
 801105e:	2400      	movgt	r4, #0
 8011060:	2401      	movle	r4, #1
 8011062:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011066:	3b02      	subs	r3, #2
 8011068:	2b03      	cmp	r3, #3
 801106a:	d865      	bhi.n	8011138 <_dtoa_r+0x298>
 801106c:	e8df f003 	tbb	[pc, r3]
 8011070:	5737392c 	.word	0x5737392c
 8011074:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011078:	441e      	add	r6, r3
 801107a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801107e:	2b20      	cmp	r3, #32
 8011080:	bfc9      	itett	gt
 8011082:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011086:	f1c3 0320 	rsble	r3, r3, #32
 801108a:	409f      	lslgt	r7, r3
 801108c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011090:	bfd8      	it	le
 8011092:	fa04 f003 	lslle.w	r0, r4, r3
 8011096:	f106 36ff 	add.w	r6, r6, #4294967295
 801109a:	bfc4      	itt	gt
 801109c:	fa24 f303 	lsrgt.w	r3, r4, r3
 80110a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80110a4:	f7ef fa3e 	bl	8000524 <__aeabi_ui2d>
 80110a8:	2201      	movs	r2, #1
 80110aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80110ae:	9214      	str	r2, [sp, #80]	@ 0x50
 80110b0:	e777      	b.n	8010fa2 <_dtoa_r+0x102>
 80110b2:	2301      	movs	r3, #1
 80110b4:	e7b8      	b.n	8011028 <_dtoa_r+0x188>
 80110b6:	9012      	str	r0, [sp, #72]	@ 0x48
 80110b8:	e7b7      	b.n	801102a <_dtoa_r+0x18a>
 80110ba:	427b      	negs	r3, r7
 80110bc:	eba8 0807 	sub.w	r8, r8, r7
 80110c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80110c2:	2300      	movs	r3, #0
 80110c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80110c6:	e7c4      	b.n	8011052 <_dtoa_r+0x1b2>
 80110c8:	2300      	movs	r3, #0
 80110ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	dc35      	bgt.n	801113e <_dtoa_r+0x29e>
 80110d2:	2301      	movs	r3, #1
 80110d4:	461a      	mov	r2, r3
 80110d6:	9300      	str	r3, [sp, #0]
 80110d8:	9307      	str	r3, [sp, #28]
 80110da:	920e      	str	r2, [sp, #56]	@ 0x38
 80110dc:	e00b      	b.n	80110f6 <_dtoa_r+0x256>
 80110de:	2301      	movs	r3, #1
 80110e0:	e7f3      	b.n	80110ca <_dtoa_r+0x22a>
 80110e2:	2300      	movs	r3, #0
 80110e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110e8:	18fb      	adds	r3, r7, r3
 80110ea:	9300      	str	r3, [sp, #0]
 80110ec:	3301      	adds	r3, #1
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	9307      	str	r3, [sp, #28]
 80110f2:	bfb8      	it	lt
 80110f4:	2301      	movlt	r3, #1
 80110f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80110fa:	2100      	movs	r1, #0
 80110fc:	2204      	movs	r2, #4
 80110fe:	f102 0514 	add.w	r5, r2, #20
 8011102:	429d      	cmp	r5, r3
 8011104:	d91f      	bls.n	8011146 <_dtoa_r+0x2a6>
 8011106:	6041      	str	r1, [r0, #4]
 8011108:	4658      	mov	r0, fp
 801110a:	f000 fd8d 	bl	8011c28 <_Balloc>
 801110e:	4682      	mov	sl, r0
 8011110:	2800      	cmp	r0, #0
 8011112:	d13b      	bne.n	801118c <_dtoa_r+0x2ec>
 8011114:	4b1a      	ldr	r3, [pc, #104]	@ (8011180 <_dtoa_r+0x2e0>)
 8011116:	4602      	mov	r2, r0
 8011118:	f240 11af 	movw	r1, #431	@ 0x1af
 801111c:	e6d7      	b.n	8010ece <_dtoa_r+0x2e>
 801111e:	2301      	movs	r3, #1
 8011120:	e7e0      	b.n	80110e4 <_dtoa_r+0x244>
 8011122:	2401      	movs	r4, #1
 8011124:	2300      	movs	r3, #0
 8011126:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011128:	9309      	str	r3, [sp, #36]	@ 0x24
 801112a:	f04f 33ff 	mov.w	r3, #4294967295
 801112e:	2200      	movs	r2, #0
 8011130:	9300      	str	r3, [sp, #0]
 8011132:	9307      	str	r3, [sp, #28]
 8011134:	2312      	movs	r3, #18
 8011136:	e7d0      	b.n	80110da <_dtoa_r+0x23a>
 8011138:	2301      	movs	r3, #1
 801113a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801113c:	e7f5      	b.n	801112a <_dtoa_r+0x28a>
 801113e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011140:	9300      	str	r3, [sp, #0]
 8011142:	9307      	str	r3, [sp, #28]
 8011144:	e7d7      	b.n	80110f6 <_dtoa_r+0x256>
 8011146:	3101      	adds	r1, #1
 8011148:	0052      	lsls	r2, r2, #1
 801114a:	e7d8      	b.n	80110fe <_dtoa_r+0x25e>
 801114c:	f3af 8000 	nop.w
 8011150:	636f4361 	.word	0x636f4361
 8011154:	3fd287a7 	.word	0x3fd287a7
 8011158:	8b60c8b3 	.word	0x8b60c8b3
 801115c:	3fc68a28 	.word	0x3fc68a28
 8011160:	509f79fb 	.word	0x509f79fb
 8011164:	3fd34413 	.word	0x3fd34413
 8011168:	08013361 	.word	0x08013361
 801116c:	08013378 	.word	0x08013378
 8011170:	7ff00000 	.word	0x7ff00000
 8011174:	08013331 	.word	0x08013331
 8011178:	3ff80000 	.word	0x3ff80000
 801117c:	08013470 	.word	0x08013470
 8011180:	080133d0 	.word	0x080133d0
 8011184:	0801335d 	.word	0x0801335d
 8011188:	08013330 	.word	0x08013330
 801118c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011190:	6018      	str	r0, [r3, #0]
 8011192:	9b07      	ldr	r3, [sp, #28]
 8011194:	2b0e      	cmp	r3, #14
 8011196:	f200 80a4 	bhi.w	80112e2 <_dtoa_r+0x442>
 801119a:	2c00      	cmp	r4, #0
 801119c:	f000 80a1 	beq.w	80112e2 <_dtoa_r+0x442>
 80111a0:	2f00      	cmp	r7, #0
 80111a2:	dd33      	ble.n	801120c <_dtoa_r+0x36c>
 80111a4:	f007 020f 	and.w	r2, r7, #15
 80111a8:	4bac      	ldr	r3, [pc, #688]	@ (801145c <_dtoa_r+0x5bc>)
 80111aa:	05f8      	lsls	r0, r7, #23
 80111ac:	ea4f 1427 	mov.w	r4, r7, asr #4
 80111b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111b4:	ed93 7b00 	vldr	d7, [r3]
 80111b8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80111bc:	d516      	bpl.n	80111ec <_dtoa_r+0x34c>
 80111be:	4ba8      	ldr	r3, [pc, #672]	@ (8011460 <_dtoa_r+0x5c0>)
 80111c0:	f004 040f 	and.w	r4, r4, #15
 80111c4:	2603      	movs	r6, #3
 80111c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80111ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111ce:	f7ef fb4d 	bl	800086c <__aeabi_ddiv>
 80111d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111d6:	4da2      	ldr	r5, [pc, #648]	@ (8011460 <_dtoa_r+0x5c0>)
 80111d8:	b954      	cbnz	r4, 80111f0 <_dtoa_r+0x350>
 80111da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111e2:	f7ef fb43 	bl	800086c <__aeabi_ddiv>
 80111e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111ea:	e028      	b.n	801123e <_dtoa_r+0x39e>
 80111ec:	2602      	movs	r6, #2
 80111ee:	e7f2      	b.n	80111d6 <_dtoa_r+0x336>
 80111f0:	07e1      	lsls	r1, r4, #31
 80111f2:	d508      	bpl.n	8011206 <_dtoa_r+0x366>
 80111f4:	3601      	adds	r6, #1
 80111f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111fe:	f7ef fa0b 	bl	8000618 <__aeabi_dmul>
 8011202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011206:	1064      	asrs	r4, r4, #1
 8011208:	3508      	adds	r5, #8
 801120a:	e7e5      	b.n	80111d8 <_dtoa_r+0x338>
 801120c:	f000 80d2 	beq.w	80113b4 <_dtoa_r+0x514>
 8011210:	427c      	negs	r4, r7
 8011212:	4b92      	ldr	r3, [pc, #584]	@ (801145c <_dtoa_r+0x5bc>)
 8011214:	4d92      	ldr	r5, [pc, #584]	@ (8011460 <_dtoa_r+0x5c0>)
 8011216:	2602      	movs	r6, #2
 8011218:	f004 020f 	and.w	r2, r4, #15
 801121c:	1124      	asrs	r4, r4, #4
 801121e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	f7ef f9f5 	bl	8000618 <__aeabi_dmul>
 801122e:	2300      	movs	r3, #0
 8011230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011234:	2c00      	cmp	r4, #0
 8011236:	f040 80b2 	bne.w	801139e <_dtoa_r+0x4fe>
 801123a:	2b00      	cmp	r3, #0
 801123c:	d1d3      	bne.n	80111e6 <_dtoa_r+0x346>
 801123e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011240:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011244:	2b00      	cmp	r3, #0
 8011246:	f000 80b7 	beq.w	80113b8 <_dtoa_r+0x518>
 801124a:	2200      	movs	r2, #0
 801124c:	4b85      	ldr	r3, [pc, #532]	@ (8011464 <_dtoa_r+0x5c4>)
 801124e:	4620      	mov	r0, r4
 8011250:	4629      	mov	r1, r5
 8011252:	f7ef fc53 	bl	8000afc <__aeabi_dcmplt>
 8011256:	2800      	cmp	r0, #0
 8011258:	f000 80ae 	beq.w	80113b8 <_dtoa_r+0x518>
 801125c:	9b07      	ldr	r3, [sp, #28]
 801125e:	2b00      	cmp	r3, #0
 8011260:	f000 80aa 	beq.w	80113b8 <_dtoa_r+0x518>
 8011264:	9b00      	ldr	r3, [sp, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	dd37      	ble.n	80112da <_dtoa_r+0x43a>
 801126a:	1e7b      	subs	r3, r7, #1
 801126c:	4620      	mov	r0, r4
 801126e:	2200      	movs	r2, #0
 8011270:	4629      	mov	r1, r5
 8011272:	9304      	str	r3, [sp, #16]
 8011274:	3601      	adds	r6, #1
 8011276:	4b7c      	ldr	r3, [pc, #496]	@ (8011468 <_dtoa_r+0x5c8>)
 8011278:	f7ef f9ce 	bl	8000618 <__aeabi_dmul>
 801127c:	9c00      	ldr	r4, [sp, #0]
 801127e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011282:	4630      	mov	r0, r6
 8011284:	f7ef f95e 	bl	8000544 <__aeabi_i2d>
 8011288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801128c:	f7ef f9c4 	bl	8000618 <__aeabi_dmul>
 8011290:	2200      	movs	r2, #0
 8011292:	4b76      	ldr	r3, [pc, #472]	@ (801146c <_dtoa_r+0x5cc>)
 8011294:	f7ef f80a 	bl	80002ac <__adddf3>
 8011298:	4605      	mov	r5, r0
 801129a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801129e:	2c00      	cmp	r4, #0
 80112a0:	f040 808d 	bne.w	80113be <_dtoa_r+0x51e>
 80112a4:	2200      	movs	r2, #0
 80112a6:	4b72      	ldr	r3, [pc, #456]	@ (8011470 <_dtoa_r+0x5d0>)
 80112a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ac:	f7ee fffc 	bl	80002a8 <__aeabi_dsub>
 80112b0:	4602      	mov	r2, r0
 80112b2:	460b      	mov	r3, r1
 80112b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112b8:	462a      	mov	r2, r5
 80112ba:	4633      	mov	r3, r6
 80112bc:	f7ef fc3c 	bl	8000b38 <__aeabi_dcmpgt>
 80112c0:	2800      	cmp	r0, #0
 80112c2:	f040 828b 	bne.w	80117dc <_dtoa_r+0x93c>
 80112c6:	462a      	mov	r2, r5
 80112c8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80112cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112d0:	f7ef fc14 	bl	8000afc <__aeabi_dcmplt>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	f040 8128 	bne.w	801152a <_dtoa_r+0x68a>
 80112da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80112de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80112e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f2c0 815a 	blt.w	801159e <_dtoa_r+0x6fe>
 80112ea:	2f0e      	cmp	r7, #14
 80112ec:	f300 8157 	bgt.w	801159e <_dtoa_r+0x6fe>
 80112f0:	4b5a      	ldr	r3, [pc, #360]	@ (801145c <_dtoa_r+0x5bc>)
 80112f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80112f6:	ed93 7b00 	vldr	d7, [r3]
 80112fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	ed8d 7b00 	vstr	d7, [sp]
 8011302:	da03      	bge.n	801130c <_dtoa_r+0x46c>
 8011304:	9b07      	ldr	r3, [sp, #28]
 8011306:	2b00      	cmp	r3, #0
 8011308:	f340 8101 	ble.w	801150e <_dtoa_r+0x66e>
 801130c:	4656      	mov	r6, sl
 801130e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011316:	4620      	mov	r0, r4
 8011318:	4629      	mov	r1, r5
 801131a:	f7ef faa7 	bl	800086c <__aeabi_ddiv>
 801131e:	f7ef fc2b 	bl	8000b78 <__aeabi_d2iz>
 8011322:	4680      	mov	r8, r0
 8011324:	f7ef f90e 	bl	8000544 <__aeabi_i2d>
 8011328:	e9dd 2300 	ldrd	r2, r3, [sp]
 801132c:	f7ef f974 	bl	8000618 <__aeabi_dmul>
 8011330:	4602      	mov	r2, r0
 8011332:	4620      	mov	r0, r4
 8011334:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011338:	460b      	mov	r3, r1
 801133a:	4629      	mov	r1, r5
 801133c:	f7ee ffb4 	bl	80002a8 <__aeabi_dsub>
 8011340:	9d07      	ldr	r5, [sp, #28]
 8011342:	f806 4b01 	strb.w	r4, [r6], #1
 8011346:	eba6 040a 	sub.w	r4, r6, sl
 801134a:	4602      	mov	r2, r0
 801134c:	460b      	mov	r3, r1
 801134e:	42a5      	cmp	r5, r4
 8011350:	f040 8117 	bne.w	8011582 <_dtoa_r+0x6e2>
 8011354:	f7ee ffaa 	bl	80002ac <__adddf3>
 8011358:	4604      	mov	r4, r0
 801135a:	460d      	mov	r5, r1
 801135c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011360:	f7ef fbea 	bl	8000b38 <__aeabi_dcmpgt>
 8011364:	2800      	cmp	r0, #0
 8011366:	f040 80f9 	bne.w	801155c <_dtoa_r+0x6bc>
 801136a:	4620      	mov	r0, r4
 801136c:	4629      	mov	r1, r5
 801136e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011372:	f7ef fbb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8011376:	b118      	cbz	r0, 8011380 <_dtoa_r+0x4e0>
 8011378:	f018 0f01 	tst.w	r8, #1
 801137c:	f040 80ee 	bne.w	801155c <_dtoa_r+0x6bc>
 8011380:	4649      	mov	r1, r9
 8011382:	4658      	mov	r0, fp
 8011384:	f000 fc90 	bl	8011ca8 <_Bfree>
 8011388:	2300      	movs	r3, #0
 801138a:	3701      	adds	r7, #1
 801138c:	7033      	strb	r3, [r6, #0]
 801138e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011390:	601f      	str	r7, [r3, #0]
 8011392:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011394:	2b00      	cmp	r3, #0
 8011396:	f000 831d 	beq.w	80119d4 <_dtoa_r+0xb34>
 801139a:	601e      	str	r6, [r3, #0]
 801139c:	e31a      	b.n	80119d4 <_dtoa_r+0xb34>
 801139e:	07e2      	lsls	r2, r4, #31
 80113a0:	d505      	bpl.n	80113ae <_dtoa_r+0x50e>
 80113a2:	3601      	adds	r6, #1
 80113a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80113a8:	f7ef f936 	bl	8000618 <__aeabi_dmul>
 80113ac:	2301      	movs	r3, #1
 80113ae:	1064      	asrs	r4, r4, #1
 80113b0:	3508      	adds	r5, #8
 80113b2:	e73f      	b.n	8011234 <_dtoa_r+0x394>
 80113b4:	2602      	movs	r6, #2
 80113b6:	e742      	b.n	801123e <_dtoa_r+0x39e>
 80113b8:	9c07      	ldr	r4, [sp, #28]
 80113ba:	9704      	str	r7, [sp, #16]
 80113bc:	e761      	b.n	8011282 <_dtoa_r+0x3e2>
 80113be:	4b27      	ldr	r3, [pc, #156]	@ (801145c <_dtoa_r+0x5bc>)
 80113c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80113c6:	4454      	add	r4, sl
 80113c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80113cc:	2900      	cmp	r1, #0
 80113ce:	d053      	beq.n	8011478 <_dtoa_r+0x5d8>
 80113d0:	2000      	movs	r0, #0
 80113d2:	4928      	ldr	r1, [pc, #160]	@ (8011474 <_dtoa_r+0x5d4>)
 80113d4:	f7ef fa4a 	bl	800086c <__aeabi_ddiv>
 80113d8:	4633      	mov	r3, r6
 80113da:	4656      	mov	r6, sl
 80113dc:	462a      	mov	r2, r5
 80113de:	f7ee ff63 	bl	80002a8 <__aeabi_dsub>
 80113e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113ea:	f7ef fbc5 	bl	8000b78 <__aeabi_d2iz>
 80113ee:	4605      	mov	r5, r0
 80113f0:	f7ef f8a8 	bl	8000544 <__aeabi_i2d>
 80113f4:	4602      	mov	r2, r0
 80113f6:	460b      	mov	r3, r1
 80113f8:	3530      	adds	r5, #48	@ 0x30
 80113fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113fe:	f7ee ff53 	bl	80002a8 <__aeabi_dsub>
 8011402:	4602      	mov	r2, r0
 8011404:	460b      	mov	r3, r1
 8011406:	f806 5b01 	strb.w	r5, [r6], #1
 801140a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801140e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011412:	f7ef fb73 	bl	8000afc <__aeabi_dcmplt>
 8011416:	2800      	cmp	r0, #0
 8011418:	d171      	bne.n	80114fe <_dtoa_r+0x65e>
 801141a:	2000      	movs	r0, #0
 801141c:	4911      	ldr	r1, [pc, #68]	@ (8011464 <_dtoa_r+0x5c4>)
 801141e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011422:	f7ee ff41 	bl	80002a8 <__aeabi_dsub>
 8011426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801142a:	f7ef fb67 	bl	8000afc <__aeabi_dcmplt>
 801142e:	2800      	cmp	r0, #0
 8011430:	f040 8095 	bne.w	801155e <_dtoa_r+0x6be>
 8011434:	42a6      	cmp	r6, r4
 8011436:	f43f af50 	beq.w	80112da <_dtoa_r+0x43a>
 801143a:	2200      	movs	r2, #0
 801143c:	4b0a      	ldr	r3, [pc, #40]	@ (8011468 <_dtoa_r+0x5c8>)
 801143e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011442:	f7ef f8e9 	bl	8000618 <__aeabi_dmul>
 8011446:	2200      	movs	r2, #0
 8011448:	4b07      	ldr	r3, [pc, #28]	@ (8011468 <_dtoa_r+0x5c8>)
 801144a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801144e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011452:	f7ef f8e1 	bl	8000618 <__aeabi_dmul>
 8011456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801145a:	e7c4      	b.n	80113e6 <_dtoa_r+0x546>
 801145c:	08013470 	.word	0x08013470
 8011460:	08013448 	.word	0x08013448
 8011464:	3ff00000 	.word	0x3ff00000
 8011468:	40240000 	.word	0x40240000
 801146c:	401c0000 	.word	0x401c0000
 8011470:	40140000 	.word	0x40140000
 8011474:	3fe00000 	.word	0x3fe00000
 8011478:	4631      	mov	r1, r6
 801147a:	4656      	mov	r6, sl
 801147c:	4628      	mov	r0, r5
 801147e:	f7ef f8cb 	bl	8000618 <__aeabi_dmul>
 8011482:	9415      	str	r4, [sp, #84]	@ 0x54
 8011484:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801148c:	f7ef fb74 	bl	8000b78 <__aeabi_d2iz>
 8011490:	4605      	mov	r5, r0
 8011492:	f7ef f857 	bl	8000544 <__aeabi_i2d>
 8011496:	4602      	mov	r2, r0
 8011498:	3530      	adds	r5, #48	@ 0x30
 801149a:	460b      	mov	r3, r1
 801149c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114a0:	f7ee ff02 	bl	80002a8 <__aeabi_dsub>
 80114a4:	f806 5b01 	strb.w	r5, [r6], #1
 80114a8:	4602      	mov	r2, r0
 80114aa:	460b      	mov	r3, r1
 80114ac:	42a6      	cmp	r6, r4
 80114ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80114b2:	f04f 0200 	mov.w	r2, #0
 80114b6:	d124      	bne.n	8011502 <_dtoa_r+0x662>
 80114b8:	4bac      	ldr	r3, [pc, #688]	@ (801176c <_dtoa_r+0x8cc>)
 80114ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80114be:	f7ee fef5 	bl	80002ac <__adddf3>
 80114c2:	4602      	mov	r2, r0
 80114c4:	460b      	mov	r3, r1
 80114c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114ca:	f7ef fb35 	bl	8000b38 <__aeabi_dcmpgt>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d145      	bne.n	801155e <_dtoa_r+0x6be>
 80114d2:	2000      	movs	r0, #0
 80114d4:	49a5      	ldr	r1, [pc, #660]	@ (801176c <_dtoa_r+0x8cc>)
 80114d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80114da:	f7ee fee5 	bl	80002a8 <__aeabi_dsub>
 80114de:	4602      	mov	r2, r0
 80114e0:	460b      	mov	r3, r1
 80114e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114e6:	f7ef fb09 	bl	8000afc <__aeabi_dcmplt>
 80114ea:	2800      	cmp	r0, #0
 80114ec:	f43f aef5 	beq.w	80112da <_dtoa_r+0x43a>
 80114f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80114f2:	1e73      	subs	r3, r6, #1
 80114f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80114f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80114fa:	2b30      	cmp	r3, #48	@ 0x30
 80114fc:	d0f8      	beq.n	80114f0 <_dtoa_r+0x650>
 80114fe:	9f04      	ldr	r7, [sp, #16]
 8011500:	e73e      	b.n	8011380 <_dtoa_r+0x4e0>
 8011502:	4b9b      	ldr	r3, [pc, #620]	@ (8011770 <_dtoa_r+0x8d0>)
 8011504:	f7ef f888 	bl	8000618 <__aeabi_dmul>
 8011508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801150c:	e7bc      	b.n	8011488 <_dtoa_r+0x5e8>
 801150e:	d10c      	bne.n	801152a <_dtoa_r+0x68a>
 8011510:	2200      	movs	r2, #0
 8011512:	4b98      	ldr	r3, [pc, #608]	@ (8011774 <_dtoa_r+0x8d4>)
 8011514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011518:	f7ef f87e 	bl	8000618 <__aeabi_dmul>
 801151c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011520:	f7ef fb00 	bl	8000b24 <__aeabi_dcmpge>
 8011524:	2800      	cmp	r0, #0
 8011526:	f000 8157 	beq.w	80117d8 <_dtoa_r+0x938>
 801152a:	2400      	movs	r4, #0
 801152c:	4625      	mov	r5, r4
 801152e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011530:	4656      	mov	r6, sl
 8011532:	43db      	mvns	r3, r3
 8011534:	9304      	str	r3, [sp, #16]
 8011536:	2700      	movs	r7, #0
 8011538:	4621      	mov	r1, r4
 801153a:	4658      	mov	r0, fp
 801153c:	f000 fbb4 	bl	8011ca8 <_Bfree>
 8011540:	2d00      	cmp	r5, #0
 8011542:	d0dc      	beq.n	80114fe <_dtoa_r+0x65e>
 8011544:	b12f      	cbz	r7, 8011552 <_dtoa_r+0x6b2>
 8011546:	42af      	cmp	r7, r5
 8011548:	d003      	beq.n	8011552 <_dtoa_r+0x6b2>
 801154a:	4639      	mov	r1, r7
 801154c:	4658      	mov	r0, fp
 801154e:	f000 fbab 	bl	8011ca8 <_Bfree>
 8011552:	4629      	mov	r1, r5
 8011554:	4658      	mov	r0, fp
 8011556:	f000 fba7 	bl	8011ca8 <_Bfree>
 801155a:	e7d0      	b.n	80114fe <_dtoa_r+0x65e>
 801155c:	9704      	str	r7, [sp, #16]
 801155e:	4633      	mov	r3, r6
 8011560:	461e      	mov	r6, r3
 8011562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011566:	2a39      	cmp	r2, #57	@ 0x39
 8011568:	d107      	bne.n	801157a <_dtoa_r+0x6da>
 801156a:	459a      	cmp	sl, r3
 801156c:	d1f8      	bne.n	8011560 <_dtoa_r+0x6c0>
 801156e:	9a04      	ldr	r2, [sp, #16]
 8011570:	3201      	adds	r2, #1
 8011572:	9204      	str	r2, [sp, #16]
 8011574:	2230      	movs	r2, #48	@ 0x30
 8011576:	f88a 2000 	strb.w	r2, [sl]
 801157a:	781a      	ldrb	r2, [r3, #0]
 801157c:	3201      	adds	r2, #1
 801157e:	701a      	strb	r2, [r3, #0]
 8011580:	e7bd      	b.n	80114fe <_dtoa_r+0x65e>
 8011582:	2200      	movs	r2, #0
 8011584:	4b7a      	ldr	r3, [pc, #488]	@ (8011770 <_dtoa_r+0x8d0>)
 8011586:	f7ef f847 	bl	8000618 <__aeabi_dmul>
 801158a:	2200      	movs	r2, #0
 801158c:	2300      	movs	r3, #0
 801158e:	4604      	mov	r4, r0
 8011590:	460d      	mov	r5, r1
 8011592:	f7ef faa9 	bl	8000ae8 <__aeabi_dcmpeq>
 8011596:	2800      	cmp	r0, #0
 8011598:	f43f aebb 	beq.w	8011312 <_dtoa_r+0x472>
 801159c:	e6f0      	b.n	8011380 <_dtoa_r+0x4e0>
 801159e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80115a0:	2a00      	cmp	r2, #0
 80115a2:	f000 80db 	beq.w	801175c <_dtoa_r+0x8bc>
 80115a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115a8:	2a01      	cmp	r2, #1
 80115aa:	f300 80bf 	bgt.w	801172c <_dtoa_r+0x88c>
 80115ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80115b0:	2a00      	cmp	r2, #0
 80115b2:	f000 80b7 	beq.w	8011724 <_dtoa_r+0x884>
 80115b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80115ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80115bc:	4646      	mov	r6, r8
 80115be:	9a08      	ldr	r2, [sp, #32]
 80115c0:	2101      	movs	r1, #1
 80115c2:	4658      	mov	r0, fp
 80115c4:	4498      	add	r8, r3
 80115c6:	441a      	add	r2, r3
 80115c8:	9208      	str	r2, [sp, #32]
 80115ca:	f000 fc23 	bl	8011e14 <__i2b>
 80115ce:	4605      	mov	r5, r0
 80115d0:	b15e      	cbz	r6, 80115ea <_dtoa_r+0x74a>
 80115d2:	9b08      	ldr	r3, [sp, #32]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	dd08      	ble.n	80115ea <_dtoa_r+0x74a>
 80115d8:	42b3      	cmp	r3, r6
 80115da:	9a08      	ldr	r2, [sp, #32]
 80115dc:	bfa8      	it	ge
 80115de:	4633      	movge	r3, r6
 80115e0:	eba8 0803 	sub.w	r8, r8, r3
 80115e4:	1af6      	subs	r6, r6, r3
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	9308      	str	r3, [sp, #32]
 80115ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115ec:	b1f3      	cbz	r3, 801162c <_dtoa_r+0x78c>
 80115ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f000 80b7 	beq.w	8011764 <_dtoa_r+0x8c4>
 80115f6:	b18c      	cbz	r4, 801161c <_dtoa_r+0x77c>
 80115f8:	4629      	mov	r1, r5
 80115fa:	4622      	mov	r2, r4
 80115fc:	4658      	mov	r0, fp
 80115fe:	f000 fcc9 	bl	8011f94 <__pow5mult>
 8011602:	464a      	mov	r2, r9
 8011604:	4601      	mov	r1, r0
 8011606:	4605      	mov	r5, r0
 8011608:	4658      	mov	r0, fp
 801160a:	f000 fc19 	bl	8011e40 <__multiply>
 801160e:	4649      	mov	r1, r9
 8011610:	9004      	str	r0, [sp, #16]
 8011612:	4658      	mov	r0, fp
 8011614:	f000 fb48 	bl	8011ca8 <_Bfree>
 8011618:	9b04      	ldr	r3, [sp, #16]
 801161a:	4699      	mov	r9, r3
 801161c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801161e:	1b1a      	subs	r2, r3, r4
 8011620:	d004      	beq.n	801162c <_dtoa_r+0x78c>
 8011622:	4649      	mov	r1, r9
 8011624:	4658      	mov	r0, fp
 8011626:	f000 fcb5 	bl	8011f94 <__pow5mult>
 801162a:	4681      	mov	r9, r0
 801162c:	2101      	movs	r1, #1
 801162e:	4658      	mov	r0, fp
 8011630:	f000 fbf0 	bl	8011e14 <__i2b>
 8011634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011636:	4604      	mov	r4, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	f000 81cf 	beq.w	80119dc <_dtoa_r+0xb3c>
 801163e:	461a      	mov	r2, r3
 8011640:	4601      	mov	r1, r0
 8011642:	4658      	mov	r0, fp
 8011644:	f000 fca6 	bl	8011f94 <__pow5mult>
 8011648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801164a:	4604      	mov	r4, r0
 801164c:	2b01      	cmp	r3, #1
 801164e:	f300 8095 	bgt.w	801177c <_dtoa_r+0x8dc>
 8011652:	9b02      	ldr	r3, [sp, #8]
 8011654:	2b00      	cmp	r3, #0
 8011656:	f040 8087 	bne.w	8011768 <_dtoa_r+0x8c8>
 801165a:	9b03      	ldr	r3, [sp, #12]
 801165c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011660:	2b00      	cmp	r3, #0
 8011662:	f040 8089 	bne.w	8011778 <_dtoa_r+0x8d8>
 8011666:	9b03      	ldr	r3, [sp, #12]
 8011668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801166c:	0d1b      	lsrs	r3, r3, #20
 801166e:	051b      	lsls	r3, r3, #20
 8011670:	b12b      	cbz	r3, 801167e <_dtoa_r+0x7de>
 8011672:	9b08      	ldr	r3, [sp, #32]
 8011674:	f108 0801 	add.w	r8, r8, #1
 8011678:	3301      	adds	r3, #1
 801167a:	9308      	str	r3, [sp, #32]
 801167c:	2301      	movs	r3, #1
 801167e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011682:	2b00      	cmp	r3, #0
 8011684:	f000 81b0 	beq.w	80119e8 <_dtoa_r+0xb48>
 8011688:	6923      	ldr	r3, [r4, #16]
 801168a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801168e:	6918      	ldr	r0, [r3, #16]
 8011690:	f000 fb74 	bl	8011d7c <__hi0bits>
 8011694:	f1c0 0020 	rsb	r0, r0, #32
 8011698:	9b08      	ldr	r3, [sp, #32]
 801169a:	4418      	add	r0, r3
 801169c:	f010 001f 	ands.w	r0, r0, #31
 80116a0:	d077      	beq.n	8011792 <_dtoa_r+0x8f2>
 80116a2:	f1c0 0320 	rsb	r3, r0, #32
 80116a6:	2b04      	cmp	r3, #4
 80116a8:	dd6b      	ble.n	8011782 <_dtoa_r+0x8e2>
 80116aa:	f1c0 001c 	rsb	r0, r0, #28
 80116ae:	9b08      	ldr	r3, [sp, #32]
 80116b0:	4480      	add	r8, r0
 80116b2:	4403      	add	r3, r0
 80116b4:	4406      	add	r6, r0
 80116b6:	9308      	str	r3, [sp, #32]
 80116b8:	f1b8 0f00 	cmp.w	r8, #0
 80116bc:	dd05      	ble.n	80116ca <_dtoa_r+0x82a>
 80116be:	4649      	mov	r1, r9
 80116c0:	4642      	mov	r2, r8
 80116c2:	4658      	mov	r0, fp
 80116c4:	f000 fcc0 	bl	8012048 <__lshift>
 80116c8:	4681      	mov	r9, r0
 80116ca:	9b08      	ldr	r3, [sp, #32]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	dd05      	ble.n	80116dc <_dtoa_r+0x83c>
 80116d0:	4621      	mov	r1, r4
 80116d2:	461a      	mov	r2, r3
 80116d4:	4658      	mov	r0, fp
 80116d6:	f000 fcb7 	bl	8012048 <__lshift>
 80116da:	4604      	mov	r4, r0
 80116dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d059      	beq.n	8011796 <_dtoa_r+0x8f6>
 80116e2:	4621      	mov	r1, r4
 80116e4:	4648      	mov	r0, r9
 80116e6:	f000 fd1b 	bl	8012120 <__mcmp>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	da53      	bge.n	8011796 <_dtoa_r+0x8f6>
 80116ee:	1e7b      	subs	r3, r7, #1
 80116f0:	4649      	mov	r1, r9
 80116f2:	220a      	movs	r2, #10
 80116f4:	4658      	mov	r0, fp
 80116f6:	9304      	str	r3, [sp, #16]
 80116f8:	2300      	movs	r3, #0
 80116fa:	f000 faf7 	bl	8011cec <__multadd>
 80116fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011700:	4681      	mov	r9, r0
 8011702:	2b00      	cmp	r3, #0
 8011704:	f000 8172 	beq.w	80119ec <_dtoa_r+0xb4c>
 8011708:	2300      	movs	r3, #0
 801170a:	4629      	mov	r1, r5
 801170c:	220a      	movs	r2, #10
 801170e:	4658      	mov	r0, fp
 8011710:	f000 faec 	bl	8011cec <__multadd>
 8011714:	9b00      	ldr	r3, [sp, #0]
 8011716:	4605      	mov	r5, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	dc67      	bgt.n	80117ec <_dtoa_r+0x94c>
 801171c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801171e:	2b02      	cmp	r3, #2
 8011720:	dc41      	bgt.n	80117a6 <_dtoa_r+0x906>
 8011722:	e063      	b.n	80117ec <_dtoa_r+0x94c>
 8011724:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011726:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801172a:	e746      	b.n	80115ba <_dtoa_r+0x71a>
 801172c:	9b07      	ldr	r3, [sp, #28]
 801172e:	1e5c      	subs	r4, r3, #1
 8011730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011732:	42a3      	cmp	r3, r4
 8011734:	bfb7      	itett	lt
 8011736:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011738:	1b1c      	subge	r4, r3, r4
 801173a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801173c:	1ae3      	sublt	r3, r4, r3
 801173e:	bfbe      	ittt	lt
 8011740:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011742:	2400      	movlt	r4, #0
 8011744:	18d2      	addlt	r2, r2, r3
 8011746:	9b07      	ldr	r3, [sp, #28]
 8011748:	bfb8      	it	lt
 801174a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801174c:	2b00      	cmp	r3, #0
 801174e:	bfb5      	itete	lt
 8011750:	eba8 0603 	sublt.w	r6, r8, r3
 8011754:	4646      	movge	r6, r8
 8011756:	2300      	movlt	r3, #0
 8011758:	9b07      	ldrge	r3, [sp, #28]
 801175a:	e730      	b.n	80115be <_dtoa_r+0x71e>
 801175c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801175e:	4646      	mov	r6, r8
 8011760:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011762:	e735      	b.n	80115d0 <_dtoa_r+0x730>
 8011764:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011766:	e75c      	b.n	8011622 <_dtoa_r+0x782>
 8011768:	2300      	movs	r3, #0
 801176a:	e788      	b.n	801167e <_dtoa_r+0x7de>
 801176c:	3fe00000 	.word	0x3fe00000
 8011770:	40240000 	.word	0x40240000
 8011774:	40140000 	.word	0x40140000
 8011778:	9b02      	ldr	r3, [sp, #8]
 801177a:	e780      	b.n	801167e <_dtoa_r+0x7de>
 801177c:	2300      	movs	r3, #0
 801177e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011780:	e782      	b.n	8011688 <_dtoa_r+0x7e8>
 8011782:	d099      	beq.n	80116b8 <_dtoa_r+0x818>
 8011784:	331c      	adds	r3, #28
 8011786:	9a08      	ldr	r2, [sp, #32]
 8011788:	441a      	add	r2, r3
 801178a:	4498      	add	r8, r3
 801178c:	441e      	add	r6, r3
 801178e:	9208      	str	r2, [sp, #32]
 8011790:	e792      	b.n	80116b8 <_dtoa_r+0x818>
 8011792:	4603      	mov	r3, r0
 8011794:	e7f6      	b.n	8011784 <_dtoa_r+0x8e4>
 8011796:	9b07      	ldr	r3, [sp, #28]
 8011798:	9704      	str	r7, [sp, #16]
 801179a:	2b00      	cmp	r3, #0
 801179c:	dc20      	bgt.n	80117e0 <_dtoa_r+0x940>
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117a2:	2b02      	cmp	r3, #2
 80117a4:	dd1e      	ble.n	80117e4 <_dtoa_r+0x944>
 80117a6:	9b00      	ldr	r3, [sp, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f47f aec0 	bne.w	801152e <_dtoa_r+0x68e>
 80117ae:	4621      	mov	r1, r4
 80117b0:	2205      	movs	r2, #5
 80117b2:	4658      	mov	r0, fp
 80117b4:	f000 fa9a 	bl	8011cec <__multadd>
 80117b8:	4601      	mov	r1, r0
 80117ba:	4604      	mov	r4, r0
 80117bc:	4648      	mov	r0, r9
 80117be:	f000 fcaf 	bl	8012120 <__mcmp>
 80117c2:	2800      	cmp	r0, #0
 80117c4:	f77f aeb3 	ble.w	801152e <_dtoa_r+0x68e>
 80117c8:	2331      	movs	r3, #49	@ 0x31
 80117ca:	4656      	mov	r6, sl
 80117cc:	f806 3b01 	strb.w	r3, [r6], #1
 80117d0:	9b04      	ldr	r3, [sp, #16]
 80117d2:	3301      	adds	r3, #1
 80117d4:	9304      	str	r3, [sp, #16]
 80117d6:	e6ae      	b.n	8011536 <_dtoa_r+0x696>
 80117d8:	9c07      	ldr	r4, [sp, #28]
 80117da:	9704      	str	r7, [sp, #16]
 80117dc:	4625      	mov	r5, r4
 80117de:	e7f3      	b.n	80117c8 <_dtoa_r+0x928>
 80117e0:	9b07      	ldr	r3, [sp, #28]
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 8104 	beq.w	80119f4 <_dtoa_r+0xb54>
 80117ec:	2e00      	cmp	r6, #0
 80117ee:	dd05      	ble.n	80117fc <_dtoa_r+0x95c>
 80117f0:	4629      	mov	r1, r5
 80117f2:	4632      	mov	r2, r6
 80117f4:	4658      	mov	r0, fp
 80117f6:	f000 fc27 	bl	8012048 <__lshift>
 80117fa:	4605      	mov	r5, r0
 80117fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d05a      	beq.n	80118b8 <_dtoa_r+0xa18>
 8011802:	6869      	ldr	r1, [r5, #4]
 8011804:	4658      	mov	r0, fp
 8011806:	f000 fa0f 	bl	8011c28 <_Balloc>
 801180a:	4606      	mov	r6, r0
 801180c:	b928      	cbnz	r0, 801181a <_dtoa_r+0x97a>
 801180e:	4b84      	ldr	r3, [pc, #528]	@ (8011a20 <_dtoa_r+0xb80>)
 8011810:	4602      	mov	r2, r0
 8011812:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011816:	f7ff bb5a 	b.w	8010ece <_dtoa_r+0x2e>
 801181a:	692a      	ldr	r2, [r5, #16]
 801181c:	f105 010c 	add.w	r1, r5, #12
 8011820:	300c      	adds	r0, #12
 8011822:	3202      	adds	r2, #2
 8011824:	0092      	lsls	r2, r2, #2
 8011826:	f7ff faa0 	bl	8010d6a <memcpy>
 801182a:	2201      	movs	r2, #1
 801182c:	4631      	mov	r1, r6
 801182e:	4658      	mov	r0, fp
 8011830:	f000 fc0a 	bl	8012048 <__lshift>
 8011834:	f10a 0301 	add.w	r3, sl, #1
 8011838:	462f      	mov	r7, r5
 801183a:	4605      	mov	r5, r0
 801183c:	9307      	str	r3, [sp, #28]
 801183e:	9b00      	ldr	r3, [sp, #0]
 8011840:	4453      	add	r3, sl
 8011842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011844:	9b02      	ldr	r3, [sp, #8]
 8011846:	f003 0301 	and.w	r3, r3, #1
 801184a:	930a      	str	r3, [sp, #40]	@ 0x28
 801184c:	9b07      	ldr	r3, [sp, #28]
 801184e:	4621      	mov	r1, r4
 8011850:	4648      	mov	r0, r9
 8011852:	3b01      	subs	r3, #1
 8011854:	9300      	str	r3, [sp, #0]
 8011856:	f7ff fa95 	bl	8010d84 <quorem>
 801185a:	4639      	mov	r1, r7
 801185c:	9002      	str	r0, [sp, #8]
 801185e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011862:	4648      	mov	r0, r9
 8011864:	f000 fc5c 	bl	8012120 <__mcmp>
 8011868:	462a      	mov	r2, r5
 801186a:	9008      	str	r0, [sp, #32]
 801186c:	4621      	mov	r1, r4
 801186e:	4658      	mov	r0, fp
 8011870:	f000 fc72 	bl	8012158 <__mdiff>
 8011874:	68c2      	ldr	r2, [r0, #12]
 8011876:	4606      	mov	r6, r0
 8011878:	bb02      	cbnz	r2, 80118bc <_dtoa_r+0xa1c>
 801187a:	4601      	mov	r1, r0
 801187c:	4648      	mov	r0, r9
 801187e:	f000 fc4f 	bl	8012120 <__mcmp>
 8011882:	4602      	mov	r2, r0
 8011884:	4631      	mov	r1, r6
 8011886:	4658      	mov	r0, fp
 8011888:	920e      	str	r2, [sp, #56]	@ 0x38
 801188a:	f000 fa0d 	bl	8011ca8 <_Bfree>
 801188e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011892:	9e07      	ldr	r6, [sp, #28]
 8011894:	ea43 0102 	orr.w	r1, r3, r2
 8011898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801189a:	4319      	orrs	r1, r3
 801189c:	d110      	bne.n	80118c0 <_dtoa_r+0xa20>
 801189e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118a2:	d029      	beq.n	80118f8 <_dtoa_r+0xa58>
 80118a4:	9b08      	ldr	r3, [sp, #32]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	dd02      	ble.n	80118b0 <_dtoa_r+0xa10>
 80118aa:	9b02      	ldr	r3, [sp, #8]
 80118ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80118b0:	9b00      	ldr	r3, [sp, #0]
 80118b2:	f883 8000 	strb.w	r8, [r3]
 80118b6:	e63f      	b.n	8011538 <_dtoa_r+0x698>
 80118b8:	4628      	mov	r0, r5
 80118ba:	e7bb      	b.n	8011834 <_dtoa_r+0x994>
 80118bc:	2201      	movs	r2, #1
 80118be:	e7e1      	b.n	8011884 <_dtoa_r+0x9e4>
 80118c0:	9b08      	ldr	r3, [sp, #32]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	db04      	blt.n	80118d0 <_dtoa_r+0xa30>
 80118c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80118c8:	430b      	orrs	r3, r1
 80118ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80118cc:	430b      	orrs	r3, r1
 80118ce:	d120      	bne.n	8011912 <_dtoa_r+0xa72>
 80118d0:	2a00      	cmp	r2, #0
 80118d2:	dded      	ble.n	80118b0 <_dtoa_r+0xa10>
 80118d4:	4649      	mov	r1, r9
 80118d6:	2201      	movs	r2, #1
 80118d8:	4658      	mov	r0, fp
 80118da:	f000 fbb5 	bl	8012048 <__lshift>
 80118de:	4621      	mov	r1, r4
 80118e0:	4681      	mov	r9, r0
 80118e2:	f000 fc1d 	bl	8012120 <__mcmp>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	dc03      	bgt.n	80118f2 <_dtoa_r+0xa52>
 80118ea:	d1e1      	bne.n	80118b0 <_dtoa_r+0xa10>
 80118ec:	f018 0f01 	tst.w	r8, #1
 80118f0:	d0de      	beq.n	80118b0 <_dtoa_r+0xa10>
 80118f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118f6:	d1d8      	bne.n	80118aa <_dtoa_r+0xa0a>
 80118f8:	2339      	movs	r3, #57	@ 0x39
 80118fa:	9a00      	ldr	r2, [sp, #0]
 80118fc:	7013      	strb	r3, [r2, #0]
 80118fe:	4633      	mov	r3, r6
 8011900:	461e      	mov	r6, r3
 8011902:	3b01      	subs	r3, #1
 8011904:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011908:	2a39      	cmp	r2, #57	@ 0x39
 801190a:	d052      	beq.n	80119b2 <_dtoa_r+0xb12>
 801190c:	3201      	adds	r2, #1
 801190e:	701a      	strb	r2, [r3, #0]
 8011910:	e612      	b.n	8011538 <_dtoa_r+0x698>
 8011912:	2a00      	cmp	r2, #0
 8011914:	dd07      	ble.n	8011926 <_dtoa_r+0xa86>
 8011916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801191a:	d0ed      	beq.n	80118f8 <_dtoa_r+0xa58>
 801191c:	f108 0301 	add.w	r3, r8, #1
 8011920:	9a00      	ldr	r2, [sp, #0]
 8011922:	7013      	strb	r3, [r2, #0]
 8011924:	e608      	b.n	8011538 <_dtoa_r+0x698>
 8011926:	9b07      	ldr	r3, [sp, #28]
 8011928:	9a07      	ldr	r2, [sp, #28]
 801192a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801192e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011930:	4293      	cmp	r3, r2
 8011932:	d028      	beq.n	8011986 <_dtoa_r+0xae6>
 8011934:	4649      	mov	r1, r9
 8011936:	2300      	movs	r3, #0
 8011938:	220a      	movs	r2, #10
 801193a:	4658      	mov	r0, fp
 801193c:	f000 f9d6 	bl	8011cec <__multadd>
 8011940:	42af      	cmp	r7, r5
 8011942:	4681      	mov	r9, r0
 8011944:	f04f 0300 	mov.w	r3, #0
 8011948:	f04f 020a 	mov.w	r2, #10
 801194c:	4639      	mov	r1, r7
 801194e:	4658      	mov	r0, fp
 8011950:	d107      	bne.n	8011962 <_dtoa_r+0xac2>
 8011952:	f000 f9cb 	bl	8011cec <__multadd>
 8011956:	4607      	mov	r7, r0
 8011958:	4605      	mov	r5, r0
 801195a:	9b07      	ldr	r3, [sp, #28]
 801195c:	3301      	adds	r3, #1
 801195e:	9307      	str	r3, [sp, #28]
 8011960:	e774      	b.n	801184c <_dtoa_r+0x9ac>
 8011962:	f000 f9c3 	bl	8011cec <__multadd>
 8011966:	4629      	mov	r1, r5
 8011968:	4607      	mov	r7, r0
 801196a:	2300      	movs	r3, #0
 801196c:	220a      	movs	r2, #10
 801196e:	4658      	mov	r0, fp
 8011970:	f000 f9bc 	bl	8011cec <__multadd>
 8011974:	4605      	mov	r5, r0
 8011976:	e7f0      	b.n	801195a <_dtoa_r+0xaba>
 8011978:	9b00      	ldr	r3, [sp, #0]
 801197a:	2700      	movs	r7, #0
 801197c:	2b00      	cmp	r3, #0
 801197e:	bfcc      	ite	gt
 8011980:	461e      	movgt	r6, r3
 8011982:	2601      	movle	r6, #1
 8011984:	4456      	add	r6, sl
 8011986:	4649      	mov	r1, r9
 8011988:	2201      	movs	r2, #1
 801198a:	4658      	mov	r0, fp
 801198c:	f000 fb5c 	bl	8012048 <__lshift>
 8011990:	4621      	mov	r1, r4
 8011992:	4681      	mov	r9, r0
 8011994:	f000 fbc4 	bl	8012120 <__mcmp>
 8011998:	2800      	cmp	r0, #0
 801199a:	dcb0      	bgt.n	80118fe <_dtoa_r+0xa5e>
 801199c:	d102      	bne.n	80119a4 <_dtoa_r+0xb04>
 801199e:	f018 0f01 	tst.w	r8, #1
 80119a2:	d1ac      	bne.n	80118fe <_dtoa_r+0xa5e>
 80119a4:	4633      	mov	r3, r6
 80119a6:	461e      	mov	r6, r3
 80119a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119ac:	2a30      	cmp	r2, #48	@ 0x30
 80119ae:	d0fa      	beq.n	80119a6 <_dtoa_r+0xb06>
 80119b0:	e5c2      	b.n	8011538 <_dtoa_r+0x698>
 80119b2:	459a      	cmp	sl, r3
 80119b4:	d1a4      	bne.n	8011900 <_dtoa_r+0xa60>
 80119b6:	9b04      	ldr	r3, [sp, #16]
 80119b8:	3301      	adds	r3, #1
 80119ba:	9304      	str	r3, [sp, #16]
 80119bc:	2331      	movs	r3, #49	@ 0x31
 80119be:	f88a 3000 	strb.w	r3, [sl]
 80119c2:	e5b9      	b.n	8011538 <_dtoa_r+0x698>
 80119c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80119c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011a24 <_dtoa_r+0xb84>
 80119ca:	b11b      	cbz	r3, 80119d4 <_dtoa_r+0xb34>
 80119cc:	f10a 0308 	add.w	r3, sl, #8
 80119d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80119d2:	6013      	str	r3, [r2, #0]
 80119d4:	4650      	mov	r0, sl
 80119d6:	b019      	add	sp, #100	@ 0x64
 80119d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119de:	2b01      	cmp	r3, #1
 80119e0:	f77f ae37 	ble.w	8011652 <_dtoa_r+0x7b2>
 80119e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80119e8:	2001      	movs	r0, #1
 80119ea:	e655      	b.n	8011698 <_dtoa_r+0x7f8>
 80119ec:	9b00      	ldr	r3, [sp, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f77f aed6 	ble.w	80117a0 <_dtoa_r+0x900>
 80119f4:	4656      	mov	r6, sl
 80119f6:	4621      	mov	r1, r4
 80119f8:	4648      	mov	r0, r9
 80119fa:	f7ff f9c3 	bl	8010d84 <quorem>
 80119fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011a02:	9b00      	ldr	r3, [sp, #0]
 8011a04:	f806 8b01 	strb.w	r8, [r6], #1
 8011a08:	eba6 020a 	sub.w	r2, r6, sl
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	ddb3      	ble.n	8011978 <_dtoa_r+0xad8>
 8011a10:	4649      	mov	r1, r9
 8011a12:	2300      	movs	r3, #0
 8011a14:	220a      	movs	r2, #10
 8011a16:	4658      	mov	r0, fp
 8011a18:	f000 f968 	bl	8011cec <__multadd>
 8011a1c:	4681      	mov	r9, r0
 8011a1e:	e7ea      	b.n	80119f6 <_dtoa_r+0xb56>
 8011a20:	080133d0 	.word	0x080133d0
 8011a24:	08013354 	.word	0x08013354

08011a28 <_free_r>:
 8011a28:	b538      	push	{r3, r4, r5, lr}
 8011a2a:	4605      	mov	r5, r0
 8011a2c:	2900      	cmp	r1, #0
 8011a2e:	d041      	beq.n	8011ab4 <_free_r+0x8c>
 8011a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a34:	1f0c      	subs	r4, r1, #4
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	bfb8      	it	lt
 8011a3a:	18e4      	addlt	r4, r4, r3
 8011a3c:	f000 f8e8 	bl	8011c10 <__malloc_lock>
 8011a40:	4a1d      	ldr	r2, [pc, #116]	@ (8011ab8 <_free_r+0x90>)
 8011a42:	6813      	ldr	r3, [r2, #0]
 8011a44:	b933      	cbnz	r3, 8011a54 <_free_r+0x2c>
 8011a46:	6063      	str	r3, [r4, #4]
 8011a48:	6014      	str	r4, [r2, #0]
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a50:	f000 b8e4 	b.w	8011c1c <__malloc_unlock>
 8011a54:	42a3      	cmp	r3, r4
 8011a56:	d908      	bls.n	8011a6a <_free_r+0x42>
 8011a58:	6820      	ldr	r0, [r4, #0]
 8011a5a:	1821      	adds	r1, r4, r0
 8011a5c:	428b      	cmp	r3, r1
 8011a5e:	bf01      	itttt	eq
 8011a60:	6819      	ldreq	r1, [r3, #0]
 8011a62:	685b      	ldreq	r3, [r3, #4]
 8011a64:	1809      	addeq	r1, r1, r0
 8011a66:	6021      	streq	r1, [r4, #0]
 8011a68:	e7ed      	b.n	8011a46 <_free_r+0x1e>
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	b10b      	cbz	r3, 8011a74 <_free_r+0x4c>
 8011a70:	42a3      	cmp	r3, r4
 8011a72:	d9fa      	bls.n	8011a6a <_free_r+0x42>
 8011a74:	6811      	ldr	r1, [r2, #0]
 8011a76:	1850      	adds	r0, r2, r1
 8011a78:	42a0      	cmp	r0, r4
 8011a7a:	d10b      	bne.n	8011a94 <_free_r+0x6c>
 8011a7c:	6820      	ldr	r0, [r4, #0]
 8011a7e:	4401      	add	r1, r0
 8011a80:	1850      	adds	r0, r2, r1
 8011a82:	6011      	str	r1, [r2, #0]
 8011a84:	4283      	cmp	r3, r0
 8011a86:	d1e0      	bne.n	8011a4a <_free_r+0x22>
 8011a88:	6818      	ldr	r0, [r3, #0]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	4408      	add	r0, r1
 8011a8e:	6053      	str	r3, [r2, #4]
 8011a90:	6010      	str	r0, [r2, #0]
 8011a92:	e7da      	b.n	8011a4a <_free_r+0x22>
 8011a94:	d902      	bls.n	8011a9c <_free_r+0x74>
 8011a96:	230c      	movs	r3, #12
 8011a98:	602b      	str	r3, [r5, #0]
 8011a9a:	e7d6      	b.n	8011a4a <_free_r+0x22>
 8011a9c:	6820      	ldr	r0, [r4, #0]
 8011a9e:	1821      	adds	r1, r4, r0
 8011aa0:	428b      	cmp	r3, r1
 8011aa2:	bf02      	ittt	eq
 8011aa4:	6819      	ldreq	r1, [r3, #0]
 8011aa6:	685b      	ldreq	r3, [r3, #4]
 8011aa8:	1809      	addeq	r1, r1, r0
 8011aaa:	6063      	str	r3, [r4, #4]
 8011aac:	bf08      	it	eq
 8011aae:	6021      	streq	r1, [r4, #0]
 8011ab0:	6054      	str	r4, [r2, #4]
 8011ab2:	e7ca      	b.n	8011a4a <_free_r+0x22>
 8011ab4:	bd38      	pop	{r3, r4, r5, pc}
 8011ab6:	bf00      	nop
 8011ab8:	20005d3c 	.word	0x20005d3c

08011abc <malloc>:
 8011abc:	4b02      	ldr	r3, [pc, #8]	@ (8011ac8 <malloc+0xc>)
 8011abe:	4601      	mov	r1, r0
 8011ac0:	6818      	ldr	r0, [r3, #0]
 8011ac2:	f000 b825 	b.w	8011b10 <_malloc_r>
 8011ac6:	bf00      	nop
 8011ac8:	200000c0 	.word	0x200000c0

08011acc <sbrk_aligned>:
 8011acc:	b570      	push	{r4, r5, r6, lr}
 8011ace:	4e0f      	ldr	r6, [pc, #60]	@ (8011b0c <sbrk_aligned+0x40>)
 8011ad0:	460c      	mov	r4, r1
 8011ad2:	4605      	mov	r5, r0
 8011ad4:	6831      	ldr	r1, [r6, #0]
 8011ad6:	b911      	cbnz	r1, 8011ade <sbrk_aligned+0x12>
 8011ad8:	f000 fe4c 	bl	8012774 <_sbrk_r>
 8011adc:	6030      	str	r0, [r6, #0]
 8011ade:	4621      	mov	r1, r4
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	f000 fe47 	bl	8012774 <_sbrk_r>
 8011ae6:	1c43      	adds	r3, r0, #1
 8011ae8:	d103      	bne.n	8011af2 <sbrk_aligned+0x26>
 8011aea:	f04f 34ff 	mov.w	r4, #4294967295
 8011aee:	4620      	mov	r0, r4
 8011af0:	bd70      	pop	{r4, r5, r6, pc}
 8011af2:	1cc4      	adds	r4, r0, #3
 8011af4:	f024 0403 	bic.w	r4, r4, #3
 8011af8:	42a0      	cmp	r0, r4
 8011afa:	d0f8      	beq.n	8011aee <sbrk_aligned+0x22>
 8011afc:	1a21      	subs	r1, r4, r0
 8011afe:	4628      	mov	r0, r5
 8011b00:	f000 fe38 	bl	8012774 <_sbrk_r>
 8011b04:	3001      	adds	r0, #1
 8011b06:	d1f2      	bne.n	8011aee <sbrk_aligned+0x22>
 8011b08:	e7ef      	b.n	8011aea <sbrk_aligned+0x1e>
 8011b0a:	bf00      	nop
 8011b0c:	20005d38 	.word	0x20005d38

08011b10 <_malloc_r>:
 8011b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b14:	1ccd      	adds	r5, r1, #3
 8011b16:	4606      	mov	r6, r0
 8011b18:	f025 0503 	bic.w	r5, r5, #3
 8011b1c:	3508      	adds	r5, #8
 8011b1e:	2d0c      	cmp	r5, #12
 8011b20:	bf38      	it	cc
 8011b22:	250c      	movcc	r5, #12
 8011b24:	2d00      	cmp	r5, #0
 8011b26:	db01      	blt.n	8011b2c <_malloc_r+0x1c>
 8011b28:	42a9      	cmp	r1, r5
 8011b2a:	d904      	bls.n	8011b36 <_malloc_r+0x26>
 8011b2c:	230c      	movs	r3, #12
 8011b2e:	6033      	str	r3, [r6, #0]
 8011b30:	2000      	movs	r0, #0
 8011b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011c0c <_malloc_r+0xfc>
 8011b3a:	f000 f869 	bl	8011c10 <__malloc_lock>
 8011b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8011b42:	461c      	mov	r4, r3
 8011b44:	bb44      	cbnz	r4, 8011b98 <_malloc_r+0x88>
 8011b46:	4629      	mov	r1, r5
 8011b48:	4630      	mov	r0, r6
 8011b4a:	f7ff ffbf 	bl	8011acc <sbrk_aligned>
 8011b4e:	1c43      	adds	r3, r0, #1
 8011b50:	4604      	mov	r4, r0
 8011b52:	d158      	bne.n	8011c06 <_malloc_r+0xf6>
 8011b54:	f8d8 4000 	ldr.w	r4, [r8]
 8011b58:	4627      	mov	r7, r4
 8011b5a:	2f00      	cmp	r7, #0
 8011b5c:	d143      	bne.n	8011be6 <_malloc_r+0xd6>
 8011b5e:	2c00      	cmp	r4, #0
 8011b60:	d04b      	beq.n	8011bfa <_malloc_r+0xea>
 8011b62:	6823      	ldr	r3, [r4, #0]
 8011b64:	4639      	mov	r1, r7
 8011b66:	4630      	mov	r0, r6
 8011b68:	eb04 0903 	add.w	r9, r4, r3
 8011b6c:	f000 fe02 	bl	8012774 <_sbrk_r>
 8011b70:	4581      	cmp	r9, r0
 8011b72:	d142      	bne.n	8011bfa <_malloc_r+0xea>
 8011b74:	6821      	ldr	r1, [r4, #0]
 8011b76:	4630      	mov	r0, r6
 8011b78:	1a6d      	subs	r5, r5, r1
 8011b7a:	4629      	mov	r1, r5
 8011b7c:	f7ff ffa6 	bl	8011acc <sbrk_aligned>
 8011b80:	3001      	adds	r0, #1
 8011b82:	d03a      	beq.n	8011bfa <_malloc_r+0xea>
 8011b84:	6823      	ldr	r3, [r4, #0]
 8011b86:	442b      	add	r3, r5
 8011b88:	6023      	str	r3, [r4, #0]
 8011b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8011b8e:	685a      	ldr	r2, [r3, #4]
 8011b90:	bb62      	cbnz	r2, 8011bec <_malloc_r+0xdc>
 8011b92:	f8c8 7000 	str.w	r7, [r8]
 8011b96:	e00f      	b.n	8011bb8 <_malloc_r+0xa8>
 8011b98:	6822      	ldr	r2, [r4, #0]
 8011b9a:	1b52      	subs	r2, r2, r5
 8011b9c:	d420      	bmi.n	8011be0 <_malloc_r+0xd0>
 8011b9e:	2a0b      	cmp	r2, #11
 8011ba0:	d917      	bls.n	8011bd2 <_malloc_r+0xc2>
 8011ba2:	1961      	adds	r1, r4, r5
 8011ba4:	42a3      	cmp	r3, r4
 8011ba6:	6025      	str	r5, [r4, #0]
 8011ba8:	bf18      	it	ne
 8011baa:	6059      	strne	r1, [r3, #4]
 8011bac:	6863      	ldr	r3, [r4, #4]
 8011bae:	bf08      	it	eq
 8011bb0:	f8c8 1000 	streq.w	r1, [r8]
 8011bb4:	5162      	str	r2, [r4, r5]
 8011bb6:	604b      	str	r3, [r1, #4]
 8011bb8:	4630      	mov	r0, r6
 8011bba:	f000 f82f 	bl	8011c1c <__malloc_unlock>
 8011bbe:	f104 000b 	add.w	r0, r4, #11
 8011bc2:	1d23      	adds	r3, r4, #4
 8011bc4:	f020 0007 	bic.w	r0, r0, #7
 8011bc8:	1ac2      	subs	r2, r0, r3
 8011bca:	bf1c      	itt	ne
 8011bcc:	1a1b      	subne	r3, r3, r0
 8011bce:	50a3      	strne	r3, [r4, r2]
 8011bd0:	e7af      	b.n	8011b32 <_malloc_r+0x22>
 8011bd2:	6862      	ldr	r2, [r4, #4]
 8011bd4:	42a3      	cmp	r3, r4
 8011bd6:	bf0c      	ite	eq
 8011bd8:	f8c8 2000 	streq.w	r2, [r8]
 8011bdc:	605a      	strne	r2, [r3, #4]
 8011bde:	e7eb      	b.n	8011bb8 <_malloc_r+0xa8>
 8011be0:	4623      	mov	r3, r4
 8011be2:	6864      	ldr	r4, [r4, #4]
 8011be4:	e7ae      	b.n	8011b44 <_malloc_r+0x34>
 8011be6:	463c      	mov	r4, r7
 8011be8:	687f      	ldr	r7, [r7, #4]
 8011bea:	e7b6      	b.n	8011b5a <_malloc_r+0x4a>
 8011bec:	461a      	mov	r2, r3
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	42a3      	cmp	r3, r4
 8011bf2:	d1fb      	bne.n	8011bec <_malloc_r+0xdc>
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	6053      	str	r3, [r2, #4]
 8011bf8:	e7de      	b.n	8011bb8 <_malloc_r+0xa8>
 8011bfa:	230c      	movs	r3, #12
 8011bfc:	4630      	mov	r0, r6
 8011bfe:	6033      	str	r3, [r6, #0]
 8011c00:	f000 f80c 	bl	8011c1c <__malloc_unlock>
 8011c04:	e794      	b.n	8011b30 <_malloc_r+0x20>
 8011c06:	6005      	str	r5, [r0, #0]
 8011c08:	e7d6      	b.n	8011bb8 <_malloc_r+0xa8>
 8011c0a:	bf00      	nop
 8011c0c:	20005d3c 	.word	0x20005d3c

08011c10 <__malloc_lock>:
 8011c10:	4801      	ldr	r0, [pc, #4]	@ (8011c18 <__malloc_lock+0x8>)
 8011c12:	f7ff b89a 	b.w	8010d4a <__retarget_lock_acquire_recursive>
 8011c16:	bf00      	nop
 8011c18:	20005d34 	.word	0x20005d34

08011c1c <__malloc_unlock>:
 8011c1c:	4801      	ldr	r0, [pc, #4]	@ (8011c24 <__malloc_unlock+0x8>)
 8011c1e:	f7ff b895 	b.w	8010d4c <__retarget_lock_release_recursive>
 8011c22:	bf00      	nop
 8011c24:	20005d34 	.word	0x20005d34

08011c28 <_Balloc>:
 8011c28:	b570      	push	{r4, r5, r6, lr}
 8011c2a:	69c6      	ldr	r6, [r0, #28]
 8011c2c:	4604      	mov	r4, r0
 8011c2e:	460d      	mov	r5, r1
 8011c30:	b976      	cbnz	r6, 8011c50 <_Balloc+0x28>
 8011c32:	2010      	movs	r0, #16
 8011c34:	f7ff ff42 	bl	8011abc <malloc>
 8011c38:	4602      	mov	r2, r0
 8011c3a:	61e0      	str	r0, [r4, #28]
 8011c3c:	b920      	cbnz	r0, 8011c48 <_Balloc+0x20>
 8011c3e:	4b18      	ldr	r3, [pc, #96]	@ (8011ca0 <_Balloc+0x78>)
 8011c40:	216b      	movs	r1, #107	@ 0x6b
 8011c42:	4818      	ldr	r0, [pc, #96]	@ (8011ca4 <_Balloc+0x7c>)
 8011c44:	f000 fda6 	bl	8012794 <__assert_func>
 8011c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c4c:	6006      	str	r6, [r0, #0]
 8011c4e:	60c6      	str	r6, [r0, #12]
 8011c50:	69e6      	ldr	r6, [r4, #28]
 8011c52:	68f3      	ldr	r3, [r6, #12]
 8011c54:	b183      	cbz	r3, 8011c78 <_Balloc+0x50>
 8011c56:	69e3      	ldr	r3, [r4, #28]
 8011c58:	68db      	ldr	r3, [r3, #12]
 8011c5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011c5e:	b9b8      	cbnz	r0, 8011c90 <_Balloc+0x68>
 8011c60:	2101      	movs	r1, #1
 8011c62:	4620      	mov	r0, r4
 8011c64:	fa01 f605 	lsl.w	r6, r1, r5
 8011c68:	1d72      	adds	r2, r6, #5
 8011c6a:	0092      	lsls	r2, r2, #2
 8011c6c:	f000 fdb0 	bl	80127d0 <_calloc_r>
 8011c70:	b160      	cbz	r0, 8011c8c <_Balloc+0x64>
 8011c72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c76:	e00e      	b.n	8011c96 <_Balloc+0x6e>
 8011c78:	2221      	movs	r2, #33	@ 0x21
 8011c7a:	2104      	movs	r1, #4
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	f000 fda7 	bl	80127d0 <_calloc_r>
 8011c82:	69e3      	ldr	r3, [r4, #28]
 8011c84:	60f0      	str	r0, [r6, #12]
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d1e4      	bne.n	8011c56 <_Balloc+0x2e>
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	bd70      	pop	{r4, r5, r6, pc}
 8011c90:	6802      	ldr	r2, [r0, #0]
 8011c92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c96:	2300      	movs	r3, #0
 8011c98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c9c:	e7f7      	b.n	8011c8e <_Balloc+0x66>
 8011c9e:	bf00      	nop
 8011ca0:	08013361 	.word	0x08013361
 8011ca4:	080133e1 	.word	0x080133e1

08011ca8 <_Bfree>:
 8011ca8:	b570      	push	{r4, r5, r6, lr}
 8011caa:	69c6      	ldr	r6, [r0, #28]
 8011cac:	4605      	mov	r5, r0
 8011cae:	460c      	mov	r4, r1
 8011cb0:	b976      	cbnz	r6, 8011cd0 <_Bfree+0x28>
 8011cb2:	2010      	movs	r0, #16
 8011cb4:	f7ff ff02 	bl	8011abc <malloc>
 8011cb8:	4602      	mov	r2, r0
 8011cba:	61e8      	str	r0, [r5, #28]
 8011cbc:	b920      	cbnz	r0, 8011cc8 <_Bfree+0x20>
 8011cbe:	4b09      	ldr	r3, [pc, #36]	@ (8011ce4 <_Bfree+0x3c>)
 8011cc0:	218f      	movs	r1, #143	@ 0x8f
 8011cc2:	4809      	ldr	r0, [pc, #36]	@ (8011ce8 <_Bfree+0x40>)
 8011cc4:	f000 fd66 	bl	8012794 <__assert_func>
 8011cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ccc:	6006      	str	r6, [r0, #0]
 8011cce:	60c6      	str	r6, [r0, #12]
 8011cd0:	b13c      	cbz	r4, 8011ce2 <_Bfree+0x3a>
 8011cd2:	69eb      	ldr	r3, [r5, #28]
 8011cd4:	6862      	ldr	r2, [r4, #4]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011cdc:	6021      	str	r1, [r4, #0]
 8011cde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011ce2:	bd70      	pop	{r4, r5, r6, pc}
 8011ce4:	08013361 	.word	0x08013361
 8011ce8:	080133e1 	.word	0x080133e1

08011cec <__multadd>:
 8011cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf0:	f101 0c14 	add.w	ip, r1, #20
 8011cf4:	4607      	mov	r7, r0
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	461e      	mov	r6, r3
 8011cfa:	690d      	ldr	r5, [r1, #16]
 8011cfc:	2000      	movs	r0, #0
 8011cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8011d02:	3001      	adds	r0, #1
 8011d04:	b299      	uxth	r1, r3
 8011d06:	4285      	cmp	r5, r0
 8011d08:	fb02 6101 	mla	r1, r2, r1, r6
 8011d0c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d10:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8011d14:	b289      	uxth	r1, r1
 8011d16:	fb02 3306 	mla	r3, r2, r6, r3
 8011d1a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011d1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d22:	f84c 1b04 	str.w	r1, [ip], #4
 8011d26:	dcea      	bgt.n	8011cfe <__multadd+0x12>
 8011d28:	b30e      	cbz	r6, 8011d6e <__multadd+0x82>
 8011d2a:	68a3      	ldr	r3, [r4, #8]
 8011d2c:	42ab      	cmp	r3, r5
 8011d2e:	dc19      	bgt.n	8011d64 <__multadd+0x78>
 8011d30:	6861      	ldr	r1, [r4, #4]
 8011d32:	4638      	mov	r0, r7
 8011d34:	3101      	adds	r1, #1
 8011d36:	f7ff ff77 	bl	8011c28 <_Balloc>
 8011d3a:	4680      	mov	r8, r0
 8011d3c:	b928      	cbnz	r0, 8011d4a <__multadd+0x5e>
 8011d3e:	4602      	mov	r2, r0
 8011d40:	4b0c      	ldr	r3, [pc, #48]	@ (8011d74 <__multadd+0x88>)
 8011d42:	21ba      	movs	r1, #186	@ 0xba
 8011d44:	480c      	ldr	r0, [pc, #48]	@ (8011d78 <__multadd+0x8c>)
 8011d46:	f000 fd25 	bl	8012794 <__assert_func>
 8011d4a:	6922      	ldr	r2, [r4, #16]
 8011d4c:	f104 010c 	add.w	r1, r4, #12
 8011d50:	300c      	adds	r0, #12
 8011d52:	3202      	adds	r2, #2
 8011d54:	0092      	lsls	r2, r2, #2
 8011d56:	f7ff f808 	bl	8010d6a <memcpy>
 8011d5a:	4621      	mov	r1, r4
 8011d5c:	4644      	mov	r4, r8
 8011d5e:	4638      	mov	r0, r7
 8011d60:	f7ff ffa2 	bl	8011ca8 <_Bfree>
 8011d64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011d68:	3501      	adds	r5, #1
 8011d6a:	615e      	str	r6, [r3, #20]
 8011d6c:	6125      	str	r5, [r4, #16]
 8011d6e:	4620      	mov	r0, r4
 8011d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d74:	080133d0 	.word	0x080133d0
 8011d78:	080133e1 	.word	0x080133e1

08011d7c <__hi0bits>:
 8011d7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011d80:	4603      	mov	r3, r0
 8011d82:	bf36      	itet	cc
 8011d84:	0403      	lslcc	r3, r0, #16
 8011d86:	2000      	movcs	r0, #0
 8011d88:	2010      	movcc	r0, #16
 8011d8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011d8e:	bf3c      	itt	cc
 8011d90:	021b      	lslcc	r3, r3, #8
 8011d92:	3008      	addcc	r0, #8
 8011d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011d98:	bf3c      	itt	cc
 8011d9a:	011b      	lslcc	r3, r3, #4
 8011d9c:	3004      	addcc	r0, #4
 8011d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011da2:	bf3c      	itt	cc
 8011da4:	009b      	lslcc	r3, r3, #2
 8011da6:	3002      	addcc	r0, #2
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	db05      	blt.n	8011db8 <__hi0bits+0x3c>
 8011dac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011db0:	f100 0001 	add.w	r0, r0, #1
 8011db4:	bf08      	it	eq
 8011db6:	2020      	moveq	r0, #32
 8011db8:	4770      	bx	lr

08011dba <__lo0bits>:
 8011dba:	6803      	ldr	r3, [r0, #0]
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	f013 0007 	ands.w	r0, r3, #7
 8011dc2:	d00b      	beq.n	8011ddc <__lo0bits+0x22>
 8011dc4:	07d9      	lsls	r1, r3, #31
 8011dc6:	d421      	bmi.n	8011e0c <__lo0bits+0x52>
 8011dc8:	0798      	lsls	r0, r3, #30
 8011dca:	bf47      	ittee	mi
 8011dcc:	085b      	lsrmi	r3, r3, #1
 8011dce:	2001      	movmi	r0, #1
 8011dd0:	089b      	lsrpl	r3, r3, #2
 8011dd2:	2002      	movpl	r0, #2
 8011dd4:	bf4c      	ite	mi
 8011dd6:	6013      	strmi	r3, [r2, #0]
 8011dd8:	6013      	strpl	r3, [r2, #0]
 8011dda:	4770      	bx	lr
 8011ddc:	b299      	uxth	r1, r3
 8011dde:	b909      	cbnz	r1, 8011de4 <__lo0bits+0x2a>
 8011de0:	0c1b      	lsrs	r3, r3, #16
 8011de2:	2010      	movs	r0, #16
 8011de4:	b2d9      	uxtb	r1, r3
 8011de6:	b909      	cbnz	r1, 8011dec <__lo0bits+0x32>
 8011de8:	3008      	adds	r0, #8
 8011dea:	0a1b      	lsrs	r3, r3, #8
 8011dec:	0719      	lsls	r1, r3, #28
 8011dee:	bf04      	itt	eq
 8011df0:	091b      	lsreq	r3, r3, #4
 8011df2:	3004      	addeq	r0, #4
 8011df4:	0799      	lsls	r1, r3, #30
 8011df6:	bf04      	itt	eq
 8011df8:	089b      	lsreq	r3, r3, #2
 8011dfa:	3002      	addeq	r0, #2
 8011dfc:	07d9      	lsls	r1, r3, #31
 8011dfe:	d403      	bmi.n	8011e08 <__lo0bits+0x4e>
 8011e00:	085b      	lsrs	r3, r3, #1
 8011e02:	f100 0001 	add.w	r0, r0, #1
 8011e06:	d003      	beq.n	8011e10 <__lo0bits+0x56>
 8011e08:	6013      	str	r3, [r2, #0]
 8011e0a:	4770      	bx	lr
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	4770      	bx	lr
 8011e10:	2020      	movs	r0, #32
 8011e12:	4770      	bx	lr

08011e14 <__i2b>:
 8011e14:	b510      	push	{r4, lr}
 8011e16:	460c      	mov	r4, r1
 8011e18:	2101      	movs	r1, #1
 8011e1a:	f7ff ff05 	bl	8011c28 <_Balloc>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	b928      	cbnz	r0, 8011e2e <__i2b+0x1a>
 8011e22:	4b05      	ldr	r3, [pc, #20]	@ (8011e38 <__i2b+0x24>)
 8011e24:	f240 1145 	movw	r1, #325	@ 0x145
 8011e28:	4804      	ldr	r0, [pc, #16]	@ (8011e3c <__i2b+0x28>)
 8011e2a:	f000 fcb3 	bl	8012794 <__assert_func>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	6144      	str	r4, [r0, #20]
 8011e32:	6103      	str	r3, [r0, #16]
 8011e34:	bd10      	pop	{r4, pc}
 8011e36:	bf00      	nop
 8011e38:	080133d0 	.word	0x080133d0
 8011e3c:	080133e1 	.word	0x080133e1

08011e40 <__multiply>:
 8011e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e44:	4614      	mov	r4, r2
 8011e46:	690a      	ldr	r2, [r1, #16]
 8011e48:	460f      	mov	r7, r1
 8011e4a:	b085      	sub	sp, #20
 8011e4c:	6923      	ldr	r3, [r4, #16]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	bfa2      	ittt	ge
 8011e52:	4623      	movge	r3, r4
 8011e54:	460c      	movge	r4, r1
 8011e56:	461f      	movge	r7, r3
 8011e58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011e5c:	68a3      	ldr	r3, [r4, #8]
 8011e5e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011e62:	6861      	ldr	r1, [r4, #4]
 8011e64:	eb0a 0609 	add.w	r6, sl, r9
 8011e68:	42b3      	cmp	r3, r6
 8011e6a:	bfb8      	it	lt
 8011e6c:	3101      	addlt	r1, #1
 8011e6e:	f7ff fedb 	bl	8011c28 <_Balloc>
 8011e72:	b930      	cbnz	r0, 8011e82 <__multiply+0x42>
 8011e74:	4602      	mov	r2, r0
 8011e76:	4b45      	ldr	r3, [pc, #276]	@ (8011f8c <__multiply+0x14c>)
 8011e78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011e7c:	4844      	ldr	r0, [pc, #272]	@ (8011f90 <__multiply+0x150>)
 8011e7e:	f000 fc89 	bl	8012794 <__assert_func>
 8011e82:	f100 0514 	add.w	r5, r0, #20
 8011e86:	2200      	movs	r2, #0
 8011e88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011e8c:	462b      	mov	r3, r5
 8011e8e:	4543      	cmp	r3, r8
 8011e90:	d321      	bcc.n	8011ed6 <__multiply+0x96>
 8011e92:	f107 0114 	add.w	r1, r7, #20
 8011e96:	f104 0214 	add.w	r2, r4, #20
 8011e9a:	f104 0715 	add.w	r7, r4, #21
 8011e9e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011ea2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011ea6:	9302      	str	r3, [sp, #8]
 8011ea8:	1b13      	subs	r3, r2, r4
 8011eaa:	3b15      	subs	r3, #21
 8011eac:	f023 0303 	bic.w	r3, r3, #3
 8011eb0:	3304      	adds	r3, #4
 8011eb2:	42ba      	cmp	r2, r7
 8011eb4:	bf38      	it	cc
 8011eb6:	2304      	movcc	r3, #4
 8011eb8:	9301      	str	r3, [sp, #4]
 8011eba:	9b02      	ldr	r3, [sp, #8]
 8011ebc:	9103      	str	r1, [sp, #12]
 8011ebe:	428b      	cmp	r3, r1
 8011ec0:	d80c      	bhi.n	8011edc <__multiply+0x9c>
 8011ec2:	2e00      	cmp	r6, #0
 8011ec4:	dd03      	ble.n	8011ece <__multiply+0x8e>
 8011ec6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d05b      	beq.n	8011f86 <__multiply+0x146>
 8011ece:	6106      	str	r6, [r0, #16]
 8011ed0:	b005      	add	sp, #20
 8011ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed6:	f843 2b04 	str.w	r2, [r3], #4
 8011eda:	e7d8      	b.n	8011e8e <__multiply+0x4e>
 8011edc:	f8b1 a000 	ldrh.w	sl, [r1]
 8011ee0:	f1ba 0f00 	cmp.w	sl, #0
 8011ee4:	d024      	beq.n	8011f30 <__multiply+0xf0>
 8011ee6:	f104 0e14 	add.w	lr, r4, #20
 8011eea:	46a9      	mov	r9, r5
 8011eec:	f04f 0c00 	mov.w	ip, #0
 8011ef0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011ef4:	f8d9 3000 	ldr.w	r3, [r9]
 8011ef8:	fa1f fb87 	uxth.w	fp, r7
 8011efc:	4572      	cmp	r2, lr
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	fb0a 330b 	mla	r3, sl, fp, r3
 8011f04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011f08:	f8d9 7000 	ldr.w	r7, [r9]
 8011f0c:	4463      	add	r3, ip
 8011f0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011f12:	fb0a c70b 	mla	r7, sl, fp, ip
 8011f16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011f1a:	b29b      	uxth	r3, r3
 8011f1c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011f20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011f24:	f849 3b04 	str.w	r3, [r9], #4
 8011f28:	d8e2      	bhi.n	8011ef0 <__multiply+0xb0>
 8011f2a:	9b01      	ldr	r3, [sp, #4]
 8011f2c:	f845 c003 	str.w	ip, [r5, r3]
 8011f30:	9b03      	ldr	r3, [sp, #12]
 8011f32:	3104      	adds	r1, #4
 8011f34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011f38:	f1b9 0f00 	cmp.w	r9, #0
 8011f3c:	d021      	beq.n	8011f82 <__multiply+0x142>
 8011f3e:	682b      	ldr	r3, [r5, #0]
 8011f40:	f104 0c14 	add.w	ip, r4, #20
 8011f44:	46ae      	mov	lr, r5
 8011f46:	f04f 0a00 	mov.w	sl, #0
 8011f4a:	f8bc b000 	ldrh.w	fp, [ip]
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011f54:	fb09 770b 	mla	r7, r9, fp, r7
 8011f58:	4457      	add	r7, sl
 8011f5a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011f5e:	f84e 3b04 	str.w	r3, [lr], #4
 8011f62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011f66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f6a:	f8be 3000 	ldrh.w	r3, [lr]
 8011f6e:	4562      	cmp	r2, ip
 8011f70:	fb09 330a 	mla	r3, r9, sl, r3
 8011f74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f7c:	d8e5      	bhi.n	8011f4a <__multiply+0x10a>
 8011f7e:	9f01      	ldr	r7, [sp, #4]
 8011f80:	51eb      	str	r3, [r5, r7]
 8011f82:	3504      	adds	r5, #4
 8011f84:	e799      	b.n	8011eba <__multiply+0x7a>
 8011f86:	3e01      	subs	r6, #1
 8011f88:	e79b      	b.n	8011ec2 <__multiply+0x82>
 8011f8a:	bf00      	nop
 8011f8c:	080133d0 	.word	0x080133d0
 8011f90:	080133e1 	.word	0x080133e1

08011f94 <__pow5mult>:
 8011f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f98:	4615      	mov	r5, r2
 8011f9a:	f012 0203 	ands.w	r2, r2, #3
 8011f9e:	4607      	mov	r7, r0
 8011fa0:	460e      	mov	r6, r1
 8011fa2:	d007      	beq.n	8011fb4 <__pow5mult+0x20>
 8011fa4:	3a01      	subs	r2, #1
 8011fa6:	4c25      	ldr	r4, [pc, #148]	@ (801203c <__pow5mult+0xa8>)
 8011fa8:	2300      	movs	r3, #0
 8011faa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011fae:	f7ff fe9d 	bl	8011cec <__multadd>
 8011fb2:	4606      	mov	r6, r0
 8011fb4:	10ad      	asrs	r5, r5, #2
 8011fb6:	d03d      	beq.n	8012034 <__pow5mult+0xa0>
 8011fb8:	69fc      	ldr	r4, [r7, #28]
 8011fba:	b97c      	cbnz	r4, 8011fdc <__pow5mult+0x48>
 8011fbc:	2010      	movs	r0, #16
 8011fbe:	f7ff fd7d 	bl	8011abc <malloc>
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	61f8      	str	r0, [r7, #28]
 8011fc6:	b928      	cbnz	r0, 8011fd4 <__pow5mult+0x40>
 8011fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8012040 <__pow5mult+0xac>)
 8011fca:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011fce:	481d      	ldr	r0, [pc, #116]	@ (8012044 <__pow5mult+0xb0>)
 8011fd0:	f000 fbe0 	bl	8012794 <__assert_func>
 8011fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011fd8:	6004      	str	r4, [r0, #0]
 8011fda:	60c4      	str	r4, [r0, #12]
 8011fdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011fe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011fe4:	b94c      	cbnz	r4, 8011ffa <__pow5mult+0x66>
 8011fe6:	f240 2171 	movw	r1, #625	@ 0x271
 8011fea:	4638      	mov	r0, r7
 8011fec:	f7ff ff12 	bl	8011e14 <__i2b>
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ff8:	6003      	str	r3, [r0, #0]
 8011ffa:	f04f 0900 	mov.w	r9, #0
 8011ffe:	07eb      	lsls	r3, r5, #31
 8012000:	d50a      	bpl.n	8012018 <__pow5mult+0x84>
 8012002:	4631      	mov	r1, r6
 8012004:	4622      	mov	r2, r4
 8012006:	4638      	mov	r0, r7
 8012008:	f7ff ff1a 	bl	8011e40 <__multiply>
 801200c:	4680      	mov	r8, r0
 801200e:	4631      	mov	r1, r6
 8012010:	4638      	mov	r0, r7
 8012012:	4646      	mov	r6, r8
 8012014:	f7ff fe48 	bl	8011ca8 <_Bfree>
 8012018:	106d      	asrs	r5, r5, #1
 801201a:	d00b      	beq.n	8012034 <__pow5mult+0xa0>
 801201c:	6820      	ldr	r0, [r4, #0]
 801201e:	b938      	cbnz	r0, 8012030 <__pow5mult+0x9c>
 8012020:	4622      	mov	r2, r4
 8012022:	4621      	mov	r1, r4
 8012024:	4638      	mov	r0, r7
 8012026:	f7ff ff0b 	bl	8011e40 <__multiply>
 801202a:	6020      	str	r0, [r4, #0]
 801202c:	f8c0 9000 	str.w	r9, [r0]
 8012030:	4604      	mov	r4, r0
 8012032:	e7e4      	b.n	8011ffe <__pow5mult+0x6a>
 8012034:	4630      	mov	r0, r6
 8012036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801203a:	bf00      	nop
 801203c:	0801343c 	.word	0x0801343c
 8012040:	08013361 	.word	0x08013361
 8012044:	080133e1 	.word	0x080133e1

08012048 <__lshift>:
 8012048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801204c:	460c      	mov	r4, r1
 801204e:	4607      	mov	r7, r0
 8012050:	4691      	mov	r9, r2
 8012052:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012056:	6923      	ldr	r3, [r4, #16]
 8012058:	6849      	ldr	r1, [r1, #4]
 801205a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801205e:	68a3      	ldr	r3, [r4, #8]
 8012060:	f108 0601 	add.w	r6, r8, #1
 8012064:	42b3      	cmp	r3, r6
 8012066:	db0b      	blt.n	8012080 <__lshift+0x38>
 8012068:	4638      	mov	r0, r7
 801206a:	f7ff fddd 	bl	8011c28 <_Balloc>
 801206e:	4605      	mov	r5, r0
 8012070:	b948      	cbnz	r0, 8012086 <__lshift+0x3e>
 8012072:	4602      	mov	r2, r0
 8012074:	4b28      	ldr	r3, [pc, #160]	@ (8012118 <__lshift+0xd0>)
 8012076:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801207a:	4828      	ldr	r0, [pc, #160]	@ (801211c <__lshift+0xd4>)
 801207c:	f000 fb8a 	bl	8012794 <__assert_func>
 8012080:	3101      	adds	r1, #1
 8012082:	005b      	lsls	r3, r3, #1
 8012084:	e7ee      	b.n	8012064 <__lshift+0x1c>
 8012086:	2300      	movs	r3, #0
 8012088:	f100 0114 	add.w	r1, r0, #20
 801208c:	f100 0210 	add.w	r2, r0, #16
 8012090:	4618      	mov	r0, r3
 8012092:	4553      	cmp	r3, sl
 8012094:	db33      	blt.n	80120fe <__lshift+0xb6>
 8012096:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801209a:	f104 0314 	add.w	r3, r4, #20
 801209e:	6920      	ldr	r0, [r4, #16]
 80120a0:	f019 091f 	ands.w	r9, r9, #31
 80120a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80120a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80120ac:	d02b      	beq.n	8012106 <__lshift+0xbe>
 80120ae:	f1c9 0e20 	rsb	lr, r9, #32
 80120b2:	468a      	mov	sl, r1
 80120b4:	2200      	movs	r2, #0
 80120b6:	6818      	ldr	r0, [r3, #0]
 80120b8:	fa00 f009 	lsl.w	r0, r0, r9
 80120bc:	4310      	orrs	r0, r2
 80120be:	f84a 0b04 	str.w	r0, [sl], #4
 80120c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80120c6:	459c      	cmp	ip, r3
 80120c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80120cc:	d8f3      	bhi.n	80120b6 <__lshift+0x6e>
 80120ce:	ebac 0304 	sub.w	r3, ip, r4
 80120d2:	f104 0015 	add.w	r0, r4, #21
 80120d6:	3b15      	subs	r3, #21
 80120d8:	f023 0303 	bic.w	r3, r3, #3
 80120dc:	3304      	adds	r3, #4
 80120de:	4584      	cmp	ip, r0
 80120e0:	bf38      	it	cc
 80120e2:	2304      	movcc	r3, #4
 80120e4:	50ca      	str	r2, [r1, r3]
 80120e6:	b10a      	cbz	r2, 80120ec <__lshift+0xa4>
 80120e8:	f108 0602 	add.w	r6, r8, #2
 80120ec:	3e01      	subs	r6, #1
 80120ee:	4638      	mov	r0, r7
 80120f0:	4621      	mov	r1, r4
 80120f2:	612e      	str	r6, [r5, #16]
 80120f4:	f7ff fdd8 	bl	8011ca8 <_Bfree>
 80120f8:	4628      	mov	r0, r5
 80120fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120fe:	3301      	adds	r3, #1
 8012100:	f842 0f04 	str.w	r0, [r2, #4]!
 8012104:	e7c5      	b.n	8012092 <__lshift+0x4a>
 8012106:	3904      	subs	r1, #4
 8012108:	f853 2b04 	ldr.w	r2, [r3], #4
 801210c:	459c      	cmp	ip, r3
 801210e:	f841 2f04 	str.w	r2, [r1, #4]!
 8012112:	d8f9      	bhi.n	8012108 <__lshift+0xc0>
 8012114:	e7ea      	b.n	80120ec <__lshift+0xa4>
 8012116:	bf00      	nop
 8012118:	080133d0 	.word	0x080133d0
 801211c:	080133e1 	.word	0x080133e1

08012120 <__mcmp>:
 8012120:	4603      	mov	r3, r0
 8012122:	690a      	ldr	r2, [r1, #16]
 8012124:	6900      	ldr	r0, [r0, #16]
 8012126:	1a80      	subs	r0, r0, r2
 8012128:	b530      	push	{r4, r5, lr}
 801212a:	d10e      	bne.n	801214a <__mcmp+0x2a>
 801212c:	3314      	adds	r3, #20
 801212e:	3114      	adds	r1, #20
 8012130:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012134:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012138:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801213c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012140:	4295      	cmp	r5, r2
 8012142:	d003      	beq.n	801214c <__mcmp+0x2c>
 8012144:	d205      	bcs.n	8012152 <__mcmp+0x32>
 8012146:	f04f 30ff 	mov.w	r0, #4294967295
 801214a:	bd30      	pop	{r4, r5, pc}
 801214c:	42a3      	cmp	r3, r4
 801214e:	d3f3      	bcc.n	8012138 <__mcmp+0x18>
 8012150:	e7fb      	b.n	801214a <__mcmp+0x2a>
 8012152:	2001      	movs	r0, #1
 8012154:	e7f9      	b.n	801214a <__mcmp+0x2a>
	...

08012158 <__mdiff>:
 8012158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801215c:	4689      	mov	r9, r1
 801215e:	4606      	mov	r6, r0
 8012160:	4611      	mov	r1, r2
 8012162:	4614      	mov	r4, r2
 8012164:	4648      	mov	r0, r9
 8012166:	f7ff ffdb 	bl	8012120 <__mcmp>
 801216a:	1e05      	subs	r5, r0, #0
 801216c:	d112      	bne.n	8012194 <__mdiff+0x3c>
 801216e:	4629      	mov	r1, r5
 8012170:	4630      	mov	r0, r6
 8012172:	f7ff fd59 	bl	8011c28 <_Balloc>
 8012176:	4602      	mov	r2, r0
 8012178:	b928      	cbnz	r0, 8012186 <__mdiff+0x2e>
 801217a:	4b41      	ldr	r3, [pc, #260]	@ (8012280 <__mdiff+0x128>)
 801217c:	f240 2137 	movw	r1, #567	@ 0x237
 8012180:	4840      	ldr	r0, [pc, #256]	@ (8012284 <__mdiff+0x12c>)
 8012182:	f000 fb07 	bl	8012794 <__assert_func>
 8012186:	2301      	movs	r3, #1
 8012188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801218c:	4610      	mov	r0, r2
 801218e:	b003      	add	sp, #12
 8012190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012194:	bfbc      	itt	lt
 8012196:	464b      	movlt	r3, r9
 8012198:	46a1      	movlt	r9, r4
 801219a:	4630      	mov	r0, r6
 801219c:	bfb8      	it	lt
 801219e:	2501      	movlt	r5, #1
 80121a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80121a4:	bfb4      	ite	lt
 80121a6:	461c      	movlt	r4, r3
 80121a8:	2500      	movge	r5, #0
 80121aa:	f7ff fd3d 	bl	8011c28 <_Balloc>
 80121ae:	4602      	mov	r2, r0
 80121b0:	b918      	cbnz	r0, 80121ba <__mdiff+0x62>
 80121b2:	4b33      	ldr	r3, [pc, #204]	@ (8012280 <__mdiff+0x128>)
 80121b4:	f240 2145 	movw	r1, #581	@ 0x245
 80121b8:	e7e2      	b.n	8012180 <__mdiff+0x28>
 80121ba:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80121be:	f104 0e14 	add.w	lr, r4, #20
 80121c2:	6926      	ldr	r6, [r4, #16]
 80121c4:	f100 0b14 	add.w	fp, r0, #20
 80121c8:	60c5      	str	r5, [r0, #12]
 80121ca:	f109 0514 	add.w	r5, r9, #20
 80121ce:	f109 0310 	add.w	r3, r9, #16
 80121d2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80121d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80121da:	46d9      	mov	r9, fp
 80121dc:	f04f 0c00 	mov.w	ip, #0
 80121e0:	9301      	str	r3, [sp, #4]
 80121e2:	9b01      	ldr	r3, [sp, #4]
 80121e4:	f85e 0b04 	ldr.w	r0, [lr], #4
 80121e8:	f853 af04 	ldr.w	sl, [r3, #4]!
 80121ec:	4576      	cmp	r6, lr
 80121ee:	9301      	str	r3, [sp, #4]
 80121f0:	fa1f f38a 	uxth.w	r3, sl
 80121f4:	4619      	mov	r1, r3
 80121f6:	b283      	uxth	r3, r0
 80121f8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80121fc:	eba1 0303 	sub.w	r3, r1, r3
 8012200:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012204:	4463      	add	r3, ip
 8012206:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801220a:	b29b      	uxth	r3, r3
 801220c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012210:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012214:	f849 3b04 	str.w	r3, [r9], #4
 8012218:	d8e3      	bhi.n	80121e2 <__mdiff+0x8a>
 801221a:	1b33      	subs	r3, r6, r4
 801221c:	3415      	adds	r4, #21
 801221e:	3b15      	subs	r3, #21
 8012220:	f023 0303 	bic.w	r3, r3, #3
 8012224:	3304      	adds	r3, #4
 8012226:	42a6      	cmp	r6, r4
 8012228:	bf38      	it	cc
 801222a:	2304      	movcc	r3, #4
 801222c:	441d      	add	r5, r3
 801222e:	445b      	add	r3, fp
 8012230:	462c      	mov	r4, r5
 8012232:	461e      	mov	r6, r3
 8012234:	4544      	cmp	r4, r8
 8012236:	d30e      	bcc.n	8012256 <__mdiff+0xfe>
 8012238:	f108 0103 	add.w	r1, r8, #3
 801223c:	1b49      	subs	r1, r1, r5
 801223e:	3d03      	subs	r5, #3
 8012240:	f021 0103 	bic.w	r1, r1, #3
 8012244:	45a8      	cmp	r8, r5
 8012246:	bf38      	it	cc
 8012248:	2100      	movcc	r1, #0
 801224a:	440b      	add	r3, r1
 801224c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012250:	b199      	cbz	r1, 801227a <__mdiff+0x122>
 8012252:	6117      	str	r7, [r2, #16]
 8012254:	e79a      	b.n	801218c <__mdiff+0x34>
 8012256:	f854 1b04 	ldr.w	r1, [r4], #4
 801225a:	46e6      	mov	lr, ip
 801225c:	fa1f fc81 	uxth.w	ip, r1
 8012260:	0c08      	lsrs	r0, r1, #16
 8012262:	4471      	add	r1, lr
 8012264:	44f4      	add	ip, lr
 8012266:	b289      	uxth	r1, r1
 8012268:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801226c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012270:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012274:	f846 1b04 	str.w	r1, [r6], #4
 8012278:	e7dc      	b.n	8012234 <__mdiff+0xdc>
 801227a:	3f01      	subs	r7, #1
 801227c:	e7e6      	b.n	801224c <__mdiff+0xf4>
 801227e:	bf00      	nop
 8012280:	080133d0 	.word	0x080133d0
 8012284:	080133e1 	.word	0x080133e1

08012288 <__d2b>:
 8012288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801228c:	460f      	mov	r7, r1
 801228e:	2101      	movs	r1, #1
 8012290:	4616      	mov	r6, r2
 8012292:	ec59 8b10 	vmov	r8, r9, d0
 8012296:	f7ff fcc7 	bl	8011c28 <_Balloc>
 801229a:	4604      	mov	r4, r0
 801229c:	b930      	cbnz	r0, 80122ac <__d2b+0x24>
 801229e:	4602      	mov	r2, r0
 80122a0:	4b23      	ldr	r3, [pc, #140]	@ (8012330 <__d2b+0xa8>)
 80122a2:	f240 310f 	movw	r1, #783	@ 0x30f
 80122a6:	4823      	ldr	r0, [pc, #140]	@ (8012334 <__d2b+0xac>)
 80122a8:	f000 fa74 	bl	8012794 <__assert_func>
 80122ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80122b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80122b4:	b10d      	cbz	r5, 80122ba <__d2b+0x32>
 80122b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80122ba:	9301      	str	r3, [sp, #4]
 80122bc:	f1b8 0300 	subs.w	r3, r8, #0
 80122c0:	d023      	beq.n	801230a <__d2b+0x82>
 80122c2:	4668      	mov	r0, sp
 80122c4:	9300      	str	r3, [sp, #0]
 80122c6:	f7ff fd78 	bl	8011dba <__lo0bits>
 80122ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80122ce:	b1d0      	cbz	r0, 8012306 <__d2b+0x7e>
 80122d0:	f1c0 0320 	rsb	r3, r0, #32
 80122d4:	fa02 f303 	lsl.w	r3, r2, r3
 80122d8:	40c2      	lsrs	r2, r0
 80122da:	430b      	orrs	r3, r1
 80122dc:	9201      	str	r2, [sp, #4]
 80122de:	6163      	str	r3, [r4, #20]
 80122e0:	9b01      	ldr	r3, [sp, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	61a3      	str	r3, [r4, #24]
 80122e6:	bf0c      	ite	eq
 80122e8:	2201      	moveq	r2, #1
 80122ea:	2202      	movne	r2, #2
 80122ec:	6122      	str	r2, [r4, #16]
 80122ee:	b1a5      	cbz	r5, 801231a <__d2b+0x92>
 80122f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80122f4:	4405      	add	r5, r0
 80122f6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80122fa:	603d      	str	r5, [r7, #0]
 80122fc:	6030      	str	r0, [r6, #0]
 80122fe:	4620      	mov	r0, r4
 8012300:	b003      	add	sp, #12
 8012302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012306:	6161      	str	r1, [r4, #20]
 8012308:	e7ea      	b.n	80122e0 <__d2b+0x58>
 801230a:	a801      	add	r0, sp, #4
 801230c:	f7ff fd55 	bl	8011dba <__lo0bits>
 8012310:	9b01      	ldr	r3, [sp, #4]
 8012312:	3020      	adds	r0, #32
 8012314:	2201      	movs	r2, #1
 8012316:	6163      	str	r3, [r4, #20]
 8012318:	e7e8      	b.n	80122ec <__d2b+0x64>
 801231a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801231e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012322:	6038      	str	r0, [r7, #0]
 8012324:	6918      	ldr	r0, [r3, #16]
 8012326:	f7ff fd29 	bl	8011d7c <__hi0bits>
 801232a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801232e:	e7e5      	b.n	80122fc <__d2b+0x74>
 8012330:	080133d0 	.word	0x080133d0
 8012334:	080133e1 	.word	0x080133e1

08012338 <__ssputs_r>:
 8012338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801233c:	461f      	mov	r7, r3
 801233e:	688e      	ldr	r6, [r1, #8]
 8012340:	4682      	mov	sl, r0
 8012342:	460c      	mov	r4, r1
 8012344:	42be      	cmp	r6, r7
 8012346:	4690      	mov	r8, r2
 8012348:	680b      	ldr	r3, [r1, #0]
 801234a:	d82d      	bhi.n	80123a8 <__ssputs_r+0x70>
 801234c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012350:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012354:	d026      	beq.n	80123a4 <__ssputs_r+0x6c>
 8012356:	6965      	ldr	r5, [r4, #20]
 8012358:	6909      	ldr	r1, [r1, #16]
 801235a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801235e:	eba3 0901 	sub.w	r9, r3, r1
 8012362:	1c7b      	adds	r3, r7, #1
 8012364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012368:	444b      	add	r3, r9
 801236a:	106d      	asrs	r5, r5, #1
 801236c:	429d      	cmp	r5, r3
 801236e:	bf38      	it	cc
 8012370:	461d      	movcc	r5, r3
 8012372:	0553      	lsls	r3, r2, #21
 8012374:	d527      	bpl.n	80123c6 <__ssputs_r+0x8e>
 8012376:	4629      	mov	r1, r5
 8012378:	f7ff fbca 	bl	8011b10 <_malloc_r>
 801237c:	4606      	mov	r6, r0
 801237e:	b360      	cbz	r0, 80123da <__ssputs_r+0xa2>
 8012380:	464a      	mov	r2, r9
 8012382:	6921      	ldr	r1, [r4, #16]
 8012384:	f7fe fcf1 	bl	8010d6a <memcpy>
 8012388:	89a3      	ldrh	r3, [r4, #12]
 801238a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801238e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012392:	81a3      	strh	r3, [r4, #12]
 8012394:	6126      	str	r6, [r4, #16]
 8012396:	444e      	add	r6, r9
 8012398:	6165      	str	r5, [r4, #20]
 801239a:	eba5 0509 	sub.w	r5, r5, r9
 801239e:	6026      	str	r6, [r4, #0]
 80123a0:	463e      	mov	r6, r7
 80123a2:	60a5      	str	r5, [r4, #8]
 80123a4:	42be      	cmp	r6, r7
 80123a6:	d900      	bls.n	80123aa <__ssputs_r+0x72>
 80123a8:	463e      	mov	r6, r7
 80123aa:	4632      	mov	r2, r6
 80123ac:	4641      	mov	r1, r8
 80123ae:	6820      	ldr	r0, [r4, #0]
 80123b0:	f000 f9c6 	bl	8012740 <memmove>
 80123b4:	68a3      	ldr	r3, [r4, #8]
 80123b6:	2000      	movs	r0, #0
 80123b8:	1b9b      	subs	r3, r3, r6
 80123ba:	60a3      	str	r3, [r4, #8]
 80123bc:	6823      	ldr	r3, [r4, #0]
 80123be:	4433      	add	r3, r6
 80123c0:	6023      	str	r3, [r4, #0]
 80123c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c6:	462a      	mov	r2, r5
 80123c8:	f000 fa28 	bl	801281c <_realloc_r>
 80123cc:	4606      	mov	r6, r0
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d1e0      	bne.n	8012394 <__ssputs_r+0x5c>
 80123d2:	6921      	ldr	r1, [r4, #16]
 80123d4:	4650      	mov	r0, sl
 80123d6:	f7ff fb27 	bl	8011a28 <_free_r>
 80123da:	230c      	movs	r3, #12
 80123dc:	f04f 30ff 	mov.w	r0, #4294967295
 80123e0:	f8ca 3000 	str.w	r3, [sl]
 80123e4:	89a3      	ldrh	r3, [r4, #12]
 80123e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123ea:	81a3      	strh	r3, [r4, #12]
 80123ec:	e7e9      	b.n	80123c2 <__ssputs_r+0x8a>
	...

080123f0 <_svfiprintf_r>:
 80123f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f4:	4698      	mov	r8, r3
 80123f6:	898b      	ldrh	r3, [r1, #12]
 80123f8:	b09d      	sub	sp, #116	@ 0x74
 80123fa:	4607      	mov	r7, r0
 80123fc:	061b      	lsls	r3, r3, #24
 80123fe:	460d      	mov	r5, r1
 8012400:	4614      	mov	r4, r2
 8012402:	d510      	bpl.n	8012426 <_svfiprintf_r+0x36>
 8012404:	690b      	ldr	r3, [r1, #16]
 8012406:	b973      	cbnz	r3, 8012426 <_svfiprintf_r+0x36>
 8012408:	2140      	movs	r1, #64	@ 0x40
 801240a:	f7ff fb81 	bl	8011b10 <_malloc_r>
 801240e:	6028      	str	r0, [r5, #0]
 8012410:	6128      	str	r0, [r5, #16]
 8012412:	b930      	cbnz	r0, 8012422 <_svfiprintf_r+0x32>
 8012414:	230c      	movs	r3, #12
 8012416:	603b      	str	r3, [r7, #0]
 8012418:	f04f 30ff 	mov.w	r0, #4294967295
 801241c:	b01d      	add	sp, #116	@ 0x74
 801241e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012422:	2340      	movs	r3, #64	@ 0x40
 8012424:	616b      	str	r3, [r5, #20]
 8012426:	2300      	movs	r3, #0
 8012428:	f8cd 800c 	str.w	r8, [sp, #12]
 801242c:	f04f 0901 	mov.w	r9, #1
 8012430:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80125d4 <_svfiprintf_r+0x1e4>
 8012434:	9309      	str	r3, [sp, #36]	@ 0x24
 8012436:	2320      	movs	r3, #32
 8012438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801243c:	2330      	movs	r3, #48	@ 0x30
 801243e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012442:	4623      	mov	r3, r4
 8012444:	469a      	mov	sl, r3
 8012446:	f813 2b01 	ldrb.w	r2, [r3], #1
 801244a:	b10a      	cbz	r2, 8012450 <_svfiprintf_r+0x60>
 801244c:	2a25      	cmp	r2, #37	@ 0x25
 801244e:	d1f9      	bne.n	8012444 <_svfiprintf_r+0x54>
 8012450:	ebba 0b04 	subs.w	fp, sl, r4
 8012454:	d00b      	beq.n	801246e <_svfiprintf_r+0x7e>
 8012456:	465b      	mov	r3, fp
 8012458:	4622      	mov	r2, r4
 801245a:	4629      	mov	r1, r5
 801245c:	4638      	mov	r0, r7
 801245e:	f7ff ff6b 	bl	8012338 <__ssputs_r>
 8012462:	3001      	adds	r0, #1
 8012464:	f000 80a7 	beq.w	80125b6 <_svfiprintf_r+0x1c6>
 8012468:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801246a:	445a      	add	r2, fp
 801246c:	9209      	str	r2, [sp, #36]	@ 0x24
 801246e:	f89a 3000 	ldrb.w	r3, [sl]
 8012472:	2b00      	cmp	r3, #0
 8012474:	f000 809f 	beq.w	80125b6 <_svfiprintf_r+0x1c6>
 8012478:	2300      	movs	r3, #0
 801247a:	f04f 32ff 	mov.w	r2, #4294967295
 801247e:	f10a 0a01 	add.w	sl, sl, #1
 8012482:	9304      	str	r3, [sp, #16]
 8012484:	9307      	str	r3, [sp, #28]
 8012486:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801248a:	931a      	str	r3, [sp, #104]	@ 0x68
 801248c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012490:	4654      	mov	r4, sl
 8012492:	2205      	movs	r2, #5
 8012494:	484f      	ldr	r0, [pc, #316]	@ (80125d4 <_svfiprintf_r+0x1e4>)
 8012496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801249a:	f7fe fc58 	bl	8010d4e <memchr>
 801249e:	9a04      	ldr	r2, [sp, #16]
 80124a0:	b9d8      	cbnz	r0, 80124da <_svfiprintf_r+0xea>
 80124a2:	06d0      	lsls	r0, r2, #27
 80124a4:	bf44      	itt	mi
 80124a6:	2320      	movmi	r3, #32
 80124a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124ac:	0711      	lsls	r1, r2, #28
 80124ae:	bf44      	itt	mi
 80124b0:	232b      	movmi	r3, #43	@ 0x2b
 80124b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124b6:	f89a 3000 	ldrb.w	r3, [sl]
 80124ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80124bc:	d015      	beq.n	80124ea <_svfiprintf_r+0xfa>
 80124be:	9a07      	ldr	r2, [sp, #28]
 80124c0:	4654      	mov	r4, sl
 80124c2:	2000      	movs	r0, #0
 80124c4:	f04f 0c0a 	mov.w	ip, #10
 80124c8:	4621      	mov	r1, r4
 80124ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124ce:	3b30      	subs	r3, #48	@ 0x30
 80124d0:	2b09      	cmp	r3, #9
 80124d2:	d94b      	bls.n	801256c <_svfiprintf_r+0x17c>
 80124d4:	b1b0      	cbz	r0, 8012504 <_svfiprintf_r+0x114>
 80124d6:	9207      	str	r2, [sp, #28]
 80124d8:	e014      	b.n	8012504 <_svfiprintf_r+0x114>
 80124da:	eba0 0308 	sub.w	r3, r0, r8
 80124de:	46a2      	mov	sl, r4
 80124e0:	fa09 f303 	lsl.w	r3, r9, r3
 80124e4:	4313      	orrs	r3, r2
 80124e6:	9304      	str	r3, [sp, #16]
 80124e8:	e7d2      	b.n	8012490 <_svfiprintf_r+0xa0>
 80124ea:	9b03      	ldr	r3, [sp, #12]
 80124ec:	1d19      	adds	r1, r3, #4
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	9103      	str	r1, [sp, #12]
 80124f4:	bfbb      	ittet	lt
 80124f6:	425b      	neglt	r3, r3
 80124f8:	f042 0202 	orrlt.w	r2, r2, #2
 80124fc:	9307      	strge	r3, [sp, #28]
 80124fe:	9307      	strlt	r3, [sp, #28]
 8012500:	bfb8      	it	lt
 8012502:	9204      	strlt	r2, [sp, #16]
 8012504:	7823      	ldrb	r3, [r4, #0]
 8012506:	2b2e      	cmp	r3, #46	@ 0x2e
 8012508:	d10a      	bne.n	8012520 <_svfiprintf_r+0x130>
 801250a:	7863      	ldrb	r3, [r4, #1]
 801250c:	2b2a      	cmp	r3, #42	@ 0x2a
 801250e:	d132      	bne.n	8012576 <_svfiprintf_r+0x186>
 8012510:	9b03      	ldr	r3, [sp, #12]
 8012512:	3402      	adds	r4, #2
 8012514:	1d1a      	adds	r2, r3, #4
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801251c:	9203      	str	r2, [sp, #12]
 801251e:	9305      	str	r3, [sp, #20]
 8012520:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80125e4 <_svfiprintf_r+0x1f4>
 8012524:	2203      	movs	r2, #3
 8012526:	7821      	ldrb	r1, [r4, #0]
 8012528:	4650      	mov	r0, sl
 801252a:	f7fe fc10 	bl	8010d4e <memchr>
 801252e:	b138      	cbz	r0, 8012540 <_svfiprintf_r+0x150>
 8012530:	eba0 000a 	sub.w	r0, r0, sl
 8012534:	2240      	movs	r2, #64	@ 0x40
 8012536:	9b04      	ldr	r3, [sp, #16]
 8012538:	3401      	adds	r4, #1
 801253a:	4082      	lsls	r2, r0
 801253c:	4313      	orrs	r3, r2
 801253e:	9304      	str	r3, [sp, #16]
 8012540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012544:	2206      	movs	r2, #6
 8012546:	4824      	ldr	r0, [pc, #144]	@ (80125d8 <_svfiprintf_r+0x1e8>)
 8012548:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801254c:	f7fe fbff 	bl	8010d4e <memchr>
 8012550:	2800      	cmp	r0, #0
 8012552:	d036      	beq.n	80125c2 <_svfiprintf_r+0x1d2>
 8012554:	4b21      	ldr	r3, [pc, #132]	@ (80125dc <_svfiprintf_r+0x1ec>)
 8012556:	bb1b      	cbnz	r3, 80125a0 <_svfiprintf_r+0x1b0>
 8012558:	9b03      	ldr	r3, [sp, #12]
 801255a:	3307      	adds	r3, #7
 801255c:	f023 0307 	bic.w	r3, r3, #7
 8012560:	3308      	adds	r3, #8
 8012562:	9303      	str	r3, [sp, #12]
 8012564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012566:	4433      	add	r3, r6
 8012568:	9309      	str	r3, [sp, #36]	@ 0x24
 801256a:	e76a      	b.n	8012442 <_svfiprintf_r+0x52>
 801256c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012570:	460c      	mov	r4, r1
 8012572:	2001      	movs	r0, #1
 8012574:	e7a8      	b.n	80124c8 <_svfiprintf_r+0xd8>
 8012576:	2300      	movs	r3, #0
 8012578:	3401      	adds	r4, #1
 801257a:	f04f 0c0a 	mov.w	ip, #10
 801257e:	4619      	mov	r1, r3
 8012580:	9305      	str	r3, [sp, #20]
 8012582:	4620      	mov	r0, r4
 8012584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012588:	3a30      	subs	r2, #48	@ 0x30
 801258a:	2a09      	cmp	r2, #9
 801258c:	d903      	bls.n	8012596 <_svfiprintf_r+0x1a6>
 801258e:	2b00      	cmp	r3, #0
 8012590:	d0c6      	beq.n	8012520 <_svfiprintf_r+0x130>
 8012592:	9105      	str	r1, [sp, #20]
 8012594:	e7c4      	b.n	8012520 <_svfiprintf_r+0x130>
 8012596:	fb0c 2101 	mla	r1, ip, r1, r2
 801259a:	4604      	mov	r4, r0
 801259c:	2301      	movs	r3, #1
 801259e:	e7f0      	b.n	8012582 <_svfiprintf_r+0x192>
 80125a0:	ab03      	add	r3, sp, #12
 80125a2:	462a      	mov	r2, r5
 80125a4:	a904      	add	r1, sp, #16
 80125a6:	4638      	mov	r0, r7
 80125a8:	9300      	str	r3, [sp, #0]
 80125aa:	4b0d      	ldr	r3, [pc, #52]	@ (80125e0 <_svfiprintf_r+0x1f0>)
 80125ac:	f7fd fe58 	bl	8010260 <_printf_float>
 80125b0:	1c42      	adds	r2, r0, #1
 80125b2:	4606      	mov	r6, r0
 80125b4:	d1d6      	bne.n	8012564 <_svfiprintf_r+0x174>
 80125b6:	89ab      	ldrh	r3, [r5, #12]
 80125b8:	065b      	lsls	r3, r3, #25
 80125ba:	f53f af2d 	bmi.w	8012418 <_svfiprintf_r+0x28>
 80125be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125c0:	e72c      	b.n	801241c <_svfiprintf_r+0x2c>
 80125c2:	ab03      	add	r3, sp, #12
 80125c4:	462a      	mov	r2, r5
 80125c6:	a904      	add	r1, sp, #16
 80125c8:	4638      	mov	r0, r7
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	4b04      	ldr	r3, [pc, #16]	@ (80125e0 <_svfiprintf_r+0x1f0>)
 80125ce:	f7fe f8e3 	bl	8010798 <_printf_i>
 80125d2:	e7ed      	b.n	80125b0 <_svfiprintf_r+0x1c0>
 80125d4:	08013538 	.word	0x08013538
 80125d8:	08013542 	.word	0x08013542
 80125dc:	08010261 	.word	0x08010261
 80125e0:	08012339 	.word	0x08012339
 80125e4:	0801353e 	.word	0x0801353e

080125e8 <__sflush_r>:
 80125e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80125ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125f0:	0716      	lsls	r6, r2, #28
 80125f2:	4605      	mov	r5, r0
 80125f4:	460c      	mov	r4, r1
 80125f6:	d454      	bmi.n	80126a2 <__sflush_r+0xba>
 80125f8:	684b      	ldr	r3, [r1, #4]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	dc02      	bgt.n	8012604 <__sflush_r+0x1c>
 80125fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012600:	2b00      	cmp	r3, #0
 8012602:	dd48      	ble.n	8012696 <__sflush_r+0xae>
 8012604:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012606:	2e00      	cmp	r6, #0
 8012608:	d045      	beq.n	8012696 <__sflush_r+0xae>
 801260a:	2300      	movs	r3, #0
 801260c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012610:	682f      	ldr	r7, [r5, #0]
 8012612:	6a21      	ldr	r1, [r4, #32]
 8012614:	602b      	str	r3, [r5, #0]
 8012616:	d030      	beq.n	801267a <__sflush_r+0x92>
 8012618:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801261a:	89a3      	ldrh	r3, [r4, #12]
 801261c:	0759      	lsls	r1, r3, #29
 801261e:	d505      	bpl.n	801262c <__sflush_r+0x44>
 8012620:	6863      	ldr	r3, [r4, #4]
 8012622:	1ad2      	subs	r2, r2, r3
 8012624:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012626:	b10b      	cbz	r3, 801262c <__sflush_r+0x44>
 8012628:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801262a:	1ad2      	subs	r2, r2, r3
 801262c:	2300      	movs	r3, #0
 801262e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012630:	6a21      	ldr	r1, [r4, #32]
 8012632:	4628      	mov	r0, r5
 8012634:	47b0      	blx	r6
 8012636:	1c43      	adds	r3, r0, #1
 8012638:	89a3      	ldrh	r3, [r4, #12]
 801263a:	d106      	bne.n	801264a <__sflush_r+0x62>
 801263c:	6829      	ldr	r1, [r5, #0]
 801263e:	291d      	cmp	r1, #29
 8012640:	d82b      	bhi.n	801269a <__sflush_r+0xb2>
 8012642:	4a2a      	ldr	r2, [pc, #168]	@ (80126ec <__sflush_r+0x104>)
 8012644:	410a      	asrs	r2, r1
 8012646:	07d6      	lsls	r6, r2, #31
 8012648:	d427      	bmi.n	801269a <__sflush_r+0xb2>
 801264a:	2200      	movs	r2, #0
 801264c:	04d9      	lsls	r1, r3, #19
 801264e:	6062      	str	r2, [r4, #4]
 8012650:	6922      	ldr	r2, [r4, #16]
 8012652:	6022      	str	r2, [r4, #0]
 8012654:	d504      	bpl.n	8012660 <__sflush_r+0x78>
 8012656:	1c42      	adds	r2, r0, #1
 8012658:	d101      	bne.n	801265e <__sflush_r+0x76>
 801265a:	682b      	ldr	r3, [r5, #0]
 801265c:	b903      	cbnz	r3, 8012660 <__sflush_r+0x78>
 801265e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012662:	602f      	str	r7, [r5, #0]
 8012664:	b1b9      	cbz	r1, 8012696 <__sflush_r+0xae>
 8012666:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801266a:	4299      	cmp	r1, r3
 801266c:	d002      	beq.n	8012674 <__sflush_r+0x8c>
 801266e:	4628      	mov	r0, r5
 8012670:	f7ff f9da 	bl	8011a28 <_free_r>
 8012674:	2300      	movs	r3, #0
 8012676:	6363      	str	r3, [r4, #52]	@ 0x34
 8012678:	e00d      	b.n	8012696 <__sflush_r+0xae>
 801267a:	2301      	movs	r3, #1
 801267c:	4628      	mov	r0, r5
 801267e:	47b0      	blx	r6
 8012680:	4602      	mov	r2, r0
 8012682:	1c50      	adds	r0, r2, #1
 8012684:	d1c9      	bne.n	801261a <__sflush_r+0x32>
 8012686:	682b      	ldr	r3, [r5, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d0c6      	beq.n	801261a <__sflush_r+0x32>
 801268c:	2b1d      	cmp	r3, #29
 801268e:	d001      	beq.n	8012694 <__sflush_r+0xac>
 8012690:	2b16      	cmp	r3, #22
 8012692:	d11d      	bne.n	80126d0 <__sflush_r+0xe8>
 8012694:	602f      	str	r7, [r5, #0]
 8012696:	2000      	movs	r0, #0
 8012698:	e021      	b.n	80126de <__sflush_r+0xf6>
 801269a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801269e:	b21b      	sxth	r3, r3
 80126a0:	e01a      	b.n	80126d8 <__sflush_r+0xf0>
 80126a2:	690f      	ldr	r7, [r1, #16]
 80126a4:	2f00      	cmp	r7, #0
 80126a6:	d0f6      	beq.n	8012696 <__sflush_r+0xae>
 80126a8:	0793      	lsls	r3, r2, #30
 80126aa:	680e      	ldr	r6, [r1, #0]
 80126ac:	600f      	str	r7, [r1, #0]
 80126ae:	bf0c      	ite	eq
 80126b0:	694b      	ldreq	r3, [r1, #20]
 80126b2:	2300      	movne	r3, #0
 80126b4:	eba6 0807 	sub.w	r8, r6, r7
 80126b8:	608b      	str	r3, [r1, #8]
 80126ba:	f1b8 0f00 	cmp.w	r8, #0
 80126be:	ddea      	ble.n	8012696 <__sflush_r+0xae>
 80126c0:	4643      	mov	r3, r8
 80126c2:	463a      	mov	r2, r7
 80126c4:	6a21      	ldr	r1, [r4, #32]
 80126c6:	4628      	mov	r0, r5
 80126c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80126ca:	47b0      	blx	r6
 80126cc:	2800      	cmp	r0, #0
 80126ce:	dc08      	bgt.n	80126e2 <__sflush_r+0xfa>
 80126d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126d8:	f04f 30ff 	mov.w	r0, #4294967295
 80126dc:	81a3      	strh	r3, [r4, #12]
 80126de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e2:	4407      	add	r7, r0
 80126e4:	eba8 0800 	sub.w	r8, r8, r0
 80126e8:	e7e7      	b.n	80126ba <__sflush_r+0xd2>
 80126ea:	bf00      	nop
 80126ec:	dfbffffe 	.word	0xdfbffffe

080126f0 <_fflush_r>:
 80126f0:	b538      	push	{r3, r4, r5, lr}
 80126f2:	690b      	ldr	r3, [r1, #16]
 80126f4:	4605      	mov	r5, r0
 80126f6:	460c      	mov	r4, r1
 80126f8:	b913      	cbnz	r3, 8012700 <_fflush_r+0x10>
 80126fa:	2500      	movs	r5, #0
 80126fc:	4628      	mov	r0, r5
 80126fe:	bd38      	pop	{r3, r4, r5, pc}
 8012700:	b118      	cbz	r0, 801270a <_fflush_r+0x1a>
 8012702:	6a03      	ldr	r3, [r0, #32]
 8012704:	b90b      	cbnz	r3, 801270a <_fflush_r+0x1a>
 8012706:	f7fe f9f3 	bl	8010af0 <__sinit>
 801270a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d0f3      	beq.n	80126fa <_fflush_r+0xa>
 8012712:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012714:	07d0      	lsls	r0, r2, #31
 8012716:	d404      	bmi.n	8012722 <_fflush_r+0x32>
 8012718:	0599      	lsls	r1, r3, #22
 801271a:	d402      	bmi.n	8012722 <_fflush_r+0x32>
 801271c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801271e:	f7fe fb14 	bl	8010d4a <__retarget_lock_acquire_recursive>
 8012722:	4628      	mov	r0, r5
 8012724:	4621      	mov	r1, r4
 8012726:	f7ff ff5f 	bl	80125e8 <__sflush_r>
 801272a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801272c:	4605      	mov	r5, r0
 801272e:	07da      	lsls	r2, r3, #31
 8012730:	d4e4      	bmi.n	80126fc <_fflush_r+0xc>
 8012732:	89a3      	ldrh	r3, [r4, #12]
 8012734:	059b      	lsls	r3, r3, #22
 8012736:	d4e1      	bmi.n	80126fc <_fflush_r+0xc>
 8012738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801273a:	f7fe fb07 	bl	8010d4c <__retarget_lock_release_recursive>
 801273e:	e7dd      	b.n	80126fc <_fflush_r+0xc>

08012740 <memmove>:
 8012740:	4288      	cmp	r0, r1
 8012742:	b510      	push	{r4, lr}
 8012744:	eb01 0402 	add.w	r4, r1, r2
 8012748:	d902      	bls.n	8012750 <memmove+0x10>
 801274a:	4284      	cmp	r4, r0
 801274c:	4623      	mov	r3, r4
 801274e:	d807      	bhi.n	8012760 <memmove+0x20>
 8012750:	1e43      	subs	r3, r0, #1
 8012752:	42a1      	cmp	r1, r4
 8012754:	d008      	beq.n	8012768 <memmove+0x28>
 8012756:	f811 2b01 	ldrb.w	r2, [r1], #1
 801275a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801275e:	e7f8      	b.n	8012752 <memmove+0x12>
 8012760:	4402      	add	r2, r0
 8012762:	4601      	mov	r1, r0
 8012764:	428a      	cmp	r2, r1
 8012766:	d100      	bne.n	801276a <memmove+0x2a>
 8012768:	bd10      	pop	{r4, pc}
 801276a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801276e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012772:	e7f7      	b.n	8012764 <memmove+0x24>

08012774 <_sbrk_r>:
 8012774:	b538      	push	{r3, r4, r5, lr}
 8012776:	2300      	movs	r3, #0
 8012778:	4d05      	ldr	r5, [pc, #20]	@ (8012790 <_sbrk_r+0x1c>)
 801277a:	4604      	mov	r4, r0
 801277c:	4608      	mov	r0, r1
 801277e:	602b      	str	r3, [r5, #0]
 8012780:	f7f2 fd0c 	bl	800519c <_sbrk>
 8012784:	1c43      	adds	r3, r0, #1
 8012786:	d102      	bne.n	801278e <_sbrk_r+0x1a>
 8012788:	682b      	ldr	r3, [r5, #0]
 801278a:	b103      	cbz	r3, 801278e <_sbrk_r+0x1a>
 801278c:	6023      	str	r3, [r4, #0]
 801278e:	bd38      	pop	{r3, r4, r5, pc}
 8012790:	20005d30 	.word	0x20005d30

08012794 <__assert_func>:
 8012794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012796:	4614      	mov	r4, r2
 8012798:	461a      	mov	r2, r3
 801279a:	4b09      	ldr	r3, [pc, #36]	@ (80127c0 <__assert_func+0x2c>)
 801279c:	4605      	mov	r5, r0
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	68d8      	ldr	r0, [r3, #12]
 80127a2:	b954      	cbnz	r4, 80127ba <__assert_func+0x26>
 80127a4:	4b07      	ldr	r3, [pc, #28]	@ (80127c4 <__assert_func+0x30>)
 80127a6:	461c      	mov	r4, r3
 80127a8:	9100      	str	r1, [sp, #0]
 80127aa:	4907      	ldr	r1, [pc, #28]	@ (80127c8 <__assert_func+0x34>)
 80127ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80127b0:	462b      	mov	r3, r5
 80127b2:	f000 f86f 	bl	8012894 <fiprintf>
 80127b6:	f000 f87f 	bl	80128b8 <abort>
 80127ba:	4b04      	ldr	r3, [pc, #16]	@ (80127cc <__assert_func+0x38>)
 80127bc:	e7f4      	b.n	80127a8 <__assert_func+0x14>
 80127be:	bf00      	nop
 80127c0:	200000c0 	.word	0x200000c0
 80127c4:	0801358e 	.word	0x0801358e
 80127c8:	08013560 	.word	0x08013560
 80127cc:	08013553 	.word	0x08013553

080127d0 <_calloc_r>:
 80127d0:	b570      	push	{r4, r5, r6, lr}
 80127d2:	fba1 5402 	umull	r5, r4, r1, r2
 80127d6:	b93c      	cbnz	r4, 80127e8 <_calloc_r+0x18>
 80127d8:	4629      	mov	r1, r5
 80127da:	f7ff f999 	bl	8011b10 <_malloc_r>
 80127de:	4606      	mov	r6, r0
 80127e0:	b928      	cbnz	r0, 80127ee <_calloc_r+0x1e>
 80127e2:	2600      	movs	r6, #0
 80127e4:	4630      	mov	r0, r6
 80127e6:	bd70      	pop	{r4, r5, r6, pc}
 80127e8:	220c      	movs	r2, #12
 80127ea:	6002      	str	r2, [r0, #0]
 80127ec:	e7f9      	b.n	80127e2 <_calloc_r+0x12>
 80127ee:	462a      	mov	r2, r5
 80127f0:	4621      	mov	r1, r4
 80127f2:	f7fe fa16 	bl	8010c22 <memset>
 80127f6:	e7f5      	b.n	80127e4 <_calloc_r+0x14>

080127f8 <__ascii_mbtowc>:
 80127f8:	b082      	sub	sp, #8
 80127fa:	b901      	cbnz	r1, 80127fe <__ascii_mbtowc+0x6>
 80127fc:	a901      	add	r1, sp, #4
 80127fe:	b142      	cbz	r2, 8012812 <__ascii_mbtowc+0x1a>
 8012800:	b14b      	cbz	r3, 8012816 <__ascii_mbtowc+0x1e>
 8012802:	7813      	ldrb	r3, [r2, #0]
 8012804:	600b      	str	r3, [r1, #0]
 8012806:	7812      	ldrb	r2, [r2, #0]
 8012808:	1e10      	subs	r0, r2, #0
 801280a:	bf18      	it	ne
 801280c:	2001      	movne	r0, #1
 801280e:	b002      	add	sp, #8
 8012810:	4770      	bx	lr
 8012812:	4610      	mov	r0, r2
 8012814:	e7fb      	b.n	801280e <__ascii_mbtowc+0x16>
 8012816:	f06f 0001 	mvn.w	r0, #1
 801281a:	e7f8      	b.n	801280e <__ascii_mbtowc+0x16>

0801281c <_realloc_r>:
 801281c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012820:	4680      	mov	r8, r0
 8012822:	4615      	mov	r5, r2
 8012824:	460c      	mov	r4, r1
 8012826:	b921      	cbnz	r1, 8012832 <_realloc_r+0x16>
 8012828:	4611      	mov	r1, r2
 801282a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801282e:	f7ff b96f 	b.w	8011b10 <_malloc_r>
 8012832:	b92a      	cbnz	r2, 8012840 <_realloc_r+0x24>
 8012834:	f7ff f8f8 	bl	8011a28 <_free_r>
 8012838:	2400      	movs	r4, #0
 801283a:	4620      	mov	r0, r4
 801283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012840:	f000 f841 	bl	80128c6 <_malloc_usable_size_r>
 8012844:	4285      	cmp	r5, r0
 8012846:	4606      	mov	r6, r0
 8012848:	d802      	bhi.n	8012850 <_realloc_r+0x34>
 801284a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801284e:	d8f4      	bhi.n	801283a <_realloc_r+0x1e>
 8012850:	4629      	mov	r1, r5
 8012852:	4640      	mov	r0, r8
 8012854:	f7ff f95c 	bl	8011b10 <_malloc_r>
 8012858:	4607      	mov	r7, r0
 801285a:	2800      	cmp	r0, #0
 801285c:	d0ec      	beq.n	8012838 <_realloc_r+0x1c>
 801285e:	42b5      	cmp	r5, r6
 8012860:	462a      	mov	r2, r5
 8012862:	4621      	mov	r1, r4
 8012864:	bf28      	it	cs
 8012866:	4632      	movcs	r2, r6
 8012868:	f7fe fa7f 	bl	8010d6a <memcpy>
 801286c:	4621      	mov	r1, r4
 801286e:	4640      	mov	r0, r8
 8012870:	463c      	mov	r4, r7
 8012872:	f7ff f8d9 	bl	8011a28 <_free_r>
 8012876:	e7e0      	b.n	801283a <_realloc_r+0x1e>

08012878 <__ascii_wctomb>:
 8012878:	4603      	mov	r3, r0
 801287a:	4608      	mov	r0, r1
 801287c:	b141      	cbz	r1, 8012890 <__ascii_wctomb+0x18>
 801287e:	2aff      	cmp	r2, #255	@ 0xff
 8012880:	d904      	bls.n	801288c <__ascii_wctomb+0x14>
 8012882:	228a      	movs	r2, #138	@ 0x8a
 8012884:	f04f 30ff 	mov.w	r0, #4294967295
 8012888:	601a      	str	r2, [r3, #0]
 801288a:	4770      	bx	lr
 801288c:	2001      	movs	r0, #1
 801288e:	700a      	strb	r2, [r1, #0]
 8012890:	4770      	bx	lr
	...

08012894 <fiprintf>:
 8012894:	b40e      	push	{r1, r2, r3}
 8012896:	b503      	push	{r0, r1, lr}
 8012898:	ab03      	add	r3, sp, #12
 801289a:	4601      	mov	r1, r0
 801289c:	4805      	ldr	r0, [pc, #20]	@ (80128b4 <fiprintf+0x20>)
 801289e:	f853 2b04 	ldr.w	r2, [r3], #4
 80128a2:	6800      	ldr	r0, [r0, #0]
 80128a4:	9301      	str	r3, [sp, #4]
 80128a6:	f000 f83f 	bl	8012928 <_vfiprintf_r>
 80128aa:	b002      	add	sp, #8
 80128ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80128b0:	b003      	add	sp, #12
 80128b2:	4770      	bx	lr
 80128b4:	200000c0 	.word	0x200000c0

080128b8 <abort>:
 80128b8:	2006      	movs	r0, #6
 80128ba:	b508      	push	{r3, lr}
 80128bc:	f000 fa08 	bl	8012cd0 <raise>
 80128c0:	2001      	movs	r0, #1
 80128c2:	f7f2 fbf3 	bl	80050ac <_exit>

080128c6 <_malloc_usable_size_r>:
 80128c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128ca:	1f18      	subs	r0, r3, #4
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	bfbc      	itt	lt
 80128d0:	580b      	ldrlt	r3, [r1, r0]
 80128d2:	18c0      	addlt	r0, r0, r3
 80128d4:	4770      	bx	lr

080128d6 <__sfputc_r>:
 80128d6:	6893      	ldr	r3, [r2, #8]
 80128d8:	3b01      	subs	r3, #1
 80128da:	2b00      	cmp	r3, #0
 80128dc:	6093      	str	r3, [r2, #8]
 80128de:	b410      	push	{r4}
 80128e0:	da08      	bge.n	80128f4 <__sfputc_r+0x1e>
 80128e2:	6994      	ldr	r4, [r2, #24]
 80128e4:	42a3      	cmp	r3, r4
 80128e6:	db01      	blt.n	80128ec <__sfputc_r+0x16>
 80128e8:	290a      	cmp	r1, #10
 80128ea:	d103      	bne.n	80128f4 <__sfputc_r+0x1e>
 80128ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128f0:	f000 b932 	b.w	8012b58 <__swbuf_r>
 80128f4:	6813      	ldr	r3, [r2, #0]
 80128f6:	1c58      	adds	r0, r3, #1
 80128f8:	6010      	str	r0, [r2, #0]
 80128fa:	4608      	mov	r0, r1
 80128fc:	7019      	strb	r1, [r3, #0]
 80128fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012902:	4770      	bx	lr

08012904 <__sfputs_r>:
 8012904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012906:	4606      	mov	r6, r0
 8012908:	460f      	mov	r7, r1
 801290a:	4614      	mov	r4, r2
 801290c:	18d5      	adds	r5, r2, r3
 801290e:	42ac      	cmp	r4, r5
 8012910:	d101      	bne.n	8012916 <__sfputs_r+0x12>
 8012912:	2000      	movs	r0, #0
 8012914:	e007      	b.n	8012926 <__sfputs_r+0x22>
 8012916:	463a      	mov	r2, r7
 8012918:	f814 1b01 	ldrb.w	r1, [r4], #1
 801291c:	4630      	mov	r0, r6
 801291e:	f7ff ffda 	bl	80128d6 <__sfputc_r>
 8012922:	1c43      	adds	r3, r0, #1
 8012924:	d1f3      	bne.n	801290e <__sfputs_r+0xa>
 8012926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012928 <_vfiprintf_r>:
 8012928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292c:	460d      	mov	r5, r1
 801292e:	b09d      	sub	sp, #116	@ 0x74
 8012930:	4614      	mov	r4, r2
 8012932:	4698      	mov	r8, r3
 8012934:	4606      	mov	r6, r0
 8012936:	b118      	cbz	r0, 8012940 <_vfiprintf_r+0x18>
 8012938:	6a03      	ldr	r3, [r0, #32]
 801293a:	b90b      	cbnz	r3, 8012940 <_vfiprintf_r+0x18>
 801293c:	f7fe f8d8 	bl	8010af0 <__sinit>
 8012940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012942:	07d9      	lsls	r1, r3, #31
 8012944:	d405      	bmi.n	8012952 <_vfiprintf_r+0x2a>
 8012946:	89ab      	ldrh	r3, [r5, #12]
 8012948:	059a      	lsls	r2, r3, #22
 801294a:	d402      	bmi.n	8012952 <_vfiprintf_r+0x2a>
 801294c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801294e:	f7fe f9fc 	bl	8010d4a <__retarget_lock_acquire_recursive>
 8012952:	89ab      	ldrh	r3, [r5, #12]
 8012954:	071b      	lsls	r3, r3, #28
 8012956:	d501      	bpl.n	801295c <_vfiprintf_r+0x34>
 8012958:	692b      	ldr	r3, [r5, #16]
 801295a:	b99b      	cbnz	r3, 8012984 <_vfiprintf_r+0x5c>
 801295c:	4629      	mov	r1, r5
 801295e:	4630      	mov	r0, r6
 8012960:	f000 f938 	bl	8012bd4 <__swsetup_r>
 8012964:	b170      	cbz	r0, 8012984 <_vfiprintf_r+0x5c>
 8012966:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012968:	07dc      	lsls	r4, r3, #31
 801296a:	d504      	bpl.n	8012976 <_vfiprintf_r+0x4e>
 801296c:	f04f 30ff 	mov.w	r0, #4294967295
 8012970:	b01d      	add	sp, #116	@ 0x74
 8012972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012976:	89ab      	ldrh	r3, [r5, #12]
 8012978:	0598      	lsls	r0, r3, #22
 801297a:	d4f7      	bmi.n	801296c <_vfiprintf_r+0x44>
 801297c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801297e:	f7fe f9e5 	bl	8010d4c <__retarget_lock_release_recursive>
 8012982:	e7f3      	b.n	801296c <_vfiprintf_r+0x44>
 8012984:	2300      	movs	r3, #0
 8012986:	f8cd 800c 	str.w	r8, [sp, #12]
 801298a:	f04f 0901 	mov.w	r9, #1
 801298e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012b44 <_vfiprintf_r+0x21c>
 8012992:	9309      	str	r3, [sp, #36]	@ 0x24
 8012994:	2320      	movs	r3, #32
 8012996:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801299a:	2330      	movs	r3, #48	@ 0x30
 801299c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129a0:	4623      	mov	r3, r4
 80129a2:	469a      	mov	sl, r3
 80129a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129a8:	b10a      	cbz	r2, 80129ae <_vfiprintf_r+0x86>
 80129aa:	2a25      	cmp	r2, #37	@ 0x25
 80129ac:	d1f9      	bne.n	80129a2 <_vfiprintf_r+0x7a>
 80129ae:	ebba 0b04 	subs.w	fp, sl, r4
 80129b2:	d00b      	beq.n	80129cc <_vfiprintf_r+0xa4>
 80129b4:	465b      	mov	r3, fp
 80129b6:	4622      	mov	r2, r4
 80129b8:	4629      	mov	r1, r5
 80129ba:	4630      	mov	r0, r6
 80129bc:	f7ff ffa2 	bl	8012904 <__sfputs_r>
 80129c0:	3001      	adds	r0, #1
 80129c2:	f000 80a7 	beq.w	8012b14 <_vfiprintf_r+0x1ec>
 80129c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129c8:	445a      	add	r2, fp
 80129ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80129cc:	f89a 3000 	ldrb.w	r3, [sl]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	f000 809f 	beq.w	8012b14 <_vfiprintf_r+0x1ec>
 80129d6:	2300      	movs	r3, #0
 80129d8:	f04f 32ff 	mov.w	r2, #4294967295
 80129dc:	f10a 0a01 	add.w	sl, sl, #1
 80129e0:	9304      	str	r3, [sp, #16]
 80129e2:	9307      	str	r3, [sp, #28]
 80129e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80129e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80129ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129ee:	4654      	mov	r4, sl
 80129f0:	2205      	movs	r2, #5
 80129f2:	4854      	ldr	r0, [pc, #336]	@ (8012b44 <_vfiprintf_r+0x21c>)
 80129f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129f8:	f7fe f9a9 	bl	8010d4e <memchr>
 80129fc:	9a04      	ldr	r2, [sp, #16]
 80129fe:	b9d8      	cbnz	r0, 8012a38 <_vfiprintf_r+0x110>
 8012a00:	06d1      	lsls	r1, r2, #27
 8012a02:	bf44      	itt	mi
 8012a04:	2320      	movmi	r3, #32
 8012a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a0a:	0713      	lsls	r3, r2, #28
 8012a0c:	bf44      	itt	mi
 8012a0e:	232b      	movmi	r3, #43	@ 0x2b
 8012a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a14:	f89a 3000 	ldrb.w	r3, [sl]
 8012a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a1a:	d015      	beq.n	8012a48 <_vfiprintf_r+0x120>
 8012a1c:	9a07      	ldr	r2, [sp, #28]
 8012a1e:	4654      	mov	r4, sl
 8012a20:	2000      	movs	r0, #0
 8012a22:	f04f 0c0a 	mov.w	ip, #10
 8012a26:	4621      	mov	r1, r4
 8012a28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a2c:	3b30      	subs	r3, #48	@ 0x30
 8012a2e:	2b09      	cmp	r3, #9
 8012a30:	d94b      	bls.n	8012aca <_vfiprintf_r+0x1a2>
 8012a32:	b1b0      	cbz	r0, 8012a62 <_vfiprintf_r+0x13a>
 8012a34:	9207      	str	r2, [sp, #28]
 8012a36:	e014      	b.n	8012a62 <_vfiprintf_r+0x13a>
 8012a38:	eba0 0308 	sub.w	r3, r0, r8
 8012a3c:	46a2      	mov	sl, r4
 8012a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8012a42:	4313      	orrs	r3, r2
 8012a44:	9304      	str	r3, [sp, #16]
 8012a46:	e7d2      	b.n	80129ee <_vfiprintf_r+0xc6>
 8012a48:	9b03      	ldr	r3, [sp, #12]
 8012a4a:	1d19      	adds	r1, r3, #4
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	9103      	str	r1, [sp, #12]
 8012a52:	bfbb      	ittet	lt
 8012a54:	425b      	neglt	r3, r3
 8012a56:	f042 0202 	orrlt.w	r2, r2, #2
 8012a5a:	9307      	strge	r3, [sp, #28]
 8012a5c:	9307      	strlt	r3, [sp, #28]
 8012a5e:	bfb8      	it	lt
 8012a60:	9204      	strlt	r2, [sp, #16]
 8012a62:	7823      	ldrb	r3, [r4, #0]
 8012a64:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a66:	d10a      	bne.n	8012a7e <_vfiprintf_r+0x156>
 8012a68:	7863      	ldrb	r3, [r4, #1]
 8012a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a6c:	d132      	bne.n	8012ad4 <_vfiprintf_r+0x1ac>
 8012a6e:	9b03      	ldr	r3, [sp, #12]
 8012a70:	3402      	adds	r4, #2
 8012a72:	1d1a      	adds	r2, r3, #4
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a7a:	9203      	str	r2, [sp, #12]
 8012a7c:	9305      	str	r3, [sp, #20]
 8012a7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012b54 <_vfiprintf_r+0x22c>
 8012a82:	2203      	movs	r2, #3
 8012a84:	7821      	ldrb	r1, [r4, #0]
 8012a86:	4650      	mov	r0, sl
 8012a88:	f7fe f961 	bl	8010d4e <memchr>
 8012a8c:	b138      	cbz	r0, 8012a9e <_vfiprintf_r+0x176>
 8012a8e:	eba0 000a 	sub.w	r0, r0, sl
 8012a92:	2240      	movs	r2, #64	@ 0x40
 8012a94:	9b04      	ldr	r3, [sp, #16]
 8012a96:	3401      	adds	r4, #1
 8012a98:	4082      	lsls	r2, r0
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	9304      	str	r3, [sp, #16]
 8012a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aa2:	2206      	movs	r2, #6
 8012aa4:	4828      	ldr	r0, [pc, #160]	@ (8012b48 <_vfiprintf_r+0x220>)
 8012aa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012aaa:	f7fe f950 	bl	8010d4e <memchr>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d03f      	beq.n	8012b32 <_vfiprintf_r+0x20a>
 8012ab2:	4b26      	ldr	r3, [pc, #152]	@ (8012b4c <_vfiprintf_r+0x224>)
 8012ab4:	bb1b      	cbnz	r3, 8012afe <_vfiprintf_r+0x1d6>
 8012ab6:	9b03      	ldr	r3, [sp, #12]
 8012ab8:	3307      	adds	r3, #7
 8012aba:	f023 0307 	bic.w	r3, r3, #7
 8012abe:	3308      	adds	r3, #8
 8012ac0:	9303      	str	r3, [sp, #12]
 8012ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ac4:	443b      	add	r3, r7
 8012ac6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ac8:	e76a      	b.n	80129a0 <_vfiprintf_r+0x78>
 8012aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ace:	460c      	mov	r4, r1
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	e7a8      	b.n	8012a26 <_vfiprintf_r+0xfe>
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	3401      	adds	r4, #1
 8012ad8:	f04f 0c0a 	mov.w	ip, #10
 8012adc:	4619      	mov	r1, r3
 8012ade:	9305      	str	r3, [sp, #20]
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ae6:	3a30      	subs	r2, #48	@ 0x30
 8012ae8:	2a09      	cmp	r2, #9
 8012aea:	d903      	bls.n	8012af4 <_vfiprintf_r+0x1cc>
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d0c6      	beq.n	8012a7e <_vfiprintf_r+0x156>
 8012af0:	9105      	str	r1, [sp, #20]
 8012af2:	e7c4      	b.n	8012a7e <_vfiprintf_r+0x156>
 8012af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012af8:	4604      	mov	r4, r0
 8012afa:	2301      	movs	r3, #1
 8012afc:	e7f0      	b.n	8012ae0 <_vfiprintf_r+0x1b8>
 8012afe:	ab03      	add	r3, sp, #12
 8012b00:	462a      	mov	r2, r5
 8012b02:	a904      	add	r1, sp, #16
 8012b04:	4630      	mov	r0, r6
 8012b06:	9300      	str	r3, [sp, #0]
 8012b08:	4b11      	ldr	r3, [pc, #68]	@ (8012b50 <_vfiprintf_r+0x228>)
 8012b0a:	f7fd fba9 	bl	8010260 <_printf_float>
 8012b0e:	4607      	mov	r7, r0
 8012b10:	1c78      	adds	r0, r7, #1
 8012b12:	d1d6      	bne.n	8012ac2 <_vfiprintf_r+0x19a>
 8012b14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b16:	07d9      	lsls	r1, r3, #31
 8012b18:	d405      	bmi.n	8012b26 <_vfiprintf_r+0x1fe>
 8012b1a:	89ab      	ldrh	r3, [r5, #12]
 8012b1c:	059a      	lsls	r2, r3, #22
 8012b1e:	d402      	bmi.n	8012b26 <_vfiprintf_r+0x1fe>
 8012b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b22:	f7fe f913 	bl	8010d4c <__retarget_lock_release_recursive>
 8012b26:	89ab      	ldrh	r3, [r5, #12]
 8012b28:	065b      	lsls	r3, r3, #25
 8012b2a:	f53f af1f 	bmi.w	801296c <_vfiprintf_r+0x44>
 8012b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b30:	e71e      	b.n	8012970 <_vfiprintf_r+0x48>
 8012b32:	ab03      	add	r3, sp, #12
 8012b34:	462a      	mov	r2, r5
 8012b36:	a904      	add	r1, sp, #16
 8012b38:	4630      	mov	r0, r6
 8012b3a:	9300      	str	r3, [sp, #0]
 8012b3c:	4b04      	ldr	r3, [pc, #16]	@ (8012b50 <_vfiprintf_r+0x228>)
 8012b3e:	f7fd fe2b 	bl	8010798 <_printf_i>
 8012b42:	e7e4      	b.n	8012b0e <_vfiprintf_r+0x1e6>
 8012b44:	08013538 	.word	0x08013538
 8012b48:	08013542 	.word	0x08013542
 8012b4c:	08010261 	.word	0x08010261
 8012b50:	08012905 	.word	0x08012905
 8012b54:	0801353e 	.word	0x0801353e

08012b58 <__swbuf_r>:
 8012b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b5a:	460e      	mov	r6, r1
 8012b5c:	4614      	mov	r4, r2
 8012b5e:	4605      	mov	r5, r0
 8012b60:	b118      	cbz	r0, 8012b6a <__swbuf_r+0x12>
 8012b62:	6a03      	ldr	r3, [r0, #32]
 8012b64:	b90b      	cbnz	r3, 8012b6a <__swbuf_r+0x12>
 8012b66:	f7fd ffc3 	bl	8010af0 <__sinit>
 8012b6a:	69a3      	ldr	r3, [r4, #24]
 8012b6c:	60a3      	str	r3, [r4, #8]
 8012b6e:	89a3      	ldrh	r3, [r4, #12]
 8012b70:	071a      	lsls	r2, r3, #28
 8012b72:	d501      	bpl.n	8012b78 <__swbuf_r+0x20>
 8012b74:	6923      	ldr	r3, [r4, #16]
 8012b76:	b943      	cbnz	r3, 8012b8a <__swbuf_r+0x32>
 8012b78:	4621      	mov	r1, r4
 8012b7a:	4628      	mov	r0, r5
 8012b7c:	f000 f82a 	bl	8012bd4 <__swsetup_r>
 8012b80:	b118      	cbz	r0, 8012b8a <__swbuf_r+0x32>
 8012b82:	f04f 37ff 	mov.w	r7, #4294967295
 8012b86:	4638      	mov	r0, r7
 8012b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	b2f6      	uxtb	r6, r6
 8012b8e:	6922      	ldr	r2, [r4, #16]
 8012b90:	4637      	mov	r7, r6
 8012b92:	1a98      	subs	r0, r3, r2
 8012b94:	6963      	ldr	r3, [r4, #20]
 8012b96:	4283      	cmp	r3, r0
 8012b98:	dc05      	bgt.n	8012ba6 <__swbuf_r+0x4e>
 8012b9a:	4621      	mov	r1, r4
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	f7ff fda7 	bl	80126f0 <_fflush_r>
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	d1ed      	bne.n	8012b82 <__swbuf_r+0x2a>
 8012ba6:	68a3      	ldr	r3, [r4, #8]
 8012ba8:	3b01      	subs	r3, #1
 8012baa:	60a3      	str	r3, [r4, #8]
 8012bac:	6823      	ldr	r3, [r4, #0]
 8012bae:	1c5a      	adds	r2, r3, #1
 8012bb0:	6022      	str	r2, [r4, #0]
 8012bb2:	701e      	strb	r6, [r3, #0]
 8012bb4:	1c43      	adds	r3, r0, #1
 8012bb6:	6962      	ldr	r2, [r4, #20]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d004      	beq.n	8012bc6 <__swbuf_r+0x6e>
 8012bbc:	89a3      	ldrh	r3, [r4, #12]
 8012bbe:	07db      	lsls	r3, r3, #31
 8012bc0:	d5e1      	bpl.n	8012b86 <__swbuf_r+0x2e>
 8012bc2:	2e0a      	cmp	r6, #10
 8012bc4:	d1df      	bne.n	8012b86 <__swbuf_r+0x2e>
 8012bc6:	4621      	mov	r1, r4
 8012bc8:	4628      	mov	r0, r5
 8012bca:	f7ff fd91 	bl	80126f0 <_fflush_r>
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	d0d9      	beq.n	8012b86 <__swbuf_r+0x2e>
 8012bd2:	e7d6      	b.n	8012b82 <__swbuf_r+0x2a>

08012bd4 <__swsetup_r>:
 8012bd4:	b538      	push	{r3, r4, r5, lr}
 8012bd6:	4b29      	ldr	r3, [pc, #164]	@ (8012c7c <__swsetup_r+0xa8>)
 8012bd8:	4605      	mov	r5, r0
 8012bda:	460c      	mov	r4, r1
 8012bdc:	6818      	ldr	r0, [r3, #0]
 8012bde:	b118      	cbz	r0, 8012be8 <__swsetup_r+0x14>
 8012be0:	6a03      	ldr	r3, [r0, #32]
 8012be2:	b90b      	cbnz	r3, 8012be8 <__swsetup_r+0x14>
 8012be4:	f7fd ff84 	bl	8010af0 <__sinit>
 8012be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bec:	0719      	lsls	r1, r3, #28
 8012bee:	d422      	bmi.n	8012c36 <__swsetup_r+0x62>
 8012bf0:	06da      	lsls	r2, r3, #27
 8012bf2:	d407      	bmi.n	8012c04 <__swsetup_r+0x30>
 8012bf4:	2209      	movs	r2, #9
 8012bf6:	602a      	str	r2, [r5, #0]
 8012bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012c00:	81a3      	strh	r3, [r4, #12]
 8012c02:	e033      	b.n	8012c6c <__swsetup_r+0x98>
 8012c04:	0758      	lsls	r0, r3, #29
 8012c06:	d512      	bpl.n	8012c2e <__swsetup_r+0x5a>
 8012c08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c0a:	b141      	cbz	r1, 8012c1e <__swsetup_r+0x4a>
 8012c0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c10:	4299      	cmp	r1, r3
 8012c12:	d002      	beq.n	8012c1a <__swsetup_r+0x46>
 8012c14:	4628      	mov	r0, r5
 8012c16:	f7fe ff07 	bl	8011a28 <_free_r>
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c1e:	89a3      	ldrh	r3, [r4, #12]
 8012c20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012c24:	81a3      	strh	r3, [r4, #12]
 8012c26:	2300      	movs	r3, #0
 8012c28:	6063      	str	r3, [r4, #4]
 8012c2a:	6923      	ldr	r3, [r4, #16]
 8012c2c:	6023      	str	r3, [r4, #0]
 8012c2e:	89a3      	ldrh	r3, [r4, #12]
 8012c30:	f043 0308 	orr.w	r3, r3, #8
 8012c34:	81a3      	strh	r3, [r4, #12]
 8012c36:	6923      	ldr	r3, [r4, #16]
 8012c38:	b94b      	cbnz	r3, 8012c4e <__swsetup_r+0x7a>
 8012c3a:	89a3      	ldrh	r3, [r4, #12]
 8012c3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c44:	d003      	beq.n	8012c4e <__swsetup_r+0x7a>
 8012c46:	4621      	mov	r1, r4
 8012c48:	4628      	mov	r0, r5
 8012c4a:	f000 f882 	bl	8012d52 <__smakebuf_r>
 8012c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c52:	f013 0201 	ands.w	r2, r3, #1
 8012c56:	d00a      	beq.n	8012c6e <__swsetup_r+0x9a>
 8012c58:	2200      	movs	r2, #0
 8012c5a:	60a2      	str	r2, [r4, #8]
 8012c5c:	6962      	ldr	r2, [r4, #20]
 8012c5e:	4252      	negs	r2, r2
 8012c60:	61a2      	str	r2, [r4, #24]
 8012c62:	6922      	ldr	r2, [r4, #16]
 8012c64:	b942      	cbnz	r2, 8012c78 <__swsetup_r+0xa4>
 8012c66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012c6a:	d1c5      	bne.n	8012bf8 <__swsetup_r+0x24>
 8012c6c:	bd38      	pop	{r3, r4, r5, pc}
 8012c6e:	0799      	lsls	r1, r3, #30
 8012c70:	bf58      	it	pl
 8012c72:	6962      	ldrpl	r2, [r4, #20]
 8012c74:	60a2      	str	r2, [r4, #8]
 8012c76:	e7f4      	b.n	8012c62 <__swsetup_r+0x8e>
 8012c78:	2000      	movs	r0, #0
 8012c7a:	e7f7      	b.n	8012c6c <__swsetup_r+0x98>
 8012c7c:	200000c0 	.word	0x200000c0

08012c80 <_raise_r>:
 8012c80:	291f      	cmp	r1, #31
 8012c82:	b538      	push	{r3, r4, r5, lr}
 8012c84:	4605      	mov	r5, r0
 8012c86:	460c      	mov	r4, r1
 8012c88:	d904      	bls.n	8012c94 <_raise_r+0x14>
 8012c8a:	2316      	movs	r3, #22
 8012c8c:	6003      	str	r3, [r0, #0]
 8012c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c92:	bd38      	pop	{r3, r4, r5, pc}
 8012c94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012c96:	b112      	cbz	r2, 8012c9e <_raise_r+0x1e>
 8012c98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c9c:	b94b      	cbnz	r3, 8012cb2 <_raise_r+0x32>
 8012c9e:	4628      	mov	r0, r5
 8012ca0:	f000 f830 	bl	8012d04 <_getpid_r>
 8012ca4:	4622      	mov	r2, r4
 8012ca6:	4601      	mov	r1, r0
 8012ca8:	4628      	mov	r0, r5
 8012caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cae:	f000 b817 	b.w	8012ce0 <_kill_r>
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d00a      	beq.n	8012ccc <_raise_r+0x4c>
 8012cb6:	1c59      	adds	r1, r3, #1
 8012cb8:	d103      	bne.n	8012cc2 <_raise_r+0x42>
 8012cba:	2316      	movs	r3, #22
 8012cbc:	6003      	str	r3, [r0, #0]
 8012cbe:	2001      	movs	r0, #1
 8012cc0:	e7e7      	b.n	8012c92 <_raise_r+0x12>
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012cca:	4798      	blx	r3
 8012ccc:	2000      	movs	r0, #0
 8012cce:	e7e0      	b.n	8012c92 <_raise_r+0x12>

08012cd0 <raise>:
 8012cd0:	4b02      	ldr	r3, [pc, #8]	@ (8012cdc <raise+0xc>)
 8012cd2:	4601      	mov	r1, r0
 8012cd4:	6818      	ldr	r0, [r3, #0]
 8012cd6:	f7ff bfd3 	b.w	8012c80 <_raise_r>
 8012cda:	bf00      	nop
 8012cdc:	200000c0 	.word	0x200000c0

08012ce0 <_kill_r>:
 8012ce0:	b538      	push	{r3, r4, r5, lr}
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	4d06      	ldr	r5, [pc, #24]	@ (8012d00 <_kill_r+0x20>)
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	4608      	mov	r0, r1
 8012cea:	4611      	mov	r1, r2
 8012cec:	602b      	str	r3, [r5, #0]
 8012cee:	f7f2 f9cd 	bl	800508c <_kill>
 8012cf2:	1c43      	adds	r3, r0, #1
 8012cf4:	d102      	bne.n	8012cfc <_kill_r+0x1c>
 8012cf6:	682b      	ldr	r3, [r5, #0]
 8012cf8:	b103      	cbz	r3, 8012cfc <_kill_r+0x1c>
 8012cfa:	6023      	str	r3, [r4, #0]
 8012cfc:	bd38      	pop	{r3, r4, r5, pc}
 8012cfe:	bf00      	nop
 8012d00:	20005d30 	.word	0x20005d30

08012d04 <_getpid_r>:
 8012d04:	f7f2 b9ba 	b.w	800507c <_getpid>

08012d08 <__swhatbuf_r>:
 8012d08:	b570      	push	{r4, r5, r6, lr}
 8012d0a:	460c      	mov	r4, r1
 8012d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d10:	b096      	sub	sp, #88	@ 0x58
 8012d12:	4615      	mov	r5, r2
 8012d14:	2900      	cmp	r1, #0
 8012d16:	461e      	mov	r6, r3
 8012d18:	da0c      	bge.n	8012d34 <__swhatbuf_r+0x2c>
 8012d1a:	89a3      	ldrh	r3, [r4, #12]
 8012d1c:	2100      	movs	r1, #0
 8012d1e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012d22:	bf14      	ite	ne
 8012d24:	2340      	movne	r3, #64	@ 0x40
 8012d26:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012d2a:	2000      	movs	r0, #0
 8012d2c:	6031      	str	r1, [r6, #0]
 8012d2e:	602b      	str	r3, [r5, #0]
 8012d30:	b016      	add	sp, #88	@ 0x58
 8012d32:	bd70      	pop	{r4, r5, r6, pc}
 8012d34:	466a      	mov	r2, sp
 8012d36:	f000 f849 	bl	8012dcc <_fstat_r>
 8012d3a:	2800      	cmp	r0, #0
 8012d3c:	dbed      	blt.n	8012d1a <__swhatbuf_r+0x12>
 8012d3e:	9901      	ldr	r1, [sp, #4]
 8012d40:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012d44:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012d48:	4259      	negs	r1, r3
 8012d4a:	4159      	adcs	r1, r3
 8012d4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d50:	e7eb      	b.n	8012d2a <__swhatbuf_r+0x22>

08012d52 <__smakebuf_r>:
 8012d52:	898b      	ldrh	r3, [r1, #12]
 8012d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d56:	079d      	lsls	r5, r3, #30
 8012d58:	4606      	mov	r6, r0
 8012d5a:	460c      	mov	r4, r1
 8012d5c:	d507      	bpl.n	8012d6e <__smakebuf_r+0x1c>
 8012d5e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012d62:	6023      	str	r3, [r4, #0]
 8012d64:	6123      	str	r3, [r4, #16]
 8012d66:	2301      	movs	r3, #1
 8012d68:	6163      	str	r3, [r4, #20]
 8012d6a:	b003      	add	sp, #12
 8012d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d6e:	ab01      	add	r3, sp, #4
 8012d70:	466a      	mov	r2, sp
 8012d72:	f7ff ffc9 	bl	8012d08 <__swhatbuf_r>
 8012d76:	9f00      	ldr	r7, [sp, #0]
 8012d78:	4605      	mov	r5, r0
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	4639      	mov	r1, r7
 8012d7e:	f7fe fec7 	bl	8011b10 <_malloc_r>
 8012d82:	b948      	cbnz	r0, 8012d98 <__smakebuf_r+0x46>
 8012d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d88:	059a      	lsls	r2, r3, #22
 8012d8a:	d4ee      	bmi.n	8012d6a <__smakebuf_r+0x18>
 8012d8c:	f023 0303 	bic.w	r3, r3, #3
 8012d90:	f043 0302 	orr.w	r3, r3, #2
 8012d94:	81a3      	strh	r3, [r4, #12]
 8012d96:	e7e2      	b.n	8012d5e <__smakebuf_r+0xc>
 8012d98:	89a3      	ldrh	r3, [r4, #12]
 8012d9a:	6020      	str	r0, [r4, #0]
 8012d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012da0:	81a3      	strh	r3, [r4, #12]
 8012da2:	9b01      	ldr	r3, [sp, #4]
 8012da4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012da8:	b15b      	cbz	r3, 8012dc2 <__smakebuf_r+0x70>
 8012daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dae:	4630      	mov	r0, r6
 8012db0:	f000 f81e 	bl	8012df0 <_isatty_r>
 8012db4:	b128      	cbz	r0, 8012dc2 <__smakebuf_r+0x70>
 8012db6:	89a3      	ldrh	r3, [r4, #12]
 8012db8:	f023 0303 	bic.w	r3, r3, #3
 8012dbc:	f043 0301 	orr.w	r3, r3, #1
 8012dc0:	81a3      	strh	r3, [r4, #12]
 8012dc2:	89a3      	ldrh	r3, [r4, #12]
 8012dc4:	431d      	orrs	r5, r3
 8012dc6:	81a5      	strh	r5, [r4, #12]
 8012dc8:	e7cf      	b.n	8012d6a <__smakebuf_r+0x18>
	...

08012dcc <_fstat_r>:
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	2300      	movs	r3, #0
 8012dd0:	4d06      	ldr	r5, [pc, #24]	@ (8012dec <_fstat_r+0x20>)
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	4608      	mov	r0, r1
 8012dd6:	4611      	mov	r1, r2
 8012dd8:	602b      	str	r3, [r5, #0]
 8012dda:	f7f2 f9b7 	bl	800514c <_fstat>
 8012dde:	1c43      	adds	r3, r0, #1
 8012de0:	d102      	bne.n	8012de8 <_fstat_r+0x1c>
 8012de2:	682b      	ldr	r3, [r5, #0]
 8012de4:	b103      	cbz	r3, 8012de8 <_fstat_r+0x1c>
 8012de6:	6023      	str	r3, [r4, #0]
 8012de8:	bd38      	pop	{r3, r4, r5, pc}
 8012dea:	bf00      	nop
 8012dec:	20005d30 	.word	0x20005d30

08012df0 <_isatty_r>:
 8012df0:	b538      	push	{r3, r4, r5, lr}
 8012df2:	2300      	movs	r3, #0
 8012df4:	4d05      	ldr	r5, [pc, #20]	@ (8012e0c <_isatty_r+0x1c>)
 8012df6:	4604      	mov	r4, r0
 8012df8:	4608      	mov	r0, r1
 8012dfa:	602b      	str	r3, [r5, #0]
 8012dfc:	f7f2 f9b6 	bl	800516c <_isatty>
 8012e00:	1c43      	adds	r3, r0, #1
 8012e02:	d102      	bne.n	8012e0a <_isatty_r+0x1a>
 8012e04:	682b      	ldr	r3, [r5, #0]
 8012e06:	b103      	cbz	r3, 8012e0a <_isatty_r+0x1a>
 8012e08:	6023      	str	r3, [r4, #0]
 8012e0a:	bd38      	pop	{r3, r4, r5, pc}
 8012e0c:	20005d30 	.word	0x20005d30

08012e10 <sqrt>:
 8012e10:	b538      	push	{r3, r4, r5, lr}
 8012e12:	ec55 4b10 	vmov	r4, r5, d0
 8012e16:	ed2d 8b02 	vpush	{d8}
 8012e1a:	f000 f825 	bl	8012e68 <__ieee754_sqrt>
 8012e1e:	4622      	mov	r2, r4
 8012e20:	462b      	mov	r3, r5
 8012e22:	4620      	mov	r0, r4
 8012e24:	4629      	mov	r1, r5
 8012e26:	eeb0 8a40 	vmov.f32	s16, s0
 8012e2a:	eef0 8a60 	vmov.f32	s17, s1
 8012e2e:	f7ed fe8d 	bl	8000b4c <__aeabi_dcmpun>
 8012e32:	b990      	cbnz	r0, 8012e5a <sqrt+0x4a>
 8012e34:	2200      	movs	r2, #0
 8012e36:	2300      	movs	r3, #0
 8012e38:	4620      	mov	r0, r4
 8012e3a:	4629      	mov	r1, r5
 8012e3c:	f7ed fe5e 	bl	8000afc <__aeabi_dcmplt>
 8012e40:	b158      	cbz	r0, 8012e5a <sqrt+0x4a>
 8012e42:	f7fd ff57 	bl	8010cf4 <__errno>
 8012e46:	2321      	movs	r3, #33	@ 0x21
 8012e48:	2200      	movs	r2, #0
 8012e4a:	6003      	str	r3, [r0, #0]
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	4610      	mov	r0, r2
 8012e50:	4619      	mov	r1, r3
 8012e52:	f7ed fd0b 	bl	800086c <__aeabi_ddiv>
 8012e56:	ec41 0b18 	vmov	d8, r0, r1
 8012e5a:	eeb0 0a48 	vmov.f32	s0, s16
 8012e5e:	eef0 0a68 	vmov.f32	s1, s17
 8012e62:	ecbd 8b02 	vpop	{d8}
 8012e66:	bd38      	pop	{r3, r4, r5, pc}

08012e68 <__ieee754_sqrt>:
 8012e68:	4a6b      	ldr	r2, [pc, #428]	@ (8013018 <__ieee754_sqrt+0x1b0>)
 8012e6a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e6e:	ec55 4b10 	vmov	r4, r5, d0
 8012e72:	43aa      	bics	r2, r5
 8012e74:	462b      	mov	r3, r5
 8012e76:	4621      	mov	r1, r4
 8012e78:	d110      	bne.n	8012e9c <__ieee754_sqrt+0x34>
 8012e7a:	4622      	mov	r2, r4
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	4629      	mov	r1, r5
 8012e80:	f7ed fbca 	bl	8000618 <__aeabi_dmul>
 8012e84:	4602      	mov	r2, r0
 8012e86:	460b      	mov	r3, r1
 8012e88:	4620      	mov	r0, r4
 8012e8a:	4629      	mov	r1, r5
 8012e8c:	f7ed fa0e 	bl	80002ac <__adddf3>
 8012e90:	4604      	mov	r4, r0
 8012e92:	460d      	mov	r5, r1
 8012e94:	ec45 4b10 	vmov	d0, r4, r5
 8012e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e9c:	2d00      	cmp	r5, #0
 8012e9e:	dc0e      	bgt.n	8012ebe <__ieee754_sqrt+0x56>
 8012ea0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012ea4:	4322      	orrs	r2, r4
 8012ea6:	d0f5      	beq.n	8012e94 <__ieee754_sqrt+0x2c>
 8012ea8:	b19d      	cbz	r5, 8012ed2 <__ieee754_sqrt+0x6a>
 8012eaa:	4622      	mov	r2, r4
 8012eac:	4620      	mov	r0, r4
 8012eae:	4629      	mov	r1, r5
 8012eb0:	f7ed f9fa 	bl	80002a8 <__aeabi_dsub>
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	f7ed fcd8 	bl	800086c <__aeabi_ddiv>
 8012ebc:	e7e8      	b.n	8012e90 <__ieee754_sqrt+0x28>
 8012ebe:	152a      	asrs	r2, r5, #20
 8012ec0:	d115      	bne.n	8012eee <__ieee754_sqrt+0x86>
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	e009      	b.n	8012eda <__ieee754_sqrt+0x72>
 8012ec6:	0acb      	lsrs	r3, r1, #11
 8012ec8:	3a15      	subs	r2, #21
 8012eca:	0549      	lsls	r1, r1, #21
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d0fa      	beq.n	8012ec6 <__ieee754_sqrt+0x5e>
 8012ed0:	e7f7      	b.n	8012ec2 <__ieee754_sqrt+0x5a>
 8012ed2:	462a      	mov	r2, r5
 8012ed4:	e7fa      	b.n	8012ecc <__ieee754_sqrt+0x64>
 8012ed6:	005b      	lsls	r3, r3, #1
 8012ed8:	3001      	adds	r0, #1
 8012eda:	02dc      	lsls	r4, r3, #11
 8012edc:	d5fb      	bpl.n	8012ed6 <__ieee754_sqrt+0x6e>
 8012ede:	1e44      	subs	r4, r0, #1
 8012ee0:	1b12      	subs	r2, r2, r4
 8012ee2:	f1c0 0420 	rsb	r4, r0, #32
 8012ee6:	fa21 f404 	lsr.w	r4, r1, r4
 8012eea:	4081      	lsls	r1, r0
 8012eec:	4323      	orrs	r3, r4
 8012eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ef2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012ef6:	07d2      	lsls	r2, r2, #31
 8012ef8:	f04f 0600 	mov.w	r6, #0
 8012efc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012f00:	ea4f 0565 	mov.w	r5, r5, asr #1
 8012f04:	f04f 0016 	mov.w	r0, #22
 8012f08:	4632      	mov	r2, r6
 8012f0a:	bf58      	it	pl
 8012f0c:	005b      	lslpl	r3, r3, #1
 8012f0e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012f12:	bf5c      	itt	pl
 8012f14:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012f18:	0049      	lslpl	r1, r1, #1
 8012f1a:	005b      	lsls	r3, r3, #1
 8012f1c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012f20:	0049      	lsls	r1, r1, #1
 8012f22:	1917      	adds	r7, r2, r4
 8012f24:	429f      	cmp	r7, r3
 8012f26:	bfde      	ittt	le
 8012f28:	193a      	addle	r2, r7, r4
 8012f2a:	1bdb      	suble	r3, r3, r7
 8012f2c:	1936      	addle	r6, r6, r4
 8012f2e:	0fcf      	lsrs	r7, r1, #31
 8012f30:	3801      	subs	r0, #1
 8012f32:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012f36:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012f3a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012f3e:	d1f0      	bne.n	8012f22 <__ieee754_sqrt+0xba>
 8012f40:	4604      	mov	r4, r0
 8012f42:	2720      	movs	r7, #32
 8012f44:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	eb00 0e0c 	add.w	lr, r0, ip
 8012f4e:	db02      	blt.n	8012f56 <__ieee754_sqrt+0xee>
 8012f50:	d113      	bne.n	8012f7a <__ieee754_sqrt+0x112>
 8012f52:	458e      	cmp	lr, r1
 8012f54:	d811      	bhi.n	8012f7a <__ieee754_sqrt+0x112>
 8012f56:	f1be 0f00 	cmp.w	lr, #0
 8012f5a:	eb0e 000c 	add.w	r0, lr, ip
 8012f5e:	da43      	bge.n	8012fe8 <__ieee754_sqrt+0x180>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	db41      	blt.n	8012fe8 <__ieee754_sqrt+0x180>
 8012f64:	f102 0801 	add.w	r8, r2, #1
 8012f68:	1a9b      	subs	r3, r3, r2
 8012f6a:	458e      	cmp	lr, r1
 8012f6c:	4464      	add	r4, ip
 8012f6e:	eba1 010e 	sub.w	r1, r1, lr
 8012f72:	bf88      	it	hi
 8012f74:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012f78:	4642      	mov	r2, r8
 8012f7a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012f7e:	3f01      	subs	r7, #1
 8012f80:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012f84:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012f88:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012f8c:	d1dc      	bne.n	8012f48 <__ieee754_sqrt+0xe0>
 8012f8e:	4319      	orrs	r1, r3
 8012f90:	d01b      	beq.n	8012fca <__ieee754_sqrt+0x162>
 8012f92:	f8df a088 	ldr.w	sl, [pc, #136]	@ 801301c <__ieee754_sqrt+0x1b4>
 8012f96:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8013020 <__ieee754_sqrt+0x1b8>
 8012f9a:	e9da 0100 	ldrd	r0, r1, [sl]
 8012f9e:	e9db 2300 	ldrd	r2, r3, [fp]
 8012fa2:	e9da 8900 	ldrd	r8, r9, [sl]
 8012fa6:	f7ed f97f 	bl	80002a8 <__aeabi_dsub>
 8012faa:	4602      	mov	r2, r0
 8012fac:	460b      	mov	r3, r1
 8012fae:	4640      	mov	r0, r8
 8012fb0:	4649      	mov	r1, r9
 8012fb2:	f7ed fdad 	bl	8000b10 <__aeabi_dcmple>
 8012fb6:	b140      	cbz	r0, 8012fca <__ieee754_sqrt+0x162>
 8012fb8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012fbc:	e9da 0100 	ldrd	r0, r1, [sl]
 8012fc0:	e9db 2300 	ldrd	r2, r3, [fp]
 8012fc4:	d112      	bne.n	8012fec <__ieee754_sqrt+0x184>
 8012fc6:	3601      	adds	r6, #1
 8012fc8:	463c      	mov	r4, r7
 8012fca:	1072      	asrs	r2, r6, #1
 8012fcc:	07f1      	lsls	r1, r6, #31
 8012fce:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8012fd2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012fd6:	bf48      	it	mi
 8012fd8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012fdc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012fe6:	e753      	b.n	8012e90 <__ieee754_sqrt+0x28>
 8012fe8:	4690      	mov	r8, r2
 8012fea:	e7bd      	b.n	8012f68 <__ieee754_sqrt+0x100>
 8012fec:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ff0:	f7ed f95c 	bl	80002ac <__adddf3>
 8012ff4:	4602      	mov	r2, r0
 8012ff6:	460b      	mov	r3, r1
 8012ff8:	4640      	mov	r0, r8
 8012ffa:	4649      	mov	r1, r9
 8012ffc:	f7ed fd7e 	bl	8000afc <__aeabi_dcmplt>
 8013000:	b128      	cbz	r0, 801300e <__ieee754_sqrt+0x1a6>
 8013002:	1ca0      	adds	r0, r4, #2
 8013004:	f104 0402 	add.w	r4, r4, #2
 8013008:	bf08      	it	eq
 801300a:	3601      	addeq	r6, #1
 801300c:	e7dd      	b.n	8012fca <__ieee754_sqrt+0x162>
 801300e:	1c63      	adds	r3, r4, #1
 8013010:	f023 0401 	bic.w	r4, r3, #1
 8013014:	e7d9      	b.n	8012fca <__ieee754_sqrt+0x162>
 8013016:	bf00      	nop
 8013018:	7ff00000 	.word	0x7ff00000
 801301c:	20000288 	.word	0x20000288
 8013020:	20000280 	.word	0x20000280

08013024 <_init>:
 8013024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013026:	bf00      	nop
 8013028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801302a:	bc08      	pop	{r3}
 801302c:	469e      	mov	lr, r3
 801302e:	4770      	bx	lr

08013030 <_fini>:
 8013030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013032:	bf00      	nop
 8013034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013036:	bc08      	pop	{r3}
 8013038:	469e      	mov	lr, r3
 801303a:	4770      	bx	lr
